
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116ac  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0801197c  0801197c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011cf4  08011cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011cfc  08011cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011d00  08011d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08011d04  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000994  2400006c  08011d70  0001306c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a00  08011d70  00013a00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025769  00000000  00000000  0001309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9a  00000000  00000000  00038803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db0  00000000  00000000  0003c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001721  00000000  00000000  0003e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392df  00000000  00000000  0003f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002666b  00000000  00000000  00078c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179288  00000000  00000000  0009f2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00218543  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008698  00000000  00000000  00218588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00220c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011964 	.word	0x08011964

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08011964 	.word	0x08011964

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f002 f918 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f9a6 	bl	8000a44 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 fa12 	bl	8000b20 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 fe76 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 fe54 	bl	80013ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f000 fa3e 	bl	8000b84 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000708:	f000 fad8 	bl	8000cbc <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070c:	f000 fb3e 	bl	8000d8c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000710:	f000 fbba 	bl	8000e88 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000714:	f000 fcd2 	bl	80010bc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000718:	f000 fdfc 	bl	8001314 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071c:	f000 fd86 	bl	800122c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000720:	f000 fdac 	bl	800127c <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000724:	f000 fcac 	bl	8001080 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000728:	f010 f9d8 	bl	8010adc <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072c:	f000 fc2a 	bl	8000f84 <MX_FDCAN3_Init>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000730:	2203      	movs	r2, #3
 8000732:	4999      	ldr	r1, [pc, #612]	@ (8000998 <main+0x2ac>)
 8000734:	4899      	ldr	r0, [pc, #612]	@ (800099c <main+0x2b0>)
 8000736:	f002 fe9f 	bl	8003478 <HAL_ADC_Start_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <main+0x5e>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000740:	4897      	ldr	r0, [pc, #604]	@ (80009a0 <main+0x2b4>)
 8000742:	f000 ff25 	bl	8001590 <print>
#endif
		Error_Handler();
 8000746:	f001 fb2f 	bl	8001da8 <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800074a:	4896      	ldr	r0, [pc, #600]	@ (80009a4 <main+0x2b8>)
 800074c:	f006 fe76 	bl	800743c <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x74>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000756:	4894      	ldr	r0, [pc, #592]	@ (80009a8 <main+0x2bc>)
 8000758:	f000 ff1a 	bl	8001590 <print>
#endif
		Error_Handler();
 800075c:	f001 fb24 	bl	8001da8 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	488f      	ldr	r0, [pc, #572]	@ (80009a4 <main+0x2b8>)
 8000766:	f007 f85b 	bl	8007820 <HAL_FDCAN_ActivateNotification>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <main+0x8e>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000770:	488e      	ldr	r0, [pc, #568]	@ (80009ac <main+0x2c0>)
 8000772:	f000 ff0d 	bl	8001590 <print>
#endif
		Error_Handler();
 8000776:	f001 fb17 	bl	8001da8 <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800077a:	488d      	ldr	r0, [pc, #564]	@ (80009b0 <main+0x2c4>)
 800077c:	f006 fe5e 	bl	800743c <HAL_FDCAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0xa4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000786:	488b      	ldr	r0, [pc, #556]	@ (80009b4 <main+0x2c8>)
 8000788:	f000 ff02 	bl	8001590 <print>

#endif
		Error_Handler();
 800078c:	f001 fb0c 	bl	8001da8 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	4886      	ldr	r0, [pc, #536]	@ (80009b0 <main+0x2c4>)
 8000796:	f007 f843 	bl	8007820 <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80007a0:	4885      	ldr	r0, [pc, #532]	@ (80009b8 <main+0x2cc>)
 80007a2:	f000 fef5 	bl	8001590 <print>
#endif
		Error_Handler();
 80007a6:	f001 faff 	bl	8001da8 <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80007aa:	4884      	ldr	r0, [pc, #528]	@ (80009bc <main+0x2d0>)
 80007ac:	f006 fe46 	bl	800743c <HAL_FDCAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007b6:	4882      	ldr	r0, [pc, #520]	@ (80009c0 <main+0x2d4>)
 80007b8:	f000 feea 	bl	8001590 <print>

#endif
		Error_Handler();
 80007bc:	f001 faf4 	bl	8001da8 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	487d      	ldr	r0, [pc, #500]	@ (80009bc <main+0x2d0>)
 80007c6:	f007 f82b 	bl	8007820 <HAL_FDCAN_ActivateNotification>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007d0:	487c      	ldr	r0, [pc, #496]	@ (80009c4 <main+0x2d8>)
 80007d2:	f000 fedd 	bl	8001590 <print>
#endif
		Error_Handler();
 80007d6:	f001 fae7 	bl	8001da8 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007da:	487b      	ldr	r0, [pc, #492]	@ (80009c8 <main+0x2dc>)
 80007dc:	f000 fed8 	bl	8001590 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80007e0:	487a      	ldr	r0, [pc, #488]	@ (80009cc <main+0x2e0>)
 80007e2:	f00c ffb5 	bl	800d750 <HAL_TIM_Base_Start_IT>


	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007e6:	e006      	b.n	80007f6 <main+0x10a>
	{
		//print("Solicitar tensión inversor");
		if (config_inv_lectura_v == 1)
 80007e8:	4b79      	ldr	r3, [pc, #484]	@ (80009d0 <main+0x2e4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x10a>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007f0:	4878      	ldr	r0, [pc, #480]	@ (80009d4 <main+0x2e8>)
 80007f2:	f000 fecd 	bl	8001590 <print>
	while (config_inv_lectura_v == 0)
 80007f6:	4b76      	ldr	r3, [pc, #472]	@ (80009d0 <main+0x2e4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f4      	beq.n	80007e8 <main+0xfc>
	}

#if !CALIBRATION

	// Estado STAND BY inversor
	while (state != 3)
 80007fe:	e006      	b.n	800080e <main+0x122>
	{
		if (state == 3)
 8000800:	4b75      	ldr	r3, [pc, #468]	@ (80009d8 <main+0x2ec>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d102      	bne.n	800080e <main+0x122>
		{
#if DEBUG
			print("Precarga");
 8000808:	4874      	ldr	r0, [pc, #464]	@ (80009dc <main+0x2f0>)
 800080a:	f000 fec1 	bl	8001590 <print>
	while (state != 3)
 800080e:	4b72      	ldr	r3, [pc, #456]	@ (80009d8 <main+0x2ec>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d1f4      	bne.n	8000800 <main+0x114>
#endif
		}
	}
	// PRE-CHARGE
	while (precarga_inv == 0)
 8000816:	e031      	b.n	800087c <main+0x190>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000818:	4b71      	ldr	r3, [pc, #452]	@ (80009e0 <main+0x2f4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4971      	ldr	r1, [pc, #452]	@ (80009e4 <main+0x2f8>)
 8000820:	4871      	ldr	r0, [pc, #452]	@ (80009e8 <main+0x2fc>)
 8000822:	f010 fbff 	bl	8011024 <siprintf>
		print(TxBuffer);
 8000826:	4870      	ldr	r0, [pc, #448]	@ (80009e8 <main+0x2fc>)
 8000828:	f000 feb2 	bl	8001590 <print>
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800082c:	4b6f      	ldr	r3, [pc, #444]	@ (80009ec <main+0x300>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a6f      	ldr	r2, [pc, #444]	@ (80009f0 <main+0x304>)
 8000832:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000834:	4b6e      	ldr	r3, [pc, #440]	@ (80009f0 <main+0x304>)
 8000836:	2202      	movs	r2, #2
 8000838:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800083a:	4b6d      	ldr	r3, [pc, #436]	@ (80009f0 <main+0x304>)
 800083c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000840:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000842:	4b6b      	ldr	r3, [pc, #428]	@ (80009f0 <main+0x304>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000848:	4b69      	ldr	r3, [pc, #420]	@ (80009f0 <main+0x304>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 800084e:	4b64      	ldr	r3, [pc, #400]	@ (80009e0 <main+0x2f4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b67      	ldr	r3, [pc, #412]	@ (80009f4 <main+0x308>)
 8000856:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000858:	4b61      	ldr	r3, [pc, #388]	@ (80009e0 <main+0x2f4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	121b      	asrs	r3, r3, #8
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b64      	ldr	r3, [pc, #400]	@ (80009f4 <main+0x308>)
 8000862:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000864:	4a63      	ldr	r2, [pc, #396]	@ (80009f4 <main+0x308>)
 8000866:	4962      	ldr	r1, [pc, #392]	@ (80009f0 <main+0x304>)
 8000868:	4851      	ldr	r0, [pc, #324]	@ (80009b0 <main+0x2c4>)
 800086a:	f006 fe12 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		if (precarga_inv == 1)
 800086e:	4b62      	ldr	r3, [pc, #392]	@ (80009f8 <main+0x30c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d102      	bne.n	800087c <main+0x190>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 8000876:	4861      	ldr	r0, [pc, #388]	@ (80009fc <main+0x310>)
 8000878:	f000 fe8a 	bl	8001590 <print>
	while (precarga_inv == 0)
 800087c:	4b5e      	ldr	r3, [pc, #376]	@ (80009f8 <main+0x30c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0c9      	beq.n	8000818 <main+0x12c>
		//	precarga_inv = 1;
		//}
	}

#if DEBUG
	print("state : stand by");
 8000884:	485e      	ldr	r0, [pc, #376]	@ (8000a00 <main+0x314>)
 8000886:	f000 fe83 	bl	8001590 <print>
#endif

	while (state != 4)
 800088a:	e037      	b.n	80008fc <main+0x210>
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800088c:	4b5d      	ldr	r3, [pc, #372]	@ (8000a04 <main+0x318>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a5d      	ldr	r2, [pc, #372]	@ (8000a08 <main+0x31c>)
 8000892:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000894:	4b5c      	ldr	r3, [pc, #368]	@ (8000a08 <main+0x31c>)
 8000896:	2203      	movs	r2, #3
 8000898:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800089a:	4b5b      	ldr	r3, [pc, #364]	@ (8000a08 <main+0x31c>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 80008a0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a0c <main+0x320>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 80008a6:	4b59      	ldr	r3, [pc, #356]	@ (8000a0c <main+0x320>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 80008ac:	4b57      	ldr	r3, [pc, #348]	@ (8000a0c <main+0x320>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80008b2:	4a56      	ldr	r2, [pc, #344]	@ (8000a0c <main+0x320>)
 80008b4:	4954      	ldr	r1, [pc, #336]	@ (8000a08 <main+0x31c>)
 80008b6:	483b      	ldr	r0, [pc, #236]	@ (80009a4 <main+0x2b8>)
 80008b8:	f006 fdeb 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 80008bc:	4b52      	ldr	r3, [pc, #328]	@ (8000a08 <main+0x31c>)
 80008be:	f240 3262 	movw	r2, #866	@ 0x362
 80008c2:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 80008c4:	4b50      	ldr	r3, [pc, #320]	@ (8000a08 <main+0x31c>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 80008ca:	4b51      	ldr	r3, [pc, #324]	@ (8000a10 <main+0x324>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 80008d0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a0c <main+0x320>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 80008d6:	4b4d      	ldr	r3, [pc, #308]	@ (8000a0c <main+0x320>)
 80008d8:	2200      	movs	r2, #0
 80008da:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 80008dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000a10 <main+0x324>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b4a      	ldr	r3, [pc, #296]	@ (8000a0c <main+0x320>)
 80008e4:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 80008e6:	4b49      	ldr	r3, [pc, #292]	@ (8000a0c <main+0x320>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80008ec:	4a47      	ldr	r2, [pc, #284]	@ (8000a0c <main+0x320>)
 80008ee:	4946      	ldr	r1, [pc, #280]	@ (8000a08 <main+0x31c>)
 80008f0:	482c      	ldr	r0, [pc, #176]	@ (80009a4 <main+0x2b8>)
 80008f2:	f006 fdce 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 80008f6:	200a      	movs	r0, #10
 80008f8:	f002 f8a6 	bl	8002a48 <HAL_Delay>
	while (state != 4)
 80008fc:	4b36      	ldr	r3, [pc, #216]	@ (80009d8 <main+0x2ec>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d1c3      	bne.n	800088c <main+0x1a0>

	}

#if DEBUG
	print("state: ready");
 8000904:	4843      	ldr	r0, [pc, #268]	@ (8000a14 <main+0x328>)
 8000906:	f000 fe43 	bl	8001590 <print>

#endif

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	boton_arranque = 1; // VSV
 800090a:	4b43      	ldr	r3, [pc, #268]	@ (8000a18 <main+0x32c>)
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
	while (boton_arranque == 0)
 8000910:	e027      	b.n	8000962 <main+0x276>
	{

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000912:	2180      	movs	r1, #128	@ 0x80
 8000914:	4841      	ldr	r0, [pc, #260]	@ (8000a1c <main+0x330>)
 8000916:	f007 fea7 	bl	8008668 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	4b40      	ldr	r3, [pc, #256]	@ (8000a20 <main+0x334>)
 8000920:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (start_button_act == 1 && start_button_ant == 0)
 8000922:	4b3f      	ldr	r3, [pc, #252]	@ (8000a20 <main+0x334>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d11b      	bne.n	8000962 <main+0x276>
 800092a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a24 <main+0x338>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d117      	bne.n	8000962 <main+0x276>
		{

#if DEBUG
			print("Botón Start + Freno:");
 8000932:	483d      	ldr	r0, [pc, #244]	@ (8000a28 <main+0x33c>)
 8000934:	f000 fe2c 	bl	8001590 <print>
			printValue(s_freno);
 8000938:	4b3c      	ldr	r3, [pc, #240]	@ (8000a2c <main+0x340>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fe45 	bl	80015cc <printValue>
#endif
			if (s_freno > UMBRAL_FRENO)
 8000942:	4b3a      	ldr	r3, [pc, #232]	@ (8000a2c <main+0x340>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800094a:	4293      	cmp	r3, r2
 800094c:	dd06      	ble.n	800095c <main+0x270>
			{
				boton_arranque = 1;
 800094e:	4b32      	ldr	r3, [pc, #200]	@ (8000a18 <main+0x32c>)
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000954:	4836      	ldr	r0, [pc, #216]	@ (8000a30 <main+0x344>)
 8000956:	f000 fe1b 	bl	8001590 <print>
 800095a:	e002      	b.n	8000962 <main+0x276>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 800095c:	4835      	ldr	r0, [pc, #212]	@ (8000a34 <main+0x348>)
 800095e:	f000 fe17 	bl	8001590 <print>
	while (boton_arranque == 0)
 8000962:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <main+0x32c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d0d3      	beq.n	8000912 <main+0x226>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 800096a:	4833      	ldr	r0, [pc, #204]	@ (8000a38 <main+0x34c>)
 800096c:	f000 fe10 	bl	8001590 <print>
#endif
#if !CALIBRATION

	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 8000970:	2201      	movs	r2, #1
 8000972:	2102      	movs	r1, #2
 8000974:	4831      	ldr	r0, [pc, #196]	@ (8000a3c <main+0x350>)
 8000976:	f007 fe8f 	bl	8008698 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800097a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800097e:	f002 f863 	bl	8002a48 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	482d      	ldr	r0, [pc, #180]	@ (8000a3c <main+0x350>)
 8000988:	f007 fe86 	bl	8008698 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 800098c:	482c      	ldr	r0, [pc, #176]	@ (8000a40 <main+0x354>)
 800098e:	f000 fdff 	bl	8001590 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000992:	bf00      	nop
 8000994:	e7fd      	b.n	8000992 <main+0x2a6>
 8000996:	bf00      	nop
 8000998:	24000700 	.word	0x24000700
 800099c:	24000094 	.word	0x24000094
 80009a0:	0801197c 	.word	0x0801197c
 80009a4:	240001ec 	.word	0x240001ec
 80009a8:	0801199c 	.word	0x0801199c
 80009ac:	080119bc 	.word	0x080119bc
 80009b0:	2400028c 	.word	0x2400028c
 80009b4:	080119e4 	.word	0x080119e4
 80009b8:	08011a04 	.word	0x08011a04
 80009bc:	2400032c 	.word	0x2400032c
 80009c0:	08011a2c 	.word	0x08011a2c
 80009c4:	08011a4c 	.word	0x08011a4c
 80009c8:	08011a74 	.word	0x08011a74
 80009cc:	24000494 	.word	0x24000494
 80009d0:	2400008c 	.word	0x2400008c
 80009d4:	08011a90 	.word	0x08011a90
 80009d8:	2400071e 	.word	0x2400071e
 80009dc:	08011ac4 	.word	0x08011ac4
 80009e0:	240006f8 	.word	0x240006f8
 80009e4:	08011ad0 	.word	0x08011ad0
 80009e8:	24000790 	.word	0x24000790
 80009ec:	24000004 	.word	0x24000004
 80009f0:	24000654 	.word	0x24000654
 80009f4:	240006d8 	.word	0x240006d8
 80009f8:	24000088 	.word	0x24000088
 80009fc:	08011ae8 	.word	0x08011ae8
 8000a00:	08011b04 	.word	0x08011b04
 8000a04:	24000000 	.word	0x24000000
 8000a08:	24000608 	.word	0x24000608
 8000a0c:	240006c8 	.word	0x240006c8
 8000a10:	2400071c 	.word	0x2400071c
 8000a14:	08011b18 	.word	0x08011b18
 8000a18:	24000090 	.word	0x24000090
 8000a1c:	58021800 	.word	0x58021800
 8000a20:	240006f0 	.word	0x240006f0
 8000a24:	240006f4 	.word	0x240006f4
 8000a28:	08011b28 	.word	0x08011b28
 8000a2c:	24000710 	.word	0x24000710
 8000a30:	08011b40 	.word	0x08011b40
 8000a34:	08011b60 	.word	0x08011b60
 8000a38:	08011b7c 	.word	0x08011b7c
 8000a3c:	58020800 	.word	0x58020800
 8000a40:	08011b8c 	.word	0x08011b8c

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b09c      	sub	sp, #112	@ 0x70
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4e:	224c      	movs	r2, #76	@ 0x4c
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f010 fb08 	bl	8011068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f010 fb02 	bl	8011068 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a64:	2002      	movs	r0, #2
 8000a66:	f007 fe31 	bl	80086cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <SystemClock_Config+0xd8>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	4a2a      	ldr	r2, [pc, #168]	@ (8000b1c <SystemClock_Config+0xd8>)
 8000a74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a78:	6193      	str	r3, [r2, #24]
 8000a7a:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <SystemClock_Config+0xd8>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a86:	bf00      	nop
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <SystemClock_Config+0xd8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a94:	d1f8      	bne.n	8000a88 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000aac:	232c      	movs	r3, #44	@ 0x2c
 8000aae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000abc:	230c      	movs	r3, #12
 8000abe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f007 fe37 	bl	8008740 <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ad8:	f001 f966 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	233f      	movs	r3, #63	@ 0x3f
 8000ade:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aec:	2340      	movs	r3, #64	@ 0x40
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000af0:	2340      	movs	r3, #64	@ 0x40
 8000af2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000afa:	2340      	movs	r3, #64	@ 0x40
 8000afc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2103      	movs	r1, #3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f008 f9f6 	bl	8008ef4 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b0e:	f001 f94b 	bl	8001da8 <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3770      	adds	r7, #112	@ 0x70
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	58024800 	.word	0x58024800

08000b20 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0ae      	sub	sp, #184	@ 0xb8
 8000b24:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	22b8      	movs	r2, #184	@ 0xb8
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f010 fa9b 	bl	8011068 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000b32:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b36:	f04f 0300 	mov.w	r3, #0
 8000b3a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000b42:	2310      	movs	r3, #16
 8000b44:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b52:	23c0      	movs	r3, #192	@ 0xc0
 8000b54:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000b5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b62:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f008 fd4d 	bl	800960c <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000b78:	f001 f916 	bl	8001da8 <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	37b8      	adds	r7, #184	@ 0xb8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	@ 0x30
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	2224      	movs	r2, #36	@ 0x24
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f010 fa63 	bl	8011068 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ba2:	4b41      	ldr	r3, [pc, #260]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000ba4:	4a41      	ldr	r2, [pc, #260]	@ (8000cac <MX_ADC1_Init+0x128>)
 8000ba6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000baa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000bae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bc2:	4b39      	ldr	r3, [pc, #228]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bc8:	4b37      	ldr	r3, [pc, #220]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000bce:	4b36      	ldr	r3, [pc, #216]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bdc:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000be8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bea:	2203      	movs	r2, #3
 8000bec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c02:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c08:	4827      	ldr	r0, [pc, #156]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000c0a:	f002 fa2d 	bl	8003068 <HAL_ADC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c14:	f001 f8c8 	bl	8001da8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4821      	ldr	r0, [pc, #132]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000c24:	f003 fef0 	bl	8004a08 <HAL_ADCEx_MultiModeConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c2e:	f001 f8bb 	bl	8001da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_ADC1_Init+0x12c>)
 8000c34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c36:	2306      	movs	r3, #6
 8000c38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c3e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c44:	2304      	movs	r3, #4
 8000c46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	4619      	mov	r1, r3
 8000c56:	4814      	ldr	r0, [pc, #80]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000c58:	f002 ff42 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000c62:	f001 f8a1 	bl	8001da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_ADC1_Init+0x130>)
 8000c68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000c74:	f002 ff34 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000c7e:	f001 f893 	bl	8001da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <MX_ADC1_Init+0x134>)
 8000c84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c86:	2312      	movs	r3, #18
 8000c88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <MX_ADC1_Init+0x124>)
 8000c90:	f002 ff26 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000c9a:	f001 f885 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	@ 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	24000094 	.word	0x24000094
 8000cac:	40022000 	.word	0x40022000
 8000cb0:	10c00010 	.word	0x10c00010
 8000cb4:	14f00020 	.word	0x14f00020
 8000cb8:	08600004 	.word	0x08600004

08000cbc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2224      	movs	r2, #36	@ 0x24
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f010 f9cd 	bl	8011068 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8000d84 <MX_ADC2_Init+0xc8>)
 8000cd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000cd6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000cdc:	4b28      	ldr	r3, [pc, #160]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce2:	4b27      	ldr	r3, [pc, #156]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce8:	4b25      	ldr	r3, [pc, #148]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cee:	4b24      	ldr	r3, [pc, #144]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d20:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d26:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d34:	4812      	ldr	r0, [pc, #72]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d36:	f002 f997 	bl	8003068 <HAL_ADC_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000d40:	f001 f832 	bl	8001da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <MX_ADC2_Init+0xcc>)
 8000d46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d50:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d54:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d56:	2304      	movs	r3, #4
 8000d58:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_ADC2_Init+0xc4>)
 8000d6a:	f002 feb9 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000d74:	f001 f818 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	@ 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24000104 	.word	0x24000104
 8000d84:	40022100 	.word	0x40022100
 8000d88:	25b00200 	.word	0x25b00200

08000d8c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d92:	4b3b      	ldr	r3, [pc, #236]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000d94:	4a3b      	ldr	r2, [pc, #236]	@ (8000e84 <MX_FDCAN1_Init+0xf8>)
 8000d96:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d98:	4b39      	ldr	r3, [pc, #228]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d9e:	4b38      	ldr	r3, [pc, #224]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000da4:	4b36      	ldr	r3, [pc, #216]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000daa:	4b35      	ldr	r3, [pc, #212]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000db0:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000db6:	4b32      	ldr	r3, [pc, #200]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000db8:	2206      	movs	r2, #6
 8000dba:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000dbc:	4b30      	ldr	r3, [pc, #192]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000dca:	2205      	movs	r2, #5
 8000dcc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000dda:	4b29      	ldr	r3, [pc, #164]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000de0:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000de6:	4b26      	ldr	r3, [pc, #152]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000dec:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000df2:	4b23      	ldr	r3, [pc, #140]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000df8:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e00:	2204      	movs	r2, #4
 8000e02:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e06:	2220      	movs	r2, #32
 8000e08:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e18:	2204      	movs	r2, #4
 8000e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e22:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e3a:	4811      	ldr	r0, [pc, #68]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e3c:	f006 f8aa 	bl	8006f94 <HAL_FDCAN_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000e46:	f000 ffaf 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e52:	2302      	movs	r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e56:	2301      	movs	r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_FDCAN1_Init+0xf4>)
 8000e68:	f006 fa72 	bl	8007350 <HAL_FDCAN_ConfigFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000e72:	f000 ff99 	bl	8001da8 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	240001ec 	.word	0x240001ec
 8000e84:	4000a000 	.word	0x4000a000

08000e88 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000e90:	4a3b      	ldr	r2, [pc, #236]	@ (8000f80 <MX_FDCAN2_Init+0xf8>)
 8000e92:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e94:	4b39      	ldr	r3, [pc, #228]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e9a:	4b38      	ldr	r3, [pc, #224]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ea0:	4b36      	ldr	r3, [pc, #216]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ea6:	4b35      	ldr	r3, [pc, #212]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000eac:	4b33      	ldr	r3, [pc, #204]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000eb4:	2206      	movs	r2, #6
 8000eb6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ec6:	2205      	movs	r2, #5
 8000ec8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000eca:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000ed6:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000edc:	4b27      	ldr	r3, [pc, #156]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000eee:	4b23      	ldr	r3, [pc, #140]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000ef4:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000efa:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000efc:	2204      	movs	r2, #4
 8000efe:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f02:	2210      	movs	r2, #16
 8000f04:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f08:	2204      	movs	r2, #4
 8000f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f14:	2204      	movs	r2, #4
 8000f16:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f26:	2210      	movs	r2, #16
 8000f28:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f36:	4811      	ldr	r0, [pc, #68]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f38:	f006 f82c 	bl	8006f94 <HAL_FDCAN_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000f42:	f000 ff31 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000f46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f4a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f50:	2302      	movs	r3, #2
 8000f52:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f54:	2301      	movs	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_FDCAN2_Init+0xf4>)
 8000f66:	f006 f9f3 	bl	8007350 <HAL_FDCAN_ConfigFilter>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8000f70:	f000 ff1a 	bl	8001da8 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2400028c 	.word	0x2400028c
 8000f80:	4000a400 	.word	0x4000a400

08000f84 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000f8c:	4a3b      	ldr	r2, [pc, #236]	@ (800107c <MX_FDCAN3_Init+0xf8>)
 8000f8e:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f90:	4b39      	ldr	r3, [pc, #228]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000f96:	4b38      	ldr	r3, [pc, #224]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000f9c:	4b36      	ldr	r3, [pc, #216]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000fa2:	4b35      	ldr	r3, [pc, #212]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8000fae:	4b32      	ldr	r3, [pc, #200]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fb0:	2206      	movs	r2, #6
 8000fb2:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000fd8:	4b27      	ldr	r3, [pc, #156]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000fde:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8000fea:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8000ff0:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8000ffe:	2210      	movs	r2, #16
 8001000:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8001004:	2204      	movs	r2, #4
 8001006:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001008:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 800100a:	2200      	movs	r2, #0
 800100c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800100e:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8001010:	2204      	movs	r2, #4
 8001012:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8001016:	2200      	movs	r2, #0
 8001018:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 800101c:	2200      	movs	r2, #0
 800101e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8001022:	2210      	movs	r2, #16
 8001024:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8001028:	2200      	movs	r2, #0
 800102a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 800102e:	2204      	movs	r2, #4
 8001030:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001032:	4811      	ldr	r0, [pc, #68]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8001034:	f005 ffae 	bl	8006f94 <HAL_FDCAN_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 800103e:	f000 feb3 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001042:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001046:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800104c:	2302      	movs	r3, #2
 800104e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001050:	2301      	movs	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_FDCAN3_Init+0xf4>)
 8001062:	f006 f975 	bl	8007350 <HAL_FDCAN_ConfigFilter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 800106c:	f000 fe9c 	bl	8001da8 <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2400032c 	.word	0x2400032c
 800107c:	4000d400 	.word	0x4000d400

08001080 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_SDMMC1_SD_Init+0x34>)
 8001086:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <MX_SDMMC1_SD_Init+0x38>)
 8001088:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <MX_SDMMC1_SD_Init+0x34>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <MX_SDMMC1_SD_Init+0x34>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <MX_SDMMC1_SD_Init+0x34>)
 8001098:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800109c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <MX_SDMMC1_SD_Init+0x34>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <MX_SDMMC1_SD_Init+0x34>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	240003cc 	.word	0x240003cc
 80010b8:	52007000 	.word	0x52007000

080010bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b09c      	sub	sp, #112	@ 0x70
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2234      	movs	r2, #52	@ 0x34
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00f ffb6 	bl	8011068 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010fc:	4b49      	ldr	r3, [pc, #292]	@ (8001224 <MX_TIM1_Init+0x168>)
 80010fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001228 <MX_TIM1_Init+0x16c>)
 8001100:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001102:	4b48      	ldr	r3, [pc, #288]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b46      	ldr	r3, [pc, #280]	@ (8001224 <MX_TIM1_Init+0x168>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800110e:	4b45      	ldr	r3, [pc, #276]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001110:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001114:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800111c:	4b41      	ldr	r3, [pc, #260]	@ (8001224 <MX_TIM1_Init+0x168>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001122:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001128:	483e      	ldr	r0, [pc, #248]	@ (8001224 <MX_TIM1_Init+0x168>)
 800112a:	f00c fab9 	bl	800d6a0 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001134:	f000 fe38 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800113e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001142:	4619      	mov	r1, r3
 8001144:	4837      	ldr	r0, [pc, #220]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001146:	f00c fe05 	bl	800dd54 <HAL_TIM_ConfigClockSource>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001150:	f000 fe2a 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001154:	4833      	ldr	r0, [pc, #204]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001156:	f00c fb81 	bl	800d85c <HAL_TIM_PWM_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001160:	f000 fe22 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001170:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001174:	4619      	mov	r1, r3
 8001176:	482b      	ldr	r0, [pc, #172]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001178:	f00d fb32 	bl	800e7e0 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001182:	f000 fe11 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001186:	2360      	movs	r3, #96	@ 0x60
 8001188:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118e:	2300      	movs	r3, #0
 8001190:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001192:	2300      	movs	r3, #0
 8001194:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	481e      	ldr	r0, [pc, #120]	@ (8001224 <MX_TIM1_Init+0x168>)
 80011ac:	f00c fcbe 	bl	800db2c <HAL_TIM_PWM_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011b6:	f000 fdf7 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011be:	2204      	movs	r2, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	@ (8001224 <MX_TIM1_Init+0x168>)
 80011c4:	f00c fcb2 	bl	800db2c <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80011ce:	f000 fdeb 	bl	8001da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4807      	ldr	r0, [pc, #28]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001208:	f00d fb86 	bl	800e918 <HAL_TIMEx_ConfigBreakDeadTime>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001212:	f000 fdc9 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001218:	f001 f93e 	bl	8002498 <HAL_TIM_MspPostInit>

}
 800121c:	bf00      	nop
 800121e:	3770      	adds	r7, #112	@ 0x70
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	24000448 	.word	0x24000448
 8001228:	40010000 	.word	0x40010000

0800122c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <MX_TIM16_Init+0x48>)
 8001232:	4a11      	ldr	r2, [pc, #68]	@ (8001278 <MX_TIM16_Init+0x4c>)
 8001234:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_TIM16_Init+0x48>)
 8001238:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800123c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <MX_TIM16_Init+0x48>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <MX_TIM16_Init+0x48>)
 8001246:	f242 720f 	movw	r2, #9999	@ 0x270f
 800124a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_TIM16_Init+0x48>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <MX_TIM16_Init+0x48>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <MX_TIM16_Init+0x48>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_TIM16_Init+0x48>)
 8001260:	f00c fa1e 	bl	800d6a0 <HAL_TIM_Base_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800126a:	f000 fd9d 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	24000494 	.word	0x24000494
 8001278:	40014400 	.word	0x40014400

0800127c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001280:	4b22      	ldr	r3, [pc, #136]	@ (800130c <MX_USART1_UART_Init+0x90>)
 8001282:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <MX_USART1_UART_Init+0x94>)
 8001284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <MX_USART1_UART_Init+0x90>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <MX_USART1_UART_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <MX_USART1_UART_Init+0x90>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <MX_USART1_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012c6:	f00d fbd1 	bl	800ea6c <HAL_UART_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012d0:	f000 fd6a 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	480d      	ldr	r0, [pc, #52]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012d8:	f00e fd6b 	bl	800fdb2 <HAL_UARTEx_SetTxFifoThreshold>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012e2:	f000 fd61 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4808      	ldr	r0, [pc, #32]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012ea:	f00e fda0 	bl	800fe2e <HAL_UARTEx_SetRxFifoThreshold>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012f4:	f000 fd58 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_USART1_UART_Init+0x90>)
 80012fa:	f00e fd21 	bl	800fd40 <HAL_UARTEx_DisableFifoMode>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001304:	f000 fd50 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	240004e0 	.word	0x240004e0
 8001310:	40011000 	.word	0x40011000

08001314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001318:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <MX_USART2_UART_Init+0x94>)
 800131c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135c:	4811      	ldr	r0, [pc, #68]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 800135e:	f00d fb85 	bl	800ea6c <HAL_UART_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001368:	f000 fd1e 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136c:	2100      	movs	r1, #0
 800136e:	480d      	ldr	r0, [pc, #52]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001370:	f00e fd1f 	bl	800fdb2 <HAL_UARTEx_SetTxFifoThreshold>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800137a:	f000 fd15 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137e:	2100      	movs	r1, #0
 8001380:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001382:	f00e fd54 	bl	800fe2e <HAL_UARTEx_SetRxFifoThreshold>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800138c:	f000 fd0c 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <MX_USART2_UART_Init+0x90>)
 8001392:	f00e fcd5 	bl	800fd40 <HAL_UARTEx_DisableFifoMode>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800139c:	f000 fd04 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	24000574 	.word	0x24000574
 80013a8:	40004400 	.word	0x40004400

080013ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <MX_DMA_Init+0x3c>)
 80013b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013b8:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <MX_DMA_Init+0x3c>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <MX_DMA_Init+0x3c>)
 80013c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	200b      	movs	r0, #11
 80013d6:	f003 fcd4 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013da:	200b      	movs	r0, #11
 80013dc:	f003 fceb 	bl	8004db6 <HAL_NVIC_EnableIRQ>

}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	58024400 	.word	0x58024400

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	@ 0x38
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	4b5e      	ldr	r3, [pc, #376]	@ (800157c <MX_GPIO_Init+0x190>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001408:	4a5c      	ldr	r2, [pc, #368]	@ (800157c <MX_GPIO_Init+0x190>)
 800140a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001412:	4b5a      	ldr	r3, [pc, #360]	@ (800157c <MX_GPIO_Init+0x190>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141c:	623b      	str	r3, [r7, #32]
 800141e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001420:	4b56      	ldr	r3, [pc, #344]	@ (800157c <MX_GPIO_Init+0x190>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	4a55      	ldr	r2, [pc, #340]	@ (800157c <MX_GPIO_Init+0x190>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001430:	4b52      	ldr	r3, [pc, #328]	@ (800157c <MX_GPIO_Init+0x190>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b4f      	ldr	r3, [pc, #316]	@ (800157c <MX_GPIO_Init+0x190>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001444:	4a4d      	ldr	r2, [pc, #308]	@ (800157c <MX_GPIO_Init+0x190>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144e:	4b4b      	ldr	r3, [pc, #300]	@ (800157c <MX_GPIO_Init+0x190>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4b47      	ldr	r3, [pc, #284]	@ (800157c <MX_GPIO_Init+0x190>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	4a46      	ldr	r2, [pc, #280]	@ (800157c <MX_GPIO_Init+0x190>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146c:	4b43      	ldr	r3, [pc, #268]	@ (800157c <MX_GPIO_Init+0x190>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800147a:	4b40      	ldr	r3, [pc, #256]	@ (800157c <MX_GPIO_Init+0x190>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001480:	4a3e      	ldr	r2, [pc, #248]	@ (800157c <MX_GPIO_Init+0x190>)
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800148a:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <MX_GPIO_Init+0x190>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001490:	f003 0320 	and.w	r3, r3, #32
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001498:	4b38      	ldr	r3, [pc, #224]	@ (800157c <MX_GPIO_Init+0x190>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	4a37      	ldr	r2, [pc, #220]	@ (800157c <MX_GPIO_Init+0x190>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a8:	4b34      	ldr	r3, [pc, #208]	@ (800157c <MX_GPIO_Init+0x190>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b6:	4b31      	ldr	r3, [pc, #196]	@ (800157c <MX_GPIO_Init+0x190>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014bc:	4a2f      	ldr	r2, [pc, #188]	@ (800157c <MX_GPIO_Init+0x190>)
 80014be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014c6:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <MX_GPIO_Init+0x190>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b29      	ldr	r3, [pc, #164]	@ (800157c <MX_GPIO_Init+0x190>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014da:	4a28      	ldr	r2, [pc, #160]	@ (800157c <MX_GPIO_Init+0x190>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <MX_GPIO_Init+0x190>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2103      	movs	r1, #3
 80014f6:	4822      	ldr	r0, [pc, #136]	@ (8001580 <MX_GPIO_Init+0x194>)
 80014f8:	f007 f8ce 	bl	8008698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001502:	4820      	ldr	r0, [pc, #128]	@ (8001584 <MX_GPIO_Init+0x198>)
 8001504:	f007 f8c8 	bl	8008698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001508:	2303      	movs	r3, #3
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	4818      	ldr	r0, [pc, #96]	@ (8001580 <MX_GPIO_Init+0x194>)
 8001520:	f006 fefa 	bl	8008318 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4813      	ldr	r0, [pc, #76]	@ (8001588 <MX_GPIO_Init+0x19c>)
 800153a:	f006 feed 	bl	8008318 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 800153e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	480b      	ldr	r0, [pc, #44]	@ (8001584 <MX_GPIO_Init+0x198>)
 8001558:	f006 fede 	bl	8008318 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	@ (800158c <MX_GPIO_Init+0x1a0>)
 8001570:	f006 fed2 	bl	8008318 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	@ 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	58024400 	.word	0x58024400
 8001580:	58020800 	.word	0x58020800
 8001584:	58021000 	.word	0x58021000
 8001588:	58021400 	.word	0x58021400
 800158c:	58021800 	.word	0x58021800

08001590 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4909      	ldr	r1, [pc, #36]	@ (80015c0 <print+0x30>)
 800159c:	4809      	ldr	r0, [pc, #36]	@ (80015c4 <print+0x34>)
 800159e:	f00f fd41 	bl	8011024 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 80015a2:	4808      	ldr	r0, [pc, #32]	@ (80015c4 <print+0x34>)
 80015a4:	f7fe feb4 	bl	8000310 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	4904      	ldr	r1, [pc, #16]	@ (80015c4 <print+0x34>)
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <print+0x38>)
 80015b4:	f00d faaa 	bl	800eb0c <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	08011b9c 	.word	0x08011b9c
 80015c4:	2400072c 	.word	0x2400072c
 80015c8:	24000574 	.word	0x24000574

080015cc <printValue>:

void printValue(int value)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4909      	ldr	r1, [pc, #36]	@ (80015fc <printValue+0x30>)
 80015d8:	4809      	ldr	r0, [pc, #36]	@ (8001600 <printValue+0x34>)
 80015da:	f00f fd23 	bl	8011024 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 80015de:	4808      	ldr	r0, [pc, #32]	@ (8001600 <printValue+0x34>)
 80015e0:	f7fe fe96 	bl	8000310 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ec:	4904      	ldr	r1, [pc, #16]	@ (8001600 <printValue+0x34>)
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <printValue+0x38>)
 80015f0:	f00d fa8c 	bl	800eb0c <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	08011ba4 	.word	0x08011ba4
 8001600:	2400072c 	.word	0x2400072c
 8001604:	24000574 	.word	0x24000574

08001608 <printHex>:

void printHex(uint8_t value)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_msg, "0x%02X \n\r", value);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	461a      	mov	r2, r3
 8001616:	4909      	ldr	r1, [pc, #36]	@ (800163c <printHex+0x34>)
 8001618:	4809      	ldr	r0, [pc, #36]	@ (8001640 <printHex+0x38>)
 800161a:	f00f fd03 	bl	8011024 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800161e:	4808      	ldr	r0, [pc, #32]	@ (8001640 <printHex+0x38>)
 8001620:	f7fe fe76 	bl	8000310 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	4904      	ldr	r1, [pc, #16]	@ (8001640 <printHex+0x38>)
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <printHex+0x3c>)
 8001630:	f00d fa6c 	bl	800eb0c <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	08011bac 	.word	0x08011bac
 8001640:	2400072c 	.word	0x2400072c
 8001644:	24000574 	.word	0x24000574

08001648 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80cf 	beq.w	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a68      	ldr	r2, [pc, #416]	@ (8001818 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d167      	bne.n	800174c <HAL_FDCAN_RxFifo0Callback+0xf0>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 800167c:	4b67      	ldr	r3, [pc, #412]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800167e:	4a68      	ldr	r2, [pc, #416]	@ (8001820 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001680:	2140      	movs	r1, #64	@ 0x40
 8001682:	4868      	ldr	r0, [pc, #416]	@ (8001824 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001684:	f005 ff60 	bl	8007548 <HAL_FDCAN_GetRxMessage>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 80c0 	bne.w	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 8001690:	4b63      	ldr	r3, [pc, #396]	@ (8001820 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f240 4266 	movw	r2, #1126	@ 0x466
 8001698:	4293      	cmp	r3, r2
 800169a:	d041      	beq.n	8001720 <HAL_FDCAN_RxFifo0Callback+0xc4>
 800169c:	f240 4266 	movw	r2, #1126	@ 0x466
 80016a0:	4293      	cmp	r3, r2
 80016a2:	f200 80b5 	bhi.w	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
 80016a6:	f240 4261 	movw	r2, #1121	@ 0x461
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d004      	beq.n	80016b8 <HAL_FDCAN_RxFifo0Callback+0x5c>
 80016ae:	f240 4263 	movw	r2, #1123	@ 0x463
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01a      	beq.n	80016ec <HAL_FDCAN_RxFifo0Callback+0x90>

				}
			}
		}
	}
}
 80016b6:	e0ab      	b.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					state = RxData_Inv[4] & 0xF;
 80016b8:	4b58      	ldr	r3, [pc, #352]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016ba:	791b      	ldrb	r3, [r3, #4]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b59      	ldr	r3, [pc, #356]	@ (8001828 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80016c4:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 80016c6:	4b58      	ldr	r3, [pc, #352]	@ (8001828 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d004      	beq.n	80016d8 <HAL_FDCAN_RxFifo0Callback+0x7c>
 80016ce:	4b56      	ldr	r3, [pc, #344]	@ (8001828 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b0b      	cmp	r3, #11
 80016d4:	f040 8095 	bne.w	8001802 <HAL_FDCAN_RxFifo0Callback+0x1a6>
						error = RxData_Inv[2];
 80016d8:	4b50      	ldr	r3, [pc, #320]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016da:	789a      	ldrb	r2, [r3, #2]
 80016dc:	4b53      	ldr	r3, [pc, #332]	@ (800182c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80016de:	701a      	strb	r2, [r3, #0]
						printHex(error);
 80016e0:	4b52      	ldr	r3, [pc, #328]	@ (800182c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff8f 	bl	8001608 <printHex>
					break;
 80016ea:	e08a      	b.n	8001802 <HAL_FDCAN_RxFifo0Callback+0x1a6>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 80016ec:	4b4b      	ldr	r3, [pc, #300]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016ee:	79db      	ldrb	r3, [r3, #7]
 80016f0:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80016f4:	4b49      	ldr	r3, [pc, #292]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016f6:	7a1b      	ldrb	r3, [r3, #8]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	4313      	orrs	r3, r2
 80016fc:	4a47      	ldr	r2, [pc, #284]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016fe:	7952      	ldrb	r2, [r2, #5]
 8001700:	4313      	orrs	r3, r2
 8001702:	4a4b      	ldr	r2, [pc, #300]	@ (8001830 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001704:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001706:	4b4a      	ldr	r3, [pc, #296]	@ (8001830 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d079      	beq.n	8001806 <HAL_FDCAN_RxFifo0Callback+0x1aa>
						e_machine_rpm |= 0xFFF0000;
 8001712:	4b47      	ldr	r3, [pc, #284]	@ (8001830 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001718:	4313      	orrs	r3, r2
 800171a:	4a45      	ldr	r2, [pc, #276]	@ (8001830 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 800171c:	6013      	str	r3, [r2, #0]
					break;
 800171e:	e072      	b.n	8001806 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					if (RxHeader_Inv.DataLength == 6)
 8001720:	4b3f      	ldr	r3, [pc, #252]	@ (8001820 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b06      	cmp	r3, #6
 8001726:	d170      	bne.n	800180a <HAL_FDCAN_RxFifo0Callback+0x1ae>
						if (config_inv_lectura_v == 0)
 8001728:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <HAL_FDCAN_RxFifo0Callback+0xdc>
							config_inv_lectura_v = 1;
 8001730:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]
					break;
 8001736:	e068      	b.n	800180a <HAL_FDCAN_RxFifo0Callback+0x1ae>
						else if (config_inv_lectura_v == 1)
 8001738:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d164      	bne.n	800180a <HAL_FDCAN_RxFifo0Callback+0x1ae>
							inv_dc_bus_voltage = RxData_Inv[2];
 8001740:	4b36      	ldr	r3, [pc, #216]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001742:	789b      	ldrb	r3, [r3, #2]
 8001744:	461a      	mov	r2, r3
 8001746:	4b3d      	ldr	r3, [pc, #244]	@ (800183c <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001748:	601a      	str	r2, [r3, #0]
					break;
 800174a:	e05e      	b.n	800180a <HAL_FDCAN_RxFifo0Callback+0x1ae>
		else if (hfdcan->Instance == FDCAN2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a3b      	ldr	r2, [pc, #236]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d126      	bne.n	80017a4 <HAL_FDCAN_RxFifo0Callback+0x148>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001758:	4a3b      	ldr	r2, [pc, #236]	@ (8001848 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 800175a:	2140      	movs	r1, #64	@ 0x40
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f005 fef3 	bl	8007548 <HAL_FDCAN_GetRxMessage>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d153      	bne.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
				switch (RxHeader_Acu.Identifier)
 8001768:	4b37      	ldr	r3, [pc, #220]	@ (8001848 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b20      	cmp	r3, #32
 800176e:	d003      	beq.n	8001778 <HAL_FDCAN_RxFifo0Callback+0x11c>
 8001770:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001774:	d008      	beq.n	8001788 <HAL_FDCAN_RxFifo0Callback+0x12c>
}
 8001776:	e04b      	b.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					if (RxData_Acu[0] == 0)
 8001778:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d146      	bne.n	800180e <HAL_FDCAN_RxFifo0Callback+0x1b2>
						precarga_inv = 1;
 8001780:	4b32      	ldr	r3, [pc, #200]	@ (800184c <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
					break;
 8001786:	e042      	b.n	800180e <HAL_FDCAN_RxFifo0Callback+0x1b2>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001788:	4b2e      	ldr	r3, [pc, #184]	@ (8001844 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	4a2d      	ldr	r2, [pc, #180]	@ (8001844 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001790:	7852      	ldrb	r2, [r2, #1]
 8001792:	4313      	orrs	r3, r2
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179c:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 800179e:	edc3 7a00 	vstr	s15, [r3]
					break;
 80017a2:	e035      	b.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
		else if (hfdcan->Instance == FDCAN3)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001854 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d130      	bne.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 80017ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80017b0:	4a2a      	ldr	r2, [pc, #168]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x200>)
 80017b2:	2140      	movs	r1, #64	@ 0x40
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f005 fec7 	bl	8007548 <HAL_FDCAN_GetRxMessage>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d127      	bne.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
				switch (RxHeader_Dash.Identifier)
 80017c0:	4b26      	ldr	r3, [pc, #152]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x200>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f240 1233 	movw	r2, #307	@ 0x133
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d121      	bne.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 80017cc:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	b21b      	sxth	r3, r3
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x204>)
 80017e4:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 80017e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80017e8:	789b      	ldrb	r3, [r3, #2]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80017f2:	78db      	ldrb	r3, [r3, #3]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_FDCAN_RxFifo0Callback+0x208>)
 80017fe:	801a      	strh	r2, [r3, #0]
}
 8001800:	e006      	b.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					break;
 8001802:	bf00      	nop
 8001804:	e004      	b.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					break;
 8001806:	bf00      	nop
 8001808:	e002      	b.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					break;
 800180a:	bf00      	nop
 800180c:	e000      	b.n	8001810 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					break;
 800180e:	bf00      	nop
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	4000a000 	.word	0x4000a000
 800181c:	240006d0 	.word	0x240006d0
 8001820:	2400062c 	.word	0x2400062c
 8001824:	240001ec 	.word	0x240001ec
 8001828:	2400071e 	.word	0x2400071e
 800182c:	2400088a 	.word	0x2400088a
 8001830:	240006fc 	.word	0x240006fc
 8001834:	0fff0000 	.word	0x0fff0000
 8001838:	2400008c 	.word	0x2400008c
 800183c:	240006f8 	.word	0x240006f8
 8001840:	4000a400 	.word	0x4000a400
 8001844:	240006e0 	.word	0x240006e0
 8001848:	24000678 	.word	0x24000678
 800184c:	24000088 	.word	0x24000088
 8001850:	24000008 	.word	0x24000008
 8001854:	4000d400 	.word	0x4000d400
 8001858:	240006e8 	.word	0x240006e8
 800185c:	240006a0 	.word	0x240006a0
 8001860:	24000706 	.word	0x24000706
 8001864:	24000708 	.word	0x24000708

08001868 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a03      	ldr	r2, [pc, #12]	@ (8001884 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 8001876:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	2400028c 	.word	0x2400028c

08001888 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 800188e:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac0 <setTorque+0x238>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800189e:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 80018a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018aa:	ee17 3a90 	vmov	r3, s15
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b84      	ldr	r3, [pc, #528]	@ (8001ac4 <setTorque+0x23c>)
 80018b2:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 80018b4:	4b83      	ldr	r3, [pc, #524]	@ (8001ac4 <setTorque+0x23c>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	2b64      	cmp	r3, #100	@ 0x64
 80018ba:	d902      	bls.n	80018c2 <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 80018bc:	4b81      	ldr	r3, [pc, #516]	@ (8001ac4 <setTorque+0x23c>)
 80018be:	2264      	movs	r2, #100	@ 0x64
 80018c0:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 80018c2:	4b81      	ldr	r3, [pc, #516]	@ (8001ac8 <setTorque+0x240>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 80018ca:	ee07 3a90 	vmov	s15, r3
 80018ce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018d2:	ed9f 5b71 	vldr	d5, [pc, #452]	@ 8001a98 <setTorque+0x210>
 80018d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018de:	ee17 3a90 	vmov	r3, s15
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b79      	ldr	r3, [pc, #484]	@ (8001acc <setTorque+0x244>)
 80018e6:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 80018e8:	4b78      	ldr	r3, [pc, #480]	@ (8001acc <setTorque+0x244>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b64      	cmp	r3, #100	@ 0x64
 80018ee:	d902      	bls.n	80018f6 <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 80018f0:	4b76      	ldr	r3, [pc, #472]	@ (8001acc <setTorque+0x244>)
 80018f2:	2264      	movs	r2, #100	@ 0x64
 80018f4:	801a      	strh	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 80018f6:	4b73      	ldr	r3, [pc, #460]	@ (8001ac4 <setTorque+0x23c>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d911      	bls.n	8001922 <setTorque+0x9a>
 80018fe:	4b73      	ldr	r3, [pc, #460]	@ (8001acc <setTorque+0x244>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	2b08      	cmp	r3, #8
 8001904:	d90d      	bls.n	8001922 <setTorque+0x9a>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 8001906:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac4 <setTorque+0x23c>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b6f      	ldr	r3, [pc, #444]	@ (8001acc <setTorque+0x244>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	4413      	add	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	da00      	bge.n	8001918 <setTorque+0x90>
 8001916:	3301      	adds	r3, #1
 8001918:	105b      	asrs	r3, r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad0 <setTorque+0x248>)
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	e002      	b.n	8001928 <setTorque+0xa0>
	}
	else
	{
		torque_total = 0;
 8001922:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad0 <setTorque+0x248>)
 8001924:	2200      	movs	r2, #0
 8001926:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 8001928:	4b69      	ldr	r3, [pc, #420]	@ (8001ad0 <setTorque+0x248>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	2b09      	cmp	r3, #9
 800192e:	d803      	bhi.n	8001938 <setTorque+0xb0>
	{
		torque_total = 0;
 8001930:	4b67      	ldr	r3, [pc, #412]	@ (8001ad0 <setTorque+0x248>)
 8001932:	2200      	movs	r2, #0
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	e006      	b.n	8001946 <setTorque+0xbe>
	}
	else if (torque_total > 90)
 8001938:	4b65      	ldr	r3, [pc, #404]	@ (8001ad0 <setTorque+0x248>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b5a      	cmp	r3, #90	@ 0x5a
 800193e:	d902      	bls.n	8001946 <setTorque+0xbe>
	{
		torque_total = 100;
 8001940:	4b63      	ldr	r3, [pc, #396]	@ (8001ad0 <setTorque+0x248>)
 8001942:	2264      	movs	r2, #100	@ 0x64
 8001944:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <setTorque+0x24c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800194e:	4293      	cmp	r3, r2
 8001950:	dd0a      	ble.n	8001968 <setTorque+0xe0>
 8001952:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad0 <setTorque+0x248>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	2b19      	cmp	r3, #25
 8001958:	d906      	bls.n	8001968 <setTorque+0xe0>
	{
		print("EV_2_3");
 800195a:	485f      	ldr	r0, [pc, #380]	@ (8001ad8 <setTorque+0x250>)
 800195c:	f7ff fe18 	bl	8001590 <print>
		flag_EV_2_3 = 1;
 8001960:	4b5e      	ldr	r3, [pc, #376]	@ (8001adc <setTorque+0x254>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e00c      	b.n	8001982 <setTorque+0xfa>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 8001968:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad4 <setTorque+0x24c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001970:	4293      	cmp	r3, r2
 8001972:	dc06      	bgt.n	8001982 <setTorque+0xfa>
 8001974:	4b56      	ldr	r3, [pc, #344]	@ (8001ad0 <setTorque+0x248>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d802      	bhi.n	8001982 <setTorque+0xfa>
	{
		flag_EV_2_3 = 0;
 800197c:	4b57      	ldr	r3, [pc, #348]	@ (8001adc <setTorque+0x254>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001982:	4b50      	ldr	r3, [pc, #320]	@ (8001ac4 <setTorque+0x23c>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	4b50      	ldr	r3, [pc, #320]	@ (8001acc <setTorque+0x244>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	bfb8      	it	lt
 8001992:	425b      	neglt	r3, r3
 8001994:	2b0a      	cmp	r3, #10
 8001996:	dd06      	ble.n	80019a6 <setTorque+0x11e>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001998:	4851      	ldr	r0, [pc, #324]	@ (8001ae0 <setTorque+0x258>)
 800199a:	f7ff fdf9 	bl	8001590 <print>
		flag_T11_8_9 = 1;
 800199e:	4b51      	ldr	r3, [pc, #324]	@ (8001ae4 <setTorque+0x25c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e007      	b.n	80019b6 <setTorque+0x12e>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 80019a6:	f001 f843 	bl	8002a30 <HAL_GetTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae8 <setTorque+0x260>)
 80019ae:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 80019b0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae4 <setTorque+0x25c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 80019b6:	4b49      	ldr	r3, [pc, #292]	@ (8001adc <setTorque+0x254>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 80019bc:	4b4b      	ldr	r3, [pc, #300]	@ (8001aec <setTorque+0x264>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001af0 <setTorque+0x268>
 80019c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	d53a      	bpl.n	8001a46 <setTorque+0x1be>
	{
		if (v_celda_min > 2800)
 80019d0:	4b46      	ldr	r3, [pc, #280]	@ (8001aec <setTorque+0x264>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001af4 <setTorque+0x26c>
 80019da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	dd1f      	ble.n	8001a24 <setTorque+0x19c>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 80019e4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <setTorque+0x248>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019f0:	4b3e      	ldr	r3, [pc, #248]	@ (8001aec <setTorque+0x264>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019fa:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001aa0 <setTorque+0x218>
 80019fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a02:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001aa8 <setTorque+0x220>
 8001a06:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001a0a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a0e:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001ab0 <setTorque+0x228>
 8001a12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a16:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a1a:	ee17 2a90 	vmov	r2, s15
 8001a1e:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <setTorque+0x270>)
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e015      	b.n	8001a50 <setTorque+0x1c8>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001a24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <setTorque+0x248>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a30:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8001ab8 <setTorque+0x230>
 8001a34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a38:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a3c:	ee17 2a90 	vmov	r2, s15
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <setTorque+0x270>)
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e004      	b.n	8001a50 <setTorque+0x1c8>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001a46:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <setTorque+0x248>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <setTorque+0x270>)
 8001a4e:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001a50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <setTorque+0x248>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d912      	bls.n	8001a7e <setTorque+0x1f6>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001a58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <setTorque+0x248>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4a25      	ldr	r2, [pc, #148]	@ (8001afc <setTorque+0x274>)
 8001a68:	fb82 1203 	smull	r1, r2, r2, r3
 8001a6c:	441a      	add	r2, r3
 8001a6e:	1192      	asrs	r2, r2, #6
 8001a70:	17db      	asrs	r3, r3, #31
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b1a      	subs	r3, #26
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <setTorque+0x248>)
 8001a7c:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <setTorque+0x248>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001a8c:	88bb      	ldrh	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	33333334 	.word	0x33333334
 8001a9c:	401a3333 	.word	0x401a3333
 8001aa0:	a1cac083 	.word	0xa1cac083
 8001aa4:	3ff5b645 	.word	0x3ff5b645
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	40ad4c00 	.word	0x40ad4c00
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	408f4000 	.word	0x408f4000
 8001ab8:	9999999a 	.word	0x9999999a
 8001abc:	3fa99999 	.word	0x3fa99999
 8001ac0:	24000706 	.word	0x24000706
 8001ac4:	2400070a 	.word	0x2400070a
 8001ac8:	24000708 	.word	0x24000708
 8001acc:	2400070c 	.word	0x2400070c
 8001ad0:	24000714 	.word	0x24000714
 8001ad4:	24000710 	.word	0x24000710
 8001ad8:	08011bb8 	.word	0x08011bb8
 8001adc:	24000724 	.word	0x24000724
 8001ae0:	08011bc0 	.word	0x08011bc0
 8001ae4:	24000728 	.word	0x24000728
 8001ae8:	24000720 	.word	0x24000720
 8001aec:	24000008 	.word	0x24000008
 8001af0:	455ac000 	.word	0x455ac000
 8001af4:	452f0000 	.word	0x452f0000
 8001af8:	24000718 	.word	0x24000718
 8001afc:	b60b60b7 	.word	0xb60b60b7

08001b00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a97      	ldr	r2, [pc, #604]	@ (8001d68 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	f040 8126 	bne.w	8001d5e <HAL_TIM_PeriodElapsedCallback+0x25e>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if (state == 4 || state == 6)
 8001b12:	4b96      	ldr	r3, [pc, #600]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d003      	beq.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x22>
 8001b1a:	4b94      	ldr	r3, [pc, #592]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d117      	bne.n	8001b52 <HAL_TIM_PeriodElapsedCallback+0x52>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b22:	4b93      	ldr	r3, [pc, #588]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a93      	ldr	r2, [pc, #588]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b28:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001b2a:	4b92      	ldr	r3, [pc, #584]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001b30:	4b90      	ldr	r3, [pc, #576]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001b36:	4b90      	ldr	r3, [pc, #576]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b3c:	4b8e      	ldr	r3, [pc, #568]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001b42:	4b8d      	ldr	r3, [pc, #564]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b44:	2206      	movs	r2, #6
 8001b46:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b48:	4a8b      	ldr	r2, [pc, #556]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b4a:	498a      	ldr	r1, [pc, #552]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b4c:	488b      	ldr	r0, [pc, #556]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b4e:	f005 fca0 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		switch (state)
 8001b52:	4b86      	ldr	r3, [pc, #536]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b0d      	cmp	r3, #13
 8001b58:	f200 8101 	bhi.w	8001d5e <HAL_TIM_PeriodElapsedCallback+0x25e>
 8001b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b64 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001b9d 	.word	0x08001b9d
 8001b68:	08001d5f 	.word	0x08001d5f
 8001b6c:	08001d5f 	.word	0x08001d5f
 8001b70:	08001bcd 	.word	0x08001bcd
 8001b74:	08001c03 	.word	0x08001c03
 8001b78:	08001d5f 	.word	0x08001d5f
 8001b7c:	08001c4b 	.word	0x08001c4b
 8001b80:	08001d5f 	.word	0x08001d5f
 8001b84:	08001d5f 	.word	0x08001d5f
 8001b88:	08001d5f 	.word	0x08001d5f
 8001b8c:	08001cab 	.word	0x08001cab
 8001b90:	08001ceb 	.word	0x08001ceb
 8001b94:	08001d5f 	.word	0x08001d5f
 8001b98:	08001d27 	.word	0x08001d27
		{
		case 0:
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b9c:	4b74      	ldr	r3, [pc, #464]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a74      	ldr	r2, [pc, #464]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ba2:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001ba4:	4b73      	ldr	r3, [pc, #460]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001baa:	4b72      	ldr	r3, [pc, #456]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001bb0:	4b71      	ldr	r3, [pc, #452]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001bb6:	4b70      	ldr	r3, [pc, #448]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001bbc:	4b6e      	ldr	r3, [pc, #440]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bc2:	4a6d      	ldr	r2, [pc, #436]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bc4:	496b      	ldr	r1, [pc, #428]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bc6:	486d      	ldr	r0, [pc, #436]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001bc8:	f005 fc63 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>
		case 3:
#if DEBUG
			//print("state: standby");
#endif

			flag_react = 0;
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8001d80 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001bd2:	4b67      	ldr	r3, [pc, #412]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a67      	ldr	r2, [pc, #412]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bd8:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001bda:	4b66      	ldr	r3, [pc, #408]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bdc:	2203      	movs	r2, #3
 8001bde:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001be0:	4b64      	ldr	r3, [pc, #400]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001be6:	4b64      	ldr	r3, [pc, #400]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001bec:	4b62      	ldr	r3, [pc, #392]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001bf2:	4b61      	ldr	r3, [pc, #388]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bf8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bfa:	495e      	ldr	r1, [pc, #376]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bfc:	485f      	ldr	r0, [pc, #380]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001bfe:	f005 fc48 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>
			//}

		case 4:

#if DEBUG
			print("state: ready");
 8001c02:	4860      	ldr	r0, [pc, #384]	@ (8001d84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001c04:	f7ff fcc4 	bl	8001590 <print>
#endif
			TxHeader_Inv.Identifier = 0x362;
 8001c08:	4b5a      	ldr	r3, [pc, #360]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c0a:	f240 3262 	movw	r2, #866	@ 0x362
 8001c0e:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001c10:	4b58      	ldr	r3, [pc, #352]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c12:	2204      	movs	r2, #4
 8001c14:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 8001c16:	4b5c      	ldr	r3, [pc, #368]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001c1c:	4b56      	ldr	r3, [pc, #344]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c22:	4b55      	ldr	r3, [pc, #340]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001c28:	4b57      	ldr	r3, [pc, #348]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b52      	ldr	r3, [pc, #328]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c30:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001c32:	4b51      	ldr	r3, [pc, #324]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c38:	4a4f      	ldr	r2, [pc, #316]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c3a:	494e      	ldr	r1, [pc, #312]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c3c:	484f      	ldr	r0, [pc, #316]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c3e:	f005 fc28 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 0; // Reactivado
 8001c42:	4b4f      	ldr	r3, [pc, #316]	@ (8001d80 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]

			break;
 8001c48:	e089      	b.n	8001d5e <HAL_TIM_PeriodElapsedCallback+0x25e>
		case 6:
			print("state: torque");
 8001c4a:	4850      	ldr	r0, [pc, #320]	@ (8001d8c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c4c:	f7ff fca0 	bl	8001590 <print>

			// Request TORQUE inversor

			// flag_react = 1;

			real_torque = setTorque();
 8001c50:	f7ff fe1a 	bl	8001888 <setTorque>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b4b      	ldr	r3, [pc, #300]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c5a:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001c5c:	4b45      	ldr	r3, [pc, #276]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c5e:	f240 3262 	movw	r2, #866	@ 0x362
 8001c62:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001c64:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c66:	2204      	movs	r2, #4
 8001c68:	60da      	str	r2, [r3, #12]

			// real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001c6a:	4b47      	ldr	r3, [pc, #284]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b47      	ldr	r3, [pc, #284]	@ (8001d90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c72:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001c74:	4b44      	ldr	r3, [pc, #272]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b45      	ldr	r3, [pc, #276]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c80:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001c82:	4b3d      	ldr	r3, [pc, #244]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001c88:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001c8e:	4b40      	ldr	r3, [pc, #256]	@ (8001d90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c94:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001c96:	4b3f      	ldr	r3, [pc, #252]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	4b37      	ldr	r3, [pc, #220]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c9c:	70da      	strb	r2, [r3, #3]
			// TxData_Inv[2] = 0xFE;
			// TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c9e:	4a36      	ldr	r2, [pc, #216]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ca0:	4934      	ldr	r1, [pc, #208]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ca2:	4836      	ldr	r0, [pc, #216]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ca4:	f005 fbf5 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>
			//CAN_bus_off_check_reset(&hfdcan1);

			break;
 8001ca8:	e059      	b.n	8001d5e <HAL_TIM_PeriodElapsedCallback+0x25e>

		case 10:
			print("state: soft fault");
 8001caa:	483b      	ldr	r0, [pc, #236]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001cac:	f7ff fc70 	bl	8001590 <print>
			printValue(error);
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fc89 	bl	80015cc <printValue>

			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001cba:	4b2d      	ldr	r3, [pc, #180]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cc0:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001cce:	4b2a      	ldr	r3, [pc, #168]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001cd4:	4b28      	ldr	r3, [pc, #160]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x13;
 8001cda:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001cdc:	2213      	movs	r2, #19
 8001cde:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ce0:	4a25      	ldr	r2, [pc, #148]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ce2:	4924      	ldr	r1, [pc, #144]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ce4:	4825      	ldr	r0, [pc, #148]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ce6:	f005 fbd4 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
												  TxData_Inv);
				}*/

		case 11:
			print("state: hard fault");
 8001cea:	482d      	ldr	r0, [pc, #180]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001cec:	f7ff fc50 	bl	8001590 <print>
			flag_react = 1;
 8001cf0:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cfc:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d00:	2203      	movs	r2, #3
 8001d02:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001d10:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 13;
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d18:	220d      	movs	r2, #13
 8001d1a:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d1c:	4a16      	ldr	r2, [pc, #88]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d1e:	4915      	ldr	r1, [pc, #84]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d20:	4816      	ldr	r0, [pc, #88]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d22:	f005 fbb6 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>

		case 13:
			print("state: shutdown");
 8001d26:	481f      	ldr	r0, [pc, #124]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d28:	f7ff fc32 	bl	8001590 <print>
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a10      	ldr	r2, [pc, #64]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d32:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d36:	2203      	movs	r2, #3
 8001d38:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001d40:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d52:	4a09      	ldr	r2, [pc, #36]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d54:	4907      	ldr	r1, [pc, #28]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d56:	4809      	ldr	r0, [pc, #36]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d58:	f005 fb9b 	bl	8007492 <HAL_FDCAN_AddMessageToTxFifoQ>


			break;
 8001d5c:	bf00      	nop
		}
#endif
	}
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24000494 	.word	0x24000494
 8001d6c:	2400071e 	.word	0x2400071e
 8001d70:	24000000 	.word	0x24000000
 8001d74:	24000608 	.word	0x24000608
 8001d78:	240006c8 	.word	0x240006c8
 8001d7c:	240001ec 	.word	0x240001ec
 8001d80:	2400088b 	.word	0x2400088b
 8001d84:	08011b18 	.word	0x08011b18
 8001d88:	2400071c 	.word	0x2400071c
 8001d8c:	08011bc8 	.word	0x08011bc8
 8001d90:	24000716 	.word	0x24000716
 8001d94:	24000717 	.word	0x24000717
 8001d98:	08011bd8 	.word	0x08011bd8
 8001d9c:	2400088a 	.word	0x2400088a
 8001da0:	08011bec 	.word	0x08011bec
 8001da4:	08011c00 	.word	0x08011c00

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <Error_Handler+0x8>

08001db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_MspInit+0x30>)
 8001dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dc0:	4a08      	ldr	r2, [pc, #32]	@ (8001de4 <HAL_MspInit+0x30>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_MspInit+0x30>)
 8001dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	58024400 	.word	0x58024400

08001de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b090      	sub	sp, #64	@ 0x40
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a90      	ldr	r2, [pc, #576]	@ (8002048 <HAL_ADC_MspInit+0x260>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	f040 80a3 	bne.w	8001f52 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e0c:	4b8f      	ldr	r3, [pc, #572]	@ (800204c <HAL_ADC_MspInit+0x264>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a8e      	ldr	r2, [pc, #568]	@ (800204c <HAL_ADC_MspInit+0x264>)
 8001e14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e16:	4b8d      	ldr	r3, [pc, #564]	@ (800204c <HAL_ADC_MspInit+0x264>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10e      	bne.n	8001e3c <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e1e:	4b8c      	ldr	r3, [pc, #560]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e24:	4a8a      	ldr	r2, [pc, #552]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e26:	f043 0320 	orr.w	r3, r3, #32
 8001e2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e2e:	4b88      	ldr	r3, [pc, #544]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3c:	4b84      	ldr	r3, [pc, #528]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e42:	4a83      	ldr	r2, [pc, #524]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4c:	4b80      	ldr	r3, [pc, #512]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e60:	4a7b      	ldr	r2, [pc, #492]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6a:	4b79      	ldr	r3, [pc, #484]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	623b      	str	r3, [r7, #32]
 8001e76:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e78:	4b75      	ldr	r3, [pc, #468]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7e:	4a74      	ldr	r2, [pc, #464]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e80:	f043 0320 	orr.w	r3, r3, #32
 8001e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e88:	4b71      	ldr	r3, [pc, #452]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8001e96:	2330      	movs	r3, #48	@ 0x30
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	486a      	ldr	r0, [pc, #424]	@ (8002054 <HAL_ADC_MspInit+0x26c>)
 8001eaa:	f006 fa35 	bl	8008318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4865      	ldr	r0, [pc, #404]	@ (8002058 <HAL_ADC_MspInit+0x270>)
 8001ec2:	f006 fa29 	bl	8008318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001ec6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4860      	ldr	r0, [pc, #384]	@ (800205c <HAL_ADC_MspInit+0x274>)
 8001edc:	f006 fa1c 	bl	8008318 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001ee0:	4b5f      	ldr	r3, [pc, #380]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001ee2:	4a60      	ldr	r2, [pc, #384]	@ (8002064 <HAL_ADC_MspInit+0x27c>)
 8001ee4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001ee8:	2209      	movs	r2, #9
 8001eea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eec:	4b5c      	ldr	r3, [pc, #368]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ef8:	4b59      	ldr	r3, [pc, #356]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001efe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f00:	4b57      	ldr	r3, [pc, #348]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001f02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f08:	4b55      	ldr	r3, [pc, #340]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001f0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f0e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f10:	4b53      	ldr	r3, [pc, #332]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f18:	4b51      	ldr	r3, [pc, #324]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f1e:	4b50      	ldr	r3, [pc, #320]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f24:	484e      	ldr	r0, [pc, #312]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001f26:	f002 ff61 	bl	8004dec <HAL_DMA_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001f30:	f7ff ff3a 	bl	8001da8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a4a      	ldr	r2, [pc, #296]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001f38:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f3a:	4a49      	ldr	r2, [pc, #292]	@ (8002060 <HAL_ADC_MspInit+0x278>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2100      	movs	r1, #0
 8001f44:	2012      	movs	r0, #18
 8001f46:	f002 ff1c 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f4a:	2012      	movs	r0, #18
 8001f4c:	f002 ff33 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f50:	e076      	b.n	8002040 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a44      	ldr	r2, [pc, #272]	@ (8002068 <HAL_ADC_MspInit+0x280>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d171      	bne.n	8002040 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_ADC_MspInit+0x264>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	4a3a      	ldr	r2, [pc, #232]	@ (800204c <HAL_ADC_MspInit+0x264>)
 8001f64:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f66:	4b39      	ldr	r3, [pc, #228]	@ (800204c <HAL_ADC_MspInit+0x264>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d10e      	bne.n	8001f8c <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f6e:	4b38      	ldr	r3, [pc, #224]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f74:	4a36      	ldr	r2, [pc, #216]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001f76:	f043 0320 	orr.w	r3, r3, #32
 8001f7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8c:	4b30      	ldr	r3, [pc, #192]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f92:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b29      	ldr	r3, [pc, #164]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb0:	4a27      	ldr	r2, [pc, #156]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fba:	4b25      	ldr	r3, [pc, #148]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc8:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fce:	4a20      	ldr	r2, [pc, #128]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001fd0:	f043 0320 	orr.w	r3, r3, #32
 8001fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002050 <HAL_ADC_MspInit+0x268>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fea:	2303      	movs	r3, #3
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4816      	ldr	r0, [pc, #88]	@ (8002054 <HAL_ADC_MspInit+0x26c>)
 8001ffa:	f006 f98d 	bl	8008318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8001ffe:	2301      	movs	r3, #1
 8002000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002002:	2303      	movs	r3, #3
 8002004:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800200e:	4619      	mov	r1, r3
 8002010:	4811      	ldr	r0, [pc, #68]	@ (8002058 <HAL_ADC_MspInit+0x270>)
 8002012:	f006 f981 	bl	8008318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 8002016:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201c:	2303      	movs	r3, #3
 800201e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002028:	4619      	mov	r1, r3
 800202a:	480c      	ldr	r0, [pc, #48]	@ (800205c <HAL_ADC_MspInit+0x274>)
 800202c:	f006 f974 	bl	8008318 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	2012      	movs	r0, #18
 8002036:	f002 fea4 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800203a:	2012      	movs	r0, #18
 800203c:	f002 febb 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 8002040:	bf00      	nop
 8002042:	3740      	adds	r7, #64	@ 0x40
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40022000 	.word	0x40022000
 800204c:	2400088c 	.word	0x2400088c
 8002050:	58024400 	.word	0x58024400
 8002054:	58020800 	.word	0x58020800
 8002058:	58020400 	.word	0x58020400
 800205c:	58021400 	.word	0x58021400
 8002060:	24000174 	.word	0x24000174
 8002064:	40020010 	.word	0x40020010
 8002068:	40022100 	.word	0x40022100

0800206c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0bc      	sub	sp, #240	@ 0xf0
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	22b8      	movs	r2, #184	@ 0xb8
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f00e ffeb 	bl	8011068 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a8d      	ldr	r2, [pc, #564]	@ (80022cc <HAL_FDCAN_MspInit+0x260>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d157      	bne.n	800214c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800209c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ae:	f107 0320 	add.w	r3, r7, #32
 80020b2:	4618      	mov	r0, r3
 80020b4:	f007 faaa 	bl	800960c <HAL_RCCEx_PeriphCLKConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80020be:	f7ff fe73 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80020c2:	4b83      	ldr	r3, [pc, #524]	@ (80022d0 <HAL_FDCAN_MspInit+0x264>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	4a81      	ldr	r2, [pc, #516]	@ (80022d0 <HAL_FDCAN_MspInit+0x264>)
 80020ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80020cc:	4b80      	ldr	r3, [pc, #512]	@ (80022d0 <HAL_FDCAN_MspInit+0x264>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10e      	bne.n	80020f2 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80020d4:	4b7f      	ldr	r3, [pc, #508]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 80020d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80020da:	4a7e      	ldr	r2, [pc, #504]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80020e4:	4b7b      	ldr	r3, [pc, #492]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 80020e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80020ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f2:	4b78      	ldr	r3, [pc, #480]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	4a76      	ldr	r2, [pc, #472]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 80020fa:	f043 0308 	orr.w	r3, r3, #8
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002102:	4b74      	ldr	r3, [pc, #464]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002110:	2303      	movs	r3, #3
 8002112:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002128:	2309      	movs	r3, #9
 800212a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002132:	4619      	mov	r1, r3
 8002134:	4868      	ldr	r0, [pc, #416]	@ (80022d8 <HAL_FDCAN_MspInit+0x26c>)
 8002136:	f006 f8ef 	bl	8008318 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2101      	movs	r1, #1
 800213e:	2013      	movs	r0, #19
 8002140:	f002 fe1f 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002144:	2013      	movs	r0, #19
 8002146:	f002 fe36 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800214a:	e0ba      	b.n	80022c2 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a62      	ldr	r2, [pc, #392]	@ (80022dc <HAL_FDCAN_MspInit+0x270>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d158      	bne.n	8002208 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002156:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002168:	f107 0320 	add.w	r3, r7, #32
 800216c:	4618      	mov	r0, r3
 800216e:	f007 fa4d 	bl	800960c <HAL_RCCEx_PeriphCLKConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002178:	f7ff fe16 	bl	8001da8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800217c:	4b54      	ldr	r3, [pc, #336]	@ (80022d0 <HAL_FDCAN_MspInit+0x264>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	4a53      	ldr	r2, [pc, #332]	@ (80022d0 <HAL_FDCAN_MspInit+0x264>)
 8002184:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002186:	4b52      	ldr	r3, [pc, #328]	@ (80022d0 <HAL_FDCAN_MspInit+0x264>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d10e      	bne.n	80021ac <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800218e:	4b51      	ldr	r3, [pc, #324]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 8002190:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002194:	4a4f      	ldr	r2, [pc, #316]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800219e:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 80021a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	4b49      	ldr	r3, [pc, #292]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b2:	4a48      	ldr	r2, [pc, #288]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021bc:	4b45      	ldr	r3, [pc, #276]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80021ca:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80021ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80021e4:	2309      	movs	r3, #9
 80021e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021ee:	4619      	mov	r1, r3
 80021f0:	483b      	ldr	r0, [pc, #236]	@ (80022e0 <HAL_FDCAN_MspInit+0x274>)
 80021f2:	f006 f891 	bl	8008318 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2102      	movs	r1, #2
 80021fa:	2014      	movs	r0, #20
 80021fc:	f002 fdc1 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002200:	2014      	movs	r0, #20
 8002202:	f002 fdd8 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 8002206:	e05c      	b.n	80022c2 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a35      	ldr	r2, [pc, #212]	@ (80022e4 <HAL_FDCAN_MspInit+0x278>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d157      	bne.n	80022c2 <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002212:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	4618      	mov	r0, r3
 800222a:	f007 f9ef 	bl	800960c <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 8002234:	f7ff fdb8 	bl	8001da8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002238:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <HAL_FDCAN_MspInit+0x264>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	4a24      	ldr	r2, [pc, #144]	@ (80022d0 <HAL_FDCAN_MspInit+0x264>)
 8002240:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002242:	4b23      	ldr	r3, [pc, #140]	@ (80022d0 <HAL_FDCAN_MspInit+0x264>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10e      	bne.n	8002268 <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800224a:	4b22      	ldr	r3, [pc, #136]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 800224c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002250:	4a20      	ldr	r2, [pc, #128]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002256:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 800225c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002268:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 800226a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800226e:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 8002270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002274:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002278:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <HAL_FDCAN_MspInit+0x268>)
 800227a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800227e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002286:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800228a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80022a0:	2302      	movs	r3, #2
 80022a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022aa:	4619      	mov	r1, r3
 80022ac:	480e      	ldr	r0, [pc, #56]	@ (80022e8 <HAL_FDCAN_MspInit+0x27c>)
 80022ae:	f006 f833 	bl	8008318 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	209f      	movs	r0, #159	@ 0x9f
 80022b8:	f002 fd63 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 80022bc:	209f      	movs	r0, #159	@ 0x9f
 80022be:	f002 fd7a 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	37f0      	adds	r7, #240	@ 0xf0
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	4000a000 	.word	0x4000a000
 80022d0:	24000890 	.word	0x24000890
 80022d4:	58024400 	.word	0x58024400
 80022d8:	58020c00 	.word	0x58020c00
 80022dc:	4000a400 	.word	0x4000a400
 80022e0:	58020400 	.word	0x58020400
 80022e4:	4000d400 	.word	0x4000d400
 80022e8:	58021800 	.word	0x58021800

080022ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	@ 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3e      	ldr	r2, [pc, #248]	@ (8002404 <HAL_SD_MspInit+0x118>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d175      	bne.n	80023fa <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800230e:	4b3e      	ldr	r3, [pc, #248]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 8002310:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002314:	4a3c      	ldr	r2, [pc, #240]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800231e:	4b3a      	ldr	r3, [pc, #232]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 8002320:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232c:	4b36      	ldr	r3, [pc, #216]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 800232e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002332:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800233c:	4b32      	ldr	r3, [pc, #200]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800234a:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002350:	4a2d      	ldr	r2, [pc, #180]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 8002352:	f043 0308 	orr.w	r3, r3, #8
 8002356:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800235a:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 800235c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	4b27      	ldr	r3, [pc, #156]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 800236a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236e:	4a26      	ldr	r2, [pc, #152]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_SD_MspInit+0x11c>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002386:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800238a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002398:	230c      	movs	r3, #12
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	4619      	mov	r1, r3
 80023a2:	481a      	ldr	r0, [pc, #104]	@ (800240c <HAL_SD_MspInit+0x120>)
 80023a4:	f005 ffb8 	bl	8008318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023a8:	2304      	movs	r3, #4
 80023aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023b8:	230c      	movs	r3, #12
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	4813      	ldr	r0, [pc, #76]	@ (8002410 <HAL_SD_MspInit+0x124>)
 80023c4:	f005 ffa8 	bl	8008318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 80023da:	2307      	movs	r3, #7
 80023dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023de:	f107 031c 	add.w	r3, r7, #28
 80023e2:	4619      	mov	r1, r3
 80023e4:	480b      	ldr	r0, [pc, #44]	@ (8002414 <HAL_SD_MspInit+0x128>)
 80023e6:	f005 ff97 	bl	8008318 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	2031      	movs	r0, #49	@ 0x31
 80023f0:	f002 fcc7 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80023f4:	2031      	movs	r0, #49	@ 0x31
 80023f6:	f002 fcde 	bl	8004db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80023fa:	bf00      	nop
 80023fc:	3730      	adds	r7, #48	@ 0x30
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	52007000 	.word	0x52007000
 8002408:	58024400 	.word	0x58024400
 800240c:	58020800 	.word	0x58020800
 8002410:	58020c00 	.word	0x58020c00
 8002414:	58020400 	.word	0x58020400

08002418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a19      	ldr	r2, [pc, #100]	@ (800248c <HAL_TIM_Base_MspInit+0x74>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10f      	bne.n	800244a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800242a:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_TIM_Base_MspInit+0x78>)
 800242c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002430:	4a17      	ldr	r2, [pc, #92]	@ (8002490 <HAL_TIM_Base_MspInit+0x78>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_TIM_Base_MspInit+0x78>)
 800243c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002448:	e01b      	b.n	8002482 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a11      	ldr	r2, [pc, #68]	@ (8002494 <HAL_TIM_Base_MspInit+0x7c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d116      	bne.n	8002482 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002454:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <HAL_TIM_Base_MspInit+0x78>)
 8002456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800245a:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <HAL_TIM_Base_MspInit+0x78>)
 800245c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002460:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002464:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_TIM_Base_MspInit+0x78>)
 8002466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2075      	movs	r0, #117	@ 0x75
 8002478:	f002 fc83 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800247c:	2075      	movs	r0, #117	@ 0x75
 800247e:	f002 fc9a 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40010000 	.word	0x40010000
 8002490:	58024400 	.word	0x58024400
 8002494:	40014400 	.word	0x40014400

08002498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a13      	ldr	r2, [pc, #76]	@ (8002504 <HAL_TIM_MspPostInit+0x6c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d11f      	bne.n	80024fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <HAL_TIM_MspPostInit+0x70>)
 80024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c0:	4a11      	ldr	r2, [pc, #68]	@ (8002508 <HAL_TIM_MspPostInit+0x70>)
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <HAL_TIM_MspPostInit+0x70>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 80024d8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80024dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	4805      	ldr	r0, [pc, #20]	@ (800250c <HAL_TIM_MspPostInit+0x74>)
 80024f6:	f005 ff0f 	bl	8008318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40010000 	.word	0x40010000
 8002508:	58024400 	.word	0x58024400
 800250c:	58021000 	.word	0x58021000

08002510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0ba      	sub	sp, #232	@ 0xe8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002528:	f107 0318 	add.w	r3, r7, #24
 800252c:	22b8      	movs	r2, #184	@ 0xb8
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f00e fd99 	bl	8011068 <memset>
  if(huart->Instance==USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a4d      	ldr	r2, [pc, #308]	@ (8002670 <HAL_UART_MspInit+0x160>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d147      	bne.n	80025d0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002540:	f04f 0201 	mov.w	r2, #1
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002552:	f107 0318 	add.w	r3, r7, #24
 8002556:	4618      	mov	r0, r3
 8002558:	f007 f858 	bl	800960c <HAL_RCCEx_PeriphCLKConfig>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002562:	f7ff fc21 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002566:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800256c:	4a41      	ldr	r2, [pc, #260]	@ (8002674 <HAL_UART_MspInit+0x164>)
 800256e:	f043 0310 	orr.w	r3, r3, #16
 8002572:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002576:	4b3f      	ldr	r3, [pc, #252]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800258a:	4a3a      	ldr	r2, [pc, #232]	@ (8002674 <HAL_UART_MspInit+0x164>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002594:	4b37      	ldr	r3, [pc, #220]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 80025a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025bc:	2307      	movs	r3, #7
 80025be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025c6:	4619      	mov	r1, r3
 80025c8:	482b      	ldr	r0, [pc, #172]	@ (8002678 <HAL_UART_MspInit+0x168>)
 80025ca:	f005 fea5 	bl	8008318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025ce:	e04a      	b.n	8002666 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a29      	ldr	r2, [pc, #164]	@ (800267c <HAL_UART_MspInit+0x16c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d145      	bne.n	8002666 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025da:	f04f 0202 	mov.w	r2, #2
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ec:	f107 0318 	add.w	r3, r7, #24
 80025f0:	4618      	mov	r0, r3
 80025f2:	f007 f80b 	bl	800960c <HAL_RCCEx_PeriphCLKConfig>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80025fc:	f7ff fbd4 	bl	8001da8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002600:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002606:	4a1b      	ldr	r2, [pc, #108]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002624:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800262e:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_UART_MspInit+0x164>)
 8002630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800263c:	230c      	movs	r3, #12
 800263e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002654:	2307      	movs	r3, #7
 8002656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	@ (8002678 <HAL_UART_MspInit+0x168>)
 8002662:	f005 fe59 	bl	8008318 <HAL_GPIO_Init>
}
 8002666:	bf00      	nop
 8002668:	37e8      	adds	r7, #232	@ 0xe8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40011000 	.word	0x40011000
 8002674:	58024400 	.word	0x58024400
 8002678:	58020000 	.word	0x58020000
 800267c:	40004400 	.word	0x40004400

08002680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <NMI_Handler+0x4>

08002688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <HardFault_Handler+0x4>

08002690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <MemManage_Handler+0x4>

08002698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <BusFault_Handler+0x4>

080026a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <UsageFault_Handler+0x4>

080026a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d6:	f000 f997 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026e4:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <DMA1_Stream0_IRQHandler+0x10>)
 80026e6:	f003 f943 	bl	8005970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	24000174 	.word	0x24000174

080026f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026f8:	4803      	ldr	r0, [pc, #12]	@ (8002708 <ADC_IRQHandler+0x14>)
 80026fa:	f000 ff99 	bl	8003630 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80026fe:	4803      	ldr	r0, [pc, #12]	@ (800270c <ADC_IRQHandler+0x18>)
 8002700:	f000 ff96 	bl	8003630 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	24000094 	.word	0x24000094
 800270c:	24000104 	.word	0x24000104

08002710 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <FDCAN1_IT0_IRQHandler+0x10>)
 8002716:	f005 f8fd 	bl	8007914 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	240001ec 	.word	0x240001ec

08002724 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <FDCAN2_IT0_IRQHandler+0x10>)
 800272a:	f005 f8f3 	bl	8007914 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2400028c 	.word	0x2400028c

08002738 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <SDMMC1_IRQHandler+0x10>)
 800273e:	f009 fdbb 	bl	800c2b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	240003cc 	.word	0x240003cc

0800274c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <TIM16_IRQHandler+0x10>)
 8002752:	f00b f8e4 	bl	800d91e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	24000494 	.word	0x24000494

08002760 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <FDCAN3_IT0_IRQHandler+0x10>)
 8002766:	f005 f8d5 	bl	8007914 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2400032c 	.word	0x2400032c

08002774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800277c:	4a14      	ldr	r2, [pc, #80]	@ (80027d0 <_sbrk+0x5c>)
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <_sbrk+0x60>)
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002788:	4b13      	ldr	r3, [pc, #76]	@ (80027d8 <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002790:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <_sbrk+0x64>)
 8002792:	4a12      	ldr	r2, [pc, #72]	@ (80027dc <_sbrk+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002796:	4b10      	ldr	r3, [pc, #64]	@ (80027d8 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d207      	bcs.n	80027b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a4:	f00e fc68 	bl	8011078 <__errno>
 80027a8:	4603      	mov	r3, r0
 80027aa:	220c      	movs	r2, #12
 80027ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e009      	b.n	80027c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <_sbrk+0x64>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ba:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a05      	ldr	r2, [pc, #20]	@ (80027d8 <_sbrk+0x64>)
 80027c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	24050000 	.word	0x24050000
 80027d4:	00000400 	.word	0x00000400
 80027d8:	24000894 	.word	0x24000894
 80027dc:	24000a00 	.word	0x24000a00

080027e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027e4:	4b32      	ldr	r3, [pc, #200]	@ (80028b0 <SystemInit+0xd0>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	4a31      	ldr	r2, [pc, #196]	@ (80028b0 <SystemInit+0xd0>)
 80027ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027f4:	4b2f      	ldr	r3, [pc, #188]	@ (80028b4 <SystemInit+0xd4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d807      	bhi.n	8002810 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002800:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <SystemInit+0xd4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 030f 	bic.w	r3, r3, #15
 8002808:	4a2a      	ldr	r2, [pc, #168]	@ (80028b4 <SystemInit+0xd4>)
 800280a:	f043 0307 	orr.w	r3, r3, #7
 800280e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002810:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <SystemInit+0xd8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a28      	ldr	r2, [pc, #160]	@ (80028b8 <SystemInit+0xd8>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800281c:	4b26      	ldr	r3, [pc, #152]	@ (80028b8 <SystemInit+0xd8>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002822:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <SystemInit+0xd8>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4924      	ldr	r1, [pc, #144]	@ (80028b8 <SystemInit+0xd8>)
 8002828:	4b24      	ldr	r3, [pc, #144]	@ (80028bc <SystemInit+0xdc>)
 800282a:	4013      	ands	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800282e:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <SystemInit+0xd4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800283a:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <SystemInit+0xd4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 030f 	bic.w	r3, r3, #15
 8002842:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <SystemInit+0xd4>)
 8002844:	f043 0307 	orr.w	r3, r3, #7
 8002848:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800284a:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <SystemInit+0xd8>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002850:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <SystemInit+0xd8>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002856:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <SystemInit+0xd8>)
 8002858:	2200      	movs	r2, #0
 800285a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800285c:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <SystemInit+0xd8>)
 800285e:	4a18      	ldr	r2, [pc, #96]	@ (80028c0 <SystemInit+0xe0>)
 8002860:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <SystemInit+0xd8>)
 8002864:	4a17      	ldr	r2, [pc, #92]	@ (80028c4 <SystemInit+0xe4>)
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <SystemInit+0xd8>)
 800286a:	4a17      	ldr	r2, [pc, #92]	@ (80028c8 <SystemInit+0xe8>)
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800286e:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <SystemInit+0xd8>)
 8002870:	2200      	movs	r2, #0
 8002872:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002874:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <SystemInit+0xd8>)
 8002876:	4a14      	ldr	r2, [pc, #80]	@ (80028c8 <SystemInit+0xe8>)
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800287a:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <SystemInit+0xd8>)
 800287c:	2200      	movs	r2, #0
 800287e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002880:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <SystemInit+0xd8>)
 8002882:	4a11      	ldr	r2, [pc, #68]	@ (80028c8 <SystemInit+0xe8>)
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002886:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <SystemInit+0xd8>)
 8002888:	2200      	movs	r2, #0
 800288a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <SystemInit+0xd8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a09      	ldr	r2, [pc, #36]	@ (80028b8 <SystemInit+0xd8>)
 8002892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002896:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002898:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <SystemInit+0xd8>)
 800289a:	2200      	movs	r2, #0
 800289c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800289e:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <SystemInit+0xec>)
 80028a0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80028a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00
 80028b4:	52002000 	.word	0x52002000
 80028b8:	58024400 	.word	0x58024400
 80028bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80028c0:	02020200 	.word	0x02020200
 80028c4:	01ff0000 	.word	0x01ff0000
 80028c8:	01010280 	.word	0x01010280
 80028cc:	52004000 	.word	0x52004000

080028d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002908 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028d4:	f7ff ff84 	bl	80027e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	@ (8002910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	@ (800291c <LoopFillZerobss+0x22>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f00e fbc1 	bl	8011084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002902:	f7fd fef3 	bl	80006ec <main>
  bx  lr
 8002906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002908:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800290c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002910:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002914:	08011d04 	.word	0x08011d04
  ldr r2, =_sbss
 8002918:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800291c:	24000a00 	.word	0x24000a00

08002920 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC3_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292a:	2003      	movs	r0, #3
 800292c:	f002 fa1e 	bl	8004d6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002930:	f006 fc96 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <HAL_Init+0x68>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	4913      	ldr	r1, [pc, #76]	@ (8002990 <HAL_Init+0x6c>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800294e:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <HAL_Init+0x68>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a0e      	ldr	r2, [pc, #56]	@ (8002990 <HAL_Init+0x6c>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <HAL_Init+0x70>)
 8002966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002968:	4a0b      	ldr	r2, [pc, #44]	@ (8002998 <HAL_Init+0x74>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800296e:	200f      	movs	r0, #15
 8002970:	f000 f814 	bl	800299c <HAL_InitTick>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e002      	b.n	8002984 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800297e:	f7ff fa19 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	08011c5c 	.word	0x08011c5c
 8002994:	24000010 	.word	0x24000010
 8002998:	2400000c 	.word	0x2400000c

0800299c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029a4:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_InitTick+0x60>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e021      	b.n	80029f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <HAL_InitTick+0x64>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_InitTick+0x60>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f002 fa03 	bl	8004dd2 <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f002 f9cd 	bl	8004d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	@ (8002a04 <HAL_InitTick+0x68>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	24000018 	.word	0x24000018
 8002a00:	2400000c 	.word	0x2400000c
 8002a04:	24000014 	.word	0x24000014

08002a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_IncTick+0x20>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_IncTick+0x24>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <HAL_IncTick+0x24>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	24000018 	.word	0x24000018
 8002a2c:	24000898 	.word	0x24000898

08002a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <HAL_GetTick+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	24000898 	.word	0x24000898

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff ffee 	bl	8002a30 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffde 	bl	8002a30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	24000018 	.word	0x24000018

08002a90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3360      	adds	r3, #96	@ 0x60
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a10      	ldr	r2, [pc, #64]	@ (8002b58 <LL_ADC_SetOffset+0x60>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10b      	bne.n	8002b34 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b32:	e00b      	b.n	8002b4c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	431a      	orrs	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	58026000 	.word	0x58026000

08002b5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3360      	adds	r3, #96	@ 0x60
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	611a      	str	r2, [r3, #16]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d00e      	beq.n	8002bee <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3360      	adds	r3, #96	@ 0x60
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	601a      	str	r2, [r3, #0]
  }
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	58026000 	.word	0x58026000

08002c00 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c40 <LL_ADC_SetOffsetSaturation+0x40>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d10e      	bne.n	8002c32 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3360      	adds	r3, #96	@ 0x60
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	58026000 	.word	0x58026000

08002c44 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a0c      	ldr	r2, [pc, #48]	@ (8002c84 <LL_ADC_SetOffsetSign+0x40>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10e      	bne.n	8002c76 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3360      	adds	r3, #96	@ 0x60
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	58026000 	.word	0x58026000

08002c88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3360      	adds	r3, #96	@ 0x60
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd8 <LL_ADC_SetOffsetState+0x50>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d108      	bne.n	8002cbc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002cba:	e007      	b.n	8002ccc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	601a      	str	r2, [r3, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	58026000 	.word	0x58026000

08002cdc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b087      	sub	sp, #28
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3330      	adds	r3, #48	@ 0x30
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	4413      	add	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	211f      	movs	r1, #31
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	401a      	ands	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 011f 	and.w	r1, r3, #31
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa01 f303 	lsl.w	r3, r1, r3
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f023 0203 	bic.w	r2, r3, #3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d107      	bne.n	8002dc2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	60da      	str	r2, [r3, #12]
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	58026000 	.word	0x58026000

08002dd4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b087      	sub	sp, #28
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3314      	adds	r3, #20
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0e5b      	lsrs	r3, r3, #25
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	4413      	add	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	0d1b      	lsrs	r3, r3, #20
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2107      	movs	r1, #7
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	0d1b      	lsrs	r3, r3, #20
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d115      	bne.n	8002e90 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e70:	43db      	mvns	r3, r3
 8002e72:	401a      	ands	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0318 	and.w	r3, r3, #24
 8002e7a:	4914      	ldr	r1, [pc, #80]	@ (8002ecc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e7c:	40d9      	lsrs	r1, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	400b      	ands	r3, r1
 8002e82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e86:	431a      	orrs	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e8e:	e014      	b.n	8002eba <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0318 	and.w	r3, r3, #24
 8002ea6:	4909      	ldr	r1, [pc, #36]	@ (8002ecc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ea8:	40d9      	lsrs	r1, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	400b      	ands	r3, r1
 8002eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	58026000 	.word	0x58026000
 8002ecc:	000fffff 	.word	0x000fffff

08002ed0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 031f 	and.w	r3, r3, #31
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6093      	str	r3, [r2, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	5fffffc0 	.word	0x5fffffc0

08002f2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f40:	d101      	bne.n	8002f46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	6fffffc0 	.word	0x6fffffc0

08002f7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f90:	d101      	bne.n	8002f96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <LL_ADC_Enable+0x24>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	7fffffc0 	.word	0x7fffffc0

08002fcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <LL_ADC_IsEnabled+0x18>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_ADC_IsEnabled+0x1a>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <LL_ADC_REG_StartConversion+0x24>)
 8003002:	4013      	ands	r3, r2
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	7fffffc0 	.word	0x7fffffc0

0800301c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d101      	bne.n	8003034 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b08      	cmp	r3, #8
 8003054:	d101      	bne.n	800305a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b089      	sub	sp, #36	@ 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e1ee      	b.n	8003460 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7fe fea9 	bl	8001de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff3f 	bl	8002f2c <LL_ADC_IsDeepPowerDownEnabled>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff25 	bl	8002f08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ff5a 	bl	8002f7c <LL_ADC_IsInternalRegulatorEnabled>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d114      	bne.n	80030f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff3e 	bl	8002f54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003314 <HAL_ADC_Init+0x2ac>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	4a8e      	ldr	r2, [pc, #568]	@ (8003318 <HAL_ADC_Init+0x2b0>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	3301      	adds	r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030ea:	e002      	b.n	80030f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f9      	bne.n	80030ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff3d 	bl	8002f7c <LL_ADC_IsInternalRegulatorEnabled>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310c:	f043 0210 	orr.w	r2, r3, #16
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff77 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 800312e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 8188 	bne.w	800344e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 8184 	bne.w	800344e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800314e:	f043 0202 	orr.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff36 	bl	8002fcc <LL_ADC_IsEnabled>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d136      	bne.n	80031d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6c      	ldr	r2, [pc, #432]	@ (800331c <HAL_ADC_Init+0x2b4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_ADC_Init+0x112>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6a      	ldr	r2, [pc, #424]	@ (8003320 <HAL_ADC_Init+0x2b8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d10e      	bne.n	8003198 <HAL_ADC_Init+0x130>
 800317a:	4868      	ldr	r0, [pc, #416]	@ (800331c <HAL_ADC_Init+0x2b4>)
 800317c:	f7ff ff26 	bl	8002fcc <LL_ADC_IsEnabled>
 8003180:	4604      	mov	r4, r0
 8003182:	4867      	ldr	r0, [pc, #412]	@ (8003320 <HAL_ADC_Init+0x2b8>)
 8003184:	f7ff ff22 	bl	8002fcc <LL_ADC_IsEnabled>
 8003188:	4603      	mov	r3, r0
 800318a:	4323      	orrs	r3, r4
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e008      	b.n	80031aa <HAL_ADC_Init+0x142>
 8003198:	4862      	ldr	r0, [pc, #392]	@ (8003324 <HAL_ADC_Init+0x2bc>)
 800319a:	f7ff ff17 	bl	8002fcc <LL_ADC_IsEnabled>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d012      	beq.n	80031d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a5a      	ldr	r2, [pc, #360]	@ (800331c <HAL_ADC_Init+0x2b4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_ADC_Init+0x15a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a58      	ldr	r2, [pc, #352]	@ (8003320 <HAL_ADC_Init+0x2b8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_Init+0x15e>
 80031c2:	4a59      	ldr	r2, [pc, #356]	@ (8003328 <HAL_ADC_Init+0x2c0>)
 80031c4:	e000      	b.n	80031c8 <HAL_ADC_Init+0x160>
 80031c6:	4a59      	ldr	r2, [pc, #356]	@ (800332c <HAL_ADC_Init+0x2c4>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f7ff fc5e 	bl	8002a90 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a52      	ldr	r2, [pc, #328]	@ (8003324 <HAL_ADC_Init+0x2bc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d129      	bne.n	8003232 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7e5b      	ldrb	r3, [r3, #25]
 80031e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80031e8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80031ee:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d013      	beq.n	8003220 <HAL_ADC_Init+0x1b8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	d00d      	beq.n	800321c <HAL_ADC_Init+0x1b4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b1c      	cmp	r3, #28
 8003206:	d007      	beq.n	8003218 <HAL_ADC_Init+0x1b0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b18      	cmp	r3, #24
 800320e:	d101      	bne.n	8003214 <HAL_ADC_Init+0x1ac>
 8003210:	2318      	movs	r3, #24
 8003212:	e006      	b.n	8003222 <HAL_ADC_Init+0x1ba>
 8003214:	2300      	movs	r3, #0
 8003216:	e004      	b.n	8003222 <HAL_ADC_Init+0x1ba>
 8003218:	2310      	movs	r3, #16
 800321a:	e002      	b.n	8003222 <HAL_ADC_Init+0x1ba>
 800321c:	2308      	movs	r3, #8
 800321e:	e000      	b.n	8003222 <HAL_ADC_Init+0x1ba>
 8003220:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003222:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800322a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	e00e      	b.n	8003250 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7e5b      	ldrb	r3, [r3, #25]
 8003236:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800323c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003242:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d106      	bne.n	8003268 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	3b01      	subs	r3, #1
 8003260:	045b      	lsls	r3, r3, #17
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a26      	ldr	r2, [pc, #152]	@ (8003324 <HAL_ADC_Init+0x2bc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d115      	bne.n	80032ba <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <HAL_ADC_Init+0x2c8>)
 8003296:	4013      	ands	r3, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	69b9      	ldr	r1, [r7, #24]
 800329e:	430b      	orrs	r3, r1
 80032a0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	611a      	str	r2, [r3, #16]
 80032b8:	e009      	b.n	80032ce <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003334 <HAL_ADC_Init+0x2cc>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	69b9      	ldr	r1, [r7, #24]
 80032ca:	430b      	orrs	r3, r1
 80032cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fea2 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 80032d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff feaf 	bl	8003042 <LL_ADC_INJ_IsConversionOngoing>
 80032e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 808e 	bne.w	800340a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f040 808a 	bne.w	800340a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003324 <HAL_ADC_Init+0x2bc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d11b      	bne.n	8003338 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7e1b      	ldrb	r3, [r3, #24]
 8003304:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800330c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	e018      	b.n	8003346 <HAL_ADC_Init+0x2de>
 8003314:	2400000c 	.word	0x2400000c
 8003318:	053e2d63 	.word	0x053e2d63
 800331c:	40022000 	.word	0x40022000
 8003320:	40022100 	.word	0x40022100
 8003324:	58026000 	.word	0x58026000
 8003328:	40022300 	.word	0x40022300
 800332c:	58026300 	.word	0x58026300
 8003330:	fff04007 	.word	0xfff04007
 8003334:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e1b      	ldrb	r3, [r3, #24]
 800333c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	4b46      	ldr	r3, [pc, #280]	@ (8003468 <HAL_ADC_Init+0x400>)
 800334e:	4013      	ands	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	69b9      	ldr	r1, [r7, #24]
 8003356:	430b      	orrs	r3, r1
 8003358:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003360:	2b01      	cmp	r3, #1
 8003362:	d137      	bne.n	80033d4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3f      	ldr	r2, [pc, #252]	@ (800346c <HAL_ADC_Init+0x404>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d116      	bne.n	80033a2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	4b3d      	ldr	r3, [pc, #244]	@ (8003470 <HAL_ADC_Init+0x408>)
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003386:	4311      	orrs	r1, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800338c:	4311      	orrs	r1, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003392:	430a      	orrs	r2, r1
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	611a      	str	r2, [r3, #16]
 80033a0:	e020      	b.n	80033e4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <HAL_ADC_Init+0x40c>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0411      	lsls	r1, r2, #16
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033b8:	4311      	orrs	r1, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80033c4:	430a      	orrs	r2, r1
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	611a      	str	r2, [r3, #16]
 80033d2:	e007      	b.n	80033e4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1b      	ldr	r2, [pc, #108]	@ (800346c <HAL_ADC_Init+0x404>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d002      	beq.n	800340a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f001 f9b9 	bl	800477c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d10c      	bne.n	800342c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	f023 010f 	bic.w	r1, r3, #15
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30
 800342a:	e007      	b.n	800343c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020f 	bic.w	r2, r2, #15
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003440:	f023 0303 	bic.w	r3, r3, #3
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	661a      	str	r2, [r3, #96]	@ 0x60
 800344c:	e007      	b.n	800345e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003452:	f043 0210 	orr.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800345e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3724      	adds	r7, #36	@ 0x24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd90      	pop	{r4, r7, pc}
 8003468:	ffffbffc 	.word	0xffffbffc
 800346c:	58026000 	.word	0x58026000
 8003470:	fc00f81f 	.word	0xfc00f81f
 8003474:	fc00f81e 	.word	0xfc00f81e

08003478 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a60      	ldr	r2, [pc, #384]	@ (800360c <HAL_ADC_Start_DMA+0x194>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_ADC_Start_DMA+0x20>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5f      	ldr	r2, [pc, #380]	@ (8003610 <HAL_ADC_Start_DMA+0x198>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_ADC_Start_DMA+0x24>
 8003498:	4b5e      	ldr	r3, [pc, #376]	@ (8003614 <HAL_ADC_Start_DMA+0x19c>)
 800349a:	e000      	b.n	800349e <HAL_ADC_Start_DMA+0x26>
 800349c:	4b5e      	ldr	r3, [pc, #376]	@ (8003618 <HAL_ADC_Start_DMA+0x1a0>)
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fd16 	bl	8002ed0 <LL_ADC_GetMultimode>
 80034a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fdb6 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 80a2 	bne.w	80035fc <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_Start_DMA+0x4e>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e09d      	b.n	8003602 <HAL_ADC_Start_DMA+0x18a>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d006      	beq.n	80034e2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d003      	beq.n	80034e2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b09      	cmp	r3, #9
 80034de:	f040 8086 	bne.w	80035ee <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f001 f82c 	bl	8004540 <ADC_Enable>
 80034e8:	4603      	mov	r3, r0
 80034ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d178      	bne.n	80035e4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034f6:	4b49      	ldr	r3, [pc, #292]	@ (800361c <HAL_ADC_Start_DMA+0x1a4>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a42      	ldr	r2, [pc, #264]	@ (8003610 <HAL_ADC_Start_DMA+0x198>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d002      	beq.n	8003512 <HAL_ADC_Start_DMA+0x9a>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	e000      	b.n	8003514 <HAL_ADC_Start_DMA+0x9c>
 8003512:	4b3e      	ldr	r3, [pc, #248]	@ (800360c <HAL_ADC_Start_DMA+0x194>)
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	4293      	cmp	r3, r2
 800351a:	d002      	beq.n	8003522 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d105      	bne.n	800352e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003526:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800353e:	f023 0206 	bic.w	r2, r3, #6
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	665a      	str	r2, [r3, #100]	@ 0x64
 8003546:	e002      	b.n	800354e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	4a33      	ldr	r2, [pc, #204]	@ (8003620 <HAL_ADC_Start_DMA+0x1a8>)
 8003554:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355a:	4a32      	ldr	r2, [pc, #200]	@ (8003624 <HAL_ADC_Start_DMA+0x1ac>)
 800355c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	4a31      	ldr	r2, [pc, #196]	@ (8003628 <HAL_ADC_Start_DMA+0x1b0>)
 8003564:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	221c      	movs	r2, #28
 800356c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0210 	orr.w	r2, r2, #16
 8003584:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a28      	ldr	r2, [pc, #160]	@ (800362c <HAL_ADC_Start_DMA+0x1b4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10f      	bne.n	80035b0 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f7ff fbfe 	bl	8002da0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fbe9 	bl	8002d80 <LL_ADC_EnableDMAReq>
 80035ae:	e007      	b.n	80035c0 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f7ff fbcd 	bl	8002d5a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3340      	adds	r3, #64	@ 0x40
 80035ca:	4619      	mov	r1, r3
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f001 ff64 	bl	800549c <HAL_DMA_Start_IT>
 80035d4:	4603      	mov	r3, r0
 80035d6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fd09 	bl	8002ff4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80035e2:	e00d      	b.n	8003600 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80035ec:	e008      	b.n	8003600 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80035fa:	e001      	b.n	8003600 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
 80035fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003600:	7dfb      	ldrb	r3, [r7, #23]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40022000 	.word	0x40022000
 8003610:	40022100 	.word	0x40022100
 8003614:	40022300 	.word	0x40022300
 8003618:	58026300 	.word	0x58026300
 800361c:	fffff0fe 	.word	0xfffff0fe
 8003620:	08004655 	.word	0x08004655
 8003624:	0800472d 	.word	0x0800472d
 8003628:	08004749 	.word	0x08004749
 800362c:	58026000 	.word	0x58026000

08003630 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	@ 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a87      	ldr	r2, [pc, #540]	@ (8003870 <HAL_ADC_IRQHandler+0x240>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_ADC_IRQHandler+0x30>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a86      	ldr	r2, [pc, #536]	@ (8003874 <HAL_ADC_IRQHandler+0x244>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d101      	bne.n	8003664 <HAL_ADC_IRQHandler+0x34>
 8003660:	4b85      	ldr	r3, [pc, #532]	@ (8003878 <HAL_ADC_IRQHandler+0x248>)
 8003662:	e000      	b.n	8003666 <HAL_ADC_IRQHandler+0x36>
 8003664:	4b85      	ldr	r3, [pc, #532]	@ (800387c <HAL_ADC_IRQHandler+0x24c>)
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fc32 	bl	8002ed0 <LL_ADC_GetMultimode>
 800366c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d017      	beq.n	80036a8 <HAL_ADC_IRQHandler+0x78>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d012      	beq.n	80036a8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003692:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f001 f9aa 	bl	80049f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2202      	movs	r2, #2
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <HAL_ADC_IRQHandler+0x8c>
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8083 	beq.w	80037ce <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d07d      	beq.n	80037ce <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d105      	bne.n	80036ea <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff faf4 	bl	8002cdc <LL_ADC_REG_IsTriggerSourceSWStart>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d062      	beq.n	80037c0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a5d      	ldr	r2, [pc, #372]	@ (8003874 <HAL_ADC_IRQHandler+0x244>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d002      	beq.n	800370a <HAL_ADC_IRQHandler+0xda>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	e000      	b.n	800370c <HAL_ADC_IRQHandler+0xdc>
 800370a:	4b59      	ldr	r3, [pc, #356]	@ (8003870 <HAL_ADC_IRQHandler+0x240>)
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4293      	cmp	r3, r2
 8003712:	d008      	beq.n	8003726 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b05      	cmp	r3, #5
 800371e:	d002      	beq.n	8003726 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b09      	cmp	r3, #9
 8003724:	d104      	bne.n	8003730 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	e00c      	b.n	800374a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a4f      	ldr	r2, [pc, #316]	@ (8003874 <HAL_ADC_IRQHandler+0x244>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d002      	beq.n	8003740 <HAL_ADC_IRQHandler+0x110>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	e000      	b.n	8003742 <HAL_ADC_IRQHandler+0x112>
 8003740:	4b4b      	ldr	r3, [pc, #300]	@ (8003870 <HAL_ADC_IRQHandler+0x240>)
 8003742:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d135      	bne.n	80037c0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b08      	cmp	r3, #8
 8003760:	d12e      	bne.n	80037c0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fc58 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11a      	bne.n	80037a8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 020c 	bic.w	r2, r2, #12
 8003780:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003786:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d112      	bne.n	80037c0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379e:	f043 0201 	orr.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80037a6:	e00b      	b.n	80037c0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ac:	f043 0210 	orr.w	r2, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b8:	f043 0201 	orr.w	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd ff41 	bl	8001648 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	220c      	movs	r2, #12
 80037cc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_ADC_IRQHandler+0x1b2>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80a0 	beq.w	800392e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 809a 	beq.w	800392e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d105      	bne.n	8003812 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fadc 	bl	8002dd4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800381c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fa5a 	bl	8002cdc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003828:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a11      	ldr	r2, [pc, #68]	@ (8003874 <HAL_ADC_IRQHandler+0x244>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d002      	beq.n	800383a <HAL_ADC_IRQHandler+0x20a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	e000      	b.n	800383c <HAL_ADC_IRQHandler+0x20c>
 800383a:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <HAL_ADC_IRQHandler+0x240>)
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	4293      	cmp	r3, r2
 8003842:	d008      	beq.n	8003856 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b06      	cmp	r3, #6
 800384e:	d002      	beq.n	8003856 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b07      	cmp	r3, #7
 8003854:	d104      	bne.n	8003860 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	e014      	b.n	800388a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a03      	ldr	r2, [pc, #12]	@ (8003874 <HAL_ADC_IRQHandler+0x244>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00a      	beq.n	8003880 <HAL_ADC_IRQHandler+0x250>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	e008      	b.n	8003882 <HAL_ADC_IRQHandler+0x252>
 8003870:	40022000 	.word	0x40022000
 8003874:	40022100 	.word	0x40022100
 8003878:	40022300 	.word	0x40022300
 800387c:	58026300 	.word	0x58026300
 8003880:	4b84      	ldr	r3, [pc, #528]	@ (8003a94 <HAL_ADC_IRQHandler+0x464>)
 8003882:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d047      	beq.n	8003920 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_ADC_IRQHandler+0x27a>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d03f      	beq.n	8003920 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d13a      	bne.n	8003920 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d133      	bne.n	8003920 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d12e      	bne.n	8003920 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fbbb 	bl	8003042 <LL_ADC_INJ_IsConversionOngoing>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11a      	bne.n	8003908 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038e0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d112      	bne.n	8003920 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	661a      	str	r2, [r3, #96]	@ 0x60
 8003906:	e00b      	b.n	8003920 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390c:	f043 0210 	orr.w	r2, r3, #16
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003918:	f043 0201 	orr.w	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f001 f83f 	bl	80049a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2260      	movs	r2, #96	@ 0x60
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	d011      	beq.n	800395c <HAL_ADC_IRQHandler+0x32c>
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8b2 	bl	8003ab8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2280      	movs	r2, #128	@ 0x80
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d012      	beq.n	800398c <HAL_ADC_IRQHandler+0x35c>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003974:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f001 f825 	bl	80049cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800398a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <HAL_ADC_IRQHandler+0x38c>
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f001 f817 	bl	80049e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d043      	beq.n	8003a4e <HAL_ADC_IRQHandler+0x41e>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d03e      	beq.n	8003a4e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80039d8:	2301      	movs	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
 80039dc:	e021      	b.n	8003a22 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d015      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a94 <HAL_ADC_IRQHandler+0x464>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_ADC_IRQHandler+0x3c8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a29      	ldr	r2, [pc, #164]	@ (8003a98 <HAL_ADC_IRQHandler+0x468>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_IRQHandler+0x3cc>
 80039f8:	4b28      	ldr	r3, [pc, #160]	@ (8003a9c <HAL_ADC_IRQHandler+0x46c>)
 80039fa:	e000      	b.n	80039fe <HAL_ADC_IRQHandler+0x3ce>
 80039fc:	4b28      	ldr	r3, [pc, #160]	@ (8003aa0 <HAL_ADC_IRQHandler+0x470>)
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fa74 	bl	8002eec <LL_ADC_GetMultiDMATransfer>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0e:	e008      	b.n	8003a22 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d10e      	bne.n	8003a46 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a38:	f043 0202 	orr.w	r2, r3, #2
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f843 	bl	8003acc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d018      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x45a>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d013      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a66:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a72:	f043 0208 	orr.w	r2, r3, #8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a82:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 ff97 	bl	80049b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a8a:	bf00      	nop
 8003a8c:	3728      	adds	r7, #40	@ 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40022100 	.word	0x40022100
 8003a9c:	40022300 	.word	0x40022300
 8003aa0:	58026300 	.word	0x58026300

08003aa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b0b9      	sub	sp, #228	@ 0xe4
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003afa:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4aab      	ldr	r2, [pc, #684]	@ (8003db0 <HAL_ADC_ConfigChannel+0x2d0>)
 8003b02:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d102      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x34>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	f000 bcfe 	b.w	8004510 <HAL_ADC_ConfigChannel+0xa30>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fa7b 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 84e2 	bne.w	80044f2 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	db38      	blt.n	8003ba8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a9e      	ldr	r2, [pc, #632]	@ (8003db4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d033      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d108      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x7e>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	2201      	movs	r2, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	e01d      	b.n	8003b9a <HAL_ADC_ConfigChannel+0xba>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003b82:	2320      	movs	r3, #32
 8003b84:	e004      	b.n	8003b90 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003b86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2201      	movs	r2, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	69d1      	ldr	r1, [r2, #28]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f7ff f8a4 	bl	8002d02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fa2c 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 8003bc4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fa38 	bl	8003042 <LL_ADC_INJ_IsConversionOngoing>
 8003bd2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 8270 	bne.w	80040c0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003be0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 826b 	bne.w	80040c0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f7ff f8ff 	bl	8002dfa <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6c      	ldr	r2, [pc, #432]	@ (8003db4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10d      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c20:	e032      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c22:	4b65      	ldr	r3, [pc, #404]	@ (8003db8 <HAL_ADC_ConfigChannel+0x2d8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c2e:	d10b      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x168>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	e01d      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x1a4>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x18e>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	e00a      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x1a4>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d048      	beq.n	8003d22 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6919      	ldr	r1, [r3, #16]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ca0:	f7fe ff2a 	bl	8002af8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a42      	ldr	r2, [pc, #264]	@ (8003db4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d119      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6919      	ldr	r1, [r3, #16]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7fe ffc2 	bl	8002c44 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6919      	ldr	r1, [r3, #16]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d102      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x1f8>
 8003cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cd6:	e000      	b.n	8003cda <HAL_ADC_ConfigChannel+0x1fa>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f7fe ff90 	bl	8002c00 <LL_ADC_SetOffsetSaturation>
 8003ce0:	e1ee      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d102      	bne.n	8003cfa <HAL_ADC_ConfigChannel+0x21a>
 8003cf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003cf8:	e000      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x21c>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f7fe ff5d 	bl	8002bbc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6919      	ldr	r1, [r3, #16]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	7e1b      	ldrb	r3, [r3, #24]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x238>
 8003d12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d16:	e000      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x23a>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f7fe ff34 	bl	8002b88 <LL_ADC_SetDataRightShift>
 8003d20:	e1ce      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a23      	ldr	r2, [pc, #140]	@ (8003db4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	f040 8181 	bne.w	8004030 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe ff11 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x27a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe ff06 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003d50:	4603      	mov	r3, r0
 8003d52:	0e9b      	lsrs	r3, r3, #26
 8003d54:	f003 021f 	and.w	r2, r3, #31
 8003d58:	e01e      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x2b8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe fefb 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003d78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	e004      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003d8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x2dc>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0e9b      	lsrs	r3, r3, #26
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	e01e      	b.n	8003dee <HAL_ADC_ConfigChannel+0x30e>
 8003db0:	47ff0000 	.word	0x47ff0000
 8003db4:	58026000 	.word	0x58026000
 8003db8:	5c001000 	.word	0x5c001000
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003de0:	2320      	movs	r3, #32
 8003de2:	e004      	b.n	8003dee <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003de4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d106      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe ff44 	bl	8002c88 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fea8 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x34c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe fe9d 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	f003 021f 	and.w	r2, r3, #31
 8003e2a:	e01e      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x38a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fe92 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003e5a:	2320      	movs	r3, #32
 8003e5c:	e004      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d105      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x3a2>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	0e9b      	lsrs	r3, r3, #26
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	e018      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x3d4>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	e004      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d106      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fe fee1 	bl	8002c88 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe fe45 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x412>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fe3a 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	0e9b      	lsrs	r3, r3, #26
 8003eec:	f003 021f 	and.w	r2, r3, #31
 8003ef0:	e01e      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x450>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fe2f 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f08:	fa93 f3a3 	rbit	r3, r3
 8003f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003f20:	2320      	movs	r3, #32
 8003f22:	e004      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d105      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x468>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	0e9b      	lsrs	r3, r3, #26
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	e014      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x492>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e004      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d106      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2102      	movs	r1, #2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fe82 	bl	8002c88 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2103      	movs	r1, #3
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe fde6 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x4d0>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2103      	movs	r1, #3
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fddb 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	0e9b      	lsrs	r3, r3, #26
 8003faa:	f003 021f 	and.w	r2, r3, #31
 8003fae:	e017      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x500>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2103      	movs	r1, #3
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fdd0 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003fcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	e003      	b.n	8003fde <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fd8:	fab3 f383 	clz	r3, r3
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x518>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	0e9b      	lsrs	r3, r3, #26
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	e011      	b.n	800401c <HAL_ADC_ConfigChannel+0x53c>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004008:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800400a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004010:	2320      	movs	r3, #32
 8004012:	e003      	b.n	800401c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004014:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	429a      	cmp	r2, r3
 800401e:	d14f      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2200      	movs	r2, #0
 8004026:	2103      	movs	r1, #3
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe fe2d 	bl	8002c88 <LL_ADC_SetOffsetState>
 800402e:	e047      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004036:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	069b      	lsls	r3, r3, #26
 8004040:	429a      	cmp	r2, r3
 8004042:	d107      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004052:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800405a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	069b      	lsls	r3, r3, #26
 8004064:	429a      	cmp	r2, r3
 8004066:	d107      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004076:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800407e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	069b      	lsls	r3, r3, #26
 8004088:	429a      	cmp	r2, r3
 800408a:	d107      	bne.n	800409c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800409a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	069b      	lsls	r3, r3, #26
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d107      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe ff81 	bl	8002fcc <LL_ADC_IsEnabled>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f040 8219 	bne.w	8004504 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7fe feb6 	bl	8002e50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4aa1      	ldr	r2, [pc, #644]	@ (8004370 <HAL_ADC_ConfigChannel+0x890>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	f040 812e 	bne.w	800434c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x638>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0e9b      	lsrs	r3, r3, #26
 8004106:	3301      	adds	r3, #1
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2b09      	cmp	r3, #9
 800410e:	bf94      	ite	ls
 8004110:	2301      	movls	r3, #1
 8004112:	2300      	movhi	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e019      	b.n	800414c <HAL_ADC_ConfigChannel+0x66c>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004128:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800412a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004130:	2320      	movs	r3, #32
 8004132:	e003      	b.n	800413c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004134:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	3301      	adds	r3, #1
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	2b09      	cmp	r3, #9
 8004144:	bf94      	ite	ls
 8004146:	2301      	movls	r3, #1
 8004148:	2300      	movhi	r3, #0
 800414a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800414c:	2b00      	cmp	r3, #0
 800414e:	d079      	beq.n	8004244 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <HAL_ADC_ConfigChannel+0x68c>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0e9b      	lsrs	r3, r3, #26
 8004162:	3301      	adds	r3, #1
 8004164:	069b      	lsls	r3, r3, #26
 8004166:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800416a:	e015      	b.n	8004198 <HAL_ADC_ConfigChannel+0x6b8>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800417a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800417c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800417e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e003      	b.n	8004190 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	3301      	adds	r3, #1
 8004192:	069b      	lsls	r3, r3, #26
 8004194:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x6d8>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0e9b      	lsrs	r3, r3, #26
 80041aa:	3301      	adds	r3, #1
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2101      	movs	r1, #1
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	e017      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x708>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80041c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80041ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80041d0:	2320      	movs	r3, #32
 80041d2:	e003      	b.n	80041dc <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80041d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	ea42 0103 	orr.w	r1, r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <HAL_ADC_ConfigChannel+0x72e>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	3301      	adds	r3, #1
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	051b      	lsls	r3, r3, #20
 800420c:	e018      	b.n	8004240 <HAL_ADC_ConfigChannel+0x760>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004226:	2320      	movs	r3, #32
 8004228:	e003      	b.n	8004232 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422c:	fab3 f383 	clz	r3, r3
 8004230:	b2db      	uxtb	r3, r3
 8004232:	3301      	adds	r3, #1
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004240:	430b      	orrs	r3, r1
 8004242:	e07e      	b.n	8004342 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x780>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0e9b      	lsrs	r3, r3, #26
 8004256:	3301      	adds	r3, #1
 8004258:	069b      	lsls	r3, r3, #26
 800425a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800425e:	e015      	b.n	800428c <HAL_ADC_ConfigChannel+0x7ac>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004278:	2320      	movs	r3, #32
 800427a:	e003      	b.n	8004284 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	3301      	adds	r3, #1
 8004286:	069b      	lsls	r3, r3, #26
 8004288:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x7cc>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2101      	movs	r1, #1
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	e017      	b.n	80042dc <HAL_ADC_ConfigChannel+0x7fc>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	61bb      	str	r3, [r7, #24]
  return result;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80042c4:	2320      	movs	r3, #32
 80042c6:	e003      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	3301      	adds	r3, #1
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	ea42 0103 	orr.w	r1, r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10d      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x828>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0e9b      	lsrs	r3, r3, #26
 80042f2:	3301      	adds	r3, #1
 80042f4:	f003 021f 	and.w	r2, r3, #31
 80042f8:	4613      	mov	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4413      	add	r3, r2
 80042fe:	3b1e      	subs	r3, #30
 8004300:	051b      	lsls	r3, r3, #20
 8004302:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004306:	e01b      	b.n	8004340 <HAL_ADC_ConfigChannel+0x860>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	60fb      	str	r3, [r7, #12]
  return result;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004320:	2320      	movs	r3, #32
 8004322:	e003      	b.n	800432c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	3301      	adds	r3, #1
 800432e:	f003 021f 	and.w	r2, r3, #31
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	3b1e      	subs	r3, #30
 800433a:	051b      	lsls	r3, r3, #20
 800433c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004340:	430b      	orrs	r3, r1
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	6892      	ldr	r2, [r2, #8]
 8004346:	4619      	mov	r1, r3
 8004348:	f7fe fd57 	bl	8002dfa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f280 80d7 	bge.w	8004504 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a06      	ldr	r2, [pc, #24]	@ (8004374 <HAL_ADC_ConfigChannel+0x894>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_ADC_ConfigChannel+0x88a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a04      	ldr	r2, [pc, #16]	@ (8004378 <HAL_ADC_ConfigChannel+0x898>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10a      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x8a0>
 800436a:	4b04      	ldr	r3, [pc, #16]	@ (800437c <HAL_ADC_ConfigChannel+0x89c>)
 800436c:	e009      	b.n	8004382 <HAL_ADC_ConfigChannel+0x8a2>
 800436e:	bf00      	nop
 8004370:	47ff0000 	.word	0x47ff0000
 8004374:	40022000 	.word	0x40022000
 8004378:	40022100 	.word	0x40022100
 800437c:	40022300 	.word	0x40022300
 8004380:	4b65      	ldr	r3, [pc, #404]	@ (8004518 <HAL_ADC_ConfigChannel+0xa38>)
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fbaa 	bl	8002adc <LL_ADC_GetCommonPathInternalCh>
 8004388:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a62      	ldr	r2, [pc, #392]	@ (800451c <HAL_ADC_ConfigChannel+0xa3c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_ADC_ConfigChannel+0x8c0>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a61      	ldr	r2, [pc, #388]	@ (8004520 <HAL_ADC_ConfigChannel+0xa40>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10e      	bne.n	80043be <HAL_ADC_ConfigChannel+0x8de>
 80043a0:	485e      	ldr	r0, [pc, #376]	@ (800451c <HAL_ADC_ConfigChannel+0xa3c>)
 80043a2:	f7fe fe13 	bl	8002fcc <LL_ADC_IsEnabled>
 80043a6:	4604      	mov	r4, r0
 80043a8:	485d      	ldr	r0, [pc, #372]	@ (8004520 <HAL_ADC_ConfigChannel+0xa40>)
 80043aa:	f7fe fe0f 	bl	8002fcc <LL_ADC_IsEnabled>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4323      	orrs	r3, r4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bf0c      	ite	eq
 80043b6:	2301      	moveq	r3, #1
 80043b8:	2300      	movne	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e008      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x8f0>
 80043be:	4859      	ldr	r0, [pc, #356]	@ (8004524 <HAL_ADC_ConfigChannel+0xa44>)
 80043c0:	f7fe fe04 	bl	8002fcc <LL_ADC_IsEnabled>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bf0c      	ite	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	2300      	movne	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8084 	beq.w	80044de <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a53      	ldr	r2, [pc, #332]	@ (8004528 <HAL_ADC_ConfigChannel+0xa48>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d132      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x966>
 80043e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d12c      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a4c      	ldr	r2, [pc, #304]	@ (8004524 <HAL_ADC_ConfigChannel+0xa44>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	f040 8086 	bne.w	8004504 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a47      	ldr	r2, [pc, #284]	@ (800451c <HAL_ADC_ConfigChannel+0xa3c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_ADC_ConfigChannel+0x92c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a46      	ldr	r2, [pc, #280]	@ (8004520 <HAL_ADC_ConfigChannel+0xa40>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x930>
 800440c:	4a47      	ldr	r2, [pc, #284]	@ (800452c <HAL_ADC_ConfigChannel+0xa4c>)
 800440e:	e000      	b.n	8004412 <HAL_ADC_ConfigChannel+0x932>
 8004410:	4a41      	ldr	r2, [pc, #260]	@ (8004518 <HAL_ADC_ConfigChannel+0xa38>)
 8004412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004416:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f7fe fb4a 	bl	8002ab6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004422:	4b43      	ldr	r3, [pc, #268]	@ (8004530 <HAL_ADC_ConfigChannel+0xa50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	4a42      	ldr	r2, [pc, #264]	@ (8004534 <HAL_ADC_ConfigChannel+0xa54>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	3301      	adds	r3, #1
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004436:	e002      	b.n	800443e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3b01      	subs	r3, #1
 800443c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f9      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004444:	e05e      	b.n	8004504 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a3b      	ldr	r2, [pc, #236]	@ (8004538 <HAL_ADC_ConfigChannel+0xa58>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d120      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x9b2>
 8004450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d11a      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a30      	ldr	r2, [pc, #192]	@ (8004524 <HAL_ADC_ConfigChannel+0xa44>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d14e      	bne.n	8004504 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a2c      	ldr	r2, [pc, #176]	@ (800451c <HAL_ADC_ConfigChannel+0xa3c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_ADC_ConfigChannel+0x99a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a2a      	ldr	r2, [pc, #168]	@ (8004520 <HAL_ADC_ConfigChannel+0xa40>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <HAL_ADC_ConfigChannel+0x99e>
 800447a:	4a2c      	ldr	r2, [pc, #176]	@ (800452c <HAL_ADC_ConfigChannel+0xa4c>)
 800447c:	e000      	b.n	8004480 <HAL_ADC_ConfigChannel+0x9a0>
 800447e:	4a26      	ldr	r2, [pc, #152]	@ (8004518 <HAL_ADC_ConfigChannel+0xa38>)
 8004480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f7fe fb13 	bl	8002ab6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004490:	e038      	b.n	8004504 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a29      	ldr	r2, [pc, #164]	@ (800453c <HAL_ADC_ConfigChannel+0xa5c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d133      	bne.n	8004504 <HAL_ADC_ConfigChannel+0xa24>
 800449c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d12d      	bne.n	8004504 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004524 <HAL_ADC_ConfigChannel+0xa44>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d128      	bne.n	8004504 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a19      	ldr	r2, [pc, #100]	@ (800451c <HAL_ADC_ConfigChannel+0xa3c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_ADC_ConfigChannel+0x9e6>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a17      	ldr	r2, [pc, #92]	@ (8004520 <HAL_ADC_ConfigChannel+0xa40>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x9ea>
 80044c6:	4a19      	ldr	r2, [pc, #100]	@ (800452c <HAL_ADC_ConfigChannel+0xa4c>)
 80044c8:	e000      	b.n	80044cc <HAL_ADC_ConfigChannel+0x9ec>
 80044ca:	4a13      	ldr	r2, [pc, #76]	@ (8004518 <HAL_ADC_ConfigChannel+0xa38>)
 80044cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fe faed 	bl	8002ab6 <LL_ADC_SetCommonPathInternalCh>
 80044dc:	e012      	b.n	8004504 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80044f0:	e008      	b.n	8004504 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f6:	f043 0220 	orr.w	r2, r3, #32
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800450c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004510:	4618      	mov	r0, r3
 8004512:	37e4      	adds	r7, #228	@ 0xe4
 8004514:	46bd      	mov	sp, r7
 8004516:	bd90      	pop	{r4, r7, pc}
 8004518:	58026300 	.word	0x58026300
 800451c:	40022000 	.word	0x40022000
 8004520:	40022100 	.word	0x40022100
 8004524:	58026000 	.word	0x58026000
 8004528:	c7520000 	.word	0xc7520000
 800452c:	40022300 	.word	0x40022300
 8004530:	2400000c 	.word	0x2400000c
 8004534:	053e2d63 	.word	0x053e2d63
 8004538:	c3210000 	.word	0xc3210000
 800453c:	cb840000 	.word	0xcb840000

08004540 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fd3d 	bl	8002fcc <LL_ADC_IsEnabled>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d16e      	bne.n	8004636 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	4b38      	ldr	r3, [pc, #224]	@ (8004640 <ADC_Enable+0x100>)
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456a:	f043 0210 	orr.w	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004576:	f043 0201 	orr.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e05a      	b.n	8004638 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fd0c 	bl	8002fa4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800458c:	f7fe fa50 	bl	8002a30 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2b      	ldr	r2, [pc, #172]	@ (8004644 <ADC_Enable+0x104>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <ADC_Enable+0x66>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a29      	ldr	r2, [pc, #164]	@ (8004648 <ADC_Enable+0x108>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d101      	bne.n	80045aa <ADC_Enable+0x6a>
 80045a6:	4b29      	ldr	r3, [pc, #164]	@ (800464c <ADC_Enable+0x10c>)
 80045a8:	e000      	b.n	80045ac <ADC_Enable+0x6c>
 80045aa:	4b29      	ldr	r3, [pc, #164]	@ (8004650 <ADC_Enable+0x110>)
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fc8f 	bl	8002ed0 <LL_ADC_GetMultimode>
 80045b2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a23      	ldr	r2, [pc, #140]	@ (8004648 <ADC_Enable+0x108>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d002      	beq.n	80045c4 <ADC_Enable+0x84>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	e000      	b.n	80045c6 <ADC_Enable+0x86>
 80045c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004644 <ADC_Enable+0x104>)
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02c      	beq.n	8004628 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d130      	bne.n	8004636 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045d4:	e028      	b.n	8004628 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fcf6 	bl	8002fcc <LL_ADC_IsEnabled>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d104      	bne.n	80045f0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fcda 	bl	8002fa4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045f0:	f7fe fa1e 	bl	8002a30 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d914      	bls.n	8004628 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d00d      	beq.n	8004628 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004610:	f043 0210 	orr.w	r2, r3, #16
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800461c:	f043 0201 	orr.w	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e007      	b.n	8004638 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d1cf      	bne.n	80045d6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	8000003f 	.word	0x8000003f
 8004644:	40022000 	.word	0x40022000
 8004648:	40022100 	.word	0x40022100
 800464c:	40022300 	.word	0x40022300
 8004650:	58026300 	.word	0x58026300

08004654 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800466a:	2b00      	cmp	r3, #0
 800466c:	d14b      	bne.n	8004706 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004672:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d021      	beq.n	80046cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fb25 	bl	8002cdc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d032      	beq.n	80046fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d12b      	bne.n	80046fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11f      	bne.n	80046fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60
 80046ca:	e018      	b.n	80046fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d111      	bne.n	80046fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d105      	bne.n	80046fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	f043 0201 	orr.w	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7fc ffa2 	bl	8001648 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004704:	e00e      	b.n	8004724 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff f9da 	bl	8003acc <HAL_ADC_ErrorCallback>
}
 8004718:	e004      	b.n	8004724 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004738:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff f9b2 	bl	8003aa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004754:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800475a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004766:	f043 0204 	orr.w	r2, r3, #4
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff f9ac 	bl	8003acc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a6c      	ldr	r2, [pc, #432]	@ (800493c <ADC_ConfigureBoostMode+0x1c0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <ADC_ConfigureBoostMode+0x1c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a6b      	ldr	r2, [pc, #428]	@ (8004940 <ADC_ConfigureBoostMode+0x1c4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d109      	bne.n	80047ac <ADC_ConfigureBoostMode+0x30>
 8004798:	4b6a      	ldr	r3, [pc, #424]	@ (8004944 <ADC_ConfigureBoostMode+0x1c8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e008      	b.n	80047be <ADC_ConfigureBoostMode+0x42>
 80047ac:	4b66      	ldr	r3, [pc, #408]	@ (8004948 <ADC_ConfigureBoostMode+0x1cc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01c      	beq.n	80047fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80047c2:	f004 fec7 	bl	8009554 <HAL_RCC_GetHCLKFreq>
 80047c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047d0:	d010      	beq.n	80047f4 <ADC_ConfigureBoostMode+0x78>
 80047d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047d6:	d873      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x144>
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047dc:	d002      	beq.n	80047e4 <ADC_ConfigureBoostMode+0x68>
 80047de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047e2:	d16d      	bne.n	80048c0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	60fb      	str	r3, [r7, #12]
        break;
 80047f2:	e068      	b.n	80048c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	60fb      	str	r3, [r7, #12]
        break;
 80047fa:	e064      	b.n	80048c6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80047fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	f006 f8a2 	bl	800a94c <HAL_RCCEx_GetPeriphCLKFreq>
 8004808:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004812:	d051      	beq.n	80048b8 <ADC_ConfigureBoostMode+0x13c>
 8004814:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004818:	d854      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x148>
 800481a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800481e:	d047      	beq.n	80048b0 <ADC_ConfigureBoostMode+0x134>
 8004820:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004824:	d84e      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x148>
 8004826:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800482a:	d03d      	beq.n	80048a8 <ADC_ConfigureBoostMode+0x12c>
 800482c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004830:	d848      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x148>
 8004832:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004836:	d033      	beq.n	80048a0 <ADC_ConfigureBoostMode+0x124>
 8004838:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800483c:	d842      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x148>
 800483e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004842:	d029      	beq.n	8004898 <ADC_ConfigureBoostMode+0x11c>
 8004844:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004848:	d83c      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x148>
 800484a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800484e:	d01a      	beq.n	8004886 <ADC_ConfigureBoostMode+0x10a>
 8004850:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004854:	d836      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x148>
 8004856:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800485a:	d014      	beq.n	8004886 <ADC_ConfigureBoostMode+0x10a>
 800485c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004860:	d830      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x148>
 8004862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004866:	d00e      	beq.n	8004886 <ADC_ConfigureBoostMode+0x10a>
 8004868:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800486c:	d82a      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x148>
 800486e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004872:	d008      	beq.n	8004886 <ADC_ConfigureBoostMode+0x10a>
 8004874:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004878:	d824      	bhi.n	80048c4 <ADC_ConfigureBoostMode+0x148>
 800487a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800487e:	d002      	beq.n	8004886 <ADC_ConfigureBoostMode+0x10a>
 8004880:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004884:	d11e      	bne.n	80048c4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	0c9b      	lsrs	r3, r3, #18
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	60fb      	str	r3, [r7, #12]
        break;
 8004896:	e016      	b.n	80048c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	60fb      	str	r3, [r7, #12]
        break;
 800489e:	e012      	b.n	80048c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	60fb      	str	r3, [r7, #12]
        break;
 80048a6:	e00e      	b.n	80048c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	60fb      	str	r3, [r7, #12]
        break;
 80048ae:	e00a      	b.n	80048c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	09db      	lsrs	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
        break;
 80048b6:	e006      	b.n	80048c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	60fb      	str	r3, [r7, #12]
        break;
 80048be:	e002      	b.n	80048c6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80048c0:	bf00      	nop
 80048c2:	e000      	b.n	80048c6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80048c4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	085b      	lsrs	r3, r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a1f      	ldr	r2, [pc, #124]	@ (800494c <ADC_ConfigureBoostMode+0x1d0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d808      	bhi.n	80048e6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80048e4:	e025      	b.n	8004932 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a19      	ldr	r2, [pc, #100]	@ (8004950 <ADC_ConfigureBoostMode+0x1d4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d80a      	bhi.n	8004904 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004900:	609a      	str	r2, [r3, #8]
}
 8004902:	e016      	b.n	8004932 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a13      	ldr	r2, [pc, #76]	@ (8004954 <ADC_ConfigureBoostMode+0x1d8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d80a      	bhi.n	8004922 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	e007      	b.n	8004932 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004930:	609a      	str	r2, [r3, #8]
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40022000 	.word	0x40022000
 8004940:	40022100 	.word	0x40022100
 8004944:	40022300 	.word	0x40022300
 8004948:	58026300 	.word	0x58026300
 800494c:	005f5e10 	.word	0x005f5e10
 8004950:	00bebc20 	.word	0x00bebc20
 8004954:	017d7840 	.word	0x017d7840

08004958 <LL_ADC_IsEnabled>:
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <LL_ADC_IsEnabled+0x18>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <LL_ADC_IsEnabled+0x1a>
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_ADC_REG_IsConversionOngoing>:
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b04      	cmp	r3, #4
 8004990:	d101      	bne.n	8004996 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b0a3      	sub	sp, #140	@ 0x8c
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e0c1      	b.n	8004baa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d102      	bne.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a40:	4b5d      	ldr	r3, [pc, #372]	@ (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e001      	b.n	8004a4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0a0      	b.n	8004baa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ff87 	bl	800497e <LL_ADC_REG_IsConversionOngoing>
 8004a70:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff80 	bl	800497e <LL_ADC_REG_IsConversionOngoing>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f040 8081 	bne.w	8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d17c      	bne.n	8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a48      	ldr	r2, [pc, #288]	@ (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a46      	ldr	r2, [pc, #280]	@ (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004aa2:	4b46      	ldr	r3, [pc, #280]	@ (8004bbc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004aa4:	e000      	b.n	8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004aa6:	4b46      	ldr	r3, [pc, #280]	@ (8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004aa8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d039      	beq.n	8004b26 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3a      	ldr	r2, [pc, #232]	@ (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a39      	ldr	r2, [pc, #228]	@ (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10e      	bne.n	8004af6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004ad8:	4836      	ldr	r0, [pc, #216]	@ (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ada:	f7ff ff3d 	bl	8004958 <LL_ADC_IsEnabled>
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4835      	ldr	r0, [pc, #212]	@ (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ae2:	f7ff ff39 	bl	8004958 <LL_ADC_IsEnabled>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4323      	orrs	r3, r4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e008      	b.n	8004b08 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004af6:	4833      	ldr	r0, [pc, #204]	@ (8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004af8:	f7ff ff2e 	bl	8004958 <LL_ADC_IsEnabled>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d047      	beq.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	6811      	ldr	r1, [r2, #0]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	6892      	ldr	r2, [r2, #8]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b22:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b24:	e03a      	b.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004b26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b30:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10e      	bne.n	8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004b46:	481b      	ldr	r0, [pc, #108]	@ (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b48:	f7ff ff06 	bl	8004958 <LL_ADC_IsEnabled>
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	481a      	ldr	r0, [pc, #104]	@ (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b50:	f7ff ff02 	bl	8004958 <LL_ADC_IsEnabled>
 8004b54:	4603      	mov	r3, r0
 8004b56:	4323      	orrs	r3, r4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e008      	b.n	8004b76 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004b64:	4817      	ldr	r0, [pc, #92]	@ (8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004b66:	f7ff fef7 	bl	8004958 <LL_ADC_IsEnabled>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d010      	beq.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b86:	e009      	b.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004b9a:	e000      	b.n	8004b9e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ba6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	378c      	adds	r7, #140	@ 0x8c
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd90      	pop	{r4, r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40022000 	.word	0x40022000
 8004bb8:	40022100 	.word	0x40022100
 8004bbc:	40022300 	.word	0x40022300
 8004bc0:	58026300 	.word	0x58026300
 8004bc4:	58026000 	.word	0x58026000
 8004bc8:	fffff0e0 	.word	0xfffff0e0

08004bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <__NVIC_SetPriorityGrouping+0x40>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004be8:	4013      	ands	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bf4:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <__NVIC_SetPriorityGrouping+0x44>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bfa:	4a04      	ldr	r2, [pc, #16]	@ (8004c0c <__NVIC_SetPriorityGrouping+0x40>)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	60d3      	str	r3, [r2, #12]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	e000ed00 	.word	0xe000ed00
 8004c10:	05fa0000 	.word	0x05fa0000

08004c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c18:	4b04      	ldr	r3, [pc, #16]	@ (8004c2c <__NVIC_GetPriorityGrouping+0x18>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	f003 0307 	and.w	r3, r3, #7
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	db0b      	blt.n	8004c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	f003 021f 	and.w	r2, r3, #31
 8004c48:	4907      	ldr	r1, [pc, #28]	@ (8004c68 <__NVIC_EnableIRQ+0x38>)
 8004c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	2001      	movs	r0, #1
 8004c52:	fa00 f202 	lsl.w	r2, r0, r2
 8004c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	e000e100 	.word	0xe000e100

08004c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	6039      	str	r1, [r7, #0]
 8004c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	db0a      	blt.n	8004c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	490c      	ldr	r1, [pc, #48]	@ (8004cb8 <__NVIC_SetPriority+0x4c>)
 8004c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c8a:	0112      	lsls	r2, r2, #4
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c94:	e00a      	b.n	8004cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4908      	ldr	r1, [pc, #32]	@ (8004cbc <__NVIC_SetPriority+0x50>)
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	3b04      	subs	r3, #4
 8004ca4:	0112      	lsls	r2, r2, #4
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	440b      	add	r3, r1
 8004caa:	761a      	strb	r2, [r3, #24]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	e000e100 	.word	0xe000e100
 8004cbc:	e000ed00 	.word	0xe000ed00

08004cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	@ 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f1c3 0307 	rsb	r3, r3, #7
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	bf28      	it	cs
 8004cde:	2304      	movcs	r3, #4
 8004ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	2b06      	cmp	r3, #6
 8004ce8:	d902      	bls.n	8004cf0 <NVIC_EncodePriority+0x30>
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3b03      	subs	r3, #3
 8004cee:	e000      	b.n	8004cf2 <NVIC_EncodePriority+0x32>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	401a      	ands	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d08:	f04f 31ff 	mov.w	r1, #4294967295
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	43d9      	mvns	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d18:	4313      	orrs	r3, r2
         );
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3724      	adds	r7, #36	@ 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d38:	d301      	bcc.n	8004d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e00f      	b.n	8004d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d68 <SysTick_Config+0x40>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d46:	210f      	movs	r1, #15
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	f7ff ff8e 	bl	8004c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <SysTick_Config+0x40>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d56:	4b04      	ldr	r3, [pc, #16]	@ (8004d68 <SysTick_Config+0x40>)
 8004d58:	2207      	movs	r2, #7
 8004d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	e000e010 	.word	0xe000e010

08004d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff29 	bl	8004bcc <__NVIC_SetPriorityGrouping>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	4603      	mov	r3, r0
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d90:	f7ff ff40 	bl	8004c14 <__NVIC_GetPriorityGrouping>
 8004d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f7ff ff90 	bl	8004cc0 <NVIC_EncodePriority>
 8004da0:	4602      	mov	r2, r0
 8004da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ff5f 	bl	8004c6c <__NVIC_SetPriority>
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff ff33 	bl	8004c30 <__NVIC_EnableIRQ>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff ffa4 	bl	8004d28 <SysTick_Config>
 8004de0:	4603      	mov	r3, r0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004df4:	f7fd fe1c 	bl	8002a30 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e312      	b.n	800542a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a66      	ldr	r2, [pc, #408]	@ (8004fa4 <HAL_DMA_Init+0x1b8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d04a      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a65      	ldr	r2, [pc, #404]	@ (8004fa8 <HAL_DMA_Init+0x1bc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d045      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a63      	ldr	r2, [pc, #396]	@ (8004fac <HAL_DMA_Init+0x1c0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d040      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a62      	ldr	r2, [pc, #392]	@ (8004fb0 <HAL_DMA_Init+0x1c4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d03b      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a60      	ldr	r2, [pc, #384]	@ (8004fb4 <HAL_DMA_Init+0x1c8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d036      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8004fb8 <HAL_DMA_Init+0x1cc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d031      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a5d      	ldr	r2, [pc, #372]	@ (8004fbc <HAL_DMA_Init+0x1d0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02c      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a5c      	ldr	r2, [pc, #368]	@ (8004fc0 <HAL_DMA_Init+0x1d4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d027      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a5a      	ldr	r2, [pc, #360]	@ (8004fc4 <HAL_DMA_Init+0x1d8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d022      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a59      	ldr	r2, [pc, #356]	@ (8004fc8 <HAL_DMA_Init+0x1dc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01d      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a57      	ldr	r2, [pc, #348]	@ (8004fcc <HAL_DMA_Init+0x1e0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d018      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a56      	ldr	r2, [pc, #344]	@ (8004fd0 <HAL_DMA_Init+0x1e4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a54      	ldr	r2, [pc, #336]	@ (8004fd4 <HAL_DMA_Init+0x1e8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a53      	ldr	r2, [pc, #332]	@ (8004fd8 <HAL_DMA_Init+0x1ec>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a51      	ldr	r2, [pc, #324]	@ (8004fdc <HAL_DMA_Init+0x1f0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_DMA_Init+0xb8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a50      	ldr	r2, [pc, #320]	@ (8004fe0 <HAL_DMA_Init+0x1f4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_DMA_Init+0xbc>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_DMA_Init+0xbe>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 813c 	beq.w	8005128 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a37      	ldr	r2, [pc, #220]	@ (8004fa4 <HAL_DMA_Init+0x1b8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d04a      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a36      	ldr	r2, [pc, #216]	@ (8004fa8 <HAL_DMA_Init+0x1bc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d045      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a34      	ldr	r2, [pc, #208]	@ (8004fac <HAL_DMA_Init+0x1c0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d040      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a33      	ldr	r2, [pc, #204]	@ (8004fb0 <HAL_DMA_Init+0x1c4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d03b      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a31      	ldr	r2, [pc, #196]	@ (8004fb4 <HAL_DMA_Init+0x1c8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d036      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a30      	ldr	r2, [pc, #192]	@ (8004fb8 <HAL_DMA_Init+0x1cc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d031      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2e      	ldr	r2, [pc, #184]	@ (8004fbc <HAL_DMA_Init+0x1d0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02c      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc0 <HAL_DMA_Init+0x1d4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d027      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc4 <HAL_DMA_Init+0x1d8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d022      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc8 <HAL_DMA_Init+0x1dc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d01d      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a28      	ldr	r2, [pc, #160]	@ (8004fcc <HAL_DMA_Init+0x1e0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a27      	ldr	r2, [pc, #156]	@ (8004fd0 <HAL_DMA_Init+0x1e4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a25      	ldr	r2, [pc, #148]	@ (8004fd4 <HAL_DMA_Init+0x1e8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a24      	ldr	r2, [pc, #144]	@ (8004fd8 <HAL_DMA_Init+0x1ec>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a22      	ldr	r2, [pc, #136]	@ (8004fdc <HAL_DMA_Init+0x1f0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_DMA_Init+0x174>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a21      	ldr	r2, [pc, #132]	@ (8004fe0 <HAL_DMA_Init+0x1f4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d108      	bne.n	8004f72 <HAL_DMA_Init+0x186>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e007      	b.n	8004f82 <HAL_DMA_Init+0x196>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f82:	e02f      	b.n	8004fe4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f84:	f7fd fd54 	bl	8002a30 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d928      	bls.n	8004fe4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e242      	b.n	800542a <HAL_DMA_Init+0x63e>
 8004fa4:	40020010 	.word	0x40020010
 8004fa8:	40020028 	.word	0x40020028
 8004fac:	40020040 	.word	0x40020040
 8004fb0:	40020058 	.word	0x40020058
 8004fb4:	40020070 	.word	0x40020070
 8004fb8:	40020088 	.word	0x40020088
 8004fbc:	400200a0 	.word	0x400200a0
 8004fc0:	400200b8 	.word	0x400200b8
 8004fc4:	40020410 	.word	0x40020410
 8004fc8:	40020428 	.word	0x40020428
 8004fcc:	40020440 	.word	0x40020440
 8004fd0:	40020458 	.word	0x40020458
 8004fd4:	40020470 	.word	0x40020470
 8004fd8:	40020488 	.word	0x40020488
 8004fdc:	400204a0 	.word	0x400204a0
 8004fe0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1c8      	bne.n	8004f84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4b83      	ldr	r3, [pc, #524]	@ (800520c <HAL_DMA_Init+0x420>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800500a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005016:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005022:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	2b04      	cmp	r3, #4
 8005036:	d107      	bne.n	8005048 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005040:	4313      	orrs	r3, r2
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b28      	cmp	r3, #40	@ 0x28
 800504e:	d903      	bls.n	8005058 <HAL_DMA_Init+0x26c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b2e      	cmp	r3, #46	@ 0x2e
 8005056:	d91f      	bls.n	8005098 <HAL_DMA_Init+0x2ac>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b3e      	cmp	r3, #62	@ 0x3e
 800505e:	d903      	bls.n	8005068 <HAL_DMA_Init+0x27c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b42      	cmp	r3, #66	@ 0x42
 8005066:	d917      	bls.n	8005098 <HAL_DMA_Init+0x2ac>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b46      	cmp	r3, #70	@ 0x46
 800506e:	d903      	bls.n	8005078 <HAL_DMA_Init+0x28c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b48      	cmp	r3, #72	@ 0x48
 8005076:	d90f      	bls.n	8005098 <HAL_DMA_Init+0x2ac>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b4e      	cmp	r3, #78	@ 0x4e
 800507e:	d903      	bls.n	8005088 <HAL_DMA_Init+0x29c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b52      	cmp	r3, #82	@ 0x52
 8005086:	d907      	bls.n	8005098 <HAL_DMA_Init+0x2ac>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b73      	cmp	r3, #115	@ 0x73
 800508e:	d905      	bls.n	800509c <HAL_DMA_Init+0x2b0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b77      	cmp	r3, #119	@ 0x77
 8005096:	d801      	bhi.n	800509c <HAL_DMA_Init+0x2b0>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_DMA_Init+0x2b2>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f023 0307 	bic.w	r3, r3, #7
 80050c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d117      	bne.n	8005104 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00e      	beq.n	8005104 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f001 fdca 	bl	8006c80 <DMA_CheckFifoParam>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2240      	movs	r2, #64	@ 0x40
 80050f6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e192      	b.n	800542a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f001 fd05 	bl	8006b1c <DMA_CalcBaseAndBitshift>
 8005112:	4603      	mov	r3, r0
 8005114:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	223f      	movs	r2, #63	@ 0x3f
 8005120:	409a      	lsls	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	609a      	str	r2, [r3, #8]
 8005126:	e0c8      	b.n	80052ba <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a38      	ldr	r2, [pc, #224]	@ (8005210 <HAL_DMA_Init+0x424>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d022      	beq.n	8005178 <HAL_DMA_Init+0x38c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a37      	ldr	r2, [pc, #220]	@ (8005214 <HAL_DMA_Init+0x428>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d01d      	beq.n	8005178 <HAL_DMA_Init+0x38c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a35      	ldr	r2, [pc, #212]	@ (8005218 <HAL_DMA_Init+0x42c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d018      	beq.n	8005178 <HAL_DMA_Init+0x38c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a34      	ldr	r2, [pc, #208]	@ (800521c <HAL_DMA_Init+0x430>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <HAL_DMA_Init+0x38c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a32      	ldr	r2, [pc, #200]	@ (8005220 <HAL_DMA_Init+0x434>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00e      	beq.n	8005178 <HAL_DMA_Init+0x38c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a31      	ldr	r2, [pc, #196]	@ (8005224 <HAL_DMA_Init+0x438>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_DMA_Init+0x38c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2f      	ldr	r2, [pc, #188]	@ (8005228 <HAL_DMA_Init+0x43c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_DMA_Init+0x38c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2e      	ldr	r2, [pc, #184]	@ (800522c <HAL_DMA_Init+0x440>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d101      	bne.n	800517c <HAL_DMA_Init+0x390>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_DMA_Init+0x392>
 800517c:	2300      	movs	r3, #0
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8092 	beq.w	80052a8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a21      	ldr	r2, [pc, #132]	@ (8005210 <HAL_DMA_Init+0x424>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d021      	beq.n	80051d2 <HAL_DMA_Init+0x3e6>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a20      	ldr	r2, [pc, #128]	@ (8005214 <HAL_DMA_Init+0x428>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d01c      	beq.n	80051d2 <HAL_DMA_Init+0x3e6>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1e      	ldr	r2, [pc, #120]	@ (8005218 <HAL_DMA_Init+0x42c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d017      	beq.n	80051d2 <HAL_DMA_Init+0x3e6>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1d      	ldr	r2, [pc, #116]	@ (800521c <HAL_DMA_Init+0x430>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d012      	beq.n	80051d2 <HAL_DMA_Init+0x3e6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005220 <HAL_DMA_Init+0x434>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00d      	beq.n	80051d2 <HAL_DMA_Init+0x3e6>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005224 <HAL_DMA_Init+0x438>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d008      	beq.n	80051d2 <HAL_DMA_Init+0x3e6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a18      	ldr	r2, [pc, #96]	@ (8005228 <HAL_DMA_Init+0x43c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <HAL_DMA_Init+0x3e6>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a17      	ldr	r2, [pc, #92]	@ (800522c <HAL_DMA_Init+0x440>)
 80051d0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4b10      	ldr	r3, [pc, #64]	@ (8005230 <HAL_DMA_Init+0x444>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b40      	cmp	r3, #64	@ 0x40
 80051f8:	d01c      	beq.n	8005234 <HAL_DMA_Init+0x448>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b80      	cmp	r3, #128	@ 0x80
 8005200:	d102      	bne.n	8005208 <HAL_DMA_Init+0x41c>
 8005202:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005206:	e016      	b.n	8005236 <HAL_DMA_Init+0x44a>
 8005208:	2300      	movs	r3, #0
 800520a:	e014      	b.n	8005236 <HAL_DMA_Init+0x44a>
 800520c:	fe10803f 	.word	0xfe10803f
 8005210:	58025408 	.word	0x58025408
 8005214:	5802541c 	.word	0x5802541c
 8005218:	58025430 	.word	0x58025430
 800521c:	58025444 	.word	0x58025444
 8005220:	58025458 	.word	0x58025458
 8005224:	5802546c 	.word	0x5802546c
 8005228:	58025480 	.word	0x58025480
 800522c:	58025494 	.word	0x58025494
 8005230:	fffe000f 	.word	0xfffe000f
 8005234:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68d2      	ldr	r2, [r2, #12]
 800523a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800523c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005244:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800524c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005254:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800525c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005264:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	4b6e      	ldr	r3, [pc, #440]	@ (8005434 <HAL_DMA_Init+0x648>)
 800527c:	4413      	add	r3, r2
 800527e:	4a6e      	ldr	r2, [pc, #440]	@ (8005438 <HAL_DMA_Init+0x64c>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	009a      	lsls	r2, r3, #2
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 fc45 	bl	8006b1c <DMA_CalcBaseAndBitshift>
 8005292:	4603      	mov	r3, r0
 8005294:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529a:	f003 031f 	and.w	r3, r3, #31
 800529e:	2201      	movs	r2, #1
 80052a0:	409a      	lsls	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]
 80052a6:	e008      	b.n	80052ba <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2240      	movs	r2, #64	@ 0x40
 80052ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2203      	movs	r2, #3
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e0b7      	b.n	800542a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a5f      	ldr	r2, [pc, #380]	@ (800543c <HAL_DMA_Init+0x650>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d072      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005440 <HAL_DMA_Init+0x654>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d06d      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005444 <HAL_DMA_Init+0x658>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d068      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005448 <HAL_DMA_Init+0x65c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d063      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a59      	ldr	r2, [pc, #356]	@ (800544c <HAL_DMA_Init+0x660>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d05e      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a57      	ldr	r2, [pc, #348]	@ (8005450 <HAL_DMA_Init+0x664>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d059      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a56      	ldr	r2, [pc, #344]	@ (8005454 <HAL_DMA_Init+0x668>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d054      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a54      	ldr	r2, [pc, #336]	@ (8005458 <HAL_DMA_Init+0x66c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d04f      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a53      	ldr	r2, [pc, #332]	@ (800545c <HAL_DMA_Init+0x670>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d04a      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a51      	ldr	r2, [pc, #324]	@ (8005460 <HAL_DMA_Init+0x674>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d045      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a50      	ldr	r2, [pc, #320]	@ (8005464 <HAL_DMA_Init+0x678>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d040      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a4e      	ldr	r2, [pc, #312]	@ (8005468 <HAL_DMA_Init+0x67c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d03b      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4d      	ldr	r2, [pc, #308]	@ (800546c <HAL_DMA_Init+0x680>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d036      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a4b      	ldr	r2, [pc, #300]	@ (8005470 <HAL_DMA_Init+0x684>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d031      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a4a      	ldr	r2, [pc, #296]	@ (8005474 <HAL_DMA_Init+0x688>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d02c      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a48      	ldr	r2, [pc, #288]	@ (8005478 <HAL_DMA_Init+0x68c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d027      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a47      	ldr	r2, [pc, #284]	@ (800547c <HAL_DMA_Init+0x690>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d022      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a45      	ldr	r2, [pc, #276]	@ (8005480 <HAL_DMA_Init+0x694>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01d      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a44      	ldr	r2, [pc, #272]	@ (8005484 <HAL_DMA_Init+0x698>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d018      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a42      	ldr	r2, [pc, #264]	@ (8005488 <HAL_DMA_Init+0x69c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a41      	ldr	r2, [pc, #260]	@ (800548c <HAL_DMA_Init+0x6a0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a3f      	ldr	r2, [pc, #252]	@ (8005490 <HAL_DMA_Init+0x6a4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a3e      	ldr	r2, [pc, #248]	@ (8005494 <HAL_DMA_Init+0x6a8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_DMA_Init+0x5be>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005498 <HAL_DMA_Init+0x6ac>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d101      	bne.n	80053ae <HAL_DMA_Init+0x5c2>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <HAL_DMA_Init+0x5c4>
 80053ae:	2300      	movs	r3, #0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d032      	beq.n	800541a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f001 fcdf 	bl	8006d78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b80      	cmp	r3, #128	@ 0x80
 80053c0:	d102      	bne.n	80053c8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d010      	beq.n	8005408 <HAL_DMA_Init+0x61c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d80c      	bhi.n	8005408 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 fd5c 	bl	8006eac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	e008      	b.n	800541a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	a7fdabf8 	.word	0xa7fdabf8
 8005438:	cccccccd 	.word	0xcccccccd
 800543c:	40020010 	.word	0x40020010
 8005440:	40020028 	.word	0x40020028
 8005444:	40020040 	.word	0x40020040
 8005448:	40020058 	.word	0x40020058
 800544c:	40020070 	.word	0x40020070
 8005450:	40020088 	.word	0x40020088
 8005454:	400200a0 	.word	0x400200a0
 8005458:	400200b8 	.word	0x400200b8
 800545c:	40020410 	.word	0x40020410
 8005460:	40020428 	.word	0x40020428
 8005464:	40020440 	.word	0x40020440
 8005468:	40020458 	.word	0x40020458
 800546c:	40020470 	.word	0x40020470
 8005470:	40020488 	.word	0x40020488
 8005474:	400204a0 	.word	0x400204a0
 8005478:	400204b8 	.word	0x400204b8
 800547c:	58025408 	.word	0x58025408
 8005480:	5802541c 	.word	0x5802541c
 8005484:	58025430 	.word	0x58025430
 8005488:	58025444 	.word	0x58025444
 800548c:	58025458 	.word	0x58025458
 8005490:	5802546c 	.word	0x5802546c
 8005494:	58025480 	.word	0x58025480
 8005498:	58025494 	.word	0x58025494

0800549c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e226      	b.n	8005906 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_DMA_Start_IT+0x2a>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e21f      	b.n	8005906 <HAL_DMA_Start_IT+0x46a>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	f040 820a 	bne.w	80058f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a68      	ldr	r2, [pc, #416]	@ (8005690 <HAL_DMA_Start_IT+0x1f4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d04a      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a66      	ldr	r2, [pc, #408]	@ (8005694 <HAL_DMA_Start_IT+0x1f8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d045      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a65      	ldr	r2, [pc, #404]	@ (8005698 <HAL_DMA_Start_IT+0x1fc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d040      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a63      	ldr	r2, [pc, #396]	@ (800569c <HAL_DMA_Start_IT+0x200>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d03b      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a62      	ldr	r2, [pc, #392]	@ (80056a0 <HAL_DMA_Start_IT+0x204>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d036      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a60      	ldr	r2, [pc, #384]	@ (80056a4 <HAL_DMA_Start_IT+0x208>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d031      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a5f      	ldr	r2, [pc, #380]	@ (80056a8 <HAL_DMA_Start_IT+0x20c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d02c      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5d      	ldr	r2, [pc, #372]	@ (80056ac <HAL_DMA_Start_IT+0x210>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d027      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a5c      	ldr	r2, [pc, #368]	@ (80056b0 <HAL_DMA_Start_IT+0x214>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d022      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a5a      	ldr	r2, [pc, #360]	@ (80056b4 <HAL_DMA_Start_IT+0x218>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01d      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a59      	ldr	r2, [pc, #356]	@ (80056b8 <HAL_DMA_Start_IT+0x21c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d018      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a57      	ldr	r2, [pc, #348]	@ (80056bc <HAL_DMA_Start_IT+0x220>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a56      	ldr	r2, [pc, #344]	@ (80056c0 <HAL_DMA_Start_IT+0x224>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00e      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a54      	ldr	r2, [pc, #336]	@ (80056c4 <HAL_DMA_Start_IT+0x228>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d009      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a53      	ldr	r2, [pc, #332]	@ (80056c8 <HAL_DMA_Start_IT+0x22c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d004      	beq.n	800558a <HAL_DMA_Start_IT+0xee>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a51      	ldr	r2, [pc, #324]	@ (80056cc <HAL_DMA_Start_IT+0x230>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <HAL_DMA_Start_IT+0x100>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0201 	bic.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e007      	b.n	80055ac <HAL_DMA_Start_IT+0x110>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f001 f906 	bl	80067c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a34      	ldr	r2, [pc, #208]	@ (8005690 <HAL_DMA_Start_IT+0x1f4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d04a      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a33      	ldr	r2, [pc, #204]	@ (8005694 <HAL_DMA_Start_IT+0x1f8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d045      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a31      	ldr	r2, [pc, #196]	@ (8005698 <HAL_DMA_Start_IT+0x1fc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d040      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a30      	ldr	r2, [pc, #192]	@ (800569c <HAL_DMA_Start_IT+0x200>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d03b      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a2e      	ldr	r2, [pc, #184]	@ (80056a0 <HAL_DMA_Start_IT+0x204>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d036      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2d      	ldr	r2, [pc, #180]	@ (80056a4 <HAL_DMA_Start_IT+0x208>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d031      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a2b      	ldr	r2, [pc, #172]	@ (80056a8 <HAL_DMA_Start_IT+0x20c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d02c      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2a      	ldr	r2, [pc, #168]	@ (80056ac <HAL_DMA_Start_IT+0x210>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d027      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a28      	ldr	r2, [pc, #160]	@ (80056b0 <HAL_DMA_Start_IT+0x214>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d022      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a27      	ldr	r2, [pc, #156]	@ (80056b4 <HAL_DMA_Start_IT+0x218>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d01d      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a25      	ldr	r2, [pc, #148]	@ (80056b8 <HAL_DMA_Start_IT+0x21c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d018      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a24      	ldr	r2, [pc, #144]	@ (80056bc <HAL_DMA_Start_IT+0x220>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a22      	ldr	r2, [pc, #136]	@ (80056c0 <HAL_DMA_Start_IT+0x224>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00e      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	@ (80056c4 <HAL_DMA_Start_IT+0x228>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d009      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1f      	ldr	r2, [pc, #124]	@ (80056c8 <HAL_DMA_Start_IT+0x22c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_DMA_Start_IT+0x1bc>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1e      	ldr	r2, [pc, #120]	@ (80056cc <HAL_DMA_Start_IT+0x230>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d101      	bne.n	800565c <HAL_DMA_Start_IT+0x1c0>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_DMA_Start_IT+0x1c2>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d036      	beq.n	80056d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f023 021e 	bic.w	r2, r3, #30
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0216 	orr.w	r2, r2, #22
 8005674:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d03e      	beq.n	80056fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0208 	orr.w	r2, r2, #8
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e035      	b.n	80056fc <HAL_DMA_Start_IT+0x260>
 8005690:	40020010 	.word	0x40020010
 8005694:	40020028 	.word	0x40020028
 8005698:	40020040 	.word	0x40020040
 800569c:	40020058 	.word	0x40020058
 80056a0:	40020070 	.word	0x40020070
 80056a4:	40020088 	.word	0x40020088
 80056a8:	400200a0 	.word	0x400200a0
 80056ac:	400200b8 	.word	0x400200b8
 80056b0:	40020410 	.word	0x40020410
 80056b4:	40020428 	.word	0x40020428
 80056b8:	40020440 	.word	0x40020440
 80056bc:	40020458 	.word	0x40020458
 80056c0:	40020470 	.word	0x40020470
 80056c4:	40020488 	.word	0x40020488
 80056c8:	400204a0 	.word	0x400204a0
 80056cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 020e 	bic.w	r2, r3, #14
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 020a 	orr.w	r2, r2, #10
 80056e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0204 	orr.w	r2, r2, #4
 80056fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a83      	ldr	r2, [pc, #524]	@ (8005910 <HAL_DMA_Start_IT+0x474>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d072      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a82      	ldr	r2, [pc, #520]	@ (8005914 <HAL_DMA_Start_IT+0x478>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d06d      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a80      	ldr	r2, [pc, #512]	@ (8005918 <HAL_DMA_Start_IT+0x47c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d068      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7f      	ldr	r2, [pc, #508]	@ (800591c <HAL_DMA_Start_IT+0x480>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d063      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a7d      	ldr	r2, [pc, #500]	@ (8005920 <HAL_DMA_Start_IT+0x484>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d05e      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a7c      	ldr	r2, [pc, #496]	@ (8005924 <HAL_DMA_Start_IT+0x488>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d059      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a7a      	ldr	r2, [pc, #488]	@ (8005928 <HAL_DMA_Start_IT+0x48c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d054      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a79      	ldr	r2, [pc, #484]	@ (800592c <HAL_DMA_Start_IT+0x490>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d04f      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a77      	ldr	r2, [pc, #476]	@ (8005930 <HAL_DMA_Start_IT+0x494>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d04a      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a76      	ldr	r2, [pc, #472]	@ (8005934 <HAL_DMA_Start_IT+0x498>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d045      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a74      	ldr	r2, [pc, #464]	@ (8005938 <HAL_DMA_Start_IT+0x49c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d040      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a73      	ldr	r2, [pc, #460]	@ (800593c <HAL_DMA_Start_IT+0x4a0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d03b      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a71      	ldr	r2, [pc, #452]	@ (8005940 <HAL_DMA_Start_IT+0x4a4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d036      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a70      	ldr	r2, [pc, #448]	@ (8005944 <HAL_DMA_Start_IT+0x4a8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d031      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a6e      	ldr	r2, [pc, #440]	@ (8005948 <HAL_DMA_Start_IT+0x4ac>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d02c      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6d      	ldr	r2, [pc, #436]	@ (800594c <HAL_DMA_Start_IT+0x4b0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d027      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a6b      	ldr	r2, [pc, #428]	@ (8005950 <HAL_DMA_Start_IT+0x4b4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d022      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6a      	ldr	r2, [pc, #424]	@ (8005954 <HAL_DMA_Start_IT+0x4b8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d01d      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a68      	ldr	r2, [pc, #416]	@ (8005958 <HAL_DMA_Start_IT+0x4bc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a67      	ldr	r2, [pc, #412]	@ (800595c <HAL_DMA_Start_IT+0x4c0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d013      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a65      	ldr	r2, [pc, #404]	@ (8005960 <HAL_DMA_Start_IT+0x4c4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a64      	ldr	r2, [pc, #400]	@ (8005964 <HAL_DMA_Start_IT+0x4c8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a62      	ldr	r2, [pc, #392]	@ (8005968 <HAL_DMA_Start_IT+0x4cc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_DMA_Start_IT+0x350>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a61      	ldr	r2, [pc, #388]	@ (800596c <HAL_DMA_Start_IT+0x4d0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d101      	bne.n	80057f0 <HAL_DMA_Start_IT+0x354>
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_DMA_Start_IT+0x356>
 80057f0:	2300      	movs	r3, #0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01a      	beq.n	800582c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800580e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005812:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800582a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a37      	ldr	r2, [pc, #220]	@ (8005910 <HAL_DMA_Start_IT+0x474>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d04a      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a36      	ldr	r2, [pc, #216]	@ (8005914 <HAL_DMA_Start_IT+0x478>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d045      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a34      	ldr	r2, [pc, #208]	@ (8005918 <HAL_DMA_Start_IT+0x47c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d040      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a33      	ldr	r2, [pc, #204]	@ (800591c <HAL_DMA_Start_IT+0x480>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d03b      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a31      	ldr	r2, [pc, #196]	@ (8005920 <HAL_DMA_Start_IT+0x484>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d036      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a30      	ldr	r2, [pc, #192]	@ (8005924 <HAL_DMA_Start_IT+0x488>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d031      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2e      	ldr	r2, [pc, #184]	@ (8005928 <HAL_DMA_Start_IT+0x48c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02c      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a2d      	ldr	r2, [pc, #180]	@ (800592c <HAL_DMA_Start_IT+0x490>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d027      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2b      	ldr	r2, [pc, #172]	@ (8005930 <HAL_DMA_Start_IT+0x494>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d022      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2a      	ldr	r2, [pc, #168]	@ (8005934 <HAL_DMA_Start_IT+0x498>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d01d      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a28      	ldr	r2, [pc, #160]	@ (8005938 <HAL_DMA_Start_IT+0x49c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d018      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a27      	ldr	r2, [pc, #156]	@ (800593c <HAL_DMA_Start_IT+0x4a0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a25      	ldr	r2, [pc, #148]	@ (8005940 <HAL_DMA_Start_IT+0x4a4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00e      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a24      	ldr	r2, [pc, #144]	@ (8005944 <HAL_DMA_Start_IT+0x4a8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d009      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a22      	ldr	r2, [pc, #136]	@ (8005948 <HAL_DMA_Start_IT+0x4ac>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_DMA_Start_IT+0x430>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a21      	ldr	r2, [pc, #132]	@ (800594c <HAL_DMA_Start_IT+0x4b0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <HAL_DMA_Start_IT+0x442>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e012      	b.n	8005904 <HAL_DMA_Start_IT+0x468>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e009      	b.n	8005904 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40020010 	.word	0x40020010
 8005914:	40020028 	.word	0x40020028
 8005918:	40020040 	.word	0x40020040
 800591c:	40020058 	.word	0x40020058
 8005920:	40020070 	.word	0x40020070
 8005924:	40020088 	.word	0x40020088
 8005928:	400200a0 	.word	0x400200a0
 800592c:	400200b8 	.word	0x400200b8
 8005930:	40020410 	.word	0x40020410
 8005934:	40020428 	.word	0x40020428
 8005938:	40020440 	.word	0x40020440
 800593c:	40020458 	.word	0x40020458
 8005940:	40020470 	.word	0x40020470
 8005944:	40020488 	.word	0x40020488
 8005948:	400204a0 	.word	0x400204a0
 800594c:	400204b8 	.word	0x400204b8
 8005950:	58025408 	.word	0x58025408
 8005954:	5802541c 	.word	0x5802541c
 8005958:	58025430 	.word	0x58025430
 800595c:	58025444 	.word	0x58025444
 8005960:	58025458 	.word	0x58025458
 8005964:	5802546c 	.word	0x5802546c
 8005968:	58025480 	.word	0x58025480
 800596c:	58025494 	.word	0x58025494

08005970 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	@ 0x28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800597c:	4b67      	ldr	r3, [pc, #412]	@ (8005b1c <HAL_DMA_IRQHandler+0x1ac>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a67      	ldr	r2, [pc, #412]	@ (8005b20 <HAL_DMA_IRQHandler+0x1b0>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	0a9b      	lsrs	r3, r3, #10
 8005988:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005994:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005b24 <HAL_DMA_IRQHandler+0x1b4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d04a      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005b28 <HAL_DMA_IRQHandler+0x1b8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d045      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a5c      	ldr	r2, [pc, #368]	@ (8005b2c <HAL_DMA_IRQHandler+0x1bc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d040      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005b30 <HAL_DMA_IRQHandler+0x1c0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d03b      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a59      	ldr	r2, [pc, #356]	@ (8005b34 <HAL_DMA_IRQHandler+0x1c4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d036      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a57      	ldr	r2, [pc, #348]	@ (8005b38 <HAL_DMA_IRQHandler+0x1c8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d031      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a56      	ldr	r2, [pc, #344]	@ (8005b3c <HAL_DMA_IRQHandler+0x1cc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d02c      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a54      	ldr	r2, [pc, #336]	@ (8005b40 <HAL_DMA_IRQHandler+0x1d0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d027      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a53      	ldr	r2, [pc, #332]	@ (8005b44 <HAL_DMA_IRQHandler+0x1d4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d022      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a51      	ldr	r2, [pc, #324]	@ (8005b48 <HAL_DMA_IRQHandler+0x1d8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01d      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a50      	ldr	r2, [pc, #320]	@ (8005b4c <HAL_DMA_IRQHandler+0x1dc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d018      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a4e      	ldr	r2, [pc, #312]	@ (8005b50 <HAL_DMA_IRQHandler+0x1e0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8005b54 <HAL_DMA_IRQHandler+0x1e4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a4b      	ldr	r2, [pc, #300]	@ (8005b58 <HAL_DMA_IRQHandler+0x1e8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a4a      	ldr	r2, [pc, #296]	@ (8005b5c <HAL_DMA_IRQHandler+0x1ec>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a48      	ldr	r2, [pc, #288]	@ (8005b60 <HAL_DMA_IRQHandler+0x1f0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d101      	bne.n	8005a46 <HAL_DMA_IRQHandler+0xd6>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_DMA_IRQHandler+0xd8>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 842b 	beq.w	80062a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	2208      	movs	r2, #8
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80a2 	beq.w	8005ba8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2e      	ldr	r2, [pc, #184]	@ (8005b24 <HAL_DMA_IRQHandler+0x1b4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d04a      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2d      	ldr	r2, [pc, #180]	@ (8005b28 <HAL_DMA_IRQHandler+0x1b8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d045      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b2c <HAL_DMA_IRQHandler+0x1bc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d040      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2a      	ldr	r2, [pc, #168]	@ (8005b30 <HAL_DMA_IRQHandler+0x1c0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d03b      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a28      	ldr	r2, [pc, #160]	@ (8005b34 <HAL_DMA_IRQHandler+0x1c4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d036      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a27      	ldr	r2, [pc, #156]	@ (8005b38 <HAL_DMA_IRQHandler+0x1c8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d031      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a25      	ldr	r2, [pc, #148]	@ (8005b3c <HAL_DMA_IRQHandler+0x1cc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d02c      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a24      	ldr	r2, [pc, #144]	@ (8005b40 <HAL_DMA_IRQHandler+0x1d0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d027      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <HAL_DMA_IRQHandler+0x1d4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d022      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	@ (8005b48 <HAL_DMA_IRQHandler+0x1d8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d01d      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1f      	ldr	r2, [pc, #124]	@ (8005b4c <HAL_DMA_IRQHandler+0x1dc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d018      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b50 <HAL_DMA_IRQHandler+0x1e0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b54 <HAL_DMA_IRQHandler+0x1e4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00e      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1b      	ldr	r2, [pc, #108]	@ (8005b58 <HAL_DMA_IRQHandler+0x1e8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a19      	ldr	r2, [pc, #100]	@ (8005b5c <HAL_DMA_IRQHandler+0x1ec>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x194>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a18      	ldr	r2, [pc, #96]	@ (8005b60 <HAL_DMA_IRQHandler+0x1f0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d12f      	bne.n	8005b64 <HAL_DMA_IRQHandler+0x1f4>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf14      	ite	ne
 8005b12:	2301      	movne	r3, #1
 8005b14:	2300      	moveq	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	e02e      	b.n	8005b78 <HAL_DMA_IRQHandler+0x208>
 8005b1a:	bf00      	nop
 8005b1c:	2400000c 	.word	0x2400000c
 8005b20:	1b4e81b5 	.word	0x1b4e81b5
 8005b24:	40020010 	.word	0x40020010
 8005b28:	40020028 	.word	0x40020028
 8005b2c:	40020040 	.word	0x40020040
 8005b30:	40020058 	.word	0x40020058
 8005b34:	40020070 	.word	0x40020070
 8005b38:	40020088 	.word	0x40020088
 8005b3c:	400200a0 	.word	0x400200a0
 8005b40:	400200b8 	.word	0x400200b8
 8005b44:	40020410 	.word	0x40020410
 8005b48:	40020428 	.word	0x40020428
 8005b4c:	40020440 	.word	0x40020440
 8005b50:	40020458 	.word	0x40020458
 8005b54:	40020470 	.word	0x40020470
 8005b58:	40020488 	.word	0x40020488
 8005b5c:	400204a0 	.word	0x400204a0
 8005b60:	400204b8 	.word	0x400204b8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf14      	ite	ne
 8005b72:	2301      	movne	r3, #1
 8005b74:	2300      	moveq	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d015      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0204 	bic.w	r2, r2, #4
 8005b8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	2208      	movs	r2, #8
 8005b96:	409a      	lsls	r2, r3
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba0:	f043 0201 	orr.w	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bac:	f003 031f 	and.w	r3, r3, #31
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d06e      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a69      	ldr	r2, [pc, #420]	@ (8005d68 <HAL_DMA_IRQHandler+0x3f8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d04a      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a67      	ldr	r2, [pc, #412]	@ (8005d6c <HAL_DMA_IRQHandler+0x3fc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d045      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a66      	ldr	r2, [pc, #408]	@ (8005d70 <HAL_DMA_IRQHandler+0x400>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d040      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a64      	ldr	r2, [pc, #400]	@ (8005d74 <HAL_DMA_IRQHandler+0x404>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d03b      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a63      	ldr	r2, [pc, #396]	@ (8005d78 <HAL_DMA_IRQHandler+0x408>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d036      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a61      	ldr	r2, [pc, #388]	@ (8005d7c <HAL_DMA_IRQHandler+0x40c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d031      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a60      	ldr	r2, [pc, #384]	@ (8005d80 <HAL_DMA_IRQHandler+0x410>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d02c      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a5e      	ldr	r2, [pc, #376]	@ (8005d84 <HAL_DMA_IRQHandler+0x414>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d027      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a5d      	ldr	r2, [pc, #372]	@ (8005d88 <HAL_DMA_IRQHandler+0x418>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d022      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a5b      	ldr	r2, [pc, #364]	@ (8005d8c <HAL_DMA_IRQHandler+0x41c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01d      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a5a      	ldr	r2, [pc, #360]	@ (8005d90 <HAL_DMA_IRQHandler+0x420>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d018      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a58      	ldr	r2, [pc, #352]	@ (8005d94 <HAL_DMA_IRQHandler+0x424>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a57      	ldr	r2, [pc, #348]	@ (8005d98 <HAL_DMA_IRQHandler+0x428>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00e      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a55      	ldr	r2, [pc, #340]	@ (8005d9c <HAL_DMA_IRQHandler+0x42c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a54      	ldr	r2, [pc, #336]	@ (8005da0 <HAL_DMA_IRQHandler+0x430>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2ee>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a52      	ldr	r2, [pc, #328]	@ (8005da4 <HAL_DMA_IRQHandler+0x434>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d10a      	bne.n	8005c74 <HAL_DMA_IRQHandler+0x304>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bf14      	ite	ne
 8005c6c:	2301      	movne	r3, #1
 8005c6e:	2300      	moveq	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	e003      	b.n	8005c7c <HAL_DMA_IRQHandler+0x30c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00d      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	2201      	movs	r2, #1
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c94:	f043 0202 	orr.w	r2, r3, #2
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	409a      	lsls	r2, r3
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 808f 	beq.w	8005dd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d68 <HAL_DMA_IRQHandler+0x3f8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d04a      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d6c <HAL_DMA_IRQHandler+0x3fc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d045      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a29      	ldr	r2, [pc, #164]	@ (8005d70 <HAL_DMA_IRQHandler+0x400>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d040      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a27      	ldr	r2, [pc, #156]	@ (8005d74 <HAL_DMA_IRQHandler+0x404>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d03b      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a26      	ldr	r2, [pc, #152]	@ (8005d78 <HAL_DMA_IRQHandler+0x408>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d036      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a24      	ldr	r2, [pc, #144]	@ (8005d7c <HAL_DMA_IRQHandler+0x40c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d031      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a23      	ldr	r2, [pc, #140]	@ (8005d80 <HAL_DMA_IRQHandler+0x410>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d02c      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a21      	ldr	r2, [pc, #132]	@ (8005d84 <HAL_DMA_IRQHandler+0x414>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d027      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a20      	ldr	r2, [pc, #128]	@ (8005d88 <HAL_DMA_IRQHandler+0x418>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d022      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1e      	ldr	r2, [pc, #120]	@ (8005d8c <HAL_DMA_IRQHandler+0x41c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d01d      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <HAL_DMA_IRQHandler+0x420>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d018      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1b      	ldr	r2, [pc, #108]	@ (8005d94 <HAL_DMA_IRQHandler+0x424>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d98 <HAL_DMA_IRQHandler+0x428>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00e      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <HAL_DMA_IRQHandler+0x42c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d009      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a17      	ldr	r2, [pc, #92]	@ (8005da0 <HAL_DMA_IRQHandler+0x430>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d004      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x3e2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <HAL_DMA_IRQHandler+0x434>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d12a      	bne.n	8005da8 <HAL_DMA_IRQHandler+0x438>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf14      	ite	ne
 8005d60:	2301      	movne	r3, #1
 8005d62:	2300      	moveq	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	e023      	b.n	8005db0 <HAL_DMA_IRQHandler+0x440>
 8005d68:	40020010 	.word	0x40020010
 8005d6c:	40020028 	.word	0x40020028
 8005d70:	40020040 	.word	0x40020040
 8005d74:	40020058 	.word	0x40020058
 8005d78:	40020070 	.word	0x40020070
 8005d7c:	40020088 	.word	0x40020088
 8005d80:	400200a0 	.word	0x400200a0
 8005d84:	400200b8 	.word	0x400200b8
 8005d88:	40020410 	.word	0x40020410
 8005d8c:	40020428 	.word	0x40020428
 8005d90:	40020440 	.word	0x40020440
 8005d94:	40020458 	.word	0x40020458
 8005d98:	40020470 	.word	0x40020470
 8005d9c:	40020488 	.word	0x40020488
 8005da0:	400204a0 	.word	0x400204a0
 8005da4:	400204b8 	.word	0x400204b8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2300      	movs	r3, #0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00d      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc8:	f043 0204 	orr.w	r2, r3, #4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	2210      	movs	r2, #16
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80a6 	beq.w	8005f32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a85      	ldr	r2, [pc, #532]	@ (8006000 <HAL_DMA_IRQHandler+0x690>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d04a      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a83      	ldr	r2, [pc, #524]	@ (8006004 <HAL_DMA_IRQHandler+0x694>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d045      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a82      	ldr	r2, [pc, #520]	@ (8006008 <HAL_DMA_IRQHandler+0x698>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d040      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a80      	ldr	r2, [pc, #512]	@ (800600c <HAL_DMA_IRQHandler+0x69c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d03b      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7f      	ldr	r2, [pc, #508]	@ (8006010 <HAL_DMA_IRQHandler+0x6a0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d036      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a7d      	ldr	r2, [pc, #500]	@ (8006014 <HAL_DMA_IRQHandler+0x6a4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d031      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a7c      	ldr	r2, [pc, #496]	@ (8006018 <HAL_DMA_IRQHandler+0x6a8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d02c      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a7a      	ldr	r2, [pc, #488]	@ (800601c <HAL_DMA_IRQHandler+0x6ac>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d027      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a79      	ldr	r2, [pc, #484]	@ (8006020 <HAL_DMA_IRQHandler+0x6b0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d022      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a77      	ldr	r2, [pc, #476]	@ (8006024 <HAL_DMA_IRQHandler+0x6b4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01d      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a76      	ldr	r2, [pc, #472]	@ (8006028 <HAL_DMA_IRQHandler+0x6b8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a74      	ldr	r2, [pc, #464]	@ (800602c <HAL_DMA_IRQHandler+0x6bc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a73      	ldr	r2, [pc, #460]	@ (8006030 <HAL_DMA_IRQHandler+0x6c0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a71      	ldr	r2, [pc, #452]	@ (8006034 <HAL_DMA_IRQHandler+0x6c4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a70      	ldr	r2, [pc, #448]	@ (8006038 <HAL_DMA_IRQHandler+0x6c8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x516>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a6e      	ldr	r2, [pc, #440]	@ (800603c <HAL_DMA_IRQHandler+0x6cc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10a      	bne.n	8005e9c <HAL_DMA_IRQHandler+0x52c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	bf14      	ite	ne
 8005e94:	2301      	movne	r3, #1
 8005e96:	2300      	moveq	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e009      	b.n	8005eb0 <HAL_DMA_IRQHandler+0x540>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bf14      	ite	ne
 8005eaa:	2301      	movne	r3, #1
 8005eac:	2300      	moveq	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d03e      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	2210      	movs	r2, #16
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d018      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d108      	bne.n	8005ef2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d024      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
 8005ef0:	e01f      	b.n	8005f32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01b      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
 8005f02:	e016      	b.n	8005f32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d107      	bne.n	8005f22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0208 	bic.w	r2, r2, #8
 8005f20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	4013      	ands	r3, r2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 8110 	beq.w	8006168 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8006000 <HAL_DMA_IRQHandler+0x690>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d04a      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a2b      	ldr	r2, [pc, #172]	@ (8006004 <HAL_DMA_IRQHandler+0x694>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d045      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a29      	ldr	r2, [pc, #164]	@ (8006008 <HAL_DMA_IRQHandler+0x698>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d040      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a28      	ldr	r2, [pc, #160]	@ (800600c <HAL_DMA_IRQHandler+0x69c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d03b      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a26      	ldr	r2, [pc, #152]	@ (8006010 <HAL_DMA_IRQHandler+0x6a0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d036      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a25      	ldr	r2, [pc, #148]	@ (8006014 <HAL_DMA_IRQHandler+0x6a4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d031      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a23      	ldr	r2, [pc, #140]	@ (8006018 <HAL_DMA_IRQHandler+0x6a8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d02c      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a22      	ldr	r2, [pc, #136]	@ (800601c <HAL_DMA_IRQHandler+0x6ac>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d027      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a20      	ldr	r2, [pc, #128]	@ (8006020 <HAL_DMA_IRQHandler+0x6b0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d022      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8006024 <HAL_DMA_IRQHandler+0x6b4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d01d      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006028 <HAL_DMA_IRQHandler+0x6b8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d018      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1c      	ldr	r2, [pc, #112]	@ (800602c <HAL_DMA_IRQHandler+0x6bc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006030 <HAL_DMA_IRQHandler+0x6c0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a19      	ldr	r2, [pc, #100]	@ (8006034 <HAL_DMA_IRQHandler+0x6c4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a17      	ldr	r2, [pc, #92]	@ (8006038 <HAL_DMA_IRQHandler+0x6c8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x678>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a16      	ldr	r2, [pc, #88]	@ (800603c <HAL_DMA_IRQHandler+0x6cc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d12b      	bne.n	8006040 <HAL_DMA_IRQHandler+0x6d0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf14      	ite	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	2300      	moveq	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	e02a      	b.n	8006054 <HAL_DMA_IRQHandler+0x6e4>
 8005ffe:	bf00      	nop
 8006000:	40020010 	.word	0x40020010
 8006004:	40020028 	.word	0x40020028
 8006008:	40020040 	.word	0x40020040
 800600c:	40020058 	.word	0x40020058
 8006010:	40020070 	.word	0x40020070
 8006014:	40020088 	.word	0x40020088
 8006018:	400200a0 	.word	0x400200a0
 800601c:	400200b8 	.word	0x400200b8
 8006020:	40020410 	.word	0x40020410
 8006024:	40020428 	.word	0x40020428
 8006028:	40020440 	.word	0x40020440
 800602c:	40020458 	.word	0x40020458
 8006030:	40020470 	.word	0x40020470
 8006034:	40020488 	.word	0x40020488
 8006038:	400204a0 	.word	0x400204a0
 800603c:	400204b8 	.word	0x400204b8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	bf14      	ite	ne
 800604e:	2301      	movne	r3, #1
 8006050:	2300      	moveq	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8087 	beq.w	8006168 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605e:	f003 031f 	and.w	r3, r3, #31
 8006062:	2220      	movs	r2, #32
 8006064:	409a      	lsls	r2, r3
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b04      	cmp	r3, #4
 8006074:	d139      	bne.n	80060ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0216 	bic.w	r2, r2, #22
 8006084:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695a      	ldr	r2, [r3, #20]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006094:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <HAL_DMA_IRQHandler+0x736>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0208 	bic.w	r2, r2, #8
 80060b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	223f      	movs	r2, #63	@ 0x3f
 80060c0:	409a      	lsls	r2, r3
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 834a 	beq.w	8006774 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
          }
          return;
 80060e8:	e344      	b.n	8006774 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d018      	beq.n	800612a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d108      	bne.n	8006118 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02c      	beq.n	8006168 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
 8006116:	e027      	b.n	8006168 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d023      	beq.n	8006168 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
 8006128:	e01e      	b.n	8006168 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10f      	bne.n	8006158 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0210 	bic.w	r2, r2, #16
 8006146:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8306 	beq.w	800677e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8088 	beq.w	8006290 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2204      	movs	r2, #4
 8006184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a7a      	ldr	r2, [pc, #488]	@ (8006378 <HAL_DMA_IRQHandler+0xa08>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04a      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a79      	ldr	r2, [pc, #484]	@ (800637c <HAL_DMA_IRQHandler+0xa0c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d045      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a77      	ldr	r2, [pc, #476]	@ (8006380 <HAL_DMA_IRQHandler+0xa10>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d040      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a76      	ldr	r2, [pc, #472]	@ (8006384 <HAL_DMA_IRQHandler+0xa14>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d03b      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a74      	ldr	r2, [pc, #464]	@ (8006388 <HAL_DMA_IRQHandler+0xa18>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d036      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a73      	ldr	r2, [pc, #460]	@ (800638c <HAL_DMA_IRQHandler+0xa1c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d031      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a71      	ldr	r2, [pc, #452]	@ (8006390 <HAL_DMA_IRQHandler+0xa20>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d02c      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a70      	ldr	r2, [pc, #448]	@ (8006394 <HAL_DMA_IRQHandler+0xa24>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d027      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006398 <HAL_DMA_IRQHandler+0xa28>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6d      	ldr	r2, [pc, #436]	@ (800639c <HAL_DMA_IRQHandler+0xa2c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01d      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a6b      	ldr	r2, [pc, #428]	@ (80063a0 <HAL_DMA_IRQHandler+0xa30>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a6a      	ldr	r2, [pc, #424]	@ (80063a4 <HAL_DMA_IRQHandler+0xa34>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a68      	ldr	r2, [pc, #416]	@ (80063a8 <HAL_DMA_IRQHandler+0xa38>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a67      	ldr	r2, [pc, #412]	@ (80063ac <HAL_DMA_IRQHandler+0xa3c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a65      	ldr	r2, [pc, #404]	@ (80063b0 <HAL_DMA_IRQHandler+0xa40>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_DMA_IRQHandler+0x8b8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a64      	ldr	r2, [pc, #400]	@ (80063b4 <HAL_DMA_IRQHandler+0xa44>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <HAL_DMA_IRQHandler+0x8ca>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0201 	bic.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e007      	b.n	800624a <HAL_DMA_IRQHandler+0x8da>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006252:	429a      	cmp	r2, r3
 8006254:	d307      	bcc.n	8006266 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1f2      	bne.n	800624a <HAL_DMA_IRQHandler+0x8da>
 8006264:	e000      	b.n	8006268 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006266:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2203      	movs	r2, #3
 800627a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800627e:	e003      	b.n	8006288 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 8272 	beq.w	800677e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
 80062a2:	e26c      	b.n	800677e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a43      	ldr	r2, [pc, #268]	@ (80063b8 <HAL_DMA_IRQHandler+0xa48>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d022      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x984>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a42      	ldr	r2, [pc, #264]	@ (80063bc <HAL_DMA_IRQHandler+0xa4c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d01d      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x984>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a40      	ldr	r2, [pc, #256]	@ (80063c0 <HAL_DMA_IRQHandler+0xa50>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d018      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x984>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a3f      	ldr	r2, [pc, #252]	@ (80063c4 <HAL_DMA_IRQHandler+0xa54>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d013      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x984>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3d      	ldr	r2, [pc, #244]	@ (80063c8 <HAL_DMA_IRQHandler+0xa58>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00e      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x984>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a3c      	ldr	r2, [pc, #240]	@ (80063cc <HAL_DMA_IRQHandler+0xa5c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d009      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x984>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a3a      	ldr	r2, [pc, #232]	@ (80063d0 <HAL_DMA_IRQHandler+0xa60>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d004      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x984>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a39      	ldr	r2, [pc, #228]	@ (80063d4 <HAL_DMA_IRQHandler+0xa64>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d101      	bne.n	80062f8 <HAL_DMA_IRQHandler+0x988>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <HAL_DMA_IRQHandler+0x98a>
 80062f8:	2300      	movs	r3, #0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 823f 	beq.w	800677e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	2204      	movs	r2, #4
 8006312:	409a      	lsls	r2, r3
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80cd 	beq.w	80064b8 <HAL_DMA_IRQHandler+0xb48>
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80c7 	beq.w	80064b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632e:	f003 031f 	and.w	r3, r3, #31
 8006332:	2204      	movs	r2, #4
 8006334:	409a      	lsls	r2, r3
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d049      	beq.n	80063d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8210 	beq.w	8006778 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006360:	e20a      	b.n	8006778 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 8206 	beq.w	8006778 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006374:	e200      	b.n	8006778 <HAL_DMA_IRQHandler+0xe08>
 8006376:	bf00      	nop
 8006378:	40020010 	.word	0x40020010
 800637c:	40020028 	.word	0x40020028
 8006380:	40020040 	.word	0x40020040
 8006384:	40020058 	.word	0x40020058
 8006388:	40020070 	.word	0x40020070
 800638c:	40020088 	.word	0x40020088
 8006390:	400200a0 	.word	0x400200a0
 8006394:	400200b8 	.word	0x400200b8
 8006398:	40020410 	.word	0x40020410
 800639c:	40020428 	.word	0x40020428
 80063a0:	40020440 	.word	0x40020440
 80063a4:	40020458 	.word	0x40020458
 80063a8:	40020470 	.word	0x40020470
 80063ac:	40020488 	.word	0x40020488
 80063b0:	400204a0 	.word	0x400204a0
 80063b4:	400204b8 	.word	0x400204b8
 80063b8:	58025408 	.word	0x58025408
 80063bc:	5802541c 	.word	0x5802541c
 80063c0:	58025430 	.word	0x58025430
 80063c4:	58025444 	.word	0x58025444
 80063c8:	58025458 	.word	0x58025458
 80063cc:	5802546c 	.word	0x5802546c
 80063d0:	58025480 	.word	0x58025480
 80063d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d160      	bne.n	80064a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a7f      	ldr	r2, [pc, #508]	@ (80065e4 <HAL_DMA_IRQHandler+0xc74>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d04a      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a7d      	ldr	r2, [pc, #500]	@ (80065e8 <HAL_DMA_IRQHandler+0xc78>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d045      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a7c      	ldr	r2, [pc, #496]	@ (80065ec <HAL_DMA_IRQHandler+0xc7c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d040      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a7a      	ldr	r2, [pc, #488]	@ (80065f0 <HAL_DMA_IRQHandler+0xc80>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d03b      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a79      	ldr	r2, [pc, #484]	@ (80065f4 <HAL_DMA_IRQHandler+0xc84>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d036      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a77      	ldr	r2, [pc, #476]	@ (80065f8 <HAL_DMA_IRQHandler+0xc88>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d031      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a76      	ldr	r2, [pc, #472]	@ (80065fc <HAL_DMA_IRQHandler+0xc8c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d02c      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a74      	ldr	r2, [pc, #464]	@ (8006600 <HAL_DMA_IRQHandler+0xc90>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d027      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a73      	ldr	r2, [pc, #460]	@ (8006604 <HAL_DMA_IRQHandler+0xc94>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a71      	ldr	r2, [pc, #452]	@ (8006608 <HAL_DMA_IRQHandler+0xc98>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01d      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a70      	ldr	r2, [pc, #448]	@ (800660c <HAL_DMA_IRQHandler+0xc9c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a6e      	ldr	r2, [pc, #440]	@ (8006610 <HAL_DMA_IRQHandler+0xca0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a6d      	ldr	r2, [pc, #436]	@ (8006614 <HAL_DMA_IRQHandler+0xca4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a6b      	ldr	r2, [pc, #428]	@ (8006618 <HAL_DMA_IRQHandler+0xca8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a6a      	ldr	r2, [pc, #424]	@ (800661c <HAL_DMA_IRQHandler+0xcac>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_DMA_IRQHandler+0xb12>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a68      	ldr	r2, [pc, #416]	@ (8006620 <HAL_DMA_IRQHandler+0xcb0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d108      	bne.n	8006494 <HAL_DMA_IRQHandler+0xb24>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0208 	bic.w	r2, r2, #8
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	e007      	b.n	80064a4 <HAL_DMA_IRQHandler+0xb34>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0204 	bic.w	r2, r2, #4
 80064a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8165 	beq.w	8006778 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064b6:	e15f      	b.n	8006778 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	2202      	movs	r2, #2
 80064c2:	409a      	lsls	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 80c5 	beq.w	8006658 <HAL_DMA_IRQHandler+0xce8>
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 80bf 	beq.w	8006658 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2202      	movs	r2, #2
 80064e4:	409a      	lsls	r2, r3
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d018      	beq.n	8006526 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 813a 	beq.w	800677c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006510:	e134      	b.n	800677c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8130 	beq.w	800677c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006524:	e12a      	b.n	800677c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 8089 	bne.w	8006644 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2b      	ldr	r2, [pc, #172]	@ (80065e4 <HAL_DMA_IRQHandler+0xc74>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d04a      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a29      	ldr	r2, [pc, #164]	@ (80065e8 <HAL_DMA_IRQHandler+0xc78>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d045      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a28      	ldr	r2, [pc, #160]	@ (80065ec <HAL_DMA_IRQHandler+0xc7c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d040      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a26      	ldr	r2, [pc, #152]	@ (80065f0 <HAL_DMA_IRQHandler+0xc80>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d03b      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a25      	ldr	r2, [pc, #148]	@ (80065f4 <HAL_DMA_IRQHandler+0xc84>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d036      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a23      	ldr	r2, [pc, #140]	@ (80065f8 <HAL_DMA_IRQHandler+0xc88>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d031      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a22      	ldr	r2, [pc, #136]	@ (80065fc <HAL_DMA_IRQHandler+0xc8c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d02c      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a20      	ldr	r2, [pc, #128]	@ (8006600 <HAL_DMA_IRQHandler+0xc90>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d027      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1f      	ldr	r2, [pc, #124]	@ (8006604 <HAL_DMA_IRQHandler+0xc94>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d022      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <HAL_DMA_IRQHandler+0xc98>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01d      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1c      	ldr	r2, [pc, #112]	@ (800660c <HAL_DMA_IRQHandler+0xc9c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d018      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006610 <HAL_DMA_IRQHandler+0xca0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a19      	ldr	r2, [pc, #100]	@ (8006614 <HAL_DMA_IRQHandler+0xca4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00e      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a17      	ldr	r2, [pc, #92]	@ (8006618 <HAL_DMA_IRQHandler+0xca8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a16      	ldr	r2, [pc, #88]	@ (800661c <HAL_DMA_IRQHandler+0xcac>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xc62>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a14      	ldr	r2, [pc, #80]	@ (8006620 <HAL_DMA_IRQHandler+0xcb0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d128      	bne.n	8006624 <HAL_DMA_IRQHandler+0xcb4>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0214 	bic.w	r2, r2, #20
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	e027      	b.n	8006634 <HAL_DMA_IRQHandler+0xcc4>
 80065e4:	40020010 	.word	0x40020010
 80065e8:	40020028 	.word	0x40020028
 80065ec:	40020040 	.word	0x40020040
 80065f0:	40020058 	.word	0x40020058
 80065f4:	40020070 	.word	0x40020070
 80065f8:	40020088 	.word	0x40020088
 80065fc:	400200a0 	.word	0x400200a0
 8006600:	400200b8 	.word	0x400200b8
 8006604:	40020410 	.word	0x40020410
 8006608:	40020428 	.word	0x40020428
 800660c:	40020440 	.word	0x40020440
 8006610:	40020458 	.word	0x40020458
 8006614:	40020470 	.word	0x40020470
 8006618:	40020488 	.word	0x40020488
 800661c:	400204a0 	.word	0x400204a0
 8006620:	400204b8 	.word	0x400204b8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 020a 	bic.w	r2, r2, #10
 8006632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8097 	beq.w	800677c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006656:	e091      	b.n	800677c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2208      	movs	r2, #8
 8006662:	409a      	lsls	r2, r3
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	4013      	ands	r3, r2
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 8088 	beq.w	800677e <HAL_DMA_IRQHandler+0xe0e>
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8082 	beq.w	800677e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a41      	ldr	r2, [pc, #260]	@ (8006784 <HAL_DMA_IRQHandler+0xe14>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d04a      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a3f      	ldr	r2, [pc, #252]	@ (8006788 <HAL_DMA_IRQHandler+0xe18>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d045      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a3e      	ldr	r2, [pc, #248]	@ (800678c <HAL_DMA_IRQHandler+0xe1c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d040      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a3c      	ldr	r2, [pc, #240]	@ (8006790 <HAL_DMA_IRQHandler+0xe20>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d03b      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a3b      	ldr	r2, [pc, #236]	@ (8006794 <HAL_DMA_IRQHandler+0xe24>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d036      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a39      	ldr	r2, [pc, #228]	@ (8006798 <HAL_DMA_IRQHandler+0xe28>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d031      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a38      	ldr	r2, [pc, #224]	@ (800679c <HAL_DMA_IRQHandler+0xe2c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d02c      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a36      	ldr	r2, [pc, #216]	@ (80067a0 <HAL_DMA_IRQHandler+0xe30>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d027      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a35      	ldr	r2, [pc, #212]	@ (80067a4 <HAL_DMA_IRQHandler+0xe34>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d022      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a33      	ldr	r2, [pc, #204]	@ (80067a8 <HAL_DMA_IRQHandler+0xe38>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01d      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a32      	ldr	r2, [pc, #200]	@ (80067ac <HAL_DMA_IRQHandler+0xe3c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d018      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a30      	ldr	r2, [pc, #192]	@ (80067b0 <HAL_DMA_IRQHandler+0xe40>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d013      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2f      	ldr	r2, [pc, #188]	@ (80067b4 <HAL_DMA_IRQHandler+0xe44>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d00e      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2d      	ldr	r2, [pc, #180]	@ (80067b8 <HAL_DMA_IRQHandler+0xe48>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d009      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a2c      	ldr	r2, [pc, #176]	@ (80067bc <HAL_DMA_IRQHandler+0xe4c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d004      	beq.n	800671a <HAL_DMA_IRQHandler+0xdaa>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2a      	ldr	r2, [pc, #168]	@ (80067c0 <HAL_DMA_IRQHandler+0xe50>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d108      	bne.n	800672c <HAL_DMA_IRQHandler+0xdbc>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 021c 	bic.w	r2, r2, #28
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e007      	b.n	800673c <HAL_DMA_IRQHandler+0xdcc>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 020e 	bic.w	r2, r2, #14
 800673a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	2201      	movs	r2, #1
 8006746:	409a      	lsls	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d009      	beq.n	800677e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
 8006772:	e004      	b.n	800677e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006774:	bf00      	nop
 8006776:	e002      	b.n	800677e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006778:	bf00      	nop
 800677a:	e000      	b.n	800677e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800677c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800677e:	3728      	adds	r7, #40	@ 0x28
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40020010 	.word	0x40020010
 8006788:	40020028 	.word	0x40020028
 800678c:	40020040 	.word	0x40020040
 8006790:	40020058 	.word	0x40020058
 8006794:	40020070 	.word	0x40020070
 8006798:	40020088 	.word	0x40020088
 800679c:	400200a0 	.word	0x400200a0
 80067a0:	400200b8 	.word	0x400200b8
 80067a4:	40020410 	.word	0x40020410
 80067a8:	40020428 	.word	0x40020428
 80067ac:	40020440 	.word	0x40020440
 80067b0:	40020458 	.word	0x40020458
 80067b4:	40020470 	.word	0x40020470
 80067b8:	40020488 	.word	0x40020488
 80067bc:	400204a0 	.word	0x400204a0
 80067c0:	400204b8 	.word	0x400204b8

080067c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a7f      	ldr	r2, [pc, #508]	@ (80069e0 <DMA_SetConfig+0x21c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d072      	beq.n	80068ce <DMA_SetConfig+0x10a>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a7d      	ldr	r2, [pc, #500]	@ (80069e4 <DMA_SetConfig+0x220>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d06d      	beq.n	80068ce <DMA_SetConfig+0x10a>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a7c      	ldr	r2, [pc, #496]	@ (80069e8 <DMA_SetConfig+0x224>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d068      	beq.n	80068ce <DMA_SetConfig+0x10a>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a7a      	ldr	r2, [pc, #488]	@ (80069ec <DMA_SetConfig+0x228>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d063      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a79      	ldr	r2, [pc, #484]	@ (80069f0 <DMA_SetConfig+0x22c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d05e      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a77      	ldr	r2, [pc, #476]	@ (80069f4 <DMA_SetConfig+0x230>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d059      	beq.n	80068ce <DMA_SetConfig+0x10a>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a76      	ldr	r2, [pc, #472]	@ (80069f8 <DMA_SetConfig+0x234>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d054      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a74      	ldr	r2, [pc, #464]	@ (80069fc <DMA_SetConfig+0x238>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d04f      	beq.n	80068ce <DMA_SetConfig+0x10a>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a73      	ldr	r2, [pc, #460]	@ (8006a00 <DMA_SetConfig+0x23c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d04a      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a71      	ldr	r2, [pc, #452]	@ (8006a04 <DMA_SetConfig+0x240>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d045      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a70      	ldr	r2, [pc, #448]	@ (8006a08 <DMA_SetConfig+0x244>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d040      	beq.n	80068ce <DMA_SetConfig+0x10a>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a6e      	ldr	r2, [pc, #440]	@ (8006a0c <DMA_SetConfig+0x248>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d03b      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6d      	ldr	r2, [pc, #436]	@ (8006a10 <DMA_SetConfig+0x24c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d036      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6b      	ldr	r2, [pc, #428]	@ (8006a14 <DMA_SetConfig+0x250>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d031      	beq.n	80068ce <DMA_SetConfig+0x10a>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6a      	ldr	r2, [pc, #424]	@ (8006a18 <DMA_SetConfig+0x254>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d02c      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a68      	ldr	r2, [pc, #416]	@ (8006a1c <DMA_SetConfig+0x258>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d027      	beq.n	80068ce <DMA_SetConfig+0x10a>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a67      	ldr	r2, [pc, #412]	@ (8006a20 <DMA_SetConfig+0x25c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d022      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a65      	ldr	r2, [pc, #404]	@ (8006a24 <DMA_SetConfig+0x260>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01d      	beq.n	80068ce <DMA_SetConfig+0x10a>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a64      	ldr	r2, [pc, #400]	@ (8006a28 <DMA_SetConfig+0x264>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d018      	beq.n	80068ce <DMA_SetConfig+0x10a>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a62      	ldr	r2, [pc, #392]	@ (8006a2c <DMA_SetConfig+0x268>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d013      	beq.n	80068ce <DMA_SetConfig+0x10a>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a61      	ldr	r2, [pc, #388]	@ (8006a30 <DMA_SetConfig+0x26c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00e      	beq.n	80068ce <DMA_SetConfig+0x10a>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006a34 <DMA_SetConfig+0x270>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d009      	beq.n	80068ce <DMA_SetConfig+0x10a>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a5e      	ldr	r2, [pc, #376]	@ (8006a38 <DMA_SetConfig+0x274>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d004      	beq.n	80068ce <DMA_SetConfig+0x10a>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a5c      	ldr	r2, [pc, #368]	@ (8006a3c <DMA_SetConfig+0x278>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d101      	bne.n	80068d2 <DMA_SetConfig+0x10e>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e000      	b.n	80068d4 <DMA_SetConfig+0x110>
 80068d2:	2300      	movs	r3, #0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00d      	beq.n	80068f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80068e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80068f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a39      	ldr	r2, [pc, #228]	@ (80069e0 <DMA_SetConfig+0x21c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d04a      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a38      	ldr	r2, [pc, #224]	@ (80069e4 <DMA_SetConfig+0x220>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d045      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a36      	ldr	r2, [pc, #216]	@ (80069e8 <DMA_SetConfig+0x224>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d040      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a35      	ldr	r2, [pc, #212]	@ (80069ec <DMA_SetConfig+0x228>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d03b      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a33      	ldr	r2, [pc, #204]	@ (80069f0 <DMA_SetConfig+0x22c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d036      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a32      	ldr	r2, [pc, #200]	@ (80069f4 <DMA_SetConfig+0x230>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d031      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a30      	ldr	r2, [pc, #192]	@ (80069f8 <DMA_SetConfig+0x234>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d02c      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2f      	ldr	r2, [pc, #188]	@ (80069fc <DMA_SetConfig+0x238>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d027      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a2d      	ldr	r2, [pc, #180]	@ (8006a00 <DMA_SetConfig+0x23c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d022      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a2c      	ldr	r2, [pc, #176]	@ (8006a04 <DMA_SetConfig+0x240>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d01d      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a2a      	ldr	r2, [pc, #168]	@ (8006a08 <DMA_SetConfig+0x244>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d018      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a29      	ldr	r2, [pc, #164]	@ (8006a0c <DMA_SetConfig+0x248>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a27      	ldr	r2, [pc, #156]	@ (8006a10 <DMA_SetConfig+0x24c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00e      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a26      	ldr	r2, [pc, #152]	@ (8006a14 <DMA_SetConfig+0x250>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d009      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a24      	ldr	r2, [pc, #144]	@ (8006a18 <DMA_SetConfig+0x254>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <DMA_SetConfig+0x1d0>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a23      	ldr	r2, [pc, #140]	@ (8006a1c <DMA_SetConfig+0x258>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d101      	bne.n	8006998 <DMA_SetConfig+0x1d4>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <DMA_SetConfig+0x1d6>
 8006998:	2300      	movs	r3, #0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d059      	beq.n	8006a52 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	223f      	movs	r2, #63	@ 0x3f
 80069a8:	409a      	lsls	r2, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80069bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b40      	cmp	r3, #64	@ 0x40
 80069cc:	d138      	bne.n	8006a40 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80069de:	e086      	b.n	8006aee <DMA_SetConfig+0x32a>
 80069e0:	40020010 	.word	0x40020010
 80069e4:	40020028 	.word	0x40020028
 80069e8:	40020040 	.word	0x40020040
 80069ec:	40020058 	.word	0x40020058
 80069f0:	40020070 	.word	0x40020070
 80069f4:	40020088 	.word	0x40020088
 80069f8:	400200a0 	.word	0x400200a0
 80069fc:	400200b8 	.word	0x400200b8
 8006a00:	40020410 	.word	0x40020410
 8006a04:	40020428 	.word	0x40020428
 8006a08:	40020440 	.word	0x40020440
 8006a0c:	40020458 	.word	0x40020458
 8006a10:	40020470 	.word	0x40020470
 8006a14:	40020488 	.word	0x40020488
 8006a18:	400204a0 	.word	0x400204a0
 8006a1c:	400204b8 	.word	0x400204b8
 8006a20:	58025408 	.word	0x58025408
 8006a24:	5802541c 	.word	0x5802541c
 8006a28:	58025430 	.word	0x58025430
 8006a2c:	58025444 	.word	0x58025444
 8006a30:	58025458 	.word	0x58025458
 8006a34:	5802546c 	.word	0x5802546c
 8006a38:	58025480 	.word	0x58025480
 8006a3c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	60da      	str	r2, [r3, #12]
}
 8006a50:	e04d      	b.n	8006aee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a29      	ldr	r2, [pc, #164]	@ (8006afc <DMA_SetConfig+0x338>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d022      	beq.n	8006aa2 <DMA_SetConfig+0x2de>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a27      	ldr	r2, [pc, #156]	@ (8006b00 <DMA_SetConfig+0x33c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d01d      	beq.n	8006aa2 <DMA_SetConfig+0x2de>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a26      	ldr	r2, [pc, #152]	@ (8006b04 <DMA_SetConfig+0x340>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d018      	beq.n	8006aa2 <DMA_SetConfig+0x2de>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a24      	ldr	r2, [pc, #144]	@ (8006b08 <DMA_SetConfig+0x344>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <DMA_SetConfig+0x2de>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a23      	ldr	r2, [pc, #140]	@ (8006b0c <DMA_SetConfig+0x348>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00e      	beq.n	8006aa2 <DMA_SetConfig+0x2de>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a21      	ldr	r2, [pc, #132]	@ (8006b10 <DMA_SetConfig+0x34c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <DMA_SetConfig+0x2de>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a20      	ldr	r2, [pc, #128]	@ (8006b14 <DMA_SetConfig+0x350>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <DMA_SetConfig+0x2de>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8006b18 <DMA_SetConfig+0x354>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d101      	bne.n	8006aa6 <DMA_SetConfig+0x2e2>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <DMA_SetConfig+0x2e4>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d020      	beq.n	8006aee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab0:	f003 031f 	and.w	r3, r3, #31
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	409a      	lsls	r2, r3
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b40      	cmp	r3, #64	@ 0x40
 8006aca:	d108      	bne.n	8006ade <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	60da      	str	r2, [r3, #12]
}
 8006adc:	e007      	b.n	8006aee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	60da      	str	r2, [r3, #12]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	58025408 	.word	0x58025408
 8006b00:	5802541c 	.word	0x5802541c
 8006b04:	58025430 	.word	0x58025430
 8006b08:	58025444 	.word	0x58025444
 8006b0c:	58025458 	.word	0x58025458
 8006b10:	5802546c 	.word	0x5802546c
 8006b14:	58025480 	.word	0x58025480
 8006b18:	58025494 	.word	0x58025494

08006b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a42      	ldr	r2, [pc, #264]	@ (8006c34 <DMA_CalcBaseAndBitshift+0x118>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d04a      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a41      	ldr	r2, [pc, #260]	@ (8006c38 <DMA_CalcBaseAndBitshift+0x11c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d045      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c3c <DMA_CalcBaseAndBitshift+0x120>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d040      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a3e      	ldr	r2, [pc, #248]	@ (8006c40 <DMA_CalcBaseAndBitshift+0x124>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d03b      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a3c      	ldr	r2, [pc, #240]	@ (8006c44 <DMA_CalcBaseAndBitshift+0x128>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d036      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8006c48 <DMA_CalcBaseAndBitshift+0x12c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d031      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a39      	ldr	r2, [pc, #228]	@ (8006c4c <DMA_CalcBaseAndBitshift+0x130>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d02c      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a38      	ldr	r2, [pc, #224]	@ (8006c50 <DMA_CalcBaseAndBitshift+0x134>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d027      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a36      	ldr	r2, [pc, #216]	@ (8006c54 <DMA_CalcBaseAndBitshift+0x138>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d022      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a35      	ldr	r2, [pc, #212]	@ (8006c58 <DMA_CalcBaseAndBitshift+0x13c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d01d      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a33      	ldr	r2, [pc, #204]	@ (8006c5c <DMA_CalcBaseAndBitshift+0x140>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d018      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a32      	ldr	r2, [pc, #200]	@ (8006c60 <DMA_CalcBaseAndBitshift+0x144>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d013      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a30      	ldr	r2, [pc, #192]	@ (8006c64 <DMA_CalcBaseAndBitshift+0x148>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00e      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a2f      	ldr	r2, [pc, #188]	@ (8006c68 <DMA_CalcBaseAndBitshift+0x14c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d009      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8006c6c <DMA_CalcBaseAndBitshift+0x150>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8006c70 <DMA_CalcBaseAndBitshift+0x154>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d101      	bne.n	8006bc8 <DMA_CalcBaseAndBitshift+0xac>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <DMA_CalcBaseAndBitshift+0xae>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d024      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	3b10      	subs	r3, #16
 8006bd6:	4a27      	ldr	r2, [pc, #156]	@ (8006c74 <DMA_CalcBaseAndBitshift+0x158>)
 8006bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	4a24      	ldr	r2, [pc, #144]	@ (8006c78 <DMA_CalcBaseAndBitshift+0x15c>)
 8006be8:	5cd3      	ldrb	r3, [r2, r3]
 8006bea:	461a      	mov	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d908      	bls.n	8006c08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8006c7c <DMA_CalcBaseAndBitshift+0x160>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	1d1a      	adds	r2, r3, #4
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c06:	e00d      	b.n	8006c24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8006c7c <DMA_CalcBaseAndBitshift+0x160>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c16:	e005      	b.n	8006c24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	40020010 	.word	0x40020010
 8006c38:	40020028 	.word	0x40020028
 8006c3c:	40020040 	.word	0x40020040
 8006c40:	40020058 	.word	0x40020058
 8006c44:	40020070 	.word	0x40020070
 8006c48:	40020088 	.word	0x40020088
 8006c4c:	400200a0 	.word	0x400200a0
 8006c50:	400200b8 	.word	0x400200b8
 8006c54:	40020410 	.word	0x40020410
 8006c58:	40020428 	.word	0x40020428
 8006c5c:	40020440 	.word	0x40020440
 8006c60:	40020458 	.word	0x40020458
 8006c64:	40020470 	.word	0x40020470
 8006c68:	40020488 	.word	0x40020488
 8006c6c:	400204a0 	.word	0x400204a0
 8006c70:	400204b8 	.word	0x400204b8
 8006c74:	aaaaaaab 	.word	0xaaaaaaab
 8006c78:	08011c6c 	.word	0x08011c6c
 8006c7c:	fffffc00 	.word	0xfffffc00

08006c80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d120      	bne.n	8006cd6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d858      	bhi.n	8006d4e <DMA_CheckFifoParam+0xce>
 8006c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca4 <DMA_CheckFifoParam+0x24>)
 8006c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca2:	bf00      	nop
 8006ca4:	08006cb5 	.word	0x08006cb5
 8006ca8:	08006cc7 	.word	0x08006cc7
 8006cac:	08006cb5 	.word	0x08006cb5
 8006cb0:	08006d4f 	.word	0x08006d4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d048      	beq.n	8006d52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cc4:	e045      	b.n	8006d52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006cce:	d142      	bne.n	8006d56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cd4:	e03f      	b.n	8006d56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cde:	d123      	bne.n	8006d28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d838      	bhi.n	8006d5a <DMA_CheckFifoParam+0xda>
 8006ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <DMA_CheckFifoParam+0x70>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d07 	.word	0x08006d07
 8006cf8:	08006d01 	.word	0x08006d01
 8006cfc:	08006d19 	.word	0x08006d19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	73fb      	strb	r3, [r7, #15]
        break;
 8006d04:	e030      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d025      	beq.n	8006d5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d16:	e022      	b.n	8006d5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d20:	d11f      	bne.n	8006d62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d26:	e01c      	b.n	8006d62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d902      	bls.n	8006d36 <DMA_CheckFifoParam+0xb6>
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d003      	beq.n	8006d3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006d34:	e018      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	73fb      	strb	r3, [r7, #15]
        break;
 8006d3a:	e015      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00e      	beq.n	8006d66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d4c:	e00b      	b.n	8006d66 <DMA_CheckFifoParam+0xe6>
        break;
 8006d4e:	bf00      	nop
 8006d50:	e00a      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
        break;
 8006d52:	bf00      	nop
 8006d54:	e008      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
        break;
 8006d56:	bf00      	nop
 8006d58:	e006      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
        break;
 8006d5a:	bf00      	nop
 8006d5c:	e004      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
        break;
 8006d5e:	bf00      	nop
 8006d60:	e002      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
        break;
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
    break;
 8006d66:	bf00      	nop
    }
  }

  return status;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop

08006d78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a38      	ldr	r2, [pc, #224]	@ (8006e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d022      	beq.n	8006dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a36      	ldr	r2, [pc, #216]	@ (8006e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d01d      	beq.n	8006dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a35      	ldr	r2, [pc, #212]	@ (8006e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d018      	beq.n	8006dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a33      	ldr	r2, [pc, #204]	@ (8006e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d013      	beq.n	8006dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a32      	ldr	r2, [pc, #200]	@ (8006e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00e      	beq.n	8006dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a30      	ldr	r2, [pc, #192]	@ (8006e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8006e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d101      	bne.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01a      	beq.n	8006e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	3b08      	subs	r3, #8
 8006de8:	4a28      	ldr	r2, [pc, #160]	@ (8006e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006dea:	fba2 2303 	umull	r2, r3, r2, r3
 8006dee:	091b      	lsrs	r3, r3, #4
 8006df0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4b26      	ldr	r3, [pc, #152]	@ (8006e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a24      	ldr	r2, [pc, #144]	@ (8006e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006e04:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006e14:	e024      	b.n	8006e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	3b10      	subs	r3, #16
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d806      	bhi.n	8006e3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d902      	bls.n	8006e3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4b18      	ldr	r3, [pc, #96]	@ (8006ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a16      	ldr	r2, [pc, #88]	@ (8006ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006e50:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	2201      	movs	r2, #1
 8006e5a:	409a      	lsls	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e60:	bf00      	nop
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	58025408 	.word	0x58025408
 8006e70:	5802541c 	.word	0x5802541c
 8006e74:	58025430 	.word	0x58025430
 8006e78:	58025444 	.word	0x58025444
 8006e7c:	58025458 	.word	0x58025458
 8006e80:	5802546c 	.word	0x5802546c
 8006e84:	58025480 	.word	0x58025480
 8006e88:	58025494 	.word	0x58025494
 8006e8c:	cccccccd 	.word	0xcccccccd
 8006e90:	16009600 	.word	0x16009600
 8006e94:	58025880 	.word	0x58025880
 8006e98:	aaaaaaab 	.word	0xaaaaaaab
 8006e9c:	400204b8 	.word	0x400204b8
 8006ea0:	4002040f 	.word	0x4002040f
 8006ea4:	10008200 	.word	0x10008200
 8006ea8:	40020880 	.word	0x40020880

08006eac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d04a      	beq.n	8006f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d847      	bhi.n	8006f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a25      	ldr	r2, [pc, #148]	@ (8006f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d022      	beq.n	8006f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a24      	ldr	r2, [pc, #144]	@ (8006f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d01d      	beq.n	8006f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a22      	ldr	r2, [pc, #136]	@ (8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d018      	beq.n	8006f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a21      	ldr	r2, [pc, #132]	@ (8006f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d013      	beq.n	8006f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00e      	beq.n	8006f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1e      	ldr	r2, [pc, #120]	@ (8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d009      	beq.n	8006f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1c      	ldr	r2, [pc, #112]	@ (8006f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d004      	beq.n	8006f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a1b      	ldr	r2, [pc, #108]	@ (8006f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d101      	bne.n	8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4b17      	ldr	r3, [pc, #92]	@ (8006f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a15      	ldr	r2, [pc, #84]	@ (8006f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006f34:	671a      	str	r2, [r3, #112]	@ 0x70
 8006f36:	e009      	b.n	8006f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4b14      	ldr	r3, [pc, #80]	@ (8006f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	461a      	mov	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a11      	ldr	r2, [pc, #68]	@ (8006f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006f4a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	2201      	movs	r2, #1
 8006f52:	409a      	lsls	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	58025408 	.word	0x58025408
 8006f68:	5802541c 	.word	0x5802541c
 8006f6c:	58025430 	.word	0x58025430
 8006f70:	58025444 	.word	0x58025444
 8006f74:	58025458 	.word	0x58025458
 8006f78:	5802546c 	.word	0x5802546c
 8006f7c:	58025480 	.word	0x58025480
 8006f80:	58025494 	.word	0x58025494
 8006f84:	1600963f 	.word	0x1600963f
 8006f88:	58025940 	.word	0x58025940
 8006f8c:	1000823f 	.word	0x1000823f
 8006f90:	40020940 	.word	0x40020940

08006f94 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b098      	sub	sp, #96	@ 0x60
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006f9c:	4a84      	ldr	r2, [pc, #528]	@ (80071b0 <HAL_FDCAN_Init+0x21c>)
 8006f9e:	f107 030c 	add.w	r3, r7, #12
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	224c      	movs	r2, #76	@ 0x4c
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f00a f892 	bl	80110d0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e1c6      	b.n	8007344 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a7e      	ldr	r2, [pc, #504]	@ (80071b4 <HAL_FDCAN_Init+0x220>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d106      	bne.n	8006fce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006fc8:	461a      	mov	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fb f842 	bl	800206c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0210 	bic.w	r2, r2, #16
 8006ff6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ff8:	f7fb fd1a 	bl	8002a30 <HAL_GetTick>
 8006ffc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006ffe:	e014      	b.n	800702a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007000:	f7fb fd16 	bl	8002a30 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b0a      	cmp	r3, #10
 800700c:	d90d      	bls.n	800702a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007014:	f043 0201 	orr.w	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2203      	movs	r2, #3
 8007022:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e18c      	b.n	8007344 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b08      	cmp	r3, #8
 8007036:	d0e3      	beq.n	8007000 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007048:	f7fb fcf2 	bl	8002a30 <HAL_GetTick>
 800704c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800704e:	e014      	b.n	800707a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007050:	f7fb fcee 	bl	8002a30 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b0a      	cmp	r3, #10
 800705c:	d90d      	bls.n	800707a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007064:	f043 0201 	orr.w	r2, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2203      	movs	r2, #3
 8007072:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e164      	b.n	8007344 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0e3      	beq.n	8007050 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0202 	orr.w	r2, r2, #2
 8007096:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7c1b      	ldrb	r3, [r3, #16]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d108      	bne.n	80070b2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070ae:	619a      	str	r2, [r3, #24]
 80070b0:	e007      	b.n	80070c2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7c5b      	ldrb	r3, [r3, #17]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d108      	bne.n	80070dc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070d8:	619a      	str	r2, [r3, #24]
 80070da:	e007      	b.n	80070ec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	7c9b      	ldrb	r3, [r3, #18]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d108      	bne.n	8007106 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007102:	619a      	str	r2, [r3, #24]
 8007104:	e007      	b.n	8007116 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007114:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800713a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691a      	ldr	r2, [r3, #16]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0210 	bic.w	r2, r2, #16
 800714a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d108      	bne.n	8007166 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0204 	orr.w	r2, r2, #4
 8007162:	619a      	str	r2, [r3, #24]
 8007164:	e030      	b.n	80071c8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d02c      	beq.n	80071c8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d020      	beq.n	80071b8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699a      	ldr	r2, [r3, #24]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007184:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0210 	orr.w	r2, r2, #16
 8007194:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	2b03      	cmp	r3, #3
 800719c:	d114      	bne.n	80071c8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0220 	orr.w	r2, r2, #32
 80071ac:	619a      	str	r2, [r3, #24]
 80071ae:	e00b      	b.n	80071c8 <HAL_FDCAN_Init+0x234>
 80071b0:	08011c10 	.word	0x08011c10
 80071b4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0220 	orr.w	r2, r2, #32
 80071c6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071d8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80071e0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80071f0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071f2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071fc:	d115      	bne.n	800722a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007202:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	3b01      	subs	r3, #1
 800720a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800720c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007212:	3b01      	subs	r3, #1
 8007214:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007216:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	3b01      	subs	r3, #1
 8007220:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007226:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007228:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007250:	4413      	add	r3, r2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d011      	beq.n	800727a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800725e:	f023 0107 	bic.w	r1, r3, #7
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	3360      	adds	r3, #96	@ 0x60
 800726a:	443b      	add	r3, r7
 800726c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d011      	beq.n	80072a6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800728a:	f023 0107 	bic.w	r1, r3, #7
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	3360      	adds	r3, #96	@ 0x60
 8007296:	443b      	add	r3, r7
 8007298:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d012      	beq.n	80072d4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072b6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	3360      	adds	r3, #96	@ 0x60
 80072c2:	443b      	add	r3, r7
 80072c4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80072c8:	011a      	lsls	r2, r3, #4
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d012      	beq.n	8007302 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072e4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	3360      	adds	r3, #96	@ 0x60
 80072f0:	443b      	add	r3, r7
 80072f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80072f6:	021a      	lsls	r2, r3, #8
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a11      	ldr	r2, [pc, #68]	@ (800734c <HAL_FDCAN_Init+0x3b8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d107      	bne.n	800731c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f022 0203 	bic.w	r2, r2, #3
 800731a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fdeb 	bl	8007f10 <FDCAN_CalcultateRamBlockAddresses>
 800733a:	4603      	mov	r3, r0
 800733c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007340:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007344:	4618      	mov	r0, r3
 8007346:	3760      	adds	r7, #96	@ 0x60
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	4000a000 	.word	0x4000a000

08007350 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007360:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d002      	beq.n	800736e <HAL_FDCAN_ConfigFilter+0x1e>
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d157      	bne.n	800741e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d12b      	bne.n	80073ce <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	2b07      	cmp	r3, #7
 800737c:	d10d      	bne.n	800739a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800738a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007390:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007392:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	e00e      	b.n	80073b8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80073a6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80073ae:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	e025      	b.n	800741a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	075a      	lsls	r2, r3, #29
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	2b07      	cmp	r3, #7
 80073e2:	d103      	bne.n	80073ec <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	613b      	str	r3, [r7, #16]
 80073ea:	e006      	b.n	80073fa <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	079a      	lsls	r2, r3, #30
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	4413      	add	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	3304      	adds	r3, #4
 8007412:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	e008      	b.n	8007430 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007424:	f043 0202 	orr.w	r2, r3, #2
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
  }
}
 8007430:	4618      	mov	r0, r3
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	d111      	bne.n	8007474 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0201 	bic.w	r2, r2, #1
 8007466:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	e008      	b.n	8007486 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800747a:	f043 0204 	orr.w	r2, r3, #4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
  }
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d141      	bne.n	800752e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80074b2:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d109      	bne.n	80074ce <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074c0:	f043 0220 	orr.w	r2, r3, #32
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e038      	b.n	8007540 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80074d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e026      	b.n	8007540 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80074fa:	0c1b      	lsrs	r3, r3, #16
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fe87 	bl	800821c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2101      	movs	r1, #1
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	fa01 f202 	lsl.w	r2, r1, r2
 800751a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800751e:	2201      	movs	r2, #1
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	409a      	lsls	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e008      	b.n	8007540 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007534:	f043 0208 	orr.w	r2, r3, #8
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
  }
}
 8007540:	4618      	mov	r0, r3
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007548:	b480      	push	{r7}
 800754a:	b08b      	sub	sp, #44	@ 0x2c
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007560:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8007562:	7efb      	ldrb	r3, [r7, #27]
 8007564:	2b02      	cmp	r3, #2
 8007566:	f040 8149 	bne.w	80077fc <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b40      	cmp	r3, #64	@ 0x40
 800756e:	d14c      	bne.n	800760a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007578:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d109      	bne.n	8007594 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007586:	f043 0220 	orr.w	r2, r3, #32
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e13c      	b.n	800780e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800759c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d109      	bne.n	80075b8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e12a      	b.n	800780e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80075c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075c8:	d10a      	bne.n	80075e0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075da:	d101      	bne.n	80075e0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80075dc:	2301      	movs	r3, #1
 80075de:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80075e8:	0a1b      	lsrs	r3, r3, #8
 80075ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fc:	69f9      	ldr	r1, [r7, #28]
 80075fe:	fb01 f303 	mul.w	r3, r1, r3
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	627b      	str	r3, [r7, #36]	@ 0x24
 8007608:	e068      	b.n	80076dc <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b41      	cmp	r3, #65	@ 0x41
 800760e:	d14c      	bne.n	80076aa <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007618:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d109      	bne.n	8007634 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007626:	f043 0220 	orr.w	r2, r3, #32
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0ec      	b.n	800780e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800763c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800764a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e0da      	b.n	800780e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007660:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007668:	d10a      	bne.n	8007680 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800767a:	d101      	bne.n	8007680 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800767c:	2301      	movs	r3, #1
 800767e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007688:	0a1b      	lsrs	r3, r3, #8
 800768a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800769c:	69f9      	ldr	r1, [r7, #28]
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a8:	e018      	b.n	80076dc <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d309      	bcc.n	80076c8 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076ba:	f043 0220 	orr.w	r2, r3, #32
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e0a2      	b.n	800780e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	fb01 f303 	mul.w	r3, r1, r3
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d107      	bne.n	8007700 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	0c9b      	lsrs	r3, r3, #18
 80076f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e005      	b.n	800770c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	3304      	adds	r3, #4
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	f003 020f 	and.w	r2, r3, #15
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	0e1b      	lsrs	r3, r3, #24
 8007760:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	0fda      	lsrs	r2, r3, #31
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	3304      	adds	r3, #4
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800777c:	2300      	movs	r3, #0
 800777e:	623b      	str	r3, [r7, #32]
 8007780:	e00a      	b.n	8007798 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	441a      	add	r2, r3
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	440b      	add	r3, r1
 800778e:	7812      	ldrb	r2, [r2, #0]
 8007790:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	3301      	adds	r3, #1
 8007796:	623b      	str	r3, [r7, #32]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	4a1f      	ldr	r2, [pc, #124]	@ (800781c <HAL_FDCAN_GetRxMessage+0x2d4>)
 800779e:	5cd3      	ldrb	r3, [r2, r3]
 80077a0:	461a      	mov	r2, r3
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d3ec      	bcc.n	8007782 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b40      	cmp	r3, #64	@ 0x40
 80077ac:	d105      	bne.n	80077ba <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80077b8:	e01e      	b.n	80077f8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b41      	cmp	r3, #65	@ 0x41
 80077be:	d105      	bne.n	80077cc <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80077ca:	e015      	b.n	80077f8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b1f      	cmp	r3, #31
 80077d0:	d808      	bhi.n	80077e4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2101      	movs	r1, #1
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	fa01 f202 	lsl.w	r2, r1, r2
 80077de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80077e2:	e009      	b.n	80077f8 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f003 021f 	and.w	r2, r3, #31
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2101      	movs	r1, #1
 80077f0:	fa01 f202 	lsl.w	r2, r1, r2
 80077f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e008      	b.n	800780e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007802:	f043 0208 	orr.w	r2, r3, #8
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
  }
}
 800780e:	4618      	mov	r0, r3
 8007810:	372c      	adds	r7, #44	@ 0x2c
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	08011c74 	.word	0x08011c74

08007820 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007832:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d002      	beq.n	8007840 <HAL_FDCAN_ActivateNotification+0x20>
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d155      	bne.n	80078ec <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0201 	orr.w	r2, r2, #1
 800785c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800785e:	e014      	b.n	800788a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	4013      	ands	r3, r2
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	429a      	cmp	r2, r3
 800786e:	d108      	bne.n	8007882 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0202 	orr.w	r2, r2, #2
 800787e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007880:	e003      	b.n	800788a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2203      	movs	r2, #3
 8007888:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007890:	2b00      	cmp	r3, #0
 8007892:	d009      	beq.n	80078a8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d009      	beq.n	80078c6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	4b0f      	ldr	r3, [pc, #60]	@ (800790c <HAL_FDCAN_ActivateNotification+0xec>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	430b      	orrs	r3, r1
 80078d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80078da:	4b0d      	ldr	r3, [pc, #52]	@ (8007910 <HAL_FDCAN_ActivateNotification+0xf0>)
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	0f9b      	lsrs	r3, r3, #30
 80078e2:	490b      	ldr	r1, [pc, #44]	@ (8007910 <HAL_FDCAN_ActivateNotification+0xf0>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e008      	b.n	80078fe <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078f2:	f043 0202 	orr.w	r2, r3, #2
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
  }
}
 80078fe:	4618      	mov	r0, r3
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	3fcfffff 	.word	0x3fcfffff
 8007910:	4000a800 	.word	0x4000a800

08007914 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b096      	sub	sp, #88	@ 0x58
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800791c:	4b9a      	ldr	r3, [pc, #616]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	079b      	lsls	r3, r3, #30
 8007922:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007924:	4b98      	ldr	r3, [pc, #608]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	079b      	lsls	r3, r3, #30
 800792a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800792c:	4013      	ands	r3, r2
 800792e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007936:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800793a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007942:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007944:	4013      	ands	r3, r2
 8007946:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800795c:	4013      	ands	r3, r2
 800795e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007966:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800796a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007974:	4013      	ands	r3, r2
 8007976:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8007982:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800798c:	4013      	ands	r3, r2
 800798e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007996:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800799a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079a4:	4013      	ands	r3, r2
 80079a6:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80079b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d010      	beq.n	80079e6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80079da:	4b6b      	ldr	r3, [pc, #428]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 80079dc:	2200      	movs	r2, #0
 80079de:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa54 	bl	8007e8e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80079e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e8:	0a9b      	lsrs	r3, r3, #10
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01d      	beq.n	8007a2e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	0a9b      	lsrs	r3, r3, #10
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d017      	beq.n	8007a2e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a06:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a12:	4013      	ands	r3, r2
 8007a14:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a20:	4b59      	ldr	r3, [pc, #356]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007a26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fa07 	bl	8007e3c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00d      	beq.n	8007a50 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a3a:	4b54      	ldr	r3, [pc, #336]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x278>)
 8007a3c:	400b      	ands	r3, r1
 8007a3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a40:	4a51      	ldr	r2, [pc, #324]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a44:	0f9b      	lsrs	r3, r3, #30
 8007a46:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007a48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f9c0 	bl	8007dd0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00d      	beq.n	8007a72 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x278>)
 8007a5e:	400b      	ands	r3, r1
 8007a60:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a62:	4a49      	ldr	r2, [pc, #292]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a66:	0f9b      	lsrs	r3, r3, #30
 8007a68:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007a6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9ba 	bl	8007de6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00d      	beq.n	8007a94 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a7e:	4b43      	ldr	r3, [pc, #268]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x278>)
 8007a80:	400b      	ands	r3, r1
 8007a82:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a84:	4a40      	ldr	r2, [pc, #256]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a88:	0f9b      	lsrs	r3, r3, #30
 8007a8a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007a8c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7f9 fde4 	bl	800165c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00d      	beq.n	8007ab6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x278>)
 8007aa2:	400b      	ands	r3, r1
 8007aa4:	6513      	str	r3, [r2, #80]	@ 0x50
 8007aa6:	4a38      	ldr	r2, [pc, #224]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aaa:	0f9b      	lsrs	r3, r3, #30
 8007aac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007aae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f9a3 	bl	8007dfc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab8:	0adb      	lsrs	r3, r3, #11
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d010      	beq.n	8007ae4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac4:	0adb      	lsrs	r3, r3, #11
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ad6:	651a      	str	r2, [r3, #80]	@ 0x50
 8007ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f997 	bl	8007e12 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae6:	0a5b      	lsrs	r3, r3, #9
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01d      	beq.n	8007b2c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	0a5b      	lsrs	r3, r3, #9
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d017      	beq.n	8007b2c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b04:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b10:	4013      	ands	r3, r2
 8007b12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007b24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f97d 	bl	8007e26 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2e:	0cdb      	lsrs	r3, r3, #19
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d010      	beq.n	8007b5a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3a:	0cdb      	lsrs	r3, r3, #19
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007b4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f97c 	bl	8007e52 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5c:	0c1b      	lsrs	r3, r3, #16
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d016      	beq.n	8007b94 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d010      	beq.n	8007b94 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007b7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b7c:	4b02      	ldr	r3, [pc, #8]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x274>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	e004      	b.n	8007b90 <HAL_FDCAN_IRQHandler+0x27c>
 8007b86:	bf00      	nop
 8007b88:	4000a800 	.word	0x4000a800
 8007b8c:	3fcfffff 	.word	0x3fcfffff
 8007b90:	f000 f969 	bl	8007e66 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b96:	0c9b      	lsrs	r3, r3, #18
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d010      	beq.n	8007bc2 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	0c9b      	lsrs	r3, r3, #18
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007bb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bb6:	4b83      	ldr	r3, [pc, #524]	@ (8007dc4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f95c 	bl	8007e7a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc4:	0c5b      	lsrs	r3, r3, #17
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d015      	beq.n	8007bfa <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd0:	0c5b      	lsrs	r3, r3, #17
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00f      	beq.n	8007bfa <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007be2:	651a      	str	r2, [r3, #80]	@ 0x50
 8007be4:	4b77      	ldr	r3, [pc, #476]	@ (8007dc4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bf0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00d      	beq.n	8007c1c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c06:	4b70      	ldr	r3, [pc, #448]	@ (8007dc8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007c08:	400b      	ands	r3, r1
 8007c0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c0c:	4a6d      	ldr	r2, [pc, #436]	@ (8007dc4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c10:	0f9b      	lsrs	r3, r3, #30
 8007c12:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007c14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7f9 fe26 	bl	8001868 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d011      	beq.n	8007c46 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c28:	4b67      	ldr	r3, [pc, #412]	@ (8007dc8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007c2a:	400b      	ands	r3, r1
 8007c2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c2e:	4a65      	ldr	r2, [pc, #404]	@ (8007dc4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c32:	0f9b      	lsrs	r3, r3, #30
 8007c34:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a60      	ldr	r2, [pc, #384]	@ (8007dcc <HAL_FDCAN_IRQHandler+0x4b8>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	f040 80ac 	bne.w	8007daa <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 80a4 	beq.w	8007daa <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	f003 030f 	and.w	r3, r3, #15
 8007c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c76:	4013      	ands	r3, r2
 8007c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c84:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c8e:	4013      	ands	r3, r2
 8007c90:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007cb4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbc:	6a3a      	ldr	r2, [r7, #32]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007ccc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	69fa      	ldr	r2, [r7, #28]
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d007      	beq.n	8007d00 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cf6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007cf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f8db 	bl	8007eb6 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d007      	beq.n	8007d16 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d0c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007d0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f8db 	bl	8007ecc <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	099b      	lsrs	r3, r3, #6
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d01a      	beq.n	8007d58 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	099b      	lsrs	r3, r3, #6
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d014      	beq.n	8007d58 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d34:	0c1b      	lsrs	r3, r3, #16
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d44:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2240      	movs	r2, #64	@ 0x40
 8007d4c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	6939      	ldr	r1, [r7, #16]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f8c5 	bl	8007ee2 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d64:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007d66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f8c6 	bl	8007efa <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	6a3a      	ldr	r2, [r7, #32]
 8007d7a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00b      	beq.n	8007daa <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f874 	bl	8007ea2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007dba:	bf00      	nop
 8007dbc:	3758      	adds	r7, #88	@ 0x58
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	4000a800 	.word	0x4000a800
 8007dc8:	3fcfffff 	.word	0x3fcfffff
 8007dcc:	4000a000 	.word	0x4000a000

08007dd0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007e5a:	bf00      	nop
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b085      	sub	sp, #20
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	60b9      	str	r1, [r7, #8]
 8007eec:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007f26:	4ba7      	ldr	r3, [pc, #668]	@ (80081c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	0091      	lsls	r1, r2, #2
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6812      	ldr	r2, [r2, #0]
 8007f32:	430b      	orrs	r3, r1
 8007f34:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f40:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f48:	041a      	lsls	r2, r3, #16
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007f66:	4b97      	ldr	r3, [pc, #604]	@ (80081c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	0091      	lsls	r1, r2, #2
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6812      	ldr	r2, [r2, #0]
 8007f72:	430b      	orrs	r3, r1
 8007f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f80:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f88:	041a      	lsls	r2, r3, #16
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007fa8:	4b86      	ldr	r3, [pc, #536]	@ (80081c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	0091      	lsls	r1, r2, #2
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6812      	ldr	r2, [r2, #0]
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fc2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fca:	041a      	lsls	r2, r3, #16
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007fde:	fb02 f303 	mul.w	r3, r2, r3
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007ff0:	4b74      	ldr	r3, [pc, #464]	@ (80081c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	0091      	lsls	r1, r2, #2
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6812      	ldr	r2, [r2, #0]
 8007ffc:	430b      	orrs	r3, r1
 8007ffe:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800800a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008012:	041a      	lsls	r2, r3, #16
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008038:	4b62      	ldr	r3, [pc, #392]	@ (80081c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800803a:	4013      	ands	r3, r2
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	0091      	lsls	r1, r2, #2
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	430b      	orrs	r3, r1
 8008046:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008052:	fb02 f303 	mul.w	r3, r2, r3
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	4413      	add	r3, r2
 800805a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008064:	4b57      	ldr	r3, [pc, #348]	@ (80081c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008066:	4013      	ands	r3, r2
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	0091      	lsls	r1, r2, #2
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	430b      	orrs	r3, r1
 8008072:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800807e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008086:	041a      	lsls	r2, r3, #16
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008096:	005b      	lsls	r3, r3, #1
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	4413      	add	r3, r2
 800809c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80080a6:	4b47      	ldr	r3, [pc, #284]	@ (80081c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	0091      	lsls	r1, r2, #2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	430b      	orrs	r3, r1
 80080b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080c0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080c8:	041a      	lsls	r2, r3, #16
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080dc:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080e4:	061a      	lsls	r2, r3, #24
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080f4:	4b34      	ldr	r3, [pc, #208]	@ (80081c8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80080f6:	4413      	add	r3, r2
 80080f8:	009a      	lsls	r2, r3, #2
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	441a      	add	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800812a:	fb01 f303 	mul.w	r3, r1, r3
 800812e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008130:	441a      	add	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008142:	fb01 f303 	mul.w	r3, r1, r3
 8008146:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008148:	441a      	add	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800815a:	fb01 f303 	mul.w	r3, r1, r3
 800815e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008160:	441a      	add	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	441a      	add	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800818a:	fb01 f303 	mul.w	r3, r1, r3
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	441a      	add	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80081a6:	fb01 f303 	mul.w	r3, r1, r3
 80081aa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80081ac:	441a      	add	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ba:	4a04      	ldr	r2, [pc, #16]	@ (80081cc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d915      	bls.n	80081ec <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80081c0:	e006      	b.n	80081d0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80081c2:	bf00      	nop
 80081c4:	ffff0003 	.word	0xffff0003
 80081c8:	10002b00 	.word	0x10002b00
 80081cc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081d6:	f043 0220 	orr.w	r2, r3, #32
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2203      	movs	r2, #3
 80081e4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e010      	b.n	800820e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e005      	b.n	8008200 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3304      	adds	r3, #4
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	429a      	cmp	r2, r3
 800820a:	d3f3      	bcc.n	80081f4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop

0800821c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800821c:	b480      	push	{r7}
 800821e:	b089      	sub	sp, #36	@ 0x24
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800823a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008242:	4313      	orrs	r3, r2
 8008244:	61fb      	str	r3, [r7, #28]
 8008246:	e00a      	b.n	800825e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008250:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008256:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008258:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800825c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008268:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800826e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008274:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	3304      	adds	r3, #4
 80082a0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	3304      	adds	r3, #4
 80082ac:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	e020      	b.n	80082f6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	3303      	adds	r3, #3
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	4413      	add	r3, r2
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	3302      	adds	r3, #2
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	440b      	add	r3, r1
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082cc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	3301      	adds	r3, #1
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	440b      	add	r3, r1
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80082da:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	440a      	add	r2, r1
 80082e2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80082e4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	3304      	adds	r3, #4
 80082ee:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	3304      	adds	r3, #4
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	4a06      	ldr	r2, [pc, #24]	@ (8008314 <FDCAN_CopyMessageToRAM+0xf8>)
 80082fc:	5cd3      	ldrb	r3, [r2, r3]
 80082fe:	461a      	mov	r2, r3
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	4293      	cmp	r3, r2
 8008304:	d3d6      	bcc.n	80082b4 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	3724      	adds	r7, #36	@ 0x24
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	08011c74 	.word	0x08011c74

08008318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008318:	b480      	push	{r7}
 800831a:	b089      	sub	sp, #36	@ 0x24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008326:	4b86      	ldr	r3, [pc, #536]	@ (8008540 <HAL_GPIO_Init+0x228>)
 8008328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800832a:	e18c      	b.n	8008646 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	2101      	movs	r1, #1
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	fa01 f303 	lsl.w	r3, r1, r3
 8008338:	4013      	ands	r3, r2
 800833a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 817e 	beq.w	8008640 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f003 0303 	and.w	r3, r3, #3
 800834c:	2b01      	cmp	r3, #1
 800834e:	d005      	beq.n	800835c <HAL_GPIO_Init+0x44>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	2b02      	cmp	r3, #2
 800835a:	d130      	bne.n	80083be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	2203      	movs	r2, #3
 8008368:	fa02 f303 	lsl.w	r3, r2, r3
 800836c:	43db      	mvns	r3, r3
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	4013      	ands	r3, r2
 8008372:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	fa02 f303 	lsl.w	r3, r2, r3
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	4313      	orrs	r3, r2
 8008384:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008392:	2201      	movs	r2, #1
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	fa02 f303 	lsl.w	r3, r2, r3
 800839a:	43db      	mvns	r3, r3
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	4013      	ands	r3, r2
 80083a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	091b      	lsrs	r3, r3, #4
 80083a8:	f003 0201 	and.w	r2, r3, #1
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	fa02 f303 	lsl.w	r3, r2, r3
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f003 0303 	and.w	r3, r3, #3
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d017      	beq.n	80083fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	2203      	movs	r2, #3
 80083d6:	fa02 f303 	lsl.w	r3, r2, r3
 80083da:	43db      	mvns	r3, r3
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	4013      	ands	r3, r2
 80083e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	689a      	ldr	r2, [r3, #8]
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	fa02 f303 	lsl.w	r3, r2, r3
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d123      	bne.n	800844e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	08da      	lsrs	r2, r3, #3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3208      	adds	r2, #8
 800840e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	220f      	movs	r2, #15
 800841e:	fa02 f303 	lsl.w	r3, r2, r3
 8008422:	43db      	mvns	r3, r3
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	4013      	ands	r3, r2
 8008428:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	691a      	ldr	r2, [r3, #16]
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	f003 0307 	and.w	r3, r3, #7
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	fa02 f303 	lsl.w	r3, r2, r3
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	4313      	orrs	r3, r2
 800843e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	08da      	lsrs	r2, r3, #3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3208      	adds	r2, #8
 8008448:	69b9      	ldr	r1, [r7, #24]
 800844a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	2203      	movs	r2, #3
 800845a:	fa02 f303 	lsl.w	r3, r2, r3
 800845e:	43db      	mvns	r3, r3
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	4013      	ands	r3, r2
 8008464:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f003 0203 	and.w	r2, r3, #3
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	fa02 f303 	lsl.w	r3, r2, r3
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	4313      	orrs	r3, r2
 800847a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 80d8 	beq.w	8008640 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008490:	4b2c      	ldr	r3, [pc, #176]	@ (8008544 <HAL_GPIO_Init+0x22c>)
 8008492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008496:	4a2b      	ldr	r2, [pc, #172]	@ (8008544 <HAL_GPIO_Init+0x22c>)
 8008498:	f043 0302 	orr.w	r3, r3, #2
 800849c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80084a0:	4b28      	ldr	r3, [pc, #160]	@ (8008544 <HAL_GPIO_Init+0x22c>)
 80084a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084ae:	4a26      	ldr	r2, [pc, #152]	@ (8008548 <HAL_GPIO_Init+0x230>)
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	089b      	lsrs	r3, r3, #2
 80084b4:	3302      	adds	r3, #2
 80084b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	220f      	movs	r2, #15
 80084c6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ca:	43db      	mvns	r3, r3
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	4013      	ands	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a1d      	ldr	r2, [pc, #116]	@ (800854c <HAL_GPIO_Init+0x234>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d04a      	beq.n	8008570 <HAL_GPIO_Init+0x258>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008550 <HAL_GPIO_Init+0x238>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d02b      	beq.n	800853a <HAL_GPIO_Init+0x222>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008554 <HAL_GPIO_Init+0x23c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d025      	beq.n	8008536 <HAL_GPIO_Init+0x21e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008558 <HAL_GPIO_Init+0x240>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d01f      	beq.n	8008532 <HAL_GPIO_Init+0x21a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a19      	ldr	r2, [pc, #100]	@ (800855c <HAL_GPIO_Init+0x244>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d019      	beq.n	800852e <HAL_GPIO_Init+0x216>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a18      	ldr	r2, [pc, #96]	@ (8008560 <HAL_GPIO_Init+0x248>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d013      	beq.n	800852a <HAL_GPIO_Init+0x212>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a17      	ldr	r2, [pc, #92]	@ (8008564 <HAL_GPIO_Init+0x24c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d00d      	beq.n	8008526 <HAL_GPIO_Init+0x20e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a16      	ldr	r2, [pc, #88]	@ (8008568 <HAL_GPIO_Init+0x250>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d007      	beq.n	8008522 <HAL_GPIO_Init+0x20a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a15      	ldr	r2, [pc, #84]	@ (800856c <HAL_GPIO_Init+0x254>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d101      	bne.n	800851e <HAL_GPIO_Init+0x206>
 800851a:	2309      	movs	r3, #9
 800851c:	e029      	b.n	8008572 <HAL_GPIO_Init+0x25a>
 800851e:	230a      	movs	r3, #10
 8008520:	e027      	b.n	8008572 <HAL_GPIO_Init+0x25a>
 8008522:	2307      	movs	r3, #7
 8008524:	e025      	b.n	8008572 <HAL_GPIO_Init+0x25a>
 8008526:	2306      	movs	r3, #6
 8008528:	e023      	b.n	8008572 <HAL_GPIO_Init+0x25a>
 800852a:	2305      	movs	r3, #5
 800852c:	e021      	b.n	8008572 <HAL_GPIO_Init+0x25a>
 800852e:	2304      	movs	r3, #4
 8008530:	e01f      	b.n	8008572 <HAL_GPIO_Init+0x25a>
 8008532:	2303      	movs	r3, #3
 8008534:	e01d      	b.n	8008572 <HAL_GPIO_Init+0x25a>
 8008536:	2302      	movs	r3, #2
 8008538:	e01b      	b.n	8008572 <HAL_GPIO_Init+0x25a>
 800853a:	2301      	movs	r3, #1
 800853c:	e019      	b.n	8008572 <HAL_GPIO_Init+0x25a>
 800853e:	bf00      	nop
 8008540:	58000080 	.word	0x58000080
 8008544:	58024400 	.word	0x58024400
 8008548:	58000400 	.word	0x58000400
 800854c:	58020000 	.word	0x58020000
 8008550:	58020400 	.word	0x58020400
 8008554:	58020800 	.word	0x58020800
 8008558:	58020c00 	.word	0x58020c00
 800855c:	58021000 	.word	0x58021000
 8008560:	58021400 	.word	0x58021400
 8008564:	58021800 	.word	0x58021800
 8008568:	58021c00 	.word	0x58021c00
 800856c:	58022400 	.word	0x58022400
 8008570:	2300      	movs	r3, #0
 8008572:	69fa      	ldr	r2, [r7, #28]
 8008574:	f002 0203 	and.w	r2, r2, #3
 8008578:	0092      	lsls	r2, r2, #2
 800857a:	4093      	lsls	r3, r2
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	4313      	orrs	r3, r2
 8008580:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008582:	4938      	ldr	r1, [pc, #224]	@ (8008664 <HAL_GPIO_Init+0x34c>)
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	089b      	lsrs	r3, r3, #2
 8008588:	3302      	adds	r3, #2
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	43db      	mvns	r3, r3
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	4013      	ands	r3, r2
 80085a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80085b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80085be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	43db      	mvns	r3, r3
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	4013      	ands	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d003      	beq.n	80085e4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80085e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	43db      	mvns	r3, r3
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	4013      	ands	r3, r2
 80085fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	4313      	orrs	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	43db      	mvns	r3, r3
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	4013      	ands	r3, r2
 8008624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008632:	69ba      	ldr	r2, [r7, #24]
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	4313      	orrs	r3, r2
 8008638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	3301      	adds	r3, #1
 8008644:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	fa22 f303 	lsr.w	r3, r2, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	f47f ae6b 	bne.w	800832c <HAL_GPIO_Init+0x14>
  }
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	3724      	adds	r7, #36	@ 0x24
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	58000400 	.word	0x58000400

08008668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691a      	ldr	r2, [r3, #16]
 8008678:	887b      	ldrh	r3, [r7, #2]
 800867a:	4013      	ands	r3, r2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008680:	2301      	movs	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]
 8008684:	e001      	b.n	800868a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800868a:	7bfb      	ldrb	r3, [r7, #15]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	807b      	strh	r3, [r7, #2]
 80086a4:	4613      	mov	r3, r2
 80086a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086a8:	787b      	ldrb	r3, [r7, #1]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086ae:	887a      	ldrh	r2, [r7, #2]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80086b4:	e003      	b.n	80086be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80086b6:	887b      	ldrh	r3, [r7, #2]
 80086b8:	041a      	lsls	r2, r3, #16
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	619a      	str	r2, [r3, #24]
}
 80086be:	bf00      	nop
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086d4:	4b19      	ldr	r3, [pc, #100]	@ (800873c <HAL_PWREx_ConfigSupply+0x70>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d00a      	beq.n	80086f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086e0:	4b16      	ldr	r3, [pc, #88]	@ (800873c <HAL_PWREx_ConfigSupply+0x70>)
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f003 0307 	and.w	r3, r3, #7
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d001      	beq.n	80086f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e01f      	b.n	8008732 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	e01d      	b.n	8008732 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80086f6:	4b11      	ldr	r3, [pc, #68]	@ (800873c <HAL_PWREx_ConfigSupply+0x70>)
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f023 0207 	bic.w	r2, r3, #7
 80086fe:	490f      	ldr	r1, [pc, #60]	@ (800873c <HAL_PWREx_ConfigSupply+0x70>)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4313      	orrs	r3, r2
 8008704:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008706:	f7fa f993 	bl	8002a30 <HAL_GetTick>
 800870a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800870c:	e009      	b.n	8008722 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800870e:	f7fa f98f 	bl	8002a30 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800871c:	d901      	bls.n	8008722 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e007      	b.n	8008732 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008722:	4b06      	ldr	r3, [pc, #24]	@ (800873c <HAL_PWREx_ConfigSupply+0x70>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800872a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800872e:	d1ee      	bne.n	800870e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	58024800 	.word	0x58024800

08008740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08c      	sub	sp, #48	@ 0x30
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e3c8      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 8087 	beq.w	800886e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008760:	4b88      	ldr	r3, [pc, #544]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800876a:	4b86      	ldr	r3, [pc, #536]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 800876c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008772:	2b10      	cmp	r3, #16
 8008774:	d007      	beq.n	8008786 <HAL_RCC_OscConfig+0x46>
 8008776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008778:	2b18      	cmp	r3, #24
 800877a:	d110      	bne.n	800879e <HAL_RCC_OscConfig+0x5e>
 800877c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877e:	f003 0303 	and.w	r3, r3, #3
 8008782:	2b02      	cmp	r3, #2
 8008784:	d10b      	bne.n	800879e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008786:	4b7f      	ldr	r3, [pc, #508]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d06c      	beq.n	800886c <HAL_RCC_OscConfig+0x12c>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d168      	bne.n	800886c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e3a2      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087a6:	d106      	bne.n	80087b6 <HAL_RCC_OscConfig+0x76>
 80087a8:	4b76      	ldr	r3, [pc, #472]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a75      	ldr	r2, [pc, #468]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	e02e      	b.n	8008814 <HAL_RCC_OscConfig+0xd4>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10c      	bne.n	80087d8 <HAL_RCC_OscConfig+0x98>
 80087be:	4b71      	ldr	r3, [pc, #452]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a70      	ldr	r2, [pc, #448]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087c8:	6013      	str	r3, [r2, #0]
 80087ca:	4b6e      	ldr	r3, [pc, #440]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a6d      	ldr	r2, [pc, #436]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	e01d      	b.n	8008814 <HAL_RCC_OscConfig+0xd4>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087e0:	d10c      	bne.n	80087fc <HAL_RCC_OscConfig+0xbc>
 80087e2:	4b68      	ldr	r3, [pc, #416]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a67      	ldr	r2, [pc, #412]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	4b65      	ldr	r3, [pc, #404]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a64      	ldr	r2, [pc, #400]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	e00b      	b.n	8008814 <HAL_RCC_OscConfig+0xd4>
 80087fc:	4b61      	ldr	r3, [pc, #388]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a60      	ldr	r2, [pc, #384]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	4b5e      	ldr	r3, [pc, #376]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a5d      	ldr	r2, [pc, #372]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 800880e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d013      	beq.n	8008844 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881c:	f7fa f908 	bl	8002a30 <HAL_GetTick>
 8008820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008824:	f7fa f904 	bl	8002a30 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b64      	cmp	r3, #100	@ 0x64
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e356      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008836:	4b53      	ldr	r3, [pc, #332]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f0      	beq.n	8008824 <HAL_RCC_OscConfig+0xe4>
 8008842:	e014      	b.n	800886e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008844:	f7fa f8f4 	bl	8002a30 <HAL_GetTick>
 8008848:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800884c:	f7fa f8f0 	bl	8002a30 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b64      	cmp	r3, #100	@ 0x64
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e342      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800885e:	4b49      	ldr	r3, [pc, #292]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1f0      	bne.n	800884c <HAL_RCC_OscConfig+0x10c>
 800886a:	e000      	b.n	800886e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800886c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 808c 	beq.w	8008994 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800887c:	4b41      	ldr	r3, [pc, #260]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008884:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008886:	4b3f      	ldr	r3, [pc, #252]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d007      	beq.n	80088a2 <HAL_RCC_OscConfig+0x162>
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	2b18      	cmp	r3, #24
 8008896:	d137      	bne.n	8008908 <HAL_RCC_OscConfig+0x1c8>
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d132      	bne.n	8008908 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088a2:	4b38      	ldr	r3, [pc, #224]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <HAL_RCC_OscConfig+0x17a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e314      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088ba:	4b32      	ldr	r3, [pc, #200]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f023 0219 	bic.w	r2, r3, #25
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	492f      	ldr	r1, [pc, #188]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088cc:	f7fa f8b0 	bl	8002a30 <HAL_GetTick>
 80088d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088d2:	e008      	b.n	80088e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088d4:	f7fa f8ac 	bl	8002a30 <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e2fe      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088e6:	4b27      	ldr	r3, [pc, #156]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0304 	and.w	r3, r3, #4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f0      	beq.n	80088d4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f2:	4b24      	ldr	r3, [pc, #144]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	061b      	lsls	r3, r3, #24
 8008900:	4920      	ldr	r1, [pc, #128]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008902:	4313      	orrs	r3, r2
 8008904:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008906:	e045      	b.n	8008994 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d026      	beq.n	800895e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008910:	4b1c      	ldr	r3, [pc, #112]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f023 0219 	bic.w	r2, r3, #25
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	4919      	ldr	r1, [pc, #100]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 800891e:	4313      	orrs	r3, r2
 8008920:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008922:	f7fa f885 	bl	8002a30 <HAL_GetTick>
 8008926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008928:	e008      	b.n	800893c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800892a:	f7fa f881 	bl	8002a30 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e2d3      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800893c:	4b11      	ldr	r3, [pc, #68]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0f0      	beq.n	800892a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008948:	4b0e      	ldr	r3, [pc, #56]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	061b      	lsls	r3, r3, #24
 8008956:	490b      	ldr	r1, [pc, #44]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008958:	4313      	orrs	r3, r2
 800895a:	604b      	str	r3, [r1, #4]
 800895c:	e01a      	b.n	8008994 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800895e:	4b09      	ldr	r3, [pc, #36]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a08      	ldr	r2, [pc, #32]	@ (8008984 <HAL_RCC_OscConfig+0x244>)
 8008964:	f023 0301 	bic.w	r3, r3, #1
 8008968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896a:	f7fa f861 	bl	8002a30 <HAL_GetTick>
 800896e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008970:	e00a      	b.n	8008988 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008972:	f7fa f85d 	bl	8002a30 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	2b02      	cmp	r3, #2
 800897e:	d903      	bls.n	8008988 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e2af      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
 8008984:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008988:	4b96      	ldr	r3, [pc, #600]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0304 	and.w	r3, r3, #4
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1ee      	bne.n	8008972 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	d06a      	beq.n	8008a76 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089a0:	4b90      	ldr	r3, [pc, #576]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089a8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089aa:	4b8e      	ldr	r3, [pc, #568]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 80089ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ae:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d007      	beq.n	80089c6 <HAL_RCC_OscConfig+0x286>
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b18      	cmp	r3, #24
 80089ba:	d11b      	bne.n	80089f4 <HAL_RCC_OscConfig+0x2b4>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d116      	bne.n	80089f4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089c6:	4b87      	ldr	r3, [pc, #540]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <HAL_RCC_OscConfig+0x29e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	2b80      	cmp	r3, #128	@ 0x80
 80089d8:	d001      	beq.n	80089de <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e282      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089de:	4b81      	ldr	r3, [pc, #516]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	061b      	lsls	r3, r3, #24
 80089ec:	497d      	ldr	r1, [pc, #500]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089f2:	e040      	b.n	8008a76 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d023      	beq.n	8008a44 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80089fc:	4b79      	ldr	r3, [pc, #484]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a78      	ldr	r2, [pc, #480]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a08:	f7fa f812 	bl	8002a30 <HAL_GetTick>
 8008a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a0e:	e008      	b.n	8008a22 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a10:	f7fa f80e 	bl	8002a30 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d901      	bls.n	8008a22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e260      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a22:	4b70      	ldr	r3, [pc, #448]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0f0      	beq.n	8008a10 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	061b      	lsls	r3, r3, #24
 8008a3c:	4969      	ldr	r1, [pc, #420]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60cb      	str	r3, [r1, #12]
 8008a42:	e018      	b.n	8008a76 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a44:	4b67      	ldr	r3, [pc, #412]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a66      	ldr	r2, [pc, #408]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a50:	f7f9 ffee 	bl	8002a30 <HAL_GetTick>
 8008a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a56:	e008      	b.n	8008a6a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a58:	f7f9 ffea 	bl	8002a30 <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d901      	bls.n	8008a6a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e23c      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1f0      	bne.n	8008a58 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0308 	and.w	r3, r3, #8
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d036      	beq.n	8008af0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d019      	beq.n	8008abe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a8a:	4b56      	ldr	r3, [pc, #344]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a8e:	4a55      	ldr	r2, [pc, #340]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008a90:	f043 0301 	orr.w	r3, r3, #1
 8008a94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a96:	f7f9 ffcb 	bl	8002a30 <HAL_GetTick>
 8008a9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a9c:	e008      	b.n	8008ab0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a9e:	f7f9 ffc7 	bl	8002a30 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d901      	bls.n	8008ab0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e219      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0f0      	beq.n	8008a9e <HAL_RCC_OscConfig+0x35e>
 8008abc:	e018      	b.n	8008af0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008abe:	4b49      	ldr	r3, [pc, #292]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac2:	4a48      	ldr	r2, [pc, #288]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008ac4:	f023 0301 	bic.w	r3, r3, #1
 8008ac8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aca:	f7f9 ffb1 	bl	8002a30 <HAL_GetTick>
 8008ace:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ad0:	e008      	b.n	8008ae4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ad2:	f7f9 ffad 	bl	8002a30 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d901      	bls.n	8008ae4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e1ff      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1f0      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0320 	and.w	r3, r3, #32
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d036      	beq.n	8008b6a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d019      	beq.n	8008b38 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b04:	4b37      	ldr	r3, [pc, #220]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a36      	ldr	r2, [pc, #216]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008b0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008b0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b10:	f7f9 ff8e 	bl	8002a30 <HAL_GetTick>
 8008b14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b16:	e008      	b.n	8008b2a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b18:	f7f9 ff8a 	bl	8002a30 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e1dc      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0f0      	beq.n	8008b18 <HAL_RCC_OscConfig+0x3d8>
 8008b36:	e018      	b.n	8008b6a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b38:	4b2a      	ldr	r3, [pc, #168]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a29      	ldr	r2, [pc, #164]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b44:	f7f9 ff74 	bl	8002a30 <HAL_GetTick>
 8008b48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b4c:	f7f9 ff70 	bl	8002a30 <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e1c2      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b5e:	4b21      	ldr	r3, [pc, #132]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f0      	bne.n	8008b4c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 8086 	beq.w	8008c84 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b78:	4b1b      	ldr	r3, [pc, #108]	@ (8008be8 <HAL_RCC_OscConfig+0x4a8>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8008be8 <HAL_RCC_OscConfig+0x4a8>)
 8008b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b84:	f7f9 ff54 	bl	8002a30 <HAL_GetTick>
 8008b88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b8c:	f7f9 ff50 	bl	8002a30 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b64      	cmp	r3, #100	@ 0x64
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e1a2      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b9e:	4b12      	ldr	r3, [pc, #72]	@ (8008be8 <HAL_RCC_OscConfig+0x4a8>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0f0      	beq.n	8008b8c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d106      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x480>
 8008bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008bb8:	f043 0301 	orr.w	r3, r3, #1
 8008bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bbe:	e032      	b.n	8008c26 <HAL_RCC_OscConfig+0x4e6>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d111      	bne.n	8008bec <HAL_RCC_OscConfig+0x4ac>
 8008bc8:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bcc:	4a05      	ldr	r2, [pc, #20]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008bce:	f023 0301 	bic.w	r3, r3, #1
 8008bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bd4:	4b03      	ldr	r3, [pc, #12]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd8:	4a02      	ldr	r2, [pc, #8]	@ (8008be4 <HAL_RCC_OscConfig+0x4a4>)
 8008bda:	f023 0304 	bic.w	r3, r3, #4
 8008bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8008be0:	e021      	b.n	8008c26 <HAL_RCC_OscConfig+0x4e6>
 8008be2:	bf00      	nop
 8008be4:	58024400 	.word	0x58024400
 8008be8:	58024800 	.word	0x58024800
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	2b05      	cmp	r3, #5
 8008bf2:	d10c      	bne.n	8008c0e <HAL_RCC_OscConfig+0x4ce>
 8008bf4:	4b83      	ldr	r3, [pc, #524]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf8:	4a82      	ldr	r2, [pc, #520]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008bfa:	f043 0304 	orr.w	r3, r3, #4
 8008bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c00:	4b80      	ldr	r3, [pc, #512]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c04:	4a7f      	ldr	r2, [pc, #508]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008c06:	f043 0301 	orr.w	r3, r3, #1
 8008c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c0c:	e00b      	b.n	8008c26 <HAL_RCC_OscConfig+0x4e6>
 8008c0e:	4b7d      	ldr	r3, [pc, #500]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c12:	4a7c      	ldr	r2, [pc, #496]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008c14:	f023 0301 	bic.w	r3, r3, #1
 8008c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c1a:	4b7a      	ldr	r3, [pc, #488]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c1e:	4a79      	ldr	r2, [pc, #484]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008c20:	f023 0304 	bic.w	r3, r3, #4
 8008c24:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d015      	beq.n	8008c5a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c2e:	f7f9 feff 	bl	8002a30 <HAL_GetTick>
 8008c32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c34:	e00a      	b.n	8008c4c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c36:	f7f9 fefb 	bl	8002a30 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d901      	bls.n	8008c4c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e14b      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c4c:	4b6d      	ldr	r3, [pc, #436]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0ee      	beq.n	8008c36 <HAL_RCC_OscConfig+0x4f6>
 8008c58:	e014      	b.n	8008c84 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c5a:	f7f9 fee9 	bl	8002a30 <HAL_GetTick>
 8008c5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c60:	e00a      	b.n	8008c78 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c62:	f7f9 fee5 	bl	8002a30 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d901      	bls.n	8008c78 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e135      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c78:	4b62      	ldr	r3, [pc, #392]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1ee      	bne.n	8008c62 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 812a 	beq.w	8008ee2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c96:	2b18      	cmp	r3, #24
 8008c98:	f000 80ba 	beq.w	8008e10 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	f040 8095 	bne.w	8008dd0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ca6:	4b57      	ldr	r3, [pc, #348]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a56      	ldr	r2, [pc, #344]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008cac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb2:	f7f9 febd 	bl	8002a30 <HAL_GetTick>
 8008cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cb8:	e008      	b.n	8008ccc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cba:	f7f9 feb9 	bl	8002a30 <HAL_GetTick>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d901      	bls.n	8008ccc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e10b      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1f0      	bne.n	8008cba <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008cda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8008e08 <HAL_RCC_OscConfig+0x6c8>)
 8008cde:	4013      	ands	r3, r2
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008ce8:	0112      	lsls	r2, r2, #4
 8008cea:	430a      	orrs	r2, r1
 8008cec:	4945      	ldr	r1, [pc, #276]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	628b      	str	r3, [r1, #40]	@ 0x28
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d00:	3b01      	subs	r3, #1
 8008d02:	025b      	lsls	r3, r3, #9
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	431a      	orrs	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	041b      	lsls	r3, r3, #16
 8008d10:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d14:	431a      	orrs	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	061b      	lsls	r3, r3, #24
 8008d1e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d22:	4938      	ldr	r1, [pc, #224]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d28:	4b36      	ldr	r3, [pc, #216]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2c:	4a35      	ldr	r2, [pc, #212]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d2e:	f023 0301 	bic.w	r3, r3, #1
 8008d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d34:	4b33      	ldr	r3, [pc, #204]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d38:	4b34      	ldr	r3, [pc, #208]	@ (8008e0c <HAL_RCC_OscConfig+0x6cc>)
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008d40:	00d2      	lsls	r2, r2, #3
 8008d42:	4930      	ldr	r1, [pc, #192]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d48:	4b2e      	ldr	r3, [pc, #184]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4c:	f023 020c 	bic.w	r2, r3, #12
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d54:	492b      	ldr	r1, [pc, #172]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5e:	f023 0202 	bic.w	r2, r3, #2
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d66:	4927      	ldr	r1, [pc, #156]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d6c:	4b25      	ldr	r3, [pc, #148]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d70:	4a24      	ldr	r2, [pc, #144]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d78:	4b22      	ldr	r3, [pc, #136]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7c:	4a21      	ldr	r2, [pc, #132]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d84:	4b1f      	ldr	r3, [pc, #124]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	4a1e      	ldr	r2, [pc, #120]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d90:	4b1c      	ldr	r3, [pc, #112]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d94:	4a1b      	ldr	r2, [pc, #108]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d96:	f043 0301 	orr.w	r3, r3, #1
 8008d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d9c:	4b19      	ldr	r3, [pc, #100]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a18      	ldr	r2, [pc, #96]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da8:	f7f9 fe42 	bl	8002a30 <HAL_GetTick>
 8008dac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dae:	e008      	b.n	8008dc2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db0:	f7f9 fe3e 	bl	8002a30 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d901      	bls.n	8008dc2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e090      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dc2:	4b10      	ldr	r3, [pc, #64]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0f0      	beq.n	8008db0 <HAL_RCC_OscConfig+0x670>
 8008dce:	e088      	b.n	8008ee2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ddc:	f7f9 fe28 	bl	8002a30 <HAL_GetTick>
 8008de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008de2:	e008      	b.n	8008df6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008de4:	f7f9 fe24 	bl	8002a30 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d901      	bls.n	8008df6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e076      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008df6:	4b03      	ldr	r3, [pc, #12]	@ (8008e04 <HAL_RCC_OscConfig+0x6c4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1f0      	bne.n	8008de4 <HAL_RCC_OscConfig+0x6a4>
 8008e02:	e06e      	b.n	8008ee2 <HAL_RCC_OscConfig+0x7a2>
 8008e04:	58024400 	.word	0x58024400
 8008e08:	fffffc0c 	.word	0xfffffc0c
 8008e0c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e10:	4b36      	ldr	r3, [pc, #216]	@ (8008eec <HAL_RCC_OscConfig+0x7ac>)
 8008e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e16:	4b35      	ldr	r3, [pc, #212]	@ (8008eec <HAL_RCC_OscConfig+0x7ac>)
 8008e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d031      	beq.n	8008e88 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f003 0203 	and.w	r2, r3, #3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d12a      	bne.n	8008e88 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	091b      	lsrs	r3, r3, #4
 8008e36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d122      	bne.n	8008e88 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d11a      	bne.n	8008e88 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	0a5b      	lsrs	r3, r3, #9
 8008e56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d111      	bne.n	8008e88 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	0c1b      	lsrs	r3, r3, #16
 8008e68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d108      	bne.n	8008e88 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	0e1b      	lsrs	r3, r3, #24
 8008e7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d001      	beq.n	8008e8c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e02b      	b.n	8008ee4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e8c:	4b17      	ldr	r3, [pc, #92]	@ (8008eec <HAL_RCC_OscConfig+0x7ac>)
 8008e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e90:	08db      	lsrs	r3, r3, #3
 8008e92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d01f      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008ea2:	4b12      	ldr	r3, [pc, #72]	@ (8008eec <HAL_RCC_OscConfig+0x7ac>)
 8008ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea6:	4a11      	ldr	r2, [pc, #68]	@ (8008eec <HAL_RCC_OscConfig+0x7ac>)
 8008ea8:	f023 0301 	bic.w	r3, r3, #1
 8008eac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008eae:	f7f9 fdbf 	bl	8002a30 <HAL_GetTick>
 8008eb2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008eb4:	bf00      	nop
 8008eb6:	f7f9 fdbb 	bl	8002a30 <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d0f9      	beq.n	8008eb6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8008eec <HAL_RCC_OscConfig+0x7ac>)
 8008ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef0 <HAL_RCC_OscConfig+0x7b0>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008ece:	00d2      	lsls	r2, r2, #3
 8008ed0:	4906      	ldr	r1, [pc, #24]	@ (8008eec <HAL_RCC_OscConfig+0x7ac>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008ed6:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <HAL_RCC_OscConfig+0x7ac>)
 8008ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eda:	4a04      	ldr	r2, [pc, #16]	@ (8008eec <HAL_RCC_OscConfig+0x7ac>)
 8008edc:	f043 0301 	orr.w	r3, r3, #1
 8008ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3730      	adds	r7, #48	@ 0x30
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	58024400 	.word	0x58024400
 8008ef0:	ffff0007 	.word	0xffff0007

08008ef4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e19c      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f08:	4b8a      	ldr	r3, [pc, #552]	@ (8009134 <HAL_RCC_ClockConfig+0x240>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d910      	bls.n	8008f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f16:	4b87      	ldr	r3, [pc, #540]	@ (8009134 <HAL_RCC_ClockConfig+0x240>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f023 020f 	bic.w	r2, r3, #15
 8008f1e:	4985      	ldr	r1, [pc, #532]	@ (8009134 <HAL_RCC_ClockConfig+0x240>)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f26:	4b83      	ldr	r3, [pc, #524]	@ (8009134 <HAL_RCC_ClockConfig+0x240>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d001      	beq.n	8008f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e184      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d010      	beq.n	8008f66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	4b7b      	ldr	r3, [pc, #492]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d908      	bls.n	8008f66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f54:	4b78      	ldr	r3, [pc, #480]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	4975      	ldr	r1, [pc, #468]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0308 	and.w	r3, r3, #8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d010      	beq.n	8008f94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	695a      	ldr	r2, [r3, #20]
 8008f76:	4b70      	ldr	r3, [pc, #448]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d908      	bls.n	8008f94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f82:	4b6d      	ldr	r3, [pc, #436]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	496a      	ldr	r1, [pc, #424]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d010      	beq.n	8008fc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	4b64      	ldr	r3, [pc, #400]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d908      	bls.n	8008fc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fb0:	4b61      	ldr	r3, [pc, #388]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	495e      	ldr	r1, [pc, #376]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d010      	beq.n	8008ff0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	69da      	ldr	r2, [r3, #28]
 8008fd2:	4b59      	ldr	r3, [pc, #356]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d908      	bls.n	8008ff0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008fde:	4b56      	ldr	r3, [pc, #344]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	4953      	ldr	r1, [pc, #332]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d010      	beq.n	800901e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	4b4d      	ldr	r3, [pc, #308]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	429a      	cmp	r2, r3
 800900a:	d908      	bls.n	800901e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800900c:	4b4a      	ldr	r3, [pc, #296]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	f023 020f 	bic.w	r2, r3, #15
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	4947      	ldr	r1, [pc, #284]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 800901a:	4313      	orrs	r3, r2
 800901c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d055      	beq.n	80090d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800902a:	4b43      	ldr	r3, [pc, #268]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	4940      	ldr	r1, [pc, #256]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009038:	4313      	orrs	r3, r2
 800903a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d107      	bne.n	8009054 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009044:	4b3c      	ldr	r3, [pc, #240]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d121      	bne.n	8009094 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e0f6      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2b03      	cmp	r3, #3
 800905a:	d107      	bne.n	800906c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800905c:	4b36      	ldr	r3, [pc, #216]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d115      	bne.n	8009094 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e0ea      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d107      	bne.n	8009084 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009074:	4b30      	ldr	r3, [pc, #192]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800907c:	2b00      	cmp	r3, #0
 800907e:	d109      	bne.n	8009094 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e0de      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009084:	4b2c      	ldr	r3, [pc, #176]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e0d6      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009094:	4b28      	ldr	r3, [pc, #160]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	f023 0207 	bic.w	r2, r3, #7
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	4925      	ldr	r1, [pc, #148]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090a6:	f7f9 fcc3 	bl	8002a30 <HAL_GetTick>
 80090aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ac:	e00a      	b.n	80090c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ae:	f7f9 fcbf 	bl	8002a30 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090bc:	4293      	cmp	r3, r2
 80090be:	d901      	bls.n	80090c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e0be      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d1eb      	bne.n	80090ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d010      	beq.n	8009104 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	4b14      	ldr	r3, [pc, #80]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d208      	bcs.n	8009104 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090f2:	4b11      	ldr	r3, [pc, #68]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	f023 020f 	bic.w	r2, r3, #15
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	490e      	ldr	r1, [pc, #56]	@ (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009100:	4313      	orrs	r3, r2
 8009102:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009104:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <HAL_RCC_ClockConfig+0x240>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 030f 	and.w	r3, r3, #15
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d214      	bcs.n	800913c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009112:	4b08      	ldr	r3, [pc, #32]	@ (8009134 <HAL_RCC_ClockConfig+0x240>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f023 020f 	bic.w	r2, r3, #15
 800911a:	4906      	ldr	r1, [pc, #24]	@ (8009134 <HAL_RCC_ClockConfig+0x240>)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	4313      	orrs	r3, r2
 8009120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009122:	4b04      	ldr	r3, [pc, #16]	@ (8009134 <HAL_RCC_ClockConfig+0x240>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d005      	beq.n	800913c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e086      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
 8009134:	52002000 	.word	0x52002000
 8009138:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d010      	beq.n	800916a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691a      	ldr	r2, [r3, #16]
 800914c:	4b3f      	ldr	r3, [pc, #252]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009154:	429a      	cmp	r2, r3
 8009156:	d208      	bcs.n	800916a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009158:	4b3c      	ldr	r3, [pc, #240]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	4939      	ldr	r1, [pc, #228]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 8009166:	4313      	orrs	r3, r2
 8009168:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d010      	beq.n	8009198 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	695a      	ldr	r2, [r3, #20]
 800917a:	4b34      	ldr	r3, [pc, #208]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009182:	429a      	cmp	r2, r3
 8009184:	d208      	bcs.n	8009198 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009186:	4b31      	ldr	r3, [pc, #196]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	492e      	ldr	r1, [pc, #184]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 8009194:	4313      	orrs	r3, r2
 8009196:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0310 	and.w	r3, r3, #16
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d010      	beq.n	80091c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699a      	ldr	r2, [r3, #24]
 80091a8:	4b28      	ldr	r3, [pc, #160]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d208      	bcs.n	80091c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091b4:	4b25      	ldr	r3, [pc, #148]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	4922      	ldr	r1, [pc, #136]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d010      	beq.n	80091f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	69da      	ldr	r2, [r3, #28]
 80091d6:	4b1d      	ldr	r3, [pc, #116]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091de:	429a      	cmp	r2, r3
 80091e0:	d208      	bcs.n	80091f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091e2:	4b1a      	ldr	r3, [pc, #104]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	4917      	ldr	r1, [pc, #92]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80091f4:	f000 f834 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 80091f8:	4602      	mov	r2, r0
 80091fa:	4b14      	ldr	r3, [pc, #80]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	4912      	ldr	r1, [pc, #72]	@ (8009250 <HAL_RCC_ClockConfig+0x35c>)
 8009206:	5ccb      	ldrb	r3, [r1, r3]
 8009208:	f003 031f 	and.w	r3, r3, #31
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
 8009210:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009212:	4b0e      	ldr	r3, [pc, #56]	@ (800924c <HAL_RCC_ClockConfig+0x358>)
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	4a0d      	ldr	r2, [pc, #52]	@ (8009250 <HAL_RCC_ClockConfig+0x35c>)
 800921c:	5cd3      	ldrb	r3, [r2, r3]
 800921e:	f003 031f 	and.w	r3, r3, #31
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
 8009228:	4a0a      	ldr	r2, [pc, #40]	@ (8009254 <HAL_RCC_ClockConfig+0x360>)
 800922a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800922c:	4a0a      	ldr	r2, [pc, #40]	@ (8009258 <HAL_RCC_ClockConfig+0x364>)
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009232:	4b0a      	ldr	r3, [pc, #40]	@ (800925c <HAL_RCC_ClockConfig+0x368>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4618      	mov	r0, r3
 8009238:	f7f9 fbb0 	bl	800299c <HAL_InitTick>
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	58024400 	.word	0x58024400
 8009250:	08011c5c 	.word	0x08011c5c
 8009254:	24000010 	.word	0x24000010
 8009258:	2400000c 	.word	0x2400000c
 800925c:	24000014 	.word	0x24000014

08009260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009260:	b480      	push	{r7}
 8009262:	b089      	sub	sp, #36	@ 0x24
 8009264:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009266:	4bb3      	ldr	r3, [pc, #716]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800926e:	2b18      	cmp	r3, #24
 8009270:	f200 8155 	bhi.w	800951e <HAL_RCC_GetSysClockFreq+0x2be>
 8009274:	a201      	add	r2, pc, #4	@ (adr r2, 800927c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	080092e1 	.word	0x080092e1
 8009280:	0800951f 	.word	0x0800951f
 8009284:	0800951f 	.word	0x0800951f
 8009288:	0800951f 	.word	0x0800951f
 800928c:	0800951f 	.word	0x0800951f
 8009290:	0800951f 	.word	0x0800951f
 8009294:	0800951f 	.word	0x0800951f
 8009298:	0800951f 	.word	0x0800951f
 800929c:	08009307 	.word	0x08009307
 80092a0:	0800951f 	.word	0x0800951f
 80092a4:	0800951f 	.word	0x0800951f
 80092a8:	0800951f 	.word	0x0800951f
 80092ac:	0800951f 	.word	0x0800951f
 80092b0:	0800951f 	.word	0x0800951f
 80092b4:	0800951f 	.word	0x0800951f
 80092b8:	0800951f 	.word	0x0800951f
 80092bc:	0800930d 	.word	0x0800930d
 80092c0:	0800951f 	.word	0x0800951f
 80092c4:	0800951f 	.word	0x0800951f
 80092c8:	0800951f 	.word	0x0800951f
 80092cc:	0800951f 	.word	0x0800951f
 80092d0:	0800951f 	.word	0x0800951f
 80092d4:	0800951f 	.word	0x0800951f
 80092d8:	0800951f 	.word	0x0800951f
 80092dc:	08009313 	.word	0x08009313
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092e0:	4b94      	ldr	r3, [pc, #592]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0320 	and.w	r3, r3, #32
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d009      	beq.n	8009300 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092ec:	4b91      	ldr	r3, [pc, #580]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	08db      	lsrs	r3, r3, #3
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	4a90      	ldr	r2, [pc, #576]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092f8:	fa22 f303 	lsr.w	r3, r2, r3
 80092fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80092fe:	e111      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009300:	4b8d      	ldr	r3, [pc, #564]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009302:	61bb      	str	r3, [r7, #24]
      break;
 8009304:	e10e      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009306:	4b8d      	ldr	r3, [pc, #564]	@ (800953c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009308:	61bb      	str	r3, [r7, #24]
      break;
 800930a:	e10b      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800930c:	4b8c      	ldr	r3, [pc, #560]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800930e:	61bb      	str	r3, [r7, #24]
      break;
 8009310:	e108      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009312:	4b88      	ldr	r3, [pc, #544]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800931c:	4b85      	ldr	r3, [pc, #532]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800931e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009320:	091b      	lsrs	r3, r3, #4
 8009322:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009326:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009328:	4b82      	ldr	r3, [pc, #520]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009332:	4b80      	ldr	r3, [pc, #512]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009336:	08db      	lsrs	r3, r3, #3
 8009338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	fb02 f303 	mul.w	r3, r2, r3
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 80e1 	beq.w	8009518 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b02      	cmp	r3, #2
 800935a:	f000 8083 	beq.w	8009464 <HAL_RCC_GetSysClockFreq+0x204>
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b02      	cmp	r3, #2
 8009362:	f200 80a1 	bhi.w	80094a8 <HAL_RCC_GetSysClockFreq+0x248>
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <HAL_RCC_GetSysClockFreq+0x114>
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d056      	beq.n	8009420 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009372:	e099      	b.n	80094a8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009374:	4b6f      	ldr	r3, [pc, #444]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b00      	cmp	r3, #0
 800937e:	d02d      	beq.n	80093dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009380:	4b6c      	ldr	r3, [pc, #432]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	08db      	lsrs	r3, r3, #3
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	4a6b      	ldr	r2, [pc, #428]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800938c:	fa22 f303 	lsr.w	r3, r2, r3
 8009390:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	ee07 3a90 	vmov	s15, r3
 8009398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093aa:	4b62      	ldr	r3, [pc, #392]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80093be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80093da:	e087      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009548 <HAL_RCC_GetSysClockFreq+0x2e8>
 80093ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ee:	4b51      	ldr	r3, [pc, #324]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009402:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800941e:	e065      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800954c <HAL_RCC_GetSysClockFreq+0x2ec>
 800942e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009432:	4b40      	ldr	r3, [pc, #256]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009442:	ed97 6a02 	vldr	s12, [r7, #8]
 8009446:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800944a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009462:	e043      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009550 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009476:	4b2f      	ldr	r3, [pc, #188]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009486:	ed97 6a02 	vldr	s12, [r7, #8]
 800948a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800948e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800949a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094a6:	e021      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800954c <HAL_RCC_GetSysClockFreq+0x2ec>
 80094b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80094ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80094ec:	4b11      	ldr	r3, [pc, #68]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f0:	0a5b      	lsrs	r3, r3, #9
 80094f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f6:	3301      	adds	r3, #1
 80094f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	ee07 3a90 	vmov	s15, r3
 8009500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009504:	edd7 6a07 	vldr	s13, [r7, #28]
 8009508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800950c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009510:	ee17 3a90 	vmov	r3, s15
 8009514:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009516:	e005      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	61bb      	str	r3, [r7, #24]
      break;
 800951c:	e002      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800951e:	4b07      	ldr	r3, [pc, #28]	@ (800953c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009520:	61bb      	str	r3, [r7, #24]
      break;
 8009522:	bf00      	nop
  }

  return sysclockfreq;
 8009524:	69bb      	ldr	r3, [r7, #24]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3724      	adds	r7, #36	@ 0x24
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	58024400 	.word	0x58024400
 8009538:	03d09000 	.word	0x03d09000
 800953c:	003d0900 	.word	0x003d0900
 8009540:	016e3600 	.word	0x016e3600
 8009544:	46000000 	.word	0x46000000
 8009548:	4c742400 	.word	0x4c742400
 800954c:	4a742400 	.word	0x4a742400
 8009550:	4bb71b00 	.word	0x4bb71b00

08009554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800955a:	f7ff fe81 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 800955e:	4602      	mov	r2, r0
 8009560:	4b10      	ldr	r3, [pc, #64]	@ (80095a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	0a1b      	lsrs	r3, r3, #8
 8009566:	f003 030f 	and.w	r3, r3, #15
 800956a:	490f      	ldr	r1, [pc, #60]	@ (80095a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800956c:	5ccb      	ldrb	r3, [r1, r3]
 800956e:	f003 031f 	and.w	r3, r3, #31
 8009572:	fa22 f303 	lsr.w	r3, r2, r3
 8009576:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009578:	4b0a      	ldr	r3, [pc, #40]	@ (80095a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	f003 030f 	and.w	r3, r3, #15
 8009580:	4a09      	ldr	r2, [pc, #36]	@ (80095a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009582:	5cd3      	ldrb	r3, [r2, r3]
 8009584:	f003 031f 	and.w	r3, r3, #31
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	fa22 f303 	lsr.w	r3, r2, r3
 800958e:	4a07      	ldr	r2, [pc, #28]	@ (80095ac <HAL_RCC_GetHCLKFreq+0x58>)
 8009590:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009592:	4a07      	ldr	r2, [pc, #28]	@ (80095b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009598:	4b04      	ldr	r3, [pc, #16]	@ (80095ac <HAL_RCC_GetHCLKFreq+0x58>)
 800959a:	681b      	ldr	r3, [r3, #0]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	58024400 	.word	0x58024400
 80095a8:	08011c5c 	.word	0x08011c5c
 80095ac:	24000010 	.word	0x24000010
 80095b0:	2400000c 	.word	0x2400000c

080095b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095b8:	f7ff ffcc 	bl	8009554 <HAL_RCC_GetHCLKFreq>
 80095bc:	4602      	mov	r2, r0
 80095be:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	091b      	lsrs	r3, r3, #4
 80095c4:	f003 0307 	and.w	r3, r3, #7
 80095c8:	4904      	ldr	r1, [pc, #16]	@ (80095dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80095ca:	5ccb      	ldrb	r3, [r1, r3]
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	58024400 	.word	0x58024400
 80095dc:	08011c5c 	.word	0x08011c5c

080095e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095e4:	f7ff ffb6 	bl	8009554 <HAL_RCC_GetHCLKFreq>
 80095e8:	4602      	mov	r2, r0
 80095ea:	4b06      	ldr	r3, [pc, #24]	@ (8009604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	4904      	ldr	r1, [pc, #16]	@ (8009608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80095f6:	5ccb      	ldrb	r3, [r1, r3]
 80095f8:	f003 031f 	and.w	r3, r3, #31
 80095fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009600:	4618      	mov	r0, r3
 8009602:	bd80      	pop	{r7, pc}
 8009604:	58024400 	.word	0x58024400
 8009608:	08011c5c 	.word	0x08011c5c

0800960c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800960c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009610:	b0c6      	sub	sp, #280	@ 0x118
 8009612:	af00      	add	r7, sp, #0
 8009614:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009618:	2300      	movs	r3, #0
 800961a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800961e:	2300      	movs	r3, #0
 8009620:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009630:	2500      	movs	r5, #0
 8009632:	ea54 0305 	orrs.w	r3, r4, r5
 8009636:	d049      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800963c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800963e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009642:	d02f      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009644:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009648:	d828      	bhi.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800964a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800964e:	d01a      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009650:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009654:	d822      	bhi.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800965a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800965e:	d007      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009660:	e01c      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009662:	4bab      	ldr	r3, [pc, #684]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009666:	4aaa      	ldr	r2, [pc, #680]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800966c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800966e:	e01a      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009674:	3308      	adds	r3, #8
 8009676:	2102      	movs	r1, #2
 8009678:	4618      	mov	r0, r3
 800967a:	f002 fa49 	bl	800bb10 <RCCEx_PLL2_Config>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009684:	e00f      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800968a:	3328      	adds	r3, #40	@ 0x28
 800968c:	2102      	movs	r1, #2
 800968e:	4618      	mov	r0, r3
 8009690:	f002 faf0 	bl	800bc74 <RCCEx_PLL3_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800969a:	e004      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096a2:	e000      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80096a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80096ae:	4b98      	ldr	r3, [pc, #608]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80096b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096bc:	4a94      	ldr	r2, [pc, #592]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096be:	430b      	orrs	r3, r1
 80096c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80096c2:	e003      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80096d8:	f04f 0900 	mov.w	r9, #0
 80096dc:	ea58 0309 	orrs.w	r3, r8, r9
 80096e0:	d047      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80096e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d82a      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80096ec:	a201      	add	r2, pc, #4	@ (adr r2, 80096f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80096ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f2:	bf00      	nop
 80096f4:	08009709 	.word	0x08009709
 80096f8:	08009717 	.word	0x08009717
 80096fc:	0800972d 	.word	0x0800972d
 8009700:	0800974b 	.word	0x0800974b
 8009704:	0800974b 	.word	0x0800974b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009708:	4b81      	ldr	r3, [pc, #516]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800970a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970c:	4a80      	ldr	r2, [pc, #512]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800970e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009714:	e01a      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971a:	3308      	adds	r3, #8
 800971c:	2100      	movs	r1, #0
 800971e:	4618      	mov	r0, r3
 8009720:	f002 f9f6 	bl	800bb10 <RCCEx_PLL2_Config>
 8009724:	4603      	mov	r3, r0
 8009726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800972a:	e00f      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800972c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009730:	3328      	adds	r3, #40	@ 0x28
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f002 fa9d 	bl	800bc74 <RCCEx_PLL3_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009740:	e004      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009748:	e000      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800974a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800974c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10a      	bne.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009754:	4b6e      	ldr	r3, [pc, #440]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009758:	f023 0107 	bic.w	r1, r3, #7
 800975c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009762:	4a6b      	ldr	r2, [pc, #428]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009764:	430b      	orrs	r3, r1
 8009766:	6513      	str	r3, [r2, #80]	@ 0x50
 8009768:	e003      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800976e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800977e:	f04f 0b00 	mov.w	fp, #0
 8009782:	ea5a 030b 	orrs.w	r3, sl, fp
 8009786:	d05b      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009790:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009794:	d03b      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009796:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800979a:	d834      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800979c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097a0:	d037      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80097a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097a6:	d82e      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097ac:	d033      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80097ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097b2:	d828      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097b8:	d01a      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80097ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097be:	d822      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80097c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097c8:	d007      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80097ca:	e01c      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097cc:	4b50      	ldr	r3, [pc, #320]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d0:	4a4f      	ldr	r2, [pc, #316]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097d8:	e01e      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097de:	3308      	adds	r3, #8
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f002 f994 	bl	800bb10 <RCCEx_PLL2_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80097ee:	e013      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f4:	3328      	adds	r3, #40	@ 0x28
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f002 fa3b 	bl	800bc74 <RCCEx_PLL3_Config>
 80097fe:	4603      	mov	r3, r0
 8009800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009804:	e008      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800980c:	e004      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800980e:	bf00      	nop
 8009810:	e002      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10b      	bne.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009820:	4b3b      	ldr	r3, [pc, #236]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009824:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800982c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009830:	4a37      	ldr	r2, [pc, #220]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009832:	430b      	orrs	r3, r1
 8009834:	6593      	str	r3, [r2, #88]	@ 0x58
 8009836:	e003      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800983c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800984c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009850:	2300      	movs	r3, #0
 8009852:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009856:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800985a:	460b      	mov	r3, r1
 800985c:	4313      	orrs	r3, r2
 800985e:	d05d      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009864:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009868:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800986c:	d03b      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800986e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009872:	d834      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009874:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009878:	d037      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800987a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800987e:	d82e      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009880:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009884:	d033      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009886:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800988a:	d828      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800988c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009890:	d01a      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009896:	d822      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800989c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098a0:	d007      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80098a2:	e01c      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a8:	4a19      	ldr	r2, [pc, #100]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098b0:	e01e      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b6:	3308      	adds	r3, #8
 80098b8:	2100      	movs	r1, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f002 f928 	bl	800bb10 <RCCEx_PLL2_Config>
 80098c0:	4603      	mov	r3, r0
 80098c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80098c6:	e013      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098cc:	3328      	adds	r3, #40	@ 0x28
 80098ce:	2100      	movs	r1, #0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f002 f9cf 	bl	800bc74 <RCCEx_PLL3_Config>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098dc:	e008      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098e4:	e004      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098e6:	bf00      	nop
 80098e8:	e002      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098ea:	bf00      	nop
 80098ec:	e000      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10d      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80098f8:	4b05      	ldr	r3, [pc, #20]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009904:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009908:	4a01      	ldr	r2, [pc, #4]	@ (8009910 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800990a:	430b      	orrs	r3, r1
 800990c:	6593      	str	r3, [r2, #88]	@ 0x58
 800990e:	e005      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009918:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800991c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009928:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800992c:	2300      	movs	r3, #0
 800992e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009932:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009936:	460b      	mov	r3, r1
 8009938:	4313      	orrs	r3, r2
 800993a:	d03a      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800993c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009942:	2b30      	cmp	r3, #48	@ 0x30
 8009944:	d01f      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009946:	2b30      	cmp	r3, #48	@ 0x30
 8009948:	d819      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800994a:	2b20      	cmp	r3, #32
 800994c:	d00c      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800994e:	2b20      	cmp	r3, #32
 8009950:	d815      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d019      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009956:	2b10      	cmp	r3, #16
 8009958:	d111      	bne.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800995a:	4baa      	ldr	r3, [pc, #680]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800995c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995e:	4aa9      	ldr	r2, [pc, #676]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009964:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009966:	e011      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996c:	3308      	adds	r3, #8
 800996e:	2102      	movs	r1, #2
 8009970:	4618      	mov	r0, r3
 8009972:	f002 f8cd 	bl	800bb10 <RCCEx_PLL2_Config>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800997c:	e006      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009984:	e002      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009986:	bf00      	nop
 8009988:	e000      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800998a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800998c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009994:	4b9b      	ldr	r3, [pc, #620]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009998:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800999c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a2:	4a98      	ldr	r2, [pc, #608]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099a4:	430b      	orrs	r3, r1
 80099a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80099a8:	e003      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80099be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099c2:	2300      	movs	r3, #0
 80099c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80099c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80099cc:	460b      	mov	r3, r1
 80099ce:	4313      	orrs	r3, r2
 80099d0:	d051      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80099d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099dc:	d035      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80099de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099e2:	d82e      	bhi.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099e8:	d031      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80099ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099ee:	d828      	bhi.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099f4:	d01a      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80099f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099fa:	d822      	bhi.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d003      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a04:	d007      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009a06:	e01c      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a08:	4b7e      	ldr	r3, [pc, #504]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0c:	4a7d      	ldr	r2, [pc, #500]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a14:	e01c      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f002 f876 	bl	800bb10 <RCCEx_PLL2_Config>
 8009a24:	4603      	mov	r3, r0
 8009a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a2a:	e011      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a30:	3328      	adds	r3, #40	@ 0x28
 8009a32:	2100      	movs	r1, #0
 8009a34:	4618      	mov	r0, r3
 8009a36:	f002 f91d 	bl	800bc74 <RCCEx_PLL3_Config>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a40:	e006      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a48:	e002      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10a      	bne.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a58:	4b6a      	ldr	r3, [pc, #424]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a66:	4a67      	ldr	r2, [pc, #412]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a6c:	e003      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009a82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a86:	2300      	movs	r3, #0
 8009a88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a8c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4313      	orrs	r3, r2
 8009a94:	d053      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009aa0:	d033      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009aa2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009aa6:	d82c      	bhi.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009aa8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009aac:	d02f      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009aae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ab2:	d826      	bhi.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ab4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ab8:	d02b      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009aba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009abe:	d820      	bhi.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ac4:	d012      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009ac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aca:	d81a      	bhi.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d022      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ad4:	d115      	bne.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ada:	3308      	adds	r3, #8
 8009adc:	2101      	movs	r1, #1
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f002 f816 	bl	800bb10 <RCCEx_PLL2_Config>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009aea:	e015      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af0:	3328      	adds	r3, #40	@ 0x28
 8009af2:	2101      	movs	r1, #1
 8009af4:	4618      	mov	r0, r3
 8009af6:	f002 f8bd 	bl	800bc74 <RCCEx_PLL3_Config>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b00:	e00a      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b08:	e006      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b0a:	bf00      	nop
 8009b0c:	e004      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b0e:	bf00      	nop
 8009b10:	e002      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b12:	bf00      	nop
 8009b14:	e000      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10a      	bne.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b20:	4b38      	ldr	r3, [pc, #224]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b2e:	4a35      	ldr	r2, [pc, #212]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b30:	430b      	orrs	r3, r1
 8009b32:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b34:	e003      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b54:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	d058      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b6a:	d033      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b70:	d82c      	bhi.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b76:	d02f      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b7c:	d826      	bhi.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b82:	d02b      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009b84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b88:	d820      	bhi.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b8e:	d012      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b94:	d81a      	bhi.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d022      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009b9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b9e:	d115      	bne.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f001 ffb1 	bl	800bb10 <RCCEx_PLL2_Config>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bb4:	e015      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bba:	3328      	adds	r3, #40	@ 0x28
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f002 f858 	bl	800bc74 <RCCEx_PLL3_Config>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bca:	e00a      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bd2:	e006      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bd4:	bf00      	nop
 8009bd6:	e004      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bd8:	bf00      	nop
 8009bda:	e002      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bdc:	bf00      	nop
 8009bde:	e000      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009be2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10e      	bne.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bea:	4b06      	ldr	r3, [pc, #24]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009bfa:	4a02      	ldr	r2, [pc, #8]	@ (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c00:	e006      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009c02:	bf00      	nop
 8009c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c20:	2300      	movs	r3, #0
 8009c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009c26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	d037      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c3a:	d00e      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c40:	d816      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d018      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009c46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c4a:	d111      	bne.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c4c:	4bc4      	ldr	r3, [pc, #784]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c50:	4ac3      	ldr	r2, [pc, #780]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c58:	e00f      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c5e:	3308      	adds	r3, #8
 8009c60:	2101      	movs	r1, #1
 8009c62:	4618      	mov	r0, r3
 8009c64:	f001 ff54 	bl	800bb10 <RCCEx_PLL2_Config>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c6e:	e004      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c76:	e000      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c82:	4bb7      	ldr	r3, [pc, #732]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c90:	4ab3      	ldr	r2, [pc, #716]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c92:	430b      	orrs	r3, r1
 8009c94:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c96:	e003      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009cac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	d039      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d81c      	bhi.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009cca:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd0:	08009d0d 	.word	0x08009d0d
 8009cd4:	08009ce1 	.word	0x08009ce1
 8009cd8:	08009cef 	.word	0x08009cef
 8009cdc:	08009d0d 	.word	0x08009d0d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ce0:	4b9f      	ldr	r3, [pc, #636]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce4:	4a9e      	ldr	r2, [pc, #632]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cec:	e00f      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	2102      	movs	r1, #2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 ff0a 	bl	800bb10 <RCCEx_PLL2_Config>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d02:	e004      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d0a:	e000      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10a      	bne.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d16:	4b92      	ldr	r3, [pc, #584]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d1a:	f023 0103 	bic.w	r1, r3, #3
 8009d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d24:	4a8e      	ldr	r2, [pc, #568]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d26:	430b      	orrs	r3, r1
 8009d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d2a:	e003      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009d40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d44:	2300      	movs	r3, #0
 8009d46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d4a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4313      	orrs	r3, r2
 8009d52:	f000 8099 	beq.w	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d56:	4b83      	ldr	r3, [pc, #524]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a82      	ldr	r2, [pc, #520]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d62:	f7f8 fe65 	bl	8002a30 <HAL_GetTick>
 8009d66:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d6a:	e00b      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d6c:	f7f8 fe60 	bl	8002a30 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	2b64      	cmp	r3, #100	@ 0x64
 8009d7a:	d903      	bls.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d82:	e005      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d84:	4b77      	ldr	r3, [pc, #476]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0ed      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009d90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d173      	bne.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d98:	4b71      	ldr	r3, [pc, #452]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009da4:	4053      	eors	r3, r2
 8009da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d015      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009dae:	4b6c      	ldr	r3, [pc, #432]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009db6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dba:	4b69      	ldr	r3, [pc, #420]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dbe:	4a68      	ldr	r2, [pc, #416]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dc4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009dc6:	4b66      	ldr	r3, [pc, #408]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dca:	4a65      	ldr	r2, [pc, #404]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dd0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009dd2:	4a63      	ldr	r2, [pc, #396]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009de6:	d118      	bne.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009de8:	f7f8 fe22 	bl	8002a30 <HAL_GetTick>
 8009dec:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009df0:	e00d      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009df2:	f7f8 fe1d 	bl	8002a30 <HAL_GetTick>
 8009df6:	4602      	mov	r2, r0
 8009df8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009dfc:	1ad2      	subs	r2, r2, r3
 8009dfe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d903      	bls.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009e0c:	e005      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e0e:	4b54      	ldr	r3, [pc, #336]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0eb      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d129      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e32:	d10e      	bne.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009e34:	4b4a      	ldr	r3, [pc, #296]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e44:	091a      	lsrs	r2, r3, #4
 8009e46:	4b48      	ldr	r3, [pc, #288]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009e48:	4013      	ands	r3, r2
 8009e4a:	4a45      	ldr	r2, [pc, #276]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6113      	str	r3, [r2, #16]
 8009e50:	e005      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009e52:	4b43      	ldr	r3, [pc, #268]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	4a42      	ldr	r2, [pc, #264]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009e5c:	6113      	str	r3, [r2, #16]
 8009e5e:	4b40      	ldr	r3, [pc, #256]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e60:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e6e:	4a3c      	ldr	r2, [pc, #240]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e70:	430b      	orrs	r3, r1
 8009e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e74:	e008      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009e7e:	e003      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f002 0301 	and.w	r3, r2, #1
 8009e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009e9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	f000 808f 	beq.w	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eb0:	2b28      	cmp	r3, #40	@ 0x28
 8009eb2:	d871      	bhi.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ebc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eba:	bf00      	nop
 8009ebc:	08009fa1 	.word	0x08009fa1
 8009ec0:	08009f99 	.word	0x08009f99
 8009ec4:	08009f99 	.word	0x08009f99
 8009ec8:	08009f99 	.word	0x08009f99
 8009ecc:	08009f99 	.word	0x08009f99
 8009ed0:	08009f99 	.word	0x08009f99
 8009ed4:	08009f99 	.word	0x08009f99
 8009ed8:	08009f99 	.word	0x08009f99
 8009edc:	08009f6d 	.word	0x08009f6d
 8009ee0:	08009f99 	.word	0x08009f99
 8009ee4:	08009f99 	.word	0x08009f99
 8009ee8:	08009f99 	.word	0x08009f99
 8009eec:	08009f99 	.word	0x08009f99
 8009ef0:	08009f99 	.word	0x08009f99
 8009ef4:	08009f99 	.word	0x08009f99
 8009ef8:	08009f99 	.word	0x08009f99
 8009efc:	08009f83 	.word	0x08009f83
 8009f00:	08009f99 	.word	0x08009f99
 8009f04:	08009f99 	.word	0x08009f99
 8009f08:	08009f99 	.word	0x08009f99
 8009f0c:	08009f99 	.word	0x08009f99
 8009f10:	08009f99 	.word	0x08009f99
 8009f14:	08009f99 	.word	0x08009f99
 8009f18:	08009f99 	.word	0x08009f99
 8009f1c:	08009fa1 	.word	0x08009fa1
 8009f20:	08009f99 	.word	0x08009f99
 8009f24:	08009f99 	.word	0x08009f99
 8009f28:	08009f99 	.word	0x08009f99
 8009f2c:	08009f99 	.word	0x08009f99
 8009f30:	08009f99 	.word	0x08009f99
 8009f34:	08009f99 	.word	0x08009f99
 8009f38:	08009f99 	.word	0x08009f99
 8009f3c:	08009fa1 	.word	0x08009fa1
 8009f40:	08009f99 	.word	0x08009f99
 8009f44:	08009f99 	.word	0x08009f99
 8009f48:	08009f99 	.word	0x08009f99
 8009f4c:	08009f99 	.word	0x08009f99
 8009f50:	08009f99 	.word	0x08009f99
 8009f54:	08009f99 	.word	0x08009f99
 8009f58:	08009f99 	.word	0x08009f99
 8009f5c:	08009fa1 	.word	0x08009fa1
 8009f60:	58024400 	.word	0x58024400
 8009f64:	58024800 	.word	0x58024800
 8009f68:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f70:	3308      	adds	r3, #8
 8009f72:	2101      	movs	r1, #1
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 fdcb 	bl	800bb10 <RCCEx_PLL2_Config>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f80:	e00f      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f86:	3328      	adds	r3, #40	@ 0x28
 8009f88:	2101      	movs	r1, #1
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 fe72 	bl	800bc74 <RCCEx_PLL3_Config>
 8009f90:	4603      	mov	r3, r0
 8009f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f96:	e004      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f9e:	e000      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10a      	bne.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009faa:	4bbf      	ldr	r3, [pc, #764]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fb8:	4abb      	ldr	r2, [pc, #748]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fba:	430b      	orrs	r3, r1
 8009fbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fbe:	e003      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f002 0302 	and.w	r3, r2, #2
 8009fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fde:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	d041      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fee:	2b05      	cmp	r3, #5
 8009ff0:	d824      	bhi.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff8:	0800a045 	.word	0x0800a045
 8009ffc:	0800a011 	.word	0x0800a011
 800a000:	0800a027 	.word	0x0800a027
 800a004:	0800a045 	.word	0x0800a045
 800a008:	0800a045 	.word	0x0800a045
 800a00c:	0800a045 	.word	0x0800a045
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a014:	3308      	adds	r3, #8
 800a016:	2101      	movs	r1, #1
 800a018:	4618      	mov	r0, r3
 800a01a:	f001 fd79 	bl	800bb10 <RCCEx_PLL2_Config>
 800a01e:	4603      	mov	r3, r0
 800a020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a024:	e00f      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a02a:	3328      	adds	r3, #40	@ 0x28
 800a02c:	2101      	movs	r1, #1
 800a02e:	4618      	mov	r0, r3
 800a030:	f001 fe20 	bl	800bc74 <RCCEx_PLL3_Config>
 800a034:	4603      	mov	r3, r0
 800a036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a03a:	e004      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a042:	e000      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a044:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a046:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10a      	bne.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a04e:	4b96      	ldr	r3, [pc, #600]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a052:	f023 0107 	bic.w	r1, r3, #7
 800a056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a05c:	4a92      	ldr	r2, [pc, #584]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a05e:	430b      	orrs	r3, r1
 800a060:	6553      	str	r3, [r2, #84]	@ 0x54
 800a062:	e003      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a068:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f002 0304 	and.w	r3, r2, #4
 800a078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a07c:	2300      	movs	r3, #0
 800a07e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a082:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a086:	460b      	mov	r3, r1
 800a088:	4313      	orrs	r3, r2
 800a08a:	d044      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a094:	2b05      	cmp	r3, #5
 800a096:	d825      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a098:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a0ed 	.word	0x0800a0ed
 800a0a4:	0800a0b9 	.word	0x0800a0b9
 800a0a8:	0800a0cf 	.word	0x0800a0cf
 800a0ac:	0800a0ed 	.word	0x0800a0ed
 800a0b0:	0800a0ed 	.word	0x0800a0ed
 800a0b4:	0800a0ed 	.word	0x0800a0ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0bc:	3308      	adds	r3, #8
 800a0be:	2101      	movs	r1, #1
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f001 fd25 	bl	800bb10 <RCCEx_PLL2_Config>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0cc:	e00f      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d2:	3328      	adds	r3, #40	@ 0x28
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 fdcc 	bl	800bc74 <RCCEx_PLL3_Config>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0e2:	e004      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0ea:	e000      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a0ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10b      	bne.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0f6:	4b6c      	ldr	r3, [pc, #432]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fa:	f023 0107 	bic.w	r1, r3, #7
 800a0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a106:	4a68      	ldr	r2, [pc, #416]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a108:	430b      	orrs	r3, r1
 800a10a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a10c:	e003      	b.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a10e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a112:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	f002 0320 	and.w	r3, r2, #32
 800a122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a126:	2300      	movs	r3, #0
 800a128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a12c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a130:	460b      	mov	r3, r1
 800a132:	4313      	orrs	r3, r2
 800a134:	d055      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a13a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a13e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a142:	d033      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a144:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a148:	d82c      	bhi.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a14e:	d02f      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a154:	d826      	bhi.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a156:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a15a:	d02b      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a15c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a160:	d820      	bhi.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a166:	d012      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a16c:	d81a      	bhi.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d022      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a172:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a176:	d115      	bne.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17c:	3308      	adds	r3, #8
 800a17e:	2100      	movs	r1, #0
 800a180:	4618      	mov	r0, r3
 800a182:	f001 fcc5 	bl	800bb10 <RCCEx_PLL2_Config>
 800a186:	4603      	mov	r3, r0
 800a188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a18c:	e015      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a192:	3328      	adds	r3, #40	@ 0x28
 800a194:	2102      	movs	r1, #2
 800a196:	4618      	mov	r0, r3
 800a198:	f001 fd6c 	bl	800bc74 <RCCEx_PLL3_Config>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1a2:	e00a      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1aa:	e006      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1ac:	bf00      	nop
 800a1ae:	e004      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1b0:	bf00      	nop
 800a1b2:	e002      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1b4:	bf00      	nop
 800a1b6:	e000      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10b      	bne.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1c2:	4b39      	ldr	r3, [pc, #228]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1d2:	4a35      	ldr	r2, [pc, #212]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1d4:	430b      	orrs	r3, r1
 800a1d6:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1d8:	e003      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a1ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a1f8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4313      	orrs	r3, r2
 800a200:	d058      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a20a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a20e:	d033      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a210:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a214:	d82c      	bhi.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a21a:	d02f      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a21c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a220:	d826      	bhi.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a222:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a226:	d02b      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a228:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a22c:	d820      	bhi.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a22e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a232:	d012      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a238:	d81a      	bhi.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d022      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a23e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a242:	d115      	bne.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a248:	3308      	adds	r3, #8
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f001 fc5f 	bl	800bb10 <RCCEx_PLL2_Config>
 800a252:	4603      	mov	r3, r0
 800a254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a258:	e015      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a25e:	3328      	adds	r3, #40	@ 0x28
 800a260:	2102      	movs	r1, #2
 800a262:	4618      	mov	r0, r3
 800a264:	f001 fd06 	bl	800bc74 <RCCEx_PLL3_Config>
 800a268:	4603      	mov	r3, r0
 800a26a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a26e:	e00a      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a276:	e006      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a278:	bf00      	nop
 800a27a:	e004      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a27c:	bf00      	nop
 800a27e:	e002      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a280:	bf00      	nop
 800a282:	e000      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a284:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a286:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10e      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a28e:	4b06      	ldr	r3, [pc, #24]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a292:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a29e:	4a02      	ldr	r2, [pc, #8]	@ (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2a4:	e006      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a2a6:	bf00      	nop
 800a2a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a2c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	d055      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2e0:	d033      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a2e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2e6:	d82c      	bhi.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a2e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2ec:	d02f      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a2ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2f2:	d826      	bhi.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a2f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a2f8:	d02b      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a2fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a2fe:	d820      	bhi.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a300:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a304:	d012      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a30a:	d81a      	bhi.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d022      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a314:	d115      	bne.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a31a:	3308      	adds	r3, #8
 800a31c:	2100      	movs	r1, #0
 800a31e:	4618      	mov	r0, r3
 800a320:	f001 fbf6 	bl	800bb10 <RCCEx_PLL2_Config>
 800a324:	4603      	mov	r3, r0
 800a326:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a32a:	e015      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a330:	3328      	adds	r3, #40	@ 0x28
 800a332:	2102      	movs	r1, #2
 800a334:	4618      	mov	r0, r3
 800a336:	f001 fc9d 	bl	800bc74 <RCCEx_PLL3_Config>
 800a33a:	4603      	mov	r3, r0
 800a33c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a340:	e00a      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a348:	e006      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a34a:	bf00      	nop
 800a34c:	e004      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a34e:	bf00      	nop
 800a350:	e002      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a352:	bf00      	nop
 800a354:	e000      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a356:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10b      	bne.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a360:	4ba0      	ldr	r3, [pc, #640]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a364:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a36c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a370:	4a9c      	ldr	r2, [pc, #624]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a372:	430b      	orrs	r3, r1
 800a374:	6593      	str	r3, [r2, #88]	@ 0x58
 800a376:	e003      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a37c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f002 0308 	and.w	r3, r2, #8
 800a38c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a390:	2300      	movs	r3, #0
 800a392:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a396:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a39a:	460b      	mov	r3, r1
 800a39c:	4313      	orrs	r3, r2
 800a39e:	d01e      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3ac:	d10c      	bne.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b2:	3328      	adds	r3, #40	@ 0x28
 800a3b4:	2102      	movs	r1, #2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f001 fc5c 	bl	800bc74 <RCCEx_PLL3_Config>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a3c8:	4b86      	ldr	r3, [pc, #536]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d8:	4a82      	ldr	r2, [pc, #520]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	f002 0310 	and.w	r3, r2, #16
 800a3ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a3f4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	d01e      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a40a:	d10c      	bne.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a410:	3328      	adds	r3, #40	@ 0x28
 800a412:	2102      	movs	r1, #2
 800a414:	4618      	mov	r0, r3
 800a416:	f001 fc2d 	bl	800bc74 <RCCEx_PLL3_Config>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a426:	4b6f      	ldr	r3, [pc, #444]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a42a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a436:	4a6b      	ldr	r2, [pc, #428]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a438:	430b      	orrs	r3, r1
 800a43a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a448:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a44a:	2300      	movs	r3, #0
 800a44c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a44e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a452:	460b      	mov	r3, r1
 800a454:	4313      	orrs	r3, r2
 800a456:	d03e      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a464:	d022      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a46a:	d81b      	bhi.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d003      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a474:	d00b      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a476:	e015      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47c:	3308      	adds	r3, #8
 800a47e:	2100      	movs	r1, #0
 800a480:	4618      	mov	r0, r3
 800a482:	f001 fb45 	bl	800bb10 <RCCEx_PLL2_Config>
 800a486:	4603      	mov	r3, r0
 800a488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a48c:	e00f      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a492:	3328      	adds	r3, #40	@ 0x28
 800a494:	2102      	movs	r1, #2
 800a496:	4618      	mov	r0, r3
 800a498:	f001 fbec 	bl	800bc74 <RCCEx_PLL3_Config>
 800a49c:	4603      	mov	r3, r0
 800a49e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4a2:	e004      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4aa:	e000      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a4ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10b      	bne.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4b6:	4b4b      	ldr	r3, [pc, #300]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a4c6:	4a47      	ldr	r2, [pc, #284]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4cc:	e003      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a4e2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	677b      	str	r3, [r7, #116]	@ 0x74
 800a4e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	d03b      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4fe:	d01f      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a500:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a504:	d818      	bhi.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a50a:	d003      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a50c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a510:	d007      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a512:	e011      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a514:	4b33      	ldr	r3, [pc, #204]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a518:	4a32      	ldr	r2, [pc, #200]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a51a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a51e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a520:	e00f      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a526:	3328      	adds	r3, #40	@ 0x28
 800a528:	2101      	movs	r1, #1
 800a52a:	4618      	mov	r0, r3
 800a52c:	f001 fba2 	bl	800bc74 <RCCEx_PLL3_Config>
 800a530:	4603      	mov	r3, r0
 800a532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a536:	e004      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a53e:	e000      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a540:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a542:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10b      	bne.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a54a:	4b26      	ldr	r3, [pc, #152]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a54c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a55a:	4a22      	ldr	r2, [pc, #136]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a55c:	430b      	orrs	r3, r1
 800a55e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a560:	e003      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a566:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a576:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a578:	2300      	movs	r3, #0
 800a57a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a57c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a580:	460b      	mov	r3, r1
 800a582:	4313      	orrs	r3, r2
 800a584:	d034      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a58a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a594:	d007      	beq.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a596:	e011      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a598:	4b12      	ldr	r3, [pc, #72]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59c:	4a11      	ldr	r2, [pc, #68]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a59e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5a4:	e00e      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	2102      	movs	r1, #2
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f001 faae 	bl	800bb10 <RCCEx_PLL2_Config>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5ba:	e003      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10d      	bne.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5cc:	4b05      	ldr	r3, [pc, #20]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5da:	4a02      	ldr	r2, [pc, #8]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5dc:	430b      	orrs	r3, r1
 800a5de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5e0:	e006      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a5e2:	bf00      	nop
 800a5e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a5fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5fe:	2300      	movs	r3, #0
 800a600:	667b      	str	r3, [r7, #100]	@ 0x64
 800a602:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a606:	460b      	mov	r3, r1
 800a608:	4313      	orrs	r3, r2
 800a60a:	d00c      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a610:	3328      	adds	r3, #40	@ 0x28
 800a612:	2102      	movs	r1, #2
 800a614:	4618      	mov	r0, r3
 800a616:	f001 fb2d 	bl	800bc74 <RCCEx_PLL3_Config>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a632:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a634:	2300      	movs	r3, #0
 800a636:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a638:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a63c:	460b      	mov	r3, r1
 800a63e:	4313      	orrs	r3, r2
 800a640:	d036      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a648:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a64c:	d018      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a64e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a652:	d811      	bhi.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a658:	d014      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a65a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a65e:	d80b      	bhi.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d011      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a668:	d106      	bne.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a66a:	4bb7      	ldr	r3, [pc, #732]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66e:	4ab6      	ldr	r2, [pc, #728]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a674:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a676:	e008      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a67e:	e004      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a680:	bf00      	nop
 800a682:	e002      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a684:	bf00      	nop
 800a686:	e000      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a68a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a692:	4bad      	ldr	r3, [pc, #692]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a696:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a69e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6a0:	4aa9      	ldr	r2, [pc, #676]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6a2:	430b      	orrs	r3, r1
 800a6a4:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6a6:	e003      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a6bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6be:	2300      	movs	r3, #0
 800a6c0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	d009      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6cc:	4b9e      	ldr	r3, [pc, #632]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6da:	4a9b      	ldr	r2, [pc, #620]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6dc:	430b      	orrs	r3, r1
 800a6de:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a6ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	d009      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a6fc:	4b92      	ldr	r3, [pc, #584]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a700:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a70a:	4a8f      	ldr	r2, [pc, #572]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a70c:	430b      	orrs	r3, r1
 800a70e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a71c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a71e:	2300      	movs	r3, #0
 800a720:	647b      	str	r3, [r7, #68]	@ 0x44
 800a722:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a726:	460b      	mov	r3, r1
 800a728:	4313      	orrs	r3, r2
 800a72a:	d00e      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a72c:	4b86      	ldr	r3, [pc, #536]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	4a85      	ldr	r2, [pc, #532]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a732:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a736:	6113      	str	r3, [r2, #16]
 800a738:	4b83      	ldr	r3, [pc, #524]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a73a:	6919      	ldr	r1, [r3, #16]
 800a73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a744:	4a80      	ldr	r2, [pc, #512]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a746:	430b      	orrs	r3, r1
 800a748:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a756:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a758:	2300      	movs	r3, #0
 800a75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a75c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a760:	460b      	mov	r3, r1
 800a762:	4313      	orrs	r3, r2
 800a764:	d009      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a766:	4b78      	ldr	r3, [pc, #480]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a76a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a774:	4a74      	ldr	r2, [pc, #464]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a776:	430b      	orrs	r3, r1
 800a778:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a786:	633b      	str	r3, [r7, #48]	@ 0x30
 800a788:	2300      	movs	r3, #0
 800a78a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a78c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a790:	460b      	mov	r3, r1
 800a792:	4313      	orrs	r3, r2
 800a794:	d00a      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a796:	4b6c      	ldr	r3, [pc, #432]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a79a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7a6:	4a68      	ldr	r2, [pc, #416]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7a8:	430b      	orrs	r3, r1
 800a7aa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	d011      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 f99d 	bl	800bb10 <RCCEx_PLL2_Config>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a7dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	6239      	str	r1, [r7, #32]
 800a7f8:	f003 0302 	and.w	r3, r3, #2
 800a7fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a802:	460b      	mov	r3, r1
 800a804:	4313      	orrs	r3, r2
 800a806:	d011      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80c:	3308      	adds	r3, #8
 800a80e:	2101      	movs	r1, #1
 800a810:	4618      	mov	r0, r3
 800a812:	f001 f97d 	bl	800bb10 <RCCEx_PLL2_Config>
 800a816:	4603      	mov	r3, r0
 800a818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a81c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a820:	2b00      	cmp	r3, #0
 800a822:	d003      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a828:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	2100      	movs	r1, #0
 800a836:	61b9      	str	r1, [r7, #24]
 800a838:	f003 0304 	and.w	r3, r3, #4
 800a83c:	61fb      	str	r3, [r7, #28]
 800a83e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a842:	460b      	mov	r3, r1
 800a844:	4313      	orrs	r3, r2
 800a846:	d011      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a84c:	3308      	adds	r3, #8
 800a84e:	2102      	movs	r1, #2
 800a850:	4618      	mov	r0, r3
 800a852:	f001 f95d 	bl	800bb10 <RCCEx_PLL2_Config>
 800a856:	4603      	mov	r3, r0
 800a858:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a85c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a860:	2b00      	cmp	r3, #0
 800a862:	d003      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a868:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	2100      	movs	r1, #0
 800a876:	6139      	str	r1, [r7, #16]
 800a878:	f003 0308 	and.w	r3, r3, #8
 800a87c:	617b      	str	r3, [r7, #20]
 800a87e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a882:	460b      	mov	r3, r1
 800a884:	4313      	orrs	r3, r2
 800a886:	d011      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a88c:	3328      	adds	r3, #40	@ 0x28
 800a88e:	2100      	movs	r1, #0
 800a890:	4618      	mov	r0, r3
 800a892:	f001 f9ef 	bl	800bc74 <RCCEx_PLL3_Config>
 800a896:	4603      	mov	r3, r0
 800a898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a89c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d003      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	f003 0310 	and.w	r3, r3, #16
 800a8bc:	60fb      	str	r3, [r7, #12]
 800a8be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	d011      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8cc:	3328      	adds	r3, #40	@ 0x28
 800a8ce:	2101      	movs	r1, #1
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 f9cf 	bl	800bc74 <RCCEx_PLL3_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a8dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6039      	str	r1, [r7, #0]
 800a8f8:	f003 0320 	and.w	r3, r3, #32
 800a8fc:	607b      	str	r3, [r7, #4]
 800a8fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a902:	460b      	mov	r3, r1
 800a904:	4313      	orrs	r3, r2
 800a906:	d011      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90c:	3328      	adds	r3, #40	@ 0x28
 800a90e:	2102      	movs	r1, #2
 800a910:	4618      	mov	r0, r3
 800a912:	f001 f9af 	bl	800bc74 <RCCEx_PLL3_Config>
 800a916:	4603      	mov	r3, r0
 800a918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a91c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a920:	2b00      	cmp	r3, #0
 800a922:	d003      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a92c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	e000      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a940:	46bd      	mov	sp, r7
 800a942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a946:	bf00      	nop
 800a948:	58024400 	.word	0x58024400

0800a94c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b090      	sub	sp, #64	@ 0x40
 800a950:	af00      	add	r7, sp, #0
 800a952:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a95a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a95e:	430b      	orrs	r3, r1
 800a960:	f040 8094 	bne.w	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a964:	4b9b      	ldr	r3, [pc, #620]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a968:	f003 0307 	and.w	r3, r3, #7
 800a96c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a970:	2b04      	cmp	r3, #4
 800a972:	f200 8087 	bhi.w	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a976:	a201      	add	r2, pc, #4	@ (adr r2, 800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a991 	.word	0x0800a991
 800a980:	0800a9b9 	.word	0x0800a9b9
 800a984:	0800a9e1 	.word	0x0800a9e1
 800a988:	0800aa7d 	.word	0x0800aa7d
 800a98c:	0800aa09 	.word	0x0800aa09
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a990:	4b90      	ldr	r3, [pc, #576]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a998:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a99c:	d108      	bne.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a99e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 ff62 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ac:	f000 bc93 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b4:	f000 bc8f 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9b8:	4b86      	ldr	r3, [pc, #536]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9c4:	d108      	bne.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9c6:	f107 0318 	add.w	r3, r7, #24
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fca6 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d4:	f000 bc7f 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9dc:	f000 bc7b 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9e0:	4b7c      	ldr	r3, [pc, #496]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9ec:	d108      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ee:	f107 030c 	add.w	r3, r7, #12
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fde6 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fc:	f000 bc6b 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa04:	f000 bc67 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa08:	4b72      	ldr	r3, [pc, #456]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa10:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa12:	4b70      	ldr	r3, [pc, #448]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d10c      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d109      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa24:	4b6b      	ldr	r3, [pc, #428]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	08db      	lsrs	r3, r3, #3
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	4a6a      	ldr	r2, [pc, #424]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
 800aa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa36:	e01f      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa38:	4b66      	ldr	r3, [pc, #408]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa44:	d106      	bne.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aa46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa4c:	d102      	bne.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa4e:	4b63      	ldr	r3, [pc, #396]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aa50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa52:	e011      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa54:	4b5f      	ldr	r3, [pc, #380]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa60:	d106      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aa62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa68:	d102      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa6a:	4b5d      	ldr	r3, [pc, #372]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa6e:	e003      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa74:	f000 bc2f 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa78:	f000 bc2d 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa7c:	4b59      	ldr	r3, [pc, #356]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa80:	f000 bc29 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa88:	f000 bc25 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aa8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa90:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800aa94:	430b      	orrs	r3, r1
 800aa96:	f040 80a7 	bne.w	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aa9a:	4b4e      	ldr	r3, [pc, #312]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa9e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800aaa2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aaaa:	d054      	beq.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800aaac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aab2:	f200 808b 	bhi.w	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aabc:	f000 8083 	beq.w	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800aac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aac6:	f200 8081 	bhi.w	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aacc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aad0:	d02f      	beq.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800aad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aad8:	d878      	bhi.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d004      	beq.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800aae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aae6:	d012      	beq.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800aae8:	e070      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaea:	4b3a      	ldr	r3, [pc, #232]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aaf6:	d107      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 feb5 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab06:	e3e6      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab0c:	e3e3      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab0e:	4b31      	ldr	r3, [pc, #196]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab1a:	d107      	bne.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab1c:	f107 0318 	add.w	r3, r7, #24
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 fbfb 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab2a:	e3d4      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab30:	e3d1      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab32:	4b28      	ldr	r3, [pc, #160]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab3e:	d107      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab40:	f107 030c 	add.w	r3, r7, #12
 800ab44:	4618      	mov	r0, r3
 800ab46:	f000 fd3d 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab4e:	e3c2      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab54:	e3bf      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab56:	4b1f      	ldr	r3, [pc, #124]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab5e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab60:	4b1c      	ldr	r3, [pc, #112]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0304 	and.w	r3, r3, #4
 800ab68:	2b04      	cmp	r3, #4
 800ab6a:	d10c      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ab6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab72:	4b18      	ldr	r3, [pc, #96]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	08db      	lsrs	r3, r3, #3
 800ab78:	f003 0303 	and.w	r3, r3, #3
 800ab7c:	4a16      	ldr	r2, [pc, #88]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ab7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab84:	e01e      	b.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab86:	4b13      	ldr	r3, [pc, #76]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab92:	d106      	bne.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ab94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab9a:	d102      	bne.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab9c:	4b0f      	ldr	r3, [pc, #60]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ab9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aba0:	e010      	b.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aba2:	4b0c      	ldr	r3, [pc, #48]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abae:	d106      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800abb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abb6:	d102      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abb8:	4b09      	ldr	r3, [pc, #36]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abbc:	e002      	b.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800abc2:	e388      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abc4:	e387      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abc6:	4b07      	ldr	r3, [pc, #28]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800abc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abca:	e384      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd0:	e381      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abd2:	bf00      	nop
 800abd4:	58024400 	.word	0x58024400
 800abd8:	03d09000 	.word	0x03d09000
 800abdc:	003d0900 	.word	0x003d0900
 800abe0:	016e3600 	.word	0x016e3600
 800abe4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800abe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abec:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800abf0:	430b      	orrs	r3, r1
 800abf2:	f040 809c 	bne.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800abf6:	4b9e      	ldr	r3, [pc, #632]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abfa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800abfe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ac00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac06:	d054      	beq.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ac08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac0e:	f200 808b 	bhi.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ac18:	f000 8083 	beq.w	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ac22:	f200 8081 	bhi.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac2c:	d02f      	beq.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac34:	d878      	bhi.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac42:	d012      	beq.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ac44:	e070      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac46:	4b8a      	ldr	r3, [pc, #552]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac52:	d107      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 fe07 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac62:	e338      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac68:	e335      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac6a:	4b81      	ldr	r3, [pc, #516]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac76:	d107      	bne.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac78:	f107 0318 	add.w	r3, r7, #24
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f000 fb4d 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac86:	e326      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac8c:	e323      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac8e:	4b78      	ldr	r3, [pc, #480]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac9a:	d107      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac9c:	f107 030c 	add.w	r3, r7, #12
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 fc8f 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acaa:	e314      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb0:	e311      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acb2:	4b6f      	ldr	r3, [pc, #444]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acbc:	4b6c      	ldr	r3, [pc, #432]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d10c      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800acc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acca:	2b00      	cmp	r3, #0
 800accc:	d109      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acce:	4b68      	ldr	r3, [pc, #416]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	08db      	lsrs	r3, r3, #3
 800acd4:	f003 0303 	and.w	r3, r3, #3
 800acd8:	4a66      	ldr	r2, [pc, #408]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800acda:	fa22 f303 	lsr.w	r3, r2, r3
 800acde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ace0:	e01e      	b.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ace2:	4b63      	ldr	r3, [pc, #396]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acee:	d106      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800acf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acf6:	d102      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acf8:	4b5f      	ldr	r3, [pc, #380]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800acfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acfc:	e010      	b.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acfe:	4b5c      	ldr	r3, [pc, #368]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad0a:	d106      	bne.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad12:	d102      	bne.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad14:	4b59      	ldr	r3, [pc, #356]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad18:	e002      	b.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad1e:	e2da      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad20:	e2d9      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad22:	4b57      	ldr	r3, [pc, #348]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ad24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad26:	e2d6      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad2c:	e2d3      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ad2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad32:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ad36:	430b      	orrs	r3, r1
 800ad38:	f040 80a7 	bne.w	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ad3c:	4b4c      	ldr	r3, [pc, #304]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad40:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ad44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad4c:	d055      	beq.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad54:	f200 8096 	bhi.w	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad5e:	f000 8084 	beq.w	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ad62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad68:	f200 808c 	bhi.w	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad72:	d030      	beq.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ad74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad7a:	f200 8083 	bhi.w	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d004      	beq.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ad84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad8a:	d012      	beq.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ad8c:	e07a      	b.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad8e:	4b38      	ldr	r3, [pc, #224]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad9a:	d107      	bne.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fd63 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adaa:	e294      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adac:	2300      	movs	r3, #0
 800adae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb0:	e291      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adb2:	4b2f      	ldr	r3, [pc, #188]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adbe:	d107      	bne.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc0:	f107 0318 	add.w	r3, r7, #24
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 faa9 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adce:	e282      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add4:	e27f      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800add6:	4b26      	ldr	r3, [pc, #152]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ade2:	d107      	bne.n	800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ade4:	f107 030c 	add.w	r3, r7, #12
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 fbeb 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf2:	e270      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adf8:	e26d      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adfa:	4b1d      	ldr	r3, [pc, #116]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae02:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae04:	4b1a      	ldr	r3, [pc, #104]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d10c      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ae10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d109      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae16:	4b16      	ldr	r3, [pc, #88]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	08db      	lsrs	r3, r3, #3
 800ae1c:	f003 0303 	and.w	r3, r3, #3
 800ae20:	4a14      	ldr	r2, [pc, #80]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ae22:	fa22 f303 	lsr.w	r3, r2, r3
 800ae26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae28:	e01e      	b.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae2a:	4b11      	ldr	r3, [pc, #68]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae36:	d106      	bne.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ae38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae3e:	d102      	bne.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae40:	4b0d      	ldr	r3, [pc, #52]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ae42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae44:	e010      	b.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae46:	4b0a      	ldr	r3, [pc, #40]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae52:	d106      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ae54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae5a:	d102      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae5c:	4b07      	ldr	r3, [pc, #28]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae60:	e002      	b.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae62:	2300      	movs	r3, #0
 800ae64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae66:	e236      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae68:	e235      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae6a:	4b05      	ldr	r3, [pc, #20]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae6e:	e232      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae70:	58024400 	.word	0x58024400
 800ae74:	03d09000 	.word	0x03d09000
 800ae78:	003d0900 	.word	0x003d0900
 800ae7c:	016e3600 	.word	0x016e3600
 800ae80:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae88:	e225      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ae8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae8e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ae92:	430b      	orrs	r3, r1
 800ae94:	f040 8085 	bne.w	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ae98:	4b9c      	ldr	r3, [pc, #624]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae9c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aea0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aea8:	d06b      	beq.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aeb0:	d874      	bhi.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aeb8:	d056      	beq.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800aeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aebc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aec0:	d86c      	bhi.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aec8:	d03b      	beq.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800aeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aecc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aed0:	d864      	bhi.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aed8:	d021      	beq.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800aeda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aedc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aee0:	d85c      	bhi.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d004      	beq.n	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800aee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeee:	d004      	beq.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800aef0:	e054      	b.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aef2:	f7fe fb5f 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 800aef6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aef8:	e1ed      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aefa:	4b84      	ldr	r3, [pc, #528]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af06:	d107      	bne.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af08:	f107 0318 	add.w	r3, r7, #24
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 fa05 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af16:	e1de      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af1c:	e1db      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af1e:	4b7b      	ldr	r3, [pc, #492]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af2a:	d107      	bne.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af2c:	f107 030c 	add.w	r3, r7, #12
 800af30:	4618      	mov	r0, r3
 800af32:	f000 fb47 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af3a:	e1cc      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af40:	e1c9      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af42:	4b72      	ldr	r3, [pc, #456]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0304 	and.w	r3, r3, #4
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	d109      	bne.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af4e:	4b6f      	ldr	r3, [pc, #444]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	08db      	lsrs	r3, r3, #3
 800af54:	f003 0303 	and.w	r3, r3, #3
 800af58:	4a6d      	ldr	r2, [pc, #436]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800af5a:	fa22 f303 	lsr.w	r3, r2, r3
 800af5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af60:	e1b9      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af66:	e1b6      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800af68:	4b68      	ldr	r3, [pc, #416]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af74:	d102      	bne.n	800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800af76:	4b67      	ldr	r3, [pc, #412]	@ (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800af78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7a:	e1ac      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af80:	e1a9      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af82:	4b62      	ldr	r3, [pc, #392]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af8e:	d102      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800af90:	4b61      	ldr	r3, [pc, #388]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af94:	e19f      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af9a:	e19c      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa0:	e199      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800afa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afa6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800afaa:	430b      	orrs	r3, r1
 800afac:	d173      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800afae:	4b57      	ldr	r3, [pc, #348]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afbe:	d02f      	beq.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800afc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afc6:	d863      	bhi.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800afc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d004      	beq.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800afce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afd4:	d012      	beq.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800afd6:	e05b      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afd8:	4b4c      	ldr	r3, [pc, #304]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afe4:	d107      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afe6:	f107 0318 	add.w	r3, r7, #24
 800afea:	4618      	mov	r0, r3
 800afec:	f000 f996 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff4:	e16f      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800affa:	e16c      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800affc:	4b43      	ldr	r3, [pc, #268]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b008:	d107      	bne.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b00a:	f107 030c 	add.w	r3, r7, #12
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 fad8 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b018:	e15d      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b01e:	e15a      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b020:	4b3a      	ldr	r3, [pc, #232]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b024:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b028:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b02a:	4b38      	ldr	r3, [pc, #224]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 0304 	and.w	r3, r3, #4
 800b032:	2b04      	cmp	r3, #4
 800b034:	d10c      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d109      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b03c:	4b33      	ldr	r3, [pc, #204]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	08db      	lsrs	r3, r3, #3
 800b042:	f003 0303 	and.w	r3, r3, #3
 800b046:	4a32      	ldr	r2, [pc, #200]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b048:	fa22 f303 	lsr.w	r3, r2, r3
 800b04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b04e:	e01e      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b050:	4b2e      	ldr	r3, [pc, #184]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b05c:	d106      	bne.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b064:	d102      	bne.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b066:	4b2b      	ldr	r3, [pc, #172]	@ (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b06a:	e010      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b06c:	4b27      	ldr	r3, [pc, #156]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b078:	d106      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b07a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b080:	d102      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b082:	4b25      	ldr	r3, [pc, #148]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b086:	e002      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b08c:	e123      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b08e:	e122      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b090:	2300      	movs	r3, #0
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b094:	e11f      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b09a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	d13c      	bne.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b0aa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d004      	beq.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b8:	d012      	beq.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b0ba:	e023      	b.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0bc:	4b13      	ldr	r3, [pc, #76]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0c8:	d107      	bne.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 fbcc 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d8:	e0fd      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0de:	e0fa      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0ec:	d107      	bne.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ee:	f107 0318 	add.w	r3, r7, #24
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 f912 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0fc:	e0eb      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b102:	e0e8      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b108:	e0e5      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b10a:	bf00      	nop
 800b10c:	58024400 	.word	0x58024400
 800b110:	03d09000 	.word	0x03d09000
 800b114:	003d0900 	.word	0x003d0900
 800b118:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b11c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b120:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b124:	430b      	orrs	r3, r1
 800b126:	f040 8085 	bne.w	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b12a:	4b6d      	ldr	r3, [pc, #436]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b12e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b132:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b13a:	d06b      	beq.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b142:	d874      	bhi.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b14a:	d056      	beq.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b152:	d86c      	bhi.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b156:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b15a:	d03b      	beq.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b162:	d864      	bhi.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b16a:	d021      	beq.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b172:	d85c      	bhi.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b176:	2b00      	cmp	r3, #0
 800b178:	d004      	beq.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b180:	d004      	beq.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b182:	e054      	b.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b184:	f000 f8b4 	bl	800b2f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b188:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b18a:	e0a4      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b18c:	4b54      	ldr	r3, [pc, #336]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b198:	d107      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19a:	f107 0318 	add.w	r3, r7, #24
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 f8bc 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1a8:	e095      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ae:	e092      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1b0:	4b4b      	ldr	r3, [pc, #300]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1bc:	d107      	bne.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1be:	f107 030c 	add.w	r3, r7, #12
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 f9fe 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1cc:	e083      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1d2:	e080      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1d4:	4b42      	ldr	r3, [pc, #264]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0304 	and.w	r3, r3, #4
 800b1dc:	2b04      	cmp	r3, #4
 800b1de:	d109      	bne.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1e0:	4b3f      	ldr	r3, [pc, #252]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	08db      	lsrs	r3, r3, #3
 800b1e6:	f003 0303 	and.w	r3, r3, #3
 800b1ea:	4a3e      	ldr	r2, [pc, #248]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b1ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1f2:	e070      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f8:	e06d      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b1fa:	4b39      	ldr	r3, [pc, #228]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b206:	d102      	bne.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b208:	4b37      	ldr	r3, [pc, #220]	@ (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b20c:	e063      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b212:	e060      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b214:	4b32      	ldr	r3, [pc, #200]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b21c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b220:	d102      	bne.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b222:	4b32      	ldr	r3, [pc, #200]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b226:	e056      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b22c:	e053      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b232:	e050      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b234:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b238:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b23c:	430b      	orrs	r3, r1
 800b23e:	d148      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b240:	4b27      	ldr	r3, [pc, #156]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b244:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b248:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b250:	d02a      	beq.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b254:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b258:	d838      	bhi.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d004      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b266:	d00d      	beq.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b268:	e030      	b.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b26a:	4b1d      	ldr	r3, [pc, #116]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b276:	d102      	bne.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b278:	4b1c      	ldr	r3, [pc, #112]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b27c:	e02b      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b282:	e028      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b284:	4b16      	ldr	r3, [pc, #88]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b28c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b290:	d107      	bne.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b296:	4618      	mov	r0, r3
 800b298:	f000 fae8 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a0:	e019      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a6:	e016      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2a8:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2b4:	d107      	bne.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b6:	f107 0318 	add.w	r3, r7, #24
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 f82e 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c4:	e007      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ca:	e004      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d0:	e001      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3740      	adds	r7, #64	@ 0x40
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	58024400 	.word	0x58024400
 800b2e4:	03d09000 	.word	0x03d09000
 800b2e8:	003d0900 	.word	0x003d0900
 800b2ec:	016e3600 	.word	0x016e3600

0800b2f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b2f4:	f7fe f92e 	bl	8009554 <HAL_RCC_GetHCLKFreq>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	4b06      	ldr	r3, [pc, #24]	@ (800b314 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	091b      	lsrs	r3, r3, #4
 800b300:	f003 0307 	and.w	r3, r3, #7
 800b304:	4904      	ldr	r1, [pc, #16]	@ (800b318 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b306:	5ccb      	ldrb	r3, [r1, r3]
 800b308:	f003 031f 	and.w	r3, r3, #31
 800b30c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b310:	4618      	mov	r0, r3
 800b312:	bd80      	pop	{r7, pc}
 800b314:	58024400 	.word	0x58024400
 800b318:	08011c5c 	.word	0x08011c5c

0800b31c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b089      	sub	sp, #36	@ 0x24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b324:	4ba1      	ldr	r3, [pc, #644]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b328:	f003 0303 	and.w	r3, r3, #3
 800b32c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b32e:	4b9f      	ldr	r3, [pc, #636]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b332:	0b1b      	lsrs	r3, r3, #12
 800b334:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b338:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b33a:	4b9c      	ldr	r3, [pc, #624]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33e:	091b      	lsrs	r3, r3, #4
 800b340:	f003 0301 	and.w	r3, r3, #1
 800b344:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b346:	4b99      	ldr	r3, [pc, #612]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b34a:	08db      	lsrs	r3, r3, #3
 800b34c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	fb02 f303 	mul.w	r3, r2, r3
 800b356:	ee07 3a90 	vmov	s15, r3
 800b35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 8111 	beq.w	800b58c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	f000 8083 	beq.w	800b478 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	2b02      	cmp	r3, #2
 800b376:	f200 80a1 	bhi.w	800b4bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d056      	beq.n	800b434 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b386:	e099      	b.n	800b4bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b388:	4b88      	ldr	r3, [pc, #544]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b00      	cmp	r3, #0
 800b392:	d02d      	beq.n	800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b394:	4b85      	ldr	r3, [pc, #532]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	08db      	lsrs	r3, r3, #3
 800b39a:	f003 0303 	and.w	r3, r3, #3
 800b39e:	4a84      	ldr	r2, [pc, #528]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	ee07 3a90 	vmov	s15, r3
 800b3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	ee07 3a90 	vmov	s15, r3
 800b3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3be:	4b7b      	ldr	r3, [pc, #492]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c6:	ee07 3a90 	vmov	s15, r3
 800b3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b3ee:	e087      	b.n	800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b402:	4b6a      	ldr	r3, [pc, #424]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40a:	ee07 3a90 	vmov	s15, r3
 800b40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b412:	ed97 6a03 	vldr	s12, [r7, #12]
 800b416:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b42e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b432:	e065      	b.n	800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	ee07 3a90 	vmov	s15, r3
 800b43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b5bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b446:	4b59      	ldr	r3, [pc, #356]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b44e:	ee07 3a90 	vmov	s15, r3
 800b452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b456:	ed97 6a03 	vldr	s12, [r7, #12]
 800b45a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b476:	e043      	b.n	800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b482:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48a:	4b48      	ldr	r3, [pc, #288]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b48c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b492:	ee07 3a90 	vmov	s15, r3
 800b496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b49e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4ba:	e021      	b.n	800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	ee07 3a90 	vmov	s15, r3
 800b4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b5bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ce:	4b37      	ldr	r3, [pc, #220]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b500:	4b2a      	ldr	r3, [pc, #168]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b504:	0a5b      	lsrs	r3, r3, #9
 800b506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b50a:	ee07 3a90 	vmov	s15, r3
 800b50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b51a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b51e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b526:	ee17 2a90 	vmov	r2, s15
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b52e:	4b1f      	ldr	r3, [pc, #124]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b532:	0c1b      	lsrs	r3, r3, #16
 800b534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b538:	ee07 3a90 	vmov	s15, r3
 800b53c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b540:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b544:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b548:	edd7 6a07 	vldr	s13, [r7, #28]
 800b54c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b554:	ee17 2a90 	vmov	r2, s15
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b55c:	4b13      	ldr	r3, [pc, #76]	@ (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b560:	0e1b      	lsrs	r3, r3, #24
 800b562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b566:	ee07 3a90 	vmov	s15, r3
 800b56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b572:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b576:	edd7 6a07 	vldr	s13, [r7, #28]
 800b57a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b57e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b582:	ee17 2a90 	vmov	r2, s15
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b58a:	e008      	b.n	800b59e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	609a      	str	r2, [r3, #8]
}
 800b59e:	bf00      	nop
 800b5a0:	3724      	adds	r7, #36	@ 0x24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	58024400 	.word	0x58024400
 800b5b0:	03d09000 	.word	0x03d09000
 800b5b4:	46000000 	.word	0x46000000
 800b5b8:	4c742400 	.word	0x4c742400
 800b5bc:	4a742400 	.word	0x4a742400
 800b5c0:	4bb71b00 	.word	0x4bb71b00

0800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b089      	sub	sp, #36	@ 0x24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5cc:	4ba1      	ldr	r3, [pc, #644]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d0:	f003 0303 	and.w	r3, r3, #3
 800b5d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b5d6:	4b9f      	ldr	r3, [pc, #636]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5da:	0d1b      	lsrs	r3, r3, #20
 800b5dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b5e2:	4b9c      	ldr	r3, [pc, #624]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e6:	0a1b      	lsrs	r3, r3, #8
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b5ee:	4b99      	ldr	r3, [pc, #612]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5f2:	08db      	lsrs	r3, r3, #3
 800b5f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	fb02 f303 	mul.w	r3, r2, r3
 800b5fe:	ee07 3a90 	vmov	s15, r3
 800b602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b606:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 8111 	beq.w	800b834 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	2b02      	cmp	r3, #2
 800b616:	f000 8083 	beq.w	800b720 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	f200 80a1 	bhi.w	800b764 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d056      	beq.n	800b6dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b62e:	e099      	b.n	800b764 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b630:	4b88      	ldr	r3, [pc, #544]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 0320 	and.w	r3, r3, #32
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d02d      	beq.n	800b698 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b63c:	4b85      	ldr	r3, [pc, #532]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	08db      	lsrs	r3, r3, #3
 800b642:	f003 0303 	and.w	r3, r3, #3
 800b646:	4a84      	ldr	r2, [pc, #528]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b648:	fa22 f303 	lsr.w	r3, r2, r3
 800b64c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	ee07 3a90 	vmov	s15, r3
 800b654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	ee07 3a90 	vmov	s15, r3
 800b65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b666:	4b7b      	ldr	r3, [pc, #492]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b66e:	ee07 3a90 	vmov	s15, r3
 800b672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b676:	ed97 6a03 	vldr	s12, [r7, #12]
 800b67a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b692:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b696:	e087      	b.n	800b7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	ee07 3a90 	vmov	s15, r3
 800b69e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b6a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6aa:	4b6a      	ldr	r3, [pc, #424]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6b2:	ee07 3a90 	vmov	s15, r3
 800b6b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6da:	e065      	b.n	800b7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ee:	4b59      	ldr	r3, [pc, #356]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f6:	ee07 3a90 	vmov	s15, r3
 800b6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b702:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b70e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b71a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b71e:	e043      	b.n	800b7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	ee07 3a90 	vmov	s15, r3
 800b726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b732:	4b48      	ldr	r3, [pc, #288]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b742:	ed97 6a03 	vldr	s12, [r7, #12]
 800b746:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b75e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b762:	e021      	b.n	800b7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	ee07 3a90 	vmov	s15, r3
 800b76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b776:	4b37      	ldr	r3, [pc, #220]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b77e:	ee07 3a90 	vmov	s15, r3
 800b782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b786:	ed97 6a03 	vldr	s12, [r7, #12]
 800b78a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b7a8:	4b2a      	ldr	r3, [pc, #168]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ac:	0a5b      	lsrs	r3, r3, #9
 800b7ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7b2:	ee07 3a90 	vmov	s15, r3
 800b7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ce:	ee17 2a90 	vmov	r2, s15
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b7d6:	4b1f      	ldr	r3, [pc, #124]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7da:	0c1b      	lsrs	r3, r3, #16
 800b7dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7e0:	ee07 3a90 	vmov	s15, r3
 800b7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7fc:	ee17 2a90 	vmov	r2, s15
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b804:	4b13      	ldr	r3, [pc, #76]	@ (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b808:	0e1b      	lsrs	r3, r3, #24
 800b80a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b81a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b81e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b82a:	ee17 2a90 	vmov	r2, s15
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b832:	e008      	b.n	800b846 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	609a      	str	r2, [r3, #8]
}
 800b846:	bf00      	nop
 800b848:	3724      	adds	r7, #36	@ 0x24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	58024400 	.word	0x58024400
 800b858:	03d09000 	.word	0x03d09000
 800b85c:	46000000 	.word	0x46000000
 800b860:	4c742400 	.word	0x4c742400
 800b864:	4a742400 	.word	0x4a742400
 800b868:	4bb71b00 	.word	0x4bb71b00

0800b86c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b089      	sub	sp, #36	@ 0x24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b874:	4ba0      	ldr	r3, [pc, #640]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b878:	f003 0303 	and.w	r3, r3, #3
 800b87c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b87e:	4b9e      	ldr	r3, [pc, #632]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b882:	091b      	lsrs	r3, r3, #4
 800b884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b888:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b88a:	4b9b      	ldr	r3, [pc, #620]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b894:	4b98      	ldr	r3, [pc, #608]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b898:	08db      	lsrs	r3, r3, #3
 800b89a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	fb02 f303 	mul.w	r3, r2, r3
 800b8a4:	ee07 3a90 	vmov	s15, r3
 800b8a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 8111 	beq.w	800bada <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	f000 8083 	beq.w	800b9c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	f200 80a1 	bhi.w	800ba0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d056      	beq.n	800b982 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b8d4:	e099      	b.n	800ba0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8d6:	4b88      	ldr	r3, [pc, #544]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f003 0320 	and.w	r3, r3, #32
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d02d      	beq.n	800b93e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8e2:	4b85      	ldr	r3, [pc, #532]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	08db      	lsrs	r3, r3, #3
 800b8e8:	f003 0303 	and.w	r3, r3, #3
 800b8ec:	4a83      	ldr	r2, [pc, #524]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b8ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	ee07 3a90 	vmov	s15, r3
 800b904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b90c:	4b7a      	ldr	r3, [pc, #488]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b914:	ee07 3a90 	vmov	s15, r3
 800b918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b91c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b920:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b92c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b934:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b938:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b93c:	e087      	b.n	800ba4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	ee07 3a90 	vmov	s15, r3
 800b944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b948:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b94c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b950:	4b69      	ldr	r3, [pc, #420]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b958:	ee07 3a90 	vmov	s15, r3
 800b95c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b960:	ed97 6a03 	vldr	s12, [r7, #12]
 800b964:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b96c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b970:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b97c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b980:	e065      	b.n	800ba4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	ee07 3a90 	vmov	s15, r3
 800b988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800bb08 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b994:	4b58      	ldr	r3, [pc, #352]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b99c:	ee07 3a90 	vmov	s15, r3
 800b9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9a8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9c4:	e043      	b.n	800ba4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b9d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9d8:	4b47      	ldr	r3, [pc, #284]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e0:	ee07 3a90 	vmov	s15, r3
 800b9e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ec:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba08:	e021      	b.n	800ba4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	ee07 3a90 	vmov	s15, r3
 800ba10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba14:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba1c:	4b36      	ldr	r3, [pc, #216]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba24:	ee07 3a90 	vmov	s15, r3
 800ba28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba30:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba4c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ba4e:	4b2a      	ldr	r3, [pc, #168]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba52:	0a5b      	lsrs	r3, r3, #9
 800ba54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba58:	ee07 3a90 	vmov	s15, r3
 800ba5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba74:	ee17 2a90 	vmov	r2, s15
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ba7c:	4b1e      	ldr	r3, [pc, #120]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba80:	0c1b      	lsrs	r3, r3, #16
 800ba82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba96:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa2:	ee17 2a90 	vmov	r2, s15
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800baaa:	4b13      	ldr	r3, [pc, #76]	@ (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baae:	0e1b      	lsrs	r3, r3, #24
 800bab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bab4:	ee07 3a90 	vmov	s15, r3
 800bab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800babc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bac4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bacc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad0:	ee17 2a90 	vmov	r2, s15
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bad8:	e008      	b.n	800baec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	609a      	str	r2, [r3, #8]
}
 800baec:	bf00      	nop
 800baee:	3724      	adds	r7, #36	@ 0x24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	58024400 	.word	0x58024400
 800bafc:	03d09000 	.word	0x03d09000
 800bb00:	46000000 	.word	0x46000000
 800bb04:	4c742400 	.word	0x4c742400
 800bb08:	4a742400 	.word	0x4a742400
 800bb0c:	4bb71b00 	.word	0x4bb71b00

0800bb10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb1e:	4b53      	ldr	r3, [pc, #332]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb22:	f003 0303 	and.w	r3, r3, #3
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d101      	bne.n	800bb2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e099      	b.n	800bc62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb2e:	4b4f      	ldr	r3, [pc, #316]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a4e      	ldr	r2, [pc, #312]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb3a:	f7f6 ff79 	bl	8002a30 <HAL_GetTick>
 800bb3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb40:	e008      	b.n	800bb54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb42:	f7f6 ff75 	bl	8002a30 <HAL_GetTick>
 800bb46:	4602      	mov	r2, r0
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d901      	bls.n	800bb54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e086      	b.n	800bc62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb54:	4b45      	ldr	r3, [pc, #276]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1f0      	bne.n	800bb42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb60:	4b42      	ldr	r3, [pc, #264]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb64:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	031b      	lsls	r3, r3, #12
 800bb6e:	493f      	ldr	r1, [pc, #252]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb70:	4313      	orrs	r3, r2
 800bb72:	628b      	str	r3, [r1, #40]	@ 0x28
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	025b      	lsls	r3, r3, #9
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	431a      	orrs	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	041b      	lsls	r3, r3, #16
 800bb92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bb96:	431a      	orrs	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	061b      	lsls	r3, r3, #24
 800bba0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bba4:	4931      	ldr	r1, [pc, #196]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbaa:	4b30      	ldr	r3, [pc, #192]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	492d      	ldr	r1, [pc, #180]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bbbc:	4b2b      	ldr	r3, [pc, #172]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc0:	f023 0220 	bic.w	r2, r3, #32
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	4928      	ldr	r1, [pc, #160]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bbce:	4b27      	ldr	r3, [pc, #156]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd2:	4a26      	ldr	r2, [pc, #152]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbd4:	f023 0310 	bic.w	r3, r3, #16
 800bbd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bbda:	4b24      	ldr	r3, [pc, #144]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bbde:	4b24      	ldr	r3, [pc, #144]	@ (800bc70 <RCCEx_PLL2_Config+0x160>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	69d2      	ldr	r2, [r2, #28]
 800bbe6:	00d2      	lsls	r2, r2, #3
 800bbe8:	4920      	ldr	r1, [pc, #128]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bbee:	4b1f      	ldr	r3, [pc, #124]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf2:	4a1e      	ldr	r2, [pc, #120]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbf4:	f043 0310 	orr.w	r3, r3, #16
 800bbf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d106      	bne.n	800bc0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc00:	4b1a      	ldr	r3, [pc, #104]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc04:	4a19      	ldr	r2, [pc, #100]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc0c:	e00f      	b.n	800bc2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d106      	bne.n	800bc22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc14:	4b15      	ldr	r3, [pc, #84]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc18:	4a14      	ldr	r2, [pc, #80]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc20:	e005      	b.n	800bc2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc22:	4b12      	ldr	r3, [pc, #72]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc26:	4a11      	ldr	r2, [pc, #68]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bc2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc2e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a0e      	ldr	r2, [pc, #56]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc3a:	f7f6 fef9 	bl	8002a30 <HAL_GetTick>
 800bc3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc40:	e008      	b.n	800bc54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc42:	f7f6 fef5 	bl	8002a30 <HAL_GetTick>
 800bc46:	4602      	mov	r2, r0
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d901      	bls.n	800bc54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc50:	2303      	movs	r3, #3
 800bc52:	e006      	b.n	800bc62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc54:	4b05      	ldr	r3, [pc, #20]	@ (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d0f0      	beq.n	800bc42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	58024400 	.word	0x58024400
 800bc70:	ffff0007 	.word	0xffff0007

0800bc74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc82:	4b53      	ldr	r3, [pc, #332]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bc84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc86:	f003 0303 	and.w	r3, r3, #3
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d101      	bne.n	800bc92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e099      	b.n	800bdc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc92:	4b4f      	ldr	r3, [pc, #316]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a4e      	ldr	r2, [pc, #312]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bc98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc9e:	f7f6 fec7 	bl	8002a30 <HAL_GetTick>
 800bca2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bca4:	e008      	b.n	800bcb8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bca6:	f7f6 fec3 	bl	8002a30 <HAL_GetTick>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d901      	bls.n	800bcb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	e086      	b.n	800bdc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcb8:	4b45      	ldr	r3, [pc, #276]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1f0      	bne.n	800bca6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bcc4:	4b42      	ldr	r3, [pc, #264]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bcc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	051b      	lsls	r3, r3, #20
 800bcd2:	493f      	ldr	r1, [pc, #252]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	628b      	str	r3, [r1, #40]	@ 0x28
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	025b      	lsls	r3, r3, #9
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	431a      	orrs	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	041b      	lsls	r3, r3, #16
 800bcf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	061b      	lsls	r3, r3, #24
 800bd04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd08:	4931      	ldr	r1, [pc, #196]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd0e:	4b30      	ldr	r3, [pc, #192]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	492d      	ldr	r1, [pc, #180]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd20:	4b2b      	ldr	r3, [pc, #172]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	699b      	ldr	r3, [r3, #24]
 800bd2c:	4928      	ldr	r1, [pc, #160]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd32:	4b27      	ldr	r3, [pc, #156]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd36:	4a26      	ldr	r2, [pc, #152]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd3e:	4b24      	ldr	r3, [pc, #144]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd42:	4b24      	ldr	r3, [pc, #144]	@ (800bdd4 <RCCEx_PLL3_Config+0x160>)
 800bd44:	4013      	ands	r3, r2
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	69d2      	ldr	r2, [r2, #28]
 800bd4a:	00d2      	lsls	r2, r2, #3
 800bd4c:	4920      	ldr	r1, [pc, #128]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd52:	4b1f      	ldr	r3, [pc, #124]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd56:	4a1e      	ldr	r2, [pc, #120]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d106      	bne.n	800bd72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd64:	4b1a      	ldr	r3, [pc, #104]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd68:	4a19      	ldr	r2, [pc, #100]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bd6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd70:	e00f      	b.n	800bd92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d106      	bne.n	800bd86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd78:	4b15      	ldr	r3, [pc, #84]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd7c:	4a14      	ldr	r2, [pc, #80]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd84:	e005      	b.n	800bd92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bd86:	4b12      	ldr	r3, [pc, #72]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd8a:	4a11      	ldr	r2, [pc, #68]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bd92:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a0e      	ldr	r2, [pc, #56]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd9e:	f7f6 fe47 	bl	8002a30 <HAL_GetTick>
 800bda2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bda4:	e008      	b.n	800bdb8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bda6:	f7f6 fe43 	bl	8002a30 <HAL_GetTick>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d901      	bls.n	800bdb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e006      	b.n	800bdc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdb8:	4b05      	ldr	r3, [pc, #20]	@ (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0f0      	beq.n	800bda6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	58024400 	.word	0x58024400
 800bdd4:	ffff0007 	.word	0xffff0007

0800bdd8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b08a      	sub	sp, #40	@ 0x28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e075      	b.n	800bed6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d105      	bne.n	800be02 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7f6 fa75 	bl	80022ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2204      	movs	r2, #4
 800be06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f868 	bl	800bee0 <HAL_SD_InitCard>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e05d      	b.n	800bed6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800be1a:	f107 0308 	add.w	r3, r7, #8
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fdaf 	bl	800c984 <HAL_SD_GetCardStatus>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e052      	b.n	800bed6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800be30:	7e3b      	ldrb	r3, [r7, #24]
 800be32:	b2db      	uxtb	r3, r3
 800be34:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800be36:	7e7b      	ldrb	r3, [r7, #25]
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be40:	2b01      	cmp	r3, #1
 800be42:	d10a      	bne.n	800be5a <HAL_SD_Init+0x82>
 800be44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be46:	2b00      	cmp	r3, #0
 800be48:	d102      	bne.n	800be50 <HAL_SD_Init+0x78>
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d004      	beq.n	800be5a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be56:	659a      	str	r2, [r3, #88]	@ 0x58
 800be58:	e00b      	b.n	800be72 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d104      	bne.n	800be6c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be68:	659a      	str	r2, [r3, #88]	@ 0x58
 800be6a:	e002      	b.n	800be72 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fe6d 	bl	800cb58 <HAL_SD_ConfigWideBusOperation>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	e026      	b.n	800bed6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800be88:	f7f6 fdd2 	bl	8002a30 <HAL_GetTick>
 800be8c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800be8e:	e011      	b.n	800beb4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be90:	f7f6 fdce 	bl	8002a30 <HAL_GetTick>
 800be94:	4602      	mov	r2, r0
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9e:	d109      	bne.n	800beb4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bea6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e010      	b.n	800bed6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 ff61 	bl	800cd7c <HAL_SD_GetCardState>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b04      	cmp	r3, #4
 800bebe:	d1e7      	bne.n	800be90 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3728      	adds	r7, #40	@ 0x28
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
	...

0800bee0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bee0:	b590      	push	{r4, r7, lr}
 800bee2:	b08d      	sub	sp, #52	@ 0x34
 800bee4:	af02      	add	r7, sp, #8
 800bee6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bee8:	2300      	movs	r3, #0
 800beea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800beec:	2300      	movs	r3, #0
 800beee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bef0:	2300      	movs	r3, #0
 800bef2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bef4:	2300      	movs	r3, #0
 800bef6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bef8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800befc:	f04f 0100 	mov.w	r1, #0
 800bf00:	f7fe fd24 	bl	800a94c <HAL_RCCEx_GetPeriphCLKFreq>
 800bf04:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800bf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d109      	bne.n	800bf20 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800bf1a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e070      	b.n	800c002 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bf20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf22:	0a1b      	lsrs	r3, r3, #8
 800bf24:	4a39      	ldr	r2, [pc, #228]	@ (800c00c <HAL_SD_InitCard+0x12c>)
 800bf26:	fba2 2303 	umull	r2, r3, r2, r3
 800bf2a:	091b      	lsrs	r3, r3, #4
 800bf2c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681c      	ldr	r4, [r3, #0]
 800bf32:	466a      	mov	r2, sp
 800bf34:	f107 0318 	add.w	r3, r7, #24
 800bf38:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf3c:	e882 0003 	stmia.w	r2, {r0, r1}
 800bf40:	f107 030c 	add.w	r3, r7, #12
 800bf44:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf46:	4620      	mov	r0, r4
 800bf48:	f003 fffe 	bl	800ff48 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f004 f841 	bl	800ffd8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d005      	beq.n	800bf68 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf62:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf66:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800bf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d007      	beq.n	800bf7e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bf6e:	4a28      	ldr	r2, [pc, #160]	@ (800c010 <HAL_SD_InitCard+0x130>)
 800bf70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf72:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf76:	3301      	adds	r3, #1
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7f6 fd65 	bl	8002a48 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 ffea 	bl	800cf58 <SD_PowerON>
 800bf84:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00b      	beq.n	800bfa4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf98:	6a3b      	ldr	r3, [r7, #32]
 800bf9a:	431a      	orrs	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e02e      	b.n	800c002 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 ff09 	bl	800cdbc <SD_InitCard>
 800bfaa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00b      	beq.n	800bfca <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e01b      	b.n	800c002 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f004 f896 	bl	8010104 <SDMMC_CmdBlockLength>
 800bfd8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfda:	6a3b      	ldr	r3, [r7, #32]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00f      	beq.n	800c000 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a0b      	ldr	r2, [pc, #44]	@ (800c014 <HAL_SD_InitCard+0x134>)
 800bfe6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	431a      	orrs	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e000      	b.n	800c002 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	372c      	adds	r7, #44	@ 0x2c
 800c006:	46bd      	mov	sp, r7
 800c008:	bd90      	pop	{r4, r7, pc}
 800c00a:	bf00      	nop
 800c00c:	014f8b59 	.word	0x014f8b59
 800c010:	00012110 	.word	0x00012110
 800c014:	1fe00fff 	.word	0x1fe00fff

0800c018 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08c      	sub	sp, #48	@ 0x30
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d107      	bne.n	800c040 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c034:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e08d      	b.n	800c15c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b01      	cmp	r3, #1
 800c04a:	f040 8086 	bne.w	800c15a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2200      	movs	r2, #0
 800c052:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	441a      	add	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c05e:	429a      	cmp	r2, r3
 800c060:	d907      	bls.n	800c072 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c066:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e074      	b.n	800c15c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2203      	movs	r2, #3
 800c076:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2200      	movs	r2, #0
 800c080:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	025a      	lsls	r2, r3, #9
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c094:	2b01      	cmp	r3, #1
 800c096:	d002      	beq.n	800c09e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09a:	025b      	lsls	r3, r3, #9
 800c09c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c09e:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	025b      	lsls	r3, r3, #9
 800c0a8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c0aa:	2390      	movs	r3, #144	@ 0x90
 800c0ac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f107 0210 	add.w	r2, r7, #16
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f003 fff1 	bl	80100ac <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0d8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d90a      	bls.n	800c106 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2282      	movs	r2, #130	@ 0x82
 800c0f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f004 f847 	bl	8010190 <SDMMC_CmdReadMultiBlock>
 800c102:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c104:	e009      	b.n	800c11a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2281      	movs	r2, #129	@ 0x81
 800c10a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c112:	4618      	mov	r0, r3
 800c114:	f004 f819 	bl	801014a <SDMMC_CmdReadSingleBlock>
 800c118:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d012      	beq.n	800c146 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a0f      	ldr	r2, [pc, #60]	@ (800c164 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c126:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12e:	431a      	orrs	r2, r3
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2200      	movs	r2, #0
 800c140:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e00a      	b.n	800c15c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c154:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	e000      	b.n	800c15c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c15a:	2302      	movs	r3, #2
  }
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3730      	adds	r7, #48	@ 0x30
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	1fe00fff 	.word	0x1fe00fff

0800c168 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08c      	sub	sp, #48	@ 0x30
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d107      	bne.n	800c190 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c184:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	e08d      	b.n	800c2ac <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b01      	cmp	r3, #1
 800c19a:	f040 8086 	bne.w	800c2aa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c1a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	441a      	add	r2, r3
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d907      	bls.n	800c1c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1b6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e074      	b.n	800c2ac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2203      	movs	r2, #3
 800c1c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	025a      	lsls	r2, r3, #9
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d002      	beq.n	800c1ee <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ea:	025b      	lsls	r3, r3, #9
 800c1ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	025b      	lsls	r3, r3, #9
 800c1f8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c1fa:	2390      	movs	r3, #144	@ 0x90
 800c1fc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c1fe:	2300      	movs	r3, #0
 800c200:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c202:	2300      	movs	r3, #0
 800c204:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c206:	2300      	movs	r3, #0
 800c208:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f107 0210 	add.w	r2, r7, #16
 800c212:	4611      	mov	r1, r2
 800c214:	4618      	mov	r0, r3
 800c216:	f003 ff49 	bl	80100ac <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68da      	ldr	r2, [r3, #12]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c228:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2201      	movs	r2, #1
 800c238:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d90a      	bls.n	800c256 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	22a0      	movs	r2, #160	@ 0xa0
 800c244:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c24c:	4618      	mov	r0, r3
 800c24e:	f003 ffe5 	bl	801021c <SDMMC_CmdWriteMultiBlock>
 800c252:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c254:	e009      	b.n	800c26a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2290      	movs	r2, #144	@ 0x90
 800c25a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c262:	4618      	mov	r0, r3
 800c264:	f003 ffb7 	bl	80101d6 <SDMMC_CmdWriteSingleBlock>
 800c268:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d012      	beq.n	800c296 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a0f      	ldr	r2, [pc, #60]	@ (800c2b4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c276:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c27e:	431a      	orrs	r2, r3
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	e00a      	b.n	800c2ac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c2a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e000      	b.n	800c2ac <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c2aa:	2302      	movs	r3, #2
  }
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3730      	adds	r7, #48	@ 0x30
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	1fe00fff 	.word	0x1fe00fff

0800c2b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d008      	beq.n	800c2e6 <HAL_SD_IRQHandler+0x2e>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f003 0308 	and.w	r3, r3, #8
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d003      	beq.n	800c2e6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f001 f926 	bl	800d530 <SD_Read_IT>
 800c2e4:	e19a      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 80ac 	beq.w	800c44e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c2fe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	4b59      	ldr	r3, [pc, #356]	@ (800c470 <HAL_SD_IRQHandler+0x1b8>)
 800c30c:	400b      	ands	r3, r1
 800c30e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c31e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68da      	ldr	r2, [r3, #12]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c32e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f003 0308 	and.w	r3, r3, #8
 800c336:	2b00      	cmp	r3, #0
 800c338:	d038      	beq.n	800c3ac <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f003 0302 	and.w	r3, r3, #2
 800c340:	2b00      	cmp	r3, #0
 800c342:	d104      	bne.n	800c34e <HAL_SD_IRQHandler+0x96>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f003 0320 	and.w	r3, r3, #32
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d011      	beq.n	800c372 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4618      	mov	r0, r3
 800c354:	f003 ff86 	bl	8010264 <SDMMC_CmdStopTransfer>
 800c358:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d008      	beq.n	800c372 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	431a      	orrs	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f95b 	bl	800c628 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a3f      	ldr	r2, [pc, #252]	@ (800c474 <HAL_SD_IRQHandler+0x1bc>)
 800c378:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2201      	movs	r2, #1
 800c37e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d104      	bne.n	800c39c <HAL_SD_IRQHandler+0xe4>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f003 0302 	and.w	r3, r3, #2
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d003      	beq.n	800c3a4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f004 fc31 	bl	8010c04 <HAL_SD_RxCpltCallback>
 800c3a2:	e13b      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f004 fc23 	bl	8010bf0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c3aa:	e137      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f000 8132 	beq.w	800c61c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f003 0302 	and.w	r3, r3, #2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d104      	bne.n	800c3e4 <HAL_SD_IRQHandler+0x12c>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f003 0320 	and.w	r3, r3, #32
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d011      	beq.n	800c408 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f003 ff3b 	bl	8010264 <SDMMC_CmdStopTransfer>
 800c3ee:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d008      	beq.n	800c408 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	431a      	orrs	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f910 	bl	800c628 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f003 0310 	and.w	r3, r3, #16
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d104      	bne.n	800c42a <HAL_SD_IRQHandler+0x172>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f003 0320 	and.w	r3, r3, #32
 800c426:	2b00      	cmp	r3, #0
 800c428:	d002      	beq.n	800c430 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f004 fbe0 	bl	8010bf0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f003 0301 	and.w	r3, r3, #1
 800c436:	2b00      	cmp	r3, #0
 800c438:	d105      	bne.n	800c446 <HAL_SD_IRQHandler+0x18e>
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f003 0302 	and.w	r3, r3, #2
 800c440:	2b00      	cmp	r3, #0
 800c442:	f000 80eb 	beq.w	800c61c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f004 fbdc 	bl	8010c04 <HAL_SD_RxCpltCallback>
}
 800c44c:	e0e6      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c454:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00d      	beq.n	800c478 <HAL_SD_IRQHandler+0x1c0>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f003 0308 	and.w	r3, r3, #8
 800c462:	2b00      	cmp	r3, #0
 800c464:	d008      	beq.n	800c478 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 f8a8 	bl	800d5bc <SD_Write_IT>
 800c46c:	e0d6      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
 800c46e:	bf00      	nop
 800c470:	ffff3ec5 	.word	0xffff3ec5
 800c474:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c47e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 809d 	beq.w	800c5c2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c48e:	f003 0302 	and.w	r3, r3, #2
 800c492:	2b00      	cmp	r3, #0
 800c494:	d005      	beq.n	800c4a2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c49a:	f043 0202 	orr.w	r2, r3, #2
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a8:	f003 0308 	and.w	r3, r3, #8
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d005      	beq.n	800c4bc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4b4:	f043 0208 	orr.w	r2, r3, #8
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4c2:	f003 0320 	and.w	r3, r3, #32
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d005      	beq.n	800c4d6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4ce:	f043 0220 	orr.w	r2, r3, #32
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4dc:	f003 0310 	and.w	r3, r3, #16
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d005      	beq.n	800c4f0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e8:	f043 0210 	orr.w	r2, r3, #16
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a4b      	ldr	r2, [pc, #300]	@ (800c624 <HAL_SD_IRQHandler+0x36c>)
 800c4f6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c506:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68da      	ldr	r2, [r3, #12]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c516:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c526:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	68da      	ldr	r2, [r3, #12]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c536:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f003 fe91 	bl	8010264 <SDMMC_CmdStopTransfer>
 800c542:	4602      	mov	r2, r0
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c548:	431a      	orrs	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68da      	ldr	r2, [r3, #12]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c55c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c566:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f003 0308 	and.w	r3, r3, #8
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00a      	beq.n	800c588 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2201      	movs	r2, #1
 800c576:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f851 	bl	800c628 <HAL_SD_ErrorCallback>
}
 800c586:	e049      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d044      	beq.n	800c61c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c596:	2b00      	cmp	r3, #0
 800c598:	d040      	beq.n	800c61c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c5a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f834 	bl	800c628 <HAL_SD_ErrorCallback>
}
 800c5c0:	e02c      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d025      	beq.n	800c61c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5d8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5e0:	f003 0304 	and.w	r3, r3, #4
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10c      	bne.n	800c602 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f003 0320 	and.w	r3, r3, #32
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d003      	beq.n	800c5fa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f001 f84a 	bl	800d68c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c5f8:	e010      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f001 f832 	bl	800d664 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c600:	e00c      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f003 0320 	and.w	r3, r3, #32
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f001 f833 	bl	800d678 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c612:	e003      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f001 f81b 	bl	800d650 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c61a:	e7ff      	b.n	800c61c <HAL_SD_IRQHandler+0x364>
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	18000f3a 	.word	0x18000f3a

0800c628 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c64a:	0f9b      	lsrs	r3, r3, #30
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c656:	0e9b      	lsrs	r3, r3, #26
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	f003 030f 	and.w	r3, r3, #15
 800c65e:	b2da      	uxtb	r2, r3
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c668:	0e1b      	lsrs	r3, r3, #24
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	f003 0303 	and.w	r3, r3, #3
 800c670:	b2da      	uxtb	r2, r3
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c67a:	0c1b      	lsrs	r3, r3, #16
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c686:	0a1b      	lsrs	r3, r3, #8
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c692:	b2da      	uxtb	r2, r3
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c69c:	0d1b      	lsrs	r3, r3, #20
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6a8:	0c1b      	lsrs	r3, r3, #16
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	f003 030f 	and.w	r3, r3, #15
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6ba:	0bdb      	lsrs	r3, r3, #15
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	f003 0301 	and.w	r3, r3, #1
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6cc:	0b9b      	lsrs	r3, r3, #14
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6de:	0b5b      	lsrs	r3, r3, #13
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	b2da      	uxtb	r2, r3
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6f0:	0b1b      	lsrs	r3, r3, #12
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	f003 0301 	and.w	r3, r3, #1
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	2200      	movs	r2, #0
 800c702:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d163      	bne.n	800c7d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c710:	009a      	lsls	r2, r3, #2
 800c712:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c716:	4013      	ands	r3, r2
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c71c:	0f92      	lsrs	r2, r2, #30
 800c71e:	431a      	orrs	r2, r3
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c728:	0edb      	lsrs	r3, r3, #27
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	f003 0307 	and.w	r3, r3, #7
 800c730:	b2da      	uxtb	r2, r3
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c73a:	0e1b      	lsrs	r3, r3, #24
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	b2da      	uxtb	r2, r3
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c74c:	0d5b      	lsrs	r3, r3, #21
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	f003 0307 	and.w	r3, r3, #7
 800c754:	b2da      	uxtb	r2, r3
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c75e:	0c9b      	lsrs	r3, r3, #18
 800c760:	b2db      	uxtb	r3, r3
 800c762:	f003 0307 	and.w	r3, r3, #7
 800c766:	b2da      	uxtb	r2, r3
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c770:	0bdb      	lsrs	r3, r3, #15
 800c772:	b2db      	uxtb	r3, r3
 800c774:	f003 0307 	and.w	r3, r3, #7
 800c778:	b2da      	uxtb	r2, r3
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	1c5a      	adds	r2, r3, #1
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	7e1b      	ldrb	r3, [r3, #24]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	f003 0307 	and.w	r3, r3, #7
 800c792:	3302      	adds	r3, #2
 800c794:	2201      	movs	r2, #1
 800c796:	fa02 f303 	lsl.w	r3, r2, r3
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c79e:	fb03 f202 	mul.w	r2, r3, r2
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	7a1b      	ldrb	r3, [r3, #8]
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	f003 030f 	and.w	r3, r3, #15
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	409a      	lsls	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c7c0:	0a52      	lsrs	r2, r2, #9
 800c7c2:	fb03 f202 	mul.w	r2, r3, r2
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7d0:	655a      	str	r2, [r3, #84]	@ 0x54
 800c7d2:	e031      	b.n	800c838 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d11d      	bne.n	800c818 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7e0:	041b      	lsls	r3, r3, #16
 800c7e2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ea:	0c1b      	lsrs	r3, r3, #16
 800c7ec:	431a      	orrs	r2, r3
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	029a      	lsls	r2, r3, #10
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c80c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	655a      	str	r2, [r3, #84]	@ 0x54
 800c816:	e00f      	b.n	800c838 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a58      	ldr	r2, [pc, #352]	@ (800c980 <HAL_SD_GetCardCSD+0x344>)
 800c81e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c824:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c834:	2301      	movs	r3, #1
 800c836:	e09d      	b.n	800c974 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c83c:	0b9b      	lsrs	r3, r3, #14
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	b2da      	uxtb	r2, r3
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c84e:	09db      	lsrs	r3, r3, #7
 800c850:	b2db      	uxtb	r3, r3
 800c852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c856:	b2da      	uxtb	r2, r3
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c860:	b2db      	uxtb	r3, r3
 800c862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c866:	b2da      	uxtb	r2, r3
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c870:	0fdb      	lsrs	r3, r3, #31
 800c872:	b2da      	uxtb	r2, r3
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c87c:	0f5b      	lsrs	r3, r3, #29
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	f003 0303 	and.w	r3, r3, #3
 800c884:	b2da      	uxtb	r2, r3
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c88e:	0e9b      	lsrs	r3, r3, #26
 800c890:	b2db      	uxtb	r3, r3
 800c892:	f003 0307 	and.w	r3, r3, #7
 800c896:	b2da      	uxtb	r2, r3
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8a0:	0d9b      	lsrs	r3, r3, #22
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 030f 	and.w	r3, r3, #15
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8b2:	0d5b      	lsrs	r3, r3, #21
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	f003 0301 	and.w	r3, r3, #1
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8ce:	0c1b      	lsrs	r3, r3, #16
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8e2:	0bdb      	lsrs	r3, r3, #15
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8f6:	0b9b      	lsrs	r3, r3, #14
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c90a:	0b5b      	lsrs	r3, r3, #13
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c91e:	0b1b      	lsrs	r3, r3, #12
 800c920:	b2db      	uxtb	r3, r3
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	b2da      	uxtb	r2, r3
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c932:	0a9b      	lsrs	r3, r3, #10
 800c934:	b2db      	uxtb	r3, r3
 800c936:	f003 0303 	and.w	r3, r3, #3
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c946:	0a1b      	lsrs	r3, r3, #8
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	f003 0303 	and.w	r3, r3, #3
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c95a:	085b      	lsrs	r3, r3, #1
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c962:	b2da      	uxtb	r2, r3
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2201      	movs	r2, #1
 800c96e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	1fe00fff 	.word	0x1fe00fff

0800c984 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b094      	sub	sp, #80	@ 0x50
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b03      	cmp	r3, #3
 800c99e:	d101      	bne.n	800c9a4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e0a7      	b.n	800caf4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c9a4:	f107 0308 	add.w	r3, r7, #8
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fb62 	bl	800d074 <SD_SendSDStatus>
 800c9b0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c9b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d011      	beq.n	800c9dc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a4f      	ldr	r2, [pc, #316]	@ (800cafc <HAL_SD_GetCardStatus+0x178>)
 800c9be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c9da:	e070      	b.n	800cabe <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	099b      	lsrs	r3, r3, #6
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	f003 0303 	and.w	r3, r3, #3
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	095b      	lsrs	r3, r3, #5
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	f003 0301 	and.w	r3, r3, #1
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	0a1b      	lsrs	r3, r3, #8
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	0e1b      	lsrs	r3, r3, #24
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	061a      	lsls	r2, r3, #24
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	021b      	lsls	r3, r3, #8
 800ca1e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ca22:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	0a1b      	lsrs	r3, r3, #8
 800ca28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca2c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	0e1b      	lsrs	r3, r3, #24
 800ca32:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	0a1b      	lsrs	r3, r3, #8
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	0d1b      	lsrs	r3, r3, #20
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	f003 030f 	and.w	r3, r3, #15
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	0c1b      	lsrs	r3, r3, #16
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	0a9b      	lsrs	r3, r3, #10
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	0a1b      	lsrs	r3, r3, #8
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	f003 0303 	and.w	r3, r3, #3
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	091b      	lsrs	r3, r3, #4
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	f003 030f 	and.w	r3, r3, #15
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	f003 030f 	and.w	r3, r3, #15
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	0e1b      	lsrs	r3, r3, #24
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cac6:	4618      	mov	r0, r3
 800cac8:	f003 fb1c 	bl	8010104 <SDMMC_CmdBlockLength>
 800cacc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00d      	beq.n	800caf0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a08      	ldr	r2, [pc, #32]	@ (800cafc <HAL_SD_GetCardStatus+0x178>)
 800cada:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cae0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2201      	movs	r2, #1
 800cae6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800caf0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3750      	adds	r7, #80	@ 0x50
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	1fe00fff 	.word	0x1fe00fff

0800cb00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cb58:	b590      	push	{r4, r7, lr}
 800cb5a:	b08d      	sub	sp, #52	@ 0x34
 800cb5c:	af02      	add	r7, sp, #8
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2203      	movs	r2, #3
 800cb6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	d02e      	beq.n	800cbd6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb7e:	d106      	bne.n	800cb8e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	635a      	str	r2, [r3, #52]	@ 0x34
 800cb8c:	e029      	b.n	800cbe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb94:	d10a      	bne.n	800cbac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fb64 	bl	800d264 <SD_WideBus_Enable>
 800cb9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cba2:	6a3b      	ldr	r3, [r7, #32]
 800cba4:	431a      	orrs	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbaa:	e01a      	b.n	800cbe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d10a      	bne.n	800cbc8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 fba1 	bl	800d2fa <SD_WideBus_Disable>
 800cbb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbbe:	6a3b      	ldr	r3, [r7, #32]
 800cbc0:	431a      	orrs	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbc6:	e00c      	b.n	800cbe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbcc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbd4:	e005      	b.n	800cbe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbda:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d007      	beq.n	800cbfa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a5f      	ldr	r2, [pc, #380]	@ (800cd6c <HAL_SD_ConfigWideBusOperation+0x214>)
 800cbf0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cbf8:	e096      	b.n	800cd28 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cbfa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800cbfe:	f04f 0100 	mov.w	r1, #0
 800cc02:	f7fd fea3 	bl	800a94c <HAL_RCCEx_GetPeriphCLKFreq>
 800cc06:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 8083 	beq.w	800cd16 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	695a      	ldr	r2, [r3, #20]
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	4950      	ldr	r1, [pc, #320]	@ (800cd70 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc2e:	fba1 1303 	umull	r1, r3, r1, r3
 800cc32:	0e1b      	lsrs	r3, r3, #24
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d303      	bcc.n	800cc40 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	61bb      	str	r3, [r7, #24]
 800cc3e:	e05a      	b.n	800ccf6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc48:	d103      	bne.n	800cc52 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	695b      	ldr	r3, [r3, #20]
 800cc4e:	61bb      	str	r3, [r7, #24]
 800cc50:	e051      	b.n	800ccf6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc5a:	d126      	bne.n	800ccaa <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10e      	bne.n	800cc82 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	4a43      	ldr	r2, [pc, #268]	@ (800cd74 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d906      	bls.n	800cc7a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	4a40      	ldr	r2, [pc, #256]	@ (800cd70 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc70:	fba2 2303 	umull	r2, r3, r2, r3
 800cc74:	0e5b      	lsrs	r3, r3, #25
 800cc76:	61bb      	str	r3, [r7, #24]
 800cc78:	e03d      	b.n	800ccf6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	61bb      	str	r3, [r7, #24]
 800cc80:	e039      	b.n	800ccf6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	005b      	lsls	r3, r3, #1
 800cc88:	69fa      	ldr	r2, [r7, #28]
 800cc8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc8e:	4a39      	ldr	r2, [pc, #228]	@ (800cd74 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d906      	bls.n	800cca2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	4a36      	ldr	r2, [pc, #216]	@ (800cd70 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc98:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9c:	0e5b      	lsrs	r3, r3, #25
 800cc9e:	61bb      	str	r3, [r7, #24]
 800cca0:	e029      	b.n	800ccf6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	61bb      	str	r3, [r7, #24]
 800cca8:	e025      	b.n	800ccf6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10e      	bne.n	800ccd0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	4a30      	ldr	r2, [pc, #192]	@ (800cd78 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d906      	bls.n	800ccc8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	4a2c      	ldr	r2, [pc, #176]	@ (800cd70 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccbe:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc2:	0e1b      	lsrs	r3, r3, #24
 800ccc4:	61bb      	str	r3, [r7, #24]
 800ccc6:	e016      	b.n	800ccf6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	61bb      	str	r3, [r7, #24]
 800ccce:	e012      	b.n	800ccf6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	69fa      	ldr	r2, [r7, #28]
 800ccd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccdc:	4a26      	ldr	r2, [pc, #152]	@ (800cd78 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d906      	bls.n	800ccf0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	4a22      	ldr	r2, [pc, #136]	@ (800cd70 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cce6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccea:	0e1b      	lsrs	r3, r3, #24
 800ccec:	61bb      	str	r3, [r7, #24]
 800ccee:	e002      	b.n	800ccf6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	695b      	ldr	r3, [r3, #20]
 800ccf4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681c      	ldr	r4, [r3, #0]
 800ccfa:	466a      	mov	r2, sp
 800ccfc:	f107 0314 	add.w	r3, r7, #20
 800cd00:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd04:	e882 0003 	stmia.w	r2, {r0, r1}
 800cd08:	f107 0308 	add.w	r3, r7, #8
 800cd0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f003 f91a 	bl	800ff48 <SDMMC_Init>
 800cd14:	e008      	b.n	800cd28 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd1a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd30:	4618      	mov	r0, r3
 800cd32:	f003 f9e7 	bl	8010104 <SDMMC_CmdBlockLength>
 800cd36:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd38:	6a3b      	ldr	r3, [r7, #32]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00c      	beq.n	800cd58 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a0a      	ldr	r2, [pc, #40]	@ (800cd6c <HAL_SD_ConfigWideBusOperation+0x214>)
 800cd44:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd4a:	6a3b      	ldr	r3, [r7, #32]
 800cd4c:	431a      	orrs	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cd60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	372c      	adds	r7, #44	@ 0x2c
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd90      	pop	{r4, r7, pc}
 800cd6c:	1fe00fff 	.word	0x1fe00fff
 800cd70:	55e63b89 	.word	0x55e63b89
 800cd74:	02faf080 	.word	0x02faf080
 800cd78:	017d7840 	.word	0x017d7840

0800cd7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cd84:	2300      	movs	r3, #0
 800cd86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cd88:	f107 030c 	add.w	r3, r7, #12
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 fa40 	bl	800d214 <SD_SendStatus>
 800cd94:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d005      	beq.n	800cda8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	431a      	orrs	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	0a5b      	lsrs	r3, r3, #9
 800cdac:	f003 030f 	and.w	r3, r3, #15
 800cdb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cdb2:	693b      	ldr	r3, [r7, #16]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3718      	adds	r7, #24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b090      	sub	sp, #64	@ 0x40
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cdc8:	f7f5 fe32 	bl	8002a30 <HAL_GetTick>
 800cdcc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f003 f911 	bl	800fffa <SDMMC_GetPowerState>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d102      	bne.n	800cde4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cdde:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cde2:	e0b5      	b.n	800cf50 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d02e      	beq.n	800ce4a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f003 fb5c 	bl	80104ae <SDMMC_CmdSendCID>
 800cdf6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <SD_InitCard+0x46>
    {
      return errorstate;
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce00:	e0a6      	b.n	800cf50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2100      	movs	r1, #0
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f003 f93c 	bl	8010086 <SDMMC_GetResponse>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2104      	movs	r1, #4
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f003 f933 	bl	8010086 <SDMMC_GetResponse>
 800ce20:	4602      	mov	r2, r0
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2108      	movs	r1, #8
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f003 f92a 	bl	8010086 <SDMMC_GetResponse>
 800ce32:	4602      	mov	r2, r0
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	210c      	movs	r1, #12
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f003 f921 	bl	8010086 <SDMMC_GetResponse>
 800ce44:	4602      	mov	r2, r0
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce4e:	2b03      	cmp	r3, #3
 800ce50:	d01d      	beq.n	800ce8e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ce52:	e019      	b.n	800ce88 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f107 020a 	add.w	r2, r7, #10
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f003 fb64 	bl	801052c <SDMMC_CmdSetRelAdd>
 800ce64:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ce66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d001      	beq.n	800ce70 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6e:	e06f      	b.n	800cf50 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ce70:	f7f5 fdde 	bl	8002a30 <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d902      	bls.n	800ce88 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ce82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce86:	e063      	b.n	800cf50 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ce88:	897b      	ldrh	r3, [r7, #10]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0e2      	beq.n	800ce54 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d036      	beq.n	800cf04 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ce96:	897b      	ldrh	r3, [r7, #10]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea6:	041b      	lsls	r3, r3, #16
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4610      	mov	r0, r2
 800ceac:	f003 fb1e 	bl	80104ec <SDMMC_CmdSendCSD>
 800ceb0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <SD_InitCard+0x100>
    {
      return errorstate;
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceba:	e049      	b.n	800cf50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2100      	movs	r1, #0
 800cec2:	4618      	mov	r0, r3
 800cec4:	f003 f8df 	bl	8010086 <SDMMC_GetResponse>
 800cec8:	4602      	mov	r2, r0
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2104      	movs	r1, #4
 800ced4:	4618      	mov	r0, r3
 800ced6:	f003 f8d6 	bl	8010086 <SDMMC_GetResponse>
 800ceda:	4602      	mov	r2, r0
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2108      	movs	r1, #8
 800cee6:	4618      	mov	r0, r3
 800cee8:	f003 f8cd 	bl	8010086 <SDMMC_GetResponse>
 800ceec:	4602      	mov	r2, r0
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	210c      	movs	r1, #12
 800cef8:	4618      	mov	r0, r3
 800cefa:	f003 f8c4 	bl	8010086 <SDMMC_GetResponse>
 800cefe:	4602      	mov	r2, r0
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2104      	movs	r1, #4
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f003 f8bb 	bl	8010086 <SDMMC_GetResponse>
 800cf10:	4603      	mov	r3, r0
 800cf12:	0d1a      	lsrs	r2, r3, #20
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cf18:	f107 030c 	add.w	r3, r7, #12
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f7ff fb8c 	bl	800c63c <HAL_SD_GetCardCSD>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cf2e:	e00f      	b.n	800cf50 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf38:	041b      	lsls	r3, r3, #16
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	f003 f9cd 	bl	80102dc <SDMMC_CmdSelDesel>
 800cf42:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <SD_InitCard+0x192>
  {
    return errorstate;
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4c:	e000      	b.n	800cf50 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cf4e:	2300      	movs	r3, #0
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3740      	adds	r7, #64	@ 0x40
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf60:	2300      	movs	r3, #0
 800cf62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cf64:	2300      	movs	r3, #0
 800cf66:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f003 f9d6 	bl	8010322 <SDMMC_CmdGoIdleState>
 800cf76:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	e072      	b.n	800d068 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4618      	mov	r0, r3
 800cf88:	f003 f9e9 	bl	801035e <SDMMC_CmdOperCond>
 800cf8c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf94:	d10d      	bne.n	800cfb2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f003 f9be 	bl	8010322 <SDMMC_CmdGoIdleState>
 800cfa6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d004      	beq.n	800cfb8 <SD_PowerON+0x60>
    {
      return errorstate;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	e05a      	b.n	800d068 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d137      	bne.n	800d030 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f003 f9e9 	bl	801039e <SDMMC_CmdAppCommand>
 800cfcc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d02d      	beq.n	800d030 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfd4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cfd8:	e046      	b.n	800d068 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2100      	movs	r1, #0
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f003 f9dc 	bl	801039e <SDMMC_CmdAppCommand>
 800cfe6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	e03a      	b.n	800d068 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	491e      	ldr	r1, [pc, #120]	@ (800d070 <SD_PowerON+0x118>)
 800cff8:	4618      	mov	r0, r3
 800cffa:	f003 f9f3 	bl	80103e4 <SDMMC_CmdAppOperCommand>
 800cffe:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d002      	beq.n	800d00c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d006:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d00a:	e02d      	b.n	800d068 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2100      	movs	r1, #0
 800d012:	4618      	mov	r0, r3
 800d014:	f003 f837 	bl	8010086 <SDMMC_GetResponse>
 800d018:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	0fdb      	lsrs	r3, r3, #31
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d101      	bne.n	800d026 <SD_PowerON+0xce>
 800d022:	2301      	movs	r3, #1
 800d024:	e000      	b.n	800d028 <SD_PowerON+0xd0>
 800d026:	2300      	movs	r3, #0
 800d028:	613b      	str	r3, [r7, #16]

    count++;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	3301      	adds	r3, #1
 800d02e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d036:	4293      	cmp	r3, r2
 800d038:	d802      	bhi.n	800d040 <SD_PowerON+0xe8>
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d0cc      	beq.n	800cfda <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d046:	4293      	cmp	r3, r2
 800d048:	d902      	bls.n	800d050 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d04a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d04e:	e00b      	b.n	800d068 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	c1100000 	.word	0xc1100000

0800d074 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08c      	sub	sp, #48	@ 0x30
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d07e:	f7f5 fcd7 	bl	8002a30 <HAL_GetTick>
 800d082:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2100      	movs	r1, #0
 800d08e:	4618      	mov	r0, r3
 800d090:	f002 fff9 	bl	8010086 <SDMMC_GetResponse>
 800d094:	4603      	mov	r3, r0
 800d096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d09a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d09e:	d102      	bne.n	800d0a6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d0a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d0a4:	e0b0      	b.n	800d208 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2140      	movs	r1, #64	@ 0x40
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f003 f829 	bl	8010104 <SDMMC_CmdBlockLength>
 800d0b2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d005      	beq.n	800d0c6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d0c2:	6a3b      	ldr	r3, [r7, #32]
 800d0c4:	e0a0      	b.n	800d208 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ce:	041b      	lsls	r3, r3, #16
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	f003 f963 	bl	801039e <SDMMC_CmdAppCommand>
 800d0d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0da:	6a3b      	ldr	r3, [r7, #32]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d005      	beq.n	800d0ec <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d0e8:	6a3b      	ldr	r3, [r7, #32]
 800d0ea:	e08d      	b.n	800d208 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d0f2:	2340      	movs	r3, #64	@ 0x40
 800d0f4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d0f6:	2360      	movs	r3, #96	@ 0x60
 800d0f8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d102:	2301      	movs	r3, #1
 800d104:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f107 0208 	add.w	r2, r7, #8
 800d10e:	4611      	mov	r1, r2
 800d110:	4618      	mov	r0, r3
 800d112:	f002 ffcb 	bl	80100ac <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f003 fa4b 	bl	80105b6 <SDMMC_CmdStatusRegister>
 800d120:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d122:	6a3b      	ldr	r3, [r7, #32]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d02b      	beq.n	800d180 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d130:	6a3b      	ldr	r3, [r7, #32]
 800d132:	e069      	b.n	800d208 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d13a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d013      	beq.n	800d16a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d142:	2300      	movs	r3, #0
 800d144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d146:	e00d      	b.n	800d164 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f002 ff25 	bl	800ff9c <SDMMC_ReadFIFO>
 800d152:	4602      	mov	r2, r0
 800d154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d156:	601a      	str	r2, [r3, #0]
        pData++;
 800d158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15a:	3304      	adds	r3, #4
 800d15c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d160:	3301      	adds	r3, #1
 800d162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d166:	2b07      	cmp	r3, #7
 800d168:	d9ee      	bls.n	800d148 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d16a:	f7f5 fc61 	bl	8002a30 <HAL_GetTick>
 800d16e:	4602      	mov	r2, r0
 800d170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d172:	1ad3      	subs	r3, r2, r3
 800d174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d178:	d102      	bne.n	800d180 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d17a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d17e:	e043      	b.n	800d208 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d186:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d0d2      	beq.n	800d134 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d194:	f003 0308 	and.w	r3, r3, #8
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d001      	beq.n	800d1a0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d19c:	2308      	movs	r3, #8
 800d19e:	e033      	b.n	800d208 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1a6:	f003 0302 	and.w	r3, r3, #2
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1ae:	2302      	movs	r3, #2
 800d1b0:	e02a      	b.n	800d208 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1b8:	f003 0320 	and.w	r3, r3, #32
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d017      	beq.n	800d1f0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d1c0:	2320      	movs	r3, #32
 800d1c2:	e021      	b.n	800d208 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f002 fee7 	bl	800ff9c <SDMMC_ReadFIFO>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d2:	601a      	str	r2, [r3, #0]
    pData++;
 800d1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d1da:	f7f5 fc29 	bl	8002a30 <HAL_GetTick>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e8:	d102      	bne.n	800d1f0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d1ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d1ee:	e00b      	b.n	800d208 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1e2      	bne.n	800d1c4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a03      	ldr	r2, [pc, #12]	@ (800d210 <SD_SendSDStatus+0x19c>)
 800d204:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3730      	adds	r7, #48	@ 0x30
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	18000f3a 	.word	0x18000f3a

0800d214 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d102      	bne.n	800d22a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d224:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d228:	e018      	b.n	800d25c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d232:	041b      	lsls	r3, r3, #16
 800d234:	4619      	mov	r1, r3
 800d236:	4610      	mov	r0, r2
 800d238:	f003 f99a 	bl	8010570 <SDMMC_CmdSendStatus>
 800d23c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d001      	beq.n	800d248 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	e009      	b.n	800d25c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2100      	movs	r1, #0
 800d24e:	4618      	mov	r0, r3
 800d250:	f002 ff19 	bl	8010086 <SDMMC_GetResponse>
 800d254:	4602      	mov	r2, r0
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d26c:	2300      	movs	r3, #0
 800d26e:	60fb      	str	r3, [r7, #12]
 800d270:	2300      	movs	r3, #0
 800d272:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2100      	movs	r1, #0
 800d27a:	4618      	mov	r0, r3
 800d27c:	f002 ff03 	bl	8010086 <SDMMC_GetResponse>
 800d280:	4603      	mov	r3, r0
 800d282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d28a:	d102      	bne.n	800d292 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d28c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d290:	e02f      	b.n	800d2f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d292:	f107 030c 	add.w	r3, r7, #12
 800d296:	4619      	mov	r1, r3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 f879 	bl	800d390 <SD_FindSCR>
 800d29e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d001      	beq.n	800d2aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	e023      	b.n	800d2f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d01c      	beq.n	800d2ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2bc:	041b      	lsls	r3, r3, #16
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	f003 f86c 	bl	801039e <SDMMC_CmdAppCommand>
 800d2c6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	e00f      	b.n	800d2f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2102      	movs	r1, #2
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f003 f8a3 	bl	8010424 <SDMMC_CmdBusWidth>
 800d2de:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	e003      	b.n	800d2f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e001      	b.n	800d2f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3718      	adds	r7, #24
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b086      	sub	sp, #24
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]
 800d306:	2300      	movs	r3, #0
 800d308:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2100      	movs	r1, #0
 800d310:	4618      	mov	r0, r3
 800d312:	f002 feb8 	bl	8010086 <SDMMC_GetResponse>
 800d316:	4603      	mov	r3, r0
 800d318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d31c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d320:	d102      	bne.n	800d328 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d322:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d326:	e02f      	b.n	800d388 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d328:	f107 030c 	add.w	r3, r7, #12
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f82e 	bl	800d390 <SD_FindSCR>
 800d334:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d001      	beq.n	800d340 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	e023      	b.n	800d388 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d346:	2b00      	cmp	r3, #0
 800d348:	d01c      	beq.n	800d384 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d352:	041b      	lsls	r3, r3, #16
 800d354:	4619      	mov	r1, r3
 800d356:	4610      	mov	r0, r2
 800d358:	f003 f821 	bl	801039e <SDMMC_CmdAppCommand>
 800d35c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	e00f      	b.n	800d388 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2100      	movs	r1, #0
 800d36e:	4618      	mov	r0, r3
 800d370:	f003 f858 	bl	8010424 <SDMMC_CmdBusWidth>
 800d374:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d001      	beq.n	800d380 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	e003      	b.n	800d388 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d380:	2300      	movs	r3, #0
 800d382:	e001      	b.n	800d388 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d384:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3718      	adds	r7, #24
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b08e      	sub	sp, #56	@ 0x38
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d39a:	f7f5 fb49 	bl	8002a30 <HAL_GetTick>
 800d39e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	60bb      	str	r3, [r7, #8]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2108      	movs	r1, #8
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f002 fea4 	bl	8010104 <SDMMC_CmdBlockLength>
 800d3bc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c6:	e0ad      	b.n	800d524 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3d0:	041b      	lsls	r3, r3, #16
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	f002 ffe2 	bl	801039e <SDMMC_CmdAppCommand>
 800d3da:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d001      	beq.n	800d3e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e4:	e09e      	b.n	800d524 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d3ec:	2308      	movs	r3, #8
 800d3ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d3f0:	2330      	movs	r3, #48	@ 0x30
 800d3f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f107 0210 	add.w	r2, r7, #16
 800d408:	4611      	mov	r1, r2
 800d40a:	4618      	mov	r0, r3
 800d40c:	f002 fe4e 	bl	80100ac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4618      	mov	r0, r3
 800d416:	f003 f828 	bl	801046a <SDMMC_CmdSendSCR>
 800d41a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d027      	beq.n	800d472 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d424:	e07e      	b.n	800d524 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d430:	2b00      	cmp	r3, #0
 800d432:	d113      	bne.n	800d45c <SD_FindSCR+0xcc>
 800d434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d436:	2b00      	cmp	r3, #0
 800d438:	d110      	bne.n	800d45c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4618      	mov	r0, r3
 800d440:	f002 fdac 	bl	800ff9c <SDMMC_ReadFIFO>
 800d444:	4603      	mov	r3, r0
 800d446:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f002 fda5 	bl	800ff9c <SDMMC_ReadFIFO>
 800d452:	4603      	mov	r3, r0
 800d454:	60fb      	str	r3, [r7, #12]
      index++;
 800d456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d458:	3301      	adds	r3, #1
 800d45a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d45c:	f7f5 fae8 	bl	8002a30 <HAL_GetTick>
 800d460:	4602      	mov	r2, r0
 800d462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d46a:	d102      	bne.n	800d472 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d46c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d470:	e058      	b.n	800d524 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d478:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d47c:	4013      	ands	r3, r2
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d0d1      	beq.n	800d426 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d488:	f003 0308 	and.w	r3, r3, #8
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d005      	beq.n	800d49c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2208      	movs	r2, #8
 800d496:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d498:	2308      	movs	r3, #8
 800d49a:	e043      	b.n	800d524 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4a2:	f003 0302 	and.w	r3, r3, #2
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d005      	beq.n	800d4b6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d4b2:	2302      	movs	r3, #2
 800d4b4:	e036      	b.n	800d524 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4bc:	f003 0320 	and.w	r3, r3, #32
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d005      	beq.n	800d4d0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2220      	movs	r2, #32
 800d4ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d4cc:	2320      	movs	r3, #32
 800d4ce:	e029      	b.n	800d524 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a15      	ldr	r2, [pc, #84]	@ (800d52c <SD_FindSCR+0x19c>)
 800d4d6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	061a      	lsls	r2, r3, #24
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	021b      	lsls	r3, r3, #8
 800d4e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d4e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	0a1b      	lsrs	r3, r3, #8
 800d4ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	0e1b      	lsrs	r3, r3, #24
 800d4f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f8:	601a      	str	r2, [r3, #0]
    scr++;
 800d4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	061a      	lsls	r2, r3, #24
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	021b      	lsls	r3, r3, #8
 800d508:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d50c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	0a1b      	lsrs	r3, r3, #8
 800d512:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d516:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	0e1b      	lsrs	r3, r3, #24
 800d51c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d520:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3738      	adds	r7, #56	@ 0x38
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	18000f3a 	.word	0x18000f3a

0800d530 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d53c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d542:	2b1f      	cmp	r3, #31
 800d544:	d936      	bls.n	800d5b4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d546:	2300      	movs	r3, #0
 800d548:	617b      	str	r3, [r7, #20]
 800d54a:	e027      	b.n	800d59c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4618      	mov	r0, r3
 800d552:	f002 fd23 	bl	800ff9c <SDMMC_ReadFIFO>
 800d556:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	3301      	adds	r3, #1
 800d564:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	0a1b      	lsrs	r3, r3, #8
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	3301      	adds	r3, #1
 800d574:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	0c1b      	lsrs	r3, r3, #16
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	3301      	adds	r3, #1
 800d584:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	0e1b      	lsrs	r3, r3, #24
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	3301      	adds	r3, #1
 800d594:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	3301      	adds	r3, #1
 800d59a:	617b      	str	r3, [r7, #20]
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	2b07      	cmp	r3, #7
 800d5a0:	d9d4      	bls.n	800d54c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	693a      	ldr	r2, [r7, #16]
 800d5a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ac:	f1a3 0220 	sub.w	r2, r3, #32
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d5b4:	bf00      	nop
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	69db      	ldr	r3, [r3, #28]
 800d5c8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	2b1f      	cmp	r3, #31
 800d5d0:	d93a      	bls.n	800d648 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	617b      	str	r3, [r7, #20]
 800d5d6:	e02b      	b.n	800d630 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	021a      	lsls	r2, r3, #8
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	041a      	lsls	r2, r3, #16
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	3301      	adds	r3, #1
 800d606:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	061a      	lsls	r2, r3, #24
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	4313      	orrs	r3, r2
 800d612:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	3301      	adds	r3, #1
 800d618:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f107 020c 	add.w	r2, r7, #12
 800d622:	4611      	mov	r1, r2
 800d624:	4618      	mov	r0, r3
 800d626:	f002 fcc6 	bl	800ffb6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	3301      	adds	r3, #1
 800d62e:	617b      	str	r3, [r7, #20]
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2b07      	cmp	r3, #7
 800d634:	d9d0      	bls.n	800d5d8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6a1b      	ldr	r3, [r3, #32]
 800d640:	f1a3 0220 	sub.w	r2, r3, #32
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	621a      	str	r2, [r3, #32]
  }
}
 800d648:	bf00      	nop
 800d64a:	3718      	adds	r7, #24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d680:	bf00      	nop
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d694:	bf00      	nop
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d101      	bne.n	800d6b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e049      	b.n	800d746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d106      	bne.n	800d6cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f7f4 fea6 	bl	8002418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3304      	adds	r3, #4
 800d6dc:	4619      	mov	r1, r3
 800d6de:	4610      	mov	r0, r2
 800d6e0:	f000 fc58 	bl	800df94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2201      	movs	r2, #1
 800d710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	2b01      	cmp	r3, #1
 800d762:	d001      	beq.n	800d768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d764:	2301      	movs	r3, #1
 800d766:	e05e      	b.n	800d826 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2202      	movs	r2, #2
 800d76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	68da      	ldr	r2, [r3, #12]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f042 0201 	orr.w	r2, r2, #1
 800d77e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a2b      	ldr	r2, [pc, #172]	@ (800d834 <HAL_TIM_Base_Start_IT+0xe4>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d02c      	beq.n	800d7e4 <HAL_TIM_Base_Start_IT+0x94>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d792:	d027      	beq.n	800d7e4 <HAL_TIM_Base_Start_IT+0x94>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a27      	ldr	r2, [pc, #156]	@ (800d838 <HAL_TIM_Base_Start_IT+0xe8>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d022      	beq.n	800d7e4 <HAL_TIM_Base_Start_IT+0x94>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a26      	ldr	r2, [pc, #152]	@ (800d83c <HAL_TIM_Base_Start_IT+0xec>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d01d      	beq.n	800d7e4 <HAL_TIM_Base_Start_IT+0x94>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a24      	ldr	r2, [pc, #144]	@ (800d840 <HAL_TIM_Base_Start_IT+0xf0>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d018      	beq.n	800d7e4 <HAL_TIM_Base_Start_IT+0x94>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a23      	ldr	r2, [pc, #140]	@ (800d844 <HAL_TIM_Base_Start_IT+0xf4>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d013      	beq.n	800d7e4 <HAL_TIM_Base_Start_IT+0x94>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a21      	ldr	r2, [pc, #132]	@ (800d848 <HAL_TIM_Base_Start_IT+0xf8>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d00e      	beq.n	800d7e4 <HAL_TIM_Base_Start_IT+0x94>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a20      	ldr	r2, [pc, #128]	@ (800d84c <HAL_TIM_Base_Start_IT+0xfc>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d009      	beq.n	800d7e4 <HAL_TIM_Base_Start_IT+0x94>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a1e      	ldr	r2, [pc, #120]	@ (800d850 <HAL_TIM_Base_Start_IT+0x100>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d004      	beq.n	800d7e4 <HAL_TIM_Base_Start_IT+0x94>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a1d      	ldr	r2, [pc, #116]	@ (800d854 <HAL_TIM_Base_Start_IT+0x104>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d115      	bne.n	800d810 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	689a      	ldr	r2, [r3, #8]
 800d7ea:	4b1b      	ldr	r3, [pc, #108]	@ (800d858 <HAL_TIM_Base_Start_IT+0x108>)
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2b06      	cmp	r3, #6
 800d7f4:	d015      	beq.n	800d822 <HAL_TIM_Base_Start_IT+0xd2>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7fc:	d011      	beq.n	800d822 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f042 0201 	orr.w	r2, r2, #1
 800d80c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d80e:	e008      	b.n	800d822 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f042 0201 	orr.w	r2, r2, #1
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	e000      	b.n	800d824 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d822:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	40010000 	.word	0x40010000
 800d838:	40000400 	.word	0x40000400
 800d83c:	40000800 	.word	0x40000800
 800d840:	40000c00 	.word	0x40000c00
 800d844:	40010400 	.word	0x40010400
 800d848:	40001800 	.word	0x40001800
 800d84c:	40014000 	.word	0x40014000
 800d850:	4000e000 	.word	0x4000e000
 800d854:	4000e400 	.word	0x4000e400
 800d858:	00010007 	.word	0x00010007

0800d85c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d101      	bne.n	800d86e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	e049      	b.n	800d902 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d874:	b2db      	uxtb	r3, r3
 800d876:	2b00      	cmp	r3, #0
 800d878:	d106      	bne.n	800d888 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 f841 	bl	800d90a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2202      	movs	r2, #2
 800d88c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	3304      	adds	r3, #4
 800d898:	4619      	mov	r1, r3
 800d89a:	4610      	mov	r0, r2
 800d89c:	f000 fb7a 	bl	800df94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d90a:	b480      	push	{r7}
 800d90c:	b083      	sub	sp, #12
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d912:	bf00      	nop
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b084      	sub	sp, #16
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	f003 0302 	and.w	r3, r3, #2
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d020      	beq.n	800d982 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f003 0302 	and.w	r3, r3, #2
 800d946:	2b00      	cmp	r3, #0
 800d948:	d01b      	beq.n	800d982 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f06f 0202 	mvn.w	r2, #2
 800d952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	f003 0303 	and.w	r3, r3, #3
 800d964:	2b00      	cmp	r3, #0
 800d966:	d003      	beq.n	800d970 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 faf5 	bl	800df58 <HAL_TIM_IC_CaptureCallback>
 800d96e:	e005      	b.n	800d97c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 fae7 	bl	800df44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 faf8 	bl	800df6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	f003 0304 	and.w	r3, r3, #4
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d020      	beq.n	800d9ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f003 0304 	and.w	r3, r3, #4
 800d992:	2b00      	cmp	r3, #0
 800d994:	d01b      	beq.n	800d9ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f06f 0204 	mvn.w	r2, #4
 800d99e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d003      	beq.n	800d9bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 facf 	bl	800df58 <HAL_TIM_IC_CaptureCallback>
 800d9ba:	e005      	b.n	800d9c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 fac1 	bl	800df44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 fad2 	bl	800df6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	f003 0308 	and.w	r3, r3, #8
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d020      	beq.n	800da1a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f003 0308 	and.w	r3, r3, #8
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d01b      	beq.n	800da1a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f06f 0208 	mvn.w	r2, #8
 800d9ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2204      	movs	r2, #4
 800d9f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	69db      	ldr	r3, [r3, #28]
 800d9f8:	f003 0303 	and.w	r3, r3, #3
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d003      	beq.n	800da08 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 faa9 	bl	800df58 <HAL_TIM_IC_CaptureCallback>
 800da06:	e005      	b.n	800da14 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 fa9b 	bl	800df44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 faac 	bl	800df6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	f003 0310 	and.w	r3, r3, #16
 800da20:	2b00      	cmp	r3, #0
 800da22:	d020      	beq.n	800da66 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f003 0310 	and.w	r3, r3, #16
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d01b      	beq.n	800da66 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f06f 0210 	mvn.w	r2, #16
 800da36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2208      	movs	r2, #8
 800da3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	69db      	ldr	r3, [r3, #28]
 800da44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d003      	beq.n	800da54 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fa83 	bl	800df58 <HAL_TIM_IC_CaptureCallback>
 800da52:	e005      	b.n	800da60 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 fa75 	bl	800df44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fa86 	bl	800df6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	f003 0301 	and.w	r3, r3, #1
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00c      	beq.n	800da8a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	2b00      	cmp	r3, #0
 800da78:	d007      	beq.n	800da8a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f06f 0201 	mvn.w	r2, #1
 800da82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7f4 f83b 	bl	8001b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da90:	2b00      	cmp	r3, #0
 800da92:	d104      	bne.n	800da9e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00c      	beq.n	800dab8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d007      	beq.n	800dab8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 ffc6 	bl	800ea44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00c      	beq.n	800dadc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d007      	beq.n	800dadc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 ffbe 	bl	800ea58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00c      	beq.n	800db00 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daec:	2b00      	cmp	r3, #0
 800daee:	d007      	beq.n	800db00 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800daf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fa40 	bl	800df80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	f003 0320 	and.w	r3, r3, #32
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00c      	beq.n	800db24 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f003 0320 	and.w	r3, r3, #32
 800db10:	2b00      	cmp	r3, #0
 800db12:	d007      	beq.n	800db24 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f06f 0220 	mvn.w	r2, #32
 800db1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 ff86 	bl	800ea30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db24:	bf00      	nop
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b086      	sub	sp, #24
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db38:	2300      	movs	r3, #0
 800db3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db42:	2b01      	cmp	r3, #1
 800db44:	d101      	bne.n	800db4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db46:	2302      	movs	r3, #2
 800db48:	e0ff      	b.n	800dd4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2b14      	cmp	r3, #20
 800db56:	f200 80f0 	bhi.w	800dd3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db5a:	a201      	add	r2, pc, #4	@ (adr r2, 800db60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db60:	0800dbb5 	.word	0x0800dbb5
 800db64:	0800dd3b 	.word	0x0800dd3b
 800db68:	0800dd3b 	.word	0x0800dd3b
 800db6c:	0800dd3b 	.word	0x0800dd3b
 800db70:	0800dbf5 	.word	0x0800dbf5
 800db74:	0800dd3b 	.word	0x0800dd3b
 800db78:	0800dd3b 	.word	0x0800dd3b
 800db7c:	0800dd3b 	.word	0x0800dd3b
 800db80:	0800dc37 	.word	0x0800dc37
 800db84:	0800dd3b 	.word	0x0800dd3b
 800db88:	0800dd3b 	.word	0x0800dd3b
 800db8c:	0800dd3b 	.word	0x0800dd3b
 800db90:	0800dc77 	.word	0x0800dc77
 800db94:	0800dd3b 	.word	0x0800dd3b
 800db98:	0800dd3b 	.word	0x0800dd3b
 800db9c:	0800dd3b 	.word	0x0800dd3b
 800dba0:	0800dcb9 	.word	0x0800dcb9
 800dba4:	0800dd3b 	.word	0x0800dd3b
 800dba8:	0800dd3b 	.word	0x0800dd3b
 800dbac:	0800dd3b 	.word	0x0800dd3b
 800dbb0:	0800dcf9 	.word	0x0800dcf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	68b9      	ldr	r1, [r7, #8]
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f000 fa9c 	bl	800e0f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	699a      	ldr	r2, [r3, #24]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f042 0208 	orr.w	r2, r2, #8
 800dbce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	699a      	ldr	r2, [r3, #24]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f022 0204 	bic.w	r2, r2, #4
 800dbde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6999      	ldr	r1, [r3, #24]
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	691a      	ldr	r2, [r3, #16]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	619a      	str	r2, [r3, #24]
      break;
 800dbf2:	e0a5      	b.n	800dd40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68b9      	ldr	r1, [r7, #8]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f000 fb0c 	bl	800e218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	699a      	ldr	r2, [r3, #24]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	699a      	ldr	r2, [r3, #24]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6999      	ldr	r1, [r3, #24]
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	691b      	ldr	r3, [r3, #16]
 800dc2a:	021a      	lsls	r2, r3, #8
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	430a      	orrs	r2, r1
 800dc32:	619a      	str	r2, [r3, #24]
      break;
 800dc34:	e084      	b.n	800dd40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	68b9      	ldr	r1, [r7, #8]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f000 fb75 	bl	800e32c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	69da      	ldr	r2, [r3, #28]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f042 0208 	orr.w	r2, r2, #8
 800dc50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	69da      	ldr	r2, [r3, #28]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f022 0204 	bic.w	r2, r2, #4
 800dc60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	69d9      	ldr	r1, [r3, #28]
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	691a      	ldr	r2, [r3, #16]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	430a      	orrs	r2, r1
 800dc72:	61da      	str	r2, [r3, #28]
      break;
 800dc74:	e064      	b.n	800dd40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68b9      	ldr	r1, [r7, #8]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 fbdd 	bl	800e43c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	69da      	ldr	r2, [r3, #28]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	69da      	ldr	r2, [r3, #28]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	69d9      	ldr	r1, [r3, #28]
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	021a      	lsls	r2, r3, #8
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	430a      	orrs	r2, r1
 800dcb4:	61da      	str	r2, [r3, #28]
      break;
 800dcb6:	e043      	b.n	800dd40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	68b9      	ldr	r1, [r7, #8]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f000 fc26 	bl	800e510 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f042 0208 	orr.w	r2, r2, #8
 800dcd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f022 0204 	bic.w	r2, r2, #4
 800dce2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	691a      	ldr	r2, [r3, #16]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	430a      	orrs	r2, r1
 800dcf4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dcf6:	e023      	b.n	800dd40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	68b9      	ldr	r1, [r7, #8]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 fc6a 	bl	800e5d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	021a      	lsls	r2, r3, #8
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	430a      	orrs	r2, r1
 800dd36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dd38:	e002      	b.n	800dd40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	75fb      	strb	r3, [r7, #23]
      break;
 800dd3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dd48:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3718      	adds	r7, #24
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop

0800dd54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d101      	bne.n	800dd70 <HAL_TIM_ConfigClockSource+0x1c>
 800dd6c:	2302      	movs	r3, #2
 800dd6e:	e0dc      	b.n	800df2a <HAL_TIM_ConfigClockSource+0x1d6>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	4b6a      	ldr	r3, [pc, #424]	@ (800df34 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dd8c:	4013      	ands	r3, r2
 800dd8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68ba      	ldr	r2, [r7, #8]
 800dd9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a64      	ldr	r2, [pc, #400]	@ (800df38 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	f000 80a9 	beq.w	800defe <HAL_TIM_ConfigClockSource+0x1aa>
 800ddac:	4a62      	ldr	r2, [pc, #392]	@ (800df38 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	f200 80ae 	bhi.w	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddb4:	4a61      	ldr	r2, [pc, #388]	@ (800df3c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	f000 80a1 	beq.w	800defe <HAL_TIM_ConfigClockSource+0x1aa>
 800ddbc:	4a5f      	ldr	r2, [pc, #380]	@ (800df3c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	f200 80a6 	bhi.w	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddc4:	4a5e      	ldr	r2, [pc, #376]	@ (800df40 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	f000 8099 	beq.w	800defe <HAL_TIM_ConfigClockSource+0x1aa>
 800ddcc:	4a5c      	ldr	r2, [pc, #368]	@ (800df40 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	f200 809e 	bhi.w	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddd4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ddd8:	f000 8091 	beq.w	800defe <HAL_TIM_ConfigClockSource+0x1aa>
 800dddc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dde0:	f200 8096 	bhi.w	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800dde4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dde8:	f000 8089 	beq.w	800defe <HAL_TIM_ConfigClockSource+0x1aa>
 800ddec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddf0:	f200 808e 	bhi.w	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddf8:	d03e      	beq.n	800de78 <HAL_TIM_ConfigClockSource+0x124>
 800ddfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddfe:	f200 8087 	bhi.w	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800de02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de06:	f000 8086 	beq.w	800df16 <HAL_TIM_ConfigClockSource+0x1c2>
 800de0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de0e:	d87f      	bhi.n	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800de10:	2b70      	cmp	r3, #112	@ 0x70
 800de12:	d01a      	beq.n	800de4a <HAL_TIM_ConfigClockSource+0xf6>
 800de14:	2b70      	cmp	r3, #112	@ 0x70
 800de16:	d87b      	bhi.n	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800de18:	2b60      	cmp	r3, #96	@ 0x60
 800de1a:	d050      	beq.n	800debe <HAL_TIM_ConfigClockSource+0x16a>
 800de1c:	2b60      	cmp	r3, #96	@ 0x60
 800de1e:	d877      	bhi.n	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800de20:	2b50      	cmp	r3, #80	@ 0x50
 800de22:	d03c      	beq.n	800de9e <HAL_TIM_ConfigClockSource+0x14a>
 800de24:	2b50      	cmp	r3, #80	@ 0x50
 800de26:	d873      	bhi.n	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800de28:	2b40      	cmp	r3, #64	@ 0x40
 800de2a:	d058      	beq.n	800dede <HAL_TIM_ConfigClockSource+0x18a>
 800de2c:	2b40      	cmp	r3, #64	@ 0x40
 800de2e:	d86f      	bhi.n	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800de30:	2b30      	cmp	r3, #48	@ 0x30
 800de32:	d064      	beq.n	800defe <HAL_TIM_ConfigClockSource+0x1aa>
 800de34:	2b30      	cmp	r3, #48	@ 0x30
 800de36:	d86b      	bhi.n	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800de38:	2b20      	cmp	r3, #32
 800de3a:	d060      	beq.n	800defe <HAL_TIM_ConfigClockSource+0x1aa>
 800de3c:	2b20      	cmp	r3, #32
 800de3e:	d867      	bhi.n	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
 800de40:	2b00      	cmp	r3, #0
 800de42:	d05c      	beq.n	800defe <HAL_TIM_ConfigClockSource+0x1aa>
 800de44:	2b10      	cmp	r3, #16
 800de46:	d05a      	beq.n	800defe <HAL_TIM_ConfigClockSource+0x1aa>
 800de48:	e062      	b.n	800df10 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de5a:	f000 fca1 	bl	800e7a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800de6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	609a      	str	r2, [r3, #8]
      break;
 800de76:	e04f      	b.n	800df18 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de88:	f000 fc8a 	bl	800e7a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	689a      	ldr	r2, [r3, #8]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800de9a:	609a      	str	r2, [r3, #8]
      break;
 800de9c:	e03c      	b.n	800df18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800deaa:	461a      	mov	r2, r3
 800deac:	f000 fbfa 	bl	800e6a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2150      	movs	r1, #80	@ 0x50
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 fc54 	bl	800e764 <TIM_ITRx_SetConfig>
      break;
 800debc:	e02c      	b.n	800df18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800deca:	461a      	mov	r2, r3
 800decc:	f000 fc19 	bl	800e702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2160      	movs	r1, #96	@ 0x60
 800ded6:	4618      	mov	r0, r3
 800ded8:	f000 fc44 	bl	800e764 <TIM_ITRx_SetConfig>
      break;
 800dedc:	e01c      	b.n	800df18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800deea:	461a      	mov	r2, r3
 800deec:	f000 fbda 	bl	800e6a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2140      	movs	r1, #64	@ 0x40
 800def6:	4618      	mov	r0, r3
 800def8:	f000 fc34 	bl	800e764 <TIM_ITRx_SetConfig>
      break;
 800defc:	e00c      	b.n	800df18 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4619      	mov	r1, r3
 800df08:	4610      	mov	r0, r2
 800df0a:	f000 fc2b 	bl	800e764 <TIM_ITRx_SetConfig>
      break;
 800df0e:	e003      	b.n	800df18 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	73fb      	strb	r3, [r7, #15]
      break;
 800df14:	e000      	b.n	800df18 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800df16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2201      	movs	r2, #1
 800df1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2200      	movs	r2, #0
 800df24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df28:	7bfb      	ldrb	r3, [r7, #15]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	ffceff88 	.word	0xffceff88
 800df38:	00100040 	.word	0x00100040
 800df3c:	00100030 	.word	0x00100030
 800df40:	00100020 	.word	0x00100020

0800df44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df4c:	bf00      	nop
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df74:	bf00      	nop
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df88:	bf00      	nop
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a4a      	ldr	r2, [pc, #296]	@ (800e0d0 <TIM_Base_SetConfig+0x13c>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d013      	beq.n	800dfd4 <TIM_Base_SetConfig+0x40>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfb2:	d00f      	beq.n	800dfd4 <TIM_Base_SetConfig+0x40>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	4a47      	ldr	r2, [pc, #284]	@ (800e0d4 <TIM_Base_SetConfig+0x140>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d00b      	beq.n	800dfd4 <TIM_Base_SetConfig+0x40>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4a46      	ldr	r2, [pc, #280]	@ (800e0d8 <TIM_Base_SetConfig+0x144>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d007      	beq.n	800dfd4 <TIM_Base_SetConfig+0x40>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4a45      	ldr	r2, [pc, #276]	@ (800e0dc <TIM_Base_SetConfig+0x148>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d003      	beq.n	800dfd4 <TIM_Base_SetConfig+0x40>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a44      	ldr	r2, [pc, #272]	@ (800e0e0 <TIM_Base_SetConfig+0x14c>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d108      	bne.n	800dfe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4a39      	ldr	r2, [pc, #228]	@ (800e0d0 <TIM_Base_SetConfig+0x13c>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d027      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dff4:	d023      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a36      	ldr	r2, [pc, #216]	@ (800e0d4 <TIM_Base_SetConfig+0x140>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d01f      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a35      	ldr	r2, [pc, #212]	@ (800e0d8 <TIM_Base_SetConfig+0x144>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d01b      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4a34      	ldr	r2, [pc, #208]	@ (800e0dc <TIM_Base_SetConfig+0x148>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d017      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4a33      	ldr	r2, [pc, #204]	@ (800e0e0 <TIM_Base_SetConfig+0x14c>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d013      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a32      	ldr	r2, [pc, #200]	@ (800e0e4 <TIM_Base_SetConfig+0x150>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d00f      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4a31      	ldr	r2, [pc, #196]	@ (800e0e8 <TIM_Base_SetConfig+0x154>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d00b      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4a30      	ldr	r2, [pc, #192]	@ (800e0ec <TIM_Base_SetConfig+0x158>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d007      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a2f      	ldr	r2, [pc, #188]	@ (800e0f0 <TIM_Base_SetConfig+0x15c>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d003      	beq.n	800e03e <TIM_Base_SetConfig+0xaa>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a2e      	ldr	r2, [pc, #184]	@ (800e0f4 <TIM_Base_SetConfig+0x160>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d108      	bne.n	800e050 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	695b      	ldr	r3, [r3, #20]
 800e05a:	4313      	orrs	r3, r2
 800e05c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	689a      	ldr	r2, [r3, #8]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4a16      	ldr	r2, [pc, #88]	@ (800e0d0 <TIM_Base_SetConfig+0x13c>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d00f      	beq.n	800e09c <TIM_Base_SetConfig+0x108>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4a18      	ldr	r2, [pc, #96]	@ (800e0e0 <TIM_Base_SetConfig+0x14c>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d00b      	beq.n	800e09c <TIM_Base_SetConfig+0x108>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4a17      	ldr	r2, [pc, #92]	@ (800e0e4 <TIM_Base_SetConfig+0x150>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d007      	beq.n	800e09c <TIM_Base_SetConfig+0x108>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	4a16      	ldr	r2, [pc, #88]	@ (800e0e8 <TIM_Base_SetConfig+0x154>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d003      	beq.n	800e09c <TIM_Base_SetConfig+0x108>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4a15      	ldr	r2, [pc, #84]	@ (800e0ec <TIM_Base_SetConfig+0x158>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d103      	bne.n	800e0a4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	691a      	ldr	r2, [r3, #16]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	f003 0301 	and.w	r3, r3, #1
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d105      	bne.n	800e0c2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	f023 0201 	bic.w	r2, r3, #1
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	611a      	str	r2, [r3, #16]
  }
}
 800e0c2:	bf00      	nop
 800e0c4:	3714      	adds	r7, #20
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop
 800e0d0:	40010000 	.word	0x40010000
 800e0d4:	40000400 	.word	0x40000400
 800e0d8:	40000800 	.word	0x40000800
 800e0dc:	40000c00 	.word	0x40000c00
 800e0e0:	40010400 	.word	0x40010400
 800e0e4:	40014000 	.word	0x40014000
 800e0e8:	40014400 	.word	0x40014400
 800e0ec:	40014800 	.word	0x40014800
 800e0f0:	4000e000 	.word	0x4000e000
 800e0f4:	4000e400 	.word	0x4000e400

0800e0f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b087      	sub	sp, #28
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6a1b      	ldr	r3, [r3, #32]
 800e10c:	f023 0201 	bic.w	r2, r3, #1
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	4b37      	ldr	r3, [pc, #220]	@ (800e200 <TIM_OC1_SetConfig+0x108>)
 800e124:	4013      	ands	r3, r2
 800e126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f023 0303 	bic.w	r3, r3, #3
 800e12e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68fa      	ldr	r2, [r7, #12]
 800e136:	4313      	orrs	r3, r2
 800e138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	f023 0302 	bic.w	r3, r3, #2
 800e140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	4313      	orrs	r3, r2
 800e14a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4a2d      	ldr	r2, [pc, #180]	@ (800e204 <TIM_OC1_SetConfig+0x10c>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d00f      	beq.n	800e174 <TIM_OC1_SetConfig+0x7c>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4a2c      	ldr	r2, [pc, #176]	@ (800e208 <TIM_OC1_SetConfig+0x110>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d00b      	beq.n	800e174 <TIM_OC1_SetConfig+0x7c>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a2b      	ldr	r2, [pc, #172]	@ (800e20c <TIM_OC1_SetConfig+0x114>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d007      	beq.n	800e174 <TIM_OC1_SetConfig+0x7c>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a2a      	ldr	r2, [pc, #168]	@ (800e210 <TIM_OC1_SetConfig+0x118>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d003      	beq.n	800e174 <TIM_OC1_SetConfig+0x7c>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a29      	ldr	r2, [pc, #164]	@ (800e214 <TIM_OC1_SetConfig+0x11c>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d10c      	bne.n	800e18e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	f023 0308 	bic.w	r3, r3, #8
 800e17a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	4313      	orrs	r3, r2
 800e184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	f023 0304 	bic.w	r3, r3, #4
 800e18c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4a1c      	ldr	r2, [pc, #112]	@ (800e204 <TIM_OC1_SetConfig+0x10c>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d00f      	beq.n	800e1b6 <TIM_OC1_SetConfig+0xbe>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4a1b      	ldr	r2, [pc, #108]	@ (800e208 <TIM_OC1_SetConfig+0x110>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d00b      	beq.n	800e1b6 <TIM_OC1_SetConfig+0xbe>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4a1a      	ldr	r2, [pc, #104]	@ (800e20c <TIM_OC1_SetConfig+0x114>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d007      	beq.n	800e1b6 <TIM_OC1_SetConfig+0xbe>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	4a19      	ldr	r2, [pc, #100]	@ (800e210 <TIM_OC1_SetConfig+0x118>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d003      	beq.n	800e1b6 <TIM_OC1_SetConfig+0xbe>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4a18      	ldr	r2, [pc, #96]	@ (800e214 <TIM_OC1_SetConfig+0x11c>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d111      	bne.n	800e1da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e1c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	695b      	ldr	r3, [r3, #20]
 800e1ca:	693a      	ldr	r2, [r7, #16]
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	693a      	ldr	r2, [r7, #16]
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	693a      	ldr	r2, [r7, #16]
 800e1de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	685a      	ldr	r2, [r3, #4]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	697a      	ldr	r2, [r7, #20]
 800e1f2:	621a      	str	r2, [r3, #32]
}
 800e1f4:	bf00      	nop
 800e1f6:	371c      	adds	r7, #28
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr
 800e200:	fffeff8f 	.word	0xfffeff8f
 800e204:	40010000 	.word	0x40010000
 800e208:	40010400 	.word	0x40010400
 800e20c:	40014000 	.word	0x40014000
 800e210:	40014400 	.word	0x40014400
 800e214:	40014800 	.word	0x40014800

0800e218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e218:	b480      	push	{r7}
 800e21a:	b087      	sub	sp, #28
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6a1b      	ldr	r3, [r3, #32]
 800e226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a1b      	ldr	r3, [r3, #32]
 800e22c:	f023 0210 	bic.w	r2, r3, #16
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	699b      	ldr	r3, [r3, #24]
 800e23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	4b34      	ldr	r3, [pc, #208]	@ (800e314 <TIM_OC2_SetConfig+0xfc>)
 800e244:	4013      	ands	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e24e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	021b      	lsls	r3, r3, #8
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	4313      	orrs	r3, r2
 800e25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	f023 0320 	bic.w	r3, r3, #32
 800e262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	011b      	lsls	r3, r3, #4
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	4313      	orrs	r3, r2
 800e26e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	4a29      	ldr	r2, [pc, #164]	@ (800e318 <TIM_OC2_SetConfig+0x100>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d003      	beq.n	800e280 <TIM_OC2_SetConfig+0x68>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4a28      	ldr	r2, [pc, #160]	@ (800e31c <TIM_OC2_SetConfig+0x104>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d10d      	bne.n	800e29c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	011b      	lsls	r3, r3, #4
 800e28e:	697a      	ldr	r2, [r7, #20]
 800e290:	4313      	orrs	r3, r2
 800e292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e29a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	4a1e      	ldr	r2, [pc, #120]	@ (800e318 <TIM_OC2_SetConfig+0x100>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d00f      	beq.n	800e2c4 <TIM_OC2_SetConfig+0xac>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	4a1d      	ldr	r2, [pc, #116]	@ (800e31c <TIM_OC2_SetConfig+0x104>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d00b      	beq.n	800e2c4 <TIM_OC2_SetConfig+0xac>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4a1c      	ldr	r2, [pc, #112]	@ (800e320 <TIM_OC2_SetConfig+0x108>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d007      	beq.n	800e2c4 <TIM_OC2_SetConfig+0xac>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4a1b      	ldr	r2, [pc, #108]	@ (800e324 <TIM_OC2_SetConfig+0x10c>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d003      	beq.n	800e2c4 <TIM_OC2_SetConfig+0xac>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a1a      	ldr	r2, [pc, #104]	@ (800e328 <TIM_OC2_SetConfig+0x110>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d113      	bne.n	800e2ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e2d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	695b      	ldr	r3, [r3, #20]
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	693a      	ldr	r2, [r7, #16]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	693a      	ldr	r2, [r7, #16]
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	693a      	ldr	r2, [r7, #16]
 800e2f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	621a      	str	r2, [r3, #32]
}
 800e306:	bf00      	nop
 800e308:	371c      	adds	r7, #28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	feff8fff 	.word	0xfeff8fff
 800e318:	40010000 	.word	0x40010000
 800e31c:	40010400 	.word	0x40010400
 800e320:	40014000 	.word	0x40014000
 800e324:	40014400 	.word	0x40014400
 800e328:	40014800 	.word	0x40014800

0800e32c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b087      	sub	sp, #28
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a1b      	ldr	r3, [r3, #32]
 800e340:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	69db      	ldr	r3, [r3, #28]
 800e352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4b33      	ldr	r3, [pc, #204]	@ (800e424 <TIM_OC3_SetConfig+0xf8>)
 800e358:	4013      	ands	r3, r2
 800e35a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f023 0303 	bic.w	r3, r3, #3
 800e362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	689b      	ldr	r3, [r3, #8]
 800e37a:	021b      	lsls	r3, r3, #8
 800e37c:	697a      	ldr	r2, [r7, #20]
 800e37e:	4313      	orrs	r3, r2
 800e380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	4a28      	ldr	r2, [pc, #160]	@ (800e428 <TIM_OC3_SetConfig+0xfc>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d003      	beq.n	800e392 <TIM_OC3_SetConfig+0x66>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4a27      	ldr	r2, [pc, #156]	@ (800e42c <TIM_OC3_SetConfig+0x100>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d10d      	bne.n	800e3ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	021b      	lsls	r3, r3, #8
 800e3a0:	697a      	ldr	r2, [r7, #20]
 800e3a2:	4313      	orrs	r3, r2
 800e3a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e3ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4a1d      	ldr	r2, [pc, #116]	@ (800e428 <TIM_OC3_SetConfig+0xfc>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d00f      	beq.n	800e3d6 <TIM_OC3_SetConfig+0xaa>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	4a1c      	ldr	r2, [pc, #112]	@ (800e42c <TIM_OC3_SetConfig+0x100>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d00b      	beq.n	800e3d6 <TIM_OC3_SetConfig+0xaa>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4a1b      	ldr	r2, [pc, #108]	@ (800e430 <TIM_OC3_SetConfig+0x104>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d007      	beq.n	800e3d6 <TIM_OC3_SetConfig+0xaa>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4a1a      	ldr	r2, [pc, #104]	@ (800e434 <TIM_OC3_SetConfig+0x108>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d003      	beq.n	800e3d6 <TIM_OC3_SetConfig+0xaa>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4a19      	ldr	r2, [pc, #100]	@ (800e438 <TIM_OC3_SetConfig+0x10c>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d113      	bne.n	800e3fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e3e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	695b      	ldr	r3, [r3, #20]
 800e3ea:	011b      	lsls	r3, r3, #4
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	699b      	ldr	r3, [r3, #24]
 800e3f6:	011b      	lsls	r3, r3, #4
 800e3f8:	693a      	ldr	r2, [r7, #16]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	685a      	ldr	r2, [r3, #4]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	697a      	ldr	r2, [r7, #20]
 800e416:	621a      	str	r2, [r3, #32]
}
 800e418:	bf00      	nop
 800e41a:	371c      	adds	r7, #28
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	fffeff8f 	.word	0xfffeff8f
 800e428:	40010000 	.word	0x40010000
 800e42c:	40010400 	.word	0x40010400
 800e430:	40014000 	.word	0x40014000
 800e434:	40014400 	.word	0x40014400
 800e438:	40014800 	.word	0x40014800

0800e43c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b087      	sub	sp, #28
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a1b      	ldr	r3, [r3, #32]
 800e44a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6a1b      	ldr	r3, [r3, #32]
 800e450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e464:	68fa      	ldr	r2, [r7, #12]
 800e466:	4b24      	ldr	r3, [pc, #144]	@ (800e4f8 <TIM_OC4_SetConfig+0xbc>)
 800e468:	4013      	ands	r3, r2
 800e46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	021b      	lsls	r3, r3, #8
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	4313      	orrs	r3, r2
 800e47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	031b      	lsls	r3, r3, #12
 800e48e:	693a      	ldr	r2, [r7, #16]
 800e490:	4313      	orrs	r3, r2
 800e492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	4a19      	ldr	r2, [pc, #100]	@ (800e4fc <TIM_OC4_SetConfig+0xc0>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d00f      	beq.n	800e4bc <TIM_OC4_SetConfig+0x80>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	4a18      	ldr	r2, [pc, #96]	@ (800e500 <TIM_OC4_SetConfig+0xc4>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d00b      	beq.n	800e4bc <TIM_OC4_SetConfig+0x80>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a17      	ldr	r2, [pc, #92]	@ (800e504 <TIM_OC4_SetConfig+0xc8>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d007      	beq.n	800e4bc <TIM_OC4_SetConfig+0x80>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a16      	ldr	r2, [pc, #88]	@ (800e508 <TIM_OC4_SetConfig+0xcc>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d003      	beq.n	800e4bc <TIM_OC4_SetConfig+0x80>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	4a15      	ldr	r2, [pc, #84]	@ (800e50c <TIM_OC4_SetConfig+0xd0>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d109      	bne.n	800e4d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e4c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	695b      	ldr	r3, [r3, #20]
 800e4c8:	019b      	lsls	r3, r3, #6
 800e4ca:	697a      	ldr	r2, [r7, #20]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	685a      	ldr	r2, [r3, #4]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	693a      	ldr	r2, [r7, #16]
 800e4e8:	621a      	str	r2, [r3, #32]
}
 800e4ea:	bf00      	nop
 800e4ec:	371c      	adds	r7, #28
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	feff8fff 	.word	0xfeff8fff
 800e4fc:	40010000 	.word	0x40010000
 800e500:	40010400 	.word	0x40010400
 800e504:	40014000 	.word	0x40014000
 800e508:	40014400 	.word	0x40014400
 800e50c:	40014800 	.word	0x40014800

0800e510 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e510:	b480      	push	{r7}
 800e512:	b087      	sub	sp, #28
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6a1b      	ldr	r3, [r3, #32]
 800e51e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6a1b      	ldr	r3, [r3, #32]
 800e524:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	4b21      	ldr	r3, [pc, #132]	@ (800e5c0 <TIM_OC5_SetConfig+0xb0>)
 800e53c:	4013      	ands	r3, r2
 800e53e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	68fa      	ldr	r2, [r7, #12]
 800e546:	4313      	orrs	r3, r2
 800e548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	041b      	lsls	r3, r3, #16
 800e558:	693a      	ldr	r2, [r7, #16]
 800e55a:	4313      	orrs	r3, r2
 800e55c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4a18      	ldr	r2, [pc, #96]	@ (800e5c4 <TIM_OC5_SetConfig+0xb4>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d00f      	beq.n	800e586 <TIM_OC5_SetConfig+0x76>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4a17      	ldr	r2, [pc, #92]	@ (800e5c8 <TIM_OC5_SetConfig+0xb8>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d00b      	beq.n	800e586 <TIM_OC5_SetConfig+0x76>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a16      	ldr	r2, [pc, #88]	@ (800e5cc <TIM_OC5_SetConfig+0xbc>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d007      	beq.n	800e586 <TIM_OC5_SetConfig+0x76>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a15      	ldr	r2, [pc, #84]	@ (800e5d0 <TIM_OC5_SetConfig+0xc0>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d003      	beq.n	800e586 <TIM_OC5_SetConfig+0x76>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a14      	ldr	r2, [pc, #80]	@ (800e5d4 <TIM_OC5_SetConfig+0xc4>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d109      	bne.n	800e59a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e58c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	695b      	ldr	r3, [r3, #20]
 800e592:	021b      	lsls	r3, r3, #8
 800e594:	697a      	ldr	r2, [r7, #20]
 800e596:	4313      	orrs	r3, r2
 800e598:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	68fa      	ldr	r2, [r7, #12]
 800e5a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	685a      	ldr	r2, [r3, #4]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	693a      	ldr	r2, [r7, #16]
 800e5b2:	621a      	str	r2, [r3, #32]
}
 800e5b4:	bf00      	nop
 800e5b6:	371c      	adds	r7, #28
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr
 800e5c0:	fffeff8f 	.word	0xfffeff8f
 800e5c4:	40010000 	.word	0x40010000
 800e5c8:	40010400 	.word	0x40010400
 800e5cc:	40014000 	.word	0x40014000
 800e5d0:	40014400 	.word	0x40014400
 800e5d4:	40014800 	.word	0x40014800

0800e5d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b087      	sub	sp, #28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a1b      	ldr	r3, [r3, #32]
 800e5e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a1b      	ldr	r3, [r3, #32]
 800e5ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	4b22      	ldr	r3, [pc, #136]	@ (800e68c <TIM_OC6_SetConfig+0xb4>)
 800e604:	4013      	ands	r3, r2
 800e606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	021b      	lsls	r3, r3, #8
 800e60e:	68fa      	ldr	r2, [r7, #12]
 800e610:	4313      	orrs	r3, r2
 800e612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e61a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	051b      	lsls	r3, r3, #20
 800e622:	693a      	ldr	r2, [r7, #16]
 800e624:	4313      	orrs	r3, r2
 800e626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a19      	ldr	r2, [pc, #100]	@ (800e690 <TIM_OC6_SetConfig+0xb8>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d00f      	beq.n	800e650 <TIM_OC6_SetConfig+0x78>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4a18      	ldr	r2, [pc, #96]	@ (800e694 <TIM_OC6_SetConfig+0xbc>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d00b      	beq.n	800e650 <TIM_OC6_SetConfig+0x78>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a17      	ldr	r2, [pc, #92]	@ (800e698 <TIM_OC6_SetConfig+0xc0>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d007      	beq.n	800e650 <TIM_OC6_SetConfig+0x78>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a16      	ldr	r2, [pc, #88]	@ (800e69c <TIM_OC6_SetConfig+0xc4>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d003      	beq.n	800e650 <TIM_OC6_SetConfig+0x78>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4a15      	ldr	r2, [pc, #84]	@ (800e6a0 <TIM_OC6_SetConfig+0xc8>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d109      	bne.n	800e664 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	029b      	lsls	r3, r3, #10
 800e65e:	697a      	ldr	r2, [r7, #20]
 800e660:	4313      	orrs	r3, r2
 800e662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	685a      	ldr	r2, [r3, #4]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	621a      	str	r2, [r3, #32]
}
 800e67e:	bf00      	nop
 800e680:	371c      	adds	r7, #28
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	feff8fff 	.word	0xfeff8fff
 800e690:	40010000 	.word	0x40010000
 800e694:	40010400 	.word	0x40010400
 800e698:	40014000 	.word	0x40014000
 800e69c:	40014400 	.word	0x40014400
 800e6a0:	40014800 	.word	0x40014800

0800e6a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b087      	sub	sp, #28
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6a1b      	ldr	r3, [r3, #32]
 800e6b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6a1b      	ldr	r3, [r3, #32]
 800e6ba:	f023 0201 	bic.w	r2, r3, #1
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	699b      	ldr	r3, [r3, #24]
 800e6c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e6ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	011b      	lsls	r3, r3, #4
 800e6d4:	693a      	ldr	r2, [r7, #16]
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	f023 030a 	bic.w	r3, r3, #10
 800e6e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6e2:	697a      	ldr	r2, [r7, #20]
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	693a      	ldr	r2, [r7, #16]
 800e6ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	697a      	ldr	r2, [r7, #20]
 800e6f4:	621a      	str	r2, [r3, #32]
}
 800e6f6:	bf00      	nop
 800e6f8:	371c      	adds	r7, #28
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e702:	b480      	push	{r7}
 800e704:	b087      	sub	sp, #28
 800e706:	af00      	add	r7, sp, #0
 800e708:	60f8      	str	r0, [r7, #12]
 800e70a:	60b9      	str	r1, [r7, #8]
 800e70c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6a1b      	ldr	r3, [r3, #32]
 800e712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6a1b      	ldr	r3, [r3, #32]
 800e718:	f023 0210 	bic.w	r2, r3, #16
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	699b      	ldr	r3, [r3, #24]
 800e724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e72c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	031b      	lsls	r3, r3, #12
 800e732:	693a      	ldr	r2, [r7, #16]
 800e734:	4313      	orrs	r3, r2
 800e736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e73e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	011b      	lsls	r3, r3, #4
 800e744:	697a      	ldr	r2, [r7, #20]
 800e746:	4313      	orrs	r3, r2
 800e748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	693a      	ldr	r2, [r7, #16]
 800e74e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	697a      	ldr	r2, [r7, #20]
 800e754:	621a      	str	r2, [r3, #32]
}
 800e756:	bf00      	nop
 800e758:	371c      	adds	r7, #28
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr
	...

0800e764 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e764:	b480      	push	{r7}
 800e766:	b085      	sub	sp, #20
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	4b09      	ldr	r3, [pc, #36]	@ (800e79c <TIM_ITRx_SetConfig+0x38>)
 800e778:	4013      	ands	r3, r2
 800e77a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e77c:	683a      	ldr	r2, [r7, #0]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	4313      	orrs	r3, r2
 800e782:	f043 0307 	orr.w	r3, r3, #7
 800e786:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	609a      	str	r2, [r3, #8]
}
 800e78e:	bf00      	nop
 800e790:	3714      	adds	r7, #20
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	ffcfff8f 	.word	0xffcfff8f

0800e7a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b087      	sub	sp, #28
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	607a      	str	r2, [r7, #4]
 800e7ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e7ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	021a      	lsls	r2, r3, #8
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	431a      	orrs	r2, r3
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	697a      	ldr	r2, [r7, #20]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	697a      	ldr	r2, [r7, #20]
 800e7d2:	609a      	str	r2, [r3, #8]
}
 800e7d4:	bf00      	nop
 800e7d6:	371c      	adds	r7, #28
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d101      	bne.n	800e7f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	e077      	b.n	800e8e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2202      	movs	r2, #2
 800e804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a35      	ldr	r2, [pc, #212]	@ (800e8f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d004      	beq.n	800e82c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a34      	ldr	r2, [pc, #208]	@ (800e8f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d108      	bne.n	800e83e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e832:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	4313      	orrs	r3, r2
 800e83c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e844:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a25      	ldr	r2, [pc, #148]	@ (800e8f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d02c      	beq.n	800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e86a:	d027      	beq.n	800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a22      	ldr	r2, [pc, #136]	@ (800e8fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d022      	beq.n	800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a21      	ldr	r2, [pc, #132]	@ (800e900 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d01d      	beq.n	800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a1f      	ldr	r2, [pc, #124]	@ (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d018      	beq.n	800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a1a      	ldr	r2, [pc, #104]	@ (800e8f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d013      	beq.n	800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a1b      	ldr	r2, [pc, #108]	@ (800e908 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d00e      	beq.n	800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a1a      	ldr	r2, [pc, #104]	@ (800e90c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d009      	beq.n	800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a18      	ldr	r2, [pc, #96]	@ (800e910 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d004      	beq.n	800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a17      	ldr	r2, [pc, #92]	@ (800e914 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d10c      	bne.n	800e8d6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e8e6:	2300      	movs	r3, #0
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3714      	adds	r7, #20
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr
 800e8f4:	40010000 	.word	0x40010000
 800e8f8:	40010400 	.word	0x40010400
 800e8fc:	40000400 	.word	0x40000400
 800e900:	40000800 	.word	0x40000800
 800e904:	40000c00 	.word	0x40000c00
 800e908:	40001800 	.word	0x40001800
 800e90c:	40014000 	.word	0x40014000
 800e910:	4000e000 	.word	0x4000e000
 800e914:	4000e400 	.word	0x4000e400

0800e918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e922:	2300      	movs	r3, #0
 800e924:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d101      	bne.n	800e934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e930:	2302      	movs	r3, #2
 800e932:	e073      	b.n	800ea1c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	4313      	orrs	r3, r2
 800e948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	4313      	orrs	r3, r2
 800e956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	4313      	orrs	r3, r2
 800e964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4313      	orrs	r3, r2
 800e972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	691b      	ldr	r3, [r3, #16]
 800e97e:	4313      	orrs	r3, r2
 800e980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	695b      	ldr	r3, [r3, #20]
 800e98c:	4313      	orrs	r3, r2
 800e98e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e99a:	4313      	orrs	r3, r2
 800e99c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	699b      	ldr	r3, [r3, #24]
 800e9a8:	041b      	lsls	r3, r3, #16
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	69db      	ldr	r3, [r3, #28]
 800e9b8:	4313      	orrs	r3, r2
 800e9ba:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a19      	ldr	r2, [pc, #100]	@ (800ea28 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d004      	beq.n	800e9d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a18      	ldr	r2, [pc, #96]	@ (800ea2c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d11c      	bne.n	800ea0a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9da:	051b      	lsls	r3, r3, #20
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	6a1b      	ldr	r3, [r3, #32]
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea06:	4313      	orrs	r3, r2
 800ea08:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ea1a:	2300      	movs	r3, #0
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3714      	adds	r7, #20
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr
 800ea28:	40010000 	.word	0x40010000
 800ea2c:	40010400 	.word	0x40010400

0800ea30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e042      	b.n	800eb04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d106      	bne.n	800ea96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f7f3 fd3d 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2224      	movs	r2, #36	@ 0x24
 800ea9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f022 0201 	bic.w	r2, r2, #1
 800eaac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d002      	beq.n	800eabc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 ff22 	bl	800f900 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 f8b3 	bl	800ec28 <UART_SetConfig>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d101      	bne.n	800eacc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	e01b      	b.n	800eb04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	685a      	ldr	r2, [r3, #4]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800eada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	689a      	ldr	r2, [r3, #8]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800eaea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f042 0201 	orr.w	r2, r2, #1
 800eafa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 ffa1 	bl	800fa44 <UART_CheckIdleState>
 800eb02:	4603      	mov	r3, r0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08a      	sub	sp, #40	@ 0x28
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb22:	2b20      	cmp	r3, #32
 800eb24:	d17b      	bne.n	800ec1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <HAL_UART_Transmit+0x26>
 800eb2c:	88fb      	ldrh	r3, [r7, #6]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eb32:	2301      	movs	r3, #1
 800eb34:	e074      	b.n	800ec20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2221      	movs	r2, #33	@ 0x21
 800eb42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb46:	f7f3 ff73 	bl	8002a30 <HAL_GetTick>
 800eb4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	88fa      	ldrh	r2, [r7, #6]
 800eb50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	88fa      	ldrh	r2, [r7, #6]
 800eb58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb64:	d108      	bne.n	800eb78 <HAL_UART_Transmit+0x6c>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	691b      	ldr	r3, [r3, #16]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d104      	bne.n	800eb78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	61bb      	str	r3, [r7, #24]
 800eb76:	e003      	b.n	800eb80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eb80:	e030      	b.n	800ebe4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	9300      	str	r3, [sp, #0]
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	2180      	movs	r1, #128	@ 0x80
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f001 f803 	bl	800fb98 <UART_WaitOnFlagUntilTimeout>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d005      	beq.n	800eba4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2220      	movs	r2, #32
 800eb9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800eba0:	2303      	movs	r3, #3
 800eba2:	e03d      	b.n	800ec20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d10b      	bne.n	800ebc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ebaa:	69bb      	ldr	r3, [r7, #24]
 800ebac:	881b      	ldrh	r3, [r3, #0]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	3302      	adds	r3, #2
 800ebbe:	61bb      	str	r3, [r7, #24]
 800ebc0:	e007      	b.n	800ebd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	781a      	ldrb	r2, [r3, #0]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	3b01      	subs	r3, #1
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1c8      	bne.n	800eb82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	9300      	str	r3, [sp, #0]
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	2140      	movs	r1, #64	@ 0x40
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f000 ffcc 	bl	800fb98 <UART_WaitOnFlagUntilTimeout>
 800ec00:	4603      	mov	r3, r0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d005      	beq.n	800ec12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	e006      	b.n	800ec20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2220      	movs	r2, #32
 800ec16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	e000      	b.n	800ec20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ec1e:	2302      	movs	r3, #2
  }
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3720      	adds	r7, #32
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec2c:	b092      	sub	sp, #72	@ 0x48
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec32:	2300      	movs	r3, #0
 800ec34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	689a      	ldr	r2, [r3, #8]
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	691b      	ldr	r3, [r3, #16]
 800ec40:	431a      	orrs	r2, r3
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	695b      	ldr	r3, [r3, #20]
 800ec46:	431a      	orrs	r2, r3
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	69db      	ldr	r3, [r3, #28]
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	681a      	ldr	r2, [r3, #0]
 800ec56:	4bbe      	ldr	r3, [pc, #760]	@ (800ef50 <UART_SetConfig+0x328>)
 800ec58:	4013      	ands	r3, r2
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	6812      	ldr	r2, [r2, #0]
 800ec5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec60:	430b      	orrs	r3, r1
 800ec62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	68da      	ldr	r2, [r3, #12]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	430a      	orrs	r2, r1
 800ec78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	699b      	ldr	r3, [r3, #24]
 800ec7e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4ab3      	ldr	r2, [pc, #716]	@ (800ef54 <UART_SetConfig+0x32c>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d004      	beq.n	800ec94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	6a1b      	ldr	r3, [r3, #32]
 800ec8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec90:	4313      	orrs	r3, r2
 800ec92:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	689a      	ldr	r2, [r3, #8]
 800ec9a:	4baf      	ldr	r3, [pc, #700]	@ (800ef58 <UART_SetConfig+0x330>)
 800ec9c:	4013      	ands	r3, r2
 800ec9e:	697a      	ldr	r2, [r7, #20]
 800eca0:	6812      	ldr	r2, [r2, #0]
 800eca2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eca4:	430b      	orrs	r3, r1
 800eca6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecae:	f023 010f 	bic.w	r1, r3, #15
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	430a      	orrs	r2, r1
 800ecbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4aa6      	ldr	r2, [pc, #664]	@ (800ef5c <UART_SetConfig+0x334>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d177      	bne.n	800edb8 <UART_SetConfig+0x190>
 800ecc8:	4ba5      	ldr	r3, [pc, #660]	@ (800ef60 <UART_SetConfig+0x338>)
 800ecca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eccc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ecd0:	2b28      	cmp	r3, #40	@ 0x28
 800ecd2:	d86d      	bhi.n	800edb0 <UART_SetConfig+0x188>
 800ecd4:	a201      	add	r2, pc, #4	@ (adr r2, 800ecdc <UART_SetConfig+0xb4>)
 800ecd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecda:	bf00      	nop
 800ecdc:	0800ed81 	.word	0x0800ed81
 800ece0:	0800edb1 	.word	0x0800edb1
 800ece4:	0800edb1 	.word	0x0800edb1
 800ece8:	0800edb1 	.word	0x0800edb1
 800ecec:	0800edb1 	.word	0x0800edb1
 800ecf0:	0800edb1 	.word	0x0800edb1
 800ecf4:	0800edb1 	.word	0x0800edb1
 800ecf8:	0800edb1 	.word	0x0800edb1
 800ecfc:	0800ed89 	.word	0x0800ed89
 800ed00:	0800edb1 	.word	0x0800edb1
 800ed04:	0800edb1 	.word	0x0800edb1
 800ed08:	0800edb1 	.word	0x0800edb1
 800ed0c:	0800edb1 	.word	0x0800edb1
 800ed10:	0800edb1 	.word	0x0800edb1
 800ed14:	0800edb1 	.word	0x0800edb1
 800ed18:	0800edb1 	.word	0x0800edb1
 800ed1c:	0800ed91 	.word	0x0800ed91
 800ed20:	0800edb1 	.word	0x0800edb1
 800ed24:	0800edb1 	.word	0x0800edb1
 800ed28:	0800edb1 	.word	0x0800edb1
 800ed2c:	0800edb1 	.word	0x0800edb1
 800ed30:	0800edb1 	.word	0x0800edb1
 800ed34:	0800edb1 	.word	0x0800edb1
 800ed38:	0800edb1 	.word	0x0800edb1
 800ed3c:	0800ed99 	.word	0x0800ed99
 800ed40:	0800edb1 	.word	0x0800edb1
 800ed44:	0800edb1 	.word	0x0800edb1
 800ed48:	0800edb1 	.word	0x0800edb1
 800ed4c:	0800edb1 	.word	0x0800edb1
 800ed50:	0800edb1 	.word	0x0800edb1
 800ed54:	0800edb1 	.word	0x0800edb1
 800ed58:	0800edb1 	.word	0x0800edb1
 800ed5c:	0800eda1 	.word	0x0800eda1
 800ed60:	0800edb1 	.word	0x0800edb1
 800ed64:	0800edb1 	.word	0x0800edb1
 800ed68:	0800edb1 	.word	0x0800edb1
 800ed6c:	0800edb1 	.word	0x0800edb1
 800ed70:	0800edb1 	.word	0x0800edb1
 800ed74:	0800edb1 	.word	0x0800edb1
 800ed78:	0800edb1 	.word	0x0800edb1
 800ed7c:	0800eda9 	.word	0x0800eda9
 800ed80:	2301      	movs	r3, #1
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed86:	e326      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ed88:	2304      	movs	r3, #4
 800ed8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed8e:	e322      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ed90:	2308      	movs	r3, #8
 800ed92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed96:	e31e      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ed98:	2310      	movs	r3, #16
 800ed9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed9e:	e31a      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800eda0:	2320      	movs	r3, #32
 800eda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda6:	e316      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800eda8:	2340      	movs	r3, #64	@ 0x40
 800edaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edae:	e312      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800edb0:	2380      	movs	r3, #128	@ 0x80
 800edb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb6:	e30e      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4a69      	ldr	r2, [pc, #420]	@ (800ef64 <UART_SetConfig+0x33c>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d130      	bne.n	800ee24 <UART_SetConfig+0x1fc>
 800edc2:	4b67      	ldr	r3, [pc, #412]	@ (800ef60 <UART_SetConfig+0x338>)
 800edc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edc6:	f003 0307 	and.w	r3, r3, #7
 800edca:	2b05      	cmp	r3, #5
 800edcc:	d826      	bhi.n	800ee1c <UART_SetConfig+0x1f4>
 800edce:	a201      	add	r2, pc, #4	@ (adr r2, 800edd4 <UART_SetConfig+0x1ac>)
 800edd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd4:	0800eded 	.word	0x0800eded
 800edd8:	0800edf5 	.word	0x0800edf5
 800eddc:	0800edfd 	.word	0x0800edfd
 800ede0:	0800ee05 	.word	0x0800ee05
 800ede4:	0800ee0d 	.word	0x0800ee0d
 800ede8:	0800ee15 	.word	0x0800ee15
 800edec:	2300      	movs	r3, #0
 800edee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edf2:	e2f0      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800edf4:	2304      	movs	r3, #4
 800edf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfa:	e2ec      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800edfc:	2308      	movs	r3, #8
 800edfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee02:	e2e8      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee04:	2310      	movs	r3, #16
 800ee06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0a:	e2e4      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee0c:	2320      	movs	r3, #32
 800ee0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee12:	e2e0      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee14:	2340      	movs	r3, #64	@ 0x40
 800ee16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee1a:	e2dc      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee1c:	2380      	movs	r3, #128	@ 0x80
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee22:	e2d8      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a4f      	ldr	r2, [pc, #316]	@ (800ef68 <UART_SetConfig+0x340>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d130      	bne.n	800ee90 <UART_SetConfig+0x268>
 800ee2e:	4b4c      	ldr	r3, [pc, #304]	@ (800ef60 <UART_SetConfig+0x338>)
 800ee30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee32:	f003 0307 	and.w	r3, r3, #7
 800ee36:	2b05      	cmp	r3, #5
 800ee38:	d826      	bhi.n	800ee88 <UART_SetConfig+0x260>
 800ee3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ee40 <UART_SetConfig+0x218>)
 800ee3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee40:	0800ee59 	.word	0x0800ee59
 800ee44:	0800ee61 	.word	0x0800ee61
 800ee48:	0800ee69 	.word	0x0800ee69
 800ee4c:	0800ee71 	.word	0x0800ee71
 800ee50:	0800ee79 	.word	0x0800ee79
 800ee54:	0800ee81 	.word	0x0800ee81
 800ee58:	2300      	movs	r3, #0
 800ee5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5e:	e2ba      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee60:	2304      	movs	r3, #4
 800ee62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee66:	e2b6      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee68:	2308      	movs	r3, #8
 800ee6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6e:	e2b2      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee70:	2310      	movs	r3, #16
 800ee72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee76:	e2ae      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee78:	2320      	movs	r3, #32
 800ee7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee7e:	e2aa      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee80:	2340      	movs	r3, #64	@ 0x40
 800ee82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee86:	e2a6      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee88:	2380      	movs	r3, #128	@ 0x80
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8e:	e2a2      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a35      	ldr	r2, [pc, #212]	@ (800ef6c <UART_SetConfig+0x344>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d130      	bne.n	800eefc <UART_SetConfig+0x2d4>
 800ee9a:	4b31      	ldr	r3, [pc, #196]	@ (800ef60 <UART_SetConfig+0x338>)
 800ee9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee9e:	f003 0307 	and.w	r3, r3, #7
 800eea2:	2b05      	cmp	r3, #5
 800eea4:	d826      	bhi.n	800eef4 <UART_SetConfig+0x2cc>
 800eea6:	a201      	add	r2, pc, #4	@ (adr r2, 800eeac <UART_SetConfig+0x284>)
 800eea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeac:	0800eec5 	.word	0x0800eec5
 800eeb0:	0800eecd 	.word	0x0800eecd
 800eeb4:	0800eed5 	.word	0x0800eed5
 800eeb8:	0800eedd 	.word	0x0800eedd
 800eebc:	0800eee5 	.word	0x0800eee5
 800eec0:	0800eeed 	.word	0x0800eeed
 800eec4:	2300      	movs	r3, #0
 800eec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeca:	e284      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800eecc:	2304      	movs	r3, #4
 800eece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed2:	e280      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800eed4:	2308      	movs	r3, #8
 800eed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeda:	e27c      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800eedc:	2310      	movs	r3, #16
 800eede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eee2:	e278      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800eee4:	2320      	movs	r3, #32
 800eee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeea:	e274      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800eeec:	2340      	movs	r3, #64	@ 0x40
 800eeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eef2:	e270      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800eef4:	2380      	movs	r3, #128	@ 0x80
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eefa:	e26c      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a1b      	ldr	r2, [pc, #108]	@ (800ef70 <UART_SetConfig+0x348>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d142      	bne.n	800ef8c <UART_SetConfig+0x364>
 800ef06:	4b16      	ldr	r3, [pc, #88]	@ (800ef60 <UART_SetConfig+0x338>)
 800ef08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef0a:	f003 0307 	and.w	r3, r3, #7
 800ef0e:	2b05      	cmp	r3, #5
 800ef10:	d838      	bhi.n	800ef84 <UART_SetConfig+0x35c>
 800ef12:	a201      	add	r2, pc, #4	@ (adr r2, 800ef18 <UART_SetConfig+0x2f0>)
 800ef14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef18:	0800ef31 	.word	0x0800ef31
 800ef1c:	0800ef39 	.word	0x0800ef39
 800ef20:	0800ef41 	.word	0x0800ef41
 800ef24:	0800ef49 	.word	0x0800ef49
 800ef28:	0800ef75 	.word	0x0800ef75
 800ef2c:	0800ef7d 	.word	0x0800ef7d
 800ef30:	2300      	movs	r3, #0
 800ef32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef36:	e24e      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ef38:	2304      	movs	r3, #4
 800ef3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3e:	e24a      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ef40:	2308      	movs	r3, #8
 800ef42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef46:	e246      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ef48:	2310      	movs	r3, #16
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4e:	e242      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ef50:	cfff69f3 	.word	0xcfff69f3
 800ef54:	58000c00 	.word	0x58000c00
 800ef58:	11fff4ff 	.word	0x11fff4ff
 800ef5c:	40011000 	.word	0x40011000
 800ef60:	58024400 	.word	0x58024400
 800ef64:	40004400 	.word	0x40004400
 800ef68:	40004800 	.word	0x40004800
 800ef6c:	40004c00 	.word	0x40004c00
 800ef70:	40005000 	.word	0x40005000
 800ef74:	2320      	movs	r3, #32
 800ef76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7a:	e22c      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ef7c:	2340      	movs	r3, #64	@ 0x40
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef82:	e228      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ef84:	2380      	movs	r3, #128	@ 0x80
 800ef86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8a:	e224      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4ab1      	ldr	r2, [pc, #708]	@ (800f258 <UART_SetConfig+0x630>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d176      	bne.n	800f084 <UART_SetConfig+0x45c>
 800ef96:	4bb1      	ldr	r3, [pc, #708]	@ (800f25c <UART_SetConfig+0x634>)
 800ef98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ef9e:	2b28      	cmp	r3, #40	@ 0x28
 800efa0:	d86c      	bhi.n	800f07c <UART_SetConfig+0x454>
 800efa2:	a201      	add	r2, pc, #4	@ (adr r2, 800efa8 <UART_SetConfig+0x380>)
 800efa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa8:	0800f04d 	.word	0x0800f04d
 800efac:	0800f07d 	.word	0x0800f07d
 800efb0:	0800f07d 	.word	0x0800f07d
 800efb4:	0800f07d 	.word	0x0800f07d
 800efb8:	0800f07d 	.word	0x0800f07d
 800efbc:	0800f07d 	.word	0x0800f07d
 800efc0:	0800f07d 	.word	0x0800f07d
 800efc4:	0800f07d 	.word	0x0800f07d
 800efc8:	0800f055 	.word	0x0800f055
 800efcc:	0800f07d 	.word	0x0800f07d
 800efd0:	0800f07d 	.word	0x0800f07d
 800efd4:	0800f07d 	.word	0x0800f07d
 800efd8:	0800f07d 	.word	0x0800f07d
 800efdc:	0800f07d 	.word	0x0800f07d
 800efe0:	0800f07d 	.word	0x0800f07d
 800efe4:	0800f07d 	.word	0x0800f07d
 800efe8:	0800f05d 	.word	0x0800f05d
 800efec:	0800f07d 	.word	0x0800f07d
 800eff0:	0800f07d 	.word	0x0800f07d
 800eff4:	0800f07d 	.word	0x0800f07d
 800eff8:	0800f07d 	.word	0x0800f07d
 800effc:	0800f07d 	.word	0x0800f07d
 800f000:	0800f07d 	.word	0x0800f07d
 800f004:	0800f07d 	.word	0x0800f07d
 800f008:	0800f065 	.word	0x0800f065
 800f00c:	0800f07d 	.word	0x0800f07d
 800f010:	0800f07d 	.word	0x0800f07d
 800f014:	0800f07d 	.word	0x0800f07d
 800f018:	0800f07d 	.word	0x0800f07d
 800f01c:	0800f07d 	.word	0x0800f07d
 800f020:	0800f07d 	.word	0x0800f07d
 800f024:	0800f07d 	.word	0x0800f07d
 800f028:	0800f06d 	.word	0x0800f06d
 800f02c:	0800f07d 	.word	0x0800f07d
 800f030:	0800f07d 	.word	0x0800f07d
 800f034:	0800f07d 	.word	0x0800f07d
 800f038:	0800f07d 	.word	0x0800f07d
 800f03c:	0800f07d 	.word	0x0800f07d
 800f040:	0800f07d 	.word	0x0800f07d
 800f044:	0800f07d 	.word	0x0800f07d
 800f048:	0800f075 	.word	0x0800f075
 800f04c:	2301      	movs	r3, #1
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f052:	e1c0      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f054:	2304      	movs	r3, #4
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f05a:	e1bc      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f05c:	2308      	movs	r3, #8
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f062:	e1b8      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f064:	2310      	movs	r3, #16
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f06a:	e1b4      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f06c:	2320      	movs	r3, #32
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f072:	e1b0      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f074:	2340      	movs	r3, #64	@ 0x40
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f07a:	e1ac      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f07c:	2380      	movs	r3, #128	@ 0x80
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f082:	e1a8      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a75      	ldr	r2, [pc, #468]	@ (800f260 <UART_SetConfig+0x638>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d130      	bne.n	800f0f0 <UART_SetConfig+0x4c8>
 800f08e:	4b73      	ldr	r3, [pc, #460]	@ (800f25c <UART_SetConfig+0x634>)
 800f090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f092:	f003 0307 	and.w	r3, r3, #7
 800f096:	2b05      	cmp	r3, #5
 800f098:	d826      	bhi.n	800f0e8 <UART_SetConfig+0x4c0>
 800f09a:	a201      	add	r2, pc, #4	@ (adr r2, 800f0a0 <UART_SetConfig+0x478>)
 800f09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a0:	0800f0b9 	.word	0x0800f0b9
 800f0a4:	0800f0c1 	.word	0x0800f0c1
 800f0a8:	0800f0c9 	.word	0x0800f0c9
 800f0ac:	0800f0d1 	.word	0x0800f0d1
 800f0b0:	0800f0d9 	.word	0x0800f0d9
 800f0b4:	0800f0e1 	.word	0x0800f0e1
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0be:	e18a      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f0c0:	2304      	movs	r3, #4
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0c6:	e186      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f0c8:	2308      	movs	r3, #8
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ce:	e182      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f0d0:	2310      	movs	r3, #16
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0d6:	e17e      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f0d8:	2320      	movs	r3, #32
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0de:	e17a      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f0e0:	2340      	movs	r3, #64	@ 0x40
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0e6:	e176      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f0e8:	2380      	movs	r3, #128	@ 0x80
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ee:	e172      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a5b      	ldr	r2, [pc, #364]	@ (800f264 <UART_SetConfig+0x63c>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d130      	bne.n	800f15c <UART_SetConfig+0x534>
 800f0fa:	4b58      	ldr	r3, [pc, #352]	@ (800f25c <UART_SetConfig+0x634>)
 800f0fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0fe:	f003 0307 	and.w	r3, r3, #7
 800f102:	2b05      	cmp	r3, #5
 800f104:	d826      	bhi.n	800f154 <UART_SetConfig+0x52c>
 800f106:	a201      	add	r2, pc, #4	@ (adr r2, 800f10c <UART_SetConfig+0x4e4>)
 800f108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f10c:	0800f125 	.word	0x0800f125
 800f110:	0800f12d 	.word	0x0800f12d
 800f114:	0800f135 	.word	0x0800f135
 800f118:	0800f13d 	.word	0x0800f13d
 800f11c:	0800f145 	.word	0x0800f145
 800f120:	0800f14d 	.word	0x0800f14d
 800f124:	2300      	movs	r3, #0
 800f126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f12a:	e154      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f12c:	2304      	movs	r3, #4
 800f12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f132:	e150      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f134:	2308      	movs	r3, #8
 800f136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f13a:	e14c      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f13c:	2310      	movs	r3, #16
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f142:	e148      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f144:	2320      	movs	r3, #32
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f14a:	e144      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f14c:	2340      	movs	r3, #64	@ 0x40
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f152:	e140      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f154:	2380      	movs	r3, #128	@ 0x80
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f15a:	e13c      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a41      	ldr	r2, [pc, #260]	@ (800f268 <UART_SetConfig+0x640>)
 800f162:	4293      	cmp	r3, r2
 800f164:	f040 8082 	bne.w	800f26c <UART_SetConfig+0x644>
 800f168:	4b3c      	ldr	r3, [pc, #240]	@ (800f25c <UART_SetConfig+0x634>)
 800f16a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f16c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f170:	2b28      	cmp	r3, #40	@ 0x28
 800f172:	d86d      	bhi.n	800f250 <UART_SetConfig+0x628>
 800f174:	a201      	add	r2, pc, #4	@ (adr r2, 800f17c <UART_SetConfig+0x554>)
 800f176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f17a:	bf00      	nop
 800f17c:	0800f221 	.word	0x0800f221
 800f180:	0800f251 	.word	0x0800f251
 800f184:	0800f251 	.word	0x0800f251
 800f188:	0800f251 	.word	0x0800f251
 800f18c:	0800f251 	.word	0x0800f251
 800f190:	0800f251 	.word	0x0800f251
 800f194:	0800f251 	.word	0x0800f251
 800f198:	0800f251 	.word	0x0800f251
 800f19c:	0800f229 	.word	0x0800f229
 800f1a0:	0800f251 	.word	0x0800f251
 800f1a4:	0800f251 	.word	0x0800f251
 800f1a8:	0800f251 	.word	0x0800f251
 800f1ac:	0800f251 	.word	0x0800f251
 800f1b0:	0800f251 	.word	0x0800f251
 800f1b4:	0800f251 	.word	0x0800f251
 800f1b8:	0800f251 	.word	0x0800f251
 800f1bc:	0800f231 	.word	0x0800f231
 800f1c0:	0800f251 	.word	0x0800f251
 800f1c4:	0800f251 	.word	0x0800f251
 800f1c8:	0800f251 	.word	0x0800f251
 800f1cc:	0800f251 	.word	0x0800f251
 800f1d0:	0800f251 	.word	0x0800f251
 800f1d4:	0800f251 	.word	0x0800f251
 800f1d8:	0800f251 	.word	0x0800f251
 800f1dc:	0800f239 	.word	0x0800f239
 800f1e0:	0800f251 	.word	0x0800f251
 800f1e4:	0800f251 	.word	0x0800f251
 800f1e8:	0800f251 	.word	0x0800f251
 800f1ec:	0800f251 	.word	0x0800f251
 800f1f0:	0800f251 	.word	0x0800f251
 800f1f4:	0800f251 	.word	0x0800f251
 800f1f8:	0800f251 	.word	0x0800f251
 800f1fc:	0800f241 	.word	0x0800f241
 800f200:	0800f251 	.word	0x0800f251
 800f204:	0800f251 	.word	0x0800f251
 800f208:	0800f251 	.word	0x0800f251
 800f20c:	0800f251 	.word	0x0800f251
 800f210:	0800f251 	.word	0x0800f251
 800f214:	0800f251 	.word	0x0800f251
 800f218:	0800f251 	.word	0x0800f251
 800f21c:	0800f249 	.word	0x0800f249
 800f220:	2301      	movs	r3, #1
 800f222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f226:	e0d6      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f228:	2304      	movs	r3, #4
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22e:	e0d2      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f230:	2308      	movs	r3, #8
 800f232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f236:	e0ce      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f238:	2310      	movs	r3, #16
 800f23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f23e:	e0ca      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f240:	2320      	movs	r3, #32
 800f242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f246:	e0c6      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f248:	2340      	movs	r3, #64	@ 0x40
 800f24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f24e:	e0c2      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f250:	2380      	movs	r3, #128	@ 0x80
 800f252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f256:	e0be      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f258:	40011400 	.word	0x40011400
 800f25c:	58024400 	.word	0x58024400
 800f260:	40007800 	.word	0x40007800
 800f264:	40007c00 	.word	0x40007c00
 800f268:	40011800 	.word	0x40011800
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4aad      	ldr	r2, [pc, #692]	@ (800f528 <UART_SetConfig+0x900>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d176      	bne.n	800f364 <UART_SetConfig+0x73c>
 800f276:	4bad      	ldr	r3, [pc, #692]	@ (800f52c <UART_SetConfig+0x904>)
 800f278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f27a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f27e:	2b28      	cmp	r3, #40	@ 0x28
 800f280:	d86c      	bhi.n	800f35c <UART_SetConfig+0x734>
 800f282:	a201      	add	r2, pc, #4	@ (adr r2, 800f288 <UART_SetConfig+0x660>)
 800f284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f288:	0800f32d 	.word	0x0800f32d
 800f28c:	0800f35d 	.word	0x0800f35d
 800f290:	0800f35d 	.word	0x0800f35d
 800f294:	0800f35d 	.word	0x0800f35d
 800f298:	0800f35d 	.word	0x0800f35d
 800f29c:	0800f35d 	.word	0x0800f35d
 800f2a0:	0800f35d 	.word	0x0800f35d
 800f2a4:	0800f35d 	.word	0x0800f35d
 800f2a8:	0800f335 	.word	0x0800f335
 800f2ac:	0800f35d 	.word	0x0800f35d
 800f2b0:	0800f35d 	.word	0x0800f35d
 800f2b4:	0800f35d 	.word	0x0800f35d
 800f2b8:	0800f35d 	.word	0x0800f35d
 800f2bc:	0800f35d 	.word	0x0800f35d
 800f2c0:	0800f35d 	.word	0x0800f35d
 800f2c4:	0800f35d 	.word	0x0800f35d
 800f2c8:	0800f33d 	.word	0x0800f33d
 800f2cc:	0800f35d 	.word	0x0800f35d
 800f2d0:	0800f35d 	.word	0x0800f35d
 800f2d4:	0800f35d 	.word	0x0800f35d
 800f2d8:	0800f35d 	.word	0x0800f35d
 800f2dc:	0800f35d 	.word	0x0800f35d
 800f2e0:	0800f35d 	.word	0x0800f35d
 800f2e4:	0800f35d 	.word	0x0800f35d
 800f2e8:	0800f345 	.word	0x0800f345
 800f2ec:	0800f35d 	.word	0x0800f35d
 800f2f0:	0800f35d 	.word	0x0800f35d
 800f2f4:	0800f35d 	.word	0x0800f35d
 800f2f8:	0800f35d 	.word	0x0800f35d
 800f2fc:	0800f35d 	.word	0x0800f35d
 800f300:	0800f35d 	.word	0x0800f35d
 800f304:	0800f35d 	.word	0x0800f35d
 800f308:	0800f34d 	.word	0x0800f34d
 800f30c:	0800f35d 	.word	0x0800f35d
 800f310:	0800f35d 	.word	0x0800f35d
 800f314:	0800f35d 	.word	0x0800f35d
 800f318:	0800f35d 	.word	0x0800f35d
 800f31c:	0800f35d 	.word	0x0800f35d
 800f320:	0800f35d 	.word	0x0800f35d
 800f324:	0800f35d 	.word	0x0800f35d
 800f328:	0800f355 	.word	0x0800f355
 800f32c:	2301      	movs	r3, #1
 800f32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f332:	e050      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f334:	2304      	movs	r3, #4
 800f336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f33a:	e04c      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f33c:	2308      	movs	r3, #8
 800f33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f342:	e048      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f344:	2310      	movs	r3, #16
 800f346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f34a:	e044      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f34c:	2320      	movs	r3, #32
 800f34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f352:	e040      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f354:	2340      	movs	r3, #64	@ 0x40
 800f356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f35a:	e03c      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f35c:	2380      	movs	r3, #128	@ 0x80
 800f35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f362:	e038      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a71      	ldr	r2, [pc, #452]	@ (800f530 <UART_SetConfig+0x908>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d130      	bne.n	800f3d0 <UART_SetConfig+0x7a8>
 800f36e:	4b6f      	ldr	r3, [pc, #444]	@ (800f52c <UART_SetConfig+0x904>)
 800f370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f372:	f003 0307 	and.w	r3, r3, #7
 800f376:	2b05      	cmp	r3, #5
 800f378:	d826      	bhi.n	800f3c8 <UART_SetConfig+0x7a0>
 800f37a:	a201      	add	r2, pc, #4	@ (adr r2, 800f380 <UART_SetConfig+0x758>)
 800f37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f380:	0800f399 	.word	0x0800f399
 800f384:	0800f3a1 	.word	0x0800f3a1
 800f388:	0800f3a9 	.word	0x0800f3a9
 800f38c:	0800f3b1 	.word	0x0800f3b1
 800f390:	0800f3b9 	.word	0x0800f3b9
 800f394:	0800f3c1 	.word	0x0800f3c1
 800f398:	2302      	movs	r3, #2
 800f39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f39e:	e01a      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f3a0:	2304      	movs	r3, #4
 800f3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3a6:	e016      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f3a8:	2308      	movs	r3, #8
 800f3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ae:	e012      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f3b0:	2310      	movs	r3, #16
 800f3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3b6:	e00e      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f3b8:	2320      	movs	r3, #32
 800f3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3be:	e00a      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f3c0:	2340      	movs	r3, #64	@ 0x40
 800f3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3c6:	e006      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f3c8:	2380      	movs	r3, #128	@ 0x80
 800f3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ce:	e002      	b.n	800f3d6 <UART_SetConfig+0x7ae>
 800f3d0:	2380      	movs	r3, #128	@ 0x80
 800f3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4a55      	ldr	r2, [pc, #340]	@ (800f530 <UART_SetConfig+0x908>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	f040 80f8 	bne.w	800f5d2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f3e6:	2b20      	cmp	r3, #32
 800f3e8:	dc46      	bgt.n	800f478 <UART_SetConfig+0x850>
 800f3ea:	2b02      	cmp	r3, #2
 800f3ec:	db75      	blt.n	800f4da <UART_SetConfig+0x8b2>
 800f3ee:	3b02      	subs	r3, #2
 800f3f0:	2b1e      	cmp	r3, #30
 800f3f2:	d872      	bhi.n	800f4da <UART_SetConfig+0x8b2>
 800f3f4:	a201      	add	r2, pc, #4	@ (adr r2, 800f3fc <UART_SetConfig+0x7d4>)
 800f3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3fa:	bf00      	nop
 800f3fc:	0800f47f 	.word	0x0800f47f
 800f400:	0800f4db 	.word	0x0800f4db
 800f404:	0800f487 	.word	0x0800f487
 800f408:	0800f4db 	.word	0x0800f4db
 800f40c:	0800f4db 	.word	0x0800f4db
 800f410:	0800f4db 	.word	0x0800f4db
 800f414:	0800f497 	.word	0x0800f497
 800f418:	0800f4db 	.word	0x0800f4db
 800f41c:	0800f4db 	.word	0x0800f4db
 800f420:	0800f4db 	.word	0x0800f4db
 800f424:	0800f4db 	.word	0x0800f4db
 800f428:	0800f4db 	.word	0x0800f4db
 800f42c:	0800f4db 	.word	0x0800f4db
 800f430:	0800f4db 	.word	0x0800f4db
 800f434:	0800f4a7 	.word	0x0800f4a7
 800f438:	0800f4db 	.word	0x0800f4db
 800f43c:	0800f4db 	.word	0x0800f4db
 800f440:	0800f4db 	.word	0x0800f4db
 800f444:	0800f4db 	.word	0x0800f4db
 800f448:	0800f4db 	.word	0x0800f4db
 800f44c:	0800f4db 	.word	0x0800f4db
 800f450:	0800f4db 	.word	0x0800f4db
 800f454:	0800f4db 	.word	0x0800f4db
 800f458:	0800f4db 	.word	0x0800f4db
 800f45c:	0800f4db 	.word	0x0800f4db
 800f460:	0800f4db 	.word	0x0800f4db
 800f464:	0800f4db 	.word	0x0800f4db
 800f468:	0800f4db 	.word	0x0800f4db
 800f46c:	0800f4db 	.word	0x0800f4db
 800f470:	0800f4db 	.word	0x0800f4db
 800f474:	0800f4cd 	.word	0x0800f4cd
 800f478:	2b40      	cmp	r3, #64	@ 0x40
 800f47a:	d02a      	beq.n	800f4d2 <UART_SetConfig+0x8aa>
 800f47c:	e02d      	b.n	800f4da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f47e:	f7fb ff37 	bl	800b2f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f482:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f484:	e02f      	b.n	800f4e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7fb ff46 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f494:	e027      	b.n	800f4e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f496:	f107 0318 	add.w	r3, r7, #24
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fc f892 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4a4:	e01f      	b.n	800f4e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4a6:	4b21      	ldr	r3, [pc, #132]	@ (800f52c <UART_SetConfig+0x904>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f003 0320 	and.w	r3, r3, #32
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d009      	beq.n	800f4c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4b2:	4b1e      	ldr	r3, [pc, #120]	@ (800f52c <UART_SetConfig+0x904>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	08db      	lsrs	r3, r3, #3
 800f4b8:	f003 0303 	and.w	r3, r3, #3
 800f4bc:	4a1d      	ldr	r2, [pc, #116]	@ (800f534 <UART_SetConfig+0x90c>)
 800f4be:	fa22 f303 	lsr.w	r3, r2, r3
 800f4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f4c4:	e00f      	b.n	800f4e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f4c6:	4b1b      	ldr	r3, [pc, #108]	@ (800f534 <UART_SetConfig+0x90c>)
 800f4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4ca:	e00c      	b.n	800f4e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4cc:	4b1a      	ldr	r3, [pc, #104]	@ (800f538 <UART_SetConfig+0x910>)
 800f4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4d0:	e009      	b.n	800f4e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4d8:	e005      	b.n	800f4e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f4e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	f000 81ee 	beq.w	800f8ca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4f2:	4a12      	ldr	r2, [pc, #72]	@ (800f53c <UART_SetConfig+0x914>)
 800f4f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f500:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	685a      	ldr	r2, [r3, #4]
 800f506:	4613      	mov	r3, r2
 800f508:	005b      	lsls	r3, r3, #1
 800f50a:	4413      	add	r3, r2
 800f50c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f50e:	429a      	cmp	r2, r3
 800f510:	d305      	bcc.n	800f51e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d910      	bls.n	800f540 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f51e:	2301      	movs	r3, #1
 800f520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f524:	e1d1      	b.n	800f8ca <UART_SetConfig+0xca2>
 800f526:	bf00      	nop
 800f528:	40011c00 	.word	0x40011c00
 800f52c:	58024400 	.word	0x58024400
 800f530:	58000c00 	.word	0x58000c00
 800f534:	03d09000 	.word	0x03d09000
 800f538:	003d0900 	.word	0x003d0900
 800f53c:	08011c84 	.word	0x08011c84
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f542:	2200      	movs	r2, #0
 800f544:	60bb      	str	r3, [r7, #8]
 800f546:	60fa      	str	r2, [r7, #12]
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f54c:	4ac0      	ldr	r2, [pc, #768]	@ (800f850 <UART_SetConfig+0xc28>)
 800f54e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f552:	b29b      	uxth	r3, r3
 800f554:	2200      	movs	r2, #0
 800f556:	603b      	str	r3, [r7, #0]
 800f558:	607a      	str	r2, [r7, #4]
 800f55a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f55e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f562:	f7f0 ff2d 	bl	80003c0 <__aeabi_uldivmod>
 800f566:	4602      	mov	r2, r0
 800f568:	460b      	mov	r3, r1
 800f56a:	4610      	mov	r0, r2
 800f56c:	4619      	mov	r1, r3
 800f56e:	f04f 0200 	mov.w	r2, #0
 800f572:	f04f 0300 	mov.w	r3, #0
 800f576:	020b      	lsls	r3, r1, #8
 800f578:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f57c:	0202      	lsls	r2, r0, #8
 800f57e:	6979      	ldr	r1, [r7, #20]
 800f580:	6849      	ldr	r1, [r1, #4]
 800f582:	0849      	lsrs	r1, r1, #1
 800f584:	2000      	movs	r0, #0
 800f586:	460c      	mov	r4, r1
 800f588:	4605      	mov	r5, r0
 800f58a:	eb12 0804 	adds.w	r8, r2, r4
 800f58e:	eb43 0905 	adc.w	r9, r3, r5
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	469a      	mov	sl, r3
 800f59a:	4693      	mov	fp, r2
 800f59c:	4652      	mov	r2, sl
 800f59e:	465b      	mov	r3, fp
 800f5a0:	4640      	mov	r0, r8
 800f5a2:	4649      	mov	r1, r9
 800f5a4:	f7f0 ff0c 	bl	80003c0 <__aeabi_uldivmod>
 800f5a8:	4602      	mov	r2, r0
 800f5aa:	460b      	mov	r3, r1
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f5b6:	d308      	bcc.n	800f5ca <UART_SetConfig+0x9a2>
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5be:	d204      	bcs.n	800f5ca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5c6:	60da      	str	r2, [r3, #12]
 800f5c8:	e17f      	b.n	800f8ca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f5d0:	e17b      	b.n	800f8ca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	69db      	ldr	r3, [r3, #28]
 800f5d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f5da:	f040 80bd 	bne.w	800f758 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f5de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f5e2:	2b20      	cmp	r3, #32
 800f5e4:	dc48      	bgt.n	800f678 <UART_SetConfig+0xa50>
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	db7b      	blt.n	800f6e2 <UART_SetConfig+0xaba>
 800f5ea:	2b20      	cmp	r3, #32
 800f5ec:	d879      	bhi.n	800f6e2 <UART_SetConfig+0xaba>
 800f5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f5f4 <UART_SetConfig+0x9cc>)
 800f5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f4:	0800f67f 	.word	0x0800f67f
 800f5f8:	0800f687 	.word	0x0800f687
 800f5fc:	0800f6e3 	.word	0x0800f6e3
 800f600:	0800f6e3 	.word	0x0800f6e3
 800f604:	0800f68f 	.word	0x0800f68f
 800f608:	0800f6e3 	.word	0x0800f6e3
 800f60c:	0800f6e3 	.word	0x0800f6e3
 800f610:	0800f6e3 	.word	0x0800f6e3
 800f614:	0800f69f 	.word	0x0800f69f
 800f618:	0800f6e3 	.word	0x0800f6e3
 800f61c:	0800f6e3 	.word	0x0800f6e3
 800f620:	0800f6e3 	.word	0x0800f6e3
 800f624:	0800f6e3 	.word	0x0800f6e3
 800f628:	0800f6e3 	.word	0x0800f6e3
 800f62c:	0800f6e3 	.word	0x0800f6e3
 800f630:	0800f6e3 	.word	0x0800f6e3
 800f634:	0800f6af 	.word	0x0800f6af
 800f638:	0800f6e3 	.word	0x0800f6e3
 800f63c:	0800f6e3 	.word	0x0800f6e3
 800f640:	0800f6e3 	.word	0x0800f6e3
 800f644:	0800f6e3 	.word	0x0800f6e3
 800f648:	0800f6e3 	.word	0x0800f6e3
 800f64c:	0800f6e3 	.word	0x0800f6e3
 800f650:	0800f6e3 	.word	0x0800f6e3
 800f654:	0800f6e3 	.word	0x0800f6e3
 800f658:	0800f6e3 	.word	0x0800f6e3
 800f65c:	0800f6e3 	.word	0x0800f6e3
 800f660:	0800f6e3 	.word	0x0800f6e3
 800f664:	0800f6e3 	.word	0x0800f6e3
 800f668:	0800f6e3 	.word	0x0800f6e3
 800f66c:	0800f6e3 	.word	0x0800f6e3
 800f670:	0800f6e3 	.word	0x0800f6e3
 800f674:	0800f6d5 	.word	0x0800f6d5
 800f678:	2b40      	cmp	r3, #64	@ 0x40
 800f67a:	d02e      	beq.n	800f6da <UART_SetConfig+0xab2>
 800f67c:	e031      	b.n	800f6e2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f67e:	f7f9 ff99 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 800f682:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f684:	e033      	b.n	800f6ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f686:	f7f9 ffab 	bl	80095e0 <HAL_RCC_GetPCLK2Freq>
 800f68a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f68c:	e02f      	b.n	800f6ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f68e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f692:	4618      	mov	r0, r3
 800f694:	f7fb fe42 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f69c:	e027      	b.n	800f6ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f69e:	f107 0318 	add.w	r3, r7, #24
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fb ff8e 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6ac:	e01f      	b.n	800f6ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6ae:	4b69      	ldr	r3, [pc, #420]	@ (800f854 <UART_SetConfig+0xc2c>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f003 0320 	and.w	r3, r3, #32
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d009      	beq.n	800f6ce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6ba:	4b66      	ldr	r3, [pc, #408]	@ (800f854 <UART_SetConfig+0xc2c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	08db      	lsrs	r3, r3, #3
 800f6c0:	f003 0303 	and.w	r3, r3, #3
 800f6c4:	4a64      	ldr	r2, [pc, #400]	@ (800f858 <UART_SetConfig+0xc30>)
 800f6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800f6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6cc:	e00f      	b.n	800f6ee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f6ce:	4b62      	ldr	r3, [pc, #392]	@ (800f858 <UART_SetConfig+0xc30>)
 800f6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6d2:	e00c      	b.n	800f6ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6d4:	4b61      	ldr	r3, [pc, #388]	@ (800f85c <UART_SetConfig+0xc34>)
 800f6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6d8:	e009      	b.n	800f6ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6e0:	e005      	b.n	800f6ee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f6ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f000 80ea 	beq.w	800f8ca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6fa:	4a55      	ldr	r2, [pc, #340]	@ (800f850 <UART_SetConfig+0xc28>)
 800f6fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f700:	461a      	mov	r2, r3
 800f702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f704:	fbb3 f3f2 	udiv	r3, r3, r2
 800f708:	005a      	lsls	r2, r3, #1
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	085b      	lsrs	r3, r3, #1
 800f710:	441a      	add	r2, r3
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	fbb2 f3f3 	udiv	r3, r2, r3
 800f71a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f71e:	2b0f      	cmp	r3, #15
 800f720:	d916      	bls.n	800f750 <UART_SetConfig+0xb28>
 800f722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f728:	d212      	bcs.n	800f750 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	f023 030f 	bic.w	r3, r3, #15
 800f732:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f736:	085b      	lsrs	r3, r3, #1
 800f738:	b29b      	uxth	r3, r3
 800f73a:	f003 0307 	and.w	r3, r3, #7
 800f73e:	b29a      	uxth	r2, r3
 800f740:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f742:	4313      	orrs	r3, r2
 800f744:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f74c:	60da      	str	r2, [r3, #12]
 800f74e:	e0bc      	b.n	800f8ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f750:	2301      	movs	r3, #1
 800f752:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f756:	e0b8      	b.n	800f8ca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f758:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f75c:	2b20      	cmp	r3, #32
 800f75e:	dc4b      	bgt.n	800f7f8 <UART_SetConfig+0xbd0>
 800f760:	2b00      	cmp	r3, #0
 800f762:	f2c0 8087 	blt.w	800f874 <UART_SetConfig+0xc4c>
 800f766:	2b20      	cmp	r3, #32
 800f768:	f200 8084 	bhi.w	800f874 <UART_SetConfig+0xc4c>
 800f76c:	a201      	add	r2, pc, #4	@ (adr r2, 800f774 <UART_SetConfig+0xb4c>)
 800f76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f772:	bf00      	nop
 800f774:	0800f7ff 	.word	0x0800f7ff
 800f778:	0800f807 	.word	0x0800f807
 800f77c:	0800f875 	.word	0x0800f875
 800f780:	0800f875 	.word	0x0800f875
 800f784:	0800f80f 	.word	0x0800f80f
 800f788:	0800f875 	.word	0x0800f875
 800f78c:	0800f875 	.word	0x0800f875
 800f790:	0800f875 	.word	0x0800f875
 800f794:	0800f81f 	.word	0x0800f81f
 800f798:	0800f875 	.word	0x0800f875
 800f79c:	0800f875 	.word	0x0800f875
 800f7a0:	0800f875 	.word	0x0800f875
 800f7a4:	0800f875 	.word	0x0800f875
 800f7a8:	0800f875 	.word	0x0800f875
 800f7ac:	0800f875 	.word	0x0800f875
 800f7b0:	0800f875 	.word	0x0800f875
 800f7b4:	0800f82f 	.word	0x0800f82f
 800f7b8:	0800f875 	.word	0x0800f875
 800f7bc:	0800f875 	.word	0x0800f875
 800f7c0:	0800f875 	.word	0x0800f875
 800f7c4:	0800f875 	.word	0x0800f875
 800f7c8:	0800f875 	.word	0x0800f875
 800f7cc:	0800f875 	.word	0x0800f875
 800f7d0:	0800f875 	.word	0x0800f875
 800f7d4:	0800f875 	.word	0x0800f875
 800f7d8:	0800f875 	.word	0x0800f875
 800f7dc:	0800f875 	.word	0x0800f875
 800f7e0:	0800f875 	.word	0x0800f875
 800f7e4:	0800f875 	.word	0x0800f875
 800f7e8:	0800f875 	.word	0x0800f875
 800f7ec:	0800f875 	.word	0x0800f875
 800f7f0:	0800f875 	.word	0x0800f875
 800f7f4:	0800f867 	.word	0x0800f867
 800f7f8:	2b40      	cmp	r3, #64	@ 0x40
 800f7fa:	d037      	beq.n	800f86c <UART_SetConfig+0xc44>
 800f7fc:	e03a      	b.n	800f874 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7fe:	f7f9 fed9 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 800f802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f804:	e03c      	b.n	800f880 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f806:	f7f9 feeb 	bl	80095e0 <HAL_RCC_GetPCLK2Freq>
 800f80a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f80c:	e038      	b.n	800f880 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f80e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f812:	4618      	mov	r0, r3
 800f814:	f7fb fd82 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f81c:	e030      	b.n	800f880 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f81e:	f107 0318 	add.w	r3, r7, #24
 800f822:	4618      	mov	r0, r3
 800f824:	f7fb fece 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f82c:	e028      	b.n	800f880 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f82e:	4b09      	ldr	r3, [pc, #36]	@ (800f854 <UART_SetConfig+0xc2c>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	f003 0320 	and.w	r3, r3, #32
 800f836:	2b00      	cmp	r3, #0
 800f838:	d012      	beq.n	800f860 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f83a:	4b06      	ldr	r3, [pc, #24]	@ (800f854 <UART_SetConfig+0xc2c>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	08db      	lsrs	r3, r3, #3
 800f840:	f003 0303 	and.w	r3, r3, #3
 800f844:	4a04      	ldr	r2, [pc, #16]	@ (800f858 <UART_SetConfig+0xc30>)
 800f846:	fa22 f303 	lsr.w	r3, r2, r3
 800f84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f84c:	e018      	b.n	800f880 <UART_SetConfig+0xc58>
 800f84e:	bf00      	nop
 800f850:	08011c84 	.word	0x08011c84
 800f854:	58024400 	.word	0x58024400
 800f858:	03d09000 	.word	0x03d09000
 800f85c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f860:	4b24      	ldr	r3, [pc, #144]	@ (800f8f4 <UART_SetConfig+0xccc>)
 800f862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f864:	e00c      	b.n	800f880 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f866:	4b24      	ldr	r3, [pc, #144]	@ (800f8f8 <UART_SetConfig+0xcd0>)
 800f868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f86a:	e009      	b.n	800f880 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f86c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f872:	e005      	b.n	800f880 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f874:	2300      	movs	r3, #0
 800f876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f878:	2301      	movs	r3, #1
 800f87a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f87e:	bf00      	nop
    }

    if (pclk != 0U)
 800f880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f882:	2b00      	cmp	r3, #0
 800f884:	d021      	beq.n	800f8ca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f88a:	4a1c      	ldr	r2, [pc, #112]	@ (800f8fc <UART_SetConfig+0xcd4>)
 800f88c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f890:	461a      	mov	r2, r3
 800f892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f894:	fbb3 f2f2 	udiv	r2, r3, r2
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	085b      	lsrs	r3, r3, #1
 800f89e:	441a      	add	r2, r3
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ac:	2b0f      	cmp	r3, #15
 800f8ae:	d909      	bls.n	800f8c4 <UART_SetConfig+0xc9c>
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8b6:	d205      	bcs.n	800f8c4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	60da      	str	r2, [r3, #12]
 800f8c2:	e002      	b.n	800f8ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f8e6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3748      	adds	r7, #72	@ 0x48
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f8f4:	03d09000 	.word	0x03d09000
 800f8f8:	003d0900 	.word	0x003d0900
 800f8fc:	08011c84 	.word	0x08011c84

0800f900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f900:	b480      	push	{r7}
 800f902:	b083      	sub	sp, #12
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f90c:	f003 0308 	and.w	r3, r3, #8
 800f910:	2b00      	cmp	r3, #0
 800f912:	d00a      	beq.n	800f92a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	430a      	orrs	r2, r1
 800f928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f92e:	f003 0301 	and.w	r3, r3, #1
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00a      	beq.n	800f94c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	430a      	orrs	r2, r1
 800f94a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f950:	f003 0302 	and.w	r3, r3, #2
 800f954:	2b00      	cmp	r3, #0
 800f956:	d00a      	beq.n	800f96e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	430a      	orrs	r2, r1
 800f96c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f972:	f003 0304 	and.w	r3, r3, #4
 800f976:	2b00      	cmp	r3, #0
 800f978:	d00a      	beq.n	800f990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	430a      	orrs	r2, r1
 800f98e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f994:	f003 0310 	and.w	r3, r3, #16
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00a      	beq.n	800f9b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	430a      	orrs	r2, r1
 800f9b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9b6:	f003 0320 	and.w	r3, r3, #32
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00a      	beq.n	800f9d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	689b      	ldr	r3, [r3, #8]
 800f9c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	430a      	orrs	r2, r1
 800f9d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d01a      	beq.n	800fa16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	430a      	orrs	r2, r1
 800f9f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f9fe:	d10a      	bne.n	800fa16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	430a      	orrs	r2, r1
 800fa14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00a      	beq.n	800fa38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	430a      	orrs	r2, r1
 800fa36:	605a      	str	r2, [r3, #4]
  }
}
 800fa38:	bf00      	nop
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b098      	sub	sp, #96	@ 0x60
 800fa48:	af02      	add	r7, sp, #8
 800fa4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa54:	f7f2 ffec 	bl	8002a30 <HAL_GetTick>
 800fa58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f003 0308 	and.w	r3, r3, #8
 800fa64:	2b08      	cmp	r3, #8
 800fa66:	d12f      	bne.n	800fac8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa70:	2200      	movs	r2, #0
 800fa72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f000 f88e 	bl	800fb98 <UART_WaitOnFlagUntilTimeout>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d022      	beq.n	800fac8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8a:	e853 3f00 	ldrex	r3, [r3]
 800fa8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa96:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800faa0:	647b      	str	r3, [r7, #68]	@ 0x44
 800faa2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800faa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800faa8:	e841 2300 	strex	r3, r2, [r1]
 800faac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800faae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d1e6      	bne.n	800fa82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2220      	movs	r2, #32
 800fab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2200      	movs	r2, #0
 800fac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fac4:	2303      	movs	r3, #3
 800fac6:	e063      	b.n	800fb90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f003 0304 	and.w	r3, r3, #4
 800fad2:	2b04      	cmp	r3, #4
 800fad4:	d149      	bne.n	800fb6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fad6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fada:	9300      	str	r3, [sp, #0]
 800fadc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fade:	2200      	movs	r2, #0
 800fae0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 f857 	bl	800fb98 <UART_WaitOnFlagUntilTimeout>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	d03c      	beq.n	800fb6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf8:	e853 3f00 	ldrex	r3, [r3]
 800fafc:	623b      	str	r3, [r7, #32]
   return(result);
 800fafe:	6a3b      	ldr	r3, [r7, #32]
 800fb00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb0e:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb16:	e841 2300 	strex	r3, r2, [r1]
 800fb1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d1e6      	bne.n	800faf0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	3308      	adds	r3, #8
 800fb28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	e853 3f00 	ldrex	r3, [r3]
 800fb30:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f023 0301 	bic.w	r3, r3, #1
 800fb38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	3308      	adds	r3, #8
 800fb40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb42:	61fa      	str	r2, [r7, #28]
 800fb44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb46:	69b9      	ldr	r1, [r7, #24]
 800fb48:	69fa      	ldr	r2, [r7, #28]
 800fb4a:	e841 2300 	strex	r3, r2, [r1]
 800fb4e:	617b      	str	r3, [r7, #20]
   return(result);
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1e5      	bne.n	800fb22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2220      	movs	r2, #32
 800fb5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb66:	2303      	movs	r3, #3
 800fb68:	e012      	b.n	800fb90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2220      	movs	r2, #32
 800fb6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2220      	movs	r2, #32
 800fb76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2200      	movs	r2, #0
 800fb84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3758      	adds	r7, #88	@ 0x58
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	603b      	str	r3, [r7, #0]
 800fba4:	4613      	mov	r3, r2
 800fba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fba8:	e04f      	b.n	800fc4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb0:	d04b      	beq.n	800fc4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbb2:	f7f2 ff3d 	bl	8002a30 <HAL_GetTick>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	1ad3      	subs	r3, r2, r3
 800fbbc:	69ba      	ldr	r2, [r7, #24]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d302      	bcc.n	800fbc8 <UART_WaitOnFlagUntilTimeout+0x30>
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d101      	bne.n	800fbcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fbc8:	2303      	movs	r3, #3
 800fbca:	e04e      	b.n	800fc6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f003 0304 	and.w	r3, r3, #4
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d037      	beq.n	800fc4a <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	2b80      	cmp	r3, #128	@ 0x80
 800fbde:	d034      	beq.n	800fc4a <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	2b40      	cmp	r3, #64	@ 0x40
 800fbe4:	d031      	beq.n	800fc4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	69db      	ldr	r3, [r3, #28]
 800fbec:	f003 0308 	and.w	r3, r3, #8
 800fbf0:	2b08      	cmp	r3, #8
 800fbf2:	d110      	bne.n	800fc16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	2208      	movs	r2, #8
 800fbfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f000 f839 	bl	800fc74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2208      	movs	r2, #8
 800fc06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fc12:	2301      	movs	r3, #1
 800fc14:	e029      	b.n	800fc6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	69db      	ldr	r3, [r3, #28]
 800fc1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fc24:	d111      	bne.n	800fc4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f000 f81f 	bl	800fc74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2220      	movs	r2, #32
 800fc3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fc46:	2303      	movs	r3, #3
 800fc48:	e00f      	b.n	800fc6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	69da      	ldr	r2, [r3, #28]
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	4013      	ands	r3, r2
 800fc54:	68ba      	ldr	r2, [r7, #8]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	bf0c      	ite	eq
 800fc5a:	2301      	moveq	r3, #1
 800fc5c:	2300      	movne	r3, #0
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	461a      	mov	r2, r3
 800fc62:	79fb      	ldrb	r3, [r7, #7]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d0a0      	beq.n	800fbaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
	...

0800fc74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b095      	sub	sp, #84	@ 0x54
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc84:	e853 3f00 	ldrex	r3, [r3]
 800fc88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	461a      	mov	r2, r3
 800fc98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fca0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fca2:	e841 2300 	strex	r3, r2, [r1]
 800fca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1e6      	bne.n	800fc7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	3308      	adds	r3, #8
 800fcb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb6:	6a3b      	ldr	r3, [r7, #32]
 800fcb8:	e853 3f00 	ldrex	r3, [r3]
 800fcbc:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcbe:	69fa      	ldr	r2, [r7, #28]
 800fcc0:	4b1e      	ldr	r3, [pc, #120]	@ (800fd3c <UART_EndRxTransfer+0xc8>)
 800fcc2:	4013      	ands	r3, r2
 800fcc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	3308      	adds	r3, #8
 800fccc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fcd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fcd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcd6:	e841 2300 	strex	r3, r2, [r1]
 800fcda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1e5      	bne.n	800fcae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	d118      	bne.n	800fd1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	e853 3f00 	ldrex	r3, [r3]
 800fcf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	f023 0310 	bic.w	r3, r3, #16
 800fcfe:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	461a      	mov	r2, r3
 800fd06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd08:	61bb      	str	r3, [r7, #24]
 800fd0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd0c:	6979      	ldr	r1, [r7, #20]
 800fd0e:	69ba      	ldr	r2, [r7, #24]
 800fd10:	e841 2300 	strex	r3, r2, [r1]
 800fd14:	613b      	str	r3, [r7, #16]
   return(result);
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1e6      	bne.n	800fcea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2220      	movs	r2, #32
 800fd20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fd30:	bf00      	nop
 800fd32:	3754      	adds	r7, #84	@ 0x54
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr
 800fd3c:	effffffe 	.word	0xeffffffe

0800fd40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d101      	bne.n	800fd56 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd52:	2302      	movs	r3, #2
 800fd54:	e027      	b.n	800fda6 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2201      	movs	r2, #1
 800fd5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2224      	movs	r2, #36	@ 0x24
 800fd62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f022 0201 	bic.w	r2, r2, #1
 800fd7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fd84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	68fa      	ldr	r2, [r7, #12]
 800fd92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2220      	movs	r2, #32
 800fd98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3714      	adds	r7, #20
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr

0800fdb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b084      	sub	sp, #16
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d101      	bne.n	800fdca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fdc6:	2302      	movs	r3, #2
 800fdc8:	e02d      	b.n	800fe26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2201      	movs	r2, #1
 800fdce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2224      	movs	r2, #36	@ 0x24
 800fdd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f022 0201 	bic.w	r2, r2, #1
 800fdf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	683a      	ldr	r2, [r7, #0]
 800fe02:	430a      	orrs	r2, r1
 800fe04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 f850 	bl	800feac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	68fa      	ldr	r2, [r7, #12]
 800fe12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2220      	movs	r2, #32
 800fe18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3710      	adds	r7, #16
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}

0800fe2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b084      	sub	sp, #16
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	6078      	str	r0, [r7, #4]
 800fe36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	d101      	bne.n	800fe46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe42:	2302      	movs	r3, #2
 800fe44:	e02d      	b.n	800fea2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2224      	movs	r2, #36	@ 0x24
 800fe52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f022 0201 	bic.w	r2, r2, #1
 800fe6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	683a      	ldr	r2, [r7, #0]
 800fe7e:	430a      	orrs	r2, r1
 800fe80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 f812 	bl	800feac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2220      	movs	r2, #32
 800fe94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fea0:	2300      	movs	r3, #0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3710      	adds	r7, #16
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
	...

0800feac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800feac:	b480      	push	{r7}
 800feae:	b085      	sub	sp, #20
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d108      	bne.n	800fece <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2201      	movs	r2, #1
 800fec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2201      	movs	r2, #1
 800fec8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fecc:	e031      	b.n	800ff32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fece:	2310      	movs	r3, #16
 800fed0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fed2:	2310      	movs	r3, #16
 800fed4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	0e5b      	lsrs	r3, r3, #25
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	f003 0307 	and.w	r3, r3, #7
 800fee4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	0f5b      	lsrs	r3, r3, #29
 800feee:	b2db      	uxtb	r3, r3
 800fef0:	f003 0307 	and.w	r3, r3, #7
 800fef4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fef6:	7bbb      	ldrb	r3, [r7, #14]
 800fef8:	7b3a      	ldrb	r2, [r7, #12]
 800fefa:	4911      	ldr	r1, [pc, #68]	@ (800ff40 <UARTEx_SetNbDataToProcess+0x94>)
 800fefc:	5c8a      	ldrb	r2, [r1, r2]
 800fefe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ff02:	7b3a      	ldrb	r2, [r7, #12]
 800ff04:	490f      	ldr	r1, [pc, #60]	@ (800ff44 <UARTEx_SetNbDataToProcess+0x98>)
 800ff06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff14:	7bfb      	ldrb	r3, [r7, #15]
 800ff16:	7b7a      	ldrb	r2, [r7, #13]
 800ff18:	4909      	ldr	r1, [pc, #36]	@ (800ff40 <UARTEx_SetNbDataToProcess+0x94>)
 800ff1a:	5c8a      	ldrb	r2, [r1, r2]
 800ff1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff20:	7b7a      	ldrb	r2, [r7, #13]
 800ff22:	4908      	ldr	r1, [pc, #32]	@ (800ff44 <UARTEx_SetNbDataToProcess+0x98>)
 800ff24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff26:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ff32:	bf00      	nop
 800ff34:	3714      	adds	r7, #20
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	08011c9c 	.word	0x08011c9c
 800ff44:	08011ca4 	.word	0x08011ca4

0800ff48 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ff48:	b084      	sub	sp, #16
 800ff4a:	b480      	push	{r7}
 800ff4c:	b085      	sub	sp, #20
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	f107 001c 	add.w	r0, r7, #28
 800ff56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ff5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ff60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ff62:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ff64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800ff66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ff68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800ff6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ff6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800ff6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	685a      	ldr	r2, [r3, #4]
 800ff7a:	4b07      	ldr	r3, [pc, #28]	@ (800ff98 <SDMMC_Init+0x50>)
 800ff7c:	4013      	ands	r3, r2
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	431a      	orrs	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ff86:	2300      	movs	r3, #0
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3714      	adds	r7, #20
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	b004      	add	sp, #16
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	ffc02c00 	.word	0xffc02c00

0800ff9c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	370c      	adds	r7, #12
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr

0800ffb6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ffb6:	b480      	push	{r7}
 800ffb8:	b083      	sub	sp, #12
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
 800ffbe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ffca:	2300      	movs	r3, #0
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f043 0203 	orr.w	r2, r3, #3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ffec:	2300      	movs	r3, #0
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	370c      	adds	r7, #12
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr

0800fffa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800fffa:	b480      	push	{r7}
 800fffc:	b083      	sub	sp, #12
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f003 0303 	and.w	r3, r3, #3
}
 801000a:	4618      	mov	r0, r3
 801000c:	370c      	adds	r7, #12
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr
	...

08010018 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010018:	b480      	push	{r7}
 801001a:	b085      	sub	sp, #20
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010022:	2300      	movs	r3, #0
 8010024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010036:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801003c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010042:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	4313      	orrs	r3, r2
 8010048:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	68da      	ldr	r2, [r3, #12]
 801004e:	4b06      	ldr	r3, [pc, #24]	@ (8010068 <SDMMC_SendCommand+0x50>)
 8010050:	4013      	ands	r3, r2
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	431a      	orrs	r2, r3
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3714      	adds	r7, #20
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr
 8010068:	fffee0c0 	.word	0xfffee0c0

0801006c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	b2db      	uxtb	r3, r3
}
 801007a:	4618      	mov	r0, r3
 801007c:	370c      	adds	r7, #12
 801007e:	46bd      	mov	sp, r7
 8010080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010084:	4770      	bx	lr

08010086 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010086:	b480      	push	{r7}
 8010088:	b085      	sub	sp, #20
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
 801008e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	3314      	adds	r3, #20
 8010094:	461a      	mov	r2, r3
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	4413      	add	r3, r2
 801009a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3714      	adds	r7, #20
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b085      	sub	sp, #20
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80100b6:	2300      	movs	r3, #0
 80100b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	685a      	ldr	r2, [r3, #4]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100d2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80100d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80100de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100e0:	68fa      	ldr	r2, [r7, #12]
 80100e2:	4313      	orrs	r3, r2
 80100e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	431a      	orrs	r2, r3
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80100f6:	2300      	movs	r3, #0

}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3714      	adds	r7, #20
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr

08010104 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b088      	sub	sp, #32
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010112:	2310      	movs	r3, #16
 8010114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801011a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801011c:	2300      	movs	r3, #0
 801011e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010124:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010126:	f107 0308 	add.w	r3, r7, #8
 801012a:	4619      	mov	r1, r3
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f7ff ff73 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010136:	2110      	movs	r1, #16
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 fa5f 	bl	80105fc <SDMMC_GetCmdResp1>
 801013e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010140:	69fb      	ldr	r3, [r7, #28]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3720      	adds	r7, #32
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b088      	sub	sp, #32
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010158:	2311      	movs	r3, #17
 801015a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801015c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010162:	2300      	movs	r3, #0
 8010164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801016a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801016c:	f107 0308 	add.w	r3, r7, #8
 8010170:	4619      	mov	r1, r3
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f7ff ff50 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010178:	f241 3288 	movw	r2, #5000	@ 0x1388
 801017c:	2111      	movs	r1, #17
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 fa3c 	bl	80105fc <SDMMC_GetCmdResp1>
 8010184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010186:	69fb      	ldr	r3, [r7, #28]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3720      	adds	r7, #32
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b088      	sub	sp, #32
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801019e:	2312      	movs	r3, #18
 80101a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101a8:	2300      	movs	r3, #0
 80101aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101b2:	f107 0308 	add.w	r3, r7, #8
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff ff2d 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80101be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101c2:	2112      	movs	r1, #18
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 fa19 	bl	80105fc <SDMMC_GetCmdResp1>
 80101ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101cc:	69fb      	ldr	r3, [r7, #28]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3720      	adds	r7, #32
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b088      	sub	sp, #32
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80101e4:	2318      	movs	r3, #24
 80101e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101ee:	2300      	movs	r3, #0
 80101f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101f8:	f107 0308 	add.w	r3, r7, #8
 80101fc:	4619      	mov	r1, r3
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f7ff ff0a 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010208:	2118      	movs	r1, #24
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 f9f6 	bl	80105fc <SDMMC_GetCmdResp1>
 8010210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010212:	69fb      	ldr	r3, [r7, #28]
}
 8010214:	4618      	mov	r0, r3
 8010216:	3720      	adds	r7, #32
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b088      	sub	sp, #32
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801022a:	2319      	movs	r3, #25
 801022c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801022e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010234:	2300      	movs	r3, #0
 8010236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801023c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801023e:	f107 0308 	add.w	r3, r7, #8
 8010242:	4619      	mov	r1, r3
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f7ff fee7 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801024a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801024e:	2119      	movs	r1, #25
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f000 f9d3 	bl	80105fc <SDMMC_GetCmdResp1>
 8010256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010258:	69fb      	ldr	r3, [r7, #28]
}
 801025a:	4618      	mov	r0, r3
 801025c:	3720      	adds	r7, #32
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
	...

08010264 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b088      	sub	sp, #32
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801026c:	2300      	movs	r3, #0
 801026e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010270:	230c      	movs	r3, #12
 8010272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801027a:	2300      	movs	r3, #0
 801027c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801027e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010282:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801029c:	f107 0308 	add.w	r3, r7, #8
 80102a0:	4619      	mov	r1, r3
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f7ff feb8 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80102a8:	4a0b      	ldr	r2, [pc, #44]	@ (80102d8 <SDMMC_CmdStopTransfer+0x74>)
 80102aa:	210c      	movs	r1, #12
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 f9a5 	bl	80105fc <SDMMC_GetCmdResp1>
 80102b2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80102c6:	d101      	bne.n	80102cc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80102c8:	2300      	movs	r3, #0
 80102ca:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80102cc:	69fb      	ldr	r3, [r7, #28]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3720      	adds	r7, #32
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	05f5e100 	.word	0x05f5e100

080102dc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b088      	sub	sp, #32
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80102ea:	2307      	movs	r3, #7
 80102ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102f4:	2300      	movs	r3, #0
 80102f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102fe:	f107 0308 	add.w	r3, r7, #8
 8010302:	4619      	mov	r1, r3
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7ff fe87 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801030a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801030e:	2107      	movs	r1, #7
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 f973 	bl	80105fc <SDMMC_GetCmdResp1>
 8010316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010318:	69fb      	ldr	r3, [r7, #28]
}
 801031a:	4618      	mov	r0, r3
 801031c:	3720      	adds	r7, #32
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}

08010322 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010322:	b580      	push	{r7, lr}
 8010324:	b088      	sub	sp, #32
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801032a:	2300      	movs	r3, #0
 801032c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801032e:	2300      	movs	r3, #0
 8010330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010332:	2300      	movs	r3, #0
 8010334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010336:	2300      	movs	r3, #0
 8010338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801033a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801033e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010340:	f107 0308 	add.w	r3, r7, #8
 8010344:	4619      	mov	r1, r3
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f7ff fe66 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 fb97 	bl	8010a80 <SDMMC_GetCmdError>
 8010352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010354:	69fb      	ldr	r3, [r7, #28]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3720      	adds	r7, #32
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}

0801035e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801035e:	b580      	push	{r7, lr}
 8010360:	b088      	sub	sp, #32
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010366:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801036a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801036c:	2308      	movs	r3, #8
 801036e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010376:	2300      	movs	r3, #0
 8010378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801037a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801037e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010380:	f107 0308 	add.w	r3, r7, #8
 8010384:	4619      	mov	r1, r3
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7ff fe46 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 fb29 	bl	80109e4 <SDMMC_GetCmdResp7>
 8010392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010394:	69fb      	ldr	r3, [r7, #28]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3720      	adds	r7, #32
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b088      	sub	sp, #32
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
 80103a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80103ac:	2337      	movs	r3, #55	@ 0x37
 80103ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103b6:	2300      	movs	r3, #0
 80103b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103c0:	f107 0308 	add.w	r3, r7, #8
 80103c4:	4619      	mov	r1, r3
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7ff fe26 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80103cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103d0:	2137      	movs	r1, #55	@ 0x37
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f000 f912 	bl	80105fc <SDMMC_GetCmdResp1>
 80103d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103da:	69fb      	ldr	r3, [r7, #28]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3720      	adds	r7, #32
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b088      	sub	sp, #32
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80103f2:	2329      	movs	r3, #41	@ 0x29
 80103f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103fc:	2300      	movs	r3, #0
 80103fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010404:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010406:	f107 0308 	add.w	r3, r7, #8
 801040a:	4619      	mov	r1, r3
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f7ff fe03 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f000 fa2e 	bl	8010874 <SDMMC_GetCmdResp3>
 8010418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801041a:	69fb      	ldr	r3, [r7, #28]
}
 801041c:	4618      	mov	r0, r3
 801041e:	3720      	adds	r7, #32
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b088      	sub	sp, #32
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010432:	2306      	movs	r3, #6
 8010434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010436:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801043a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801043c:	2300      	movs	r3, #0
 801043e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010444:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010446:	f107 0308 	add.w	r3, r7, #8
 801044a:	4619      	mov	r1, r3
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7ff fde3 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010456:	2106      	movs	r1, #6
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f000 f8cf 	bl	80105fc <SDMMC_GetCmdResp1>
 801045e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010460:	69fb      	ldr	r3, [r7, #28]
}
 8010462:	4618      	mov	r0, r3
 8010464:	3720      	adds	r7, #32
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801046a:	b580      	push	{r7, lr}
 801046c:	b088      	sub	sp, #32
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010472:	2300      	movs	r3, #0
 8010474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010476:	2333      	movs	r3, #51	@ 0x33
 8010478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801047a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801047e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010480:	2300      	movs	r3, #0
 8010482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010488:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801048a:	f107 0308 	add.w	r3, r7, #8
 801048e:	4619      	mov	r1, r3
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f7ff fdc1 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010496:	f241 3288 	movw	r2, #5000	@ 0x1388
 801049a:	2133      	movs	r1, #51	@ 0x33
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 f8ad 	bl	80105fc <SDMMC_GetCmdResp1>
 80104a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104a4:	69fb      	ldr	r3, [r7, #28]
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3720      	adds	r7, #32
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b088      	sub	sp, #32
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80104b6:	2300      	movs	r3, #0
 80104b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80104ba:	2302      	movs	r3, #2
 80104bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80104be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80104c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104c4:	2300      	movs	r3, #0
 80104c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104ce:	f107 0308 	add.w	r3, r7, #8
 80104d2:	4619      	mov	r1, r3
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7ff fd9f 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f000 f980 	bl	80107e0 <SDMMC_GetCmdResp2>
 80104e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104e2:	69fb      	ldr	r3, [r7, #28]
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3720      	adds	r7, #32
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b088      	sub	sp, #32
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80104fa:	2309      	movs	r3, #9
 80104fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80104fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010504:	2300      	movs	r3, #0
 8010506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801050c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801050e:	f107 0308 	add.w	r3, r7, #8
 8010512:	4619      	mov	r1, r3
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f7ff fd7f 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 f960 	bl	80107e0 <SDMMC_GetCmdResp2>
 8010520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010522:	69fb      	ldr	r3, [r7, #28]
}
 8010524:	4618      	mov	r0, r3
 8010526:	3720      	adds	r7, #32
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b088      	sub	sp, #32
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010536:	2300      	movs	r3, #0
 8010538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801053a:	2303      	movs	r3, #3
 801053c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801053e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010544:	2300      	movs	r3, #0
 8010546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801054c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801054e:	f107 0308 	add.w	r3, r7, #8
 8010552:	4619      	mov	r1, r3
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f7ff fd5f 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801055a:	683a      	ldr	r2, [r7, #0]
 801055c:	2103      	movs	r1, #3
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f000 f9c8 	bl	80108f4 <SDMMC_GetCmdResp6>
 8010564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010566:	69fb      	ldr	r3, [r7, #28]
}
 8010568:	4618      	mov	r0, r3
 801056a:	3720      	adds	r7, #32
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b088      	sub	sp, #32
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801057e:	230d      	movs	r3, #13
 8010580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010588:	2300      	movs	r3, #0
 801058a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801058c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010590:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010592:	f107 0308 	add.w	r3, r7, #8
 8010596:	4619      	mov	r1, r3
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f7ff fd3d 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801059e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105a2:	210d      	movs	r1, #13
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f000 f829 	bl	80105fc <SDMMC_GetCmdResp1>
 80105aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ac:	69fb      	ldr	r3, [r7, #28]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3720      	adds	r7, #32
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b088      	sub	sp, #32
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80105be:	2300      	movs	r3, #0
 80105c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80105c2:	230d      	movs	r3, #13
 80105c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105cc:	2300      	movs	r3, #0
 80105ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105d6:	f107 0308 	add.w	r3, r7, #8
 80105da:	4619      	mov	r1, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7ff fd1b 	bl	8010018 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80105e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105e6:	210d      	movs	r1, #13
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f000 f807 	bl	80105fc <SDMMC_GetCmdResp1>
 80105ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105f0:	69fb      	ldr	r3, [r7, #28]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3720      	adds	r7, #32
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
	...

080105fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b088      	sub	sp, #32
 8010600:	af00      	add	r7, sp, #0
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	460b      	mov	r3, r1
 8010606:	607a      	str	r2, [r7, #4]
 8010608:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801060a:	4b70      	ldr	r3, [pc, #448]	@ (80107cc <SDMMC_GetCmdResp1+0x1d0>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	4a70      	ldr	r2, [pc, #448]	@ (80107d0 <SDMMC_GetCmdResp1+0x1d4>)
 8010610:	fba2 2303 	umull	r2, r3, r2, r3
 8010614:	0a5a      	lsrs	r2, r3, #9
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	fb02 f303 	mul.w	r3, r2, r3
 801061c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	1e5a      	subs	r2, r3, #1
 8010622:	61fa      	str	r2, [r7, #28]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d102      	bne.n	801062e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010628:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801062c:	e0c9      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010632:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010634:	69ba      	ldr	r2, [r7, #24]
 8010636:	4b67      	ldr	r3, [pc, #412]	@ (80107d4 <SDMMC_GetCmdResp1+0x1d8>)
 8010638:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801063a:	2b00      	cmp	r3, #0
 801063c:	d0ef      	beq.n	801061e <SDMMC_GetCmdResp1+0x22>
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1ea      	bne.n	801061e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801064c:	f003 0304 	and.w	r3, r3, #4
 8010650:	2b00      	cmp	r3, #0
 8010652:	d004      	beq.n	801065e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2204      	movs	r2, #4
 8010658:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801065a:	2304      	movs	r3, #4
 801065c:	e0b1      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010662:	f003 0301 	and.w	r3, r3, #1
 8010666:	2b00      	cmp	r3, #0
 8010668:	d004      	beq.n	8010674 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2201      	movs	r2, #1
 801066e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010670:	2301      	movs	r3, #1
 8010672:	e0a6      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	4a58      	ldr	r2, [pc, #352]	@ (80107d8 <SDMMC_GetCmdResp1+0x1dc>)
 8010678:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801067a:	68f8      	ldr	r0, [r7, #12]
 801067c:	f7ff fcf6 	bl	801006c <SDMMC_GetCommandResponse>
 8010680:	4603      	mov	r3, r0
 8010682:	461a      	mov	r2, r3
 8010684:	7afb      	ldrb	r3, [r7, #11]
 8010686:	4293      	cmp	r3, r2
 8010688:	d001      	beq.n	801068e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801068a:	2301      	movs	r3, #1
 801068c:	e099      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801068e:	2100      	movs	r1, #0
 8010690:	68f8      	ldr	r0, [r7, #12]
 8010692:	f7ff fcf8 	bl	8010086 <SDMMC_GetResponse>
 8010696:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010698:	697a      	ldr	r2, [r7, #20]
 801069a:	4b50      	ldr	r3, [pc, #320]	@ (80107dc <SDMMC_GetCmdResp1+0x1e0>)
 801069c:	4013      	ands	r3, r2
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d101      	bne.n	80106a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80106a2:	2300      	movs	r3, #0
 80106a4:	e08d      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	da02      	bge.n	80106b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80106ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80106b0:	e087      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d001      	beq.n	80106c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80106bc:	2340      	movs	r3, #64	@ 0x40
 80106be:	e080      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d001      	beq.n	80106ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80106ca:	2380      	movs	r3, #128	@ 0x80
 80106cc:	e079      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d002      	beq.n	80106de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80106d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80106dc:	e071      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d002      	beq.n	80106ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80106e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80106ec:	e069      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d002      	beq.n	80106fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80106f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80106fc:	e061      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010704:	2b00      	cmp	r3, #0
 8010706:	d002      	beq.n	801070e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010708:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801070c:	e059      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010714:	2b00      	cmp	r3, #0
 8010716:	d002      	beq.n	801071e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801071c:	e051      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010724:	2b00      	cmp	r3, #0
 8010726:	d002      	beq.n	801072e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801072c:	e049      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010734:	2b00      	cmp	r3, #0
 8010736:	d002      	beq.n	801073e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010738:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801073c:	e041      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010744:	2b00      	cmp	r3, #0
 8010746:	d002      	beq.n	801074e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010748:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801074c:	e039      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010754:	2b00      	cmp	r3, #0
 8010756:	d002      	beq.n	801075e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010758:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801075c:	e031      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010764:	2b00      	cmp	r3, #0
 8010766:	d002      	beq.n	801076e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010768:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801076c:	e029      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010774:	2b00      	cmp	r3, #0
 8010776:	d002      	beq.n	801077e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010778:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801077c:	e021      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010784:	2b00      	cmp	r3, #0
 8010786:	d002      	beq.n	801078e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010788:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801078c:	e019      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010794:	2b00      	cmp	r3, #0
 8010796:	d002      	beq.n	801079e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010798:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801079c:	e011      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d002      	beq.n	80107ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80107a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80107ac:	e009      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	f003 0308 	and.w	r3, r3, #8
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d002      	beq.n	80107be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80107b8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80107bc:	e001      	b.n	80107c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80107be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3720      	adds	r7, #32
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	2400000c 	.word	0x2400000c
 80107d0:	10624dd3 	.word	0x10624dd3
 80107d4:	00200045 	.word	0x00200045
 80107d8:	002000c5 	.word	0x002000c5
 80107dc:	fdffe008 	.word	0xfdffe008

080107e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b085      	sub	sp, #20
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80107e8:	4b1f      	ldr	r3, [pc, #124]	@ (8010868 <SDMMC_GetCmdResp2+0x88>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4a1f      	ldr	r2, [pc, #124]	@ (801086c <SDMMC_GetCmdResp2+0x8c>)
 80107ee:	fba2 2303 	umull	r2, r3, r2, r3
 80107f2:	0a5b      	lsrs	r3, r3, #9
 80107f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107f8:	fb02 f303 	mul.w	r3, r2, r3
 80107fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	1e5a      	subs	r2, r3, #1
 8010802:	60fa      	str	r2, [r7, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d102      	bne.n	801080e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010808:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801080c:	e026      	b.n	801085c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010812:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801081a:	2b00      	cmp	r3, #0
 801081c:	d0ef      	beq.n	80107fe <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1ea      	bne.n	80107fe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801082c:	f003 0304 	and.w	r3, r3, #4
 8010830:	2b00      	cmp	r3, #0
 8010832:	d004      	beq.n	801083e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2204      	movs	r2, #4
 8010838:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801083a:	2304      	movs	r3, #4
 801083c:	e00e      	b.n	801085c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010842:	f003 0301 	and.w	r3, r3, #1
 8010846:	2b00      	cmp	r3, #0
 8010848:	d004      	beq.n	8010854 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2201      	movs	r2, #1
 801084e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010850:	2301      	movs	r3, #1
 8010852:	e003      	b.n	801085c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	4a06      	ldr	r2, [pc, #24]	@ (8010870 <SDMMC_GetCmdResp2+0x90>)
 8010858:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801085a:	2300      	movs	r3, #0
}
 801085c:	4618      	mov	r0, r3
 801085e:	3714      	adds	r7, #20
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr
 8010868:	2400000c 	.word	0x2400000c
 801086c:	10624dd3 	.word	0x10624dd3
 8010870:	002000c5 	.word	0x002000c5

08010874 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801087c:	4b1a      	ldr	r3, [pc, #104]	@ (80108e8 <SDMMC_GetCmdResp3+0x74>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4a1a      	ldr	r2, [pc, #104]	@ (80108ec <SDMMC_GetCmdResp3+0x78>)
 8010882:	fba2 2303 	umull	r2, r3, r2, r3
 8010886:	0a5b      	lsrs	r3, r3, #9
 8010888:	f241 3288 	movw	r2, #5000	@ 0x1388
 801088c:	fb02 f303 	mul.w	r3, r2, r3
 8010890:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	1e5a      	subs	r2, r3, #1
 8010896:	60fa      	str	r2, [r7, #12]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d102      	bne.n	80108a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801089c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80108a0:	e01b      	b.n	80108da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d0ef      	beq.n	8010892 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d1ea      	bne.n	8010892 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108c0:	f003 0304 	and.w	r3, r3, #4
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d004      	beq.n	80108d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2204      	movs	r2, #4
 80108cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108ce:	2304      	movs	r3, #4
 80108d0:	e003      	b.n	80108da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4a06      	ldr	r2, [pc, #24]	@ (80108f0 <SDMMC_GetCmdResp3+0x7c>)
 80108d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80108d8:	2300      	movs	r3, #0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3714      	adds	r7, #20
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	2400000c 	.word	0x2400000c
 80108ec:	10624dd3 	.word	0x10624dd3
 80108f0:	002000c5 	.word	0x002000c5

080108f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b088      	sub	sp, #32
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	60f8      	str	r0, [r7, #12]
 80108fc:	460b      	mov	r3, r1
 80108fe:	607a      	str	r2, [r7, #4]
 8010900:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010902:	4b35      	ldr	r3, [pc, #212]	@ (80109d8 <SDMMC_GetCmdResp6+0xe4>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4a35      	ldr	r2, [pc, #212]	@ (80109dc <SDMMC_GetCmdResp6+0xe8>)
 8010908:	fba2 2303 	umull	r2, r3, r2, r3
 801090c:	0a5b      	lsrs	r3, r3, #9
 801090e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010912:	fb02 f303 	mul.w	r3, r2, r3
 8010916:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010918:	69fb      	ldr	r3, [r7, #28]
 801091a:	1e5a      	subs	r2, r3, #1
 801091c:	61fa      	str	r2, [r7, #28]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d102      	bne.n	8010928 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010922:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010926:	e052      	b.n	80109ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801092c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010934:	2b00      	cmp	r3, #0
 8010936:	d0ef      	beq.n	8010918 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801093e:	2b00      	cmp	r3, #0
 8010940:	d1ea      	bne.n	8010918 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010946:	f003 0304 	and.w	r3, r3, #4
 801094a:	2b00      	cmp	r3, #0
 801094c:	d004      	beq.n	8010958 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2204      	movs	r2, #4
 8010952:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010954:	2304      	movs	r3, #4
 8010956:	e03a      	b.n	80109ce <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801095c:	f003 0301 	and.w	r3, r3, #1
 8010960:	2b00      	cmp	r3, #0
 8010962:	d004      	beq.n	801096e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2201      	movs	r2, #1
 8010968:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801096a:	2301      	movs	r3, #1
 801096c:	e02f      	b.n	80109ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801096e:	68f8      	ldr	r0, [r7, #12]
 8010970:	f7ff fb7c 	bl	801006c <SDMMC_GetCommandResponse>
 8010974:	4603      	mov	r3, r0
 8010976:	461a      	mov	r2, r3
 8010978:	7afb      	ldrb	r3, [r7, #11]
 801097a:	4293      	cmp	r3, r2
 801097c:	d001      	beq.n	8010982 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801097e:	2301      	movs	r3, #1
 8010980:	e025      	b.n	80109ce <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	4a16      	ldr	r2, [pc, #88]	@ (80109e0 <SDMMC_GetCmdResp6+0xec>)
 8010986:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010988:	2100      	movs	r1, #0
 801098a:	68f8      	ldr	r0, [r7, #12]
 801098c:	f7ff fb7b 	bl	8010086 <SDMMC_GetResponse>
 8010990:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010998:	2b00      	cmp	r3, #0
 801099a:	d106      	bne.n	80109aa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	0c1b      	lsrs	r3, r3, #16
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80109a6:	2300      	movs	r3, #0
 80109a8:	e011      	b.n	80109ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d002      	beq.n	80109ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80109b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80109b8:	e009      	b.n	80109ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d002      	beq.n	80109ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80109c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109c8:	e001      	b.n	80109ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3720      	adds	r7, #32
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	2400000c 	.word	0x2400000c
 80109dc:	10624dd3 	.word	0x10624dd3
 80109e0:	002000c5 	.word	0x002000c5

080109e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109ec:	4b22      	ldr	r3, [pc, #136]	@ (8010a78 <SDMMC_GetCmdResp7+0x94>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a22      	ldr	r2, [pc, #136]	@ (8010a7c <SDMMC_GetCmdResp7+0x98>)
 80109f2:	fba2 2303 	umull	r2, r3, r2, r3
 80109f6:	0a5b      	lsrs	r3, r3, #9
 80109f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109fc:	fb02 f303 	mul.w	r3, r2, r3
 8010a00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	1e5a      	subs	r2, r3, #1
 8010a06:	60fa      	str	r2, [r7, #12]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d102      	bne.n	8010a12 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010a10:	e02c      	b.n	8010a6c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a16:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d0ef      	beq.n	8010a02 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1ea      	bne.n	8010a02 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a30:	f003 0304 	and.w	r3, r3, #4
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d004      	beq.n	8010a42 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2204      	movs	r2, #4
 8010a3c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a3e:	2304      	movs	r3, #4
 8010a40:	e014      	b.n	8010a6c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a46:	f003 0301 	and.w	r3, r3, #1
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d004      	beq.n	8010a58 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2201      	movs	r2, #1
 8010a52:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a54:	2301      	movs	r3, #1
 8010a56:	e009      	b.n	8010a6c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d002      	beq.n	8010a6a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2240      	movs	r2, #64	@ 0x40
 8010a68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a6a:	2300      	movs	r3, #0

}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3714      	adds	r7, #20
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr
 8010a78:	2400000c 	.word	0x2400000c
 8010a7c:	10624dd3 	.word	0x10624dd3

08010a80 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010a80:	b480      	push	{r7}
 8010a82:	b085      	sub	sp, #20
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a88:	4b11      	ldr	r3, [pc, #68]	@ (8010ad0 <SDMMC_GetCmdError+0x50>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4a11      	ldr	r2, [pc, #68]	@ (8010ad4 <SDMMC_GetCmdError+0x54>)
 8010a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a92:	0a5b      	lsrs	r3, r3, #9
 8010a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a98:	fb02 f303 	mul.w	r3, r2, r3
 8010a9c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	1e5a      	subs	r2, r3, #1
 8010aa2:	60fa      	str	r2, [r7, #12]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d102      	bne.n	8010aae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010aa8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010aac:	e009      	b.n	8010ac2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d0f1      	beq.n	8010a9e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4a06      	ldr	r2, [pc, #24]	@ (8010ad8 <SDMMC_GetCmdError+0x58>)
 8010abe:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010ac0:	2300      	movs	r3, #0
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3714      	adds	r7, #20
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop
 8010ad0:	2400000c 	.word	0x2400000c
 8010ad4:	10624dd3 	.word	0x10624dd3
 8010ad8:	002000c5 	.word	0x002000c5

08010adc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010ae0:	4904      	ldr	r1, [pc, #16]	@ (8010af4 <MX_FATFS_Init+0x18>)
 8010ae2:	4805      	ldr	r0, [pc, #20]	@ (8010af8 <MX_FATFS_Init+0x1c>)
 8010ae4:	f000 fa8e 	bl	8011004 <FATFS_LinkDriver>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	461a      	mov	r2, r3
 8010aec:	4b03      	ldr	r3, [pc, #12]	@ (8010afc <MX_FATFS_Init+0x20>)
 8010aee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010af0:	bf00      	nop
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	240008a0 	.word	0x240008a0
 8010af8:	08011cac 	.word	0x08011cac
 8010afc:	2400089c 	.word	0x2400089c

08010b00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010b06:	2300      	movs	r3, #0
 8010b08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010b0a:	f000 f885 	bl	8010c18 <BSP_SD_IsDetected>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d001      	beq.n	8010b18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010b14:	2302      	movs	r3, #2
 8010b16:	e012      	b.n	8010b3e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010b18:	480b      	ldr	r0, [pc, #44]	@ (8010b48 <BSP_SD_Init+0x48>)
 8010b1a:	f7fb f95d 	bl	800bdd8 <HAL_SD_Init>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010b22:	79fb      	ldrb	r3, [r7, #7]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d109      	bne.n	8010b3c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010b28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010b2c:	4806      	ldr	r0, [pc, #24]	@ (8010b48 <BSP_SD_Init+0x48>)
 8010b2e:	f7fc f813 	bl	800cb58 <HAL_SD_ConfigWideBusOperation>
 8010b32:	4603      	mov	r3, r0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	240003cc 	.word	0x240003cc

08010b4c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	68f9      	ldr	r1, [r7, #12]
 8010b62:	4806      	ldr	r0, [pc, #24]	@ (8010b7c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010b64:	f7fb fa58 	bl	800c018 <HAL_SD_ReadBlocks_DMA>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d001      	beq.n	8010b72 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3718      	adds	r7, #24
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	240003cc 	.word	0x240003cc

08010b80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b086      	sub	sp, #24
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	68ba      	ldr	r2, [r7, #8]
 8010b94:	68f9      	ldr	r1, [r7, #12]
 8010b96:	4806      	ldr	r0, [pc, #24]	@ (8010bb0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010b98:	f7fb fae6 	bl	800c168 <HAL_SD_WriteBlocks_DMA>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d001      	beq.n	8010ba6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3718      	adds	r7, #24
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	240003cc 	.word	0x240003cc

08010bb4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010bb8:	4805      	ldr	r0, [pc, #20]	@ (8010bd0 <BSP_SD_GetCardState+0x1c>)
 8010bba:	f7fc f8df 	bl	800cd7c <HAL_SD_GetCardState>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b04      	cmp	r3, #4
 8010bc2:	bf14      	ite	ne
 8010bc4:	2301      	movne	r3, #1
 8010bc6:	2300      	moveq	r3, #0
 8010bc8:	b2db      	uxtb	r3, r3
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	240003cc 	.word	0x240003cc

08010bd4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010bdc:	6879      	ldr	r1, [r7, #4]
 8010bde:	4803      	ldr	r0, [pc, #12]	@ (8010bec <BSP_SD_GetCardInfo+0x18>)
 8010be0:	f7fb ff8e 	bl	800cb00 <HAL_SD_GetCardInfo>
}
 8010be4:	bf00      	nop
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	240003cc 	.word	0x240003cc

08010bf0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010bf8:	f000 f9a0 	bl	8010f3c <BSP_SD_WriteCpltCallback>
}
 8010bfc:	bf00      	nop
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010c0c:	f000 f9a2 	bl	8010f54 <BSP_SD_ReadCpltCallback>
}
 8010c10:	bf00      	nop
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010c22:	f000 f80b 	bl	8010c3c <BSP_PlatformIsDetected>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d101      	bne.n	8010c30 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010c30:	79fb      	ldrb	r3, [r7, #7]
 8010c32:	b2db      	uxtb	r3, r3
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010c42:	2301      	movs	r3, #1
 8010c44:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010c46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010c4a:	4806      	ldr	r0, [pc, #24]	@ (8010c64 <BSP_PlatformIsDetected+0x28>)
 8010c4c:	f7f7 fd0c 	bl	8008668 <HAL_GPIO_ReadPin>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d001      	beq.n	8010c5a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010c56:	2300      	movs	r3, #0
 8010c58:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010c5a:	79fb      	ldrb	r3, [r7, #7]
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	58021400 	.word	0x58021400

08010c68 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010c70:	f7f1 fede 	bl	8002a30 <HAL_GetTick>
 8010c74:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010c76:	e006      	b.n	8010c86 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c78:	f7ff ff9c 	bl	8010bb4 <BSP_SD_GetCardState>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d101      	bne.n	8010c86 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010c82:	2300      	movs	r3, #0
 8010c84:	e009      	b.n	8010c9a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010c86:	f7f1 fed3 	bl	8002a30 <HAL_GetTick>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	1ad3      	subs	r3, r2, r3
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d8f0      	bhi.n	8010c78 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
	...

08010ca4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	4603      	mov	r3, r0
 8010cac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010cae:	4b0b      	ldr	r3, [pc, #44]	@ (8010cdc <SD_CheckStatus+0x38>)
 8010cb0:	2201      	movs	r2, #1
 8010cb2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010cb4:	f7ff ff7e 	bl	8010bb4 <BSP_SD_GetCardState>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d107      	bne.n	8010cce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010cbe:	4b07      	ldr	r3, [pc, #28]	@ (8010cdc <SD_CheckStatus+0x38>)
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	f023 0301 	bic.w	r3, r3, #1
 8010cc8:	b2da      	uxtb	r2, r3
 8010cca:	4b04      	ldr	r3, [pc, #16]	@ (8010cdc <SD_CheckStatus+0x38>)
 8010ccc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010cce:	4b03      	ldr	r3, [pc, #12]	@ (8010cdc <SD_CheckStatus+0x38>)
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	b2db      	uxtb	r3, r3
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	24000019 	.word	0x24000019

08010ce0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010cea:	f7ff ff09 	bl	8010b00 <BSP_SD_Init>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d107      	bne.n	8010d04 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010cf4:	79fb      	ldrb	r3, [r7, #7]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7ff ffd4 	bl	8010ca4 <SD_CheckStatus>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	461a      	mov	r2, r3
 8010d00:	4b04      	ldr	r3, [pc, #16]	@ (8010d14 <SD_initialize+0x34>)
 8010d02:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010d04:	4b03      	ldr	r3, [pc, #12]	@ (8010d14 <SD_initialize+0x34>)
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	b2db      	uxtb	r3, r3
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	24000019 	.word	0x24000019

08010d18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	4603      	mov	r3, r0
 8010d20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010d22:	79fb      	ldrb	r3, [r7, #7]
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7ff ffbd 	bl	8010ca4 <SD_CheckStatus>
 8010d2a:	4603      	mov	r3, r0
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60b9      	str	r1, [r7, #8]
 8010d3c:	607a      	str	r2, [r7, #4]
 8010d3e:	603b      	str	r3, [r7, #0]
 8010d40:	4603      	mov	r3, r0
 8010d42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010d44:	2301      	movs	r3, #1
 8010d46:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010d48:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010d4c:	f7ff ff8c 	bl	8010c68 <SD_CheckStatusWithTimeout>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	da01      	bge.n	8010d5a <SD_read+0x26>
  {
    return res;
 8010d56:	7dfb      	ldrb	r3, [r7, #23]
 8010d58:	e03b      	b.n	8010dd2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010d5a:	683a      	ldr	r2, [r7, #0]
 8010d5c:	6879      	ldr	r1, [r7, #4]
 8010d5e:	68b8      	ldr	r0, [r7, #8]
 8010d60:	f7ff fef4 	bl	8010b4c <BSP_SD_ReadBlocks_DMA>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d132      	bne.n	8010dd0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8010ddc <SD_read+0xa8>)
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010d70:	f7f1 fe5e 	bl	8002a30 <HAL_GetTick>
 8010d74:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010d76:	bf00      	nop
 8010d78:	4b18      	ldr	r3, [pc, #96]	@ (8010ddc <SD_read+0xa8>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d108      	bne.n	8010d92 <SD_read+0x5e>
 8010d80:	f7f1 fe56 	bl	8002a30 <HAL_GetTick>
 8010d84:	4602      	mov	r2, r0
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d9f2      	bls.n	8010d78 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010d92:	4b12      	ldr	r3, [pc, #72]	@ (8010ddc <SD_read+0xa8>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d102      	bne.n	8010da0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	75fb      	strb	r3, [r7, #23]
 8010d9e:	e017      	b.n	8010dd0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010da0:	4b0e      	ldr	r3, [pc, #56]	@ (8010ddc <SD_read+0xa8>)
 8010da2:	2200      	movs	r2, #0
 8010da4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010da6:	f7f1 fe43 	bl	8002a30 <HAL_GetTick>
 8010daa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010dac:	e007      	b.n	8010dbe <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010dae:	f7ff ff01 	bl	8010bb4 <BSP_SD_GetCardState>
 8010db2:	4603      	mov	r3, r0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d102      	bne.n	8010dbe <SD_read+0x8a>
          {
            res = RES_OK;
 8010db8:	2300      	movs	r3, #0
 8010dba:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010dbc:	e008      	b.n	8010dd0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010dbe:	f7f1 fe37 	bl	8002a30 <HAL_GetTick>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	1ad3      	subs	r3, r2, r3
 8010dc8:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d9ee      	bls.n	8010dae <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3718      	adds	r7, #24
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	240008a8 	.word	0x240008a8

08010de0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b086      	sub	sp, #24
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60b9      	str	r1, [r7, #8]
 8010de8:	607a      	str	r2, [r7, #4]
 8010dea:	603b      	str	r3, [r7, #0]
 8010dec:	4603      	mov	r3, r0
 8010dee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010df0:	2301      	movs	r3, #1
 8010df2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010df4:	4b24      	ldr	r3, [pc, #144]	@ (8010e88 <SD_write+0xa8>)
 8010df6:	2200      	movs	r2, #0
 8010df8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010dfa:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010dfe:	f7ff ff33 	bl	8010c68 <SD_CheckStatusWithTimeout>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	da01      	bge.n	8010e0c <SD_write+0x2c>
  {
    return res;
 8010e08:	7dfb      	ldrb	r3, [r7, #23]
 8010e0a:	e038      	b.n	8010e7e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010e0c:	683a      	ldr	r2, [r7, #0]
 8010e0e:	6879      	ldr	r1, [r7, #4]
 8010e10:	68b8      	ldr	r0, [r7, #8]
 8010e12:	f7ff feb5 	bl	8010b80 <BSP_SD_WriteBlocks_DMA>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d12f      	bne.n	8010e7c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010e1c:	f7f1 fe08 	bl	8002a30 <HAL_GetTick>
 8010e20:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010e22:	bf00      	nop
 8010e24:	4b18      	ldr	r3, [pc, #96]	@ (8010e88 <SD_write+0xa8>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d108      	bne.n	8010e3e <SD_write+0x5e>
 8010e2c:	f7f1 fe00 	bl	8002a30 <HAL_GetTick>
 8010e30:	4602      	mov	r2, r0
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	1ad3      	subs	r3, r2, r3
 8010e36:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d9f2      	bls.n	8010e24 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010e3e:	4b12      	ldr	r3, [pc, #72]	@ (8010e88 <SD_write+0xa8>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d102      	bne.n	8010e4c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010e46:	2301      	movs	r3, #1
 8010e48:	75fb      	strb	r3, [r7, #23]
 8010e4a:	e017      	b.n	8010e7c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8010e88 <SD_write+0xa8>)
 8010e4e:	2200      	movs	r2, #0
 8010e50:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010e52:	f7f1 fded 	bl	8002a30 <HAL_GetTick>
 8010e56:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e58:	e007      	b.n	8010e6a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e5a:	f7ff feab 	bl	8010bb4 <BSP_SD_GetCardState>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d102      	bne.n	8010e6a <SD_write+0x8a>
          {
            res = RES_OK;
 8010e64:	2300      	movs	r3, #0
 8010e66:	75fb      	strb	r3, [r7, #23]
            break;
 8010e68:	e008      	b.n	8010e7c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e6a:	f7f1 fde1 	bl	8002a30 <HAL_GetTick>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	1ad3      	subs	r3, r2, r3
 8010e74:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d9ee      	bls.n	8010e5a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3718      	adds	r7, #24
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	240008a4 	.word	0x240008a4

08010e8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b08c      	sub	sp, #48	@ 0x30
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	4603      	mov	r3, r0
 8010e94:	603a      	str	r2, [r7, #0]
 8010e96:	71fb      	strb	r3, [r7, #7]
 8010e98:	460b      	mov	r3, r1
 8010e9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010ea2:	4b25      	ldr	r3, [pc, #148]	@ (8010f38 <SD_ioctl+0xac>)
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	f003 0301 	and.w	r3, r3, #1
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d001      	beq.n	8010eb4 <SD_ioctl+0x28>
 8010eb0:	2303      	movs	r3, #3
 8010eb2:	e03c      	b.n	8010f2e <SD_ioctl+0xa2>

  switch (cmd)
 8010eb4:	79bb      	ldrb	r3, [r7, #6]
 8010eb6:	2b03      	cmp	r3, #3
 8010eb8:	d834      	bhi.n	8010f24 <SD_ioctl+0x98>
 8010eba:	a201      	add	r2, pc, #4	@ (adr r2, 8010ec0 <SD_ioctl+0x34>)
 8010ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec0:	08010ed1 	.word	0x08010ed1
 8010ec4:	08010ed9 	.word	0x08010ed9
 8010ec8:	08010ef1 	.word	0x08010ef1
 8010ecc:	08010f0b 	.word	0x08010f0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ed6:	e028      	b.n	8010f2a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ed8:	f107 0308 	add.w	r3, r7, #8
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ff fe79 	bl	8010bd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010ee2:	6a3a      	ldr	r2, [r7, #32]
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010eee:	e01c      	b.n	8010f2a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ef0:	f107 0308 	add.w	r3, r7, #8
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff fe6d 	bl	8010bd4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010efc:	b29a      	uxth	r2, r3
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010f02:	2300      	movs	r3, #0
 8010f04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010f08:	e00f      	b.n	8010f2a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010f0a:	f107 0308 	add.w	r3, r7, #8
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7ff fe60 	bl	8010bd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f16:	0a5a      	lsrs	r2, r3, #9
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010f22:	e002      	b.n	8010f2a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010f24:	2304      	movs	r3, #4
 8010f26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3730      	adds	r7, #48	@ 0x30
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	24000019 	.word	0x24000019

08010f3c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010f40:	4b03      	ldr	r3, [pc, #12]	@ (8010f50 <BSP_SD_WriteCpltCallback+0x14>)
 8010f42:	2201      	movs	r2, #1
 8010f44:	601a      	str	r2, [r3, #0]
}
 8010f46:	bf00      	nop
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr
 8010f50:	240008a4 	.word	0x240008a4

08010f54 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010f54:	b480      	push	{r7}
 8010f56:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010f58:	4b03      	ldr	r3, [pc, #12]	@ (8010f68 <BSP_SD_ReadCpltCallback+0x14>)
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	601a      	str	r2, [r3, #0]
}
 8010f5e:	bf00      	nop
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr
 8010f68:	240008a8 	.word	0x240008a8

08010f6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b087      	sub	sp, #28
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	4613      	mov	r3, r2
 8010f78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010f82:	4b1f      	ldr	r3, [pc, #124]	@ (8011000 <FATFS_LinkDriverEx+0x94>)
 8010f84:	7a5b      	ldrb	r3, [r3, #9]
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d131      	bne.n	8010ff0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8011000 <FATFS_LinkDriverEx+0x94>)
 8010f8e:	7a5b      	ldrb	r3, [r3, #9]
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	461a      	mov	r2, r3
 8010f94:	4b1a      	ldr	r3, [pc, #104]	@ (8011000 <FATFS_LinkDriverEx+0x94>)
 8010f96:	2100      	movs	r1, #0
 8010f98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010f9a:	4b19      	ldr	r3, [pc, #100]	@ (8011000 <FATFS_LinkDriverEx+0x94>)
 8010f9c:	7a5b      	ldrb	r3, [r3, #9]
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	4a17      	ldr	r2, [pc, #92]	@ (8011000 <FATFS_LinkDriverEx+0x94>)
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	4413      	add	r3, r2
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010faa:	4b15      	ldr	r3, [pc, #84]	@ (8011000 <FATFS_LinkDriverEx+0x94>)
 8010fac:	7a5b      	ldrb	r3, [r3, #9]
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	4b13      	ldr	r3, [pc, #76]	@ (8011000 <FATFS_LinkDriverEx+0x94>)
 8010fb4:	4413      	add	r3, r2
 8010fb6:	79fa      	ldrb	r2, [r7, #7]
 8010fb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010fba:	4b11      	ldr	r3, [pc, #68]	@ (8011000 <FATFS_LinkDriverEx+0x94>)
 8010fbc:	7a5b      	ldrb	r3, [r3, #9]
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	1c5a      	adds	r2, r3, #1
 8010fc2:	b2d1      	uxtb	r1, r2
 8010fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8011000 <FATFS_LinkDriverEx+0x94>)
 8010fc6:	7251      	strb	r1, [r2, #9]
 8010fc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010fca:	7dbb      	ldrb	r3, [r7, #22]
 8010fcc:	3330      	adds	r3, #48	@ 0x30
 8010fce:	b2da      	uxtb	r2, r3
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	223a      	movs	r2, #58	@ 0x3a
 8010fda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	3302      	adds	r3, #2
 8010fe0:	222f      	movs	r2, #47	@ 0x2f
 8010fe2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	3303      	adds	r3, #3
 8010fe8:	2200      	movs	r2, #0
 8010fea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010fec:	2300      	movs	r3, #0
 8010fee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	371c      	adds	r7, #28
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr
 8010ffe:	bf00      	nop
 8011000:	240008ac 	.word	0x240008ac

08011004 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801100e:	2200      	movs	r2, #0
 8011010:	6839      	ldr	r1, [r7, #0]
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7ff ffaa 	bl	8010f6c <FATFS_LinkDriverEx>
 8011018:	4603      	mov	r3, r0
}
 801101a:	4618      	mov	r0, r3
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
	...

08011024 <siprintf>:
 8011024:	b40e      	push	{r1, r2, r3}
 8011026:	b510      	push	{r4, lr}
 8011028:	b09d      	sub	sp, #116	@ 0x74
 801102a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801102c:	9002      	str	r0, [sp, #8]
 801102e:	9006      	str	r0, [sp, #24]
 8011030:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011034:	480a      	ldr	r0, [pc, #40]	@ (8011060 <siprintf+0x3c>)
 8011036:	9107      	str	r1, [sp, #28]
 8011038:	9104      	str	r1, [sp, #16]
 801103a:	490a      	ldr	r1, [pc, #40]	@ (8011064 <siprintf+0x40>)
 801103c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011040:	9105      	str	r1, [sp, #20]
 8011042:	2400      	movs	r4, #0
 8011044:	a902      	add	r1, sp, #8
 8011046:	6800      	ldr	r0, [r0, #0]
 8011048:	9301      	str	r3, [sp, #4]
 801104a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801104c:	f000 f9a2 	bl	8011394 <_svfiprintf_r>
 8011050:	9b02      	ldr	r3, [sp, #8]
 8011052:	701c      	strb	r4, [r3, #0]
 8011054:	b01d      	add	sp, #116	@ 0x74
 8011056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801105a:	b003      	add	sp, #12
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop
 8011060:	2400001c 	.word	0x2400001c
 8011064:	ffff0208 	.word	0xffff0208

08011068 <memset>:
 8011068:	4402      	add	r2, r0
 801106a:	4603      	mov	r3, r0
 801106c:	4293      	cmp	r3, r2
 801106e:	d100      	bne.n	8011072 <memset+0xa>
 8011070:	4770      	bx	lr
 8011072:	f803 1b01 	strb.w	r1, [r3], #1
 8011076:	e7f9      	b.n	801106c <memset+0x4>

08011078 <__errno>:
 8011078:	4b01      	ldr	r3, [pc, #4]	@ (8011080 <__errno+0x8>)
 801107a:	6818      	ldr	r0, [r3, #0]
 801107c:	4770      	bx	lr
 801107e:	bf00      	nop
 8011080:	2400001c 	.word	0x2400001c

08011084 <__libc_init_array>:
 8011084:	b570      	push	{r4, r5, r6, lr}
 8011086:	4d0d      	ldr	r5, [pc, #52]	@ (80110bc <__libc_init_array+0x38>)
 8011088:	4c0d      	ldr	r4, [pc, #52]	@ (80110c0 <__libc_init_array+0x3c>)
 801108a:	1b64      	subs	r4, r4, r5
 801108c:	10a4      	asrs	r4, r4, #2
 801108e:	2600      	movs	r6, #0
 8011090:	42a6      	cmp	r6, r4
 8011092:	d109      	bne.n	80110a8 <__libc_init_array+0x24>
 8011094:	4d0b      	ldr	r5, [pc, #44]	@ (80110c4 <__libc_init_array+0x40>)
 8011096:	4c0c      	ldr	r4, [pc, #48]	@ (80110c8 <__libc_init_array+0x44>)
 8011098:	f000 fc64 	bl	8011964 <_init>
 801109c:	1b64      	subs	r4, r4, r5
 801109e:	10a4      	asrs	r4, r4, #2
 80110a0:	2600      	movs	r6, #0
 80110a2:	42a6      	cmp	r6, r4
 80110a4:	d105      	bne.n	80110b2 <__libc_init_array+0x2e>
 80110a6:	bd70      	pop	{r4, r5, r6, pc}
 80110a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80110ac:	4798      	blx	r3
 80110ae:	3601      	adds	r6, #1
 80110b0:	e7ee      	b.n	8011090 <__libc_init_array+0xc>
 80110b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80110b6:	4798      	blx	r3
 80110b8:	3601      	adds	r6, #1
 80110ba:	e7f2      	b.n	80110a2 <__libc_init_array+0x1e>
 80110bc:	08011cfc 	.word	0x08011cfc
 80110c0:	08011cfc 	.word	0x08011cfc
 80110c4:	08011cfc 	.word	0x08011cfc
 80110c8:	08011d00 	.word	0x08011d00

080110cc <__retarget_lock_acquire_recursive>:
 80110cc:	4770      	bx	lr

080110ce <__retarget_lock_release_recursive>:
 80110ce:	4770      	bx	lr

080110d0 <memcpy>:
 80110d0:	440a      	add	r2, r1
 80110d2:	4291      	cmp	r1, r2
 80110d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80110d8:	d100      	bne.n	80110dc <memcpy+0xc>
 80110da:	4770      	bx	lr
 80110dc:	b510      	push	{r4, lr}
 80110de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110e6:	4291      	cmp	r1, r2
 80110e8:	d1f9      	bne.n	80110de <memcpy+0xe>
 80110ea:	bd10      	pop	{r4, pc}

080110ec <_free_r>:
 80110ec:	b538      	push	{r3, r4, r5, lr}
 80110ee:	4605      	mov	r5, r0
 80110f0:	2900      	cmp	r1, #0
 80110f2:	d041      	beq.n	8011178 <_free_r+0x8c>
 80110f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110f8:	1f0c      	subs	r4, r1, #4
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	bfb8      	it	lt
 80110fe:	18e4      	addlt	r4, r4, r3
 8011100:	f000 f8e0 	bl	80112c4 <__malloc_lock>
 8011104:	4a1d      	ldr	r2, [pc, #116]	@ (801117c <_free_r+0x90>)
 8011106:	6813      	ldr	r3, [r2, #0]
 8011108:	b933      	cbnz	r3, 8011118 <_free_r+0x2c>
 801110a:	6063      	str	r3, [r4, #4]
 801110c:	6014      	str	r4, [r2, #0]
 801110e:	4628      	mov	r0, r5
 8011110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011114:	f000 b8dc 	b.w	80112d0 <__malloc_unlock>
 8011118:	42a3      	cmp	r3, r4
 801111a:	d908      	bls.n	801112e <_free_r+0x42>
 801111c:	6820      	ldr	r0, [r4, #0]
 801111e:	1821      	adds	r1, r4, r0
 8011120:	428b      	cmp	r3, r1
 8011122:	bf01      	itttt	eq
 8011124:	6819      	ldreq	r1, [r3, #0]
 8011126:	685b      	ldreq	r3, [r3, #4]
 8011128:	1809      	addeq	r1, r1, r0
 801112a:	6021      	streq	r1, [r4, #0]
 801112c:	e7ed      	b.n	801110a <_free_r+0x1e>
 801112e:	461a      	mov	r2, r3
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	b10b      	cbz	r3, 8011138 <_free_r+0x4c>
 8011134:	42a3      	cmp	r3, r4
 8011136:	d9fa      	bls.n	801112e <_free_r+0x42>
 8011138:	6811      	ldr	r1, [r2, #0]
 801113a:	1850      	adds	r0, r2, r1
 801113c:	42a0      	cmp	r0, r4
 801113e:	d10b      	bne.n	8011158 <_free_r+0x6c>
 8011140:	6820      	ldr	r0, [r4, #0]
 8011142:	4401      	add	r1, r0
 8011144:	1850      	adds	r0, r2, r1
 8011146:	4283      	cmp	r3, r0
 8011148:	6011      	str	r1, [r2, #0]
 801114a:	d1e0      	bne.n	801110e <_free_r+0x22>
 801114c:	6818      	ldr	r0, [r3, #0]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	6053      	str	r3, [r2, #4]
 8011152:	4408      	add	r0, r1
 8011154:	6010      	str	r0, [r2, #0]
 8011156:	e7da      	b.n	801110e <_free_r+0x22>
 8011158:	d902      	bls.n	8011160 <_free_r+0x74>
 801115a:	230c      	movs	r3, #12
 801115c:	602b      	str	r3, [r5, #0]
 801115e:	e7d6      	b.n	801110e <_free_r+0x22>
 8011160:	6820      	ldr	r0, [r4, #0]
 8011162:	1821      	adds	r1, r4, r0
 8011164:	428b      	cmp	r3, r1
 8011166:	bf04      	itt	eq
 8011168:	6819      	ldreq	r1, [r3, #0]
 801116a:	685b      	ldreq	r3, [r3, #4]
 801116c:	6063      	str	r3, [r4, #4]
 801116e:	bf04      	itt	eq
 8011170:	1809      	addeq	r1, r1, r0
 8011172:	6021      	streq	r1, [r4, #0]
 8011174:	6054      	str	r4, [r2, #4]
 8011176:	e7ca      	b.n	801110e <_free_r+0x22>
 8011178:	bd38      	pop	{r3, r4, r5, pc}
 801117a:	bf00      	nop
 801117c:	240009fc 	.word	0x240009fc

08011180 <sbrk_aligned>:
 8011180:	b570      	push	{r4, r5, r6, lr}
 8011182:	4e0f      	ldr	r6, [pc, #60]	@ (80111c0 <sbrk_aligned+0x40>)
 8011184:	460c      	mov	r4, r1
 8011186:	6831      	ldr	r1, [r6, #0]
 8011188:	4605      	mov	r5, r0
 801118a:	b911      	cbnz	r1, 8011192 <sbrk_aligned+0x12>
 801118c:	f000 fba4 	bl	80118d8 <_sbrk_r>
 8011190:	6030      	str	r0, [r6, #0]
 8011192:	4621      	mov	r1, r4
 8011194:	4628      	mov	r0, r5
 8011196:	f000 fb9f 	bl	80118d8 <_sbrk_r>
 801119a:	1c43      	adds	r3, r0, #1
 801119c:	d103      	bne.n	80111a6 <sbrk_aligned+0x26>
 801119e:	f04f 34ff 	mov.w	r4, #4294967295
 80111a2:	4620      	mov	r0, r4
 80111a4:	bd70      	pop	{r4, r5, r6, pc}
 80111a6:	1cc4      	adds	r4, r0, #3
 80111a8:	f024 0403 	bic.w	r4, r4, #3
 80111ac:	42a0      	cmp	r0, r4
 80111ae:	d0f8      	beq.n	80111a2 <sbrk_aligned+0x22>
 80111b0:	1a21      	subs	r1, r4, r0
 80111b2:	4628      	mov	r0, r5
 80111b4:	f000 fb90 	bl	80118d8 <_sbrk_r>
 80111b8:	3001      	adds	r0, #1
 80111ba:	d1f2      	bne.n	80111a2 <sbrk_aligned+0x22>
 80111bc:	e7ef      	b.n	801119e <sbrk_aligned+0x1e>
 80111be:	bf00      	nop
 80111c0:	240009f8 	.word	0x240009f8

080111c4 <_malloc_r>:
 80111c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111c8:	1ccd      	adds	r5, r1, #3
 80111ca:	f025 0503 	bic.w	r5, r5, #3
 80111ce:	3508      	adds	r5, #8
 80111d0:	2d0c      	cmp	r5, #12
 80111d2:	bf38      	it	cc
 80111d4:	250c      	movcc	r5, #12
 80111d6:	2d00      	cmp	r5, #0
 80111d8:	4606      	mov	r6, r0
 80111da:	db01      	blt.n	80111e0 <_malloc_r+0x1c>
 80111dc:	42a9      	cmp	r1, r5
 80111de:	d904      	bls.n	80111ea <_malloc_r+0x26>
 80111e0:	230c      	movs	r3, #12
 80111e2:	6033      	str	r3, [r6, #0]
 80111e4:	2000      	movs	r0, #0
 80111e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80112c0 <_malloc_r+0xfc>
 80111ee:	f000 f869 	bl	80112c4 <__malloc_lock>
 80111f2:	f8d8 3000 	ldr.w	r3, [r8]
 80111f6:	461c      	mov	r4, r3
 80111f8:	bb44      	cbnz	r4, 801124c <_malloc_r+0x88>
 80111fa:	4629      	mov	r1, r5
 80111fc:	4630      	mov	r0, r6
 80111fe:	f7ff ffbf 	bl	8011180 <sbrk_aligned>
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	4604      	mov	r4, r0
 8011206:	d158      	bne.n	80112ba <_malloc_r+0xf6>
 8011208:	f8d8 4000 	ldr.w	r4, [r8]
 801120c:	4627      	mov	r7, r4
 801120e:	2f00      	cmp	r7, #0
 8011210:	d143      	bne.n	801129a <_malloc_r+0xd6>
 8011212:	2c00      	cmp	r4, #0
 8011214:	d04b      	beq.n	80112ae <_malloc_r+0xea>
 8011216:	6823      	ldr	r3, [r4, #0]
 8011218:	4639      	mov	r1, r7
 801121a:	4630      	mov	r0, r6
 801121c:	eb04 0903 	add.w	r9, r4, r3
 8011220:	f000 fb5a 	bl	80118d8 <_sbrk_r>
 8011224:	4581      	cmp	r9, r0
 8011226:	d142      	bne.n	80112ae <_malloc_r+0xea>
 8011228:	6821      	ldr	r1, [r4, #0]
 801122a:	1a6d      	subs	r5, r5, r1
 801122c:	4629      	mov	r1, r5
 801122e:	4630      	mov	r0, r6
 8011230:	f7ff ffa6 	bl	8011180 <sbrk_aligned>
 8011234:	3001      	adds	r0, #1
 8011236:	d03a      	beq.n	80112ae <_malloc_r+0xea>
 8011238:	6823      	ldr	r3, [r4, #0]
 801123a:	442b      	add	r3, r5
 801123c:	6023      	str	r3, [r4, #0]
 801123e:	f8d8 3000 	ldr.w	r3, [r8]
 8011242:	685a      	ldr	r2, [r3, #4]
 8011244:	bb62      	cbnz	r2, 80112a0 <_malloc_r+0xdc>
 8011246:	f8c8 7000 	str.w	r7, [r8]
 801124a:	e00f      	b.n	801126c <_malloc_r+0xa8>
 801124c:	6822      	ldr	r2, [r4, #0]
 801124e:	1b52      	subs	r2, r2, r5
 8011250:	d420      	bmi.n	8011294 <_malloc_r+0xd0>
 8011252:	2a0b      	cmp	r2, #11
 8011254:	d917      	bls.n	8011286 <_malloc_r+0xc2>
 8011256:	1961      	adds	r1, r4, r5
 8011258:	42a3      	cmp	r3, r4
 801125a:	6025      	str	r5, [r4, #0]
 801125c:	bf18      	it	ne
 801125e:	6059      	strne	r1, [r3, #4]
 8011260:	6863      	ldr	r3, [r4, #4]
 8011262:	bf08      	it	eq
 8011264:	f8c8 1000 	streq.w	r1, [r8]
 8011268:	5162      	str	r2, [r4, r5]
 801126a:	604b      	str	r3, [r1, #4]
 801126c:	4630      	mov	r0, r6
 801126e:	f000 f82f 	bl	80112d0 <__malloc_unlock>
 8011272:	f104 000b 	add.w	r0, r4, #11
 8011276:	1d23      	adds	r3, r4, #4
 8011278:	f020 0007 	bic.w	r0, r0, #7
 801127c:	1ac2      	subs	r2, r0, r3
 801127e:	bf1c      	itt	ne
 8011280:	1a1b      	subne	r3, r3, r0
 8011282:	50a3      	strne	r3, [r4, r2]
 8011284:	e7af      	b.n	80111e6 <_malloc_r+0x22>
 8011286:	6862      	ldr	r2, [r4, #4]
 8011288:	42a3      	cmp	r3, r4
 801128a:	bf0c      	ite	eq
 801128c:	f8c8 2000 	streq.w	r2, [r8]
 8011290:	605a      	strne	r2, [r3, #4]
 8011292:	e7eb      	b.n	801126c <_malloc_r+0xa8>
 8011294:	4623      	mov	r3, r4
 8011296:	6864      	ldr	r4, [r4, #4]
 8011298:	e7ae      	b.n	80111f8 <_malloc_r+0x34>
 801129a:	463c      	mov	r4, r7
 801129c:	687f      	ldr	r7, [r7, #4]
 801129e:	e7b6      	b.n	801120e <_malloc_r+0x4a>
 80112a0:	461a      	mov	r2, r3
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	42a3      	cmp	r3, r4
 80112a6:	d1fb      	bne.n	80112a0 <_malloc_r+0xdc>
 80112a8:	2300      	movs	r3, #0
 80112aa:	6053      	str	r3, [r2, #4]
 80112ac:	e7de      	b.n	801126c <_malloc_r+0xa8>
 80112ae:	230c      	movs	r3, #12
 80112b0:	6033      	str	r3, [r6, #0]
 80112b2:	4630      	mov	r0, r6
 80112b4:	f000 f80c 	bl	80112d0 <__malloc_unlock>
 80112b8:	e794      	b.n	80111e4 <_malloc_r+0x20>
 80112ba:	6005      	str	r5, [r0, #0]
 80112bc:	e7d6      	b.n	801126c <_malloc_r+0xa8>
 80112be:	bf00      	nop
 80112c0:	240009fc 	.word	0x240009fc

080112c4 <__malloc_lock>:
 80112c4:	4801      	ldr	r0, [pc, #4]	@ (80112cc <__malloc_lock+0x8>)
 80112c6:	f7ff bf01 	b.w	80110cc <__retarget_lock_acquire_recursive>
 80112ca:	bf00      	nop
 80112cc:	240009f4 	.word	0x240009f4

080112d0 <__malloc_unlock>:
 80112d0:	4801      	ldr	r0, [pc, #4]	@ (80112d8 <__malloc_unlock+0x8>)
 80112d2:	f7ff befc 	b.w	80110ce <__retarget_lock_release_recursive>
 80112d6:	bf00      	nop
 80112d8:	240009f4 	.word	0x240009f4

080112dc <__ssputs_r>:
 80112dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112e0:	688e      	ldr	r6, [r1, #8]
 80112e2:	461f      	mov	r7, r3
 80112e4:	42be      	cmp	r6, r7
 80112e6:	680b      	ldr	r3, [r1, #0]
 80112e8:	4682      	mov	sl, r0
 80112ea:	460c      	mov	r4, r1
 80112ec:	4690      	mov	r8, r2
 80112ee:	d82d      	bhi.n	801134c <__ssputs_r+0x70>
 80112f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80112f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80112f8:	d026      	beq.n	8011348 <__ssputs_r+0x6c>
 80112fa:	6965      	ldr	r5, [r4, #20]
 80112fc:	6909      	ldr	r1, [r1, #16]
 80112fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011302:	eba3 0901 	sub.w	r9, r3, r1
 8011306:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801130a:	1c7b      	adds	r3, r7, #1
 801130c:	444b      	add	r3, r9
 801130e:	106d      	asrs	r5, r5, #1
 8011310:	429d      	cmp	r5, r3
 8011312:	bf38      	it	cc
 8011314:	461d      	movcc	r5, r3
 8011316:	0553      	lsls	r3, r2, #21
 8011318:	d527      	bpl.n	801136a <__ssputs_r+0x8e>
 801131a:	4629      	mov	r1, r5
 801131c:	f7ff ff52 	bl	80111c4 <_malloc_r>
 8011320:	4606      	mov	r6, r0
 8011322:	b360      	cbz	r0, 801137e <__ssputs_r+0xa2>
 8011324:	6921      	ldr	r1, [r4, #16]
 8011326:	464a      	mov	r2, r9
 8011328:	f7ff fed2 	bl	80110d0 <memcpy>
 801132c:	89a3      	ldrh	r3, [r4, #12]
 801132e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011336:	81a3      	strh	r3, [r4, #12]
 8011338:	6126      	str	r6, [r4, #16]
 801133a:	6165      	str	r5, [r4, #20]
 801133c:	444e      	add	r6, r9
 801133e:	eba5 0509 	sub.w	r5, r5, r9
 8011342:	6026      	str	r6, [r4, #0]
 8011344:	60a5      	str	r5, [r4, #8]
 8011346:	463e      	mov	r6, r7
 8011348:	42be      	cmp	r6, r7
 801134a:	d900      	bls.n	801134e <__ssputs_r+0x72>
 801134c:	463e      	mov	r6, r7
 801134e:	6820      	ldr	r0, [r4, #0]
 8011350:	4632      	mov	r2, r6
 8011352:	4641      	mov	r1, r8
 8011354:	f000 faa6 	bl	80118a4 <memmove>
 8011358:	68a3      	ldr	r3, [r4, #8]
 801135a:	1b9b      	subs	r3, r3, r6
 801135c:	60a3      	str	r3, [r4, #8]
 801135e:	6823      	ldr	r3, [r4, #0]
 8011360:	4433      	add	r3, r6
 8011362:	6023      	str	r3, [r4, #0]
 8011364:	2000      	movs	r0, #0
 8011366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801136a:	462a      	mov	r2, r5
 801136c:	f000 fac4 	bl	80118f8 <_realloc_r>
 8011370:	4606      	mov	r6, r0
 8011372:	2800      	cmp	r0, #0
 8011374:	d1e0      	bne.n	8011338 <__ssputs_r+0x5c>
 8011376:	6921      	ldr	r1, [r4, #16]
 8011378:	4650      	mov	r0, sl
 801137a:	f7ff feb7 	bl	80110ec <_free_r>
 801137e:	230c      	movs	r3, #12
 8011380:	f8ca 3000 	str.w	r3, [sl]
 8011384:	89a3      	ldrh	r3, [r4, #12]
 8011386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801138a:	81a3      	strh	r3, [r4, #12]
 801138c:	f04f 30ff 	mov.w	r0, #4294967295
 8011390:	e7e9      	b.n	8011366 <__ssputs_r+0x8a>
	...

08011394 <_svfiprintf_r>:
 8011394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011398:	4698      	mov	r8, r3
 801139a:	898b      	ldrh	r3, [r1, #12]
 801139c:	061b      	lsls	r3, r3, #24
 801139e:	b09d      	sub	sp, #116	@ 0x74
 80113a0:	4607      	mov	r7, r0
 80113a2:	460d      	mov	r5, r1
 80113a4:	4614      	mov	r4, r2
 80113a6:	d510      	bpl.n	80113ca <_svfiprintf_r+0x36>
 80113a8:	690b      	ldr	r3, [r1, #16]
 80113aa:	b973      	cbnz	r3, 80113ca <_svfiprintf_r+0x36>
 80113ac:	2140      	movs	r1, #64	@ 0x40
 80113ae:	f7ff ff09 	bl	80111c4 <_malloc_r>
 80113b2:	6028      	str	r0, [r5, #0]
 80113b4:	6128      	str	r0, [r5, #16]
 80113b6:	b930      	cbnz	r0, 80113c6 <_svfiprintf_r+0x32>
 80113b8:	230c      	movs	r3, #12
 80113ba:	603b      	str	r3, [r7, #0]
 80113bc:	f04f 30ff 	mov.w	r0, #4294967295
 80113c0:	b01d      	add	sp, #116	@ 0x74
 80113c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c6:	2340      	movs	r3, #64	@ 0x40
 80113c8:	616b      	str	r3, [r5, #20]
 80113ca:	2300      	movs	r3, #0
 80113cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80113ce:	2320      	movs	r3, #32
 80113d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80113d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80113d8:	2330      	movs	r3, #48	@ 0x30
 80113da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011578 <_svfiprintf_r+0x1e4>
 80113de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80113e2:	f04f 0901 	mov.w	r9, #1
 80113e6:	4623      	mov	r3, r4
 80113e8:	469a      	mov	sl, r3
 80113ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113ee:	b10a      	cbz	r2, 80113f4 <_svfiprintf_r+0x60>
 80113f0:	2a25      	cmp	r2, #37	@ 0x25
 80113f2:	d1f9      	bne.n	80113e8 <_svfiprintf_r+0x54>
 80113f4:	ebba 0b04 	subs.w	fp, sl, r4
 80113f8:	d00b      	beq.n	8011412 <_svfiprintf_r+0x7e>
 80113fa:	465b      	mov	r3, fp
 80113fc:	4622      	mov	r2, r4
 80113fe:	4629      	mov	r1, r5
 8011400:	4638      	mov	r0, r7
 8011402:	f7ff ff6b 	bl	80112dc <__ssputs_r>
 8011406:	3001      	adds	r0, #1
 8011408:	f000 80a7 	beq.w	801155a <_svfiprintf_r+0x1c6>
 801140c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801140e:	445a      	add	r2, fp
 8011410:	9209      	str	r2, [sp, #36]	@ 0x24
 8011412:	f89a 3000 	ldrb.w	r3, [sl]
 8011416:	2b00      	cmp	r3, #0
 8011418:	f000 809f 	beq.w	801155a <_svfiprintf_r+0x1c6>
 801141c:	2300      	movs	r3, #0
 801141e:	f04f 32ff 	mov.w	r2, #4294967295
 8011422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011426:	f10a 0a01 	add.w	sl, sl, #1
 801142a:	9304      	str	r3, [sp, #16]
 801142c:	9307      	str	r3, [sp, #28]
 801142e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011432:	931a      	str	r3, [sp, #104]	@ 0x68
 8011434:	4654      	mov	r4, sl
 8011436:	2205      	movs	r2, #5
 8011438:	f814 1b01 	ldrb.w	r1, [r4], #1
 801143c:	484e      	ldr	r0, [pc, #312]	@ (8011578 <_svfiprintf_r+0x1e4>)
 801143e:	f7ee ff6f 	bl	8000320 <memchr>
 8011442:	9a04      	ldr	r2, [sp, #16]
 8011444:	b9d8      	cbnz	r0, 801147e <_svfiprintf_r+0xea>
 8011446:	06d0      	lsls	r0, r2, #27
 8011448:	bf44      	itt	mi
 801144a:	2320      	movmi	r3, #32
 801144c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011450:	0711      	lsls	r1, r2, #28
 8011452:	bf44      	itt	mi
 8011454:	232b      	movmi	r3, #43	@ 0x2b
 8011456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801145a:	f89a 3000 	ldrb.w	r3, [sl]
 801145e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011460:	d015      	beq.n	801148e <_svfiprintf_r+0xfa>
 8011462:	9a07      	ldr	r2, [sp, #28]
 8011464:	4654      	mov	r4, sl
 8011466:	2000      	movs	r0, #0
 8011468:	f04f 0c0a 	mov.w	ip, #10
 801146c:	4621      	mov	r1, r4
 801146e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011472:	3b30      	subs	r3, #48	@ 0x30
 8011474:	2b09      	cmp	r3, #9
 8011476:	d94b      	bls.n	8011510 <_svfiprintf_r+0x17c>
 8011478:	b1b0      	cbz	r0, 80114a8 <_svfiprintf_r+0x114>
 801147a:	9207      	str	r2, [sp, #28]
 801147c:	e014      	b.n	80114a8 <_svfiprintf_r+0x114>
 801147e:	eba0 0308 	sub.w	r3, r0, r8
 8011482:	fa09 f303 	lsl.w	r3, r9, r3
 8011486:	4313      	orrs	r3, r2
 8011488:	9304      	str	r3, [sp, #16]
 801148a:	46a2      	mov	sl, r4
 801148c:	e7d2      	b.n	8011434 <_svfiprintf_r+0xa0>
 801148e:	9b03      	ldr	r3, [sp, #12]
 8011490:	1d19      	adds	r1, r3, #4
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	9103      	str	r1, [sp, #12]
 8011496:	2b00      	cmp	r3, #0
 8011498:	bfbb      	ittet	lt
 801149a:	425b      	neglt	r3, r3
 801149c:	f042 0202 	orrlt.w	r2, r2, #2
 80114a0:	9307      	strge	r3, [sp, #28]
 80114a2:	9307      	strlt	r3, [sp, #28]
 80114a4:	bfb8      	it	lt
 80114a6:	9204      	strlt	r2, [sp, #16]
 80114a8:	7823      	ldrb	r3, [r4, #0]
 80114aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80114ac:	d10a      	bne.n	80114c4 <_svfiprintf_r+0x130>
 80114ae:	7863      	ldrb	r3, [r4, #1]
 80114b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80114b2:	d132      	bne.n	801151a <_svfiprintf_r+0x186>
 80114b4:	9b03      	ldr	r3, [sp, #12]
 80114b6:	1d1a      	adds	r2, r3, #4
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	9203      	str	r2, [sp, #12]
 80114bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80114c0:	3402      	adds	r4, #2
 80114c2:	9305      	str	r3, [sp, #20]
 80114c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011588 <_svfiprintf_r+0x1f4>
 80114c8:	7821      	ldrb	r1, [r4, #0]
 80114ca:	2203      	movs	r2, #3
 80114cc:	4650      	mov	r0, sl
 80114ce:	f7ee ff27 	bl	8000320 <memchr>
 80114d2:	b138      	cbz	r0, 80114e4 <_svfiprintf_r+0x150>
 80114d4:	9b04      	ldr	r3, [sp, #16]
 80114d6:	eba0 000a 	sub.w	r0, r0, sl
 80114da:	2240      	movs	r2, #64	@ 0x40
 80114dc:	4082      	lsls	r2, r0
 80114de:	4313      	orrs	r3, r2
 80114e0:	3401      	adds	r4, #1
 80114e2:	9304      	str	r3, [sp, #16]
 80114e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e8:	4824      	ldr	r0, [pc, #144]	@ (801157c <_svfiprintf_r+0x1e8>)
 80114ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80114ee:	2206      	movs	r2, #6
 80114f0:	f7ee ff16 	bl	8000320 <memchr>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d036      	beq.n	8011566 <_svfiprintf_r+0x1d2>
 80114f8:	4b21      	ldr	r3, [pc, #132]	@ (8011580 <_svfiprintf_r+0x1ec>)
 80114fa:	bb1b      	cbnz	r3, 8011544 <_svfiprintf_r+0x1b0>
 80114fc:	9b03      	ldr	r3, [sp, #12]
 80114fe:	3307      	adds	r3, #7
 8011500:	f023 0307 	bic.w	r3, r3, #7
 8011504:	3308      	adds	r3, #8
 8011506:	9303      	str	r3, [sp, #12]
 8011508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801150a:	4433      	add	r3, r6
 801150c:	9309      	str	r3, [sp, #36]	@ 0x24
 801150e:	e76a      	b.n	80113e6 <_svfiprintf_r+0x52>
 8011510:	fb0c 3202 	mla	r2, ip, r2, r3
 8011514:	460c      	mov	r4, r1
 8011516:	2001      	movs	r0, #1
 8011518:	e7a8      	b.n	801146c <_svfiprintf_r+0xd8>
 801151a:	2300      	movs	r3, #0
 801151c:	3401      	adds	r4, #1
 801151e:	9305      	str	r3, [sp, #20]
 8011520:	4619      	mov	r1, r3
 8011522:	f04f 0c0a 	mov.w	ip, #10
 8011526:	4620      	mov	r0, r4
 8011528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801152c:	3a30      	subs	r2, #48	@ 0x30
 801152e:	2a09      	cmp	r2, #9
 8011530:	d903      	bls.n	801153a <_svfiprintf_r+0x1a6>
 8011532:	2b00      	cmp	r3, #0
 8011534:	d0c6      	beq.n	80114c4 <_svfiprintf_r+0x130>
 8011536:	9105      	str	r1, [sp, #20]
 8011538:	e7c4      	b.n	80114c4 <_svfiprintf_r+0x130>
 801153a:	fb0c 2101 	mla	r1, ip, r1, r2
 801153e:	4604      	mov	r4, r0
 8011540:	2301      	movs	r3, #1
 8011542:	e7f0      	b.n	8011526 <_svfiprintf_r+0x192>
 8011544:	ab03      	add	r3, sp, #12
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	462a      	mov	r2, r5
 801154a:	4b0e      	ldr	r3, [pc, #56]	@ (8011584 <_svfiprintf_r+0x1f0>)
 801154c:	a904      	add	r1, sp, #16
 801154e:	4638      	mov	r0, r7
 8011550:	f3af 8000 	nop.w
 8011554:	1c42      	adds	r2, r0, #1
 8011556:	4606      	mov	r6, r0
 8011558:	d1d6      	bne.n	8011508 <_svfiprintf_r+0x174>
 801155a:	89ab      	ldrh	r3, [r5, #12]
 801155c:	065b      	lsls	r3, r3, #25
 801155e:	f53f af2d 	bmi.w	80113bc <_svfiprintf_r+0x28>
 8011562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011564:	e72c      	b.n	80113c0 <_svfiprintf_r+0x2c>
 8011566:	ab03      	add	r3, sp, #12
 8011568:	9300      	str	r3, [sp, #0]
 801156a:	462a      	mov	r2, r5
 801156c:	4b05      	ldr	r3, [pc, #20]	@ (8011584 <_svfiprintf_r+0x1f0>)
 801156e:	a904      	add	r1, sp, #16
 8011570:	4638      	mov	r0, r7
 8011572:	f000 f879 	bl	8011668 <_printf_i>
 8011576:	e7ed      	b.n	8011554 <_svfiprintf_r+0x1c0>
 8011578:	08011cc0 	.word	0x08011cc0
 801157c:	08011cca 	.word	0x08011cca
 8011580:	00000000 	.word	0x00000000
 8011584:	080112dd 	.word	0x080112dd
 8011588:	08011cc6 	.word	0x08011cc6

0801158c <_printf_common>:
 801158c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011590:	4616      	mov	r6, r2
 8011592:	4698      	mov	r8, r3
 8011594:	688a      	ldr	r2, [r1, #8]
 8011596:	690b      	ldr	r3, [r1, #16]
 8011598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801159c:	4293      	cmp	r3, r2
 801159e:	bfb8      	it	lt
 80115a0:	4613      	movlt	r3, r2
 80115a2:	6033      	str	r3, [r6, #0]
 80115a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80115a8:	4607      	mov	r7, r0
 80115aa:	460c      	mov	r4, r1
 80115ac:	b10a      	cbz	r2, 80115b2 <_printf_common+0x26>
 80115ae:	3301      	adds	r3, #1
 80115b0:	6033      	str	r3, [r6, #0]
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	0699      	lsls	r1, r3, #26
 80115b6:	bf42      	ittt	mi
 80115b8:	6833      	ldrmi	r3, [r6, #0]
 80115ba:	3302      	addmi	r3, #2
 80115bc:	6033      	strmi	r3, [r6, #0]
 80115be:	6825      	ldr	r5, [r4, #0]
 80115c0:	f015 0506 	ands.w	r5, r5, #6
 80115c4:	d106      	bne.n	80115d4 <_printf_common+0x48>
 80115c6:	f104 0a19 	add.w	sl, r4, #25
 80115ca:	68e3      	ldr	r3, [r4, #12]
 80115cc:	6832      	ldr	r2, [r6, #0]
 80115ce:	1a9b      	subs	r3, r3, r2
 80115d0:	42ab      	cmp	r3, r5
 80115d2:	dc26      	bgt.n	8011622 <_printf_common+0x96>
 80115d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80115d8:	6822      	ldr	r2, [r4, #0]
 80115da:	3b00      	subs	r3, #0
 80115dc:	bf18      	it	ne
 80115de:	2301      	movne	r3, #1
 80115e0:	0692      	lsls	r2, r2, #26
 80115e2:	d42b      	bmi.n	801163c <_printf_common+0xb0>
 80115e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80115e8:	4641      	mov	r1, r8
 80115ea:	4638      	mov	r0, r7
 80115ec:	47c8      	blx	r9
 80115ee:	3001      	adds	r0, #1
 80115f0:	d01e      	beq.n	8011630 <_printf_common+0xa4>
 80115f2:	6823      	ldr	r3, [r4, #0]
 80115f4:	6922      	ldr	r2, [r4, #16]
 80115f6:	f003 0306 	and.w	r3, r3, #6
 80115fa:	2b04      	cmp	r3, #4
 80115fc:	bf02      	ittt	eq
 80115fe:	68e5      	ldreq	r5, [r4, #12]
 8011600:	6833      	ldreq	r3, [r6, #0]
 8011602:	1aed      	subeq	r5, r5, r3
 8011604:	68a3      	ldr	r3, [r4, #8]
 8011606:	bf0c      	ite	eq
 8011608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801160c:	2500      	movne	r5, #0
 801160e:	4293      	cmp	r3, r2
 8011610:	bfc4      	itt	gt
 8011612:	1a9b      	subgt	r3, r3, r2
 8011614:	18ed      	addgt	r5, r5, r3
 8011616:	2600      	movs	r6, #0
 8011618:	341a      	adds	r4, #26
 801161a:	42b5      	cmp	r5, r6
 801161c:	d11a      	bne.n	8011654 <_printf_common+0xc8>
 801161e:	2000      	movs	r0, #0
 8011620:	e008      	b.n	8011634 <_printf_common+0xa8>
 8011622:	2301      	movs	r3, #1
 8011624:	4652      	mov	r2, sl
 8011626:	4641      	mov	r1, r8
 8011628:	4638      	mov	r0, r7
 801162a:	47c8      	blx	r9
 801162c:	3001      	adds	r0, #1
 801162e:	d103      	bne.n	8011638 <_printf_common+0xac>
 8011630:	f04f 30ff 	mov.w	r0, #4294967295
 8011634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011638:	3501      	adds	r5, #1
 801163a:	e7c6      	b.n	80115ca <_printf_common+0x3e>
 801163c:	18e1      	adds	r1, r4, r3
 801163e:	1c5a      	adds	r2, r3, #1
 8011640:	2030      	movs	r0, #48	@ 0x30
 8011642:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011646:	4422      	add	r2, r4
 8011648:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801164c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011650:	3302      	adds	r3, #2
 8011652:	e7c7      	b.n	80115e4 <_printf_common+0x58>
 8011654:	2301      	movs	r3, #1
 8011656:	4622      	mov	r2, r4
 8011658:	4641      	mov	r1, r8
 801165a:	4638      	mov	r0, r7
 801165c:	47c8      	blx	r9
 801165e:	3001      	adds	r0, #1
 8011660:	d0e6      	beq.n	8011630 <_printf_common+0xa4>
 8011662:	3601      	adds	r6, #1
 8011664:	e7d9      	b.n	801161a <_printf_common+0x8e>
	...

08011668 <_printf_i>:
 8011668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801166c:	7e0f      	ldrb	r7, [r1, #24]
 801166e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011670:	2f78      	cmp	r7, #120	@ 0x78
 8011672:	4691      	mov	r9, r2
 8011674:	4680      	mov	r8, r0
 8011676:	460c      	mov	r4, r1
 8011678:	469a      	mov	sl, r3
 801167a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801167e:	d807      	bhi.n	8011690 <_printf_i+0x28>
 8011680:	2f62      	cmp	r7, #98	@ 0x62
 8011682:	d80a      	bhi.n	801169a <_printf_i+0x32>
 8011684:	2f00      	cmp	r7, #0
 8011686:	f000 80d1 	beq.w	801182c <_printf_i+0x1c4>
 801168a:	2f58      	cmp	r7, #88	@ 0x58
 801168c:	f000 80b8 	beq.w	8011800 <_printf_i+0x198>
 8011690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011694:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011698:	e03a      	b.n	8011710 <_printf_i+0xa8>
 801169a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801169e:	2b15      	cmp	r3, #21
 80116a0:	d8f6      	bhi.n	8011690 <_printf_i+0x28>
 80116a2:	a101      	add	r1, pc, #4	@ (adr r1, 80116a8 <_printf_i+0x40>)
 80116a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80116a8:	08011701 	.word	0x08011701
 80116ac:	08011715 	.word	0x08011715
 80116b0:	08011691 	.word	0x08011691
 80116b4:	08011691 	.word	0x08011691
 80116b8:	08011691 	.word	0x08011691
 80116bc:	08011691 	.word	0x08011691
 80116c0:	08011715 	.word	0x08011715
 80116c4:	08011691 	.word	0x08011691
 80116c8:	08011691 	.word	0x08011691
 80116cc:	08011691 	.word	0x08011691
 80116d0:	08011691 	.word	0x08011691
 80116d4:	08011813 	.word	0x08011813
 80116d8:	0801173f 	.word	0x0801173f
 80116dc:	080117cd 	.word	0x080117cd
 80116e0:	08011691 	.word	0x08011691
 80116e4:	08011691 	.word	0x08011691
 80116e8:	08011835 	.word	0x08011835
 80116ec:	08011691 	.word	0x08011691
 80116f0:	0801173f 	.word	0x0801173f
 80116f4:	08011691 	.word	0x08011691
 80116f8:	08011691 	.word	0x08011691
 80116fc:	080117d5 	.word	0x080117d5
 8011700:	6833      	ldr	r3, [r6, #0]
 8011702:	1d1a      	adds	r2, r3, #4
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	6032      	str	r2, [r6, #0]
 8011708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801170c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011710:	2301      	movs	r3, #1
 8011712:	e09c      	b.n	801184e <_printf_i+0x1e6>
 8011714:	6833      	ldr	r3, [r6, #0]
 8011716:	6820      	ldr	r0, [r4, #0]
 8011718:	1d19      	adds	r1, r3, #4
 801171a:	6031      	str	r1, [r6, #0]
 801171c:	0606      	lsls	r6, r0, #24
 801171e:	d501      	bpl.n	8011724 <_printf_i+0xbc>
 8011720:	681d      	ldr	r5, [r3, #0]
 8011722:	e003      	b.n	801172c <_printf_i+0xc4>
 8011724:	0645      	lsls	r5, r0, #25
 8011726:	d5fb      	bpl.n	8011720 <_printf_i+0xb8>
 8011728:	f9b3 5000 	ldrsh.w	r5, [r3]
 801172c:	2d00      	cmp	r5, #0
 801172e:	da03      	bge.n	8011738 <_printf_i+0xd0>
 8011730:	232d      	movs	r3, #45	@ 0x2d
 8011732:	426d      	negs	r5, r5
 8011734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011738:	4858      	ldr	r0, [pc, #352]	@ (801189c <_printf_i+0x234>)
 801173a:	230a      	movs	r3, #10
 801173c:	e011      	b.n	8011762 <_printf_i+0xfa>
 801173e:	6821      	ldr	r1, [r4, #0]
 8011740:	6833      	ldr	r3, [r6, #0]
 8011742:	0608      	lsls	r0, r1, #24
 8011744:	f853 5b04 	ldr.w	r5, [r3], #4
 8011748:	d402      	bmi.n	8011750 <_printf_i+0xe8>
 801174a:	0649      	lsls	r1, r1, #25
 801174c:	bf48      	it	mi
 801174e:	b2ad      	uxthmi	r5, r5
 8011750:	2f6f      	cmp	r7, #111	@ 0x6f
 8011752:	4852      	ldr	r0, [pc, #328]	@ (801189c <_printf_i+0x234>)
 8011754:	6033      	str	r3, [r6, #0]
 8011756:	bf14      	ite	ne
 8011758:	230a      	movne	r3, #10
 801175a:	2308      	moveq	r3, #8
 801175c:	2100      	movs	r1, #0
 801175e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011762:	6866      	ldr	r6, [r4, #4]
 8011764:	60a6      	str	r6, [r4, #8]
 8011766:	2e00      	cmp	r6, #0
 8011768:	db05      	blt.n	8011776 <_printf_i+0x10e>
 801176a:	6821      	ldr	r1, [r4, #0]
 801176c:	432e      	orrs	r6, r5
 801176e:	f021 0104 	bic.w	r1, r1, #4
 8011772:	6021      	str	r1, [r4, #0]
 8011774:	d04b      	beq.n	801180e <_printf_i+0x1a6>
 8011776:	4616      	mov	r6, r2
 8011778:	fbb5 f1f3 	udiv	r1, r5, r3
 801177c:	fb03 5711 	mls	r7, r3, r1, r5
 8011780:	5dc7      	ldrb	r7, [r0, r7]
 8011782:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011786:	462f      	mov	r7, r5
 8011788:	42bb      	cmp	r3, r7
 801178a:	460d      	mov	r5, r1
 801178c:	d9f4      	bls.n	8011778 <_printf_i+0x110>
 801178e:	2b08      	cmp	r3, #8
 8011790:	d10b      	bne.n	80117aa <_printf_i+0x142>
 8011792:	6823      	ldr	r3, [r4, #0]
 8011794:	07df      	lsls	r7, r3, #31
 8011796:	d508      	bpl.n	80117aa <_printf_i+0x142>
 8011798:	6923      	ldr	r3, [r4, #16]
 801179a:	6861      	ldr	r1, [r4, #4]
 801179c:	4299      	cmp	r1, r3
 801179e:	bfde      	ittt	le
 80117a0:	2330      	movle	r3, #48	@ 0x30
 80117a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80117a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80117aa:	1b92      	subs	r2, r2, r6
 80117ac:	6122      	str	r2, [r4, #16]
 80117ae:	f8cd a000 	str.w	sl, [sp]
 80117b2:	464b      	mov	r3, r9
 80117b4:	aa03      	add	r2, sp, #12
 80117b6:	4621      	mov	r1, r4
 80117b8:	4640      	mov	r0, r8
 80117ba:	f7ff fee7 	bl	801158c <_printf_common>
 80117be:	3001      	adds	r0, #1
 80117c0:	d14a      	bne.n	8011858 <_printf_i+0x1f0>
 80117c2:	f04f 30ff 	mov.w	r0, #4294967295
 80117c6:	b004      	add	sp, #16
 80117c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117cc:	6823      	ldr	r3, [r4, #0]
 80117ce:	f043 0320 	orr.w	r3, r3, #32
 80117d2:	6023      	str	r3, [r4, #0]
 80117d4:	4832      	ldr	r0, [pc, #200]	@ (80118a0 <_printf_i+0x238>)
 80117d6:	2778      	movs	r7, #120	@ 0x78
 80117d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80117dc:	6823      	ldr	r3, [r4, #0]
 80117de:	6831      	ldr	r1, [r6, #0]
 80117e0:	061f      	lsls	r7, r3, #24
 80117e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80117e6:	d402      	bmi.n	80117ee <_printf_i+0x186>
 80117e8:	065f      	lsls	r7, r3, #25
 80117ea:	bf48      	it	mi
 80117ec:	b2ad      	uxthmi	r5, r5
 80117ee:	6031      	str	r1, [r6, #0]
 80117f0:	07d9      	lsls	r1, r3, #31
 80117f2:	bf44      	itt	mi
 80117f4:	f043 0320 	orrmi.w	r3, r3, #32
 80117f8:	6023      	strmi	r3, [r4, #0]
 80117fa:	b11d      	cbz	r5, 8011804 <_printf_i+0x19c>
 80117fc:	2310      	movs	r3, #16
 80117fe:	e7ad      	b.n	801175c <_printf_i+0xf4>
 8011800:	4826      	ldr	r0, [pc, #152]	@ (801189c <_printf_i+0x234>)
 8011802:	e7e9      	b.n	80117d8 <_printf_i+0x170>
 8011804:	6823      	ldr	r3, [r4, #0]
 8011806:	f023 0320 	bic.w	r3, r3, #32
 801180a:	6023      	str	r3, [r4, #0]
 801180c:	e7f6      	b.n	80117fc <_printf_i+0x194>
 801180e:	4616      	mov	r6, r2
 8011810:	e7bd      	b.n	801178e <_printf_i+0x126>
 8011812:	6833      	ldr	r3, [r6, #0]
 8011814:	6825      	ldr	r5, [r4, #0]
 8011816:	6961      	ldr	r1, [r4, #20]
 8011818:	1d18      	adds	r0, r3, #4
 801181a:	6030      	str	r0, [r6, #0]
 801181c:	062e      	lsls	r6, r5, #24
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	d501      	bpl.n	8011826 <_printf_i+0x1be>
 8011822:	6019      	str	r1, [r3, #0]
 8011824:	e002      	b.n	801182c <_printf_i+0x1c4>
 8011826:	0668      	lsls	r0, r5, #25
 8011828:	d5fb      	bpl.n	8011822 <_printf_i+0x1ba>
 801182a:	8019      	strh	r1, [r3, #0]
 801182c:	2300      	movs	r3, #0
 801182e:	6123      	str	r3, [r4, #16]
 8011830:	4616      	mov	r6, r2
 8011832:	e7bc      	b.n	80117ae <_printf_i+0x146>
 8011834:	6833      	ldr	r3, [r6, #0]
 8011836:	1d1a      	adds	r2, r3, #4
 8011838:	6032      	str	r2, [r6, #0]
 801183a:	681e      	ldr	r6, [r3, #0]
 801183c:	6862      	ldr	r2, [r4, #4]
 801183e:	2100      	movs	r1, #0
 8011840:	4630      	mov	r0, r6
 8011842:	f7ee fd6d 	bl	8000320 <memchr>
 8011846:	b108      	cbz	r0, 801184c <_printf_i+0x1e4>
 8011848:	1b80      	subs	r0, r0, r6
 801184a:	6060      	str	r0, [r4, #4]
 801184c:	6863      	ldr	r3, [r4, #4]
 801184e:	6123      	str	r3, [r4, #16]
 8011850:	2300      	movs	r3, #0
 8011852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011856:	e7aa      	b.n	80117ae <_printf_i+0x146>
 8011858:	6923      	ldr	r3, [r4, #16]
 801185a:	4632      	mov	r2, r6
 801185c:	4649      	mov	r1, r9
 801185e:	4640      	mov	r0, r8
 8011860:	47d0      	blx	sl
 8011862:	3001      	adds	r0, #1
 8011864:	d0ad      	beq.n	80117c2 <_printf_i+0x15a>
 8011866:	6823      	ldr	r3, [r4, #0]
 8011868:	079b      	lsls	r3, r3, #30
 801186a:	d413      	bmi.n	8011894 <_printf_i+0x22c>
 801186c:	68e0      	ldr	r0, [r4, #12]
 801186e:	9b03      	ldr	r3, [sp, #12]
 8011870:	4298      	cmp	r0, r3
 8011872:	bfb8      	it	lt
 8011874:	4618      	movlt	r0, r3
 8011876:	e7a6      	b.n	80117c6 <_printf_i+0x15e>
 8011878:	2301      	movs	r3, #1
 801187a:	4632      	mov	r2, r6
 801187c:	4649      	mov	r1, r9
 801187e:	4640      	mov	r0, r8
 8011880:	47d0      	blx	sl
 8011882:	3001      	adds	r0, #1
 8011884:	d09d      	beq.n	80117c2 <_printf_i+0x15a>
 8011886:	3501      	adds	r5, #1
 8011888:	68e3      	ldr	r3, [r4, #12]
 801188a:	9903      	ldr	r1, [sp, #12]
 801188c:	1a5b      	subs	r3, r3, r1
 801188e:	42ab      	cmp	r3, r5
 8011890:	dcf2      	bgt.n	8011878 <_printf_i+0x210>
 8011892:	e7eb      	b.n	801186c <_printf_i+0x204>
 8011894:	2500      	movs	r5, #0
 8011896:	f104 0619 	add.w	r6, r4, #25
 801189a:	e7f5      	b.n	8011888 <_printf_i+0x220>
 801189c:	08011cd1 	.word	0x08011cd1
 80118a0:	08011ce2 	.word	0x08011ce2

080118a4 <memmove>:
 80118a4:	4288      	cmp	r0, r1
 80118a6:	b510      	push	{r4, lr}
 80118a8:	eb01 0402 	add.w	r4, r1, r2
 80118ac:	d902      	bls.n	80118b4 <memmove+0x10>
 80118ae:	4284      	cmp	r4, r0
 80118b0:	4623      	mov	r3, r4
 80118b2:	d807      	bhi.n	80118c4 <memmove+0x20>
 80118b4:	1e43      	subs	r3, r0, #1
 80118b6:	42a1      	cmp	r1, r4
 80118b8:	d008      	beq.n	80118cc <memmove+0x28>
 80118ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80118c2:	e7f8      	b.n	80118b6 <memmove+0x12>
 80118c4:	4402      	add	r2, r0
 80118c6:	4601      	mov	r1, r0
 80118c8:	428a      	cmp	r2, r1
 80118ca:	d100      	bne.n	80118ce <memmove+0x2a>
 80118cc:	bd10      	pop	{r4, pc}
 80118ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80118d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80118d6:	e7f7      	b.n	80118c8 <memmove+0x24>

080118d8 <_sbrk_r>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	4d06      	ldr	r5, [pc, #24]	@ (80118f4 <_sbrk_r+0x1c>)
 80118dc:	2300      	movs	r3, #0
 80118de:	4604      	mov	r4, r0
 80118e0:	4608      	mov	r0, r1
 80118e2:	602b      	str	r3, [r5, #0]
 80118e4:	f7f0 ff46 	bl	8002774 <_sbrk>
 80118e8:	1c43      	adds	r3, r0, #1
 80118ea:	d102      	bne.n	80118f2 <_sbrk_r+0x1a>
 80118ec:	682b      	ldr	r3, [r5, #0]
 80118ee:	b103      	cbz	r3, 80118f2 <_sbrk_r+0x1a>
 80118f0:	6023      	str	r3, [r4, #0]
 80118f2:	bd38      	pop	{r3, r4, r5, pc}
 80118f4:	240009f0 	.word	0x240009f0

080118f8 <_realloc_r>:
 80118f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118fc:	4607      	mov	r7, r0
 80118fe:	4614      	mov	r4, r2
 8011900:	460d      	mov	r5, r1
 8011902:	b921      	cbnz	r1, 801190e <_realloc_r+0x16>
 8011904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011908:	4611      	mov	r1, r2
 801190a:	f7ff bc5b 	b.w	80111c4 <_malloc_r>
 801190e:	b92a      	cbnz	r2, 801191c <_realloc_r+0x24>
 8011910:	f7ff fbec 	bl	80110ec <_free_r>
 8011914:	4625      	mov	r5, r4
 8011916:	4628      	mov	r0, r5
 8011918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801191c:	f000 f81a 	bl	8011954 <_malloc_usable_size_r>
 8011920:	4284      	cmp	r4, r0
 8011922:	4606      	mov	r6, r0
 8011924:	d802      	bhi.n	801192c <_realloc_r+0x34>
 8011926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801192a:	d8f4      	bhi.n	8011916 <_realloc_r+0x1e>
 801192c:	4621      	mov	r1, r4
 801192e:	4638      	mov	r0, r7
 8011930:	f7ff fc48 	bl	80111c4 <_malloc_r>
 8011934:	4680      	mov	r8, r0
 8011936:	b908      	cbnz	r0, 801193c <_realloc_r+0x44>
 8011938:	4645      	mov	r5, r8
 801193a:	e7ec      	b.n	8011916 <_realloc_r+0x1e>
 801193c:	42b4      	cmp	r4, r6
 801193e:	4622      	mov	r2, r4
 8011940:	4629      	mov	r1, r5
 8011942:	bf28      	it	cs
 8011944:	4632      	movcs	r2, r6
 8011946:	f7ff fbc3 	bl	80110d0 <memcpy>
 801194a:	4629      	mov	r1, r5
 801194c:	4638      	mov	r0, r7
 801194e:	f7ff fbcd 	bl	80110ec <_free_r>
 8011952:	e7f1      	b.n	8011938 <_realloc_r+0x40>

08011954 <_malloc_usable_size_r>:
 8011954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011958:	1f18      	subs	r0, r3, #4
 801195a:	2b00      	cmp	r3, #0
 801195c:	bfbc      	itt	lt
 801195e:	580b      	ldrlt	r3, [r1, r0]
 8011960:	18c0      	addlt	r0, r0, r3
 8011962:	4770      	bx	lr

08011964 <_init>:
 8011964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011966:	bf00      	nop
 8011968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801196a:	bc08      	pop	{r3}
 801196c:	469e      	mov	lr, r3
 801196e:	4770      	bx	lr

08011970 <_fini>:
 8011970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011972:	bf00      	nop
 8011974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011976:	bc08      	pop	{r3}
 8011978:	469e      	mov	lr, r3
 801197a:	4770      	bx	lr
