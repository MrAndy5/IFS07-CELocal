
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011858  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08011b28  08011b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011eac  08011eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011eb4  08011eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011eb8  08011eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08011ebc  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000998  2400006c  08011f28  0001306c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a04  08011f28  00013a04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000257b2  00000000  00000000  0001309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9a  00000000  00000000  0003884c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  0003e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392df  00000000  00000000  0003f9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002676b  00000000  00000000  00078ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001792b4  00000000  00000000  0009f411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002186c5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086bc  00000000  00000000  00218708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00220dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011b10 	.word	0x08011b10

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08011b10 	.word	0x08011b10

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f002 f9ee 	bl	8002ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f9e8 	bl	8000ac8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 fa54 	bl	8000ba4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 feb8 	bl	8001470 <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 fe96 	bl	8001430 <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f000 fa80 	bl	8000c08 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000708:	f000 fb1a 	bl	8000d40 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070c:	f000 fb80 	bl	8000e10 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000710:	f000 fbfc 	bl	8000f0c <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000714:	f000 fd14 	bl	8001140 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000718:	f000 fe3e 	bl	8001398 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071c:	f000 fdc8 	bl	80012b0 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000720:	f000 fdee 	bl	8001300 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000724:	f000 fcee 	bl	8001104 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000728:	f010 faae 	bl	8010c88 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072c:	f000 fc6c 	bl	8001008 <MX_FDCAN3_Init>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000730:	2203      	movs	r2, #3
 8000732:	4997      	ldr	r1, [pc, #604]	@ (8000990 <main+0x2a4>)
 8000734:	4897      	ldr	r0, [pc, #604]	@ (8000994 <main+0x2a8>)
 8000736:	f002 ff75 	bl	8003624 <HAL_ADC_Start_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <main+0x5e>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000740:	4895      	ldr	r0, [pc, #596]	@ (8000998 <main+0x2ac>)
 8000742:	f000 ff67 	bl	8001614 <print>
#endif
		Error_Handler();
 8000746:	f001 fc05 	bl	8001f54 <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800074a:	4894      	ldr	r0, [pc, #592]	@ (800099c <main+0x2b0>)
 800074c:	f006 ff4c 	bl	80075e8 <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x74>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000756:	4892      	ldr	r0, [pc, #584]	@ (80009a0 <main+0x2b4>)
 8000758:	f000 ff5c 	bl	8001614 <print>
#endif
		Error_Handler();
 800075c:	f001 fbfa 	bl	8001f54 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	488d      	ldr	r0, [pc, #564]	@ (800099c <main+0x2b0>)
 8000766:	f007 f931 	bl	80079cc <HAL_FDCAN_ActivateNotification>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <main+0x8e>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000770:	488c      	ldr	r0, [pc, #560]	@ (80009a4 <main+0x2b8>)
 8000772:	f000 ff4f 	bl	8001614 <print>
#endif
		Error_Handler();
 8000776:	f001 fbed 	bl	8001f54 <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800077a:	488b      	ldr	r0, [pc, #556]	@ (80009a8 <main+0x2bc>)
 800077c:	f006 ff34 	bl	80075e8 <HAL_FDCAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0xa4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000786:	4889      	ldr	r0, [pc, #548]	@ (80009ac <main+0x2c0>)
 8000788:	f000 ff44 	bl	8001614 <print>

#endif
		Error_Handler();
 800078c:	f001 fbe2 	bl	8001f54 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	4884      	ldr	r0, [pc, #528]	@ (80009a8 <main+0x2bc>)
 8000796:	f007 f919 	bl	80079cc <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80007a0:	4883      	ldr	r0, [pc, #524]	@ (80009b0 <main+0x2c4>)
 80007a2:	f000 ff37 	bl	8001614 <print>
#endif
		Error_Handler();
 80007a6:	f001 fbd5 	bl	8001f54 <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80007aa:	4882      	ldr	r0, [pc, #520]	@ (80009b4 <main+0x2c8>)
 80007ac:	f006 ff1c 	bl	80075e8 <HAL_FDCAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007b6:	4880      	ldr	r0, [pc, #512]	@ (80009b8 <main+0x2cc>)
 80007b8:	f000 ff2c 	bl	8001614 <print>

#endif
		Error_Handler();
 80007bc:	f001 fbca 	bl	8001f54 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	487b      	ldr	r0, [pc, #492]	@ (80009b4 <main+0x2c8>)
 80007c6:	f007 f901 	bl	80079cc <HAL_FDCAN_ActivateNotification>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007d0:	487a      	ldr	r0, [pc, #488]	@ (80009bc <main+0x2d0>)
 80007d2:	f000 ff1f 	bl	8001614 <print>
#endif
		Error_Handler();
 80007d6:	f001 fbbd 	bl	8001f54 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007da:	4879      	ldr	r0, [pc, #484]	@ (80009c0 <main+0x2d4>)
 80007dc:	f000 ff1a 	bl	8001614 <print>
#if (CALIBRATION)
	config_inv_lectura_v = 1;
#endif

	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007e0:	e009      	b.n	80007f6 <main+0x10a>
	{
		print("Solicitar tensión inversor");
 80007e2:	4877      	ldr	r0, [pc, #476]	@ (80009c0 <main+0x2d4>)
 80007e4:	f000 ff16 	bl	8001614 <print>
		if (config_inv_lectura_v == 1)
 80007e8:	4b76      	ldr	r3, [pc, #472]	@ (80009c4 <main+0x2d8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x10a>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007f0:	4875      	ldr	r0, [pc, #468]	@ (80009c8 <main+0x2dc>)
 80007f2:	f000 ff0f 	bl	8001614 <print>
	while (config_inv_lectura_v == 0)
 80007f6:	4b73      	ldr	r3, [pc, #460]	@ (80009c4 <main+0x2d8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f1      	beq.n	80007e2 <main+0xf6>
	}

#if !CALIBRATION

	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80007fe:	e056      	b.n	80008ae <main+0x1c2>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000800:	4b72      	ldr	r3, [pc, #456]	@ (80009cc <main+0x2e0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4972      	ldr	r1, [pc, #456]	@ (80009d0 <main+0x2e4>)
 8000808:	4872      	ldr	r0, [pc, #456]	@ (80009d4 <main+0x2e8>)
 800080a:	f010 fce1 	bl	80111d0 <siprintf>
		//print(TxBuffer);
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800080e:	4b72      	ldr	r3, [pc, #456]	@ (80009d8 <main+0x2ec>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a72      	ldr	r2, [pc, #456]	@ (80009dc <main+0x2f0>)
 8000814:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000816:	4b71      	ldr	r3, [pc, #452]	@ (80009dc <main+0x2f0>)
 8000818:	2202      	movs	r2, #2
 800081a:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800081c:	4b6f      	ldr	r3, [pc, #444]	@ (80009dc <main+0x2f0>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000822:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000824:	4b6d      	ldr	r3, [pc, #436]	@ (80009dc <main+0x2f0>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 800082a:	4b6c      	ldr	r3, [pc, #432]	@ (80009dc <main+0x2f0>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000830:	4b66      	ldr	r3, [pc, #408]	@ (80009cc <main+0x2e0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b6a      	ldr	r3, [pc, #424]	@ (80009e0 <main+0x2f4>)
 8000838:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 800083a:	4b64      	ldr	r3, [pc, #400]	@ (80009cc <main+0x2e0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	121b      	asrs	r3, r3, #8
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b67      	ldr	r3, [pc, #412]	@ (80009e0 <main+0x2f4>)
 8000844:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000846:	4a66      	ldr	r2, [pc, #408]	@ (80009e0 <main+0x2f4>)
 8000848:	4964      	ldr	r1, [pc, #400]	@ (80009dc <main+0x2f0>)
 800084a:	4857      	ldr	r0, [pc, #348]	@ (80009a8 <main+0x2bc>)
 800084c:	f006 fef7 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	4864      	ldr	r0, [pc, #400]	@ (80009e4 <main+0x2f8>)
 8000854:	f007 ffde 	bl	8008814 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	4b62      	ldr	r3, [pc, #392]	@ (80009e8 <main+0x2fc>)
 800085e:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8000860:	4b61      	ldr	r3, [pc, #388]	@ (80009e8 <main+0x2fc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d11b      	bne.n	80008a0 <main+0x1b4>
			TxHeader_Acu.Identifier = 0x600;
 8000868:	4b5c      	ldr	r3, [pc, #368]	@ (80009dc <main+0x2f0>)
 800086a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800086e:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8000870:	4b5a      	ldr	r3, [pc, #360]	@ (80009dc <main+0x2f0>)
 8000872:	2202      	movs	r2, #2
 8000874:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000876:	4b59      	ldr	r3, [pc, #356]	@ (80009dc <main+0x2f0>)
 8000878:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800087c:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 800087e:	4b57      	ldr	r3, [pc, #348]	@ (80009dc <main+0x2f0>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000884:	4b55      	ldr	r3, [pc, #340]	@ (80009dc <main+0x2f0>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = 0x0;
 800088a:	4b55      	ldr	r3, [pc, #340]	@ (80009e0 <main+0x2f4>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
			TxData_Acu[1] = 0x0;
 8000890:	4b53      	ldr	r3, [pc, #332]	@ (80009e0 <main+0x2f4>)
 8000892:	2200      	movs	r2, #0
 8000894:	705a      	strb	r2, [r3, #1]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000896:	4a52      	ldr	r2, [pc, #328]	@ (80009e0 <main+0x2f4>)
 8000898:	4950      	ldr	r1, [pc, #320]	@ (80009dc <main+0x2f0>)
 800089a:	4843      	ldr	r0, [pc, #268]	@ (80009a8 <main+0x2bc>)
 800089c:	f006 fecf 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}



		if (precarga_inv == 1)
 80008a0:	4b52      	ldr	r3, [pc, #328]	@ (80009ec <main+0x300>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d102      	bne.n	80008ae <main+0x1c2>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 80008a8:	4851      	ldr	r0, [pc, #324]	@ (80009f0 <main+0x304>)
 80008aa:	f000 feb3 	bl	8001614 <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80008ae:	4b4f      	ldr	r3, [pc, #316]	@ (80009ec <main+0x300>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d104      	bne.n	80008c0 <main+0x1d4>
 80008b6:	4b45      	ldr	r3, [pc, #276]	@ (80009cc <main+0x2e0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80008be:	db9f      	blt.n	8000800 <main+0x114>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80008c0:	4b45      	ldr	r3, [pc, #276]	@ (80009d8 <main+0x2ec>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a45      	ldr	r2, [pc, #276]	@ (80009dc <main+0x2f0>)
 80008c6:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 80008c8:	4b44      	ldr	r3, [pc, #272]	@ (80009dc <main+0x2f0>)
 80008ca:	2202      	movs	r2, #2
 80008cc:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008ce:	4b43      	ldr	r3, [pc, #268]	@ (80009dc <main+0x2f0>)
 80008d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d4:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008d6:	4b41      	ldr	r3, [pc, #260]	@ (80009dc <main+0x2f0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008dc:	4b3f      	ldr	r3, [pc, #252]	@ (80009dc <main+0x2f0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008e2:	4b3a      	ldr	r3, [pc, #232]	@ (80009cc <main+0x2e0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b3d      	ldr	r3, [pc, #244]	@ (80009e0 <main+0x2f4>)
 80008ea:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008ec:	4b37      	ldr	r3, [pc, #220]	@ (80009cc <main+0x2e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	121b      	asrs	r3, r3, #8
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b3a      	ldr	r3, [pc, #232]	@ (80009e0 <main+0x2f4>)
 80008f6:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80008f8:	4a39      	ldr	r2, [pc, #228]	@ (80009e0 <main+0x2f4>)
 80008fa:	4938      	ldr	r1, [pc, #224]	@ (80009dc <main+0x2f0>)
 80008fc:	482a      	ldr	r0, [pc, #168]	@ (80009a8 <main+0x2bc>)
 80008fe:	f006 fe9e 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000902:	483c      	ldr	r0, [pc, #240]	@ (80009f4 <main+0x308>)
 8000904:	f00c fffa 	bl	800d8fc <HAL_TIM_Base_Start_IT>

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000908:	e017      	b.n	800093a <main+0x24e>



		//printValue(start_button_act);
		//print("Botón Start + Freno:");
		if (start_button_act == 1)
 800090a:	4b3b      	ldr	r3, [pc, #236]	@ (80009f8 <main+0x30c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d113      	bne.n	800093a <main+0x24e>
		{

#if DEBUG
			printValue(s_freno);
 8000912:	4b3a      	ldr	r3, [pc, #232]	@ (80009fc <main+0x310>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fe9a 	bl	8001650 <printValue>
#endif
			if (s_freno > 900)
 800091c:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <main+0x310>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000924:	dd06      	ble.n	8000934 <main+0x248>
			{
				boton_arranque = 1;
 8000926:	4b36      	ldr	r3, [pc, #216]	@ (8000a00 <main+0x314>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 800092c:	4835      	ldr	r0, [pc, #212]	@ (8000a04 <main+0x318>)
 800092e:	f000 fe71 	bl	8001614 <print>
 8000932:	e002      	b.n	800093a <main+0x24e>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 8000934:	4834      	ldr	r0, [pc, #208]	@ (8000a08 <main+0x31c>)
 8000936:	f000 fe6d 	bl	8001614 <print>
	while (boton_arranque == 0)
 800093a:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <main+0x314>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0e3      	beq.n	800090a <main+0x21e>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8000942:	4832      	ldr	r0, [pc, #200]	@ (8000a0c <main+0x320>)
 8000944:	f000 fe66 	bl	8001614 <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 8000948:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <main+0x324>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 800094e:	2201      	movs	r2, #1
 8000950:	2102      	movs	r1, #2
 8000952:	4830      	ldr	r0, [pc, #192]	@ (8000a14 <main+0x328>)
 8000954:	f007 ff76 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000958:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800095c:	f002 f94a 	bl	8002bf4 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000960:	2200      	movs	r2, #0
 8000962:	2102      	movs	r1, #2
 8000964:	482b      	ldr	r0, [pc, #172]	@ (8000a14 <main+0x328>)
 8000966:	f007 ff6d 	bl	8008844 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 800096a:	482b      	ldr	r0, [pc, #172]	@ (8000a18 <main+0x32c>)
 800096c:	f000 fe52 	bl	8001614 <print>
#endif

	// Estado STAND BY inversor
	while (state != 3)
 8000970:	e006      	b.n	8000980 <main+0x294>
	{
		if (state == 3)
 8000972:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <main+0x330>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d102      	bne.n	8000980 <main+0x294>
		{
#if DEBUG
			print("Precarga");
 800097a:	4829      	ldr	r0, [pc, #164]	@ (8000a20 <main+0x334>)
 800097c:	f000 fe4a 	bl	8001614 <print>
	while (state != 3)
 8000980:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <main+0x330>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d1f4      	bne.n	8000972 <main+0x286>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 8000988:	4826      	ldr	r0, [pc, #152]	@ (8000a24 <main+0x338>)
 800098a:	f000 fe43 	bl	8001614 <print>
#endif

	while (state != 4)
 800098e:	e083      	b.n	8000a98 <main+0x3ac>
 8000990:	240006fc 	.word	0x240006fc
 8000994:	24000094 	.word	0x24000094
 8000998:	08011b28 	.word	0x08011b28
 800099c:	240001ec 	.word	0x240001ec
 80009a0:	08011b48 	.word	0x08011b48
 80009a4:	08011b68 	.word	0x08011b68
 80009a8:	2400028c 	.word	0x2400028c
 80009ac:	08011b90 	.word	0x08011b90
 80009b0:	08011bb0 	.word	0x08011bb0
 80009b4:	2400032c 	.word	0x2400032c
 80009b8:	08011bd8 	.word	0x08011bd8
 80009bc:	08011bf8 	.word	0x08011bf8
 80009c0:	08011c20 	.word	0x08011c20
 80009c4:	2400008c 	.word	0x2400008c
 80009c8:	08011c3c 	.word	0x08011c3c
 80009cc:	240006f4 	.word	0x240006f4
 80009d0:	08011c70 	.word	0x08011c70
 80009d4:	24000790 	.word	0x24000790
 80009d8:	24000004 	.word	0x24000004
 80009dc:	24000654 	.word	0x24000654
 80009e0:	240006d8 	.word	0x240006d8
 80009e4:	58021800 	.word	0x58021800
 80009e8:	24000728 	.word	0x24000728
 80009ec:	24000088 	.word	0x24000088
 80009f0:	08011c88 	.word	0x08011c88
 80009f4:	24000494 	.word	0x24000494
 80009f8:	240006f0 	.word	0x240006f0
 80009fc:	2400070c 	.word	0x2400070c
 8000a00:	24000090 	.word	0x24000090
 8000a04:	08011ca4 	.word	0x08011ca4
 8000a08:	08011cc4 	.word	0x08011cc4
 8000a0c:	08011ce0 	.word	0x08011ce0
 8000a10:	2400088c 	.word	0x2400088c
 8000a14:	58020800 	.word	0x58020800
 8000a18:	08011cf0 	.word	0x08011cf0
 8000a1c:	2400071a 	.word	0x2400071a
 8000a20:	08011d00 	.word	0x08011d00
 8000a24:	08011d0c 	.word	0x08011d0c
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000a28:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <main+0x3c0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a20      	ldr	r2, [pc, #128]	@ (8000ab0 <main+0x3c4>)
 8000a2e:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <main+0x3c4>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <main+0x3c4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <main+0x3c8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <main+0x3c8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <main+0x3c8>)
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a4e:	4a19      	ldr	r2, [pc, #100]	@ (8000ab4 <main+0x3c8>)
 8000a50:	4917      	ldr	r1, [pc, #92]	@ (8000ab0 <main+0x3c4>)
 8000a52:	4819      	ldr	r0, [pc, #100]	@ (8000ab8 <main+0x3cc>)
 8000a54:	f006 fdf3 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <main+0x3c4>)
 8000a5a:	f240 3262 	movw	r2, #866	@ 0x362
 8000a5e:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <main+0x3c4>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <main+0x3d0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <main+0x3c8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <main+0x3c8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000a78:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <main+0x3d0>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <main+0x3c8>)
 8000a80:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <main+0x3c8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <main+0x3c8>)
 8000a8a:	4909      	ldr	r1, [pc, #36]	@ (8000ab0 <main+0x3c4>)
 8000a8c:	480a      	ldr	r0, [pc, #40]	@ (8000ab8 <main+0x3cc>)
 8000a8e:	f006 fdd6 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000a92:	200a      	movs	r0, #10
 8000a94:	f002 f8ae 	bl	8002bf4 <HAL_Delay>
	while (state != 4)
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <main+0x3d4>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d1c3      	bne.n	8000a28 <main+0x33c>

	}

#if DEBUG
	print("state: ready");
 8000aa0:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <main+0x3d8>)
 8000aa2:	f000 fdb7 	bl	8001614 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000aa6:	bf00      	nop
 8000aa8:	e7fd      	b.n	8000aa6 <main+0x3ba>
 8000aaa:	bf00      	nop
 8000aac:	24000000 	.word	0x24000000
 8000ab0:	24000608 	.word	0x24000608
 8000ab4:	240006c8 	.word	0x240006c8
 8000ab8:	240001ec 	.word	0x240001ec
 8000abc:	24000718 	.word	0x24000718
 8000ac0:	2400071a 	.word	0x2400071a
 8000ac4:	08011d20 	.word	0x08011d20

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09c      	sub	sp, #112	@ 0x70
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	224c      	movs	r2, #76	@ 0x4c
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f010 fb9c 	bl	8011214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f010 fb96 	bl	8011214 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f007 fec5 	bl	8008878 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba0 <SystemClock_Config+0xd8>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba0 <SystemClock_Config+0xd8>)
 8000af8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000afc:	6193      	str	r3, [r2, #24]
 8000afe:	4b28      	ldr	r3, [pc, #160]	@ (8000ba0 <SystemClock_Config+0xd8>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0a:	bf00      	nop
 8000b0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ba0 <SystemClock_Config+0xd8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b18:	d1f8      	bne.n	8000b0c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b30:	232c      	movs	r3, #44	@ 0x2c
 8000b32:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b40:	230c      	movs	r3, #12
 8000b42:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	4618      	mov	r0, r3
 8000b52:	f007 fecb 	bl	80088ec <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b5c:	f001 f9fa 	bl	8001f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	233f      	movs	r3, #63	@ 0x3f
 8000b62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2303      	movs	r3, #3
 8000b66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b70:	2340      	movs	r3, #64	@ 0x40
 8000b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b74:	2340      	movs	r3, #64	@ 0x40
 8000b76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b7e:	2340      	movs	r3, #64	@ 0x40
 8000b80:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2103      	movs	r1, #3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f008 fa8a 	bl	80090a0 <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b92:	f001 f9df 	bl	8001f54 <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3770      	adds	r7, #112	@ 0x70
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	58024800 	.word	0x58024800

08000ba4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ba8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000baa:	463b      	mov	r3, r7
 8000bac:	22b8      	movs	r2, #184	@ 0xb8
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f010 fb2f 	bl	8011214 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000bb6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000bba:	f04f 0300 	mov.w	r3, #0
 8000bbe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bd6:	23c0      	movs	r3, #192	@ 0xc0
 8000bd8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000be2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be6:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f008 fde1 	bl	80097b8 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000bfc:	f001 f9aa 	bl	8001f54 <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	37b8      	adds	r7, #184	@ 0xb8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	@ 0x30
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2224      	movs	r2, #36	@ 0x24
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f010 faf7 	bl	8011214 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c26:	4b41      	ldr	r3, [pc, #260]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c28:	4a41      	ldr	r2, [pc, #260]	@ (8000d30 <MX_ADC1_Init+0x128>)
 8000c2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c2e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c34:	4b3d      	ldr	r3, [pc, #244]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c36:	2208      	movs	r2, #8
 8000c38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c40:	4b3a      	ldr	r3, [pc, #232]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c42:	2208      	movs	r2, #8
 8000c44:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c46:	4b39      	ldr	r3, [pc, #228]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c4c:	4b37      	ldr	r3, [pc, #220]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c52:	4b36      	ldr	r3, [pc, #216]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c54:	2203      	movs	r2, #3
 8000c56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c58:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c60:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c66:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c6e:	2203      	movs	r2, #3
 8000c70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c72:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c86:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c8c:	4827      	ldr	r0, [pc, #156]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000c8e:	f002 fac1 	bl	8003214 <HAL_ADC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c98:	f001 f95c 	bl	8001f54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4821      	ldr	r0, [pc, #132]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000ca8:	f003 ff84 	bl	8004bb4 <HAL_ADCEx_MultiModeConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000cb2:	f001 f94f 	bl	8001f54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <MX_ADC1_Init+0x12c>)
 8000cb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cba:	2306      	movs	r3, #6
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cc2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cc6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4814      	ldr	r0, [pc, #80]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000cdc:	f002 ffd6 	bl	8003c8c <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ce6:	f001 f935 	bl	8001f54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <MX_ADC1_Init+0x130>)
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000cf8:	f002 ffc8 	bl	8003c8c <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d02:	f001 f927 	bl	8001f54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <MX_ADC1_Init+0x134>)
 8000d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d0a:	2312      	movs	r3, #18
 8000d0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <MX_ADC1_Init+0x124>)
 8000d14:	f002 ffba 	bl	8003c8c <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000d1e:	f001 f919 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3730      	adds	r7, #48	@ 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24000094 	.word	0x24000094
 8000d30:	40022000 	.word	0x40022000
 8000d34:	10c00010 	.word	0x10c00010
 8000d38:	14f00020 	.word	0x14f00020
 8000d3c:	08600004 	.word	0x08600004

08000d40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2224      	movs	r2, #36	@ 0x24
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f010 fa61 	bl	8011214 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d52:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d54:	4a2c      	ldr	r2, [pc, #176]	@ (8000e08 <MX_ADC2_Init+0xc8>)
 8000d56:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d58:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d5a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b27      	ldr	r3, [pc, #156]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6c:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d72:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d78:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000db8:	4812      	ldr	r0, [pc, #72]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000dba:	f002 fa2b 	bl	8003214 <HAL_ADC_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000dc4:	f001 f8c6 	bl	8001f54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <MX_ADC2_Init+0xcc>)
 8000dca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dd4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000dd8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_ADC2_Init+0xc4>)
 8000dee:	f002 ff4d 	bl	8003c8c <HAL_ADC_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000df8:	f001 f8ac 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	@ 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24000104 	.word	0x24000104
 8000e08:	40022100 	.word	0x40022100
 8000e0c:	25b00200 	.word	0x25b00200

08000e10 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e16:	4b3b      	ldr	r3, [pc, #236]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e18:	4a3b      	ldr	r2, [pc, #236]	@ (8000f08 <MX_FDCAN1_Init+0xf8>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e1c:	4b39      	ldr	r3, [pc, #228]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e22:	4b38      	ldr	r3, [pc, #224]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e28:	4b36      	ldr	r3, [pc, #216]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e2e:	4b35      	ldr	r3, [pc, #212]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e34:	4b33      	ldr	r3, [pc, #204]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000e3a:	4b32      	ldr	r3, [pc, #200]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e3c:	2206      	movs	r2, #6
 8000e3e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e40:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e46:	4b2f      	ldr	r3, [pc, #188]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e4e:	2205      	movs	r2, #5
 8000e50:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e52:	4b2c      	ldr	r3, [pc, #176]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e58:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e5e:	4b29      	ldr	r3, [pc, #164]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e64:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e70:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e76:	4b23      	ldr	r3, [pc, #140]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e7e:	2220      	movs	r2, #32
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e82:	4b20      	ldr	r3, [pc, #128]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e90:	2204      	movs	r2, #4
 8000e92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000eae:	2220      	movs	r2, #32
 8000eb0:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000ec0:	f006 f93e 	bl	8007140 <HAL_FDCAN_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000eca:	f001 f843 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000eda:	2301      	movs	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	@ (8000f04 <MX_FDCAN1_Init+0xf4>)
 8000eec:	f006 fb06 	bl	80074fc <HAL_FDCAN_ConfigFilter>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000ef6:	f001 f82d 	bl	8001f54 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	240001ec 	.word	0x240001ec
 8000f08:	4000a000 	.word	0x4000a000

08000f0c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f12:	4b3b      	ldr	r3, [pc, #236]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f14:	4a3b      	ldr	r2, [pc, #236]	@ (8001004 <MX_FDCAN2_Init+0xf8>)
 8000f16:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f18:	4b39      	ldr	r3, [pc, #228]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f1e:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f24:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f2a:	4b35      	ldr	r3, [pc, #212]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f30:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000f36:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f38:	2206      	movs	r2, #6
 8000f3a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f3c:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f42:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f4a:	2205      	movs	r2, #5
 8000f4c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f5a:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f60:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f66:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f6c:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f72:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f78:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f98:	2204      	movs	r2, #4
 8000f9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000faa:	2210      	movs	r2, #16
 8000fac:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fba:	4811      	ldr	r0, [pc, #68]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000fbc:	f006 f8c0 	bl	8007140 <HAL_FDCAN_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000fc6:	f000 ffc5 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000fca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fce:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_FDCAN2_Init+0xf4>)
 8000fea:	f006 fa87 	bl	80074fc <HAL_FDCAN_ConfigFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8000ff4:	f000 ffae 	bl	8001f54 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2400028c 	.word	0x2400028c
 8001004:	4000a400 	.word	0x4000a400

08001008 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800100e:	4b3b      	ldr	r3, [pc, #236]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001010:	4a3b      	ldr	r2, [pc, #236]	@ (8001100 <MX_FDCAN3_Init+0xf8>)
 8001012:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001014:	4b39      	ldr	r3, [pc, #228]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800101a:	4b38      	ldr	r3, [pc, #224]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001020:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001022:	2200      	movs	r2, #0
 8001024:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001028:	2200      	movs	r2, #0
 800102a:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 800102e:	2200      	movs	r2, #0
 8001030:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001034:	2206      	movs	r2, #6
 8001036:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001038:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 800103a:	2201      	movs	r2, #1
 800103c:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001040:	2202      	movs	r2, #2
 8001042:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001046:	2205      	movs	r2, #5
 8001048:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800104a:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 800104c:	2201      	movs	r2, #1
 800104e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001052:	2201      	movs	r2, #1
 8001054:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001056:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001058:	2201      	movs	r2, #1
 800105a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 800105e:	2201      	movs	r2, #1
 8001060:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001062:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001064:	2200      	movs	r2, #0
 8001066:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 800106a:	2201      	movs	r2, #1
 800106c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 800106e:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001070:	2201      	movs	r2, #1
 8001072:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8001074:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001076:	2210      	movs	r2, #16
 8001078:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 800107c:	2204      	movs	r2, #4
 800107e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001082:	2210      	movs	r2, #16
 8001084:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001088:	2204      	movs	r2, #4
 800108a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 800108e:	2200      	movs	r2, #0
 8001090:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 8001094:	2204      	movs	r2, #4
 8001096:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 800109a:	2200      	movs	r2, #0
 800109c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 80010a6:	2210      	movs	r2, #16
 80010a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80010b6:	4811      	ldr	r0, [pc, #68]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 80010b8:	f006 f842 	bl	8007140 <HAL_FDCAN_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 80010c2:	f000 ff47 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80010c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ca:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80010d0:	2302      	movs	r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80010d4:	2301      	movs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_FDCAN3_Init+0xf4>)
 80010e6:	f006 fa09 	bl	80074fc <HAL_FDCAN_ConfigFilter>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 80010f0:	f000 ff30 	bl	8001f54 <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400032c 	.word	0x2400032c
 8001100:	4000d400 	.word	0x4000d400

08001104 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <MX_SDMMC1_SD_Init+0x34>)
 800110a:	4a0c      	ldr	r2, [pc, #48]	@ (800113c <MX_SDMMC1_SD_Init+0x38>)
 800110c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <MX_SDMMC1_SD_Init+0x34>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <MX_SDMMC1_SD_Init+0x34>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800111a:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <MX_SDMMC1_SD_Init+0x34>)
 800111c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001120:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <MX_SDMMC1_SD_Init+0x34>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <MX_SDMMC1_SD_Init+0x34>)
 800112a:	2202      	movs	r2, #2
 800112c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	240003cc 	.word	0x240003cc
 800113c:	52007000 	.word	0x52007000

08001140 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b09c      	sub	sp, #112	@ 0x70
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001160:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2234      	movs	r2, #52	@ 0x34
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f010 f84a 	bl	8011214 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001180:	4b49      	ldr	r3, [pc, #292]	@ (80012a8 <MX_TIM1_Init+0x168>)
 8001182:	4a4a      	ldr	r2, [pc, #296]	@ (80012ac <MX_TIM1_Init+0x16c>)
 8001184:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001186:	4b48      	ldr	r3, [pc, #288]	@ (80012a8 <MX_TIM1_Init+0x168>)
 8001188:	2200      	movs	r2, #0
 800118a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b46      	ldr	r3, [pc, #280]	@ (80012a8 <MX_TIM1_Init+0x168>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001192:	4b45      	ldr	r3, [pc, #276]	@ (80012a8 <MX_TIM1_Init+0x168>)
 8001194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001198:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b43      	ldr	r3, [pc, #268]	@ (80012a8 <MX_TIM1_Init+0x168>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a0:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <MX_TIM1_Init+0x168>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011a6:	4b40      	ldr	r3, [pc, #256]	@ (80012a8 <MX_TIM1_Init+0x168>)
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ac:	483e      	ldr	r0, [pc, #248]	@ (80012a8 <MX_TIM1_Init+0x168>)
 80011ae:	f00c fb4d 	bl	800d84c <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011b8:	f000 fecc 	bl	8001f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011c6:	4619      	mov	r1, r3
 80011c8:	4837      	ldr	r0, [pc, #220]	@ (80012a8 <MX_TIM1_Init+0x168>)
 80011ca:	f00c fe99 	bl	800df00 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011d4:	f000 febe 	bl	8001f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011d8:	4833      	ldr	r0, [pc, #204]	@ (80012a8 <MX_TIM1_Init+0x168>)
 80011da:	f00c fc15 	bl	800da08 <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011e4:	f000 feb6 	bl	8001f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f8:	4619      	mov	r1, r3
 80011fa:	482b      	ldr	r0, [pc, #172]	@ (80012a8 <MX_TIM1_Init+0x168>)
 80011fc:	f00d fbc6 	bl	800e98c <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001206:	f000 fea5 	bl	8001f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120a:	2360      	movs	r3, #96	@ 0x60
 800120c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001226:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800122a:	2200      	movs	r2, #0
 800122c:	4619      	mov	r1, r3
 800122e:	481e      	ldr	r0, [pc, #120]	@ (80012a8 <MX_TIM1_Init+0x168>)
 8001230:	f00c fd52 	bl	800dcd8 <HAL_TIM_PWM_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800123a:	f000 fe8b 	bl	8001f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001242:	2204      	movs	r2, #4
 8001244:	4619      	mov	r1, r3
 8001246:	4818      	ldr	r0, [pc, #96]	@ (80012a8 <MX_TIM1_Init+0x168>)
 8001248:	f00c fd46 	bl	800dcd8 <HAL_TIM_PWM_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001252:	f000 fe7f 	bl	8001f54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800126a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800126e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001278:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <MX_TIM1_Init+0x168>)
 800128c:	f00d fc1a 	bl	800eac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001296:	f000 fe5d 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800129a:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <MX_TIM1_Init+0x168>)
 800129c:	f001 f9d2 	bl	8002644 <HAL_TIM_MspPostInit>

}
 80012a0:	bf00      	nop
 80012a2:	3770      	adds	r7, #112	@ 0x70
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	24000448 	.word	0x24000448
 80012ac:	40010000 	.word	0x40010000

080012b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <MX_TIM16_Init+0x48>)
 80012b6:	4a11      	ldr	r2, [pc, #68]	@ (80012fc <MX_TIM16_Init+0x4c>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_TIM16_Init+0x48>)
 80012bc:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80012c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <MX_TIM16_Init+0x48>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <MX_TIM16_Init+0x48>)
 80012ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_TIM16_Init+0x48>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <MX_TIM16_Init+0x48>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_TIM16_Init+0x48>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_TIM16_Init+0x48>)
 80012e4:	f00c fab2 	bl	800d84c <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012ee:	f000 fe31 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	24000494 	.word	0x24000494
 80012fc:	40014400 	.word	0x40014400

08001300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001306:	4a23      	ldr	r2, [pc, #140]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001348:	4811      	ldr	r0, [pc, #68]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800134a:	f00d fc65 	bl	800ec18 <HAL_UART_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001354:	f000 fdfe 	bl	8001f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	480d      	ldr	r0, [pc, #52]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800135c:	f00e fdff 	bl	800ff5e <HAL_UARTEx_SetTxFifoThreshold>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001366:	f000 fdf5 	bl	8001f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4808      	ldr	r0, [pc, #32]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800136e:	f00e fe34 	bl	800ffda <HAL_UARTEx_SetRxFifoThreshold>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001378:	f000 fdec 	bl	8001f54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800137e:	f00e fdb5 	bl	800feec <HAL_UARTEx_DisableFifoMode>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001388:	f000 fde4 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	240004e0 	.word	0x240004e0
 8001394:	40011000 	.word	0x40011000

08001398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 800139e:	4a23      	ldr	r2, [pc, #140]	@ (800142c <MX_USART2_UART_Init+0x94>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013da:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e0:	4811      	ldr	r0, [pc, #68]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013e2:	f00d fc19 	bl	800ec18 <HAL_UART_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013ec:	f000 fdb2 	bl	8001f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 80013f4:	f00e fdb3 	bl	800ff5e <HAL_UARTEx_SetTxFifoThreshold>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013fe:	f000 fda9 	bl	8001f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	4808      	ldr	r0, [pc, #32]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 8001406:	f00e fde8 	bl	800ffda <HAL_UARTEx_SetRxFifoThreshold>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001410:	f000 fda0 	bl	8001f54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_USART2_UART_Init+0x90>)
 8001416:	f00e fd69 	bl	800feec <HAL_UARTEx_DisableFifoMode>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001420:	f000 fd98 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	24000574 	.word	0x24000574
 800142c:	40004400 	.word	0x40004400

08001430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <MX_DMA_Init+0x3c>)
 8001438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800143c:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <MX_DMA_Init+0x3c>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_DMA_Init+0x3c>)
 8001448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	200b      	movs	r0, #11
 800145a:	f003 fd68 	bl	8004f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800145e:	200b      	movs	r0, #11
 8001460:	f003 fd7f 	bl	8004f62 <HAL_NVIC_EnableIRQ>

}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	58024400 	.word	0x58024400

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	@ 0x38
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	4b5e      	ldr	r3, [pc, #376]	@ (8001600 <MX_GPIO_Init+0x190>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148c:	4a5c      	ldr	r2, [pc, #368]	@ (8001600 <MX_GPIO_Init+0x190>)
 800148e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001496:	4b5a      	ldr	r3, [pc, #360]	@ (8001600 <MX_GPIO_Init+0x190>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b56      	ldr	r3, [pc, #344]	@ (8001600 <MX_GPIO_Init+0x190>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014aa:	4a55      	ldr	r2, [pc, #340]	@ (8001600 <MX_GPIO_Init+0x190>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b4:	4b52      	ldr	r3, [pc, #328]	@ (8001600 <MX_GPIO_Init+0x190>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001600 <MX_GPIO_Init+0x190>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001600 <MX_GPIO_Init+0x190>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001600 <MX_GPIO_Init+0x190>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b47      	ldr	r3, [pc, #284]	@ (8001600 <MX_GPIO_Init+0x190>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	4a46      	ldr	r2, [pc, #280]	@ (8001600 <MX_GPIO_Init+0x190>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f0:	4b43      	ldr	r3, [pc, #268]	@ (8001600 <MX_GPIO_Init+0x190>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	4b40      	ldr	r3, [pc, #256]	@ (8001600 <MX_GPIO_Init+0x190>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001504:	4a3e      	ldr	r2, [pc, #248]	@ (8001600 <MX_GPIO_Init+0x190>)
 8001506:	f043 0320 	orr.w	r3, r3, #32
 800150a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150e:	4b3c      	ldr	r3, [pc, #240]	@ (8001600 <MX_GPIO_Init+0x190>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151c:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <MX_GPIO_Init+0x190>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001522:	4a37      	ldr	r2, [pc, #220]	@ (8001600 <MX_GPIO_Init+0x190>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152c:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <MX_GPIO_Init+0x190>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <MX_GPIO_Init+0x190>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001540:	4a2f      	ldr	r2, [pc, #188]	@ (8001600 <MX_GPIO_Init+0x190>)
 8001542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154a:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <MX_GPIO_Init+0x190>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <MX_GPIO_Init+0x190>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155e:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <MX_GPIO_Init+0x190>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001568:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <MX_GPIO_Init+0x190>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2103      	movs	r1, #3
 800157a:	4822      	ldr	r0, [pc, #136]	@ (8001604 <MX_GPIO_Init+0x194>)
 800157c:	f007 f962 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001586:	4820      	ldr	r0, [pc, #128]	@ (8001608 <MX_GPIO_Init+0x198>)
 8001588:	f007 f95c 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 800158c:	2303      	movs	r3, #3
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4818      	ldr	r0, [pc, #96]	@ (8001604 <MX_GPIO_Init+0x194>)
 80015a4:	f006 ff8e 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 80015a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	4813      	ldr	r0, [pc, #76]	@ (800160c <MX_GPIO_Init+0x19c>)
 80015be:	f006 ff81 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80015c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	480b      	ldr	r0, [pc, #44]	@ (8001608 <MX_GPIO_Init+0x198>)
 80015dc:	f006 ff72 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015e8:	2302      	movs	r3, #2
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4807      	ldr	r0, [pc, #28]	@ (8001610 <MX_GPIO_Init+0x1a0>)
 80015f4:	f006 ff66 	bl	80084c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	@ 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	58024400 	.word	0x58024400
 8001604:	58020800 	.word	0x58020800
 8001608:	58021000 	.word	0x58021000
 800160c:	58021400 	.word	0x58021400
 8001610:	58021800 	.word	0x58021800

08001614 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4909      	ldr	r1, [pc, #36]	@ (8001644 <print+0x30>)
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <print+0x34>)
 8001622:	f00f fdd5 	bl	80111d0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001626:	4808      	ldr	r0, [pc, #32]	@ (8001648 <print+0x34>)
 8001628:	f7fe fe72 	bl	8000310 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	4904      	ldr	r1, [pc, #16]	@ (8001648 <print+0x34>)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <print+0x38>)
 8001638:	f00d fb3e 	bl	800ecb8 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	08011d30 	.word	0x08011d30
 8001648:	2400072c 	.word	0x2400072c
 800164c:	24000574 	.word	0x24000574

08001650 <printValue>:

void printValue(int value)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4909      	ldr	r1, [pc, #36]	@ (8001680 <printValue+0x30>)
 800165c:	4809      	ldr	r0, [pc, #36]	@ (8001684 <printValue+0x34>)
 800165e:	f00f fdb7 	bl	80111d0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001662:	4808      	ldr	r0, [pc, #32]	@ (8001684 <printValue+0x34>)
 8001664:	f7fe fe54 	bl	8000310 <strlen>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	4904      	ldr	r1, [pc, #16]	@ (8001684 <printValue+0x34>)
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <printValue+0x38>)
 8001674:	f00d fb20 	bl	800ecb8 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	08011d38 	.word	0x08011d38
 8001684:	2400072c 	.word	0x2400072c
 8001688:	24000574 	.word	0x24000574

0800168c <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80cc 	beq.w	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a67      	ldr	r2, [pc, #412]	@ (8001858 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d164      	bne.n	800178a <HAL_FDCAN_RxFifo0Callback+0xea>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80016c0:	4b66      	ldr	r3, [pc, #408]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016c2:	4a67      	ldr	r2, [pc, #412]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016c4:	2140      	movs	r1, #64	@ 0x40
 80016c6:	4867      	ldr	r0, [pc, #412]	@ (8001864 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016c8:	f006 f814 	bl	80076f4 <HAL_FDCAN_GetRxMessage>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 80bd 	bne.w	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 80016d4:	4b62      	ldr	r3, [pc, #392]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f240 4266 	movw	r2, #1126	@ 0x466
 80016dc:	4293      	cmp	r3, r2
 80016de:	d03c      	beq.n	800175a <HAL_FDCAN_RxFifo0Callback+0xba>
 80016e0:	f240 4266 	movw	r2, #1126	@ 0x466
 80016e4:	4293      	cmp	r3, r2
 80016e6:	f200 80b2 	bhi.w	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
 80016ea:	f240 4261 	movw	r2, #1121	@ 0x461
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d004      	beq.n	80016fc <HAL_FDCAN_RxFifo0Callback+0x5c>
 80016f2:	f240 4263 	movw	r2, #1123	@ 0x463
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d015      	beq.n	8001726 <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 80016fa:	e0a8      	b.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
					state = RxData_Inv[4] & 0xF;
 80016fc:	4b57      	ldr	r3, [pc, #348]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016fe:	791b      	ldrb	r3, [r3, #4]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b58      	ldr	r3, [pc, #352]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001708:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 800170a:	4b57      	ldr	r3, [pc, #348]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b0a      	cmp	r3, #10
 8001710:	d004      	beq.n	800171c <HAL_FDCAN_RxFifo0Callback+0x7c>
 8001712:	4b55      	ldr	r3, [pc, #340]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b0b      	cmp	r3, #11
 8001718:	f040 8092 	bne.w	8001840 <HAL_FDCAN_RxFifo0Callback+0x1a0>
						error = RxData_Inv[2];
 800171c:	4b4f      	ldr	r3, [pc, #316]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800171e:	789a      	ldrb	r2, [r3, #2]
 8001720:	4b52      	ldr	r3, [pc, #328]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001722:	701a      	strb	r2, [r3, #0]
					break;
 8001724:	e08c      	b.n	8001840 <HAL_FDCAN_RxFifo0Callback+0x1a0>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 8001726:	4b4d      	ldr	r3, [pc, #308]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001728:	79db      	ldrb	r3, [r3, #7]
 800172a:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800172e:	4b4b      	ldr	r3, [pc, #300]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	4313      	orrs	r3, r2
 8001736:	4a49      	ldr	r2, [pc, #292]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001738:	7952      	ldrb	r2, [r2, #5]
 800173a:	4313      	orrs	r3, r2
 800173c:	4a4c      	ldr	r2, [pc, #304]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800173e:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001740:	4b4b      	ldr	r3, [pc, #300]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d07b      	beq.n	8001844 <HAL_FDCAN_RxFifo0Callback+0x1a4>
						e_machine_rpm |= 0xFFF0000;
 800174c:	4b48      	ldr	r3, [pc, #288]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b48      	ldr	r3, [pc, #288]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001752:	4313      	orrs	r3, r2
 8001754:	4a46      	ldr	r2, [pc, #280]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001756:	6013      	str	r3, [r2, #0]
					break;
 8001758:	e074      	b.n	8001844 <HAL_FDCAN_RxFifo0Callback+0x1a4>
					if (RxHeader_Inv.DataLength == 6)
 800175a:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b06      	cmp	r3, #6
 8001760:	d172      	bne.n	8001848 <HAL_FDCAN_RxFifo0Callback+0x1a8>
						if (config_inv_lectura_v == 0)
 8001762:	4b45      	ldr	r3, [pc, #276]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_FDCAN_RxFifo0Callback+0xd0>
							config_inv_lectura_v = 1;
 800176a:	4b43      	ldr	r3, [pc, #268]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
						if (config_inv_lectura_v == 1)
 8001770:	4b41      	ldr	r3, [pc, #260]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d167      	bne.n	8001848 <HAL_FDCAN_RxFifo0Callback+0x1a8>
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 8001778:	4b38      	ldr	r3, [pc, #224]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800177a:	78db      	ldrb	r3, [r3, #3]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	4a37      	ldr	r2, [pc, #220]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001780:	7892      	ldrb	r2, [r2, #2]
 8001782:	4313      	orrs	r3, r2
 8001784:	4a3d      	ldr	r2, [pc, #244]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001786:	6013      	str	r3, [r2, #0]
					break;
 8001788:	e05e      	b.n	8001848 <HAL_FDCAN_RxFifo0Callback+0x1a8>
		else if (hfdcan->Instance == FDCAN2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a3c      	ldr	r2, [pc, #240]	@ (8001880 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d126      	bne.n	80017e2 <HAL_FDCAN_RxFifo0Callback+0x142>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 8001794:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001796:	4a3c      	ldr	r2, [pc, #240]	@ (8001888 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001798:	2140      	movs	r1, #64	@ 0x40
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f005 ffaa 	bl	80076f4 <HAL_FDCAN_GetRxMessage>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d153      	bne.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Acu.Identifier)
 80017a6:	4b38      	ldr	r3, [pc, #224]	@ (8001888 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	d003      	beq.n	80017b6 <HAL_FDCAN_RxFifo0Callback+0x116>
 80017ae:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017b2:	d008      	beq.n	80017c6 <HAL_FDCAN_RxFifo0Callback+0x126>
}
 80017b4:	e04b      	b.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
					if (RxData_Acu[0] == 0)
 80017b6:	4b33      	ldr	r3, [pc, #204]	@ (8001884 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d146      	bne.n	800184c <HAL_FDCAN_RxFifo0Callback+0x1ac>
						precarga_inv = 1;
 80017be:	4b33      	ldr	r3, [pc, #204]	@ (800188c <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
					break;
 80017c4:	e042      	b.n	800184c <HAL_FDCAN_RxFifo0Callback+0x1ac>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 80017c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001884 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017ce:	7852      	ldrb	r2, [r2, #1]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017da:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
					break;
 80017e0:	e035      	b.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
		else if (hfdcan->Instance == FDCAN3)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d130      	bne.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 80017ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80017ee:	4a2b      	ldr	r2, [pc, #172]	@ (800189c <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80017f0:	2140      	movs	r1, #64	@ 0x40
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f005 ff7e 	bl	80076f4 <HAL_FDCAN_GetRxMessage>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d127      	bne.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Dash.Identifier)
 80017fe:	4b27      	ldr	r3, [pc, #156]	@ (800189c <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f240 1233 	movw	r2, #307	@ 0x133
 8001806:	4293      	cmp	r3, r2
 8001808:	d121      	bne.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 800180a:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b21b      	sxth	r3, r3
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b21b      	sxth	r3, r3
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001822:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001826:	789b      	ldrb	r3, [r3, #2]
 8001828:	b21b      	sxth	r3, r3
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	b21a      	sxth	r2, r3
 800182e:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001830:	78db      	ldrb	r3, [r3, #3]
 8001832:	b21b      	sxth	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b21b      	sxth	r3, r3
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <HAL_FDCAN_RxFifo0Callback+0x204>)
 800183c:	801a      	strh	r2, [r3, #0]
}
 800183e:	e006      	b.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001840:	bf00      	nop
 8001842:	e004      	b.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001844:	bf00      	nop
 8001846:	e002      	b.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001848:	bf00      	nop
 800184a:	e000      	b.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 800184c:	bf00      	nop
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	4000a000 	.word	0x4000a000
 800185c:	240006d0 	.word	0x240006d0
 8001860:	2400062c 	.word	0x2400062c
 8001864:	240001ec 	.word	0x240001ec
 8001868:	2400071a 	.word	0x2400071a
 800186c:	2400088a 	.word	0x2400088a
 8001870:	240006f8 	.word	0x240006f8
 8001874:	0fff0000 	.word	0x0fff0000
 8001878:	2400008c 	.word	0x2400008c
 800187c:	240006f4 	.word	0x240006f4
 8001880:	4000a400 	.word	0x4000a400
 8001884:	240006e0 	.word	0x240006e0
 8001888:	24000678 	.word	0x24000678
 800188c:	24000088 	.word	0x24000088
 8001890:	24000008 	.word	0x24000008
 8001894:	4000d400 	.word	0x4000d400
 8001898:	240006e8 	.word	0x240006e8
 800189c:	240006a0 	.word	0x240006a0
 80018a0:	24000702 	.word	0x24000702
 80018a4:	24000704 	.word	0x24000704

080018a8 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a03      	ldr	r2, [pc, #12]	@ (80018c4 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 80018b6:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	2400028c 	.word	0x2400028c

080018c8 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 80018ce:	4b9c      	ldr	r3, [pc, #624]	@ (8001b40 <setTorque+0x278>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018de:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 80018e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018ea:	ee17 3a90 	vmov	r3, s15
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b94      	ldr	r3, [pc, #592]	@ (8001b44 <setTorque+0x27c>)
 80018f2:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 80018f4:	4b93      	ldr	r3, [pc, #588]	@ (8001b44 <setTorque+0x27c>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	2b64      	cmp	r3, #100	@ 0x64
 80018fa:	d902      	bls.n	8001902 <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 80018fc:	4b91      	ldr	r3, [pc, #580]	@ (8001b44 <setTorque+0x27c>)
 80018fe:	2264      	movs	r2, #100	@ 0x64
 8001900:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 8001902:	4b91      	ldr	r3, [pc, #580]	@ (8001b48 <setTorque+0x280>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001912:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 8001b18 <setTorque+0x250>
 8001916:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800191a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800191e:	ee17 3a90 	vmov	r3, s15
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b89      	ldr	r3, [pc, #548]	@ (8001b4c <setTorque+0x284>)
 8001926:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001928:	4b88      	ldr	r3, [pc, #544]	@ (8001b4c <setTorque+0x284>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	2b64      	cmp	r3, #100	@ 0x64
 800192e:	d902      	bls.n	8001936 <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001930:	4b86      	ldr	r3, [pc, #536]	@ (8001b4c <setTorque+0x284>)
 8001932:	2264      	movs	r2, #100	@ 0x64
 8001934:	801a      	strh	r2, [r3, #0]
	}

#if 1
	print("Sensor % 1: ");
 8001936:	4886      	ldr	r0, [pc, #536]	@ (8001b50 <setTorque+0x288>)
 8001938:	f7ff fe6c 	bl	8001614 <print>
	printValue(s1_aceleracion_aux);
 800193c:	4b81      	ldr	r3, [pc, #516]	@ (8001b44 <setTorque+0x27c>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fe85 	bl	8001650 <printValue>
	print("");
 8001946:	4883      	ldr	r0, [pc, #524]	@ (8001b54 <setTorque+0x28c>)
 8001948:	f7ff fe64 	bl	8001614 <print>
	print("Sensor % 2: ");
 800194c:	4882      	ldr	r0, [pc, #520]	@ (8001b58 <setTorque+0x290>)
 800194e:	f7ff fe61 	bl	8001614 <print>
	printValue(s2_aceleracion_aux);
 8001952:	4b7e      	ldr	r3, [pc, #504]	@ (8001b4c <setTorque+0x284>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fe7a 	bl	8001650 <printValue>
	print("");
 800195c:	487d      	ldr	r0, [pc, #500]	@ (8001b54 <setTorque+0x28c>)
 800195e:	f7ff fe59 	bl	8001614 <print>
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 8001962:	4b78      	ldr	r3, [pc, #480]	@ (8001b44 <setTorque+0x27c>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2b08      	cmp	r3, #8
 8001968:	d911      	bls.n	800198e <setTorque+0xc6>
 800196a:	4b78      	ldr	r3, [pc, #480]	@ (8001b4c <setTorque+0x284>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	2b08      	cmp	r3, #8
 8001970:	d90d      	bls.n	800198e <setTorque+0xc6>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 8001972:	4b74      	ldr	r3, [pc, #464]	@ (8001b44 <setTorque+0x27c>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b74      	ldr	r3, [pc, #464]	@ (8001b4c <setTorque+0x284>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	4413      	add	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	da00      	bge.n	8001984 <setTorque+0xbc>
 8001982:	3301      	adds	r3, #1
 8001984:	105b      	asrs	r3, r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b74      	ldr	r3, [pc, #464]	@ (8001b5c <setTorque+0x294>)
 800198a:	801a      	strh	r2, [r3, #0]
 800198c:	e002      	b.n	8001994 <setTorque+0xcc>
	}
	else
	{
		torque_total = 0;
 800198e:	4b73      	ldr	r3, [pc, #460]	@ (8001b5c <setTorque+0x294>)
 8001990:	2200      	movs	r2, #0
 8001992:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 8001994:	4b71      	ldr	r3, [pc, #452]	@ (8001b5c <setTorque+0x294>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d803      	bhi.n	80019a4 <setTorque+0xdc>
	{
		torque_total = 0;
 800199c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b5c <setTorque+0x294>)
 800199e:	2200      	movs	r2, #0
 80019a0:	801a      	strh	r2, [r3, #0]
 80019a2:	e006      	b.n	80019b2 <setTorque+0xea>
	}
	else if (torque_total > 90)
 80019a4:	4b6d      	ldr	r3, [pc, #436]	@ (8001b5c <setTorque+0x294>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	2b5a      	cmp	r3, #90	@ 0x5a
 80019aa:	d902      	bls.n	80019b2 <setTorque+0xea>
	{
		torque_total = 100;
 80019ac:	4b6b      	ldr	r3, [pc, #428]	@ (8001b5c <setTorque+0x294>)
 80019ae:	2264      	movs	r2, #100	@ 0x64
 80019b0:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 80019b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b60 <setTorque+0x298>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019ba:	4293      	cmp	r3, r2
 80019bc:	dd0a      	ble.n	80019d4 <setTorque+0x10c>
 80019be:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <setTorque+0x294>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	2b19      	cmp	r3, #25
 80019c4:	d906      	bls.n	80019d4 <setTorque+0x10c>
	{
		print("EV_2_3");
 80019c6:	4867      	ldr	r0, [pc, #412]	@ (8001b64 <setTorque+0x29c>)
 80019c8:	f7ff fe24 	bl	8001614 <print>
		flag_EV_2_3 = 1;
 80019cc:	4b66      	ldr	r3, [pc, #408]	@ (8001b68 <setTorque+0x2a0>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	e00c      	b.n	80019ee <setTorque+0x126>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 80019d4:	4b62      	ldr	r3, [pc, #392]	@ (8001b60 <setTorque+0x298>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019dc:	4293      	cmp	r3, r2
 80019de:	dc06      	bgt.n	80019ee <setTorque+0x126>
 80019e0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b5c <setTorque+0x294>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d802      	bhi.n	80019ee <setTorque+0x126>
	{
		flag_EV_2_3 = 0;
 80019e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b68 <setTorque+0x2a0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 80019ee:	4b55      	ldr	r3, [pc, #340]	@ (8001b44 <setTorque+0x27c>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b55      	ldr	r3, [pc, #340]	@ (8001b4c <setTorque+0x284>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bfb8      	it	lt
 80019fe:	425b      	neglt	r3, r3
 8001a00:	2b0a      	cmp	r3, #10
 8001a02:	dd06      	ble.n	8001a12 <setTorque+0x14a>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001a04:	4859      	ldr	r0, [pc, #356]	@ (8001b6c <setTorque+0x2a4>)
 8001a06:	f7ff fe05 	bl	8001614 <print>
		flag_T11_8_9 = 1;
 8001a0a:	4b59      	ldr	r3, [pc, #356]	@ (8001b70 <setTorque+0x2a8>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e007      	b.n	8001a22 <setTorque+0x15a>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001a12:	f001 f8e3 	bl	8002bdc <HAL_GetTick>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a56      	ldr	r2, [pc, #344]	@ (8001b74 <setTorque+0x2ac>)
 8001a1a:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001a1c:	4b54      	ldr	r3, [pc, #336]	@ (8001b70 <setTorque+0x2a8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001a22:	4b51      	ldr	r3, [pc, #324]	@ (8001b68 <setTorque+0x2a0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <setTorque+0x16a>
 8001a2a:	4b51      	ldr	r3, [pc, #324]	@ (8001b70 <setTorque+0x2a8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <setTorque+0x170>
	{
		torque_total = 0;
 8001a32:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <setTorque+0x294>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001a38:	4b4f      	ldr	r3, [pc, #316]	@ (8001b78 <setTorque+0x2b0>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001b7c <setTorque+0x2b4>
 8001a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	d53a      	bpl.n	8001ac2 <setTorque+0x1fa>
	{
		if (v_celda_min > 2800)
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <setTorque+0x2b0>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001b80 <setTorque+0x2b8>
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	dd1f      	ble.n	8001aa0 <setTorque+0x1d8>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001a60:	4b3e      	ldr	r3, [pc, #248]	@ (8001b5c <setTorque+0x294>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a6c:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <setTorque+0x2b0>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a76:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b20 <setTorque+0x258>
 8001a7a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a7e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b28 <setTorque+0x260>
 8001a82:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001a86:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a8a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001b30 <setTorque+0x268>
 8001a8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a92:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a96:	ee17 2a90 	vmov	r2, s15
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b84 <setTorque+0x2bc>)
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e015      	b.n	8001acc <setTorque+0x204>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <setTorque+0x294>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001aac:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8001b38 <setTorque+0x270>
 8001ab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ab4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ab8:	ee17 2a90 	vmov	r2, s15
 8001abc:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <setTorque+0x2bc>)
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e004      	b.n	8001acc <setTorque+0x204>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <setTorque+0x294>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <setTorque+0x2bc>)
 8001aca:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001acc:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <setTorque+0x294>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	2b09      	cmp	r3, #9
 8001ad2:	d912      	bls.n	8001afa <setTorque+0x232>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001ad4:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <setTorque+0x294>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4613      	mov	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	4a29      	ldr	r2, [pc, #164]	@ (8001b88 <setTorque+0x2c0>)
 8001ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae8:	441a      	add	r2, r3
 8001aea:	1192      	asrs	r2, r2, #6
 8001aec:	17db      	asrs	r3, r3, #31
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b1a      	subs	r3, #26
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <setTorque+0x294>)
 8001af8:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001afa:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <setTorque+0x294>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	3301      	adds	r3, #1
 8001b06:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001b08:	88bb      	ldrh	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	33333334 	.word	0x33333334
 8001b1c:	401a3333 	.word	0x401a3333
 8001b20:	a1cac083 	.word	0xa1cac083
 8001b24:	3ff5b645 	.word	0x3ff5b645
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	40ad4c00 	.word	0x40ad4c00
 8001b30:	00000000 	.word	0x00000000
 8001b34:	408f4000 	.word	0x408f4000
 8001b38:	9999999a 	.word	0x9999999a
 8001b3c:	3fa99999 	.word	0x3fa99999
 8001b40:	24000702 	.word	0x24000702
 8001b44:	24000706 	.word	0x24000706
 8001b48:	24000704 	.word	0x24000704
 8001b4c:	24000708 	.word	0x24000708
 8001b50:	08011d4c 	.word	0x08011d4c
 8001b54:	08011d5c 	.word	0x08011d5c
 8001b58:	08011d60 	.word	0x08011d60
 8001b5c:	24000710 	.word	0x24000710
 8001b60:	2400070c 	.word	0x2400070c
 8001b64:	08011d70 	.word	0x08011d70
 8001b68:	24000720 	.word	0x24000720
 8001b6c:	08011d78 	.word	0x08011d78
 8001b70:	24000724 	.word	0x24000724
 8001b74:	2400071c 	.word	0x2400071c
 8001b78:	24000008 	.word	0x24000008
 8001b7c:	455ac000 	.word	0x455ac000
 8001b80:	452f0000 	.word	0x452f0000
 8001b84:	24000714 	.word	0x24000714
 8001b88:	b60b60b7 	.word	0xb60b60b7

08001b8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4aa3      	ldr	r2, [pc, #652]	@ (8001e24 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	f040 81c5 	bne.w	8001f28 <HAL_TIM_PeriodElapsedCallback+0x39c>
	{
		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8001b9e:	4ba2      	ldr	r3, [pc, #648]	@ (8001e28 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4aa2      	ldr	r2, [pc, #648]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ba4:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8001ba6:	4ba1      	ldr	r3, [pc, #644]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ba8:	2202      	movs	r2, #2
 8001baa:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001bac:	4b9f      	ldr	r3, [pc, #636]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb2:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001bb4:	4b9d      	ldr	r3, [pc, #628]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001bba:	4b9c      	ldr	r3, [pc, #624]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8001bc0:	4b9b      	ldr	r3, [pc, #620]	@ (8001e30 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b9b      	ldr	r3, [pc, #620]	@ (8001e34 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001bc8:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8001bca:	4b99      	ldr	r3, [pc, #612]	@ (8001e30 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	121b      	asrs	r3, r3, #8
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b98      	ldr	r3, [pc, #608]	@ (8001e34 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001bd4:	705a      	strb	r2, [r3, #1]
		printValue(inv_dc_bus_voltage);
 8001bd6:	4b96      	ldr	r3, [pc, #600]	@ (8001e30 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fd38 	bl	8001650 <printValue>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001be0:	4a94      	ldr	r2, [pc, #592]	@ (8001e34 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001be2:	4992      	ldr	r1, [pc, #584]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001be4:	4894      	ldr	r0, [pc, #592]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001be6:	f005 fd2a 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8001bea:	2180      	movs	r1, #128	@ 0x80
 8001bec:	4893      	ldr	r0, [pc, #588]	@ (8001e3c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001bee:	f006 fe11 	bl	8008814 <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b92      	ldr	r3, [pc, #584]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001bf8:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8001bfa:	4b91      	ldr	r3, [pc, #580]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d11b      	bne.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0xae>
			TxHeader_Acu.Identifier = 0x600;
 8001c02:	4b8a      	ldr	r3, [pc, #552]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c04:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001c08:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8001c0a:	4b88      	ldr	r3, [pc, #544]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001c10:	4b86      	ldr	r3, [pc, #536]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c16:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001c18:	4b84      	ldr	r3, [pc, #528]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001c1e:	4b83      	ldr	r3, [pc, #524]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = 0x0;
 8001c24:	4b83      	ldr	r3, [pc, #524]	@ (8001e34 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
			TxData_Acu[1] = 0x0;
 8001c2a:	4b82      	ldr	r3, [pc, #520]	@ (8001e34 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	705a      	strb	r2, [r3, #1]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001c30:	4a80      	ldr	r2, [pc, #512]	@ (8001e34 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c32:	497e      	ldr	r1, [pc, #504]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c34:	4880      	ldr	r0, [pc, #512]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c36:	f005 fd02 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 8001c3a:	4b82      	ldr	r3, [pc, #520]	@ (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0xbe>
 8001c42:	4b80      	ldr	r3, [pc, #512]	@ (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d11b      	bne.n	8001c82 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d117      	bne.n	8001c82 <HAL_TIM_PeriodElapsedCallback+0xf6>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c52:	4b7e      	ldr	r3, [pc, #504]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7e      	ldr	r2, [pc, #504]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c58:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c5a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c60:	4b7b      	ldr	r3, [pc, #492]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c66:	4b7b      	ldr	r3, [pc, #492]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c6c:	4b79      	ldr	r3, [pc, #484]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001c72:	4b78      	ldr	r3, [pc, #480]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c74:	2206      	movs	r2, #6
 8001c76:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c78:	4a76      	ldr	r2, [pc, #472]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c7a:	4975      	ldr	r1, [pc, #468]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c7c:	4876      	ldr	r0, [pc, #472]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001c7e:	f005 fcde 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		if(flag_r2d == 1){
 8001c82:	4b71      	ldr	r3, [pc, #452]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	f040 814e 	bne.w	8001f28 <HAL_TIM_PeriodElapsedCallback+0x39c>
			switch (state)
 8001c8c:	4b6d      	ldr	r3, [pc, #436]	@ (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b0d      	cmp	r3, #13
 8001c92:	f200 8149 	bhi.w	8001f28 <HAL_TIM_PeriodElapsedCallback+0x39c>
 8001c96:	a201      	add	r2, pc, #4	@ (adr r2, 8001c9c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9c:	08001cd5 	.word	0x08001cd5
 8001ca0:	08001f29 	.word	0x08001f29
 8001ca4:	08001f29 	.word	0x08001f29
 8001ca8:	08001d05 	.word	0x08001d05
 8001cac:	08001d3b 	.word	0x08001d3b
 8001cb0:	08001f29 	.word	0x08001f29
 8001cb4:	08001dc3 	.word	0x08001dc3
 8001cb8:	08001f29 	.word	0x08001f29
 8001cbc:	08001f29 	.word	0x08001f29
 8001cc0:	08001f29 	.word	0x08001f29
 8001cc4:	08001e75 	.word	0x08001e75
 8001cc8:	08001eb5 	.word	0x08001eb5
 8001ccc:	08001f29 	.word	0x08001f29
 8001cd0:	08001ef1 	.word	0x08001ef1
			{
			case 0:
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001cd4:	4b5d      	ldr	r3, [pc, #372]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001cda:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001cde:	2203      	movs	r2, #3
 8001ce0:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001cee:	4b59      	ldr	r3, [pc, #356]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 8001cf4:	4b57      	ldr	r3, [pc, #348]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001cfa:	4a56      	ldr	r2, [pc, #344]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cfc:	4954      	ldr	r1, [pc, #336]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001cfe:	4856      	ldr	r0, [pc, #344]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001d00:	f005 fc9d 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>

			case 3:
	#if DEBUG
				//print("state: standby");
	#endif
				flag_react = 0;
 8001d04:	4b55      	ldr	r3, [pc, #340]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d0a:	4b50      	ldr	r3, [pc, #320]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a50      	ldr	r2, [pc, #320]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d10:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001d12:	4b4f      	ldr	r3, [pc, #316]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d14:	2203      	movs	r2, #3
 8001d16:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d18:	4b4d      	ldr	r3, [pc, #308]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001d24:	4b4b      	ldr	r3, [pc, #300]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 8001d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d30:	4a48      	ldr	r2, [pc, #288]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d32:	4947      	ldr	r1, [pc, #284]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d34:	4848      	ldr	r0, [pc, #288]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001d36:	f005 fc82 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
				//}

			case 4:

	#if DEBUG
				print("state: ready");
 8001d3a:	4849      	ldr	r0, [pc, #292]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001d3c:	f7ff fc6a 	bl	8001614 <print>
	#endif
				if (flag_r2d == 1){
 8001d40:	4b41      	ldr	r3, [pc, #260]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d120      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x1fe>
					TxHeader_Inv.Identifier = 0x362;
 8001d48:	4b41      	ldr	r3, [pc, #260]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d4a:	f240 3262 	movw	r2, #866	@ 0x362
 8001d4e:	601a      	str	r2, [r3, #0]
					TxHeader_Inv.DataLength = 4;
 8001d50:	4b3f      	ldr	r3, [pc, #252]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d52:	2204      	movs	r2, #4
 8001d54:	60da      	str	r2, [r3, #12]

					real_torque = 0;
 8001d56:	4b43      	ldr	r3, [pc, #268]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	801a      	strh	r2, [r3, #0]

					TxData_Inv[0] = 0x0;
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001d62:	4b3c      	ldr	r3, [pc, #240]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = real_torque;
 8001d68:	4b3e      	ldr	r3, [pc, #248]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b39      	ldr	r3, [pc, #228]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d70:	709a      	strb	r2, [r3, #2]
					TxData_Inv[3] = 0x0;
 8001d72:	4b38      	ldr	r3, [pc, #224]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	70da      	strb	r2, [r3, #3]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d78:	4a36      	ldr	r2, [pc, #216]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d7a:	4935      	ldr	r1, [pc, #212]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d7c:	4836      	ldr	r0, [pc, #216]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001d7e:	f005 fc5e 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
					flag_react = 0; // Reactivado
 8001d82:	4b36      	ldr	r3, [pc, #216]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
					TxData_Inv[2] = 0x4;
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
				}

				break;
 8001d88:	e0ce      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x39c>
					flag_react = 0;
 8001d8a:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d90:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2e      	ldr	r2, [pc, #184]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d96:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]
					TxData_Inv[0] = 0x0;
 8001da4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001daa:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x4;
 8001db0:	4b28      	ldr	r3, [pc, #160]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001db2:	2204      	movs	r2, #4
 8001db4:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001db6:	4a27      	ldr	r2, [pc, #156]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001db8:	4925      	ldr	r1, [pc, #148]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dba:	4827      	ldr	r0, [pc, #156]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001dbc:	f005 fc3f 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
				break;
 8001dc0:	e0b2      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x39c>
			case 6:
				print("state: torque");
 8001dc2:	4829      	ldr	r0, [pc, #164]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001dc4:	f7ff fc26 	bl	8001614 <print>

				// Request TORQUE inversor

				// flag_react = 1;

				real_torque = setTorque();
 8001dc8:	f7ff fd7e 	bl	80018c8 <setTorque>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001dd2:	801a      	strh	r2, [r3, #0]

				TxHeader_Inv.Identifier = 0x362;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dd6:	f240 3262 	movw	r2, #866	@ 0x362
 8001dda:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dde:	2204      	movs	r2, #4
 8001de0:	60da      	str	r2, [r3, #12]

				// real_torque = 0;
				byte_torque_1 = real_torque & 0xFF;
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001dea:	701a      	strb	r2, [r3, #0]
				byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001df8:	701a      	strb	r2, [r3, #0]
				TxData_Inv[0] = 0x00;
 8001dfa:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x00;
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	705a      	strb	r2, [r3, #1]
					if(frena > 500){
						acelera = 1;
						frena = 0;
					}
				}*/
				TxData_Inv[2] = byte_torque_1;
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e0c:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = byte_torque_2;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001e10:	781a      	ldrb	r2, [r3, #0]
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e14:	70da      	strb	r2, [r3, #3]
				// TxData_Inv[2] = 0xFE;
				// TxData_Inv[3] = 0xFF;
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001e16:	4a0f      	ldr	r2, [pc, #60]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e18:	490d      	ldr	r1, [pc, #52]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e1a:	480f      	ldr	r0, [pc, #60]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001e1c:	f005 fc0f 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
				//CAN_bus_off_check_reset(&hfdcan1);

				break;
 8001e20:	e082      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x39c>
 8001e22:	bf00      	nop
 8001e24:	24000494 	.word	0x24000494
 8001e28:	24000004 	.word	0x24000004
 8001e2c:	24000654 	.word	0x24000654
 8001e30:	240006f4 	.word	0x240006f4
 8001e34:	240006d8 	.word	0x240006d8
 8001e38:	2400028c 	.word	0x2400028c
 8001e3c:	58021800 	.word	0x58021800
 8001e40:	24000728 	.word	0x24000728
 8001e44:	2400071a 	.word	0x2400071a
 8001e48:	2400088c 	.word	0x2400088c
 8001e4c:	24000000 	.word	0x24000000
 8001e50:	24000608 	.word	0x24000608
 8001e54:	240006c8 	.word	0x240006c8
 8001e58:	240001ec 	.word	0x240001ec
 8001e5c:	2400088b 	.word	0x2400088b
 8001e60:	08011d20 	.word	0x08011d20
 8001e64:	24000718 	.word	0x24000718
 8001e68:	08011d80 	.word	0x08011d80
 8001e6c:	24000712 	.word	0x24000712
 8001e70:	24000713 	.word	0x24000713

			case 10:
				print("state: soft fault");
 8001e74:	482e      	ldr	r0, [pc, #184]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001e76:	f7ff fbcd 	bl	8001614 <print>
				printValue(error);
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fbe6 	bl	8001650 <printValue>

				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001e84:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001e8a:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001e8e:	2203      	movs	r2, #3
 8001e90:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001e98:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x13;
 8001ea4:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ea6:	2213      	movs	r2, #19
 8001ea8:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001eaa:	4a25      	ldr	r2, [pc, #148]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001eac:	4923      	ldr	r1, [pc, #140]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001eae:	4825      	ldr	r0, [pc, #148]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001eb0:	f005 fbc5 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>
						HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
													  TxData_Inv);
					}*/

			case 11:
				print("state: hard fault");
 8001eb4:	4824      	ldr	r0, [pc, #144]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001eb6:	f7ff fbad 	bl	8001614 <print>
				flag_react = 1;
 8001eba:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001ec6:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001eca:	2203      	movs	r2, #3
 8001ecc:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001ece:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 13;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ee2:	220d      	movs	r2, #13
 8001ee4:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ee6:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ee8:	4914      	ldr	r1, [pc, #80]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001eea:	4816      	ldr	r0, [pc, #88]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001eec:	f005 fba7 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>

			case 13:
				print("state: shutdown");
 8001ef0:	4817      	ldr	r0, [pc, #92]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001ef2:	f7ff fb8f 	bl	8001614 <print>
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001efc:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001efe:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f00:	2203      	movs	r2, #3
 8001f02:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001f04:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001f1c:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f1e:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f20:	4808      	ldr	r0, [pc, #32]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001f22:	f005 fb8c 	bl	800763e <HAL_FDCAN_AddMessageToTxFifoQ>


				break;
 8001f26:	bf00      	nop
			}
		}
#endif
	}
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	08011d90 	.word	0x08011d90
 8001f34:	2400088a 	.word	0x2400088a
 8001f38:	24000000 	.word	0x24000000
 8001f3c:	24000608 	.word	0x24000608
 8001f40:	240006c8 	.word	0x240006c8
 8001f44:	240001ec 	.word	0x240001ec
 8001f48:	08011da4 	.word	0x08011da4
 8001f4c:	2400088b 	.word	0x2400088b
 8001f50:	08011db8 	.word	0x08011db8

08001f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f58:	b672      	cpsid	i
}
 8001f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <Error_Handler+0x8>

08001f60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_MspInit+0x30>)
 8001f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f6c:	4a08      	ldr	r2, [pc, #32]	@ (8001f90 <HAL_MspInit+0x30>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_MspInit+0x30>)
 8001f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	58024400 	.word	0x58024400

08001f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b090      	sub	sp, #64	@ 0x40
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a90      	ldr	r2, [pc, #576]	@ (80021f4 <HAL_ADC_MspInit+0x260>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	f040 80a3 	bne.w	80020fe <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80021f8 <HAL_ADC_MspInit+0x264>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4a8e      	ldr	r2, [pc, #568]	@ (80021f8 <HAL_ADC_MspInit+0x264>)
 8001fc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fc2:	4b8d      	ldr	r3, [pc, #564]	@ (80021f8 <HAL_ADC_MspInit+0x264>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fca:	4b8c      	ldr	r3, [pc, #560]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8001fcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fd0:	4a8a      	ldr	r2, [pc, #552]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8001fd2:	f043 0320 	orr.w	r3, r3, #32
 8001fd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fda:	4b88      	ldr	r3, [pc, #544]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8001fdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe8:	4b84      	ldr	r3, [pc, #528]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fee:	4a83      	ldr	r2, [pc, #524]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ff8:	4b80      	ldr	r3, [pc, #512]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8001ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	4b7d      	ldr	r3, [pc, #500]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200c:	4a7b      	ldr	r2, [pc, #492]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002016:	4b79      	ldr	r3, [pc, #484]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	623b      	str	r3, [r7, #32]
 8002022:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002024:	4b75      	ldr	r3, [pc, #468]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202a:	4a74      	ldr	r2, [pc, #464]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 800202c:	f043 0320 	orr.w	r3, r3, #32
 8002030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002034:	4b71      	ldr	r3, [pc, #452]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8002042:	2330      	movs	r3, #48	@ 0x30
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002046:	2303      	movs	r3, #3
 8002048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002052:	4619      	mov	r1, r3
 8002054:	486a      	ldr	r0, [pc, #424]	@ (8002200 <HAL_ADC_MspInit+0x26c>)
 8002056:	f006 fa35 	bl	80084c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 800205a:	2303      	movs	r3, #3
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205e:	2303      	movs	r3, #3
 8002060:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800206a:	4619      	mov	r1, r3
 800206c:	4865      	ldr	r0, [pc, #404]	@ (8002204 <HAL_ADC_MspInit+0x270>)
 800206e:	f006 fa29 	bl	80084c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8002072:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002078:	2303      	movs	r3, #3
 800207a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002084:	4619      	mov	r1, r3
 8002086:	4860      	ldr	r0, [pc, #384]	@ (8002208 <HAL_ADC_MspInit+0x274>)
 8002088:	f006 fa1c 	bl	80084c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800208c:	4b5f      	ldr	r3, [pc, #380]	@ (800220c <HAL_ADC_MspInit+0x278>)
 800208e:	4a60      	ldr	r2, [pc, #384]	@ (8002210 <HAL_ADC_MspInit+0x27c>)
 8002090:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002092:	4b5e      	ldr	r3, [pc, #376]	@ (800220c <HAL_ADC_MspInit+0x278>)
 8002094:	2209      	movs	r2, #9
 8002096:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002098:	4b5c      	ldr	r3, [pc, #368]	@ (800220c <HAL_ADC_MspInit+0x278>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800209e:	4b5b      	ldr	r3, [pc, #364]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020a4:	4b59      	ldr	r3, [pc, #356]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020ac:	4b57      	ldr	r3, [pc, #348]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020b4:	4b55      	ldr	r3, [pc, #340]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020bc:	4b53      	ldr	r3, [pc, #332]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020c4:	4b51      	ldr	r3, [pc, #324]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ca:	4b50      	ldr	r3, [pc, #320]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020d0:	484e      	ldr	r0, [pc, #312]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020d2:	f002 ff61 	bl	8004f98 <HAL_DMA_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 80020dc:	f7ff ff3a 	bl	8001f54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a4a      	ldr	r2, [pc, #296]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80020e6:	4a49      	ldr	r2, [pc, #292]	@ (800220c <HAL_ADC_MspInit+0x278>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2012      	movs	r0, #18
 80020f2:	f002 ff1c 	bl	8004f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020f6:	2012      	movs	r0, #18
 80020f8:	f002 ff33 	bl	8004f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020fc:	e076      	b.n	80021ec <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a44      	ldr	r2, [pc, #272]	@ (8002214 <HAL_ADC_MspInit+0x280>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d171      	bne.n	80021ec <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002108:	4b3b      	ldr	r3, [pc, #236]	@ (80021f8 <HAL_ADC_MspInit+0x264>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	4a3a      	ldr	r2, [pc, #232]	@ (80021f8 <HAL_ADC_MspInit+0x264>)
 8002110:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002112:	4b39      	ldr	r3, [pc, #228]	@ (80021f8 <HAL_ADC_MspInit+0x264>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d10e      	bne.n	8002138 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800211a:	4b38      	ldr	r3, [pc, #224]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 800211c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002120:	4a36      	ldr	r2, [pc, #216]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800212a:	4b34      	ldr	r3, [pc, #208]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 800212c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002138:	4b30      	ldr	r3, [pc, #192]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 800213a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800213e:	4a2f      	ldr	r2, [pc, #188]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002148:	4b2c      	ldr	r3, [pc, #176]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 800214a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	4b29      	ldr	r3, [pc, #164]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215c:	4a27      	ldr	r2, [pc, #156]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002166:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002174:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800217a:	4a20      	ldr	r2, [pc, #128]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HAL_ADC_MspInit+0x268>)
 8002186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8002192:	2320      	movs	r3, #32
 8002194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002196:	2303      	movs	r3, #3
 8002198:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021a2:	4619      	mov	r1, r3
 80021a4:	4816      	ldr	r0, [pc, #88]	@ (8002200 <HAL_ADC_MspInit+0x26c>)
 80021a6:	f006 f98d 	bl	80084c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 80021aa:	2301      	movs	r3, #1
 80021ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ae:	2303      	movs	r3, #3
 80021b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ba:	4619      	mov	r1, r3
 80021bc:	4811      	ldr	r0, [pc, #68]	@ (8002204 <HAL_ADC_MspInit+0x270>)
 80021be:	f006 f981 	bl	80084c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 80021c2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c8:	2303      	movs	r3, #3
 80021ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021d4:	4619      	mov	r1, r3
 80021d6:	480c      	ldr	r0, [pc, #48]	@ (8002208 <HAL_ADC_MspInit+0x274>)
 80021d8:	f006 f974 	bl	80084c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	2012      	movs	r0, #18
 80021e2:	f002 fea4 	bl	8004f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80021e6:	2012      	movs	r0, #18
 80021e8:	f002 febb 	bl	8004f62 <HAL_NVIC_EnableIRQ>
}
 80021ec:	bf00      	nop
 80021ee:	3740      	adds	r7, #64	@ 0x40
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40022000 	.word	0x40022000
 80021f8:	24000890 	.word	0x24000890
 80021fc:	58024400 	.word	0x58024400
 8002200:	58020800 	.word	0x58020800
 8002204:	58020400 	.word	0x58020400
 8002208:	58021400 	.word	0x58021400
 800220c:	24000174 	.word	0x24000174
 8002210:	40020010 	.word	0x40020010
 8002214:	40022100 	.word	0x40022100

08002218 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b0bc      	sub	sp, #240	@ 0xf0
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002230:	f107 0320 	add.w	r3, r7, #32
 8002234:	22b8      	movs	r2, #184	@ 0xb8
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f00e ffeb 	bl	8011214 <memset>
  if(hfdcan->Instance==FDCAN1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a8d      	ldr	r2, [pc, #564]	@ (8002478 <HAL_FDCAN_MspInit+0x260>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d157      	bne.n	80022f8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002248:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225a:	f107 0320 	add.w	r3, r7, #32
 800225e:	4618      	mov	r0, r3
 8002260:	f007 faaa 	bl	80097b8 <HAL_RCCEx_PeriphCLKConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800226a:	f7ff fe73 	bl	8001f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800226e:	4b83      	ldr	r3, [pc, #524]	@ (800247c <HAL_FDCAN_MspInit+0x264>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a81      	ldr	r2, [pc, #516]	@ (800247c <HAL_FDCAN_MspInit+0x264>)
 8002276:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002278:	4b80      	ldr	r3, [pc, #512]	@ (800247c <HAL_FDCAN_MspInit+0x264>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10e      	bne.n	800229e <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002280:	4b7f      	ldr	r3, [pc, #508]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 8002282:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002286:	4a7e      	ldr	r2, [pc, #504]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002290:	4b7b      	ldr	r3, [pc, #492]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 8002292:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800229e:	4b78      	ldr	r3, [pc, #480]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a4:	4a76      	ldr	r2, [pc, #472]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ae:	4b74      	ldr	r3, [pc, #464]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 80022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022bc:	2303      	movs	r3, #3
 80022be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80022d4:	2309      	movs	r3, #9
 80022d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022de:	4619      	mov	r1, r3
 80022e0:	4868      	ldr	r0, [pc, #416]	@ (8002484 <HAL_FDCAN_MspInit+0x26c>)
 80022e2:	f006 f8ef 	bl	80084c4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2101      	movs	r1, #1
 80022ea:	2013      	movs	r0, #19
 80022ec:	f002 fe1f 	bl	8004f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80022f0:	2013      	movs	r0, #19
 80022f2:	f002 fe36 	bl	8004f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80022f6:	e0ba      	b.n	800246e <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a62      	ldr	r2, [pc, #392]	@ (8002488 <HAL_FDCAN_MspInit+0x270>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d158      	bne.n	80023b4 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002302:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002314:	f107 0320 	add.w	r3, r7, #32
 8002318:	4618      	mov	r0, r3
 800231a:	f007 fa4d 	bl	80097b8 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002324:	f7ff fe16 	bl	8001f54 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002328:	4b54      	ldr	r3, [pc, #336]	@ (800247c <HAL_FDCAN_MspInit+0x264>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a53      	ldr	r2, [pc, #332]	@ (800247c <HAL_FDCAN_MspInit+0x264>)
 8002330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002332:	4b52      	ldr	r3, [pc, #328]	@ (800247c <HAL_FDCAN_MspInit+0x264>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10e      	bne.n	8002358 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800233a:	4b51      	ldr	r3, [pc, #324]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 800233c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002340:	4a4f      	ldr	r2, [pc, #316]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002346:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800234a:	4b4d      	ldr	r3, [pc, #308]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 800234c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	4b49      	ldr	r3, [pc, #292]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 800235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235e:	4a48      	ldr	r2, [pc, #288]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002368:	4b45      	ldr	r3, [pc, #276]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 800236a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002376:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800237a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002390:	2309      	movs	r3, #9
 8002392:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002396:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800239a:	4619      	mov	r1, r3
 800239c:	483b      	ldr	r0, [pc, #236]	@ (800248c <HAL_FDCAN_MspInit+0x274>)
 800239e:	f006 f891 	bl	80084c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2102      	movs	r1, #2
 80023a6:	2014      	movs	r0, #20
 80023a8:	f002 fdc1 	bl	8004f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80023ac:	2014      	movs	r0, #20
 80023ae:	f002 fdd8 	bl	8004f62 <HAL_NVIC_EnableIRQ>
}
 80023b2:	e05c      	b.n	800246e <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a35      	ldr	r2, [pc, #212]	@ (8002490 <HAL_FDCAN_MspInit+0x278>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d157      	bne.n	800246e <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d0:	f107 0320 	add.w	r3, r7, #32
 80023d4:	4618      	mov	r0, r3
 80023d6:	f007 f9ef 	bl	80097b8 <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 80023e0:	f7ff fdb8 	bl	8001f54 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80023e4:	4b25      	ldr	r3, [pc, #148]	@ (800247c <HAL_FDCAN_MspInit+0x264>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	4a24      	ldr	r2, [pc, #144]	@ (800247c <HAL_FDCAN_MspInit+0x264>)
 80023ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80023ee:	4b23      	ldr	r3, [pc, #140]	@ (800247c <HAL_FDCAN_MspInit+0x264>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d10e      	bne.n	8002414 <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80023f6:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 80023f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80023fc:	4a20      	ldr	r2, [pc, #128]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 80023fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002402:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002406:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 8002408:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800240c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800241a:	4a19      	ldr	r2, [pc, #100]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 800241c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002420:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002424:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_FDCAN_MspInit+0x268>)
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800242a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002432:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002436:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800244c:	2302      	movs	r3, #2
 800244e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002452:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002456:	4619      	mov	r1, r3
 8002458:	480e      	ldr	r0, [pc, #56]	@ (8002494 <HAL_FDCAN_MspInit+0x27c>)
 800245a:	f006 f833 	bl	80084c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	209f      	movs	r0, #159	@ 0x9f
 8002464:	f002 fd63 	bl	8004f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8002468:	209f      	movs	r0, #159	@ 0x9f
 800246a:	f002 fd7a 	bl	8004f62 <HAL_NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	37f0      	adds	r7, #240	@ 0xf0
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	4000a000 	.word	0x4000a000
 800247c:	24000894 	.word	0x24000894
 8002480:	58024400 	.word	0x58024400
 8002484:	58020c00 	.word	0x58020c00
 8002488:	4000a400 	.word	0x4000a400
 800248c:	58020400 	.word	0x58020400
 8002490:	4000d400 	.word	0x4000d400
 8002494:	58021800 	.word	0x58021800

08002498 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	@ 0x30
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3e      	ldr	r2, [pc, #248]	@ (80025b0 <HAL_SD_MspInit+0x118>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d175      	bne.n	80025a6 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024ba:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 80024bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024c0:	4a3c      	ldr	r2, [pc, #240]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80024ca:	4b3a      	ldr	r3, [pc, #232]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 80024cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d8:	4b36      	ldr	r3, [pc, #216]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 80024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024de:	4a35      	ldr	r2, [pc, #212]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024e8:	4b32      	ldr	r3, [pc, #200]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 80024ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f6:	4b2f      	ldr	r3, [pc, #188]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fc:	4a2d      	ldr	r2, [pc, #180]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002506:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 8002508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 8002516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251a:	4a26      	ldr	r2, [pc, #152]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002524:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <HAL_SD_MspInit+0x11c>)
 8002526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002532:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002536:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002544:	230c      	movs	r3, #12
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	481a      	ldr	r0, [pc, #104]	@ (80025b8 <HAL_SD_MspInit+0x120>)
 8002550:	f005 ffb8 	bl	80084c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002554:	2304      	movs	r3, #4
 8002556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002564:	230c      	movs	r3, #12
 8002566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002568:	f107 031c 	add.w	r3, r7, #28
 800256c:	4619      	mov	r1, r3
 800256e:	4813      	ldr	r0, [pc, #76]	@ (80025bc <HAL_SD_MspInit+0x124>)
 8002570:	f005 ffa8 	bl	80084c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	2303      	movs	r3, #3
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 8002586:	2307      	movs	r3, #7
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4619      	mov	r1, r3
 8002590:	480b      	ldr	r0, [pc, #44]	@ (80025c0 <HAL_SD_MspInit+0x128>)
 8002592:	f005 ff97 	bl	80084c4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2031      	movs	r0, #49	@ 0x31
 800259c:	f002 fcc7 	bl	8004f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80025a0:	2031      	movs	r0, #49	@ 0x31
 80025a2:	f002 fcde 	bl	8004f62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80025a6:	bf00      	nop
 80025a8:	3730      	adds	r7, #48	@ 0x30
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	52007000 	.word	0x52007000
 80025b4:	58024400 	.word	0x58024400
 80025b8:	58020800 	.word	0x58020800
 80025bc:	58020c00 	.word	0x58020c00
 80025c0:	58020400 	.word	0x58020400

080025c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	@ (8002638 <HAL_TIM_Base_MspInit+0x74>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10f      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025d6:	4b19      	ldr	r3, [pc, #100]	@ (800263c <HAL_TIM_Base_MspInit+0x78>)
 80025d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025dc:	4a17      	ldr	r2, [pc, #92]	@ (800263c <HAL_TIM_Base_MspInit+0x78>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025e6:	4b15      	ldr	r3, [pc, #84]	@ (800263c <HAL_TIM_Base_MspInit+0x78>)
 80025e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80025f4:	e01b      	b.n	800262e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a11      	ldr	r2, [pc, #68]	@ (8002640 <HAL_TIM_Base_MspInit+0x7c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d116      	bne.n	800262e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_TIM_Base_MspInit+0x78>)
 8002602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002606:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <HAL_TIM_Base_MspInit+0x78>)
 8002608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_TIM_Base_MspInit+0x78>)
 8002612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	2075      	movs	r0, #117	@ 0x75
 8002624:	f002 fc83 	bl	8004f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002628:	2075      	movs	r0, #117	@ 0x75
 800262a:	f002 fc9a 	bl	8004f62 <HAL_NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40010000 	.word	0x40010000
 800263c:	58024400 	.word	0x58024400
 8002640:	40014400 	.word	0x40014400

08002644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a13      	ldr	r2, [pc, #76]	@ (80026b0 <HAL_TIM_MspPostInit+0x6c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d11f      	bne.n	80026a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002666:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <HAL_TIM_MspPostInit+0x70>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800266c:	4a11      	ldr	r2, [pc, #68]	@ (80026b4 <HAL_TIM_MspPostInit+0x70>)
 800266e:	f043 0310 	orr.w	r3, r3, #16
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002676:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_TIM_MspPostInit+0x70>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8002684:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002688:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002696:	2301      	movs	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	4619      	mov	r1, r3
 80026a0:	4805      	ldr	r0, [pc, #20]	@ (80026b8 <HAL_TIM_MspPostInit+0x74>)
 80026a2:	f005 ff0f 	bl	80084c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026a6:	bf00      	nop
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000
 80026b4:	58024400 	.word	0x58024400
 80026b8:	58021000 	.word	0x58021000

080026bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b0ba      	sub	sp, #232	@ 0xe8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026d4:	f107 0318 	add.w	r3, r7, #24
 80026d8:	22b8      	movs	r2, #184	@ 0xb8
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f00e fd99 	bl	8011214 <memset>
  if(huart->Instance==USART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a4d      	ldr	r2, [pc, #308]	@ (800281c <HAL_UART_MspInit+0x160>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d147      	bne.n	800277c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026ec:	f04f 0201 	mov.w	r2, #1
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026fe:	f107 0318 	add.w	r3, r7, #24
 8002702:	4618      	mov	r0, r3
 8002704:	f007 f858 	bl	80097b8 <HAL_RCCEx_PeriphCLKConfig>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800270e:	f7ff fc21 	bl	8001f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002712:	4b43      	ldr	r3, [pc, #268]	@ (8002820 <HAL_UART_MspInit+0x164>)
 8002714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002718:	4a41      	ldr	r2, [pc, #260]	@ (8002820 <HAL_UART_MspInit+0x164>)
 800271a:	f043 0310 	orr.w	r3, r3, #16
 800271e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002722:	4b3f      	ldr	r3, [pc, #252]	@ (8002820 <HAL_UART_MspInit+0x164>)
 8002724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <HAL_UART_MspInit+0x164>)
 8002732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002736:	4a3a      	ldr	r2, [pc, #232]	@ (8002820 <HAL_UART_MspInit+0x164>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002740:	4b37      	ldr	r3, [pc, #220]	@ (8002820 <HAL_UART_MspInit+0x164>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 800274e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002768:	2307      	movs	r3, #7
 800276a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002772:	4619      	mov	r1, r3
 8002774:	482b      	ldr	r0, [pc, #172]	@ (8002824 <HAL_UART_MspInit+0x168>)
 8002776:	f005 fea5 	bl	80084c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800277a:	e04a      	b.n	8002812 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <HAL_UART_MspInit+0x16c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d145      	bne.n	8002812 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002786:	f04f 0202 	mov.w	r2, #2
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f007 f80b 	bl	80097b8 <HAL_RCCEx_PeriphCLKConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80027a8:	f7ff fbd4 	bl	8001f54 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <HAL_UART_MspInit+0x164>)
 80027ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <HAL_UART_MspInit+0x164>)
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027bc:	4b18      	ldr	r3, [pc, #96]	@ (8002820 <HAL_UART_MspInit+0x164>)
 80027be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_UART_MspInit+0x164>)
 80027cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d0:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <HAL_UART_MspInit+0x164>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027da:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_UART_MspInit+0x164>)
 80027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027e8:	230c      	movs	r3, #12
 80027ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002800:	2307      	movs	r3, #7
 8002802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800280a:	4619      	mov	r1, r3
 800280c:	4805      	ldr	r0, [pc, #20]	@ (8002824 <HAL_UART_MspInit+0x168>)
 800280e:	f005 fe59 	bl	80084c4 <HAL_GPIO_Init>
}
 8002812:	bf00      	nop
 8002814:	37e8      	adds	r7, #232	@ 0xe8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40011000 	.word	0x40011000
 8002820:	58024400 	.word	0x58024400
 8002824:	58020000 	.word	0x58020000
 8002828:	40004400 	.word	0x40004400

0800282c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <NMI_Handler+0x4>

08002834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <HardFault_Handler+0x4>

0800283c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <MemManage_Handler+0x4>

08002844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <BusFault_Handler+0x4>

0800284c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <UsageFault_Handler+0x4>

08002854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002882:	f000 f997 	bl	8002bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002890:	4802      	ldr	r0, [pc, #8]	@ (800289c <DMA1_Stream0_IRQHandler+0x10>)
 8002892:	f003 f943 	bl	8005b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	24000174 	.word	0x24000174

080028a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028a4:	4803      	ldr	r0, [pc, #12]	@ (80028b4 <ADC_IRQHandler+0x14>)
 80028a6:	f000 ff99 	bl	80037dc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80028aa:	4803      	ldr	r0, [pc, #12]	@ (80028b8 <ADC_IRQHandler+0x18>)
 80028ac:	f000 ff96 	bl	80037dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	24000094 	.word	0x24000094
 80028b8:	24000104 	.word	0x24000104

080028bc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80028c0:	4802      	ldr	r0, [pc, #8]	@ (80028cc <FDCAN1_IT0_IRQHandler+0x10>)
 80028c2:	f005 f8fd 	bl	8007ac0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	240001ec 	.word	0x240001ec

080028d0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <FDCAN2_IT0_IRQHandler+0x10>)
 80028d6:	f005 f8f3 	bl	8007ac0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2400028c 	.word	0x2400028c

080028e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <SDMMC1_IRQHandler+0x10>)
 80028ea:	f009 fdbb 	bl	800c464 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	240003cc 	.word	0x240003cc

080028f8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <TIM16_IRQHandler+0x10>)
 80028fe:	f00b f8e4 	bl	800daca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	24000494 	.word	0x24000494

0800290c <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <FDCAN3_IT0_IRQHandler+0x10>)
 8002912:	f005 f8d5 	bl	8007ac0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2400032c 	.word	0x2400032c

08002920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002928:	4a14      	ldr	r2, [pc, #80]	@ (800297c <_sbrk+0x5c>)
 800292a:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <_sbrk+0x60>)
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002934:	4b13      	ldr	r3, [pc, #76]	@ (8002984 <_sbrk+0x64>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800293c:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <_sbrk+0x64>)
 800293e:	4a12      	ldr	r2, [pc, #72]	@ (8002988 <_sbrk+0x68>)
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <_sbrk+0x64>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	429a      	cmp	r2, r3
 800294e:	d207      	bcs.n	8002960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002950:	f00e fc68 	bl	8011224 <__errno>
 8002954:	4603      	mov	r3, r0
 8002956:	220c      	movs	r2, #12
 8002958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	e009      	b.n	8002974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002960:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <_sbrk+0x64>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <_sbrk+0x64>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	4a05      	ldr	r2, [pc, #20]	@ (8002984 <_sbrk+0x64>)
 8002970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	24050000 	.word	0x24050000
 8002980:	00000400 	.word	0x00000400
 8002984:	24000898 	.word	0x24000898
 8002988:	24000a08 	.word	0x24000a08

0800298c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002990:	4b32      	ldr	r3, [pc, #200]	@ (8002a5c <SystemInit+0xd0>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002996:	4a31      	ldr	r2, [pc, #196]	@ (8002a5c <SystemInit+0xd0>)
 8002998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800299c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a60 <SystemInit+0xd4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	2b06      	cmp	r3, #6
 80029aa:	d807      	bhi.n	80029bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002a60 <SystemInit+0xd4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 030f 	bic.w	r3, r3, #15
 80029b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a60 <SystemInit+0xd4>)
 80029b6:	f043 0307 	orr.w	r3, r3, #7
 80029ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029bc:	4b29      	ldr	r3, [pc, #164]	@ (8002a64 <SystemInit+0xd8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a28      	ldr	r2, [pc, #160]	@ (8002a64 <SystemInit+0xd8>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029c8:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <SystemInit+0xd8>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029ce:	4b25      	ldr	r3, [pc, #148]	@ (8002a64 <SystemInit+0xd8>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4924      	ldr	r1, [pc, #144]	@ (8002a64 <SystemInit+0xd8>)
 80029d4:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <SystemInit+0xdc>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029da:	4b21      	ldr	r3, [pc, #132]	@ (8002a60 <SystemInit+0xd4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <SystemInit+0xd4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 030f 	bic.w	r3, r3, #15
 80029ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <SystemInit+0xd4>)
 80029f0:	f043 0307 	orr.w	r3, r3, #7
 80029f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <SystemInit+0xd8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029fc:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <SystemInit+0xd8>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a02:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <SystemInit+0xd8>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a08:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <SystemInit+0xd8>)
 8002a0a:	4a18      	ldr	r2, [pc, #96]	@ (8002a6c <SystemInit+0xe0>)
 8002a0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a0e:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <SystemInit+0xd8>)
 8002a10:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <SystemInit+0xe4>)
 8002a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a14:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <SystemInit+0xd8>)
 8002a16:	4a17      	ldr	r2, [pc, #92]	@ (8002a74 <SystemInit+0xe8>)
 8002a18:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a1a:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <SystemInit+0xd8>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a20:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <SystemInit+0xd8>)
 8002a22:	4a14      	ldr	r2, [pc, #80]	@ (8002a74 <SystemInit+0xe8>)
 8002a24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a26:	4b0f      	ldr	r3, [pc, #60]	@ (8002a64 <SystemInit+0xd8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <SystemInit+0xd8>)
 8002a2e:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <SystemInit+0xe8>)
 8002a30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <SystemInit+0xd8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <SystemInit+0xd8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <SystemInit+0xd8>)
 8002a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a44:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <SystemInit+0xd8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <SystemInit+0xec>)
 8002a4c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00
 8002a60:	52002000 	.word	0x52002000
 8002a64:	58024400 	.word	0x58024400
 8002a68:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a6c:	02020200 	.word	0x02020200
 8002a70:	01ff0000 	.word	0x01ff0000
 8002a74:	01010280 	.word	0x01010280
 8002a78:	52004000 	.word	0x52004000

08002a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ab4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a80:	f7ff ff84 	bl	800298c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a84:	480c      	ldr	r0, [pc, #48]	@ (8002ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a86:	490d      	ldr	r1, [pc, #52]	@ (8002abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a8c:	e002      	b.n	8002a94 <LoopCopyDataInit>

08002a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a92:	3304      	adds	r3, #4

08002a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a98:	d3f9      	bcc.n	8002a8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa0:	e001      	b.n	8002aa6 <LoopFillZerobss>

08002aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa4:	3204      	adds	r2, #4

08002aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa8:	d3fb      	bcc.n	8002aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aaa:	f00e fbc1 	bl	8011230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aae:	f7fd fe1d 	bl	80006ec <main>
  bx  lr
 8002ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ab4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ab8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002abc:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002ac0:	08011ebc 	.word	0x08011ebc
  ldr r2, =_sbss
 8002ac4:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002ac8:	24000a04 	.word	0x24000a04

08002acc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002acc:	e7fe      	b.n	8002acc <ADC3_IRQHandler>
	...

08002ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad6:	2003      	movs	r0, #3
 8002ad8:	f002 fa1e 	bl	8004f18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002adc:	f006 fc96 	bl	800940c <HAL_RCC_GetSysClockFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <HAL_Init+0x68>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	4913      	ldr	r1, [pc, #76]	@ (8002b3c <HAL_Init+0x6c>)
 8002aee:	5ccb      	ldrb	r3, [r1, r3]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002afa:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <HAL_Init+0x68>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	4a0e      	ldr	r2, [pc, #56]	@ (8002b3c <HAL_Init+0x6c>)
 8002b04:	5cd3      	ldrb	r3, [r2, r3]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	4a0b      	ldr	r2, [pc, #44]	@ (8002b40 <HAL_Init+0x70>)
 8002b12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b14:	4a0b      	ldr	r2, [pc, #44]	@ (8002b44 <HAL_Init+0x74>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b1a:	200f      	movs	r0, #15
 8002b1c:	f000 f814 	bl	8002b48 <HAL_InitTick>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e002      	b.n	8002b30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b2a:	f7ff fa19 	bl	8001f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	58024400 	.word	0x58024400
 8002b3c:	08011e14 	.word	0x08011e14
 8002b40:	24000010 	.word	0x24000010
 8002b44:	2400000c 	.word	0x2400000c

08002b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b50:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <HAL_InitTick+0x60>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e021      	b.n	8002ba0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b5c:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <HAL_InitTick+0x64>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_InitTick+0x60>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fa03 	bl	8004f7e <HAL_SYSTICK_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00e      	b.n	8002ba0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b0f      	cmp	r3, #15
 8002b86:	d80a      	bhi.n	8002b9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f002 f9cd 	bl	8004f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b94:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <HAL_InitTick+0x68>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	24000018 	.word	0x24000018
 8002bac:	2400000c 	.word	0x2400000c
 8002bb0:	24000014 	.word	0x24000014

08002bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	24000018 	.word	0x24000018
 8002bd8:	2400089c 	.word	0x2400089c

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	2400089c 	.word	0x2400089c

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff ffee 	bl	8002bdc <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffde 	bl	8002bdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	24000018 	.word	0x24000018

08002c3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	609a      	str	r2, [r3, #8]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3360      	adds	r3, #96	@ 0x60
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a10      	ldr	r2, [pc, #64]	@ (8002d04 <LL_ADC_SetOffset+0x60>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d10b      	bne.n	8002ce0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cde:	e00b      	b.n	8002cf8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	601a      	str	r2, [r3, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	58026000 	.word	0x58026000

08002d08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3360      	adds	r3, #96	@ 0x60
 8002d16:	461a      	mov	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	611a      	str	r2, [r3, #16]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a0c      	ldr	r2, [pc, #48]	@ (8002da8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3360      	adds	r3, #96	@ 0x60
 8002d80:	461a      	mov	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	601a      	str	r2, [r3, #0]
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	58026000 	.word	0x58026000

08002dac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a0c      	ldr	r2, [pc, #48]	@ (8002dec <LL_ADC_SetOffsetSaturation+0x40>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10e      	bne.n	8002dde <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3360      	adds	r3, #96	@ 0x60
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	58026000 	.word	0x58026000

08002df0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8002e30 <LL_ADC_SetOffsetSign+0x40>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10e      	bne.n	8002e22 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3360      	adds	r3, #96	@ 0x60
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	58026000 	.word	0x58026000

08002e34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3360      	adds	r3, #96	@ 0x60
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a0c      	ldr	r2, [pc, #48]	@ (8002e84 <LL_ADC_SetOffsetState+0x50>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d108      	bne.n	8002e68 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002e66:	e007      	b.n	8002e78 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	58026000 	.word	0x58026000

08002e88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3330      	adds	r3, #48	@ 0x30
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	4413      	add	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	211f      	movs	r1, #31
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	f003 011f 	and.w	r1, r3, #31
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f023 0203 	bic.w	r2, r3, #3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d107      	bne.n	8002f6e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60da      	str	r2, [r3, #12]
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	58026000 	.word	0x58026000

08002f80 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b087      	sub	sp, #28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3314      	adds	r3, #20
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	0e5b      	lsrs	r3, r3, #25
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	4413      	add	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	0d1b      	lsrs	r3, r3, #20
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	2107      	movs	r1, #7
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	401a      	ands	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	0d1b      	lsrs	r3, r3, #20
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	431a      	orrs	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a1a      	ldr	r2, [pc, #104]	@ (8003074 <LL_ADC_SetChannelSingleDiff+0x78>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d115      	bne.n	800303c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0318 	and.w	r3, r3, #24
 8003026:	4914      	ldr	r1, [pc, #80]	@ (8003078 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003028:	40d9      	lsrs	r1, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	400b      	ands	r3, r1
 800302e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003032:	431a      	orrs	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800303a:	e014      	b.n	8003066 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003048:	43db      	mvns	r3, r3
 800304a:	401a      	ands	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f003 0318 	and.w	r3, r3, #24
 8003052:	4909      	ldr	r1, [pc, #36]	@ (8003078 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003054:	40d9      	lsrs	r1, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	400b      	ands	r3, r1
 800305a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	58026000 	.word	0x58026000
 8003078:	000fffff 	.word	0x000fffff

0800307c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 031f 	and.w	r3, r3, #31
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6093      	str	r3, [r2, #8]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	5fffffc0 	.word	0x5fffffc0

080030d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ec:	d101      	bne.n	80030f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <LL_ADC_EnableInternalRegulator+0x24>)
 800310e:	4013      	ands	r3, r2
 8003110:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	6fffffc0 	.word	0x6fffffc0

08003128 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800313c:	d101      	bne.n	8003142 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <LL_ADC_Enable+0x24>)
 800315e:	4013      	ands	r3, r2
 8003160:	f043 0201 	orr.w	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	7fffffc0 	.word	0x7fffffc0

08003178 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <LL_ADC_IsEnabled+0x18>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_ADC_IsEnabled+0x1a>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <LL_ADC_REG_StartConversion+0x24>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	7fffffc0 	.word	0x7fffffc0

080031c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d101      	bne.n	80031e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d101      	bne.n	8003206 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b089      	sub	sp, #36	@ 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003220:	2300      	movs	r3, #0
 8003222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1ee      	b.n	800360c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7fe fea9 	bl	8001f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff3f 	bl	80030d8 <LL_ADC_IsDeepPowerDownEnabled>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff25 	bl	80030b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ff5a 	bl	8003128 <LL_ADC_IsInternalRegulatorEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d114      	bne.n	80032a4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff3e 	bl	8003100 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003284:	4b8e      	ldr	r3, [pc, #568]	@ (80034c0 <HAL_ADC_Init+0x2ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	4a8e      	ldr	r2, [pc, #568]	@ (80034c4 <HAL_ADC_Init+0x2b0>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	3301      	adds	r3, #1
 8003294:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003296:	e002      	b.n	800329e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	3b01      	subs	r3, #1
 800329c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f9      	bne.n	8003298 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff ff3d 	bl	8003128 <LL_ADC_IsInternalRegulatorEnabled>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b8:	f043 0210 	orr.w	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff77 	bl	80031c8 <LL_ADC_REG_IsConversionOngoing>
 80032da:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 8188 	bne.w	80035fa <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 8184 	bne.w	80035fa <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80032fa:	f043 0202 	orr.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff36 	bl	8003178 <LL_ADC_IsEnabled>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d136      	bne.n	8003380 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a6c      	ldr	r2, [pc, #432]	@ (80034c8 <HAL_ADC_Init+0x2b4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_ADC_Init+0x112>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6a      	ldr	r2, [pc, #424]	@ (80034cc <HAL_ADC_Init+0x2b8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10e      	bne.n	8003344 <HAL_ADC_Init+0x130>
 8003326:	4868      	ldr	r0, [pc, #416]	@ (80034c8 <HAL_ADC_Init+0x2b4>)
 8003328:	f7ff ff26 	bl	8003178 <LL_ADC_IsEnabled>
 800332c:	4604      	mov	r4, r0
 800332e:	4867      	ldr	r0, [pc, #412]	@ (80034cc <HAL_ADC_Init+0x2b8>)
 8003330:	f7ff ff22 	bl	8003178 <LL_ADC_IsEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	4323      	orrs	r3, r4
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e008      	b.n	8003356 <HAL_ADC_Init+0x142>
 8003344:	4862      	ldr	r0, [pc, #392]	@ (80034d0 <HAL_ADC_Init+0x2bc>)
 8003346:	f7ff ff17 	bl	8003178 <LL_ADC_IsEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d012      	beq.n	8003380 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a5a      	ldr	r2, [pc, #360]	@ (80034c8 <HAL_ADC_Init+0x2b4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_ADC_Init+0x15a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a58      	ldr	r2, [pc, #352]	@ (80034cc <HAL_ADC_Init+0x2b8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_ADC_Init+0x15e>
 800336e:	4a59      	ldr	r2, [pc, #356]	@ (80034d4 <HAL_ADC_Init+0x2c0>)
 8003370:	e000      	b.n	8003374 <HAL_ADC_Init+0x160>
 8003372:	4a59      	ldr	r2, [pc, #356]	@ (80034d8 <HAL_ADC_Init+0x2c4>)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f7ff fc5e 	bl	8002c3c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_ADC_Init+0x2bc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d129      	bne.n	80033de <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7e5b      	ldrb	r3, [r3, #25]
 800338e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003394:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800339a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d013      	beq.n	80033cc <HAL_ADC_Init+0x1b8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d00d      	beq.n	80033c8 <HAL_ADC_Init+0x1b4>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b1c      	cmp	r3, #28
 80033b2:	d007      	beq.n	80033c4 <HAL_ADC_Init+0x1b0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b18      	cmp	r3, #24
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_Init+0x1ac>
 80033bc:	2318      	movs	r3, #24
 80033be:	e006      	b.n	80033ce <HAL_ADC_Init+0x1ba>
 80033c0:	2300      	movs	r3, #0
 80033c2:	e004      	b.n	80033ce <HAL_ADC_Init+0x1ba>
 80033c4:	2310      	movs	r3, #16
 80033c6:	e002      	b.n	80033ce <HAL_ADC_Init+0x1ba>
 80033c8:	2308      	movs	r3, #8
 80033ca:	e000      	b.n	80033ce <HAL_ADC_Init+0x1ba>
 80033cc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80033ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	e00e      	b.n	80033fc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7e5b      	ldrb	r3, [r3, #25]
 80033e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80033ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d106      	bne.n	8003414 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	3b01      	subs	r3, #1
 800340c:	045b      	lsls	r3, r3, #17
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003420:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a26      	ldr	r2, [pc, #152]	@ (80034d0 <HAL_ADC_Init+0x2bc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d115      	bne.n	8003466 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	4b26      	ldr	r3, [pc, #152]	@ (80034dc <HAL_ADC_Init+0x2c8>)
 8003442:	4013      	ands	r3, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	430b      	orrs	r3, r1
 800344c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	611a      	str	r2, [r3, #16]
 8003464:	e009      	b.n	800347a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4b1c      	ldr	r3, [pc, #112]	@ (80034e0 <HAL_ADC_Init+0x2cc>)
 800346e:	4013      	ands	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	430b      	orrs	r3, r1
 8003478:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fea2 	bl	80031c8 <LL_ADC_REG_IsConversionOngoing>
 8003484:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff feaf 	bl	80031ee <LL_ADC_INJ_IsConversionOngoing>
 8003490:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f040 808e 	bne.w	80035b6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 808a 	bne.w	80035b6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <HAL_ADC_Init+0x2bc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d11b      	bne.n	80034e4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7e1b      	ldrb	r3, [r3, #24]
 80034b0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034b8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	e018      	b.n	80034f2 <HAL_ADC_Init+0x2de>
 80034c0:	2400000c 	.word	0x2400000c
 80034c4:	053e2d63 	.word	0x053e2d63
 80034c8:	40022000 	.word	0x40022000
 80034cc:	40022100 	.word	0x40022100
 80034d0:	58026000 	.word	0x58026000
 80034d4:	40022300 	.word	0x40022300
 80034d8:	58026300 	.word	0x58026300
 80034dc:	fff04007 	.word	0xfff04007
 80034e0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	7e1b      	ldrb	r3, [r3, #24]
 80034e8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4b46      	ldr	r3, [pc, #280]	@ (8003614 <HAL_ADC_Init+0x400>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	430b      	orrs	r3, r1
 8003504:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800350c:	2b01      	cmp	r3, #1
 800350e:	d137      	bne.n	8003580 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003514:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3f      	ldr	r2, [pc, #252]	@ (8003618 <HAL_ADC_Init+0x404>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d116      	bne.n	800354e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	4b3d      	ldr	r3, [pc, #244]	@ (800361c <HAL_ADC_Init+0x408>)
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003538:	4311      	orrs	r1, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800353e:	430a      	orrs	r2, r1
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	611a      	str	r2, [r3, #16]
 800354c:	e020      	b.n	8003590 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	4b32      	ldr	r3, [pc, #200]	@ (8003620 <HAL_ADC_Init+0x40c>)
 8003556:	4013      	ands	r3, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800355c:	3a01      	subs	r2, #1
 800355e:	0411      	lsls	r1, r2, #16
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003564:	4311      	orrs	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800356a:	4311      	orrs	r1, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003570:	430a      	orrs	r2, r1
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	611a      	str	r2, [r3, #16]
 800357e:	e007      	b.n	8003590 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003618 <HAL_ADC_Init+0x404>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d002      	beq.n	80035b6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f001 f9b9 	bl	8004928 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10c      	bne.n	80035d8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	f023 010f 	bic.w	r1, r3, #15
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80035d6:	e007      	b.n	80035e8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 020f 	bic.w	r2, r2, #15
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ec:	f023 0303 	bic.w	r3, r3, #3
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	661a      	str	r2, [r3, #96]	@ 0x60
 80035f8:	e007      	b.n	800360a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800360a:	7ffb      	ldrb	r3, [r7, #31]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3724      	adds	r7, #36	@ 0x24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd90      	pop	{r4, r7, pc}
 8003614:	ffffbffc 	.word	0xffffbffc
 8003618:	58026000 	.word	0x58026000
 800361c:	fc00f81f 	.word	0xfc00f81f
 8003620:	fc00f81e 	.word	0xfc00f81e

08003624 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a60      	ldr	r2, [pc, #384]	@ (80037b8 <HAL_ADC_Start_DMA+0x194>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_ADC_Start_DMA+0x20>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a5f      	ldr	r2, [pc, #380]	@ (80037bc <HAL_ADC_Start_DMA+0x198>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_ADC_Start_DMA+0x24>
 8003644:	4b5e      	ldr	r3, [pc, #376]	@ (80037c0 <HAL_ADC_Start_DMA+0x19c>)
 8003646:	e000      	b.n	800364a <HAL_ADC_Start_DMA+0x26>
 8003648:	4b5e      	ldr	r3, [pc, #376]	@ (80037c4 <HAL_ADC_Start_DMA+0x1a0>)
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fd16 	bl	800307c <LL_ADC_GetMultimode>
 8003650:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fdb6 	bl	80031c8 <LL_ADC_REG_IsConversionOngoing>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 80a2 	bne.w	80037a8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_ADC_Start_DMA+0x4e>
 800366e:	2302      	movs	r3, #2
 8003670:	e09d      	b.n	80037ae <HAL_ADC_Start_DMA+0x18a>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b05      	cmp	r3, #5
 8003684:	d003      	beq.n	800368e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b09      	cmp	r3, #9
 800368a:	f040 8086 	bne.w	800379a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f001 f82c 	bl	80046ec <ADC_Enable>
 8003694:	4603      	mov	r3, r0
 8003696:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d178      	bne.n	8003790 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036a2:	4b49      	ldr	r3, [pc, #292]	@ (80037c8 <HAL_ADC_Start_DMA+0x1a4>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a42      	ldr	r2, [pc, #264]	@ (80037bc <HAL_ADC_Start_DMA+0x198>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d002      	beq.n	80036be <HAL_ADC_Start_DMA+0x9a>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	e000      	b.n	80036c0 <HAL_ADC_Start_DMA+0x9c>
 80036be:	4b3e      	ldr	r3, [pc, #248]	@ (80037b8 <HAL_ADC_Start_DMA+0x194>)
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d002      	beq.n	80036ce <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ea:	f023 0206 	bic.w	r2, r3, #6
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	665a      	str	r2, [r3, #100]	@ 0x64
 80036f2:	e002      	b.n	80036fa <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fe:	4a33      	ldr	r2, [pc, #204]	@ (80037cc <HAL_ADC_Start_DMA+0x1a8>)
 8003700:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	4a32      	ldr	r2, [pc, #200]	@ (80037d0 <HAL_ADC_Start_DMA+0x1ac>)
 8003708:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	4a31      	ldr	r2, [pc, #196]	@ (80037d4 <HAL_ADC_Start_DMA+0x1b0>)
 8003710:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	221c      	movs	r2, #28
 8003718:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0210 	orr.w	r2, r2, #16
 8003730:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a28      	ldr	r2, [pc, #160]	@ (80037d8 <HAL_ADC_Start_DMA+0x1b4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10f      	bne.n	800375c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f7ff fbfe 	bl	8002f4c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fbe9 	bl	8002f2c <LL_ADC_EnableDMAReq>
 800375a:	e007      	b.n	800376c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f7ff fbcd 	bl	8002f06 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3340      	adds	r3, #64	@ 0x40
 8003776:	4619      	mov	r1, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f001 ff64 	bl	8005648 <HAL_DMA_Start_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fd09 	bl	80031a0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800378e:	e00d      	b.n	80037ac <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003798:	e008      	b.n	80037ac <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80037a6:	e001      	b.n	80037ac <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
 80037aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40022000 	.word	0x40022000
 80037bc:	40022100 	.word	0x40022100
 80037c0:	40022300 	.word	0x40022300
 80037c4:	58026300 	.word	0x58026300
 80037c8:	fffff0fe 	.word	0xfffff0fe
 80037cc:	08004801 	.word	0x08004801
 80037d0:	080048d9 	.word	0x080048d9
 80037d4:	080048f5 	.word	0x080048f5
 80037d8:	58026000 	.word	0x58026000

080037dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a87      	ldr	r2, [pc, #540]	@ (8003a1c <HAL_ADC_IRQHandler+0x240>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_ADC_IRQHandler+0x30>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a86      	ldr	r2, [pc, #536]	@ (8003a20 <HAL_ADC_IRQHandler+0x244>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d101      	bne.n	8003810 <HAL_ADC_IRQHandler+0x34>
 800380c:	4b85      	ldr	r3, [pc, #532]	@ (8003a24 <HAL_ADC_IRQHandler+0x248>)
 800380e:	e000      	b.n	8003812 <HAL_ADC_IRQHandler+0x36>
 8003810:	4b85      	ldr	r3, [pc, #532]	@ (8003a28 <HAL_ADC_IRQHandler+0x24c>)
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fc32 	bl	800307c <LL_ADC_GetMultimode>
 8003818:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d017      	beq.n	8003854 <HAL_ADC_IRQHandler+0x78>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d012      	beq.n	8003854 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f001 f9aa 	bl	8004ba0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2202      	movs	r2, #2
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <HAL_ADC_IRQHandler+0x8c>
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8083 	beq.w	800397a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d07d      	beq.n	800397a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff faf4 	bl	8002e88 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d062      	beq.n	800396c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003a20 <HAL_ADC_IRQHandler+0x244>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d002      	beq.n	80038b6 <HAL_ADC_IRQHandler+0xda>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	e000      	b.n	80038b8 <HAL_ADC_IRQHandler+0xdc>
 80038b6:	4b59      	ldr	r3, [pc, #356]	@ (8003a1c <HAL_ADC_IRQHandler+0x240>)
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	4293      	cmp	r3, r2
 80038be:	d008      	beq.n	80038d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d002      	beq.n	80038d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b09      	cmp	r3, #9
 80038d0:	d104      	bne.n	80038dc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	e00c      	b.n	80038f6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003a20 <HAL_ADC_IRQHandler+0x244>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d002      	beq.n	80038ec <HAL_ADC_IRQHandler+0x110>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	e000      	b.n	80038ee <HAL_ADC_IRQHandler+0x112>
 80038ec:	4b4b      	ldr	r3, [pc, #300]	@ (8003a1c <HAL_ADC_IRQHandler+0x240>)
 80038ee:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d135      	bne.n	800396c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d12e      	bne.n	800396c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fc58 	bl	80031c8 <LL_ADC_REG_IsConversionOngoing>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d11a      	bne.n	8003954 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 020c 	bic.w	r2, r2, #12
 800392c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003932:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d112      	bne.n	800396c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	661a      	str	r2, [r3, #96]	@ 0x60
 8003952:	e00b      	b.n	800396c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003958:	f043 0210 	orr.w	r2, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fd fe8d 	bl	800168c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	220c      	movs	r2, #12
 8003978:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <HAL_ADC_IRQHandler+0x1b2>
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a0 	beq.w	8003ada <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 809a 	beq.w	8003ada <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fadc 	bl	8002f80 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039c8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fa5a 	bl	8002e88 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039d4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a11      	ldr	r2, [pc, #68]	@ (8003a20 <HAL_ADC_IRQHandler+0x244>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d002      	beq.n	80039e6 <HAL_ADC_IRQHandler+0x20a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	e000      	b.n	80039e8 <HAL_ADC_IRQHandler+0x20c>
 80039e6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <HAL_ADC_IRQHandler+0x240>)
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d008      	beq.n	8003a02 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d002      	beq.n	8003a02 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b07      	cmp	r3, #7
 8003a00:	d104      	bne.n	8003a0c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	623b      	str	r3, [r7, #32]
 8003a0a:	e014      	b.n	8003a36 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a03      	ldr	r2, [pc, #12]	@ (8003a20 <HAL_ADC_IRQHandler+0x244>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00a      	beq.n	8003a2c <HAL_ADC_IRQHandler+0x250>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	e008      	b.n	8003a2e <HAL_ADC_IRQHandler+0x252>
 8003a1c:	40022000 	.word	0x40022000
 8003a20:	40022100 	.word	0x40022100
 8003a24:	40022300 	.word	0x40022300
 8003a28:	58026300 	.word	0x58026300
 8003a2c:	4b84      	ldr	r3, [pc, #528]	@ (8003c40 <HAL_ADC_IRQHandler+0x464>)
 8003a2e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d047      	beq.n	8003acc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_ADC_IRQHandler+0x27a>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d03f      	beq.n	8003acc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d13a      	bne.n	8003acc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a60:	2b40      	cmp	r3, #64	@ 0x40
 8003a62:	d133      	bne.n	8003acc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d12e      	bne.n	8003acc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fbbb 	bl	80031ee <LL_ADC_INJ_IsConversionOngoing>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11a      	bne.n	8003ab4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a8c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d112      	bne.n	8003acc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ab2:	e00b      	b.n	8003acc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f001 f83f 	bl	8004b50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2260      	movs	r2, #96	@ 0x60
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d011      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x32c>
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8b2 	bl	8003c64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2280      	movs	r2, #128	@ 0x80
 8003b06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d012      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x35c>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f001 f825 	bl	8004b78 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d012      	beq.n	8003b68 <HAL_ADC_IRQHandler+0x38c>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b50:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f001 f817 	bl	8004b8c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d043      	beq.n	8003bfa <HAL_ADC_IRQHandler+0x41e>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d03e      	beq.n	8003bfa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003b84:	2301      	movs	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b88:	e021      	b.n	8003bce <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d015      	beq.n	8003bbc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2a      	ldr	r2, [pc, #168]	@ (8003c40 <HAL_ADC_IRQHandler+0x464>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x3c8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a29      	ldr	r2, [pc, #164]	@ (8003c44 <HAL_ADC_IRQHandler+0x468>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_IRQHandler+0x3cc>
 8003ba4:	4b28      	ldr	r3, [pc, #160]	@ (8003c48 <HAL_ADC_IRQHandler+0x46c>)
 8003ba6:	e000      	b.n	8003baa <HAL_ADC_IRQHandler+0x3ce>
 8003ba8:	4b28      	ldr	r3, [pc, #160]	@ (8003c4c <HAL_ADC_IRQHandler+0x470>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fa74 	bl	8003098 <LL_ADC_GetMultiDMATransfer>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bba:	e008      	b.n	8003bce <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be4:	f043 0202 	orr.w	r2, r3, #2
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f843 	bl	8003c78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d018      	beq.n	8003c36 <HAL_ADC_IRQHandler+0x45a>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d013      	beq.n	8003c36 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c12:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c1e:	f043 0208 	orr.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c2e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 ff97 	bl	8004b64 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c36:	bf00      	nop
 8003c38:	3728      	adds	r7, #40	@ 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40022000 	.word	0x40022000
 8003c44:	40022100 	.word	0x40022100
 8003c48:	40022300 	.word	0x40022300
 8003c4c:	58026300 	.word	0x58026300

08003c50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b0b9      	sub	sp, #228	@ 0xe4
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4aab      	ldr	r2, [pc, #684]	@ (8003f5c <HAL_ADC_ConfigChannel+0x2d0>)
 8003cae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d102      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x34>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	f000 bcfe 	b.w	80046bc <HAL_ADC_ConfigChannel+0xa30>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fa7b 	bl	80031c8 <LL_ADC_REG_IsConversionOngoing>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 84e2 	bne.w	800469e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	db38      	blt.n	8003d54 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a9e      	ldr	r2, [pc, #632]	@ (8003f60 <HAL_ADC_ConfigChannel+0x2d4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d033      	beq.n	8003d54 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d108      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x7e>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	0e9b      	lsrs	r3, r3, #26
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	e01d      	b.n	8003d46 <HAL_ADC_ConfigChannel+0xba>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e004      	b.n	8003d3c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003d32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	2201      	movs	r2, #1
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	69d1      	ldr	r1, [r2, #28]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	f7ff f8a4 	bl	8002eae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fa2c 	bl	80031c8 <LL_ADC_REG_IsConversionOngoing>
 8003d70:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fa38 	bl	80031ee <LL_ADC_INJ_IsConversionOngoing>
 8003d7e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8270 	bne.w	800426c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f040 826b 	bne.w	800426c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f7ff f8ff 	bl	8002fa6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6c      	ldr	r2, [pc, #432]	@ (8003f60 <HAL_ADC_ConfigChannel+0x2d4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10d      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	08db      	lsrs	r3, r3, #3
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dcc:	e032      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dce:	4b65      	ldr	r3, [pc, #404]	@ (8003f64 <HAL_ADC_ConfigChannel+0x2d8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dda:	d10b      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x168>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	e01d      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x1a4>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x18e>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	e00a      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x1a4>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695a      	ldr	r2, [r3, #20]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d048      	beq.n	8003ece <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6919      	ldr	r1, [r3, #16]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e4c:	f7fe ff2a 	bl	8002ca4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a42      	ldr	r2, [pc, #264]	@ (8003f60 <HAL_ADC_ConfigChannel+0x2d4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d119      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6919      	ldr	r1, [r3, #16]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f7fe ffc2 	bl	8002df0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6919      	ldr	r1, [r3, #16]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x1f8>
 8003e7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e82:	e000      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x1fa>
 8003e84:	2300      	movs	r3, #0
 8003e86:	461a      	mov	r2, r3
 8003e88:	f7fe ff90 	bl	8002dac <LL_ADC_SetOffsetSaturation>
 8003e8c:	e1ee      	b.n	800426c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6919      	ldr	r1, [r3, #16]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d102      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x21a>
 8003ea0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003ea4:	e000      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x21c>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f7fe ff5d 	bl	8002d68 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6919      	ldr	r1, [r3, #16]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	7e1b      	ldrb	r3, [r3, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d102      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x238>
 8003ebe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ec2:	e000      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x23a>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f7fe ff34 	bl	8002d34 <LL_ADC_SetDataRightShift>
 8003ecc:	e1ce      	b.n	800426c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a23      	ldr	r2, [pc, #140]	@ (8003f60 <HAL_ADC_ConfigChannel+0x2d4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	f040 8181 	bne.w	80041dc <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe ff11 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x27a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe ff06 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	0e9b      	lsrs	r3, r3, #26
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	e01e      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x2b8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fefb 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003f2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003f34:	2320      	movs	r3, #32
 8003f36:	e004      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x2dc>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0e9b      	lsrs	r3, r3, #26
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	e01e      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x30e>
 8003f5c:	47ff0000 	.word	0x47ff0000
 8003f60:	58026000 	.word	0x58026000
 8003f64:	5c001000 	.word	0x5c001000
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003f84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	e004      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f94:	fab3 f383 	clz	r3, r3
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d106      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe ff44 	bl	8002e34 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fea8 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x34c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fe9d 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	0e9b      	lsrs	r3, r3, #26
 8003fd2:	f003 021f 	and.w	r2, r3, #31
 8003fd6:	e01e      	b.n	8004016 <HAL_ADC_ConfigChannel+0x38a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fe92 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fee:	fa93 f3a3 	rbit	r3, r3
 8003ff2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003ffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8004006:	2320      	movs	r3, #32
 8004008:	e004      	b.n	8004014 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800400a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <HAL_ADC_ConfigChannel+0x3a2>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	0e9b      	lsrs	r3, r3, #26
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	e018      	b.n	8004060 <HAL_ADC_ConfigChannel+0x3d4>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004042:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004046:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800404a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8004052:	2320      	movs	r3, #32
 8004054:	e004      	b.n	8004060 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004056:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	429a      	cmp	r2, r3
 8004062:	d106      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2200      	movs	r2, #0
 800406a:	2101      	movs	r1, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fee1 	bl	8002e34 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2102      	movs	r1, #2
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fe45 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 800407e:	4603      	mov	r3, r0
 8004080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <HAL_ADC_ConfigChannel+0x412>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2102      	movs	r1, #2
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fe3a 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	0e9b      	lsrs	r3, r3, #26
 8004098:	f003 021f 	and.w	r2, r3, #31
 800409c:	e01e      	b.n	80040dc <HAL_ADC_ConfigChannel+0x450>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2102      	movs	r1, #2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fe2f 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80040bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80040c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80040cc:	2320      	movs	r3, #32
 80040ce:	e004      	b.n	80040da <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80040d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x468>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	e014      	b.n	800411e <HAL_ADC_ConfigChannel+0x492>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004102:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004108:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004110:	2320      	movs	r3, #32
 8004112:	e004      	b.n	800411e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004114:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004118:	fab3 f383 	clz	r3, r3
 800411c:	b2db      	uxtb	r3, r3
 800411e:	429a      	cmp	r2, r3
 8004120:	d106      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	2102      	movs	r1, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fe82 	bl	8002e34 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2103      	movs	r1, #3
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fde6 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 800413c:	4603      	mov	r3, r0
 800413e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <HAL_ADC_ConfigChannel+0x4d0>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2103      	movs	r1, #3
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe fddb 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 8004152:	4603      	mov	r3, r0
 8004154:	0e9b      	lsrs	r3, r3, #26
 8004156:	f003 021f 	and.w	r2, r3, #31
 800415a:	e017      	b.n	800418c <HAL_ADC_ConfigChannel+0x500>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2103      	movs	r1, #3
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fdd0 	bl	8002d08 <LL_ADC_GetOffsetChannel>
 8004168:	4603      	mov	r3, r0
 800416a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800416e:	fa93 f3a3 	rbit	r3, r3
 8004172:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004176:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004178:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800417e:	2320      	movs	r3, #32
 8004180:	e003      	b.n	800418a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004182:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004184:	fab3 f383 	clz	r3, r3
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x518>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0e9b      	lsrs	r3, r3, #26
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	e011      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x53c>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80041b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80041b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80041bc:	2320      	movs	r3, #32
 80041be:	e003      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80041c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d14f      	bne.n	800426c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2103      	movs	r1, #3
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe fe2d 	bl	8002e34 <LL_ADC_SetOffsetState>
 80041da:	e047      	b.n	800426c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	069b      	lsls	r3, r3, #26
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d107      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041fe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	069b      	lsls	r3, r3, #26
 8004210:	429a      	cmp	r2, r3
 8004212:	d107      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004222:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800422a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	069b      	lsls	r3, r3, #26
 8004234:	429a      	cmp	r2, r3
 8004236:	d107      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004246:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800424e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	069b      	lsls	r3, r3, #26
 8004258:	429a      	cmp	r2, r3
 800425a:	d107      	bne.n	800426c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800426a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe ff81 	bl	8003178 <LL_ADC_IsEnabled>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 8219 	bne.w	80046b0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	461a      	mov	r2, r3
 800428c:	f7fe feb6 	bl	8002ffc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4aa1      	ldr	r2, [pc, #644]	@ (800451c <HAL_ADC_ConfigChannel+0x890>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f040 812e 	bne.w	80044f8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x638>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	0e9b      	lsrs	r3, r3, #26
 80042b2:	3301      	adds	r3, #1
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2b09      	cmp	r3, #9
 80042ba:	bf94      	ite	ls
 80042bc:	2301      	movls	r3, #1
 80042be:	2300      	movhi	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e019      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x66c>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80042d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80042d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80042dc:	2320      	movs	r3, #32
 80042de:	e003      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80042e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2b09      	cmp	r3, #9
 80042f0:	bf94      	ite	ls
 80042f2:	2301      	movls	r3, #1
 80042f4:	2300      	movhi	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d079      	beq.n	80043f0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x68c>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	0e9b      	lsrs	r3, r3, #26
 800430e:	3301      	adds	r3, #1
 8004310:	069b      	lsls	r3, r3, #26
 8004312:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004316:	e015      	b.n	8004344 <HAL_ADC_ConfigChannel+0x6b8>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004320:	fa93 f3a3 	rbit	r3, r3
 8004324:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004328:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800432a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004330:	2320      	movs	r3, #32
 8004332:	e003      	b.n	800433c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004336:	fab3 f383 	clz	r3, r3
 800433a:	b2db      	uxtb	r3, r3
 800433c:	3301      	adds	r3, #1
 800433e:	069b      	lsls	r3, r3, #26
 8004340:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x6d8>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	3301      	adds	r3, #1
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	e017      	b.n	8004394 <HAL_ADC_ConfigChannel+0x708>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004374:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800437c:	2320      	movs	r3, #32
 800437e:	e003      	b.n	8004388 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	3301      	adds	r3, #1
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	2101      	movs	r1, #1
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	ea42 0103 	orr.w	r1, r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x72e>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	0e9b      	lsrs	r3, r3, #26
 80043aa:	3301      	adds	r3, #1
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4613      	mov	r3, r2
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	4413      	add	r3, r2
 80043b6:	051b      	lsls	r3, r3, #20
 80043b8:	e018      	b.n	80043ec <HAL_ADC_ConfigChannel+0x760>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80043cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80043d2:	2320      	movs	r3, #32
 80043d4:	e003      	b.n	80043de <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	fab3 f383 	clz	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	4613      	mov	r3, r2
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	4413      	add	r3, r2
 80043ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ec:	430b      	orrs	r3, r1
 80043ee:	e07e      	b.n	80044ee <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <HAL_ADC_ConfigChannel+0x780>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	3301      	adds	r3, #1
 8004404:	069b      	lsls	r3, r3, #26
 8004406:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800440a:	e015      	b.n	8004438 <HAL_ADC_ConfigChannel+0x7ac>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	fa93 f3a3 	rbit	r3, r3
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004424:	2320      	movs	r3, #32
 8004426:	e003      	b.n	8004430 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	3301      	adds	r3, #1
 8004432:	069b      	lsls	r3, r3, #26
 8004434:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x7cc>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	0e9b      	lsrs	r3, r3, #26
 800444a:	3301      	adds	r3, #1
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	e017      	b.n	8004488 <HAL_ADC_ConfigChannel+0x7fc>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	61bb      	str	r3, [r7, #24]
  return result;
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004470:	2320      	movs	r3, #32
 8004472:	e003      	b.n	800447c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	3301      	adds	r3, #1
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f303 	lsl.w	r3, r1, r3
 8004488:	ea42 0103 	orr.w	r1, r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10d      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x828>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0e9b      	lsrs	r3, r3, #26
 800449e:	3301      	adds	r3, #1
 80044a0:	f003 021f 	and.w	r2, r3, #31
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	3b1e      	subs	r3, #30
 80044ac:	051b      	lsls	r3, r3, #20
 80044ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044b2:	e01b      	b.n	80044ec <HAL_ADC_ConfigChannel+0x860>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	60fb      	str	r3, [r7, #12]
  return result;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80044cc:	2320      	movs	r3, #32
 80044ce:	e003      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f003 021f 	and.w	r2, r3, #31
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	3b1e      	subs	r3, #30
 80044e6:	051b      	lsls	r3, r3, #20
 80044e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ec:	430b      	orrs	r3, r1
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	6892      	ldr	r2, [r2, #8]
 80044f2:	4619      	mov	r1, r3
 80044f4:	f7fe fd57 	bl	8002fa6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f280 80d7 	bge.w	80046b0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a06      	ldr	r2, [pc, #24]	@ (8004520 <HAL_ADC_ConfigChannel+0x894>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_ADC_ConfigChannel+0x88a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a04      	ldr	r2, [pc, #16]	@ (8004524 <HAL_ADC_ConfigChannel+0x898>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10a      	bne.n	800452c <HAL_ADC_ConfigChannel+0x8a0>
 8004516:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <HAL_ADC_ConfigChannel+0x89c>)
 8004518:	e009      	b.n	800452e <HAL_ADC_ConfigChannel+0x8a2>
 800451a:	bf00      	nop
 800451c:	47ff0000 	.word	0x47ff0000
 8004520:	40022000 	.word	0x40022000
 8004524:	40022100 	.word	0x40022100
 8004528:	40022300 	.word	0x40022300
 800452c:	4b65      	ldr	r3, [pc, #404]	@ (80046c4 <HAL_ADC_ConfigChannel+0xa38>)
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fbaa 	bl	8002c88 <LL_ADC_GetCommonPathInternalCh>
 8004534:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a62      	ldr	r2, [pc, #392]	@ (80046c8 <HAL_ADC_ConfigChannel+0xa3c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_ADC_ConfigChannel+0x8c0>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a61      	ldr	r2, [pc, #388]	@ (80046cc <HAL_ADC_ConfigChannel+0xa40>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d10e      	bne.n	800456a <HAL_ADC_ConfigChannel+0x8de>
 800454c:	485e      	ldr	r0, [pc, #376]	@ (80046c8 <HAL_ADC_ConfigChannel+0xa3c>)
 800454e:	f7fe fe13 	bl	8003178 <LL_ADC_IsEnabled>
 8004552:	4604      	mov	r4, r0
 8004554:	485d      	ldr	r0, [pc, #372]	@ (80046cc <HAL_ADC_ConfigChannel+0xa40>)
 8004556:	f7fe fe0f 	bl	8003178 <LL_ADC_IsEnabled>
 800455a:	4603      	mov	r3, r0
 800455c:	4323      	orrs	r3, r4
 800455e:	2b00      	cmp	r3, #0
 8004560:	bf0c      	ite	eq
 8004562:	2301      	moveq	r3, #1
 8004564:	2300      	movne	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	e008      	b.n	800457c <HAL_ADC_ConfigChannel+0x8f0>
 800456a:	4859      	ldr	r0, [pc, #356]	@ (80046d0 <HAL_ADC_ConfigChannel+0xa44>)
 800456c:	f7fe fe04 	bl	8003178 <LL_ADC_IsEnabled>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8084 	beq.w	800468a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a53      	ldr	r2, [pc, #332]	@ (80046d4 <HAL_ADC_ConfigChannel+0xa48>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d132      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x966>
 800458c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004590:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d12c      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a4c      	ldr	r2, [pc, #304]	@ (80046d0 <HAL_ADC_ConfigChannel+0xa44>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	f040 8086 	bne.w	80046b0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a47      	ldr	r2, [pc, #284]	@ (80046c8 <HAL_ADC_ConfigChannel+0xa3c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_ADC_ConfigChannel+0x92c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a46      	ldr	r2, [pc, #280]	@ (80046cc <HAL_ADC_ConfigChannel+0xa40>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x930>
 80045b8:	4a47      	ldr	r2, [pc, #284]	@ (80046d8 <HAL_ADC_ConfigChannel+0xa4c>)
 80045ba:	e000      	b.n	80045be <HAL_ADC_ConfigChannel+0x932>
 80045bc:	4a41      	ldr	r2, [pc, #260]	@ (80046c4 <HAL_ADC_ConfigChannel+0xa38>)
 80045be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f7fe fb4a 	bl	8002c62 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ce:	4b43      	ldr	r3, [pc, #268]	@ (80046dc <HAL_ADC_ConfigChannel+0xa50>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	4a42      	ldr	r2, [pc, #264]	@ (80046e0 <HAL_ADC_ConfigChannel+0xa54>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	3301      	adds	r3, #1
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045e2:	e002      	b.n	80045ea <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f9      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045f0:	e05e      	b.n	80046b0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a3b      	ldr	r2, [pc, #236]	@ (80046e4 <HAL_ADC_ConfigChannel+0xa58>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d120      	bne.n	800463e <HAL_ADC_ConfigChannel+0x9b2>
 80045fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004600:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11a      	bne.n	800463e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a30      	ldr	r2, [pc, #192]	@ (80046d0 <HAL_ADC_ConfigChannel+0xa44>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d14e      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2c      	ldr	r2, [pc, #176]	@ (80046c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_ADC_ConfigChannel+0x99a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2a      	ldr	r2, [pc, #168]	@ (80046cc <HAL_ADC_ConfigChannel+0xa40>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d101      	bne.n	800462a <HAL_ADC_ConfigChannel+0x99e>
 8004626:	4a2c      	ldr	r2, [pc, #176]	@ (80046d8 <HAL_ADC_ConfigChannel+0xa4c>)
 8004628:	e000      	b.n	800462c <HAL_ADC_ConfigChannel+0x9a0>
 800462a:	4a26      	ldr	r2, [pc, #152]	@ (80046c4 <HAL_ADC_ConfigChannel+0xa38>)
 800462c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004630:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fe fb13 	bl	8002c62 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800463c:	e038      	b.n	80046b0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a29      	ldr	r2, [pc, #164]	@ (80046e8 <HAL_ADC_ConfigChannel+0xa5c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d133      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0xa24>
 8004648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800464c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d12d      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <HAL_ADC_ConfigChannel+0xa44>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d128      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a19      	ldr	r2, [pc, #100]	@ (80046c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_ADC_ConfigChannel+0x9e6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a17      	ldr	r2, [pc, #92]	@ (80046cc <HAL_ADC_ConfigChannel+0xa40>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d101      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x9ea>
 8004672:	4a19      	ldr	r2, [pc, #100]	@ (80046d8 <HAL_ADC_ConfigChannel+0xa4c>)
 8004674:	e000      	b.n	8004678 <HAL_ADC_ConfigChannel+0x9ec>
 8004676:	4a13      	ldr	r2, [pc, #76]	@ (80046c4 <HAL_ADC_ConfigChannel+0xa38>)
 8004678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800467c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f7fe faed 	bl	8002c62 <LL_ADC_SetCommonPathInternalCh>
 8004688:	e012      	b.n	80046b0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800469c:	e008      	b.n	80046b0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046b8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80046bc:	4618      	mov	r0, r3
 80046be:	37e4      	adds	r7, #228	@ 0xe4
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd90      	pop	{r4, r7, pc}
 80046c4:	58026300 	.word	0x58026300
 80046c8:	40022000 	.word	0x40022000
 80046cc:	40022100 	.word	0x40022100
 80046d0:	58026000 	.word	0x58026000
 80046d4:	c7520000 	.word	0xc7520000
 80046d8:	40022300 	.word	0x40022300
 80046dc:	2400000c 	.word	0x2400000c
 80046e0:	053e2d63 	.word	0x053e2d63
 80046e4:	c3210000 	.word	0xc3210000
 80046e8:	cb840000 	.word	0xcb840000

080046ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fd3d 	bl	8003178 <LL_ADC_IsEnabled>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d16e      	bne.n	80047e2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	4b38      	ldr	r3, [pc, #224]	@ (80047ec <ADC_Enable+0x100>)
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004716:	f043 0210 	orr.w	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004722:	f043 0201 	orr.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e05a      	b.n	80047e4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fd0c 	bl	8003150 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004738:	f7fe fa50 	bl	8002bdc <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2b      	ldr	r2, [pc, #172]	@ (80047f0 <ADC_Enable+0x104>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <ADC_Enable+0x66>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a29      	ldr	r2, [pc, #164]	@ (80047f4 <ADC_Enable+0x108>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d101      	bne.n	8004756 <ADC_Enable+0x6a>
 8004752:	4b29      	ldr	r3, [pc, #164]	@ (80047f8 <ADC_Enable+0x10c>)
 8004754:	e000      	b.n	8004758 <ADC_Enable+0x6c>
 8004756:	4b29      	ldr	r3, [pc, #164]	@ (80047fc <ADC_Enable+0x110>)
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fc8f 	bl	800307c <LL_ADC_GetMultimode>
 800475e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a23      	ldr	r2, [pc, #140]	@ (80047f4 <ADC_Enable+0x108>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d002      	beq.n	8004770 <ADC_Enable+0x84>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	e000      	b.n	8004772 <ADC_Enable+0x86>
 8004770:	4b1f      	ldr	r3, [pc, #124]	@ (80047f0 <ADC_Enable+0x104>)
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	4293      	cmp	r3, r2
 8004778:	d02c      	beq.n	80047d4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d130      	bne.n	80047e2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004780:	e028      	b.n	80047d4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fcf6 	bl	8003178 <LL_ADC_IsEnabled>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fcda 	bl	8003150 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800479c:	f7fe fa1e 	bl	8002bdc <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d914      	bls.n	80047d4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d00d      	beq.n	80047d4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047bc:	f043 0210 	orr.w	r2, r3, #16
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e007      	b.n	80047e4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d1cf      	bne.n	8004782 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	8000003f 	.word	0x8000003f
 80047f0:	40022000 	.word	0x40022000
 80047f4:	40022100 	.word	0x40022100
 80047f8:	40022300 	.word	0x40022300
 80047fc:	58026300 	.word	0x58026300

08004800 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004812:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004816:	2b00      	cmp	r3, #0
 8004818:	d14b      	bne.n	80048b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d021      	beq.n	8004878 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7fe fb25 	bl	8002e88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d032      	beq.n	80048aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d12b      	bne.n	80048aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11f      	bne.n	80048aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	661a      	str	r2, [r3, #96]	@ 0x60
 8004876:	e018      	b.n	80048aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d111      	bne.n	80048aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004896:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7fc feee 	bl	800168c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048b0:	e00e      	b.n	80048d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff f9da 	bl	8003c78 <HAL_ADC_ErrorCallback>
}
 80048c4:	e004      	b.n	80048d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	4798      	blx	r3
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff f9b2 	bl	8003c50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004900:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004906:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004912:	f043 0204 	orr.w	r2, r3, #4
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff f9ac 	bl	8003c78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a6c      	ldr	r2, [pc, #432]	@ (8004ae8 <ADC_ConfigureBoostMode+0x1c0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <ADC_ConfigureBoostMode+0x1c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a6b      	ldr	r2, [pc, #428]	@ (8004aec <ADC_ConfigureBoostMode+0x1c4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d109      	bne.n	8004958 <ADC_ConfigureBoostMode+0x30>
 8004944:	4b6a      	ldr	r3, [pc, #424]	@ (8004af0 <ADC_ConfigureBoostMode+0x1c8>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	e008      	b.n	800496a <ADC_ConfigureBoostMode+0x42>
 8004958:	4b66      	ldr	r3, [pc, #408]	@ (8004af4 <ADC_ConfigureBoostMode+0x1cc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01c      	beq.n	80049a8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800496e:	f004 fec7 	bl	8009700 <HAL_RCC_GetHCLKFreq>
 8004972:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800497c:	d010      	beq.n	80049a0 <ADC_ConfigureBoostMode+0x78>
 800497e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004982:	d873      	bhi.n	8004a6c <ADC_ConfigureBoostMode+0x144>
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004988:	d002      	beq.n	8004990 <ADC_ConfigureBoostMode+0x68>
 800498a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800498e:	d16d      	bne.n	8004a6c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	60fb      	str	r3, [r7, #12]
        break;
 800499e:	e068      	b.n	8004a72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	60fb      	str	r3, [r7, #12]
        break;
 80049a6:	e064      	b.n	8004a72 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80049a8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80049ac:	f04f 0100 	mov.w	r1, #0
 80049b0:	f006 f8a2 	bl	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq>
 80049b4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80049be:	d051      	beq.n	8004a64 <ADC_ConfigureBoostMode+0x13c>
 80049c0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80049c4:	d854      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x148>
 80049c6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80049ca:	d047      	beq.n	8004a5c <ADC_ConfigureBoostMode+0x134>
 80049cc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80049d0:	d84e      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x148>
 80049d2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049d6:	d03d      	beq.n	8004a54 <ADC_ConfigureBoostMode+0x12c>
 80049d8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049dc:	d848      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x148>
 80049de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049e2:	d033      	beq.n	8004a4c <ADC_ConfigureBoostMode+0x124>
 80049e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049e8:	d842      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x148>
 80049ea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80049ee:	d029      	beq.n	8004a44 <ADC_ConfigureBoostMode+0x11c>
 80049f0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80049f4:	d83c      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x148>
 80049f6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80049fa:	d01a      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x10a>
 80049fc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a00:	d836      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x148>
 8004a02:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a06:	d014      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x10a>
 8004a08:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a0c:	d830      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x148>
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a12:	d00e      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x10a>
 8004a14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a18:	d82a      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x148>
 8004a1a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a1e:	d008      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x10a>
 8004a20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a24:	d824      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x148>
 8004a26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a2a:	d002      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x10a>
 8004a2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a30:	d11e      	bne.n	8004a70 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	0c9b      	lsrs	r3, r3, #18
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	60fb      	str	r3, [r7, #12]
        break;
 8004a42:	e016      	b.n	8004a72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
        break;
 8004a4a:	e012      	b.n	8004a72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	60fb      	str	r3, [r7, #12]
        break;
 8004a52:	e00e      	b.n	8004a72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	099b      	lsrs	r3, r3, #6
 8004a58:	60fb      	str	r3, [r7, #12]
        break;
 8004a5a:	e00a      	b.n	8004a72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	09db      	lsrs	r3, r3, #7
 8004a60:	60fb      	str	r3, [r7, #12]
        break;
 8004a62:	e006      	b.n	8004a72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	60fb      	str	r3, [r7, #12]
        break;
 8004a6a:	e002      	b.n	8004a72 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a70:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <ADC_ConfigureBoostMode+0x1d0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d808      	bhi.n	8004a92 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a8e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a90:	e025      	b.n	8004ade <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a19      	ldr	r2, [pc, #100]	@ (8004afc <ADC_ConfigureBoostMode+0x1d4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d80a      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aac:	609a      	str	r2, [r3, #8]
}
 8004aae:	e016      	b.n	8004ade <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a13      	ldr	r2, [pc, #76]	@ (8004b00 <ADC_ConfigureBoostMode+0x1d8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d80a      	bhi.n	8004ace <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	e007      	b.n	8004ade <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004adc:	609a      	str	r2, [r3, #8]
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40022000 	.word	0x40022000
 8004aec:	40022100 	.word	0x40022100
 8004af0:	40022300 	.word	0x40022300
 8004af4:	58026300 	.word	0x58026300
 8004af8:	005f5e10 	.word	0x005f5e10
 8004afc:	00bebc20 	.word	0x00bebc20
 8004b00:	017d7840 	.word	0x017d7840

08004b04 <LL_ADC_IsEnabled>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <LL_ADC_IsEnabled+0x18>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <LL_ADC_IsEnabled+0x1a>
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d101      	bne.n	8004b42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b0a3      	sub	sp, #140	@ 0x8c
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e0c1      	b.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a5e      	ldr	r2, [pc, #376]	@ (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d102      	bne.n	8004bf2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bec:	4b5d      	ldr	r3, [pc, #372]	@ (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e001      	b.n	8004bf6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0a0      	b.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff ff87 	bl	8004b2a <LL_ADC_REG_IsConversionOngoing>
 8004c1c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ff80 	bl	8004b2a <LL_ADC_REG_IsConversionOngoing>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 8081 	bne.w	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d17c      	bne.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a48      	ldr	r2, [pc, #288]	@ (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a46      	ldr	r2, [pc, #280]	@ (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c4e:	4b46      	ldr	r3, [pc, #280]	@ (8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c50:	e000      	b.n	8004c54 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c52:	4b46      	ldr	r3, [pc, #280]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c54:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d039      	beq.n	8004cd2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3a      	ldr	r2, [pc, #232]	@ (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a39      	ldr	r2, [pc, #228]	@ (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d10e      	bne.n	8004ca2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c84:	4836      	ldr	r0, [pc, #216]	@ (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c86:	f7ff ff3d 	bl	8004b04 <LL_ADC_IsEnabled>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4835      	ldr	r0, [pc, #212]	@ (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c8e:	f7ff ff39 	bl	8004b04 <LL_ADC_IsEnabled>
 8004c92:	4603      	mov	r3, r0
 8004c94:	4323      	orrs	r3, r4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	e008      	b.n	8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004ca2:	4833      	ldr	r0, [pc, #204]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ca4:	f7ff ff2e 	bl	8004b04 <LL_ADC_IsEnabled>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d047      	beq.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	6811      	ldr	r1, [r2, #0]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	6892      	ldr	r2, [r2, #8]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cce:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cd0:	e03a      	b.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004cd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cdc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	@ (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d10e      	bne.n	8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004cf2:	481b      	ldr	r0, [pc, #108]	@ (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cf4:	f7ff ff06 	bl	8004b04 <LL_ADC_IsEnabled>
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	481a      	ldr	r0, [pc, #104]	@ (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cfc:	f7ff ff02 	bl	8004b04 <LL_ADC_IsEnabled>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4323      	orrs	r3, r4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	e008      	b.n	8004d22 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004d10:	4817      	ldr	r0, [pc, #92]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d12:	f7ff fef7 	bl	8004b04 <LL_ADC_IsEnabled>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	4b12      	ldr	r3, [pc, #72]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004d30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d32:	e009      	b.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004d46:	e000      	b.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d52:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	378c      	adds	r7, #140	@ 0x8c
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40022000 	.word	0x40022000
 8004d64:	40022100 	.word	0x40022100
 8004d68:	40022300 	.word	0x40022300
 8004d6c:	58026300 	.word	0x58026300
 8004d70:	58026000 	.word	0x58026000
 8004d74:	fffff0e0 	.word	0xfffff0e0

08004d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d88:	4b0b      	ldr	r3, [pc, #44]	@ (8004db8 <__NVIC_SetPriorityGrouping+0x40>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d94:	4013      	ands	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004da0:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <__NVIC_SetPriorityGrouping+0x44>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004da6:	4a04      	ldr	r2, [pc, #16]	@ (8004db8 <__NVIC_SetPriorityGrouping+0x40>)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	60d3      	str	r3, [r2, #12]
}
 8004dac:	bf00      	nop
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	e000ed00 	.word	0xe000ed00
 8004dbc:	05fa0000 	.word	0x05fa0000

08004dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dc4:	4b04      	ldr	r3, [pc, #16]	@ (8004dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	f003 0307 	and.w	r3, r3, #7
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	e000ed00 	.word	0xe000ed00

08004ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	db0b      	blt.n	8004e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	f003 021f 	and.w	r2, r3, #31
 8004df4:	4907      	ldr	r1, [pc, #28]	@ (8004e14 <__NVIC_EnableIRQ+0x38>)
 8004df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2001      	movs	r0, #1
 8004dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8004e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	e000e100 	.word	0xe000e100

08004e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	6039      	str	r1, [r7, #0]
 8004e22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	db0a      	blt.n	8004e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	490c      	ldr	r1, [pc, #48]	@ (8004e64 <__NVIC_SetPriority+0x4c>)
 8004e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e36:	0112      	lsls	r2, r2, #4
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e40:	e00a      	b.n	8004e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	4908      	ldr	r1, [pc, #32]	@ (8004e68 <__NVIC_SetPriority+0x50>)
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	3b04      	subs	r3, #4
 8004e50:	0112      	lsls	r2, r2, #4
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	440b      	add	r3, r1
 8004e56:	761a      	strb	r2, [r3, #24]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	e000e100 	.word	0xe000e100
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b089      	sub	sp, #36	@ 0x24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f1c3 0307 	rsb	r3, r3, #7
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	bf28      	it	cs
 8004e8a:	2304      	movcs	r3, #4
 8004e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	3304      	adds	r3, #4
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d902      	bls.n	8004e9c <NVIC_EncodePriority+0x30>
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3b03      	subs	r3, #3
 8004e9a:	e000      	b.n	8004e9e <NVIC_EncodePriority+0x32>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43da      	mvns	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	401a      	ands	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	43d9      	mvns	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec4:	4313      	orrs	r3, r2
         );
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3724      	adds	r7, #36	@ 0x24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ee4:	d301      	bcc.n	8004eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e00f      	b.n	8004f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eea:	4a0a      	ldr	r2, [pc, #40]	@ (8004f14 <SysTick_Config+0x40>)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ef2:	210f      	movs	r1, #15
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	f7ff ff8e 	bl	8004e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004efc:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <SysTick_Config+0x40>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f02:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <SysTick_Config+0x40>)
 8004f04:	2207      	movs	r2, #7
 8004f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	e000e010 	.word	0xe000e010

08004f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff29 	bl	8004d78 <__NVIC_SetPriorityGrouping>
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	4603      	mov	r3, r0
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
 8004f3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f3c:	f7ff ff40 	bl	8004dc0 <__NVIC_GetPriorityGrouping>
 8004f40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	6978      	ldr	r0, [r7, #20]
 8004f48:	f7ff ff90 	bl	8004e6c <NVIC_EncodePriority>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f52:	4611      	mov	r1, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff ff5f 	bl	8004e18 <__NVIC_SetPriority>
}
 8004f5a:	bf00      	nop
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	4603      	mov	r3, r0
 8004f6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff ff33 	bl	8004ddc <__NVIC_EnableIRQ>
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ffa4 	bl	8004ed4 <SysTick_Config>
 8004f8c:	4603      	mov	r3, r0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fa0:	f7fd fe1c 	bl	8002bdc <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e312      	b.n	80055d6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a66      	ldr	r2, [pc, #408]	@ (8005150 <HAL_DMA_Init+0x1b8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d04a      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a65      	ldr	r2, [pc, #404]	@ (8005154 <HAL_DMA_Init+0x1bc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d045      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a63      	ldr	r2, [pc, #396]	@ (8005158 <HAL_DMA_Init+0x1c0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d040      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a62      	ldr	r2, [pc, #392]	@ (800515c <HAL_DMA_Init+0x1c4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d03b      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a60      	ldr	r2, [pc, #384]	@ (8005160 <HAL_DMA_Init+0x1c8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d036      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a5f      	ldr	r2, [pc, #380]	@ (8005164 <HAL_DMA_Init+0x1cc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d031      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a5d      	ldr	r2, [pc, #372]	@ (8005168 <HAL_DMA_Init+0x1d0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d02c      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800516c <HAL_DMA_Init+0x1d4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d027      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a5a      	ldr	r2, [pc, #360]	@ (8005170 <HAL_DMA_Init+0x1d8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d022      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a59      	ldr	r2, [pc, #356]	@ (8005174 <HAL_DMA_Init+0x1dc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d01d      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a57      	ldr	r2, [pc, #348]	@ (8005178 <HAL_DMA_Init+0x1e0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d018      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a56      	ldr	r2, [pc, #344]	@ (800517c <HAL_DMA_Init+0x1e4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a54      	ldr	r2, [pc, #336]	@ (8005180 <HAL_DMA_Init+0x1e8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00e      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a53      	ldr	r2, [pc, #332]	@ (8005184 <HAL_DMA_Init+0x1ec>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a51      	ldr	r2, [pc, #324]	@ (8005188 <HAL_DMA_Init+0x1f0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_DMA_Init+0xb8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a50      	ldr	r2, [pc, #320]	@ (800518c <HAL_DMA_Init+0x1f4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <HAL_DMA_Init+0xbc>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_DMA_Init+0xbe>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 813c 	beq.w	80052d4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a37      	ldr	r2, [pc, #220]	@ (8005150 <HAL_DMA_Init+0x1b8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d04a      	beq.n	800510c <HAL_DMA_Init+0x174>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a36      	ldr	r2, [pc, #216]	@ (8005154 <HAL_DMA_Init+0x1bc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d045      	beq.n	800510c <HAL_DMA_Init+0x174>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a34      	ldr	r2, [pc, #208]	@ (8005158 <HAL_DMA_Init+0x1c0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d040      	beq.n	800510c <HAL_DMA_Init+0x174>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a33      	ldr	r2, [pc, #204]	@ (800515c <HAL_DMA_Init+0x1c4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d03b      	beq.n	800510c <HAL_DMA_Init+0x174>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a31      	ldr	r2, [pc, #196]	@ (8005160 <HAL_DMA_Init+0x1c8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d036      	beq.n	800510c <HAL_DMA_Init+0x174>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a30      	ldr	r2, [pc, #192]	@ (8005164 <HAL_DMA_Init+0x1cc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d031      	beq.n	800510c <HAL_DMA_Init+0x174>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <HAL_DMA_Init+0x1d0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d02c      	beq.n	800510c <HAL_DMA_Init+0x174>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2d      	ldr	r2, [pc, #180]	@ (800516c <HAL_DMA_Init+0x1d4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d027      	beq.n	800510c <HAL_DMA_Init+0x174>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005170 <HAL_DMA_Init+0x1d8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d022      	beq.n	800510c <HAL_DMA_Init+0x174>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005174 <HAL_DMA_Init+0x1dc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d01d      	beq.n	800510c <HAL_DMA_Init+0x174>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a28      	ldr	r2, [pc, #160]	@ (8005178 <HAL_DMA_Init+0x1e0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d018      	beq.n	800510c <HAL_DMA_Init+0x174>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a27      	ldr	r2, [pc, #156]	@ (800517c <HAL_DMA_Init+0x1e4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d013      	beq.n	800510c <HAL_DMA_Init+0x174>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a25      	ldr	r2, [pc, #148]	@ (8005180 <HAL_DMA_Init+0x1e8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00e      	beq.n	800510c <HAL_DMA_Init+0x174>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a24      	ldr	r2, [pc, #144]	@ (8005184 <HAL_DMA_Init+0x1ec>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <HAL_DMA_Init+0x174>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a22      	ldr	r2, [pc, #136]	@ (8005188 <HAL_DMA_Init+0x1f0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_DMA_Init+0x174>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a21      	ldr	r2, [pc, #132]	@ (800518c <HAL_DMA_Init+0x1f4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d108      	bne.n	800511e <HAL_DMA_Init+0x186>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0201 	bic.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e007      	b.n	800512e <HAL_DMA_Init+0x196>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800512e:	e02f      	b.n	8005190 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005130:	f7fd fd54 	bl	8002bdc <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b05      	cmp	r3, #5
 800513c:	d928      	bls.n	8005190 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2203      	movs	r2, #3
 8005148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e242      	b.n	80055d6 <HAL_DMA_Init+0x63e>
 8005150:	40020010 	.word	0x40020010
 8005154:	40020028 	.word	0x40020028
 8005158:	40020040 	.word	0x40020040
 800515c:	40020058 	.word	0x40020058
 8005160:	40020070 	.word	0x40020070
 8005164:	40020088 	.word	0x40020088
 8005168:	400200a0 	.word	0x400200a0
 800516c:	400200b8 	.word	0x400200b8
 8005170:	40020410 	.word	0x40020410
 8005174:	40020428 	.word	0x40020428
 8005178:	40020440 	.word	0x40020440
 800517c:	40020458 	.word	0x40020458
 8005180:	40020470 	.word	0x40020470
 8005184:	40020488 	.word	0x40020488
 8005188:	400204a0 	.word	0x400204a0
 800518c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1c8      	bne.n	8005130 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4b83      	ldr	r3, [pc, #524]	@ (80053b8 <HAL_DMA_Init+0x420>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80051b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d107      	bne.n	80051f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ec:	4313      	orrs	r3, r2
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b28      	cmp	r3, #40	@ 0x28
 80051fa:	d903      	bls.n	8005204 <HAL_DMA_Init+0x26c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b2e      	cmp	r3, #46	@ 0x2e
 8005202:	d91f      	bls.n	8005244 <HAL_DMA_Init+0x2ac>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b3e      	cmp	r3, #62	@ 0x3e
 800520a:	d903      	bls.n	8005214 <HAL_DMA_Init+0x27c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b42      	cmp	r3, #66	@ 0x42
 8005212:	d917      	bls.n	8005244 <HAL_DMA_Init+0x2ac>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b46      	cmp	r3, #70	@ 0x46
 800521a:	d903      	bls.n	8005224 <HAL_DMA_Init+0x28c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b48      	cmp	r3, #72	@ 0x48
 8005222:	d90f      	bls.n	8005244 <HAL_DMA_Init+0x2ac>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b4e      	cmp	r3, #78	@ 0x4e
 800522a:	d903      	bls.n	8005234 <HAL_DMA_Init+0x29c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b52      	cmp	r3, #82	@ 0x52
 8005232:	d907      	bls.n	8005244 <HAL_DMA_Init+0x2ac>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b73      	cmp	r3, #115	@ 0x73
 800523a:	d905      	bls.n	8005248 <HAL_DMA_Init+0x2b0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b77      	cmp	r3, #119	@ 0x77
 8005242:	d801      	bhi.n	8005248 <HAL_DMA_Init+0x2b0>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_DMA_Init+0x2b2>
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005254:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f023 0307 	bic.w	r3, r3, #7
 800526c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	2b04      	cmp	r3, #4
 800527e:	d117      	bne.n	80052b0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00e      	beq.n	80052b0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 fdca 	bl	8006e2c <DMA_CheckFifoParam>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2240      	movs	r2, #64	@ 0x40
 80052a2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e192      	b.n	80055d6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 fd05 	bl	8006cc8 <DMA_CalcBaseAndBitshift>
 80052be:	4603      	mov	r3, r0
 80052c0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	223f      	movs	r2, #63	@ 0x3f
 80052cc:	409a      	lsls	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	609a      	str	r2, [r3, #8]
 80052d2:	e0c8      	b.n	8005466 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a38      	ldr	r2, [pc, #224]	@ (80053bc <HAL_DMA_Init+0x424>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d022      	beq.n	8005324 <HAL_DMA_Init+0x38c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a37      	ldr	r2, [pc, #220]	@ (80053c0 <HAL_DMA_Init+0x428>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d01d      	beq.n	8005324 <HAL_DMA_Init+0x38c>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a35      	ldr	r2, [pc, #212]	@ (80053c4 <HAL_DMA_Init+0x42c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <HAL_DMA_Init+0x38c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a34      	ldr	r2, [pc, #208]	@ (80053c8 <HAL_DMA_Init+0x430>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <HAL_DMA_Init+0x38c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a32      	ldr	r2, [pc, #200]	@ (80053cc <HAL_DMA_Init+0x434>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_DMA_Init+0x38c>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a31      	ldr	r2, [pc, #196]	@ (80053d0 <HAL_DMA_Init+0x438>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <HAL_DMA_Init+0x38c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2f      	ldr	r2, [pc, #188]	@ (80053d4 <HAL_DMA_Init+0x43c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_DMA_Init+0x38c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2e      	ldr	r2, [pc, #184]	@ (80053d8 <HAL_DMA_Init+0x440>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <HAL_DMA_Init+0x390>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_DMA_Init+0x392>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8092 	beq.w	8005454 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a21      	ldr	r2, [pc, #132]	@ (80053bc <HAL_DMA_Init+0x424>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d021      	beq.n	800537e <HAL_DMA_Init+0x3e6>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a20      	ldr	r2, [pc, #128]	@ (80053c0 <HAL_DMA_Init+0x428>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01c      	beq.n	800537e <HAL_DMA_Init+0x3e6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1e      	ldr	r2, [pc, #120]	@ (80053c4 <HAL_DMA_Init+0x42c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d017      	beq.n	800537e <HAL_DMA_Init+0x3e6>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1d      	ldr	r2, [pc, #116]	@ (80053c8 <HAL_DMA_Init+0x430>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d012      	beq.n	800537e <HAL_DMA_Init+0x3e6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1b      	ldr	r2, [pc, #108]	@ (80053cc <HAL_DMA_Init+0x434>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00d      	beq.n	800537e <HAL_DMA_Init+0x3e6>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1a      	ldr	r2, [pc, #104]	@ (80053d0 <HAL_DMA_Init+0x438>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d008      	beq.n	800537e <HAL_DMA_Init+0x3e6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a18      	ldr	r2, [pc, #96]	@ (80053d4 <HAL_DMA_Init+0x43c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <HAL_DMA_Init+0x3e6>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a17      	ldr	r2, [pc, #92]	@ (80053d8 <HAL_DMA_Init+0x440>)
 800537c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4b10      	ldr	r3, [pc, #64]	@ (80053dc <HAL_DMA_Init+0x444>)
 800539a:	4013      	ands	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b40      	cmp	r3, #64	@ 0x40
 80053a4:	d01c      	beq.n	80053e0 <HAL_DMA_Init+0x448>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b80      	cmp	r3, #128	@ 0x80
 80053ac:	d102      	bne.n	80053b4 <HAL_DMA_Init+0x41c>
 80053ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80053b2:	e016      	b.n	80053e2 <HAL_DMA_Init+0x44a>
 80053b4:	2300      	movs	r3, #0
 80053b6:	e014      	b.n	80053e2 <HAL_DMA_Init+0x44a>
 80053b8:	fe10803f 	.word	0xfe10803f
 80053bc:	58025408 	.word	0x58025408
 80053c0:	5802541c 	.word	0x5802541c
 80053c4:	58025430 	.word	0x58025430
 80053c8:	58025444 	.word	0x58025444
 80053cc:	58025458 	.word	0x58025458
 80053d0:	5802546c 	.word	0x5802546c
 80053d4:	58025480 	.word	0x58025480
 80053d8:	58025494 	.word	0x58025494
 80053dc:	fffe000f 	.word	0xfffe000f
 80053e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68d2      	ldr	r2, [r2, #12]
 80053e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80053f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80053f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005400:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005408:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005410:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	4b6e      	ldr	r3, [pc, #440]	@ (80055e0 <HAL_DMA_Init+0x648>)
 8005428:	4413      	add	r3, r2
 800542a:	4a6e      	ldr	r2, [pc, #440]	@ (80055e4 <HAL_DMA_Init+0x64c>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	091b      	lsrs	r3, r3, #4
 8005432:	009a      	lsls	r2, r3, #2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fc45 	bl	8006cc8 <DMA_CalcBaseAndBitshift>
 800543e:	4603      	mov	r3, r0
 8005440:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	2201      	movs	r2, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	e008      	b.n	8005466 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2240      	movs	r2, #64	@ 0x40
 8005458:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2203      	movs	r2, #3
 800545e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e0b7      	b.n	80055d6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a5f      	ldr	r2, [pc, #380]	@ (80055e8 <HAL_DMA_Init+0x650>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d072      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a5d      	ldr	r2, [pc, #372]	@ (80055ec <HAL_DMA_Init+0x654>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d06d      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5c      	ldr	r2, [pc, #368]	@ (80055f0 <HAL_DMA_Init+0x658>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d068      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a5a      	ldr	r2, [pc, #360]	@ (80055f4 <HAL_DMA_Init+0x65c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d063      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a59      	ldr	r2, [pc, #356]	@ (80055f8 <HAL_DMA_Init+0x660>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d05e      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a57      	ldr	r2, [pc, #348]	@ (80055fc <HAL_DMA_Init+0x664>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d059      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a56      	ldr	r2, [pc, #344]	@ (8005600 <HAL_DMA_Init+0x668>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d054      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a54      	ldr	r2, [pc, #336]	@ (8005604 <HAL_DMA_Init+0x66c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d04f      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a53      	ldr	r2, [pc, #332]	@ (8005608 <HAL_DMA_Init+0x670>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d04a      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a51      	ldr	r2, [pc, #324]	@ (800560c <HAL_DMA_Init+0x674>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d045      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a50      	ldr	r2, [pc, #320]	@ (8005610 <HAL_DMA_Init+0x678>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d040      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005614 <HAL_DMA_Init+0x67c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d03b      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a4d      	ldr	r2, [pc, #308]	@ (8005618 <HAL_DMA_Init+0x680>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d036      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a4b      	ldr	r2, [pc, #300]	@ (800561c <HAL_DMA_Init+0x684>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d031      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a4a      	ldr	r2, [pc, #296]	@ (8005620 <HAL_DMA_Init+0x688>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d02c      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a48      	ldr	r2, [pc, #288]	@ (8005624 <HAL_DMA_Init+0x68c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d027      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a47      	ldr	r2, [pc, #284]	@ (8005628 <HAL_DMA_Init+0x690>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d022      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a45      	ldr	r2, [pc, #276]	@ (800562c <HAL_DMA_Init+0x694>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d01d      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a44      	ldr	r2, [pc, #272]	@ (8005630 <HAL_DMA_Init+0x698>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d018      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a42      	ldr	r2, [pc, #264]	@ (8005634 <HAL_DMA_Init+0x69c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a41      	ldr	r2, [pc, #260]	@ (8005638 <HAL_DMA_Init+0x6a0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a3f      	ldr	r2, [pc, #252]	@ (800563c <HAL_DMA_Init+0x6a4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a3e      	ldr	r2, [pc, #248]	@ (8005640 <HAL_DMA_Init+0x6a8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_DMA_Init+0x5be>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a3c      	ldr	r2, [pc, #240]	@ (8005644 <HAL_DMA_Init+0x6ac>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d101      	bne.n	800555a <HAL_DMA_Init+0x5c2>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <HAL_DMA_Init+0x5c4>
 800555a:	2300      	movs	r3, #0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d032      	beq.n	80055c6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f001 fcdf 	bl	8006f24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b80      	cmp	r3, #128	@ 0x80
 800556c:	d102      	bne.n	8005574 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005588:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d010      	beq.n	80055b4 <HAL_DMA_Init+0x61c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b08      	cmp	r3, #8
 8005598:	d80c      	bhi.n	80055b4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 fd5c 	bl	8007058 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	e008      	b.n	80055c6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	a7fdabf8 	.word	0xa7fdabf8
 80055e4:	cccccccd 	.word	0xcccccccd
 80055e8:	40020010 	.word	0x40020010
 80055ec:	40020028 	.word	0x40020028
 80055f0:	40020040 	.word	0x40020040
 80055f4:	40020058 	.word	0x40020058
 80055f8:	40020070 	.word	0x40020070
 80055fc:	40020088 	.word	0x40020088
 8005600:	400200a0 	.word	0x400200a0
 8005604:	400200b8 	.word	0x400200b8
 8005608:	40020410 	.word	0x40020410
 800560c:	40020428 	.word	0x40020428
 8005610:	40020440 	.word	0x40020440
 8005614:	40020458 	.word	0x40020458
 8005618:	40020470 	.word	0x40020470
 800561c:	40020488 	.word	0x40020488
 8005620:	400204a0 	.word	0x400204a0
 8005624:	400204b8 	.word	0x400204b8
 8005628:	58025408 	.word	0x58025408
 800562c:	5802541c 	.word	0x5802541c
 8005630:	58025430 	.word	0x58025430
 8005634:	58025444 	.word	0x58025444
 8005638:	58025458 	.word	0x58025458
 800563c:	5802546c 	.word	0x5802546c
 8005640:	58025480 	.word	0x58025480
 8005644:	58025494 	.word	0x58025494

08005648 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e226      	b.n	8005ab2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_DMA_Start_IT+0x2a>
 800566e:	2302      	movs	r3, #2
 8005670:	e21f      	b.n	8005ab2 <HAL_DMA_Start_IT+0x46a>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	f040 820a 	bne.w	8005a9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a68      	ldr	r2, [pc, #416]	@ (800583c <HAL_DMA_Start_IT+0x1f4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d04a      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a66      	ldr	r2, [pc, #408]	@ (8005840 <HAL_DMA_Start_IT+0x1f8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d045      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a65      	ldr	r2, [pc, #404]	@ (8005844 <HAL_DMA_Start_IT+0x1fc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d040      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a63      	ldr	r2, [pc, #396]	@ (8005848 <HAL_DMA_Start_IT+0x200>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d03b      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a62      	ldr	r2, [pc, #392]	@ (800584c <HAL_DMA_Start_IT+0x204>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d036      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a60      	ldr	r2, [pc, #384]	@ (8005850 <HAL_DMA_Start_IT+0x208>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d031      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005854 <HAL_DMA_Start_IT+0x20c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d02c      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005858 <HAL_DMA_Start_IT+0x210>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d027      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a5c      	ldr	r2, [pc, #368]	@ (800585c <HAL_DMA_Start_IT+0x214>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d022      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005860 <HAL_DMA_Start_IT+0x218>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01d      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a59      	ldr	r2, [pc, #356]	@ (8005864 <HAL_DMA_Start_IT+0x21c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d018      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a57      	ldr	r2, [pc, #348]	@ (8005868 <HAL_DMA_Start_IT+0x220>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a56      	ldr	r2, [pc, #344]	@ (800586c <HAL_DMA_Start_IT+0x224>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a54      	ldr	r2, [pc, #336]	@ (8005870 <HAL_DMA_Start_IT+0x228>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a53      	ldr	r2, [pc, #332]	@ (8005874 <HAL_DMA_Start_IT+0x22c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_DMA_Start_IT+0xee>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a51      	ldr	r2, [pc, #324]	@ (8005878 <HAL_DMA_Start_IT+0x230>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d108      	bne.n	8005748 <HAL_DMA_Start_IT+0x100>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0201 	bic.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	e007      	b.n	8005758 <HAL_DMA_Start_IT+0x110>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0201 	bic.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f001 f906 	bl	8006970 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a34      	ldr	r2, [pc, #208]	@ (800583c <HAL_DMA_Start_IT+0x1f4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d04a      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a33      	ldr	r2, [pc, #204]	@ (8005840 <HAL_DMA_Start_IT+0x1f8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d045      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a31      	ldr	r2, [pc, #196]	@ (8005844 <HAL_DMA_Start_IT+0x1fc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d040      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a30      	ldr	r2, [pc, #192]	@ (8005848 <HAL_DMA_Start_IT+0x200>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d03b      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2e      	ldr	r2, [pc, #184]	@ (800584c <HAL_DMA_Start_IT+0x204>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d036      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2d      	ldr	r2, [pc, #180]	@ (8005850 <HAL_DMA_Start_IT+0x208>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d031      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005854 <HAL_DMA_Start_IT+0x20c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d02c      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005858 <HAL_DMA_Start_IT+0x210>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d027      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a28      	ldr	r2, [pc, #160]	@ (800585c <HAL_DMA_Start_IT+0x214>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d022      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a27      	ldr	r2, [pc, #156]	@ (8005860 <HAL_DMA_Start_IT+0x218>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d01d      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a25      	ldr	r2, [pc, #148]	@ (8005864 <HAL_DMA_Start_IT+0x21c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d018      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a24      	ldr	r2, [pc, #144]	@ (8005868 <HAL_DMA_Start_IT+0x220>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a22      	ldr	r2, [pc, #136]	@ (800586c <HAL_DMA_Start_IT+0x224>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00e      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a21      	ldr	r2, [pc, #132]	@ (8005870 <HAL_DMA_Start_IT+0x228>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005874 <HAL_DMA_Start_IT+0x22c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <HAL_DMA_Start_IT+0x1bc>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005878 <HAL_DMA_Start_IT+0x230>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d101      	bne.n	8005808 <HAL_DMA_Start_IT+0x1c0>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <HAL_DMA_Start_IT+0x1c2>
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d036      	beq.n	800587c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f023 021e 	bic.w	r2, r3, #30
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0216 	orr.w	r2, r2, #22
 8005820:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	d03e      	beq.n	80058a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0208 	orr.w	r2, r2, #8
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e035      	b.n	80058a8 <HAL_DMA_Start_IT+0x260>
 800583c:	40020010 	.word	0x40020010
 8005840:	40020028 	.word	0x40020028
 8005844:	40020040 	.word	0x40020040
 8005848:	40020058 	.word	0x40020058
 800584c:	40020070 	.word	0x40020070
 8005850:	40020088 	.word	0x40020088
 8005854:	400200a0 	.word	0x400200a0
 8005858:	400200b8 	.word	0x400200b8
 800585c:	40020410 	.word	0x40020410
 8005860:	40020428 	.word	0x40020428
 8005864:	40020440 	.word	0x40020440
 8005868:	40020458 	.word	0x40020458
 800586c:	40020470 	.word	0x40020470
 8005870:	40020488 	.word	0x40020488
 8005874:	400204a0 	.word	0x400204a0
 8005878:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 020e 	bic.w	r2, r3, #14
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 020a 	orr.w	r2, r2, #10
 800588e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d007      	beq.n	80058a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0204 	orr.w	r2, r2, #4
 80058a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a83      	ldr	r2, [pc, #524]	@ (8005abc <HAL_DMA_Start_IT+0x474>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d072      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a82      	ldr	r2, [pc, #520]	@ (8005ac0 <HAL_DMA_Start_IT+0x478>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d06d      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a80      	ldr	r2, [pc, #512]	@ (8005ac4 <HAL_DMA_Start_IT+0x47c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d068      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a7f      	ldr	r2, [pc, #508]	@ (8005ac8 <HAL_DMA_Start_IT+0x480>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d063      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a7d      	ldr	r2, [pc, #500]	@ (8005acc <HAL_DMA_Start_IT+0x484>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d05e      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a7c      	ldr	r2, [pc, #496]	@ (8005ad0 <HAL_DMA_Start_IT+0x488>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d059      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a7a      	ldr	r2, [pc, #488]	@ (8005ad4 <HAL_DMA_Start_IT+0x48c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d054      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a79      	ldr	r2, [pc, #484]	@ (8005ad8 <HAL_DMA_Start_IT+0x490>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d04f      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a77      	ldr	r2, [pc, #476]	@ (8005adc <HAL_DMA_Start_IT+0x494>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d04a      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a76      	ldr	r2, [pc, #472]	@ (8005ae0 <HAL_DMA_Start_IT+0x498>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d045      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a74      	ldr	r2, [pc, #464]	@ (8005ae4 <HAL_DMA_Start_IT+0x49c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d040      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a73      	ldr	r2, [pc, #460]	@ (8005ae8 <HAL_DMA_Start_IT+0x4a0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d03b      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a71      	ldr	r2, [pc, #452]	@ (8005aec <HAL_DMA_Start_IT+0x4a4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d036      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a70      	ldr	r2, [pc, #448]	@ (8005af0 <HAL_DMA_Start_IT+0x4a8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d031      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a6e      	ldr	r2, [pc, #440]	@ (8005af4 <HAL_DMA_Start_IT+0x4ac>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d02c      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a6d      	ldr	r2, [pc, #436]	@ (8005af8 <HAL_DMA_Start_IT+0x4b0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d027      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a6b      	ldr	r2, [pc, #428]	@ (8005afc <HAL_DMA_Start_IT+0x4b4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d022      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a6a      	ldr	r2, [pc, #424]	@ (8005b00 <HAL_DMA_Start_IT+0x4b8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d01d      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a68      	ldr	r2, [pc, #416]	@ (8005b04 <HAL_DMA_Start_IT+0x4bc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d018      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a67      	ldr	r2, [pc, #412]	@ (8005b08 <HAL_DMA_Start_IT+0x4c0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a65      	ldr	r2, [pc, #404]	@ (8005b0c <HAL_DMA_Start_IT+0x4c4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00e      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a64      	ldr	r2, [pc, #400]	@ (8005b10 <HAL_DMA_Start_IT+0x4c8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a62      	ldr	r2, [pc, #392]	@ (8005b14 <HAL_DMA_Start_IT+0x4cc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <HAL_DMA_Start_IT+0x350>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a61      	ldr	r2, [pc, #388]	@ (8005b18 <HAL_DMA_Start_IT+0x4d0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <HAL_DMA_Start_IT+0x354>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_DMA_Start_IT+0x356>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01a      	beq.n	80059d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a37      	ldr	r2, [pc, #220]	@ (8005abc <HAL_DMA_Start_IT+0x474>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d04a      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a36      	ldr	r2, [pc, #216]	@ (8005ac0 <HAL_DMA_Start_IT+0x478>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d045      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a34      	ldr	r2, [pc, #208]	@ (8005ac4 <HAL_DMA_Start_IT+0x47c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d040      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a33      	ldr	r2, [pc, #204]	@ (8005ac8 <HAL_DMA_Start_IT+0x480>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d03b      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a31      	ldr	r2, [pc, #196]	@ (8005acc <HAL_DMA_Start_IT+0x484>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d036      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a30      	ldr	r2, [pc, #192]	@ (8005ad0 <HAL_DMA_Start_IT+0x488>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d031      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad4 <HAL_DMA_Start_IT+0x48c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d02c      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad8 <HAL_DMA_Start_IT+0x490>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d027      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005adc <HAL_DMA_Start_IT+0x494>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d022      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae0 <HAL_DMA_Start_IT+0x498>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d01d      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a28      	ldr	r2, [pc, #160]	@ (8005ae4 <HAL_DMA_Start_IT+0x49c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d018      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a27      	ldr	r2, [pc, #156]	@ (8005ae8 <HAL_DMA_Start_IT+0x4a0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a25      	ldr	r2, [pc, #148]	@ (8005aec <HAL_DMA_Start_IT+0x4a4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00e      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a24      	ldr	r2, [pc, #144]	@ (8005af0 <HAL_DMA_Start_IT+0x4a8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d009      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a22      	ldr	r2, [pc, #136]	@ (8005af4 <HAL_DMA_Start_IT+0x4ac>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_DMA_Start_IT+0x430>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a21      	ldr	r2, [pc, #132]	@ (8005af8 <HAL_DMA_Start_IT+0x4b0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d108      	bne.n	8005a8a <HAL_DMA_Start_IT+0x442>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e012      	b.n	8005ab0 <HAL_DMA_Start_IT+0x468>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0201 	orr.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e009      	b.n	8005ab0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005aa2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40020010 	.word	0x40020010
 8005ac0:	40020028 	.word	0x40020028
 8005ac4:	40020040 	.word	0x40020040
 8005ac8:	40020058 	.word	0x40020058
 8005acc:	40020070 	.word	0x40020070
 8005ad0:	40020088 	.word	0x40020088
 8005ad4:	400200a0 	.word	0x400200a0
 8005ad8:	400200b8 	.word	0x400200b8
 8005adc:	40020410 	.word	0x40020410
 8005ae0:	40020428 	.word	0x40020428
 8005ae4:	40020440 	.word	0x40020440
 8005ae8:	40020458 	.word	0x40020458
 8005aec:	40020470 	.word	0x40020470
 8005af0:	40020488 	.word	0x40020488
 8005af4:	400204a0 	.word	0x400204a0
 8005af8:	400204b8 	.word	0x400204b8
 8005afc:	58025408 	.word	0x58025408
 8005b00:	5802541c 	.word	0x5802541c
 8005b04:	58025430 	.word	0x58025430
 8005b08:	58025444 	.word	0x58025444
 8005b0c:	58025458 	.word	0x58025458
 8005b10:	5802546c 	.word	0x5802546c
 8005b14:	58025480 	.word	0x58025480
 8005b18:	58025494 	.word	0x58025494

08005b1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	@ 0x28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b28:	4b67      	ldr	r3, [pc, #412]	@ (8005cc8 <HAL_DMA_IRQHandler+0x1ac>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a67      	ldr	r2, [pc, #412]	@ (8005ccc <HAL_DMA_IRQHandler+0x1b0>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	0a9b      	lsrs	r3, r3, #10
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a5f      	ldr	r2, [pc, #380]	@ (8005cd0 <HAL_DMA_IRQHandler+0x1b4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04a      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8005cd4 <HAL_DMA_IRQHandler+0x1b8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d045      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a5c      	ldr	r2, [pc, #368]	@ (8005cd8 <HAL_DMA_IRQHandler+0x1bc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d040      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a5a      	ldr	r2, [pc, #360]	@ (8005cdc <HAL_DMA_IRQHandler+0x1c0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d03b      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a59      	ldr	r2, [pc, #356]	@ (8005ce0 <HAL_DMA_IRQHandler+0x1c4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d036      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a57      	ldr	r2, [pc, #348]	@ (8005ce4 <HAL_DMA_IRQHandler+0x1c8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d031      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a56      	ldr	r2, [pc, #344]	@ (8005ce8 <HAL_DMA_IRQHandler+0x1cc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d02c      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a54      	ldr	r2, [pc, #336]	@ (8005cec <HAL_DMA_IRQHandler+0x1d0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d027      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a53      	ldr	r2, [pc, #332]	@ (8005cf0 <HAL_DMA_IRQHandler+0x1d4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a51      	ldr	r2, [pc, #324]	@ (8005cf4 <HAL_DMA_IRQHandler+0x1d8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01d      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a50      	ldr	r2, [pc, #320]	@ (8005cf8 <HAL_DMA_IRQHandler+0x1dc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8005cfc <HAL_DMA_IRQHandler+0x1e0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a4d      	ldr	r2, [pc, #308]	@ (8005d00 <HAL_DMA_IRQHandler+0x1e4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8005d04 <HAL_DMA_IRQHandler+0x1e8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a4a      	ldr	r2, [pc, #296]	@ (8005d08 <HAL_DMA_IRQHandler+0x1ec>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_DMA_IRQHandler+0xd2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a48      	ldr	r2, [pc, #288]	@ (8005d0c <HAL_DMA_IRQHandler+0x1f0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <HAL_DMA_IRQHandler+0xd6>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <HAL_DMA_IRQHandler+0xd8>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 842b 	beq.w	8006450 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	2208      	movs	r2, #8
 8005c04:	409a      	lsls	r2, r3
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 80a2 	beq.w	8005d54 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd0 <HAL_DMA_IRQHandler+0x1b4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d04a      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd4 <HAL_DMA_IRQHandler+0x1b8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d045      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd8 <HAL_DMA_IRQHandler+0x1bc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d040      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2a      	ldr	r2, [pc, #168]	@ (8005cdc <HAL_DMA_IRQHandler+0x1c0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d03b      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ce0 <HAL_DMA_IRQHandler+0x1c4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d036      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a27      	ldr	r2, [pc, #156]	@ (8005ce4 <HAL_DMA_IRQHandler+0x1c8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d031      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a25      	ldr	r2, [pc, #148]	@ (8005ce8 <HAL_DMA_IRQHandler+0x1cc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d02c      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a24      	ldr	r2, [pc, #144]	@ (8005cec <HAL_DMA_IRQHandler+0x1d0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d027      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a22      	ldr	r2, [pc, #136]	@ (8005cf0 <HAL_DMA_IRQHandler+0x1d4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d022      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a21      	ldr	r2, [pc, #132]	@ (8005cf4 <HAL_DMA_IRQHandler+0x1d8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d01d      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf8 <HAL_DMA_IRQHandler+0x1dc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d018      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <HAL_DMA_IRQHandler+0x1e0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d013      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <HAL_DMA_IRQHandler+0x1e4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00e      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_DMA_IRQHandler+0x1e8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a19      	ldr	r2, [pc, #100]	@ (8005d08 <HAL_DMA_IRQHandler+0x1ec>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0x194>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <HAL_DMA_IRQHandler+0x1f0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d12f      	bne.n	8005d10 <HAL_DMA_IRQHandler+0x1f4>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	bf14      	ite	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	2300      	moveq	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	e02e      	b.n	8005d24 <HAL_DMA_IRQHandler+0x208>
 8005cc6:	bf00      	nop
 8005cc8:	2400000c 	.word	0x2400000c
 8005ccc:	1b4e81b5 	.word	0x1b4e81b5
 8005cd0:	40020010 	.word	0x40020010
 8005cd4:	40020028 	.word	0x40020028
 8005cd8:	40020040 	.word	0x40020040
 8005cdc:	40020058 	.word	0x40020058
 8005ce0:	40020070 	.word	0x40020070
 8005ce4:	40020088 	.word	0x40020088
 8005ce8:	400200a0 	.word	0x400200a0
 8005cec:	400200b8 	.word	0x400200b8
 8005cf0:	40020410 	.word	0x40020410
 8005cf4:	40020428 	.word	0x40020428
 8005cf8:	40020440 	.word	0x40020440
 8005cfc:	40020458 	.word	0x40020458
 8005d00:	40020470 	.word	0x40020470
 8005d04:	40020488 	.word	0x40020488
 8005d08:	400204a0 	.word	0x400204a0
 8005d0c:	400204b8 	.word	0x400204b8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bf14      	ite	ne
 8005d1e:	2301      	movne	r3, #1
 8005d20:	2300      	moveq	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d015      	beq.n	8005d54 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0204 	bic.w	r2, r2, #4
 8005d36:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	2208      	movs	r2, #8
 8005d42:	409a      	lsls	r2, r3
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4c:	f043 0201 	orr.w	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d06e      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a69      	ldr	r2, [pc, #420]	@ (8005f14 <HAL_DMA_IRQHandler+0x3f8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d04a      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a67      	ldr	r2, [pc, #412]	@ (8005f18 <HAL_DMA_IRQHandler+0x3fc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d045      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a66      	ldr	r2, [pc, #408]	@ (8005f1c <HAL_DMA_IRQHandler+0x400>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d040      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a64      	ldr	r2, [pc, #400]	@ (8005f20 <HAL_DMA_IRQHandler+0x404>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d03b      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a63      	ldr	r2, [pc, #396]	@ (8005f24 <HAL_DMA_IRQHandler+0x408>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d036      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a61      	ldr	r2, [pc, #388]	@ (8005f28 <HAL_DMA_IRQHandler+0x40c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d031      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a60      	ldr	r2, [pc, #384]	@ (8005f2c <HAL_DMA_IRQHandler+0x410>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d02c      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5e      	ldr	r2, [pc, #376]	@ (8005f30 <HAL_DMA_IRQHandler+0x414>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d027      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a5d      	ldr	r2, [pc, #372]	@ (8005f34 <HAL_DMA_IRQHandler+0x418>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d022      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a5b      	ldr	r2, [pc, #364]	@ (8005f38 <HAL_DMA_IRQHandler+0x41c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d01d      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8005f3c <HAL_DMA_IRQHandler+0x420>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d018      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a58      	ldr	r2, [pc, #352]	@ (8005f40 <HAL_DMA_IRQHandler+0x424>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a57      	ldr	r2, [pc, #348]	@ (8005f44 <HAL_DMA_IRQHandler+0x428>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00e      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a55      	ldr	r2, [pc, #340]	@ (8005f48 <HAL_DMA_IRQHandler+0x42c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a54      	ldr	r2, [pc, #336]	@ (8005f4c <HAL_DMA_IRQHandler+0x430>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x2ee>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a52      	ldr	r2, [pc, #328]	@ (8005f50 <HAL_DMA_IRQHandler+0x434>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d10a      	bne.n	8005e20 <HAL_DMA_IRQHandler+0x304>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bf14      	ite	ne
 8005e18:	2301      	movne	r3, #1
 8005e1a:	2300      	moveq	r3, #0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	e003      	b.n	8005e28 <HAL_DMA_IRQHandler+0x30c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2300      	movs	r3, #0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00d      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	2201      	movs	r2, #1
 8005e36:	409a      	lsls	r2, r3
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e40:	f043 0202 	orr.w	r2, r3, #2
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	2204      	movs	r2, #4
 8005e52:	409a      	lsls	r2, r3
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 808f 	beq.w	8005f7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a2c      	ldr	r2, [pc, #176]	@ (8005f14 <HAL_DMA_IRQHandler+0x3f8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d04a      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005f18 <HAL_DMA_IRQHandler+0x3fc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d045      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a29      	ldr	r2, [pc, #164]	@ (8005f1c <HAL_DMA_IRQHandler+0x400>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d040      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a27      	ldr	r2, [pc, #156]	@ (8005f20 <HAL_DMA_IRQHandler+0x404>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d03b      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a26      	ldr	r2, [pc, #152]	@ (8005f24 <HAL_DMA_IRQHandler+0x408>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d036      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a24      	ldr	r2, [pc, #144]	@ (8005f28 <HAL_DMA_IRQHandler+0x40c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d031      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a23      	ldr	r2, [pc, #140]	@ (8005f2c <HAL_DMA_IRQHandler+0x410>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d02c      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a21      	ldr	r2, [pc, #132]	@ (8005f30 <HAL_DMA_IRQHandler+0x414>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d027      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a20      	ldr	r2, [pc, #128]	@ (8005f34 <HAL_DMA_IRQHandler+0x418>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d022      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8005f38 <HAL_DMA_IRQHandler+0x41c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01d      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f3c <HAL_DMA_IRQHandler+0x420>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d018      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f40 <HAL_DMA_IRQHandler+0x424>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1a      	ldr	r2, [pc, #104]	@ (8005f44 <HAL_DMA_IRQHandler+0x428>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00e      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a18      	ldr	r2, [pc, #96]	@ (8005f48 <HAL_DMA_IRQHandler+0x42c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d009      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a17      	ldr	r2, [pc, #92]	@ (8005f4c <HAL_DMA_IRQHandler+0x430>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_DMA_IRQHandler+0x3e2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a15      	ldr	r2, [pc, #84]	@ (8005f50 <HAL_DMA_IRQHandler+0x434>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d12a      	bne.n	8005f54 <HAL_DMA_IRQHandler+0x438>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bf14      	ite	ne
 8005f0c:	2301      	movne	r3, #1
 8005f0e:	2300      	moveq	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e023      	b.n	8005f5c <HAL_DMA_IRQHandler+0x440>
 8005f14:	40020010 	.word	0x40020010
 8005f18:	40020028 	.word	0x40020028
 8005f1c:	40020040 	.word	0x40020040
 8005f20:	40020058 	.word	0x40020058
 8005f24:	40020070 	.word	0x40020070
 8005f28:	40020088 	.word	0x40020088
 8005f2c:	400200a0 	.word	0x400200a0
 8005f30:	400200b8 	.word	0x400200b8
 8005f34:	40020410 	.word	0x40020410
 8005f38:	40020428 	.word	0x40020428
 8005f3c:	40020440 	.word	0x40020440
 8005f40:	40020458 	.word	0x40020458
 8005f44:	40020470 	.word	0x40020470
 8005f48:	40020488 	.word	0x40020488
 8005f4c:	400204a0 	.word	0x400204a0
 8005f50:	400204b8 	.word	0x400204b8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00d      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2204      	movs	r2, #4
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f74:	f043 0204 	orr.w	r2, r3, #4
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	2210      	movs	r2, #16
 8005f86:	409a      	lsls	r2, r3
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80a6 	beq.w	80060de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a85      	ldr	r2, [pc, #532]	@ (80061ac <HAL_DMA_IRQHandler+0x690>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d04a      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a83      	ldr	r2, [pc, #524]	@ (80061b0 <HAL_DMA_IRQHandler+0x694>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d045      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a82      	ldr	r2, [pc, #520]	@ (80061b4 <HAL_DMA_IRQHandler+0x698>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d040      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a80      	ldr	r2, [pc, #512]	@ (80061b8 <HAL_DMA_IRQHandler+0x69c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d03b      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a7f      	ldr	r2, [pc, #508]	@ (80061bc <HAL_DMA_IRQHandler+0x6a0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d036      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a7d      	ldr	r2, [pc, #500]	@ (80061c0 <HAL_DMA_IRQHandler+0x6a4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d031      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a7c      	ldr	r2, [pc, #496]	@ (80061c4 <HAL_DMA_IRQHandler+0x6a8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d02c      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a7a      	ldr	r2, [pc, #488]	@ (80061c8 <HAL_DMA_IRQHandler+0x6ac>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d027      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a79      	ldr	r2, [pc, #484]	@ (80061cc <HAL_DMA_IRQHandler+0x6b0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d022      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a77      	ldr	r2, [pc, #476]	@ (80061d0 <HAL_DMA_IRQHandler+0x6b4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01d      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a76      	ldr	r2, [pc, #472]	@ (80061d4 <HAL_DMA_IRQHandler+0x6b8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d018      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a74      	ldr	r2, [pc, #464]	@ (80061d8 <HAL_DMA_IRQHandler+0x6bc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a73      	ldr	r2, [pc, #460]	@ (80061dc <HAL_DMA_IRQHandler+0x6c0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00e      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a71      	ldr	r2, [pc, #452]	@ (80061e0 <HAL_DMA_IRQHandler+0x6c4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a70      	ldr	r2, [pc, #448]	@ (80061e4 <HAL_DMA_IRQHandler+0x6c8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <HAL_DMA_IRQHandler+0x516>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a6e      	ldr	r2, [pc, #440]	@ (80061e8 <HAL_DMA_IRQHandler+0x6cc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d10a      	bne.n	8006048 <HAL_DMA_IRQHandler+0x52c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	e009      	b.n	800605c <HAL_DMA_IRQHandler+0x540>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf14      	ite	ne
 8006056:	2301      	movne	r3, #1
 8006058:	2300      	moveq	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d03e      	beq.n	80060de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	2210      	movs	r2, #16
 800606a:	409a      	lsls	r2, r3
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d018      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d108      	bne.n	800609e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d024      	beq.n	80060de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4798      	blx	r3
 800609c:	e01f      	b.n	80060de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01b      	beq.n	80060de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
 80060ae:	e016      	b.n	80060de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d107      	bne.n	80060ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0208 	bic.w	r2, r2, #8
 80060cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	2220      	movs	r2, #32
 80060e8:	409a      	lsls	r2, r3
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	4013      	ands	r3, r2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 8110 	beq.w	8006314 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2c      	ldr	r2, [pc, #176]	@ (80061ac <HAL_DMA_IRQHandler+0x690>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d04a      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a2b      	ldr	r2, [pc, #172]	@ (80061b0 <HAL_DMA_IRQHandler+0x694>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d045      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a29      	ldr	r2, [pc, #164]	@ (80061b4 <HAL_DMA_IRQHandler+0x698>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d040      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a28      	ldr	r2, [pc, #160]	@ (80061b8 <HAL_DMA_IRQHandler+0x69c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d03b      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a26      	ldr	r2, [pc, #152]	@ (80061bc <HAL_DMA_IRQHandler+0x6a0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d036      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a25      	ldr	r2, [pc, #148]	@ (80061c0 <HAL_DMA_IRQHandler+0x6a4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d031      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a23      	ldr	r2, [pc, #140]	@ (80061c4 <HAL_DMA_IRQHandler+0x6a8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d02c      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a22      	ldr	r2, [pc, #136]	@ (80061c8 <HAL_DMA_IRQHandler+0x6ac>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d027      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a20      	ldr	r2, [pc, #128]	@ (80061cc <HAL_DMA_IRQHandler+0x6b0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d022      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1f      	ldr	r2, [pc, #124]	@ (80061d0 <HAL_DMA_IRQHandler+0x6b4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d01d      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1d      	ldr	r2, [pc, #116]	@ (80061d4 <HAL_DMA_IRQHandler+0x6b8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d018      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1c      	ldr	r2, [pc, #112]	@ (80061d8 <HAL_DMA_IRQHandler+0x6bc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1a      	ldr	r2, [pc, #104]	@ (80061dc <HAL_DMA_IRQHandler+0x6c0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00e      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a19      	ldr	r2, [pc, #100]	@ (80061e0 <HAL_DMA_IRQHandler+0x6c4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d009      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a17      	ldr	r2, [pc, #92]	@ (80061e4 <HAL_DMA_IRQHandler+0x6c8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_DMA_IRQHandler+0x678>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a16      	ldr	r2, [pc, #88]	@ (80061e8 <HAL_DMA_IRQHandler+0x6cc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d12b      	bne.n	80061ec <HAL_DMA_IRQHandler+0x6d0>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0310 	and.w	r3, r3, #16
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bf14      	ite	ne
 80061a2:	2301      	movne	r3, #1
 80061a4:	2300      	moveq	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	e02a      	b.n	8006200 <HAL_DMA_IRQHandler+0x6e4>
 80061aa:	bf00      	nop
 80061ac:	40020010 	.word	0x40020010
 80061b0:	40020028 	.word	0x40020028
 80061b4:	40020040 	.word	0x40020040
 80061b8:	40020058 	.word	0x40020058
 80061bc:	40020070 	.word	0x40020070
 80061c0:	40020088 	.word	0x40020088
 80061c4:	400200a0 	.word	0x400200a0
 80061c8:	400200b8 	.word	0x400200b8
 80061cc:	40020410 	.word	0x40020410
 80061d0:	40020428 	.word	0x40020428
 80061d4:	40020440 	.word	0x40020440
 80061d8:	40020458 	.word	0x40020458
 80061dc:	40020470 	.word	0x40020470
 80061e0:	40020488 	.word	0x40020488
 80061e4:	400204a0 	.word	0x400204a0
 80061e8:	400204b8 	.word	0x400204b8
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8087 	beq.w	8006314 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2220      	movs	r2, #32
 8006210:	409a      	lsls	r2, r3
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b04      	cmp	r3, #4
 8006220:	d139      	bne.n	8006296 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0216 	bic.w	r2, r2, #22
 8006230:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006240:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <HAL_DMA_IRQHandler+0x736>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0208 	bic.w	r2, r2, #8
 8006260:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	223f      	movs	r2, #63	@ 0x3f
 800626c:	409a      	lsls	r2, r3
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 834a 	beq.w	8006920 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
          }
          return;
 8006294:	e344      	b.n	8006920 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d018      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d108      	bne.n	80062c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d02c      	beq.n	8006314 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
 80062c2:	e027      	b.n	8006314 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d023      	beq.n	8006314 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
 80062d4:	e01e      	b.n	8006314 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10f      	bne.n	8006304 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0210 	bic.w	r2, r2, #16
 80062f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8306 	beq.w	800692a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8088 	beq.w	800643c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2204      	movs	r2, #4
 8006330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a7a      	ldr	r2, [pc, #488]	@ (8006524 <HAL_DMA_IRQHandler+0xa08>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d04a      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a79      	ldr	r2, [pc, #484]	@ (8006528 <HAL_DMA_IRQHandler+0xa0c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d045      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a77      	ldr	r2, [pc, #476]	@ (800652c <HAL_DMA_IRQHandler+0xa10>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d040      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a76      	ldr	r2, [pc, #472]	@ (8006530 <HAL_DMA_IRQHandler+0xa14>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d03b      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a74      	ldr	r2, [pc, #464]	@ (8006534 <HAL_DMA_IRQHandler+0xa18>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d036      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a73      	ldr	r2, [pc, #460]	@ (8006538 <HAL_DMA_IRQHandler+0xa1c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d031      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a71      	ldr	r2, [pc, #452]	@ (800653c <HAL_DMA_IRQHandler+0xa20>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02c      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a70      	ldr	r2, [pc, #448]	@ (8006540 <HAL_DMA_IRQHandler+0xa24>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d027      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a6e      	ldr	r2, [pc, #440]	@ (8006544 <HAL_DMA_IRQHandler+0xa28>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d022      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a6d      	ldr	r2, [pc, #436]	@ (8006548 <HAL_DMA_IRQHandler+0xa2c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d01d      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a6b      	ldr	r2, [pc, #428]	@ (800654c <HAL_DMA_IRQHandler+0xa30>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d018      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a6a      	ldr	r2, [pc, #424]	@ (8006550 <HAL_DMA_IRQHandler+0xa34>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d013      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a68      	ldr	r2, [pc, #416]	@ (8006554 <HAL_DMA_IRQHandler+0xa38>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00e      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a67      	ldr	r2, [pc, #412]	@ (8006558 <HAL_DMA_IRQHandler+0xa3c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d009      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a65      	ldr	r2, [pc, #404]	@ (800655c <HAL_DMA_IRQHandler+0xa40>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x8b8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a64      	ldr	r2, [pc, #400]	@ (8006560 <HAL_DMA_IRQHandler+0xa44>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d108      	bne.n	80063e6 <HAL_DMA_IRQHandler+0x8ca>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0201 	bic.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	e007      	b.n	80063f6 <HAL_DMA_IRQHandler+0x8da>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0201 	bic.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fe:	429a      	cmp	r2, r3
 8006400:	d307      	bcc.n	8006412 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f2      	bne.n	80063f6 <HAL_DMA_IRQHandler+0x8da>
 8006410:	e000      	b.n	8006414 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006412:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2203      	movs	r2, #3
 8006426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800642a:	e003      	b.n	8006434 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8272 	beq.w	800692a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
 800644e:	e26c      	b.n	800692a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a43      	ldr	r2, [pc, #268]	@ (8006564 <HAL_DMA_IRQHandler+0xa48>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d022      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x984>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a42      	ldr	r2, [pc, #264]	@ (8006568 <HAL_DMA_IRQHandler+0xa4c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d01d      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x984>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a40      	ldr	r2, [pc, #256]	@ (800656c <HAL_DMA_IRQHandler+0xa50>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d018      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x984>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a3f      	ldr	r2, [pc, #252]	@ (8006570 <HAL_DMA_IRQHandler+0xa54>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d013      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x984>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a3d      	ldr	r2, [pc, #244]	@ (8006574 <HAL_DMA_IRQHandler+0xa58>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00e      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x984>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a3c      	ldr	r2, [pc, #240]	@ (8006578 <HAL_DMA_IRQHandler+0xa5c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d009      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x984>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a3a      	ldr	r2, [pc, #232]	@ (800657c <HAL_DMA_IRQHandler+0xa60>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d004      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x984>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a39      	ldr	r2, [pc, #228]	@ (8006580 <HAL_DMA_IRQHandler+0xa64>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d101      	bne.n	80064a4 <HAL_DMA_IRQHandler+0x988>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <HAL_DMA_IRQHandler+0x98a>
 80064a4:	2300      	movs	r3, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 823f 	beq.w	800692a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2204      	movs	r2, #4
 80064be:	409a      	lsls	r2, r3
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 80cd 	beq.w	8006664 <HAL_DMA_IRQHandler+0xb48>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80c7 	beq.w	8006664 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2204      	movs	r2, #4
 80064e0:	409a      	lsls	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d049      	beq.n	8006584 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8210 	beq.w	8006924 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800650c:	e20a      	b.n	8006924 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 8206 	beq.w	8006924 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006520:	e200      	b.n	8006924 <HAL_DMA_IRQHandler+0xe08>
 8006522:	bf00      	nop
 8006524:	40020010 	.word	0x40020010
 8006528:	40020028 	.word	0x40020028
 800652c:	40020040 	.word	0x40020040
 8006530:	40020058 	.word	0x40020058
 8006534:	40020070 	.word	0x40020070
 8006538:	40020088 	.word	0x40020088
 800653c:	400200a0 	.word	0x400200a0
 8006540:	400200b8 	.word	0x400200b8
 8006544:	40020410 	.word	0x40020410
 8006548:	40020428 	.word	0x40020428
 800654c:	40020440 	.word	0x40020440
 8006550:	40020458 	.word	0x40020458
 8006554:	40020470 	.word	0x40020470
 8006558:	40020488 	.word	0x40020488
 800655c:	400204a0 	.word	0x400204a0
 8006560:	400204b8 	.word	0x400204b8
 8006564:	58025408 	.word	0x58025408
 8006568:	5802541c 	.word	0x5802541c
 800656c:	58025430 	.word	0x58025430
 8006570:	58025444 	.word	0x58025444
 8006574:	58025458 	.word	0x58025458
 8006578:	5802546c 	.word	0x5802546c
 800657c:	58025480 	.word	0x58025480
 8006580:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d160      	bne.n	8006650 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a7f      	ldr	r2, [pc, #508]	@ (8006790 <HAL_DMA_IRQHandler+0xc74>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d04a      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a7d      	ldr	r2, [pc, #500]	@ (8006794 <HAL_DMA_IRQHandler+0xc78>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d045      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006798 <HAL_DMA_IRQHandler+0xc7c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d040      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a7a      	ldr	r2, [pc, #488]	@ (800679c <HAL_DMA_IRQHandler+0xc80>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d03b      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a79      	ldr	r2, [pc, #484]	@ (80067a0 <HAL_DMA_IRQHandler+0xc84>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d036      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a77      	ldr	r2, [pc, #476]	@ (80067a4 <HAL_DMA_IRQHandler+0xc88>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d031      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a76      	ldr	r2, [pc, #472]	@ (80067a8 <HAL_DMA_IRQHandler+0xc8c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d02c      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a74      	ldr	r2, [pc, #464]	@ (80067ac <HAL_DMA_IRQHandler+0xc90>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d027      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a73      	ldr	r2, [pc, #460]	@ (80067b0 <HAL_DMA_IRQHandler+0xc94>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d022      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a71      	ldr	r2, [pc, #452]	@ (80067b4 <HAL_DMA_IRQHandler+0xc98>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01d      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a70      	ldr	r2, [pc, #448]	@ (80067b8 <HAL_DMA_IRQHandler+0xc9c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d018      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a6e      	ldr	r2, [pc, #440]	@ (80067bc <HAL_DMA_IRQHandler+0xca0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a6d      	ldr	r2, [pc, #436]	@ (80067c0 <HAL_DMA_IRQHandler+0xca4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a6b      	ldr	r2, [pc, #428]	@ (80067c4 <HAL_DMA_IRQHandler+0xca8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d009      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a6a      	ldr	r2, [pc, #424]	@ (80067c8 <HAL_DMA_IRQHandler+0xcac>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_DMA_IRQHandler+0xb12>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a68      	ldr	r2, [pc, #416]	@ (80067cc <HAL_DMA_IRQHandler+0xcb0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d108      	bne.n	8006640 <HAL_DMA_IRQHandler+0xb24>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0208 	bic.w	r2, r2, #8
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e007      	b.n	8006650 <HAL_DMA_IRQHandler+0xb34>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0204 	bic.w	r2, r2, #4
 800664e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8165 	beq.w	8006924 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006662:	e15f      	b.n	8006924 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2202      	movs	r2, #2
 800666e:	409a      	lsls	r2, r3
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80c5 	beq.w	8006804 <HAL_DMA_IRQHandler+0xce8>
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80bf 	beq.w	8006804 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	2202      	movs	r2, #2
 8006690:	409a      	lsls	r2, r3
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d018      	beq.n	80066d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 813a 	beq.w	8006928 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066bc:	e134      	b.n	8006928 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8130 	beq.w	8006928 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066d0:	e12a      	b.n	8006928 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f040 8089 	bne.w	80067f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006790 <HAL_DMA_IRQHandler+0xc74>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d04a      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a29      	ldr	r2, [pc, #164]	@ (8006794 <HAL_DMA_IRQHandler+0xc78>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d045      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a28      	ldr	r2, [pc, #160]	@ (8006798 <HAL_DMA_IRQHandler+0xc7c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d040      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a26      	ldr	r2, [pc, #152]	@ (800679c <HAL_DMA_IRQHandler+0xc80>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d03b      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a25      	ldr	r2, [pc, #148]	@ (80067a0 <HAL_DMA_IRQHandler+0xc84>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d036      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a23      	ldr	r2, [pc, #140]	@ (80067a4 <HAL_DMA_IRQHandler+0xc88>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d031      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a22      	ldr	r2, [pc, #136]	@ (80067a8 <HAL_DMA_IRQHandler+0xc8c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d02c      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a20      	ldr	r2, [pc, #128]	@ (80067ac <HAL_DMA_IRQHandler+0xc90>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d027      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1f      	ldr	r2, [pc, #124]	@ (80067b0 <HAL_DMA_IRQHandler+0xc94>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d022      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1d      	ldr	r2, [pc, #116]	@ (80067b4 <HAL_DMA_IRQHandler+0xc98>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01d      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1c      	ldr	r2, [pc, #112]	@ (80067b8 <HAL_DMA_IRQHandler+0xc9c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d018      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a1a      	ldr	r2, [pc, #104]	@ (80067bc <HAL_DMA_IRQHandler+0xca0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d013      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a19      	ldr	r2, [pc, #100]	@ (80067c0 <HAL_DMA_IRQHandler+0xca4>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00e      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a17      	ldr	r2, [pc, #92]	@ (80067c4 <HAL_DMA_IRQHandler+0xca8>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d009      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a16      	ldr	r2, [pc, #88]	@ (80067c8 <HAL_DMA_IRQHandler+0xcac>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d004      	beq.n	800677e <HAL_DMA_IRQHandler+0xc62>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a14      	ldr	r2, [pc, #80]	@ (80067cc <HAL_DMA_IRQHandler+0xcb0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d128      	bne.n	80067d0 <HAL_DMA_IRQHandler+0xcb4>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0214 	bic.w	r2, r2, #20
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e027      	b.n	80067e0 <HAL_DMA_IRQHandler+0xcc4>
 8006790:	40020010 	.word	0x40020010
 8006794:	40020028 	.word	0x40020028
 8006798:	40020040 	.word	0x40020040
 800679c:	40020058 	.word	0x40020058
 80067a0:	40020070 	.word	0x40020070
 80067a4:	40020088 	.word	0x40020088
 80067a8:	400200a0 	.word	0x400200a0
 80067ac:	400200b8 	.word	0x400200b8
 80067b0:	40020410 	.word	0x40020410
 80067b4:	40020428 	.word	0x40020428
 80067b8:	40020440 	.word	0x40020440
 80067bc:	40020458 	.word	0x40020458
 80067c0:	40020470 	.word	0x40020470
 80067c4:	40020488 	.word	0x40020488
 80067c8:	400204a0 	.word	0x400204a0
 80067cc:	400204b8 	.word	0x400204b8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 020a 	bic.w	r2, r2, #10
 80067de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8097 	beq.w	8006928 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006802:	e091      	b.n	8006928 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	2208      	movs	r2, #8
 800680e:	409a      	lsls	r2, r3
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8088 	beq.w	800692a <HAL_DMA_IRQHandler+0xe0e>
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8082 	beq.w	800692a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a41      	ldr	r2, [pc, #260]	@ (8006930 <HAL_DMA_IRQHandler+0xe14>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d04a      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a3f      	ldr	r2, [pc, #252]	@ (8006934 <HAL_DMA_IRQHandler+0xe18>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d045      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a3e      	ldr	r2, [pc, #248]	@ (8006938 <HAL_DMA_IRQHandler+0xe1c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d040      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a3c      	ldr	r2, [pc, #240]	@ (800693c <HAL_DMA_IRQHandler+0xe20>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d03b      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a3b      	ldr	r2, [pc, #236]	@ (8006940 <HAL_DMA_IRQHandler+0xe24>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d036      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a39      	ldr	r2, [pc, #228]	@ (8006944 <HAL_DMA_IRQHandler+0xe28>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d031      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a38      	ldr	r2, [pc, #224]	@ (8006948 <HAL_DMA_IRQHandler+0xe2c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d02c      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a36      	ldr	r2, [pc, #216]	@ (800694c <HAL_DMA_IRQHandler+0xe30>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d027      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a35      	ldr	r2, [pc, #212]	@ (8006950 <HAL_DMA_IRQHandler+0xe34>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d022      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a33      	ldr	r2, [pc, #204]	@ (8006954 <HAL_DMA_IRQHandler+0xe38>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01d      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a32      	ldr	r2, [pc, #200]	@ (8006958 <HAL_DMA_IRQHandler+0xe3c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d018      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a30      	ldr	r2, [pc, #192]	@ (800695c <HAL_DMA_IRQHandler+0xe40>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006960 <HAL_DMA_IRQHandler+0xe44>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00e      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006964 <HAL_DMA_IRQHandler+0xe48>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d009      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006968 <HAL_DMA_IRQHandler+0xe4c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d004      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xdaa>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2a      	ldr	r2, [pc, #168]	@ (800696c <HAL_DMA_IRQHandler+0xe50>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d108      	bne.n	80068d8 <HAL_DMA_IRQHandler+0xdbc>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 021c 	bic.w	r2, r2, #28
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e007      	b.n	80068e8 <HAL_DMA_IRQHandler+0xdcc>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 020e 	bic.w	r2, r2, #14
 80068e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	2201      	movs	r2, #1
 80068f2:	409a      	lsls	r2, r3
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	4798      	blx	r3
 800691e:	e004      	b.n	800692a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006920:	bf00      	nop
 8006922:	e002      	b.n	800692a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006924:	bf00      	nop
 8006926:	e000      	b.n	800692a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006928:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800692a:	3728      	adds	r7, #40	@ 0x28
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40020010 	.word	0x40020010
 8006934:	40020028 	.word	0x40020028
 8006938:	40020040 	.word	0x40020040
 800693c:	40020058 	.word	0x40020058
 8006940:	40020070 	.word	0x40020070
 8006944:	40020088 	.word	0x40020088
 8006948:	400200a0 	.word	0x400200a0
 800694c:	400200b8 	.word	0x400200b8
 8006950:	40020410 	.word	0x40020410
 8006954:	40020428 	.word	0x40020428
 8006958:	40020440 	.word	0x40020440
 800695c:	40020458 	.word	0x40020458
 8006960:	40020470 	.word	0x40020470
 8006964:	40020488 	.word	0x40020488
 8006968:	400204a0 	.word	0x400204a0
 800696c:	400204b8 	.word	0x400204b8

08006970 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006982:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006988:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a7f      	ldr	r2, [pc, #508]	@ (8006b8c <DMA_SetConfig+0x21c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d072      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a7d      	ldr	r2, [pc, #500]	@ (8006b90 <DMA_SetConfig+0x220>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d06d      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a7c      	ldr	r2, [pc, #496]	@ (8006b94 <DMA_SetConfig+0x224>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d068      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a7a      	ldr	r2, [pc, #488]	@ (8006b98 <DMA_SetConfig+0x228>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d063      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a79      	ldr	r2, [pc, #484]	@ (8006b9c <DMA_SetConfig+0x22c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d05e      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a77      	ldr	r2, [pc, #476]	@ (8006ba0 <DMA_SetConfig+0x230>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d059      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a76      	ldr	r2, [pc, #472]	@ (8006ba4 <DMA_SetConfig+0x234>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d054      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a74      	ldr	r2, [pc, #464]	@ (8006ba8 <DMA_SetConfig+0x238>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d04f      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a73      	ldr	r2, [pc, #460]	@ (8006bac <DMA_SetConfig+0x23c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d04a      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a71      	ldr	r2, [pc, #452]	@ (8006bb0 <DMA_SetConfig+0x240>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d045      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a70      	ldr	r2, [pc, #448]	@ (8006bb4 <DMA_SetConfig+0x244>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d040      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a6e      	ldr	r2, [pc, #440]	@ (8006bb8 <DMA_SetConfig+0x248>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d03b      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a6d      	ldr	r2, [pc, #436]	@ (8006bbc <DMA_SetConfig+0x24c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d036      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a6b      	ldr	r2, [pc, #428]	@ (8006bc0 <DMA_SetConfig+0x250>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d031      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a6a      	ldr	r2, [pc, #424]	@ (8006bc4 <DMA_SetConfig+0x254>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d02c      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a68      	ldr	r2, [pc, #416]	@ (8006bc8 <DMA_SetConfig+0x258>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d027      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a67      	ldr	r2, [pc, #412]	@ (8006bcc <DMA_SetConfig+0x25c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d022      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a65      	ldr	r2, [pc, #404]	@ (8006bd0 <DMA_SetConfig+0x260>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01d      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a64      	ldr	r2, [pc, #400]	@ (8006bd4 <DMA_SetConfig+0x264>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d018      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a62      	ldr	r2, [pc, #392]	@ (8006bd8 <DMA_SetConfig+0x268>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a61      	ldr	r2, [pc, #388]	@ (8006bdc <DMA_SetConfig+0x26c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00e      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a5f      	ldr	r2, [pc, #380]	@ (8006be0 <DMA_SetConfig+0x270>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a5e      	ldr	r2, [pc, #376]	@ (8006be4 <DMA_SetConfig+0x274>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d004      	beq.n	8006a7a <DMA_SetConfig+0x10a>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a5c      	ldr	r2, [pc, #368]	@ (8006be8 <DMA_SetConfig+0x278>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d101      	bne.n	8006a7e <DMA_SetConfig+0x10e>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <DMA_SetConfig+0x110>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00d      	beq.n	8006aa0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d004      	beq.n	8006aa0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a39      	ldr	r2, [pc, #228]	@ (8006b8c <DMA_SetConfig+0x21c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d04a      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a38      	ldr	r2, [pc, #224]	@ (8006b90 <DMA_SetConfig+0x220>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d045      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a36      	ldr	r2, [pc, #216]	@ (8006b94 <DMA_SetConfig+0x224>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d040      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a35      	ldr	r2, [pc, #212]	@ (8006b98 <DMA_SetConfig+0x228>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d03b      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a33      	ldr	r2, [pc, #204]	@ (8006b9c <DMA_SetConfig+0x22c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d036      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a32      	ldr	r2, [pc, #200]	@ (8006ba0 <DMA_SetConfig+0x230>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d031      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a30      	ldr	r2, [pc, #192]	@ (8006ba4 <DMA_SetConfig+0x234>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d02c      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2f      	ldr	r2, [pc, #188]	@ (8006ba8 <DMA_SetConfig+0x238>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d027      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a2d      	ldr	r2, [pc, #180]	@ (8006bac <DMA_SetConfig+0x23c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d022      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a2c      	ldr	r2, [pc, #176]	@ (8006bb0 <DMA_SetConfig+0x240>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d01d      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a2a      	ldr	r2, [pc, #168]	@ (8006bb4 <DMA_SetConfig+0x244>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d018      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a29      	ldr	r2, [pc, #164]	@ (8006bb8 <DMA_SetConfig+0x248>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d013      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a27      	ldr	r2, [pc, #156]	@ (8006bbc <DMA_SetConfig+0x24c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00e      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a26      	ldr	r2, [pc, #152]	@ (8006bc0 <DMA_SetConfig+0x250>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a24      	ldr	r2, [pc, #144]	@ (8006bc4 <DMA_SetConfig+0x254>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <DMA_SetConfig+0x1d0>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a23      	ldr	r2, [pc, #140]	@ (8006bc8 <DMA_SetConfig+0x258>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d101      	bne.n	8006b44 <DMA_SetConfig+0x1d4>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e000      	b.n	8006b46 <DMA_SetConfig+0x1d6>
 8006b44:	2300      	movs	r3, #0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d059      	beq.n	8006bfe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b4e:	f003 031f 	and.w	r3, r3, #31
 8006b52:	223f      	movs	r2, #63	@ 0x3f
 8006b54:	409a      	lsls	r2, r3
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006b68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b40      	cmp	r3, #64	@ 0x40
 8006b78:	d138      	bne.n	8006bec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b8a:	e086      	b.n	8006c9a <DMA_SetConfig+0x32a>
 8006b8c:	40020010 	.word	0x40020010
 8006b90:	40020028 	.word	0x40020028
 8006b94:	40020040 	.word	0x40020040
 8006b98:	40020058 	.word	0x40020058
 8006b9c:	40020070 	.word	0x40020070
 8006ba0:	40020088 	.word	0x40020088
 8006ba4:	400200a0 	.word	0x400200a0
 8006ba8:	400200b8 	.word	0x400200b8
 8006bac:	40020410 	.word	0x40020410
 8006bb0:	40020428 	.word	0x40020428
 8006bb4:	40020440 	.word	0x40020440
 8006bb8:	40020458 	.word	0x40020458
 8006bbc:	40020470 	.word	0x40020470
 8006bc0:	40020488 	.word	0x40020488
 8006bc4:	400204a0 	.word	0x400204a0
 8006bc8:	400204b8 	.word	0x400204b8
 8006bcc:	58025408 	.word	0x58025408
 8006bd0:	5802541c 	.word	0x5802541c
 8006bd4:	58025430 	.word	0x58025430
 8006bd8:	58025444 	.word	0x58025444
 8006bdc:	58025458 	.word	0x58025458
 8006be0:	5802546c 	.word	0x5802546c
 8006be4:	58025480 	.word	0x58025480
 8006be8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	60da      	str	r2, [r3, #12]
}
 8006bfc:	e04d      	b.n	8006c9a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a29      	ldr	r2, [pc, #164]	@ (8006ca8 <DMA_SetConfig+0x338>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d022      	beq.n	8006c4e <DMA_SetConfig+0x2de>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a27      	ldr	r2, [pc, #156]	@ (8006cac <DMA_SetConfig+0x33c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01d      	beq.n	8006c4e <DMA_SetConfig+0x2de>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a26      	ldr	r2, [pc, #152]	@ (8006cb0 <DMA_SetConfig+0x340>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d018      	beq.n	8006c4e <DMA_SetConfig+0x2de>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a24      	ldr	r2, [pc, #144]	@ (8006cb4 <DMA_SetConfig+0x344>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <DMA_SetConfig+0x2de>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a23      	ldr	r2, [pc, #140]	@ (8006cb8 <DMA_SetConfig+0x348>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d00e      	beq.n	8006c4e <DMA_SetConfig+0x2de>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a21      	ldr	r2, [pc, #132]	@ (8006cbc <DMA_SetConfig+0x34c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d009      	beq.n	8006c4e <DMA_SetConfig+0x2de>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a20      	ldr	r2, [pc, #128]	@ (8006cc0 <DMA_SetConfig+0x350>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d004      	beq.n	8006c4e <DMA_SetConfig+0x2de>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc4 <DMA_SetConfig+0x354>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d101      	bne.n	8006c52 <DMA_SetConfig+0x2e2>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <DMA_SetConfig+0x2e4>
 8006c52:	2300      	movs	r3, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d020      	beq.n	8006c9a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	2201      	movs	r2, #1
 8006c62:	409a      	lsls	r2, r3
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2b40      	cmp	r3, #64	@ 0x40
 8006c76:	d108      	bne.n	8006c8a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	60da      	str	r2, [r3, #12]
}
 8006c88:	e007      	b.n	8006c9a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	60da      	str	r2, [r3, #12]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	58025408 	.word	0x58025408
 8006cac:	5802541c 	.word	0x5802541c
 8006cb0:	58025430 	.word	0x58025430
 8006cb4:	58025444 	.word	0x58025444
 8006cb8:	58025458 	.word	0x58025458
 8006cbc:	5802546c 	.word	0x5802546c
 8006cc0:	58025480 	.word	0x58025480
 8006cc4:	58025494 	.word	0x58025494

08006cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a42      	ldr	r2, [pc, #264]	@ (8006de0 <DMA_CalcBaseAndBitshift+0x118>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d04a      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a41      	ldr	r2, [pc, #260]	@ (8006de4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d045      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a3f      	ldr	r2, [pc, #252]	@ (8006de8 <DMA_CalcBaseAndBitshift+0x120>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d040      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8006dec <DMA_CalcBaseAndBitshift+0x124>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d03b      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8006df0 <DMA_CalcBaseAndBitshift+0x128>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d036      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a3b      	ldr	r2, [pc, #236]	@ (8006df4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d031      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a39      	ldr	r2, [pc, #228]	@ (8006df8 <DMA_CalcBaseAndBitshift+0x130>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d02c      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a38      	ldr	r2, [pc, #224]	@ (8006dfc <DMA_CalcBaseAndBitshift+0x134>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d027      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a36      	ldr	r2, [pc, #216]	@ (8006e00 <DMA_CalcBaseAndBitshift+0x138>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d022      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a35      	ldr	r2, [pc, #212]	@ (8006e04 <DMA_CalcBaseAndBitshift+0x13c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a33      	ldr	r2, [pc, #204]	@ (8006e08 <DMA_CalcBaseAndBitshift+0x140>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a32      	ldr	r2, [pc, #200]	@ (8006e0c <DMA_CalcBaseAndBitshift+0x144>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a30      	ldr	r2, [pc, #192]	@ (8006e10 <DMA_CalcBaseAndBitshift+0x148>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a2f      	ldr	r2, [pc, #188]	@ (8006e14 <DMA_CalcBaseAndBitshift+0x14c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a2d      	ldr	r2, [pc, #180]	@ (8006e18 <DMA_CalcBaseAndBitshift+0x150>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <DMA_CalcBaseAndBitshift+0xa8>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8006e1c <DMA_CalcBaseAndBitshift+0x154>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d101      	bne.n	8006d74 <DMA_CalcBaseAndBitshift+0xac>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <DMA_CalcBaseAndBitshift+0xae>
 8006d74:	2300      	movs	r3, #0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d024      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	3b10      	subs	r3, #16
 8006d82:	4a27      	ldr	r2, [pc, #156]	@ (8006e20 <DMA_CalcBaseAndBitshift+0x158>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	4a24      	ldr	r2, [pc, #144]	@ (8006e24 <DMA_CalcBaseAndBitshift+0x15c>)
 8006d94:	5cd3      	ldrb	r3, [r2, r3]
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d908      	bls.n	8006db4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	4b1f      	ldr	r3, [pc, #124]	@ (8006e28 <DMA_CalcBaseAndBitshift+0x160>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	1d1a      	adds	r2, r3, #4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006db2:	e00d      	b.n	8006dd0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b1b      	ldr	r3, [pc, #108]	@ (8006e28 <DMA_CalcBaseAndBitshift+0x160>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dc2:	e005      	b.n	8006dd0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	40020010 	.word	0x40020010
 8006de4:	40020028 	.word	0x40020028
 8006de8:	40020040 	.word	0x40020040
 8006dec:	40020058 	.word	0x40020058
 8006df0:	40020070 	.word	0x40020070
 8006df4:	40020088 	.word	0x40020088
 8006df8:	400200a0 	.word	0x400200a0
 8006dfc:	400200b8 	.word	0x400200b8
 8006e00:	40020410 	.word	0x40020410
 8006e04:	40020428 	.word	0x40020428
 8006e08:	40020440 	.word	0x40020440
 8006e0c:	40020458 	.word	0x40020458
 8006e10:	40020470 	.word	0x40020470
 8006e14:	40020488 	.word	0x40020488
 8006e18:	400204a0 	.word	0x400204a0
 8006e1c:	400204b8 	.word	0x400204b8
 8006e20:	aaaaaaab 	.word	0xaaaaaaab
 8006e24:	08011e24 	.word	0x08011e24
 8006e28:	fffffc00 	.word	0xfffffc00

08006e2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d120      	bne.n	8006e82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d858      	bhi.n	8006efa <DMA_CheckFifoParam+0xce>
 8006e48:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <DMA_CheckFifoParam+0x24>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08006e73 	.word	0x08006e73
 8006e58:	08006e61 	.word	0x08006e61
 8006e5c:	08006efb 	.word	0x08006efb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d048      	beq.n	8006efe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e70:	e045      	b.n	8006efe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e7a:	d142      	bne.n	8006f02 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e80:	e03f      	b.n	8006f02 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e8a:	d123      	bne.n	8006ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d838      	bhi.n	8006f06 <DMA_CheckFifoParam+0xda>
 8006e94:	a201      	add	r2, pc, #4	@ (adr r2, 8006e9c <DMA_CheckFifoParam+0x70>)
 8006e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9a:	bf00      	nop
 8006e9c:	08006ead 	.word	0x08006ead
 8006ea0:	08006eb3 	.word	0x08006eb3
 8006ea4:	08006ead 	.word	0x08006ead
 8006ea8:	08006ec5 	.word	0x08006ec5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	73fb      	strb	r3, [r7, #15]
        break;
 8006eb0:	e030      	b.n	8006f14 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d025      	beq.n	8006f0a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ec2:	e022      	b.n	8006f0a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ecc:	d11f      	bne.n	8006f0e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ed2:	e01c      	b.n	8006f0e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d902      	bls.n	8006ee2 <DMA_CheckFifoParam+0xb6>
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d003      	beq.n	8006ee8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006ee0:	e018      	b.n	8006f14 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ee6:	e015      	b.n	8006f14 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00e      	beq.n	8006f12 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ef8:	e00b      	b.n	8006f12 <DMA_CheckFifoParam+0xe6>
        break;
 8006efa:	bf00      	nop
 8006efc:	e00a      	b.n	8006f14 <DMA_CheckFifoParam+0xe8>
        break;
 8006efe:	bf00      	nop
 8006f00:	e008      	b.n	8006f14 <DMA_CheckFifoParam+0xe8>
        break;
 8006f02:	bf00      	nop
 8006f04:	e006      	b.n	8006f14 <DMA_CheckFifoParam+0xe8>
        break;
 8006f06:	bf00      	nop
 8006f08:	e004      	b.n	8006f14 <DMA_CheckFifoParam+0xe8>
        break;
 8006f0a:	bf00      	nop
 8006f0c:	e002      	b.n	8006f14 <DMA_CheckFifoParam+0xe8>
        break;
 8006f0e:	bf00      	nop
 8006f10:	e000      	b.n	8006f14 <DMA_CheckFifoParam+0xe8>
    break;
 8006f12:	bf00      	nop
    }
  }

  return status;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop

08006f24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a38      	ldr	r2, [pc, #224]	@ (8007018 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d022      	beq.n	8006f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a36      	ldr	r2, [pc, #216]	@ (800701c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d01d      	beq.n	8006f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a35      	ldr	r2, [pc, #212]	@ (8007020 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d018      	beq.n	8006f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a33      	ldr	r2, [pc, #204]	@ (8007024 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d013      	beq.n	8006f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a32      	ldr	r2, [pc, #200]	@ (8007028 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00e      	beq.n	8006f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a30      	ldr	r2, [pc, #192]	@ (800702c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d009      	beq.n	8006f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a2f      	ldr	r2, [pc, #188]	@ (8007030 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d004      	beq.n	8006f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8007034 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d101      	bne.n	8006f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01a      	beq.n	8006fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	3b08      	subs	r3, #8
 8006f94:	4a28      	ldr	r2, [pc, #160]	@ (8007038 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006f96:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9a:	091b      	lsrs	r3, r3, #4
 8006f9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4b26      	ldr	r3, [pc, #152]	@ (800703c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a24      	ldr	r2, [pc, #144]	@ (8007040 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006fb0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 031f 	and.w	r3, r3, #31
 8006fb8:	2201      	movs	r2, #1
 8006fba:	409a      	lsls	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006fc0:	e024      	b.n	800700c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	3b10      	subs	r3, #16
 8006fca:	4a1e      	ldr	r2, [pc, #120]	@ (8007044 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd0:	091b      	lsrs	r3, r3, #4
 8006fd2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8007048 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d806      	bhi.n	8006fea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4a1b      	ldr	r2, [pc, #108]	@ (800704c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d902      	bls.n	8006fea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4b18      	ldr	r3, [pc, #96]	@ (8007050 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a16      	ldr	r2, [pc, #88]	@ (8007054 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006ffc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f003 031f 	and.w	r3, r3, #31
 8007004:	2201      	movs	r2, #1
 8007006:	409a      	lsls	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800700c:	bf00      	nop
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	58025408 	.word	0x58025408
 800701c:	5802541c 	.word	0x5802541c
 8007020:	58025430 	.word	0x58025430
 8007024:	58025444 	.word	0x58025444
 8007028:	58025458 	.word	0x58025458
 800702c:	5802546c 	.word	0x5802546c
 8007030:	58025480 	.word	0x58025480
 8007034:	58025494 	.word	0x58025494
 8007038:	cccccccd 	.word	0xcccccccd
 800703c:	16009600 	.word	0x16009600
 8007040:	58025880 	.word	0x58025880
 8007044:	aaaaaaab 	.word	0xaaaaaaab
 8007048:	400204b8 	.word	0x400204b8
 800704c:	4002040f 	.word	0x4002040f
 8007050:	10008200 	.word	0x10008200
 8007054:	40020880 	.word	0x40020880

08007058 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d04a      	beq.n	8007104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b08      	cmp	r3, #8
 8007072:	d847      	bhi.n	8007104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a25      	ldr	r2, [pc, #148]	@ (8007110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d022      	beq.n	80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a24      	ldr	r2, [pc, #144]	@ (8007114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d01d      	beq.n	80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a22      	ldr	r2, [pc, #136]	@ (8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d018      	beq.n	80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a21      	ldr	r2, [pc, #132]	@ (800711c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d013      	beq.n	80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00e      	beq.n	80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d009      	beq.n	80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d004      	beq.n	80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1b      	ldr	r2, [pc, #108]	@ (800712c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d101      	bne.n	80070c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80070c8:	2300      	movs	r3, #0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4b17      	ldr	r3, [pc, #92]	@ (8007130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a15      	ldr	r2, [pc, #84]	@ (8007134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80070e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80070e2:	e009      	b.n	80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4b14      	ldr	r3, [pc, #80]	@ (8007138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	461a      	mov	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a11      	ldr	r2, [pc, #68]	@ (800713c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80070f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	2201      	movs	r2, #1
 80070fe:	409a      	lsls	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	58025408 	.word	0x58025408
 8007114:	5802541c 	.word	0x5802541c
 8007118:	58025430 	.word	0x58025430
 800711c:	58025444 	.word	0x58025444
 8007120:	58025458 	.word	0x58025458
 8007124:	5802546c 	.word	0x5802546c
 8007128:	58025480 	.word	0x58025480
 800712c:	58025494 	.word	0x58025494
 8007130:	1600963f 	.word	0x1600963f
 8007134:	58025940 	.word	0x58025940
 8007138:	1000823f 	.word	0x1000823f
 800713c:	40020940 	.word	0x40020940

08007140 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b098      	sub	sp, #96	@ 0x60
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007148:	4a84      	ldr	r2, [pc, #528]	@ (800735c <HAL_FDCAN_Init+0x21c>)
 800714a:	f107 030c 	add.w	r3, r7, #12
 800714e:	4611      	mov	r1, r2
 8007150:	224c      	movs	r2, #76	@ 0x4c
 8007152:	4618      	mov	r0, r3
 8007154:	f00a f892 	bl	801127c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e1c6      	b.n	80074f0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a7e      	ldr	r2, [pc, #504]	@ (8007360 <HAL_FDCAN_Init+0x220>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d106      	bne.n	800717a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007174:	461a      	mov	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fb f842 	bl	8002218 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699a      	ldr	r2, [r3, #24]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0210 	bic.w	r2, r2, #16
 80071a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071a4:	f7fb fd1a 	bl	8002bdc <HAL_GetTick>
 80071a8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071aa:	e014      	b.n	80071d6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80071ac:	f7fb fd16 	bl	8002bdc <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b0a      	cmp	r3, #10
 80071b8:	d90d      	bls.n	80071d6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071c0:	f043 0201 	orr.w	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2203      	movs	r2, #3
 80071ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e18c      	b.n	80074f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d0e3      	beq.n	80071ac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071f4:	f7fb fcf2 	bl	8002bdc <HAL_GetTick>
 80071f8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80071fa:	e014      	b.n	8007226 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80071fc:	f7fb fcee 	bl	8002bdc <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b0a      	cmp	r3, #10
 8007208:	d90d      	bls.n	8007226 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007210:	f043 0201 	orr.w	r2, r3, #1
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2203      	movs	r2, #3
 800721e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e164      	b.n	80074f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0e3      	beq.n	80071fc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0202 	orr.w	r2, r2, #2
 8007242:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	7c1b      	ldrb	r3, [r3, #16]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d108      	bne.n	800725e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800725a:	619a      	str	r2, [r3, #24]
 800725c:	e007      	b.n	800726e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699a      	ldr	r2, [r3, #24]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800726c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7c5b      	ldrb	r3, [r3, #17]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d108      	bne.n	8007288 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007284:	619a      	str	r2, [r3, #24]
 8007286:	e007      	b.n	8007298 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007296:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	7c9b      	ldrb	r3, [r3, #18]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d108      	bne.n	80072b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072ae:	619a      	str	r2, [r3, #24]
 80072b0:	e007      	b.n	80072c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699a      	ldr	r2, [r3, #24]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80072e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691a      	ldr	r2, [r3, #16]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0210 	bic.w	r2, r2, #16
 80072f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d108      	bne.n	8007312 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0204 	orr.w	r2, r2, #4
 800730e:	619a      	str	r2, [r3, #24]
 8007310:	e030      	b.n	8007374 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d02c      	beq.n	8007374 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d020      	beq.n	8007364 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699a      	ldr	r2, [r3, #24]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007330:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 0210 	orr.w	r2, r2, #16
 8007340:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b03      	cmp	r3, #3
 8007348:	d114      	bne.n	8007374 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	699a      	ldr	r2, [r3, #24]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 0220 	orr.w	r2, r2, #32
 8007358:	619a      	str	r2, [r3, #24]
 800735a:	e00b      	b.n	8007374 <HAL_FDCAN_Init+0x234>
 800735c:	08011dc8 	.word	0x08011dc8
 8007360:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0220 	orr.w	r2, r2, #32
 8007372:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	3b01      	subs	r3, #1
 800737a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	3b01      	subs	r3, #1
 8007382:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007384:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800738c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	3b01      	subs	r3, #1
 8007396:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800739c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800739e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073a8:	d115      	bne.n	80073d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	3b01      	subs	r3, #1
 80073b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073be:	3b01      	subs	r3, #1
 80073c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80073c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ca:	3b01      	subs	r3, #1
 80073cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80073d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073fc:	4413      	add	r3, r2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d011      	beq.n	8007426 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800740a:	f023 0107 	bic.w	r1, r3, #7
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	3360      	adds	r3, #96	@ 0x60
 8007416:	443b      	add	r3, r7
 8007418:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d011      	beq.n	8007452 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007436:	f023 0107 	bic.w	r1, r3, #7
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	3360      	adds	r3, #96	@ 0x60
 8007442:	443b      	add	r3, r7
 8007444:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007456:	2b00      	cmp	r3, #0
 8007458:	d012      	beq.n	8007480 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007462:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	3360      	adds	r3, #96	@ 0x60
 800746e:	443b      	add	r3, r7
 8007470:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007474:	011a      	lsls	r2, r3, #4
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007484:	2b00      	cmp	r3, #0
 8007486:	d012      	beq.n	80074ae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007490:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	3360      	adds	r3, #96	@ 0x60
 800749c:	443b      	add	r3, r7
 800749e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80074a2:	021a      	lsls	r2, r3, #8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a11      	ldr	r2, [pc, #68]	@ (80074f8 <HAL_FDCAN_Init+0x3b8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d107      	bne.n	80074c8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f022 0203 	bic.w	r2, r2, #3
 80074c6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fdeb 	bl	80080bc <FDCAN_CalcultateRamBlockAddresses>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80074ec:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3760      	adds	r7, #96	@ 0x60
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	4000a000 	.word	0x4000a000

080074fc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800750c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d002      	beq.n	800751a <HAL_FDCAN_ConfigFilter+0x1e>
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d157      	bne.n	80075ca <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d12b      	bne.n	800757a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	2b07      	cmp	r3, #7
 8007528:	d10d      	bne.n	8007546 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007536:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800753c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800753e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	e00e      	b.n	8007564 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007552:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800755a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007560:	4313      	orrs	r3, r2
 8007562:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	e025      	b.n	80075c6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	075a      	lsls	r2, r3, #29
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b07      	cmp	r3, #7
 800758e:	d103      	bne.n	8007598 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	e006      	b.n	80075a6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	079a      	lsls	r2, r3, #30
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	4413      	add	r3, r2
 80075b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	3304      	adds	r3, #4
 80075be:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e008      	b.n	80075dc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075d0:	f043 0202 	orr.w	r2, r3, #2
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
  }
}
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d111      	bne.n	8007620 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0201 	bic.w	r2, r2, #1
 8007612:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	e008      	b.n	8007632 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007626:	f043 0204 	orr.w	r2, r3, #4
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
  }
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d141      	bne.n	80076da <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800765e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800766c:	f043 0220 	orr.w	r2, r3, #32
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e038      	b.n	80076ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007682:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007690:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e026      	b.n	80076ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80076a6:	0c1b      	lsrs	r3, r3, #16
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fe87 	bl	80083c8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2101      	movs	r1, #1
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	fa01 f202 	lsl.w	r2, r1, r2
 80076c6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80076ca:	2201      	movs	r2, #1
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	409a      	lsls	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	e008      	b.n	80076ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076e0:	f043 0208 	orr.w	r2, r3, #8
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
  }
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b08b      	sub	sp, #44	@ 0x2c
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800770c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800770e:	7efb      	ldrb	r3, [r7, #27]
 8007710:	2b02      	cmp	r3, #2
 8007712:	f040 8149 	bne.w	80079a8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b40      	cmp	r3, #64	@ 0x40
 800771a:	d14c      	bne.n	80077b6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007724:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d109      	bne.n	8007740 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007732:	f043 0220 	orr.w	r2, r3, #32
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e13c      	b.n	80079ba <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007756:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e12a      	b.n	80079ba <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800776c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007774:	d10a      	bne.n	800778c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800777e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007786:	d101      	bne.n	800778c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007788:	2301      	movs	r3, #1
 800778a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007794:	0a1b      	lsrs	r3, r3, #8
 8007796:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	4413      	add	r3, r2
 800779e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a8:	69f9      	ldr	r1, [r7, #28]
 80077aa:	fb01 f303 	mul.w	r3, r1, r3
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077b4:	e068      	b.n	8007888 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b41      	cmp	r3, #65	@ 0x41
 80077ba:	d14c      	bne.n	8007856 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077d2:	f043 0220 	orr.w	r2, r3, #32
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0ec      	b.n	80079ba <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d109      	bne.n	8007804 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e0da      	b.n	80079ba <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800780c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007814:	d10a      	bne.n	800782c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800781e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007826:	d101      	bne.n	800782c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007828:	2301      	movs	r3, #1
 800782a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007834:	0a1b      	lsrs	r3, r3, #8
 8007836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	4413      	add	r3, r2
 800783e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007848:	69f9      	ldr	r1, [r7, #28]
 800784a:	fb01 f303 	mul.w	r3, r1, r3
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
 8007854:	e018      	b.n	8007888 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	429a      	cmp	r2, r3
 800785e:	d309      	bcc.n	8007874 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007866:	f043 0220 	orr.w	r2, r3, #32
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0a2      	b.n	80079ba <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	fb01 f303 	mul.w	r3, r1, r3
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d107      	bne.n	80078ac <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	0c9b      	lsrs	r3, r3, #18
 80078a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	e005      	b.n	80078b8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80078ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	3304      	adds	r3, #4
 80078d4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	b29a      	uxth	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	0c1b      	lsrs	r3, r3, #16
 80078e6:	f003 020f 	and.w	r2, r3, #15
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	0e1b      	lsrs	r3, r3, #24
 800790c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	0fda      	lsrs	r2, r3, #31
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	3304      	adds	r3, #4
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007928:	2300      	movs	r3, #0
 800792a:	623b      	str	r3, [r7, #32]
 800792c:	e00a      	b.n	8007944 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	441a      	add	r2, r3
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	440b      	add	r3, r1
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	3301      	adds	r3, #1
 8007942:	623b      	str	r3, [r7, #32]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	4a1f      	ldr	r2, [pc, #124]	@ (80079c8 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800794a:	5cd3      	ldrb	r3, [r2, r3]
 800794c:	461a      	mov	r2, r3
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	4293      	cmp	r3, r2
 8007952:	d3ec      	bcc.n	800792e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b40      	cmp	r3, #64	@ 0x40
 8007958:	d105      	bne.n	8007966 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007964:	e01e      	b.n	80079a4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b41      	cmp	r3, #65	@ 0x41
 800796a:	d105      	bne.n	8007978 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007976:	e015      	b.n	80079a4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b1f      	cmp	r3, #31
 800797c:	d808      	bhi.n	8007990 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2101      	movs	r1, #1
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	fa01 f202 	lsl.w	r2, r1, r2
 800798a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800798e:	e009      	b.n	80079a4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f003 021f 	and.w	r2, r3, #31
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2101      	movs	r1, #1
 800799c:	fa01 f202 	lsl.w	r2, r1, r2
 80079a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	e008      	b.n	80079ba <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079ae:	f043 0208 	orr.w	r2, r3, #8
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
  }
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	372c      	adds	r7, #44	@ 0x2c
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	08011e2c 	.word	0x08011e2c

080079cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80079de:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d002      	beq.n	80079ec <HAL_FDCAN_ActivateNotification+0x20>
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d155      	bne.n	8007a98 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4013      	ands	r3, r2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d108      	bne.n	8007a0c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f042 0201 	orr.w	r2, r2, #1
 8007a08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a0a:	e014      	b.n	8007a36 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	4013      	ands	r3, r2
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d108      	bne.n	8007a2e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0202 	orr.w	r2, r2, #2
 8007a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a2c:	e003      	b.n	8007a36 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2203      	movs	r2, #3
 8007a34:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab8 <HAL_FDCAN_ActivateNotification+0xec>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	6812      	ldr	r2, [r2, #0]
 8007a82:	430b      	orrs	r3, r1
 8007a84:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a86:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <HAL_FDCAN_ActivateNotification+0xf0>)
 8007a88:	695a      	ldr	r2, [r3, #20]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	0f9b      	lsrs	r3, r3, #30
 8007a8e:	490b      	ldr	r1, [pc, #44]	@ (8007abc <HAL_FDCAN_ActivateNotification+0xf0>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e008      	b.n	8007aaa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a9e:	f043 0202 	orr.w	r2, r3, #2
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
  }
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	371c      	adds	r7, #28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	3fcfffff 	.word	0x3fcfffff
 8007abc:	4000a800 	.word	0x4000a800

08007ac0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b096      	sub	sp, #88	@ 0x58
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007ac8:	4b9a      	ldr	r3, [pc, #616]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	079b      	lsls	r3, r3, #30
 8007ace:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007ad0:	4b98      	ldr	r3, [pc, #608]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	079b      	lsls	r3, r3, #30
 8007ad6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ad8:	4013      	ands	r3, r2
 8007ada:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007ae6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007af0:	4013      	ands	r3, r2
 8007af2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b08:	4013      	ands	r3, r2
 8007b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b20:	4013      	ands	r3, r2
 8007b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b2a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8007b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b38:	4013      	ands	r3, r2
 8007b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b42:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8007b46:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b50:	4013      	ands	r3, r2
 8007b52:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b66:	0a1b      	lsrs	r3, r3, #8
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d010      	beq.n	8007b92 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	0a1b      	lsrs	r3, r3, #8
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b84:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b86:	4b6b      	ldr	r3, [pc, #428]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fa54 	bl	800803a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b94:	0a9b      	lsrs	r3, r3, #10
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d01d      	beq.n	8007bda <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba0:	0a9b      	lsrs	r3, r3, #10
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d017      	beq.n	8007bda <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007bb2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007bca:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bcc:	4b59      	ldr	r3, [pc, #356]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007bd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fa07 	bl	8007fe8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00d      	beq.n	8007bfc <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007be6:	4b54      	ldr	r3, [pc, #336]	@ (8007d38 <HAL_FDCAN_IRQHandler+0x278>)
 8007be8:	400b      	ands	r3, r1
 8007bea:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bec:	4a51      	ldr	r2, [pc, #324]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bf0:	0f9b      	lsrs	r3, r3, #30
 8007bf2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007bf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f9c0 	bl	8007f7c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00d      	beq.n	8007c1e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c08:	4b4b      	ldr	r3, [pc, #300]	@ (8007d38 <HAL_FDCAN_IRQHandler+0x278>)
 8007c0a:	400b      	ands	r3, r1
 8007c0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c0e:	4a49      	ldr	r2, [pc, #292]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c12:	0f9b      	lsrs	r3, r3, #30
 8007c14:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007c16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9ba 	bl	8007f92 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00d      	beq.n	8007c40 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c2a:	4b43      	ldr	r3, [pc, #268]	@ (8007d38 <HAL_FDCAN_IRQHandler+0x278>)
 8007c2c:	400b      	ands	r3, r1
 8007c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c30:	4a40      	ldr	r2, [pc, #256]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c34:	0f9b      	lsrs	r3, r3, #30
 8007c36:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007c38:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7f9 fd30 	bl	80016a0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00d      	beq.n	8007c62 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8007d38 <HAL_FDCAN_IRQHandler+0x278>)
 8007c4e:	400b      	ands	r3, r1
 8007c50:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c52:	4a38      	ldr	r2, [pc, #224]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c56:	0f9b      	lsrs	r3, r3, #30
 8007c58:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007c5a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f9a3 	bl	8007fa8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c64:	0adb      	lsrs	r3, r3, #11
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d010      	beq.n	8007c90 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c70:	0adb      	lsrs	r3, r3, #11
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c82:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c84:	4b2b      	ldr	r3, [pc, #172]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f997 	bl	8007fbe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c92:	0a5b      	lsrs	r3, r3, #9
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01d      	beq.n	8007cd8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9e:	0a5b      	lsrs	r3, r3, #9
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d017      	beq.n	8007cd8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cb0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cca:	4b1a      	ldr	r3, [pc, #104]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007cd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f97d 	bl	8007fd2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cda:	0cdb      	lsrs	r3, r3, #19
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d010      	beq.n	8007d06 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce6:	0cdb      	lsrs	r3, r3, #19
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007cf8:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f97c 	bl	8007ffe <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d016      	beq.n	8007d40 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d010      	beq.n	8007d40 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007d26:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d28:	4b02      	ldr	r3, [pc, #8]	@ (8007d34 <HAL_FDCAN_IRQHandler+0x274>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	e004      	b.n	8007d3c <HAL_FDCAN_IRQHandler+0x27c>
 8007d32:	bf00      	nop
 8007d34:	4000a800 	.word	0x4000a800
 8007d38:	3fcfffff 	.word	0x3fcfffff
 8007d3c:	f000 f969 	bl	8008012 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d42:	0c9b      	lsrs	r3, r3, #18
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d010      	beq.n	8007d6e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	0c9b      	lsrs	r3, r3, #18
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007d60:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d62:	4b83      	ldr	r3, [pc, #524]	@ (8007f70 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f95c 	bl	8008026 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d70:	0c5b      	lsrs	r3, r3, #17
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d015      	beq.n	8007da6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7c:	0c5b      	lsrs	r3, r3, #17
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00f      	beq.n	8007da6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007d8e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d90:	4b77      	ldr	r3, [pc, #476]	@ (8007f70 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00d      	beq.n	8007dc8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007db2:	4b70      	ldr	r3, [pc, #448]	@ (8007f74 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007db4:	400b      	ands	r3, r1
 8007db6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007db8:	4a6d      	ldr	r2, [pc, #436]	@ (8007f70 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dbc:	0f9b      	lsrs	r3, r3, #30
 8007dbe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007dc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7f9 fd70 	bl	80018a8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d011      	beq.n	8007df2 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007dd4:	4b67      	ldr	r3, [pc, #412]	@ (8007f74 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007dd6:	400b      	ands	r3, r1
 8007dd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007dda:	4a65      	ldr	r2, [pc, #404]	@ (8007f70 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dde:	0f9b      	lsrs	r3, r3, #30
 8007de0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a60      	ldr	r2, [pc, #384]	@ (8007f78 <HAL_FDCAN_IRQHandler+0x4b8>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	f040 80ac 	bne.w	8007f56 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 80a4 	beq.w	8007f56 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e22:	4013      	ands	r3, r2
 8007e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e30:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007e48:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e52:	4013      	ands	r3, r2
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007e60:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e68:	6a3a      	ldr	r2, [r7, #32]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007e78:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	4013      	ands	r3, r2
 8007e84:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ea2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f8db 	bl	8008062 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eb8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007eba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f8db 	bl	8008078 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	099b      	lsrs	r3, r3, #6
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01a      	beq.n	8007f04 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	099b      	lsrs	r3, r3, #6
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d014      	beq.n	8007f04 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ef0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2240      	movs	r2, #64	@ 0x40
 8007ef8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	6939      	ldr	r1, [r7, #16]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f8c5 	bl	800808e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f10:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007f12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f8c6 	bl	80080a6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	6a3a      	ldr	r2, [r7, #32]
 8007f26:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f874 	bl	800804e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007f66:	bf00      	nop
 8007f68:	3758      	adds	r7, #88	@ 0x58
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	4000a800 	.word	0x4000a800
 8007f74:	3fcfffff 	.word	0x3fcfffff
 8007f78:	4000a000 	.word	0x4000a000

08007f7c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800808e:	b480      	push	{r7}
 8008090:	b085      	sub	sp, #20
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800809a:	bf00      	nop
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80080d2:	4ba7      	ldr	r3, [pc, #668]	@ (8008370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	0091      	lsls	r1, r2, #2
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	430b      	orrs	r3, r1
 80080e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080ec:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f4:	041a      	lsls	r2, r3, #16
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	4413      	add	r3, r2
 8008108:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008112:	4b97      	ldr	r3, [pc, #604]	@ (8008370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008114:	4013      	ands	r3, r2
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	0091      	lsls	r1, r2, #2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6812      	ldr	r2, [r2, #0]
 800811e:	430b      	orrs	r3, r1
 8008120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800812c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008134:	041a      	lsls	r2, r3, #16
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	4413      	add	r3, r2
 800814a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008154:	4b86      	ldr	r3, [pc, #536]	@ (8008370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008156:	4013      	ands	r3, r2
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	0091      	lsls	r1, r2, #2
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	430b      	orrs	r3, r1
 8008162:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800816e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008176:	041a      	lsls	r2, r3, #16
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800818a:	fb02 f303 	mul.w	r3, r2, r3
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	4413      	add	r3, r2
 8008192:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800819c:	4b74      	ldr	r3, [pc, #464]	@ (8008370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800819e:	4013      	ands	r3, r2
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	0091      	lsls	r1, r2, #2
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6812      	ldr	r2, [r2, #0]
 80081a8:	430b      	orrs	r3, r1
 80081aa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081b6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081be:	041a      	lsls	r2, r3, #16
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	4413      	add	r3, r2
 80081da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80081e4:	4b62      	ldr	r3, [pc, #392]	@ (8008370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081e6:	4013      	ands	r3, r2
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	0091      	lsls	r1, r2, #2
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6812      	ldr	r2, [r2, #0]
 80081f0:	430b      	orrs	r3, r1
 80081f2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	4413      	add	r3, r2
 8008206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008210:	4b57      	ldr	r3, [pc, #348]	@ (8008370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008212:	4013      	ands	r3, r2
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	0091      	lsls	r1, r2, #2
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6812      	ldr	r2, [r2, #0]
 800821c:	430b      	orrs	r3, r1
 800821e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800822a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008232:	041a      	lsls	r2, r3, #16
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	4413      	add	r3, r2
 8008248:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008252:	4b47      	ldr	r3, [pc, #284]	@ (8008370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008254:	4013      	ands	r3, r2
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	0091      	lsls	r1, r2, #2
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	6812      	ldr	r2, [r2, #0]
 800825e:	430b      	orrs	r3, r1
 8008260:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800826c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008274:	041a      	lsls	r2, r3, #16
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008288:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008290:	061a      	lsls	r2, r3, #24
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082a0:	4b34      	ldr	r3, [pc, #208]	@ (8008374 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80082a2:	4413      	add	r3, r2
 80082a4:	009a      	lsls	r2, r3, #2
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	441a      	add	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	441a      	add	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80082dc:	441a      	add	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80082ee:	fb01 f303 	mul.w	r3, r1, r3
 80082f2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80082f4:	441a      	add	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008306:	fb01 f303 	mul.w	r3, r1, r3
 800830a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800830c:	441a      	add	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	441a      	add	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008336:	fb01 f303 	mul.w	r3, r1, r3
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	441a      	add	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008358:	441a      	add	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008366:	4a04      	ldr	r2, [pc, #16]	@ (8008378 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d915      	bls.n	8008398 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800836c:	e006      	b.n	800837c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800836e:	bf00      	nop
 8008370:	ffff0003 	.word	0xffff0003
 8008374:	10002b00 	.word	0x10002b00
 8008378:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008382:	f043 0220 	orr.w	r2, r3, #32
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2203      	movs	r2, #3
 8008390:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e010      	b.n	80083ba <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e005      	b.n	80083ac <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3304      	adds	r3, #4
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d3f3      	bcc.n	80083a0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b089      	sub	sp, #36	@ 0x24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80083e6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80083ee:	4313      	orrs	r3, r2
 80083f0:	61fb      	str	r3, [r7, #28]
 80083f2:	e00a      	b.n	800840a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80083fc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008402:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008404:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008408:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008414:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800841a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008420:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	fb01 f303 	mul.w	r3, r1, r3
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	3304      	adds	r3, #4
 800844c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	3304      	adds	r3, #4
 8008458:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800845a:	2300      	movs	r3, #0
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	e020      	b.n	80084a2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	3303      	adds	r3, #3
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	4413      	add	r3, r2
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	3302      	adds	r3, #2
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	440b      	add	r3, r1
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008478:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	3301      	adds	r3, #1
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	440b      	add	r3, r1
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008486:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	440a      	add	r2, r1
 800848e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008490:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	3304      	adds	r3, #4
 800849a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	3304      	adds	r3, #4
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	4a06      	ldr	r2, [pc, #24]	@ (80084c0 <FDCAN_CopyMessageToRAM+0xf8>)
 80084a8:	5cd3      	ldrb	r3, [r2, r3]
 80084aa:	461a      	mov	r2, r3
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d3d6      	bcc.n	8008460 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	3724      	adds	r7, #36	@ 0x24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	08011e2c 	.word	0x08011e2c

080084c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b089      	sub	sp, #36	@ 0x24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084d2:	4b86      	ldr	r3, [pc, #536]	@ (80086ec <HAL_GPIO_Init+0x228>)
 80084d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084d6:	e18c      	b.n	80087f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	2101      	movs	r1, #1
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	fa01 f303 	lsl.w	r3, r1, r3
 80084e4:	4013      	ands	r3, r2
 80084e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 817e 	beq.w	80087ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d005      	beq.n	8008508 <HAL_GPIO_Init+0x44>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	2b02      	cmp	r3, #2
 8008506:	d130      	bne.n	800856a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	2203      	movs	r2, #3
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	4013      	ands	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68da      	ldr	r2, [r3, #12]
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	005b      	lsls	r3, r3, #1
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4313      	orrs	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800853e:	2201      	movs	r2, #1
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	4013      	ands	r3, r2
 800854c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	091b      	lsrs	r3, r3, #4
 8008554:	f003 0201 	and.w	r2, r3, #1
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	4313      	orrs	r3, r2
 8008562:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b03      	cmp	r3, #3
 8008574:	d017      	beq.n	80085a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	2203      	movs	r2, #3
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	43db      	mvns	r3, r3
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	4013      	ands	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	fa02 f303 	lsl.w	r3, r2, r3
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	4313      	orrs	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f003 0303 	and.w	r3, r3, #3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d123      	bne.n	80085fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	08da      	lsrs	r2, r3, #3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3208      	adds	r2, #8
 80085ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	220f      	movs	r2, #15
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	43db      	mvns	r3, r3
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	4013      	ands	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	691a      	ldr	r2, [r3, #16]
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	fa02 f303 	lsl.w	r3, r2, r3
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	08da      	lsrs	r2, r3, #3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3208      	adds	r2, #8
 80085f4:	69b9      	ldr	r1, [r7, #24]
 80085f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	2203      	movs	r2, #3
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	43db      	mvns	r3, r3
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	4013      	ands	r3, r2
 8008610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f003 0203 	and.w	r2, r3, #3
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	4313      	orrs	r3, r2
 8008626:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80d8 	beq.w	80087ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800863c:	4b2c      	ldr	r3, [pc, #176]	@ (80086f0 <HAL_GPIO_Init+0x22c>)
 800863e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008642:	4a2b      	ldr	r2, [pc, #172]	@ (80086f0 <HAL_GPIO_Init+0x22c>)
 8008644:	f043 0302 	orr.w	r3, r3, #2
 8008648:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800864c:	4b28      	ldr	r3, [pc, #160]	@ (80086f0 <HAL_GPIO_Init+0x22c>)
 800864e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800865a:	4a26      	ldr	r2, [pc, #152]	@ (80086f4 <HAL_GPIO_Init+0x230>)
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	089b      	lsrs	r3, r3, #2
 8008660:	3302      	adds	r3, #2
 8008662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	220f      	movs	r2, #15
 8008672:	fa02 f303 	lsl.w	r3, r2, r3
 8008676:	43db      	mvns	r3, r3
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	4013      	ands	r3, r2
 800867c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a1d      	ldr	r2, [pc, #116]	@ (80086f8 <HAL_GPIO_Init+0x234>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d04a      	beq.n	800871c <HAL_GPIO_Init+0x258>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a1c      	ldr	r2, [pc, #112]	@ (80086fc <HAL_GPIO_Init+0x238>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d02b      	beq.n	80086e6 <HAL_GPIO_Init+0x222>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a1b      	ldr	r2, [pc, #108]	@ (8008700 <HAL_GPIO_Init+0x23c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d025      	beq.n	80086e2 <HAL_GPIO_Init+0x21e>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a1a      	ldr	r2, [pc, #104]	@ (8008704 <HAL_GPIO_Init+0x240>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d01f      	beq.n	80086de <HAL_GPIO_Init+0x21a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a19      	ldr	r2, [pc, #100]	@ (8008708 <HAL_GPIO_Init+0x244>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d019      	beq.n	80086da <HAL_GPIO_Init+0x216>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a18      	ldr	r2, [pc, #96]	@ (800870c <HAL_GPIO_Init+0x248>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d013      	beq.n	80086d6 <HAL_GPIO_Init+0x212>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a17      	ldr	r2, [pc, #92]	@ (8008710 <HAL_GPIO_Init+0x24c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00d      	beq.n	80086d2 <HAL_GPIO_Init+0x20e>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a16      	ldr	r2, [pc, #88]	@ (8008714 <HAL_GPIO_Init+0x250>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d007      	beq.n	80086ce <HAL_GPIO_Init+0x20a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a15      	ldr	r2, [pc, #84]	@ (8008718 <HAL_GPIO_Init+0x254>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d101      	bne.n	80086ca <HAL_GPIO_Init+0x206>
 80086c6:	2309      	movs	r3, #9
 80086c8:	e029      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086ca:	230a      	movs	r3, #10
 80086cc:	e027      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086ce:	2307      	movs	r3, #7
 80086d0:	e025      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086d2:	2306      	movs	r3, #6
 80086d4:	e023      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086d6:	2305      	movs	r3, #5
 80086d8:	e021      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086da:	2304      	movs	r3, #4
 80086dc:	e01f      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086de:	2303      	movs	r3, #3
 80086e0:	e01d      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086e2:	2302      	movs	r3, #2
 80086e4:	e01b      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e019      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086ea:	bf00      	nop
 80086ec:	58000080 	.word	0x58000080
 80086f0:	58024400 	.word	0x58024400
 80086f4:	58000400 	.word	0x58000400
 80086f8:	58020000 	.word	0x58020000
 80086fc:	58020400 	.word	0x58020400
 8008700:	58020800 	.word	0x58020800
 8008704:	58020c00 	.word	0x58020c00
 8008708:	58021000 	.word	0x58021000
 800870c:	58021400 	.word	0x58021400
 8008710:	58021800 	.word	0x58021800
 8008714:	58021c00 	.word	0x58021c00
 8008718:	58022400 	.word	0x58022400
 800871c:	2300      	movs	r3, #0
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	f002 0203 	and.w	r2, r2, #3
 8008724:	0092      	lsls	r2, r2, #2
 8008726:	4093      	lsls	r3, r2
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	4313      	orrs	r3, r2
 800872c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800872e:	4938      	ldr	r1, [pc, #224]	@ (8008810 <HAL_GPIO_Init+0x34c>)
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	089b      	lsrs	r3, r3, #2
 8008734:	3302      	adds	r3, #2
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800873c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	43db      	mvns	r3, r3
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	4013      	ands	r3, r2
 800874c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800876a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	43db      	mvns	r3, r3
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	4013      	ands	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	43db      	mvns	r3, r3
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	4013      	ands	r3, r2
 80087a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	43db      	mvns	r3, r3
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	4013      	ands	r3, r2
 80087d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	3301      	adds	r3, #1
 80087f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	fa22 f303 	lsr.w	r3, r2, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f47f ae6b 	bne.w	80084d8 <HAL_GPIO_Init+0x14>
  }
}
 8008802:	bf00      	nop
 8008804:	bf00      	nop
 8008806:	3724      	adds	r7, #36	@ 0x24
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	58000400 	.word	0x58000400

08008814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	887b      	ldrh	r3, [r7, #2]
 8008826:	4013      	ands	r3, r2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800882c:	2301      	movs	r3, #1
 800882e:	73fb      	strb	r3, [r7, #15]
 8008830:	e001      	b.n	8008836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	807b      	strh	r3, [r7, #2]
 8008850:	4613      	mov	r3, r2
 8008852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008854:	787b      	ldrb	r3, [r7, #1]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800885a:	887a      	ldrh	r2, [r7, #2]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008860:	e003      	b.n	800886a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008862:	887b      	ldrh	r3, [r7, #2]
 8008864:	041a      	lsls	r2, r3, #16
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	619a      	str	r2, [r3, #24]
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008880:	4b19      	ldr	r3, [pc, #100]	@ (80088e8 <HAL_PWREx_ConfigSupply+0x70>)
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f003 0304 	and.w	r3, r3, #4
 8008888:	2b04      	cmp	r3, #4
 800888a:	d00a      	beq.n	80088a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800888c:	4b16      	ldr	r3, [pc, #88]	@ (80088e8 <HAL_PWREx_ConfigSupply+0x70>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d001      	beq.n	800889e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e01f      	b.n	80088de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	e01d      	b.n	80088de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80088a2:	4b11      	ldr	r3, [pc, #68]	@ (80088e8 <HAL_PWREx_ConfigSupply+0x70>)
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f023 0207 	bic.w	r2, r3, #7
 80088aa:	490f      	ldr	r1, [pc, #60]	@ (80088e8 <HAL_PWREx_ConfigSupply+0x70>)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80088b2:	f7fa f993 	bl	8002bdc <HAL_GetTick>
 80088b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80088b8:	e009      	b.n	80088ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80088ba:	f7fa f98f 	bl	8002bdc <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088c8:	d901      	bls.n	80088ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e007      	b.n	80088de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80088ce:	4b06      	ldr	r3, [pc, #24]	@ (80088e8 <HAL_PWREx_ConfigSupply+0x70>)
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088da:	d1ee      	bne.n	80088ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	58024800 	.word	0x58024800

080088ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08c      	sub	sp, #48	@ 0x30
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e3c8      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 8087 	beq.w	8008a1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800890c:	4b88      	ldr	r3, [pc, #544]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008916:	4b86      	ldr	r3, [pc, #536]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800891c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891e:	2b10      	cmp	r3, #16
 8008920:	d007      	beq.n	8008932 <HAL_RCC_OscConfig+0x46>
 8008922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008924:	2b18      	cmp	r3, #24
 8008926:	d110      	bne.n	800894a <HAL_RCC_OscConfig+0x5e>
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	2b02      	cmp	r3, #2
 8008930:	d10b      	bne.n	800894a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008932:	4b7f      	ldr	r3, [pc, #508]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d06c      	beq.n	8008a18 <HAL_RCC_OscConfig+0x12c>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d168      	bne.n	8008a18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e3a2      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008952:	d106      	bne.n	8008962 <HAL_RCC_OscConfig+0x76>
 8008954:	4b76      	ldr	r3, [pc, #472]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a75      	ldr	r2, [pc, #468]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 800895a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	e02e      	b.n	80089c0 <HAL_RCC_OscConfig+0xd4>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10c      	bne.n	8008984 <HAL_RCC_OscConfig+0x98>
 800896a:	4b71      	ldr	r3, [pc, #452]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a70      	ldr	r2, [pc, #448]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	4b6e      	ldr	r3, [pc, #440]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a6d      	ldr	r2, [pc, #436]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 800897c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	e01d      	b.n	80089c0 <HAL_RCC_OscConfig+0xd4>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800898c:	d10c      	bne.n	80089a8 <HAL_RCC_OscConfig+0xbc>
 800898e:	4b68      	ldr	r3, [pc, #416]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a67      	ldr	r2, [pc, #412]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	4b65      	ldr	r3, [pc, #404]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a64      	ldr	r2, [pc, #400]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 80089a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	e00b      	b.n	80089c0 <HAL_RCC_OscConfig+0xd4>
 80089a8:	4b61      	ldr	r3, [pc, #388]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a60      	ldr	r2, [pc, #384]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 80089ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	4b5e      	ldr	r3, [pc, #376]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 80089ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d013      	beq.n	80089f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c8:	f7fa f908 	bl	8002bdc <HAL_GetTick>
 80089cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089ce:	e008      	b.n	80089e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089d0:	f7fa f904 	bl	8002bdc <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	2b64      	cmp	r3, #100	@ 0x64
 80089dc:	d901      	bls.n	80089e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e356      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089e2:	4b53      	ldr	r3, [pc, #332]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0f0      	beq.n	80089d0 <HAL_RCC_OscConfig+0xe4>
 80089ee:	e014      	b.n	8008a1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f0:	f7fa f8f4 	bl	8002bdc <HAL_GetTick>
 80089f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80089f6:	e008      	b.n	8008a0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089f8:	f7fa f8f0 	bl	8002bdc <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b64      	cmp	r3, #100	@ 0x64
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e342      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a0a:	4b49      	ldr	r3, [pc, #292]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1f0      	bne.n	80089f8 <HAL_RCC_OscConfig+0x10c>
 8008a16:	e000      	b.n	8008a1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 808c 	beq.w	8008b40 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a28:	4b41      	ldr	r3, [pc, #260]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a32:	4b3f      	ldr	r3, [pc, #252]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d007      	beq.n	8008a4e <HAL_RCC_OscConfig+0x162>
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	2b18      	cmp	r3, #24
 8008a42:	d137      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x1c8>
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d132      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a4e:	4b38      	ldr	r3, [pc, #224]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0304 	and.w	r3, r3, #4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d005      	beq.n	8008a66 <HAL_RCC_OscConfig+0x17a>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e314      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a66:	4b32      	ldr	r3, [pc, #200]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f023 0219 	bic.w	r2, r3, #25
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	492f      	ldr	r1, [pc, #188]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a78:	f7fa f8b0 	bl	8002bdc <HAL_GetTick>
 8008a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a80:	f7fa f8ac 	bl	8002bdc <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e2fe      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a92:	4b27      	ldr	r3, [pc, #156]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f0      	beq.n	8008a80 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a9e:	4b24      	ldr	r3, [pc, #144]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	061b      	lsls	r3, r3, #24
 8008aac:	4920      	ldr	r1, [pc, #128]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ab2:	e045      	b.n	8008b40 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d026      	beq.n	8008b0a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008abc:	4b1c      	ldr	r3, [pc, #112]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f023 0219 	bic.w	r2, r3, #25
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	4919      	ldr	r1, [pc, #100]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ace:	f7fa f885 	bl	8002bdc <HAL_GetTick>
 8008ad2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ad4:	e008      	b.n	8008ae8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ad6:	f7fa f881 	bl	8002bdc <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e2d3      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ae8:	4b11      	ldr	r3, [pc, #68]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0f0      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008af4:	4b0e      	ldr	r3, [pc, #56]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	061b      	lsls	r3, r3, #24
 8008b02:	490b      	ldr	r1, [pc, #44]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	604b      	str	r3, [r1, #4]
 8008b08:	e01a      	b.n	8008b40 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b0a:	4b09      	ldr	r3, [pc, #36]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a08      	ldr	r2, [pc, #32]	@ (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008b10:	f023 0301 	bic.w	r3, r3, #1
 8008b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b16:	f7fa f861 	bl	8002bdc <HAL_GetTick>
 8008b1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b1c:	e00a      	b.n	8008b34 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b1e:	f7fa f85d 	bl	8002bdc <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d903      	bls.n	8008b34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e2af      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
 8008b30:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b34:	4b96      	ldr	r3, [pc, #600]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1ee      	bne.n	8008b1e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0310 	and.w	r3, r3, #16
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d06a      	beq.n	8008c22 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b4c:	4b90      	ldr	r3, [pc, #576]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b54:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b56:	4b8e      	ldr	r3, [pc, #568]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d007      	beq.n	8008b72 <HAL_RCC_OscConfig+0x286>
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b18      	cmp	r3, #24
 8008b66:	d11b      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x2b4>
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d116      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b72:	4b87      	ldr	r3, [pc, #540]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d005      	beq.n	8008b8a <HAL_RCC_OscConfig+0x29e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	2b80      	cmp	r3, #128	@ 0x80
 8008b84:	d001      	beq.n	8008b8a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e282      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b8a:	4b81      	ldr	r3, [pc, #516]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	061b      	lsls	r3, r3, #24
 8008b98:	497d      	ldr	r1, [pc, #500]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b9e:	e040      	b.n	8008c22 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d023      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ba8:	4b79      	ldr	r3, [pc, #484]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a78      	ldr	r2, [pc, #480]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb4:	f7fa f812 	bl	8002bdc <HAL_GetTick>
 8008bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bbc:	f7fa f80e 	bl	8002bdc <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e260      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bce:	4b70      	ldr	r3, [pc, #448]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0f0      	beq.n	8008bbc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bda:	4b6d      	ldr	r3, [pc, #436]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	061b      	lsls	r3, r3, #24
 8008be8:	4969      	ldr	r1, [pc, #420]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60cb      	str	r3, [r1, #12]
 8008bee:	e018      	b.n	8008c22 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008bf0:	4b67      	ldr	r3, [pc, #412]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a66      	ldr	r2, [pc, #408]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfc:	f7f9 ffee 	bl	8002bdc <HAL_GetTick>
 8008c00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c02:	e008      	b.n	8008c16 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c04:	f7f9 ffea 	bl	8002bdc <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d901      	bls.n	8008c16 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e23c      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c16:	4b5e      	ldr	r3, [pc, #376]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f0      	bne.n	8008c04 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0308 	and.w	r3, r3, #8
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d036      	beq.n	8008c9c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d019      	beq.n	8008c6a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c36:	4b56      	ldr	r3, [pc, #344]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c3a:	4a55      	ldr	r2, [pc, #340]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008c3c:	f043 0301 	orr.w	r3, r3, #1
 8008c40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c42:	f7f9 ffcb 	bl	8002bdc <HAL_GetTick>
 8008c46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c48:	e008      	b.n	8008c5c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c4a:	f7f9 ffc7 	bl	8002bdc <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d901      	bls.n	8008c5c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e219      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c60:	f003 0302 	and.w	r3, r3, #2
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0f0      	beq.n	8008c4a <HAL_RCC_OscConfig+0x35e>
 8008c68:	e018      	b.n	8008c9c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c6a:	4b49      	ldr	r3, [pc, #292]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c6e:	4a48      	ldr	r2, [pc, #288]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008c70:	f023 0301 	bic.w	r3, r3, #1
 8008c74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c76:	f7f9 ffb1 	bl	8002bdc <HAL_GetTick>
 8008c7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c7c:	e008      	b.n	8008c90 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c7e:	f7f9 ffad 	bl	8002bdc <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d901      	bls.n	8008c90 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e1ff      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c90:	4b3f      	ldr	r3, [pc, #252]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1f0      	bne.n	8008c7e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d036      	beq.n	8008d16 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d019      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008cb0:	4b37      	ldr	r3, [pc, #220]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a36      	ldr	r2, [pc, #216]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008cb6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008cba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cbc:	f7f9 ff8e 	bl	8002bdc <HAL_GetTick>
 8008cc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cc4:	f7f9 ff8a 	bl	8002bdc <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e1dc      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0f0      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x3d8>
 8008ce2:	e018      	b.n	8008d16 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a29      	ldr	r2, [pc, #164]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008cea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cf0:	f7f9 ff74 	bl	8002bdc <HAL_GetTick>
 8008cf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cf8:	f7f9 ff70 	bl	8002bdc <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e1c2      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d0a:	4b21      	ldr	r3, [pc, #132]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f0      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 8086 	beq.w	8008e30 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d24:	4b1b      	ldr	r3, [pc, #108]	@ (8008d94 <HAL_RCC_OscConfig+0x4a8>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a1a      	ldr	r2, [pc, #104]	@ (8008d94 <HAL_RCC_OscConfig+0x4a8>)
 8008d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d30:	f7f9 ff54 	bl	8002bdc <HAL_GetTick>
 8008d34:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d38:	f7f9 ff50 	bl	8002bdc <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b64      	cmp	r3, #100	@ 0x64
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e1a2      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d4a:	4b12      	ldr	r3, [pc, #72]	@ (8008d94 <HAL_RCC_OscConfig+0x4a8>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0f0      	beq.n	8008d38 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d106      	bne.n	8008d6c <HAL_RCC_OscConfig+0x480>
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d62:	4a0b      	ldr	r2, [pc, #44]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008d64:	f043 0301 	orr.w	r3, r3, #1
 8008d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d6a:	e032      	b.n	8008dd2 <HAL_RCC_OscConfig+0x4e6>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d111      	bne.n	8008d98 <HAL_RCC_OscConfig+0x4ac>
 8008d74:	4b06      	ldr	r3, [pc, #24]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d78:	4a05      	ldr	r2, [pc, #20]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008d7a:	f023 0301 	bic.w	r3, r3, #1
 8008d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d80:	4b03      	ldr	r3, [pc, #12]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d84:	4a02      	ldr	r2, [pc, #8]	@ (8008d90 <HAL_RCC_OscConfig+0x4a4>)
 8008d86:	f023 0304 	bic.w	r3, r3, #4
 8008d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d8c:	e021      	b.n	8008dd2 <HAL_RCC_OscConfig+0x4e6>
 8008d8e:	bf00      	nop
 8008d90:	58024400 	.word	0x58024400
 8008d94:	58024800 	.word	0x58024800
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b05      	cmp	r3, #5
 8008d9e:	d10c      	bne.n	8008dba <HAL_RCC_OscConfig+0x4ce>
 8008da0:	4b83      	ldr	r3, [pc, #524]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da4:	4a82      	ldr	r2, [pc, #520]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008da6:	f043 0304 	orr.w	r3, r3, #4
 8008daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dac:	4b80      	ldr	r3, [pc, #512]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008db0:	4a7f      	ldr	r2, [pc, #508]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008db8:	e00b      	b.n	8008dd2 <HAL_RCC_OscConfig+0x4e6>
 8008dba:	4b7d      	ldr	r3, [pc, #500]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dbe:	4a7c      	ldr	r2, [pc, #496]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008dc0:	f023 0301 	bic.w	r3, r3, #1
 8008dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dca:	4a79      	ldr	r2, [pc, #484]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008dcc:	f023 0304 	bic.w	r3, r3, #4
 8008dd0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d015      	beq.n	8008e06 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dda:	f7f9 feff 	bl	8002bdc <HAL_GetTick>
 8008dde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008de0:	e00a      	b.n	8008df8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008de2:	f7f9 fefb 	bl	8002bdc <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d901      	bls.n	8008df8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e14b      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008df8:	4b6d      	ldr	r3, [pc, #436]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0ee      	beq.n	8008de2 <HAL_RCC_OscConfig+0x4f6>
 8008e04:	e014      	b.n	8008e30 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e06:	f7f9 fee9 	bl	8002bdc <HAL_GetTick>
 8008e0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e0c:	e00a      	b.n	8008e24 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e0e:	f7f9 fee5 	bl	8002bdc <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e135      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e24:	4b62      	ldr	r3, [pc, #392]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e28:	f003 0302 	and.w	r3, r3, #2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1ee      	bne.n	8008e0e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 812a 	beq.w	800908e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e42:	2b18      	cmp	r3, #24
 8008e44:	f000 80ba 	beq.w	8008fbc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	f040 8095 	bne.w	8008f7c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e52:	4b57      	ldr	r3, [pc, #348]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a56      	ldr	r2, [pc, #344]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008e58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5e:	f7f9 febd 	bl	8002bdc <HAL_GetTick>
 8008e62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e64:	e008      	b.n	8008e78 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e66:	f7f9 feb9 	bl	8002bdc <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d901      	bls.n	8008e78 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e10b      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e78:	4b4d      	ldr	r3, [pc, #308]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1f0      	bne.n	8008e66 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e84:	4b4a      	ldr	r3, [pc, #296]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008e86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e88:	4b4a      	ldr	r3, [pc, #296]	@ (8008fb4 <HAL_RCC_OscConfig+0x6c8>)
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008e94:	0112      	lsls	r2, r2, #4
 8008e96:	430a      	orrs	r2, r1
 8008e98:	4945      	ldr	r1, [pc, #276]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eac:	3b01      	subs	r3, #1
 8008eae:	025b      	lsls	r3, r3, #9
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	041b      	lsls	r3, r3, #16
 8008ebc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	061b      	lsls	r3, r3, #24
 8008eca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ece:	4938      	ldr	r1, [pc, #224]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ed4:	4b36      	ldr	r3, [pc, #216]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed8:	4a35      	ldr	r2, [pc, #212]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008eda:	f023 0301 	bic.w	r3, r3, #1
 8008ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ee0:	4b33      	ldr	r3, [pc, #204]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ee4:	4b34      	ldr	r3, [pc, #208]	@ (8008fb8 <HAL_RCC_OscConfig+0x6cc>)
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008eec:	00d2      	lsls	r2, r2, #3
 8008eee:	4930      	ldr	r1, [pc, #192]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef8:	f023 020c 	bic.w	r2, r3, #12
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	492b      	ldr	r1, [pc, #172]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f06:	4b2a      	ldr	r3, [pc, #168]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0a:	f023 0202 	bic.w	r2, r3, #2
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f12:	4927      	ldr	r1, [pc, #156]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f18:	4b25      	ldr	r3, [pc, #148]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1c:	4a24      	ldr	r2, [pc, #144]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f24:	4b22      	ldr	r3, [pc, #136]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f28:	4a21      	ldr	r2, [pc, #132]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f30:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f34:	4a1e      	ldr	r2, [pc, #120]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f40:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f42:	f043 0301 	orr.w	r3, r3, #1
 8008f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f48:	4b19      	ldr	r3, [pc, #100]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a18      	ldr	r2, [pc, #96]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f54:	f7f9 fe42 	bl	8002bdc <HAL_GetTick>
 8008f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f5c:	f7f9 fe3e 	bl	8002bdc <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e090      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f6e:	4b10      	ldr	r3, [pc, #64]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f0      	beq.n	8008f5c <HAL_RCC_OscConfig+0x670>
 8008f7a:	e088      	b.n	800908e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0b      	ldr	r2, [pc, #44]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f88:	f7f9 fe28 	bl	8002bdc <HAL_GetTick>
 8008f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f8e:	e008      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f90:	f7f9 fe24 	bl	8002bdc <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e076      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fa2:	4b03      	ldr	r3, [pc, #12]	@ (8008fb0 <HAL_RCC_OscConfig+0x6c4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1f0      	bne.n	8008f90 <HAL_RCC_OscConfig+0x6a4>
 8008fae:	e06e      	b.n	800908e <HAL_RCC_OscConfig+0x7a2>
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	fffffc0c 	.word	0xfffffc0c
 8008fb8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008fbc:	4b36      	ldr	r3, [pc, #216]	@ (8009098 <HAL_RCC_OscConfig+0x7ac>)
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008fc2:	4b35      	ldr	r3, [pc, #212]	@ (8009098 <HAL_RCC_OscConfig+0x7ac>)
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d031      	beq.n	8009034 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f003 0203 	and.w	r2, r3, #3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d12a      	bne.n	8009034 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	091b      	lsrs	r3, r3, #4
 8008fe2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d122      	bne.n	8009034 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d11a      	bne.n	8009034 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	0a5b      	lsrs	r3, r3, #9
 8009002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800900a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800900c:	429a      	cmp	r2, r3
 800900e:	d111      	bne.n	8009034 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	0c1b      	lsrs	r3, r3, #16
 8009014:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800901e:	429a      	cmp	r2, r3
 8009020:	d108      	bne.n	8009034 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	0e1b      	lsrs	r3, r3, #24
 8009026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009030:	429a      	cmp	r2, r3
 8009032:	d001      	beq.n	8009038 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e02b      	b.n	8009090 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009038:	4b17      	ldr	r3, [pc, #92]	@ (8009098 <HAL_RCC_OscConfig+0x7ac>)
 800903a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800903c:	08db      	lsrs	r3, r3, #3
 800903e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009042:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	429a      	cmp	r2, r3
 800904c:	d01f      	beq.n	800908e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800904e:	4b12      	ldr	r3, [pc, #72]	@ (8009098 <HAL_RCC_OscConfig+0x7ac>)
 8009050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009052:	4a11      	ldr	r2, [pc, #68]	@ (8009098 <HAL_RCC_OscConfig+0x7ac>)
 8009054:	f023 0301 	bic.w	r3, r3, #1
 8009058:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800905a:	f7f9 fdbf 	bl	8002bdc <HAL_GetTick>
 800905e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009060:	bf00      	nop
 8009062:	f7f9 fdbb 	bl	8002bdc <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	4293      	cmp	r3, r2
 800906c:	d0f9      	beq.n	8009062 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800906e:	4b0a      	ldr	r3, [pc, #40]	@ (8009098 <HAL_RCC_OscConfig+0x7ac>)
 8009070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009072:	4b0a      	ldr	r3, [pc, #40]	@ (800909c <HAL_RCC_OscConfig+0x7b0>)
 8009074:	4013      	ands	r3, r2
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800907a:	00d2      	lsls	r2, r2, #3
 800907c:	4906      	ldr	r1, [pc, #24]	@ (8009098 <HAL_RCC_OscConfig+0x7ac>)
 800907e:	4313      	orrs	r3, r2
 8009080:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009082:	4b05      	ldr	r3, [pc, #20]	@ (8009098 <HAL_RCC_OscConfig+0x7ac>)
 8009084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009086:	4a04      	ldr	r2, [pc, #16]	@ (8009098 <HAL_RCC_OscConfig+0x7ac>)
 8009088:	f043 0301 	orr.w	r3, r3, #1
 800908c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3730      	adds	r7, #48	@ 0x30
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	58024400 	.word	0x58024400
 800909c:	ffff0007 	.word	0xffff0007

080090a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e19c      	b.n	80093ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090b4:	4b8a      	ldr	r3, [pc, #552]	@ (80092e0 <HAL_RCC_ClockConfig+0x240>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d910      	bls.n	80090e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090c2:	4b87      	ldr	r3, [pc, #540]	@ (80092e0 <HAL_RCC_ClockConfig+0x240>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f023 020f 	bic.w	r2, r3, #15
 80090ca:	4985      	ldr	r1, [pc, #532]	@ (80092e0 <HAL_RCC_ClockConfig+0x240>)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090d2:	4b83      	ldr	r3, [pc, #524]	@ (80092e0 <HAL_RCC_ClockConfig+0x240>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d001      	beq.n	80090e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e184      	b.n	80093ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d010      	beq.n	8009112 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	4b7b      	ldr	r3, [pc, #492]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d908      	bls.n	8009112 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009100:	4b78      	ldr	r3, [pc, #480]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	4975      	ldr	r1, [pc, #468]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 800910e:	4313      	orrs	r3, r2
 8009110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0308 	and.w	r3, r3, #8
 800911a:	2b00      	cmp	r3, #0
 800911c:	d010      	beq.n	8009140 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	695a      	ldr	r2, [r3, #20]
 8009122:	4b70      	ldr	r3, [pc, #448]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800912a:	429a      	cmp	r2, r3
 800912c:	d908      	bls.n	8009140 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800912e:	4b6d      	ldr	r3, [pc, #436]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	496a      	ldr	r1, [pc, #424]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 800913c:	4313      	orrs	r3, r2
 800913e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b00      	cmp	r3, #0
 800914a:	d010      	beq.n	800916e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	4b64      	ldr	r3, [pc, #400]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009158:	429a      	cmp	r2, r3
 800915a:	d908      	bls.n	800916e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800915c:	4b61      	ldr	r3, [pc, #388]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	495e      	ldr	r1, [pc, #376]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 800916a:	4313      	orrs	r3, r2
 800916c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d010      	beq.n	800919c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	69da      	ldr	r2, [r3, #28]
 800917e:	4b59      	ldr	r3, [pc, #356]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009186:	429a      	cmp	r2, r3
 8009188:	d908      	bls.n	800919c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800918a:	4b56      	ldr	r3, [pc, #344]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4953      	ldr	r1, [pc, #332]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009198:	4313      	orrs	r3, r2
 800919a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d010      	beq.n	80091ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	4b4d      	ldr	r3, [pc, #308]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	f003 030f 	and.w	r3, r3, #15
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d908      	bls.n	80091ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091b8:	4b4a      	ldr	r3, [pc, #296]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	f023 020f 	bic.w	r2, r3, #15
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	4947      	ldr	r1, [pc, #284]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d055      	beq.n	8009282 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091d6:	4b43      	ldr	r3, [pc, #268]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	4940      	ldr	r1, [pc, #256]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d107      	bne.n	8009200 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091f0:	4b3c      	ldr	r3, [pc, #240]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d121      	bne.n	8009240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e0f6      	b.n	80093ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2b03      	cmp	r3, #3
 8009206:	d107      	bne.n	8009218 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009208:	4b36      	ldr	r3, [pc, #216]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d115      	bne.n	8009240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e0ea      	b.n	80093ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d107      	bne.n	8009230 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009220:	4b30      	ldr	r3, [pc, #192]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009228:	2b00      	cmp	r3, #0
 800922a:	d109      	bne.n	8009240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e0de      	b.n	80093ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009230:	4b2c      	ldr	r3, [pc, #176]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e0d6      	b.n	80093ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009240:	4b28      	ldr	r3, [pc, #160]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f023 0207 	bic.w	r2, r3, #7
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	4925      	ldr	r1, [pc, #148]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 800924e:	4313      	orrs	r3, r2
 8009250:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009252:	f7f9 fcc3 	bl	8002bdc <HAL_GetTick>
 8009256:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009258:	e00a      	b.n	8009270 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800925a:	f7f9 fcbf 	bl	8002bdc <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009268:	4293      	cmp	r3, r2
 800926a:	d901      	bls.n	8009270 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e0be      	b.n	80093ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009270:	4b1c      	ldr	r3, [pc, #112]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	00db      	lsls	r3, r3, #3
 800927e:	429a      	cmp	r2, r3
 8009280:	d1eb      	bne.n	800925a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d010      	beq.n	80092b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	4b14      	ldr	r3, [pc, #80]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	f003 030f 	and.w	r3, r3, #15
 800929a:	429a      	cmp	r2, r3
 800929c:	d208      	bcs.n	80092b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800929e:	4b11      	ldr	r3, [pc, #68]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	f023 020f 	bic.w	r2, r3, #15
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	490e      	ldr	r1, [pc, #56]	@ (80092e4 <HAL_RCC_ClockConfig+0x244>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092b0:	4b0b      	ldr	r3, [pc, #44]	@ (80092e0 <HAL_RCC_ClockConfig+0x240>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 030f 	and.w	r3, r3, #15
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d214      	bcs.n	80092e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092be:	4b08      	ldr	r3, [pc, #32]	@ (80092e0 <HAL_RCC_ClockConfig+0x240>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f023 020f 	bic.w	r2, r3, #15
 80092c6:	4906      	ldr	r1, [pc, #24]	@ (80092e0 <HAL_RCC_ClockConfig+0x240>)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ce:	4b04      	ldr	r3, [pc, #16]	@ (80092e0 <HAL_RCC_ClockConfig+0x240>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d005      	beq.n	80092e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e086      	b.n	80093ee <HAL_RCC_ClockConfig+0x34e>
 80092e0:	52002000 	.word	0x52002000
 80092e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d010      	beq.n	8009316 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	691a      	ldr	r2, [r3, #16]
 80092f8:	4b3f      	ldr	r3, [pc, #252]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009300:	429a      	cmp	r2, r3
 8009302:	d208      	bcs.n	8009316 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009304:	4b3c      	ldr	r3, [pc, #240]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	4939      	ldr	r1, [pc, #228]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 8009312:	4313      	orrs	r3, r2
 8009314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0308 	and.w	r3, r3, #8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d010      	beq.n	8009344 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	695a      	ldr	r2, [r3, #20]
 8009326:	4b34      	ldr	r3, [pc, #208]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800932e:	429a      	cmp	r2, r3
 8009330:	d208      	bcs.n	8009344 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009332:	4b31      	ldr	r3, [pc, #196]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	492e      	ldr	r1, [pc, #184]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 8009340:	4313      	orrs	r3, r2
 8009342:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b00      	cmp	r3, #0
 800934e:	d010      	beq.n	8009372 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	4b28      	ldr	r3, [pc, #160]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800935c:	429a      	cmp	r2, r3
 800935e:	d208      	bcs.n	8009372 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009360:	4b25      	ldr	r3, [pc, #148]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	4922      	ldr	r1, [pc, #136]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 800936e:	4313      	orrs	r3, r2
 8009370:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0320 	and.w	r3, r3, #32
 800937a:	2b00      	cmp	r3, #0
 800937c:	d010      	beq.n	80093a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	69da      	ldr	r2, [r3, #28]
 8009382:	4b1d      	ldr	r3, [pc, #116]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800938a:	429a      	cmp	r2, r3
 800938c:	d208      	bcs.n	80093a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800938e:	4b1a      	ldr	r3, [pc, #104]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	4917      	ldr	r1, [pc, #92]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 800939c:	4313      	orrs	r3, r2
 800939e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093a0:	f000 f834 	bl	800940c <HAL_RCC_GetSysClockFreq>
 80093a4:	4602      	mov	r2, r0
 80093a6:	4b14      	ldr	r3, [pc, #80]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	0a1b      	lsrs	r3, r3, #8
 80093ac:	f003 030f 	and.w	r3, r3, #15
 80093b0:	4912      	ldr	r1, [pc, #72]	@ (80093fc <HAL_RCC_ClockConfig+0x35c>)
 80093b2:	5ccb      	ldrb	r3, [r1, r3]
 80093b4:	f003 031f 	and.w	r3, r3, #31
 80093b8:	fa22 f303 	lsr.w	r3, r2, r3
 80093bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093be:	4b0e      	ldr	r3, [pc, #56]	@ (80093f8 <HAL_RCC_ClockConfig+0x358>)
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f003 030f 	and.w	r3, r3, #15
 80093c6:	4a0d      	ldr	r2, [pc, #52]	@ (80093fc <HAL_RCC_ClockConfig+0x35c>)
 80093c8:	5cd3      	ldrb	r3, [r2, r3]
 80093ca:	f003 031f 	and.w	r3, r3, #31
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	fa22 f303 	lsr.w	r3, r2, r3
 80093d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009400 <HAL_RCC_ClockConfig+0x360>)
 80093d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093d8:	4a0a      	ldr	r2, [pc, #40]	@ (8009404 <HAL_RCC_ClockConfig+0x364>)
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80093de:	4b0a      	ldr	r3, [pc, #40]	@ (8009408 <HAL_RCC_ClockConfig+0x368>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7f9 fbb0 	bl	8002b48 <HAL_InitTick>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	58024400 	.word	0x58024400
 80093fc:	08011e14 	.word	0x08011e14
 8009400:	24000010 	.word	0x24000010
 8009404:	2400000c 	.word	0x2400000c
 8009408:	24000014 	.word	0x24000014

0800940c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800940c:	b480      	push	{r7}
 800940e:	b089      	sub	sp, #36	@ 0x24
 8009410:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009412:	4bb3      	ldr	r3, [pc, #716]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800941a:	2b18      	cmp	r3, #24
 800941c:	f200 8155 	bhi.w	80096ca <HAL_RCC_GetSysClockFreq+0x2be>
 8009420:	a201      	add	r2, pc, #4	@ (adr r2, 8009428 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	0800948d 	.word	0x0800948d
 800942c:	080096cb 	.word	0x080096cb
 8009430:	080096cb 	.word	0x080096cb
 8009434:	080096cb 	.word	0x080096cb
 8009438:	080096cb 	.word	0x080096cb
 800943c:	080096cb 	.word	0x080096cb
 8009440:	080096cb 	.word	0x080096cb
 8009444:	080096cb 	.word	0x080096cb
 8009448:	080094b3 	.word	0x080094b3
 800944c:	080096cb 	.word	0x080096cb
 8009450:	080096cb 	.word	0x080096cb
 8009454:	080096cb 	.word	0x080096cb
 8009458:	080096cb 	.word	0x080096cb
 800945c:	080096cb 	.word	0x080096cb
 8009460:	080096cb 	.word	0x080096cb
 8009464:	080096cb 	.word	0x080096cb
 8009468:	080094b9 	.word	0x080094b9
 800946c:	080096cb 	.word	0x080096cb
 8009470:	080096cb 	.word	0x080096cb
 8009474:	080096cb 	.word	0x080096cb
 8009478:	080096cb 	.word	0x080096cb
 800947c:	080096cb 	.word	0x080096cb
 8009480:	080096cb 	.word	0x080096cb
 8009484:	080096cb 	.word	0x080096cb
 8009488:	080094bf 	.word	0x080094bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800948c:	4b94      	ldr	r3, [pc, #592]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b00      	cmp	r3, #0
 8009496:	d009      	beq.n	80094ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009498:	4b91      	ldr	r3, [pc, #580]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	08db      	lsrs	r3, r3, #3
 800949e:	f003 0303 	and.w	r3, r3, #3
 80094a2:	4a90      	ldr	r2, [pc, #576]	@ (80096e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
 80094a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80094aa:	e111      	b.n	80096d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094ac:	4b8d      	ldr	r3, [pc, #564]	@ (80096e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094ae:	61bb      	str	r3, [r7, #24]
      break;
 80094b0:	e10e      	b.n	80096d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094b2:	4b8d      	ldr	r3, [pc, #564]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094b4:	61bb      	str	r3, [r7, #24]
      break;
 80094b6:	e10b      	b.n	80096d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094b8:	4b8c      	ldr	r3, [pc, #560]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094ba:	61bb      	str	r3, [r7, #24]
      break;
 80094bc:	e108      	b.n	80096d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094be:	4b88      	ldr	r3, [pc, #544]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80094c8:	4b85      	ldr	r3, [pc, #532]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094cc:	091b      	lsrs	r3, r3, #4
 80094ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80094d4:	4b82      	ldr	r3, [pc, #520]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094de:	4b80      	ldr	r3, [pc, #512]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e2:	08db      	lsrs	r3, r3, #3
 80094e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 80e1 	beq.w	80096c4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b02      	cmp	r3, #2
 8009506:	f000 8083 	beq.w	8009610 <HAL_RCC_GetSysClockFreq+0x204>
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2b02      	cmp	r3, #2
 800950e:	f200 80a1 	bhi.w	8009654 <HAL_RCC_GetSysClockFreq+0x248>
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_RCC_GetSysClockFreq+0x114>
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d056      	beq.n	80095cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800951e:	e099      	b.n	8009654 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009520:	4b6f      	ldr	r3, [pc, #444]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0320 	and.w	r3, r3, #32
 8009528:	2b00      	cmp	r3, #0
 800952a:	d02d      	beq.n	8009588 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800952c:	4b6c      	ldr	r3, [pc, #432]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	08db      	lsrs	r3, r3, #3
 8009532:	f003 0303 	and.w	r3, r3, #3
 8009536:	4a6b      	ldr	r2, [pc, #428]	@ (80096e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009538:	fa22 f303 	lsr.w	r3, r2, r3
 800953c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009556:	4b62      	ldr	r3, [pc, #392]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800955a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009566:	ed97 6a02 	vldr	s12, [r7, #8]
 800956a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80096f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800956e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800957a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800957e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009582:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009586:	e087      	b.n	8009698 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009592:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80096f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959a:	4b51      	ldr	r3, [pc, #324]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800959c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80095ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80096f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095ca:	e065      	b.n	8009698 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80096f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80095da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095de:	4b40      	ldr	r3, [pc, #256]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80095f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80096f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800960e:	e043      	b.n	8009698 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80096fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800961e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009622:	4b2f      	ldr	r3, [pc, #188]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009632:	ed97 6a02 	vldr	s12, [r7, #8]
 8009636:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80096f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800963a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009652:	e021      	b.n	8009698 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80096f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009666:	4b1e      	ldr	r3, [pc, #120]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009676:	ed97 6a02 	vldr	s12, [r7, #8]
 800967a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80096f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800967e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009696:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009698:	4b11      	ldr	r3, [pc, #68]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800969a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969c:	0a5b      	lsrs	r3, r3, #9
 800969e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096a2:	3301      	adds	r3, #1
 80096a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	ee07 3a90 	vmov	s15, r3
 80096ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80096b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096bc:	ee17 3a90 	vmov	r3, s15
 80096c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096c2:	e005      	b.n	80096d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	61bb      	str	r3, [r7, #24]
      break;
 80096c8:	e002      	b.n	80096d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80096ca:	4b07      	ldr	r3, [pc, #28]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80096cc:	61bb      	str	r3, [r7, #24]
      break;
 80096ce:	bf00      	nop
  }

  return sysclockfreq;
 80096d0:	69bb      	ldr	r3, [r7, #24]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3724      	adds	r7, #36	@ 0x24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	58024400 	.word	0x58024400
 80096e4:	03d09000 	.word	0x03d09000
 80096e8:	003d0900 	.word	0x003d0900
 80096ec:	016e3600 	.word	0x016e3600
 80096f0:	46000000 	.word	0x46000000
 80096f4:	4c742400 	.word	0x4c742400
 80096f8:	4a742400 	.word	0x4a742400
 80096fc:	4bb71b00 	.word	0x4bb71b00

08009700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009706:	f7ff fe81 	bl	800940c <HAL_RCC_GetSysClockFreq>
 800970a:	4602      	mov	r2, r0
 800970c:	4b10      	ldr	r3, [pc, #64]	@ (8009750 <HAL_RCC_GetHCLKFreq+0x50>)
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	0a1b      	lsrs	r3, r3, #8
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	490f      	ldr	r1, [pc, #60]	@ (8009754 <HAL_RCC_GetHCLKFreq+0x54>)
 8009718:	5ccb      	ldrb	r3, [r1, r3]
 800971a:	f003 031f 	and.w	r3, r3, #31
 800971e:	fa22 f303 	lsr.w	r3, r2, r3
 8009722:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009724:	4b0a      	ldr	r3, [pc, #40]	@ (8009750 <HAL_RCC_GetHCLKFreq+0x50>)
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	4a09      	ldr	r2, [pc, #36]	@ (8009754 <HAL_RCC_GetHCLKFreq+0x54>)
 800972e:	5cd3      	ldrb	r3, [r2, r3]
 8009730:	f003 031f 	and.w	r3, r3, #31
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	fa22 f303 	lsr.w	r3, r2, r3
 800973a:	4a07      	ldr	r2, [pc, #28]	@ (8009758 <HAL_RCC_GetHCLKFreq+0x58>)
 800973c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800973e:	4a07      	ldr	r2, [pc, #28]	@ (800975c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009744:	4b04      	ldr	r3, [pc, #16]	@ (8009758 <HAL_RCC_GetHCLKFreq+0x58>)
 8009746:	681b      	ldr	r3, [r3, #0]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	58024400 	.word	0x58024400
 8009754:	08011e14 	.word	0x08011e14
 8009758:	24000010 	.word	0x24000010
 800975c:	2400000c 	.word	0x2400000c

08009760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009764:	f7ff ffcc 	bl	8009700 <HAL_RCC_GetHCLKFreq>
 8009768:	4602      	mov	r2, r0
 800976a:	4b06      	ldr	r3, [pc, #24]	@ (8009784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	091b      	lsrs	r3, r3, #4
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	4904      	ldr	r1, [pc, #16]	@ (8009788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009776:	5ccb      	ldrb	r3, [r1, r3]
 8009778:	f003 031f 	and.w	r3, r3, #31
 800977c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009780:	4618      	mov	r0, r3
 8009782:	bd80      	pop	{r7, pc}
 8009784:	58024400 	.word	0x58024400
 8009788:	08011e14 	.word	0x08011e14

0800978c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009790:	f7ff ffb6 	bl	8009700 <HAL_RCC_GetHCLKFreq>
 8009794:	4602      	mov	r2, r0
 8009796:	4b06      	ldr	r3, [pc, #24]	@ (80097b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	0a1b      	lsrs	r3, r3, #8
 800979c:	f003 0307 	and.w	r3, r3, #7
 80097a0:	4904      	ldr	r1, [pc, #16]	@ (80097b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097a2:	5ccb      	ldrb	r3, [r1, r3]
 80097a4:	f003 031f 	and.w	r3, r3, #31
 80097a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	58024400 	.word	0x58024400
 80097b4:	08011e14 	.word	0x08011e14

080097b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097bc:	b0c6      	sub	sp, #280	@ 0x118
 80097be:	af00      	add	r7, sp, #0
 80097c0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097ca:	2300      	movs	r3, #0
 80097cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80097d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80097dc:	2500      	movs	r5, #0
 80097de:	ea54 0305 	orrs.w	r3, r4, r5
 80097e2:	d049      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80097e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097ee:	d02f      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80097f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097f4:	d828      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80097f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097fa:	d01a      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80097fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009800:	d822      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800980a:	d007      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800980c:	e01c      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800980e:	4bab      	ldr	r3, [pc, #684]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009812:	4aaa      	ldr	r2, [pc, #680]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800981a:	e01a      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009820:	3308      	adds	r3, #8
 8009822:	2102      	movs	r1, #2
 8009824:	4618      	mov	r0, r3
 8009826:	f002 fa49 	bl	800bcbc <RCCEx_PLL2_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009830:	e00f      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009836:	3328      	adds	r3, #40	@ 0x28
 8009838:	2102      	movs	r1, #2
 800983a:	4618      	mov	r0, r3
 800983c:	f002 faf0 	bl	800be20 <RCCEx_PLL3_Config>
 8009840:	4603      	mov	r3, r0
 8009842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009846:	e004      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800984e:	e000      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10a      	bne.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800985a:	4b98      	ldr	r3, [pc, #608]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800985c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800985e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009868:	4a94      	ldr	r2, [pc, #592]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800986a:	430b      	orrs	r3, r1
 800986c:	6513      	str	r3, [r2, #80]	@ 0x50
 800986e:	e003      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009884:	f04f 0900 	mov.w	r9, #0
 8009888:	ea58 0309 	orrs.w	r3, r8, r9
 800988c:	d047      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009894:	2b04      	cmp	r3, #4
 8009896:	d82a      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009898:	a201      	add	r2, pc, #4	@ (adr r2, 80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989e:	bf00      	nop
 80098a0:	080098b5 	.word	0x080098b5
 80098a4:	080098c3 	.word	0x080098c3
 80098a8:	080098d9 	.word	0x080098d9
 80098ac:	080098f7 	.word	0x080098f7
 80098b0:	080098f7 	.word	0x080098f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b4:	4b81      	ldr	r3, [pc, #516]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b8:	4a80      	ldr	r2, [pc, #512]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098c0:	e01a      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c6:	3308      	adds	r3, #8
 80098c8:	2100      	movs	r1, #0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f002 f9f6 	bl	800bcbc <RCCEx_PLL2_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098d6:	e00f      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098dc:	3328      	adds	r3, #40	@ 0x28
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f002 fa9d 	bl	800be20 <RCCEx_PLL3_Config>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098ec:	e004      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098f4:	e000      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80098f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009900:	4b6e      	ldr	r3, [pc, #440]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009904:	f023 0107 	bic.w	r1, r3, #7
 8009908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800990c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800990e:	4a6b      	ldr	r2, [pc, #428]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009910:	430b      	orrs	r3, r1
 8009912:	6513      	str	r3, [r2, #80]	@ 0x50
 8009914:	e003      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800991a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800991e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800992a:	f04f 0b00 	mov.w	fp, #0
 800992e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009932:	d05b      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800993c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009940:	d03b      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009942:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009946:	d834      	bhi.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009948:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800994c:	d037      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x206>
 800994e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009952:	d82e      	bhi.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009954:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009958:	d033      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800995a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800995e:	d828      	bhi.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009964:	d01a      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009966:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800996a:	d822      	bhi.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009974:	d007      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009976:	e01c      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009978:	4b50      	ldr	r3, [pc, #320]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800997a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997c:	4a4f      	ldr	r2, [pc, #316]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800997e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009984:	e01e      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998a:	3308      	adds	r3, #8
 800998c:	2100      	movs	r1, #0
 800998e:	4618      	mov	r0, r3
 8009990:	f002 f994 	bl	800bcbc <RCCEx_PLL2_Config>
 8009994:	4603      	mov	r3, r0
 8009996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800999a:	e013      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800999c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a0:	3328      	adds	r3, #40	@ 0x28
 80099a2:	2100      	movs	r1, #0
 80099a4:	4618      	mov	r0, r3
 80099a6:	f002 fa3b 	bl	800be20 <RCCEx_PLL3_Config>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099b0:	e008      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099b8:	e004      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099ba:	bf00      	nop
 80099bc:	e002      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099be:	bf00      	nop
 80099c0:	e000      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10b      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80099cc:	4b3b      	ldr	r3, [pc, #236]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099d0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099dc:	4a37      	ldr	r2, [pc, #220]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099de:	430b      	orrs	r3, r1
 80099e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80099e2:	e003      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80099ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80099f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009a02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009a06:	460b      	mov	r3, r1
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	d05d      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009a14:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009a18:	d03b      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009a1a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009a1e:	d834      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a24:	d037      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009a26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a2a:	d82e      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a30:	d033      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009a32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a36:	d828      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a3c:	d01a      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a42:	d822      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d003      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a4c:	d007      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009a4e:	e01c      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a50:	4b1a      	ldr	r3, [pc, #104]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a54:	4a19      	ldr	r2, [pc, #100]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a5c:	e01e      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a62:	3308      	adds	r3, #8
 8009a64:	2100      	movs	r1, #0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f002 f928 	bl	800bcbc <RCCEx_PLL2_Config>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a72:	e013      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a78:	3328      	adds	r3, #40	@ 0x28
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f002 f9cf 	bl	800be20 <RCCEx_PLL3_Config>
 8009a82:	4603      	mov	r3, r0
 8009a84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a88:	e008      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a90:	e004      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009a92:	bf00      	nop
 8009a94:	e002      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009a96:	bf00      	nop
 8009a98:	e000      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10d      	bne.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009aa4:	4b05      	ldr	r3, [pc, #20]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009ab4:	4a01      	ldr	r2, [pc, #4]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ab6:	430b      	orrs	r3, r1
 8009ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009aba:	e005      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009abc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ac4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009ad4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ade:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	d03a      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aee:	2b30      	cmp	r3, #48	@ 0x30
 8009af0:	d01f      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009af2:	2b30      	cmp	r3, #48	@ 0x30
 8009af4:	d819      	bhi.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	d00c      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009afa:	2b20      	cmp	r3, #32
 8009afc:	d815      	bhi.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d019      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b02:	2b10      	cmp	r3, #16
 8009b04:	d111      	bne.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b06:	4baa      	ldr	r3, [pc, #680]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	4aa9      	ldr	r2, [pc, #676]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b12:	e011      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b18:	3308      	adds	r3, #8
 8009b1a:	2102      	movs	r1, #2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f002 f8cd 	bl	800bcbc <RCCEx_PLL2_Config>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b28:	e006      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b30:	e002      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009b32:	bf00      	nop
 8009b34:	e000      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10a      	bne.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009b40:	4b9b      	ldr	r3, [pc, #620]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b4e:	4a98      	ldr	r2, [pc, #608]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b50:	430b      	orrs	r3, r1
 8009b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b54:	e003      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009b6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009b74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	d051      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b88:	d035      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009b8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b8e:	d82e      	bhi.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009b90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009b94:	d031      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009b96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009b9a:	d828      	bhi.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ba0:	d01a      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ba6:	d822      	bhi.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bb0:	d007      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009bb2:	e01c      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb4:	4b7e      	ldr	r3, [pc, #504]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb8:	4a7d      	ldr	r2, [pc, #500]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bc0:	e01c      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f002 f876 	bl	800bcbc <RCCEx_PLL2_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bd6:	e011      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bdc:	3328      	adds	r3, #40	@ 0x28
 8009bde:	2100      	movs	r1, #0
 8009be0:	4618      	mov	r0, r3
 8009be2:	f002 f91d 	bl	800be20 <RCCEx_PLL3_Config>
 8009be6:	4603      	mov	r3, r0
 8009be8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bec:	e006      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bf4:	e002      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009bf6:	bf00      	nop
 8009bf8:	e000      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c04:	4b6a      	ldr	r3, [pc, #424]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c12:	4a67      	ldr	r2, [pc, #412]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c14:	430b      	orrs	r3, r1
 8009c16:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c18:	e003      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009c2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c32:	2300      	movs	r3, #0
 8009c34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c38:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	d053      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c4c:	d033      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009c4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c52:	d82c      	bhi.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c58:	d02f      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009c5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c5e:	d826      	bhi.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c64:	d02b      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009c66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c6a:	d820      	bhi.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c70:	d012      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009c72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c76:	d81a      	bhi.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d022      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c80:	d115      	bne.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c86:	3308      	adds	r3, #8
 8009c88:	2101      	movs	r1, #1
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f002 f816 	bl	800bcbc <RCCEx_PLL2_Config>
 8009c90:	4603      	mov	r3, r0
 8009c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c96:	e015      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9c:	3328      	adds	r3, #40	@ 0x28
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f002 f8bd 	bl	800be20 <RCCEx_PLL3_Config>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009cac:	e00a      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cb4:	e006      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cb6:	bf00      	nop
 8009cb8:	e004      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cba:	bf00      	nop
 8009cbc:	e002      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cbe:	bf00      	nop
 8009cc0:	e000      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009ccc:	4b38      	ldr	r3, [pc, #224]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cd0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cda:	4a35      	ldr	r2, [pc, #212]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cdc:	430b      	orrs	r3, r1
 8009cde:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ce0:	e003      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ce6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009d00:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d04:	460b      	mov	r3, r1
 8009d06:	4313      	orrs	r3, r2
 8009d08:	d058      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d16:	d033      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d1c:	d82c      	bhi.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d22:	d02f      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d28:	d826      	bhi.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d2e:	d02b      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009d30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d34:	d820      	bhi.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d3a:	d012      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d40:	d81a      	bhi.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d022      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d4a:	d115      	bne.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d50:	3308      	adds	r3, #8
 8009d52:	2101      	movs	r1, #1
 8009d54:	4618      	mov	r0, r3
 8009d56:	f001 ffb1 	bl	800bcbc <RCCEx_PLL2_Config>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d60:	e015      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d66:	3328      	adds	r3, #40	@ 0x28
 8009d68:	2101      	movs	r1, #1
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f002 f858 	bl	800be20 <RCCEx_PLL3_Config>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d76:	e00a      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d7e:	e006      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d80:	bf00      	nop
 8009d82:	e004      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d84:	bf00      	nop
 8009d86:	e002      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d88:	bf00      	nop
 8009d8a:	e000      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10e      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d96:	4b06      	ldr	r3, [pc, #24]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009da6:	4a02      	ldr	r2, [pc, #8]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009da8:	430b      	orrs	r3, r1
 8009daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dac:	e006      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009dae:	bf00      	nop
 8009db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009db8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009dd2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	d037      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009de6:	d00e      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dec:	d816      	bhi.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d018      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009df2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009df6:	d111      	bne.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df8:	4bc4      	ldr	r3, [pc, #784]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfc:	4ac3      	ldr	r2, [pc, #780]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e04:	e00f      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f001 ff54 	bl	800bcbc <RCCEx_PLL2_Config>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e1a:	e004      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e22:	e000      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e2e:	4bb7      	ldr	r3, [pc, #732]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e3c:	4ab3      	ldr	r2, [pc, #716]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e3e:	430b      	orrs	r3, r1
 8009e40:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e42:	e003      	b.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009e58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009e66:	460b      	mov	r3, r1
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	d039      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d81c      	bhi.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009e76:	a201      	add	r2, pc, #4	@ (adr r2, 8009e7c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009eb9 	.word	0x08009eb9
 8009e80:	08009e8d 	.word	0x08009e8d
 8009e84:	08009e9b 	.word	0x08009e9b
 8009e88:	08009eb9 	.word	0x08009eb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e8c:	4b9f      	ldr	r3, [pc, #636]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e90:	4a9e      	ldr	r2, [pc, #632]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e98:	e00f      	b.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e9e:	3308      	adds	r3, #8
 8009ea0:	2102      	movs	r1, #2
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f001 ff0a 	bl	800bcbc <RCCEx_PLL2_Config>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009eae:	e004      	b.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009eb6:	e000      	b.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10a      	bne.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ec2:	4b92      	ldr	r3, [pc, #584]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ec6:	f023 0103 	bic.w	r1, r3, #3
 8009eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ed0:	4a8e      	ldr	r2, [pc, #568]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ed6:	e003      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009edc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009eec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ef6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4313      	orrs	r3, r2
 8009efe:	f000 8099 	beq.w	800a034 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f02:	4b83      	ldr	r3, [pc, #524]	@ (800a110 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a82      	ldr	r2, [pc, #520]	@ (800a110 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f0e:	f7f8 fe65 	bl	8002bdc <HAL_GetTick>
 8009f12:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f16:	e00b      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f18:	f7f8 fe60 	bl	8002bdc <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	2b64      	cmp	r3, #100	@ 0x64
 8009f26:	d903      	bls.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f2e:	e005      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f30:	4b77      	ldr	r3, [pc, #476]	@ (800a110 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d0ed      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d173      	bne.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f44:	4b71      	ldr	r3, [pc, #452]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009f50:	4053      	eors	r3, r2
 8009f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d015      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f5a:	4b6c      	ldr	r3, [pc, #432]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f66:	4b69      	ldr	r3, [pc, #420]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f6a:	4a68      	ldr	r2, [pc, #416]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f70:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f72:	4b66      	ldr	r3, [pc, #408]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f76:	4a65      	ldr	r2, [pc, #404]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f7c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f7e:	4a63      	ldr	r2, [pc, #396]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f92:	d118      	bne.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f94:	f7f8 fe22 	bl	8002bdc <HAL_GetTick>
 8009f98:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f9c:	e00d      	b.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f9e:	f7f8 fe1d 	bl	8002bdc <HAL_GetTick>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d903      	bls.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009fb8:	e005      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fba:	4b54      	ldr	r3, [pc, #336]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0eb      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d129      	bne.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fde:	d10e      	bne.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009fe0:	4b4a      	ldr	r3, [pc, #296]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ff0:	091a      	lsrs	r2, r3, #4
 8009ff2:	4b48      	ldr	r3, [pc, #288]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	4a45      	ldr	r2, [pc, #276]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	6113      	str	r3, [r2, #16]
 8009ffc:	e005      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009ffe:	4b43      	ldr	r3, [pc, #268]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	4a42      	ldr	r2, [pc, #264]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a004:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a008:	6113      	str	r3, [r2, #16]
 800a00a:	4b40      	ldr	r3, [pc, #256]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a00c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a01a:	4a3c      	ldr	r2, [pc, #240]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a01c:	430b      	orrs	r3, r1
 800a01e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a020:	e008      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a026:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a02a:	e003      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a02c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a030:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	f002 0301 	and.w	r3, r2, #1
 800a040:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a044:	2300      	movs	r3, #0
 800a046:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a04a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a04e:	460b      	mov	r3, r1
 800a050:	4313      	orrs	r3, r2
 800a052:	f000 808f 	beq.w	800a174 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a05c:	2b28      	cmp	r3, #40	@ 0x28
 800a05e:	d871      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a060:	a201      	add	r2, pc, #4	@ (adr r2, 800a068 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a066:	bf00      	nop
 800a068:	0800a14d 	.word	0x0800a14d
 800a06c:	0800a145 	.word	0x0800a145
 800a070:	0800a145 	.word	0x0800a145
 800a074:	0800a145 	.word	0x0800a145
 800a078:	0800a145 	.word	0x0800a145
 800a07c:	0800a145 	.word	0x0800a145
 800a080:	0800a145 	.word	0x0800a145
 800a084:	0800a145 	.word	0x0800a145
 800a088:	0800a119 	.word	0x0800a119
 800a08c:	0800a145 	.word	0x0800a145
 800a090:	0800a145 	.word	0x0800a145
 800a094:	0800a145 	.word	0x0800a145
 800a098:	0800a145 	.word	0x0800a145
 800a09c:	0800a145 	.word	0x0800a145
 800a0a0:	0800a145 	.word	0x0800a145
 800a0a4:	0800a145 	.word	0x0800a145
 800a0a8:	0800a12f 	.word	0x0800a12f
 800a0ac:	0800a145 	.word	0x0800a145
 800a0b0:	0800a145 	.word	0x0800a145
 800a0b4:	0800a145 	.word	0x0800a145
 800a0b8:	0800a145 	.word	0x0800a145
 800a0bc:	0800a145 	.word	0x0800a145
 800a0c0:	0800a145 	.word	0x0800a145
 800a0c4:	0800a145 	.word	0x0800a145
 800a0c8:	0800a14d 	.word	0x0800a14d
 800a0cc:	0800a145 	.word	0x0800a145
 800a0d0:	0800a145 	.word	0x0800a145
 800a0d4:	0800a145 	.word	0x0800a145
 800a0d8:	0800a145 	.word	0x0800a145
 800a0dc:	0800a145 	.word	0x0800a145
 800a0e0:	0800a145 	.word	0x0800a145
 800a0e4:	0800a145 	.word	0x0800a145
 800a0e8:	0800a14d 	.word	0x0800a14d
 800a0ec:	0800a145 	.word	0x0800a145
 800a0f0:	0800a145 	.word	0x0800a145
 800a0f4:	0800a145 	.word	0x0800a145
 800a0f8:	0800a145 	.word	0x0800a145
 800a0fc:	0800a145 	.word	0x0800a145
 800a100:	0800a145 	.word	0x0800a145
 800a104:	0800a145 	.word	0x0800a145
 800a108:	0800a14d 	.word	0x0800a14d
 800a10c:	58024400 	.word	0x58024400
 800a110:	58024800 	.word	0x58024800
 800a114:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11c:	3308      	adds	r3, #8
 800a11e:	2101      	movs	r1, #1
 800a120:	4618      	mov	r0, r3
 800a122:	f001 fdcb 	bl	800bcbc <RCCEx_PLL2_Config>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a12c:	e00f      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a132:	3328      	adds	r3, #40	@ 0x28
 800a134:	2101      	movs	r1, #1
 800a136:	4618      	mov	r0, r3
 800a138:	f001 fe72 	bl	800be20 <RCCEx_PLL3_Config>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a142:	e004      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a14a:	e000      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a14e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10a      	bne.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a156:	4bbf      	ldr	r3, [pc, #764]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a15a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a162:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a164:	4abb      	ldr	r2, [pc, #748]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a166:	430b      	orrs	r3, r1
 800a168:	6553      	str	r3, [r2, #84]	@ 0x54
 800a16a:	e003      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a16c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	f002 0302 	and.w	r3, r2, #2
 800a180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a184:	2300      	movs	r3, #0
 800a186:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a18a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a18e:	460b      	mov	r3, r1
 800a190:	4313      	orrs	r3, r2
 800a192:	d041      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a19a:	2b05      	cmp	r3, #5
 800a19c:	d824      	bhi.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a19e:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a4:	0800a1f1 	.word	0x0800a1f1
 800a1a8:	0800a1bd 	.word	0x0800a1bd
 800a1ac:	0800a1d3 	.word	0x0800a1d3
 800a1b0:	0800a1f1 	.word	0x0800a1f1
 800a1b4:	0800a1f1 	.word	0x0800a1f1
 800a1b8:	0800a1f1 	.word	0x0800a1f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f001 fd79 	bl	800bcbc <RCCEx_PLL2_Config>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1d0:	e00f      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d6:	3328      	adds	r3, #40	@ 0x28
 800a1d8:	2101      	movs	r1, #1
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f001 fe20 	bl	800be20 <RCCEx_PLL3_Config>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1e6:	e004      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1ee:	e000      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a1f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10a      	bne.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a1fa:	4b96      	ldr	r3, [pc, #600]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1fe:	f023 0107 	bic.w	r1, r3, #7
 800a202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a208:	4a92      	ldr	r2, [pc, #584]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a20a:	430b      	orrs	r3, r1
 800a20c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a20e:	e003      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a214:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f002 0304 	and.w	r3, r2, #4
 800a224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a228:	2300      	movs	r3, #0
 800a22a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a22e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a232:	460b      	mov	r3, r1
 800a234:	4313      	orrs	r3, r2
 800a236:	d044      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a240:	2b05      	cmp	r3, #5
 800a242:	d825      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a244:	a201      	add	r2, pc, #4	@ (adr r2, 800a24c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24a:	bf00      	nop
 800a24c:	0800a299 	.word	0x0800a299
 800a250:	0800a265 	.word	0x0800a265
 800a254:	0800a27b 	.word	0x0800a27b
 800a258:	0800a299 	.word	0x0800a299
 800a25c:	0800a299 	.word	0x0800a299
 800a260:	0800a299 	.word	0x0800a299
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a268:	3308      	adds	r3, #8
 800a26a:	2101      	movs	r1, #1
 800a26c:	4618      	mov	r0, r3
 800a26e:	f001 fd25 	bl	800bcbc <RCCEx_PLL2_Config>
 800a272:	4603      	mov	r3, r0
 800a274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a278:	e00f      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a27e:	3328      	adds	r3, #40	@ 0x28
 800a280:	2101      	movs	r1, #1
 800a282:	4618      	mov	r0, r3
 800a284:	f001 fdcc 	bl	800be20 <RCCEx_PLL3_Config>
 800a288:	4603      	mov	r3, r0
 800a28a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a28e:	e004      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a296:	e000      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a29a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10b      	bne.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2a2:	4b6c      	ldr	r3, [pc, #432]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2a6:	f023 0107 	bic.w	r1, r3, #7
 800a2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2b2:	4a68      	ldr	r2, [pc, #416]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2b8:	e003      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f002 0320 	and.w	r3, r2, #32
 800a2ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a2d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	d055      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2ee:	d033      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a2f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2f4:	d82c      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2fa:	d02f      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a300:	d826      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a302:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a306:	d02b      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a30c:	d820      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a30e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a312:	d012      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a318:	d81a      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d022      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a31e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a322:	d115      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a328:	3308      	adds	r3, #8
 800a32a:	2100      	movs	r1, #0
 800a32c:	4618      	mov	r0, r3
 800a32e:	f001 fcc5 	bl	800bcbc <RCCEx_PLL2_Config>
 800a332:	4603      	mov	r3, r0
 800a334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a338:	e015      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a33e:	3328      	adds	r3, #40	@ 0x28
 800a340:	2102      	movs	r1, #2
 800a342:	4618      	mov	r0, r3
 800a344:	f001 fd6c 	bl	800be20 <RCCEx_PLL3_Config>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a34e:	e00a      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a356:	e006      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a358:	bf00      	nop
 800a35a:	e004      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a35c:	bf00      	nop
 800a35e:	e002      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a360:	bf00      	nop
 800a362:	e000      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a364:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10b      	bne.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a36e:	4b39      	ldr	r3, [pc, #228]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a372:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a37e:	4a35      	ldr	r2, [pc, #212]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a380:	430b      	orrs	r3, r1
 800a382:	6553      	str	r3, [r2, #84]	@ 0x54
 800a384:	e003      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a386:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a38a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a39a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	d058      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a3ba:	d033      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a3bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a3c0:	d82c      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3c6:	d02f      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a3c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3cc:	d826      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3d2:	d02b      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a3d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3d8:	d820      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3de:	d012      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a3e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3e4:	d81a      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d022      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a3ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3ee:	d115      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f001 fc5f 	bl	800bcbc <RCCEx_PLL2_Config>
 800a3fe:	4603      	mov	r3, r0
 800a400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a404:	e015      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a40a:	3328      	adds	r3, #40	@ 0x28
 800a40c:	2102      	movs	r1, #2
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 fd06 	bl	800be20 <RCCEx_PLL3_Config>
 800a414:	4603      	mov	r3, r0
 800a416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a41a:	e00a      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a422:	e006      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a424:	bf00      	nop
 800a426:	e004      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a428:	bf00      	nop
 800a42a:	e002      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a42c:	bf00      	nop
 800a42e:	e000      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a430:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10e      	bne.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a43a:	4b06      	ldr	r3, [pc, #24]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a43c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a43e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a446:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a44a:	4a02      	ldr	r2, [pc, #8]	@ (800a454 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a44c:	430b      	orrs	r3, r1
 800a44e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a450:	e006      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a452:	bf00      	nop
 800a454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a45c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a46c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a470:	2300      	movs	r3, #0
 800a472:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a476:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a47a:	460b      	mov	r3, r1
 800a47c:	4313      	orrs	r3, r2
 800a47e:	d055      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a484:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a488:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a48c:	d033      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a48e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a492:	d82c      	bhi.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a498:	d02f      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a49a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a49e:	d826      	bhi.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4a4:	d02b      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a4a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4aa:	d820      	bhi.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4b0:	d012      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a4b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4b6:	d81a      	bhi.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d022      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a4bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4c0:	d115      	bne.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c6:	3308      	adds	r3, #8
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f001 fbf6 	bl	800bcbc <RCCEx_PLL2_Config>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4d6:	e015      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4dc:	3328      	adds	r3, #40	@ 0x28
 800a4de:	2102      	movs	r1, #2
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f001 fc9d 	bl	800be20 <RCCEx_PLL3_Config>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4ec:	e00a      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4f4:	e006      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a4f6:	bf00      	nop
 800a4f8:	e004      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a4fa:	bf00      	nop
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a4fe:	bf00      	nop
 800a500:	e000      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a502:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10b      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a50c:	4ba0      	ldr	r3, [pc, #640]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a50e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a510:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a51c:	4a9c      	ldr	r2, [pc, #624]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a51e:	430b      	orrs	r3, r1
 800a520:	6593      	str	r3, [r2, #88]	@ 0x58
 800a522:	e003      	b.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f002 0308 	and.w	r3, r2, #8
 800a538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a53c:	2300      	movs	r3, #0
 800a53e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a542:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a546:	460b      	mov	r3, r1
 800a548:	4313      	orrs	r3, r2
 800a54a:	d01e      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a558:	d10c      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a55e:	3328      	adds	r3, #40	@ 0x28
 800a560:	2102      	movs	r1, #2
 800a562:	4618      	mov	r0, r3
 800a564:	f001 fc5c 	bl	800be20 <RCCEx_PLL3_Config>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d002      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a574:	4b86      	ldr	r3, [pc, #536]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a578:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a584:	4a82      	ldr	r2, [pc, #520]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a586:	430b      	orrs	r3, r1
 800a588:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f002 0310 	and.w	r3, r2, #16
 800a596:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a59a:	2300      	movs	r3, #0
 800a59c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a5a0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	d01e      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5b6:	d10c      	bne.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5bc:	3328      	adds	r3, #40	@ 0x28
 800a5be:	2102      	movs	r1, #2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f001 fc2d 	bl	800be20 <RCCEx_PLL3_Config>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a5d2:	4b6f      	ldr	r3, [pc, #444]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5e2:	4a6b      	ldr	r2, [pc, #428]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5e4:	430b      	orrs	r3, r1
 800a5e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a5f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a5fe:	460b      	mov	r3, r1
 800a600:	4313      	orrs	r3, r2
 800a602:	d03e      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a608:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a60c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a610:	d022      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a612:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a616:	d81b      	bhi.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d003      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a61c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a620:	d00b      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a622:	e015      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a628:	3308      	adds	r3, #8
 800a62a:	2100      	movs	r1, #0
 800a62c:	4618      	mov	r0, r3
 800a62e:	f001 fb45 	bl	800bcbc <RCCEx_PLL2_Config>
 800a632:	4603      	mov	r3, r0
 800a634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a638:	e00f      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a63e:	3328      	adds	r3, #40	@ 0x28
 800a640:	2102      	movs	r1, #2
 800a642:	4618      	mov	r0, r3
 800a644:	f001 fbec 	bl	800be20 <RCCEx_PLL3_Config>
 800a648:	4603      	mov	r3, r0
 800a64a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a64e:	e004      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a656:	e000      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a65a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10b      	bne.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a662:	4b4b      	ldr	r3, [pc, #300]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a666:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a66e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a672:	4a47      	ldr	r2, [pc, #284]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a674:	430b      	orrs	r3, r1
 800a676:	6593      	str	r3, [r2, #88]	@ 0x58
 800a678:	e003      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a67a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a67e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a68e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a690:	2300      	movs	r3, #0
 800a692:	677b      	str	r3, [r7, #116]	@ 0x74
 800a694:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a698:	460b      	mov	r3, r1
 800a69a:	4313      	orrs	r3, r2
 800a69c:	d03b      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6aa:	d01f      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a6ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6b0:	d818      	bhi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a6b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6b6:	d003      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a6b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6bc:	d007      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a6be:	e011      	b.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6c0:	4b33      	ldr	r3, [pc, #204]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c4:	4a32      	ldr	r2, [pc, #200]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6cc:	e00f      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6d2:	3328      	adds	r3, #40	@ 0x28
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f001 fba2 	bl	800be20 <RCCEx_PLL3_Config>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6e2:	e004      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6ea:	e000      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a6ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10b      	bne.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a6f6:	4b26      	ldr	r3, [pc, #152]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a706:	4a22      	ldr	r2, [pc, #136]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a708:	430b      	orrs	r3, r1
 800a70a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a70c:	e003      	b.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a70e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a712:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a722:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a724:	2300      	movs	r3, #0
 800a726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a728:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a72c:	460b      	mov	r3, r1
 800a72e:	4313      	orrs	r3, r2
 800a730:	d034      	beq.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a73c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a740:	d007      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a742:	e011      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a744:	4b12      	ldr	r3, [pc, #72]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a748:	4a11      	ldr	r2, [pc, #68]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a74a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a74e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a750:	e00e      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a756:	3308      	adds	r3, #8
 800a758:	2102      	movs	r1, #2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 faae 	bl	800bcbc <RCCEx_PLL2_Config>
 800a760:	4603      	mov	r3, r0
 800a762:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a766:	e003      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a76e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10d      	bne.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a778:	4b05      	ldr	r3, [pc, #20]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a77a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a77c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a786:	4a02      	ldr	r2, [pc, #8]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a788:	430b      	orrs	r3, r1
 800a78a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a78c:	e006      	b.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a78e:	bf00      	nop
 800a790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a798:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a7a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7ae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	d00c      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7bc:	3328      	adds	r3, #40	@ 0x28
 800a7be:	2102      	movs	r1, #2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 fb2d 	bl	800be20 <RCCEx_PLL3_Config>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a7de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7e4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	d036      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7f8:	d018      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a7fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7fe:	d811      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a804:	d014      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a80a:	d80b      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d011      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a814:	d106      	bne.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a816:	4bb7      	ldr	r3, [pc, #732]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81a:	4ab6      	ldr	r2, [pc, #728]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a81c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a822:	e008      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a82a:	e004      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a82c:	bf00      	nop
 800a82e:	e002      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a830:	bf00      	nop
 800a832:	e000      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a834:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a836:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10a      	bne.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a83e:	4bad      	ldr	r3, [pc, #692]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a842:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a84a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a84c:	4aa9      	ldr	r2, [pc, #676]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a84e:	430b      	orrs	r3, r1
 800a850:	6553      	str	r3, [r2, #84]	@ 0x54
 800a852:	e003      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a858:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a868:	653b      	str	r3, [r7, #80]	@ 0x50
 800a86a:	2300      	movs	r3, #0
 800a86c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a86e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a872:	460b      	mov	r3, r1
 800a874:	4313      	orrs	r3, r2
 800a876:	d009      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a878:	4b9e      	ldr	r3, [pc, #632]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a87a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a87c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a886:	4a9b      	ldr	r2, [pc, #620]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a888:	430b      	orrs	r3, r1
 800a88a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a89a:	2300      	movs	r3, #0
 800a89c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a89e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	d009      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8a8:	4b92      	ldr	r3, [pc, #584]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8b6:	4a8f      	ldr	r2, [pc, #572]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8b8:	430b      	orrs	r3, r1
 800a8ba:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a8c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	d00e      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8d8:	4b86      	ldr	r3, [pc, #536]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	4a85      	ldr	r2, [pc, #532]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a8e2:	6113      	str	r3, [r2, #16]
 800a8e4:	4b83      	ldr	r3, [pc, #524]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8e6:	6919      	ldr	r1, [r3, #16]
 800a8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a8f0:	4a80      	ldr	r2, [pc, #512]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8f2:	430b      	orrs	r3, r1
 800a8f4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a902:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a904:	2300      	movs	r3, #0
 800a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a908:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a90c:	460b      	mov	r3, r1
 800a90e:	4313      	orrs	r3, r2
 800a910:	d009      	beq.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a912:	4b78      	ldr	r3, [pc, #480]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a916:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a91e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a920:	4a74      	ldr	r2, [pc, #464]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a922:	430b      	orrs	r3, r1
 800a924:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a932:	633b      	str	r3, [r7, #48]	@ 0x30
 800a934:	2300      	movs	r3, #0
 800a936:	637b      	str	r3, [r7, #52]	@ 0x34
 800a938:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a93c:	460b      	mov	r3, r1
 800a93e:	4313      	orrs	r3, r2
 800a940:	d00a      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a942:	4b6c      	ldr	r3, [pc, #432]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a946:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a952:	4a68      	ldr	r2, [pc, #416]	@ (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a954:	430b      	orrs	r3, r1
 800a956:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	2100      	movs	r1, #0
 800a962:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a96a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a96e:	460b      	mov	r3, r1
 800a970:	4313      	orrs	r3, r2
 800a972:	d011      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a978:	3308      	adds	r3, #8
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 f99d 	bl	800bcbc <RCCEx_PLL2_Config>
 800a982:	4603      	mov	r3, r0
 800a984:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d003      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a994:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	6239      	str	r1, [r7, #32]
 800a9a4:	f003 0302 	and.w	r3, r3, #2
 800a9a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	d011      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f001 f97d 	bl	800bcbc <RCCEx_PLL2_Config>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a9c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	61b9      	str	r1, [r7, #24]
 800a9e4:	f003 0304 	and.w	r3, r3, #4
 800a9e8:	61fb      	str	r3, [r7, #28]
 800a9ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	d011      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	2102      	movs	r1, #2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 f95d 	bl	800bcbc <RCCEx_PLL2_Config>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aa08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d003      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa20:	2100      	movs	r1, #0
 800aa22:	6139      	str	r1, [r7, #16]
 800aa24:	f003 0308 	and.w	r3, r3, #8
 800aa28:	617b      	str	r3, [r7, #20]
 800aa2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4313      	orrs	r3, r2
 800aa32:	d011      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa38:	3328      	adds	r3, #40	@ 0x28
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f001 f9ef 	bl	800be20 <RCCEx_PLL3_Config>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800aa48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa60:	2100      	movs	r1, #0
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	f003 0310 	and.w	r3, r3, #16
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4313      	orrs	r3, r2
 800aa72:	d011      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa78:	3328      	adds	r3, #40	@ 0x28
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f001 f9cf 	bl	800be20 <RCCEx_PLL3_Config>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aa88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	6039      	str	r1, [r7, #0]
 800aaa4:	f003 0320 	and.w	r3, r3, #32
 800aaa8:	607b      	str	r3, [r7, #4]
 800aaaa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d011      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aab8:	3328      	adds	r3, #40	@ 0x28
 800aaba:	2102      	movs	r1, #2
 800aabc:	4618      	mov	r0, r3
 800aabe:	f001 f9af 	bl	800be20 <RCCEx_PLL3_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aad4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800aad8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	e000      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800aaec:	46bd      	mov	sp, r7
 800aaee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aaf2:	bf00      	nop
 800aaf4:	58024400 	.word	0x58024400

0800aaf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b090      	sub	sp, #64	@ 0x40
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ab02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab06:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ab0a:	430b      	orrs	r3, r1
 800ab0c:	f040 8094 	bne.w	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab10:	4b9b      	ldr	r3, [pc, #620]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab14:	f003 0307 	and.w	r3, r3, #7
 800ab18:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1c:	2b04      	cmp	r3, #4
 800ab1e:	f200 8087 	bhi.w	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ab22:	a201      	add	r2, pc, #4	@ (adr r2, 800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab28:	0800ab3d 	.word	0x0800ab3d
 800ab2c:	0800ab65 	.word	0x0800ab65
 800ab30:	0800ab8d 	.word	0x0800ab8d
 800ab34:	0800ac29 	.word	0x0800ac29
 800ab38:	0800abb5 	.word	0x0800abb5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab3c:	4b90      	ldr	r3, [pc, #576]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab48:	d108      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 ff62 	bl	800ba18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab58:	f000 bc93 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab60:	f000 bc8f 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab64:	4b86      	ldr	r3, [pc, #536]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab70:	d108      	bne.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab72:	f107 0318 	add.w	r3, r7, #24
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 fca6 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab80:	f000 bc7f 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab88:	f000 bc7b 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab8c:	4b7c      	ldr	r3, [pc, #496]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab98:	d108      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab9a:	f107 030c 	add.w	r3, r7, #12
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 fde6 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba8:	f000 bc6b 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb0:	f000 bc67 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abb4:	4b72      	ldr	r3, [pc, #456]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abbc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abbe:	4b70      	ldr	r3, [pc, #448]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0304 	and.w	r3, r3, #4
 800abc6:	2b04      	cmp	r3, #4
 800abc8:	d10c      	bne.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800abca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d109      	bne.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abd0:	4b6b      	ldr	r3, [pc, #428]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	08db      	lsrs	r3, r3, #3
 800abd6:	f003 0303 	and.w	r3, r3, #3
 800abda:	4a6a      	ldr	r2, [pc, #424]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800abdc:	fa22 f303 	lsr.w	r3, r2, r3
 800abe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abe2:	e01f      	b.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abe4:	4b66      	ldr	r3, [pc, #408]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abf0:	d106      	bne.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800abf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abf8:	d102      	bne.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abfa:	4b63      	ldr	r3, [pc, #396]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800abfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abfe:	e011      	b.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac00:	4b5f      	ldr	r3, [pc, #380]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac0c:	d106      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac14:	d102      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac16:	4b5d      	ldr	r3, [pc, #372]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac1a:	e003      	b.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac20:	f000 bc2f 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac24:	f000 bc2d 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac28:	4b59      	ldr	r3, [pc, #356]	@ (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac2c:	f000 bc29 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac34:	f000 bc25 	b.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ac38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac3c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ac40:	430b      	orrs	r3, r1
 800ac42:	f040 80a7 	bne.w	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ac46:	4b4e      	ldr	r3, [pc, #312]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac4a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ac4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ac50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac56:	d054      	beq.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ac58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac5e:	f200 808b 	bhi.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac68:	f000 8083 	beq.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac72:	f200 8081 	bhi.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac7c:	d02f      	beq.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac84:	d878      	bhi.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d004      	beq.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac92:	d012      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ac94:	e070      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac96:	4b3a      	ldr	r3, [pc, #232]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aca2:	d107      	bne.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 feb5 	bl	800ba18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb2:	e3e6      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb8:	e3e3      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acba:	4b31      	ldr	r3, [pc, #196]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acc6:	d107      	bne.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc8:	f107 0318 	add.w	r3, r7, #24
 800accc:	4618      	mov	r0, r3
 800acce:	f000 fbfb 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd6:	e3d4      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acdc:	e3d1      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acde:	4b28      	ldr	r3, [pc, #160]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ace6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acea:	d107      	bne.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acec:	f107 030c 	add.w	r3, r7, #12
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fd3d 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acfa:	e3c2      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad00:	e3bf      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad02:	4b1f      	ldr	r3, [pc, #124]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0304 	and.w	r3, r3, #4
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d10c      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ad18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d109      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad1e:	4b18      	ldr	r3, [pc, #96]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	08db      	lsrs	r3, r3, #3
 800ad24:	f003 0303 	and.w	r3, r3, #3
 800ad28:	4a16      	ldr	r2, [pc, #88]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ad2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad30:	e01e      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad32:	4b13      	ldr	r3, [pc, #76]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad3e:	d106      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ad40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad46:	d102      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad48:	4b0f      	ldr	r3, [pc, #60]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ad4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad4c:	e010      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad5a:	d106      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ad5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad62:	d102      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad64:	4b09      	ldr	r3, [pc, #36]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad68:	e002      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad6e:	e388      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad70:	e387      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad72:	4b07      	ldr	r3, [pc, #28]	@ (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad76:	e384      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad7c:	e381      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad7e:	bf00      	nop
 800ad80:	58024400 	.word	0x58024400
 800ad84:	03d09000 	.word	0x03d09000
 800ad88:	003d0900 	.word	0x003d0900
 800ad8c:	016e3600 	.word	0x016e3600
 800ad90:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ad94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad98:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ad9c:	430b      	orrs	r3, r1
 800ad9e:	f040 809c 	bne.w	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ada2:	4b9e      	ldr	r3, [pc, #632]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ada4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ada6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800adaa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800adac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adb2:	d054      	beq.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800adb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adba:	f200 808b 	bhi.w	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800adc4:	f000 8083 	beq.w	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800adc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800adce:	f200 8081 	bhi.w	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800add8:	d02f      	beq.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800adda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800addc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ade0:	d878      	bhi.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d004      	beq.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ade8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adee:	d012      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800adf0:	e070      	b.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adf2:	4b8a      	ldr	r3, [pc, #552]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adfe:	d107      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 fe07 	bl	800ba18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0e:	e338      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae14:	e335      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae16:	4b81      	ldr	r3, [pc, #516]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae22:	d107      	bne.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae24:	f107 0318 	add.w	r3, r7, #24
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 fb4d 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae32:	e326      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae38:	e323      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae3a:	4b78      	ldr	r3, [pc, #480]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae46:	d107      	bne.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae48:	f107 030c 	add.w	r3, r7, #12
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fc8f 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae56:	e314      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae5c:	e311      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae5e:	4b6f      	ldr	r3, [pc, #444]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae68:	4b6c      	ldr	r3, [pc, #432]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 0304 	and.w	r3, r3, #4
 800ae70:	2b04      	cmp	r3, #4
 800ae72:	d10c      	bne.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ae74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae7a:	4b68      	ldr	r3, [pc, #416]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	08db      	lsrs	r3, r3, #3
 800ae80:	f003 0303 	and.w	r3, r3, #3
 800ae84:	4a66      	ldr	r2, [pc, #408]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ae86:	fa22 f303 	lsr.w	r3, r2, r3
 800ae8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae8c:	e01e      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae8e:	4b63      	ldr	r3, [pc, #396]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae9a:	d106      	bne.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ae9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aea2:	d102      	bne.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aea4:	4b5f      	ldr	r3, [pc, #380]	@ (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800aea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aea8:	e010      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aeaa:	4b5c      	ldr	r3, [pc, #368]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeb6:	d106      	bne.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aebe:	d102      	bne.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aec0:	4b59      	ldr	r3, [pc, #356]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aec4:	e002      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aeca:	e2da      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aecc:	e2d9      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aece:	4b57      	ldr	r3, [pc, #348]	@ (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed2:	e2d6      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed8:	e2d3      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aeda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aede:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800aee2:	430b      	orrs	r3, r1
 800aee4:	f040 80a7 	bne.w	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aee8:	4b4c      	ldr	r3, [pc, #304]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aeea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aef0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aef8:	d055      	beq.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af00:	f200 8096 	bhi.w	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af0a:	f000 8084 	beq.w	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800af0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af14:	f200 808c 	bhi.w	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af1e:	d030      	beq.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800af20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af26:	f200 8083 	bhi.w	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af36:	d012      	beq.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800af38:	e07a      	b.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af3a:	4b38      	ldr	r3, [pc, #224]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af46:	d107      	bne.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 fd63 	bl	800ba18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af56:	e294      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5c:	e291      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af5e:	4b2f      	ldr	r3, [pc, #188]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af6a:	d107      	bne.n	800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af6c:	f107 0318 	add.w	r3, r7, #24
 800af70:	4618      	mov	r0, r3
 800af72:	f000 faa9 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7a:	e282      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af80:	e27f      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af82:	4b26      	ldr	r3, [pc, #152]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af8e:	d107      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af90:	f107 030c 	add.w	r3, r7, #12
 800af94:	4618      	mov	r0, r3
 800af96:	f000 fbeb 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af9e:	e270      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa4:	e26d      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afa6:	4b1d      	ldr	r3, [pc, #116]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afaa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800afae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afb0:	4b1a      	ldr	r3, [pc, #104]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 0304 	and.w	r3, r3, #4
 800afb8:	2b04      	cmp	r3, #4
 800afba:	d10c      	bne.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800afbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d109      	bne.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afc2:	4b16      	ldr	r3, [pc, #88]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	08db      	lsrs	r3, r3, #3
 800afc8:	f003 0303 	and.w	r3, r3, #3
 800afcc:	4a14      	ldr	r2, [pc, #80]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800afce:	fa22 f303 	lsr.w	r3, r2, r3
 800afd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afd4:	e01e      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afd6:	4b11      	ldr	r3, [pc, #68]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afe2:	d106      	bne.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800afe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afea:	d102      	bne.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afec:	4b0d      	ldr	r3, [pc, #52]	@ (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800afee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aff0:	e010      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aff2:	4b0a      	ldr	r3, [pc, #40]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800affa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800affe:	d106      	bne.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b006:	d102      	bne.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b008:	4b07      	ldr	r3, [pc, #28]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b00c:	e002      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b012:	e236      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b014:	e235      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b016:	4b05      	ldr	r3, [pc, #20]	@ (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b01a:	e232      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b01c:	58024400 	.word	0x58024400
 800b020:	03d09000 	.word	0x03d09000
 800b024:	003d0900 	.word	0x003d0900
 800b028:	016e3600 	.word	0x016e3600
 800b02c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b034:	e225      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b03a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b03e:	430b      	orrs	r3, r1
 800b040:	f040 8085 	bne.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b044:	4b9c      	ldr	r3, [pc, #624]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b048:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b04c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b054:	d06b      	beq.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b05c:	d874      	bhi.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b060:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b064:	d056      	beq.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b068:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b06c:	d86c      	bhi.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b070:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b074:	d03b      	beq.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b078:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b07c:	d864      	bhi.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b084:	d021      	beq.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b088:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b08c:	d85c      	bhi.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b09a:	d004      	beq.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b09c:	e054      	b.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b09e:	f7fe fb5f 	bl	8009760 <HAL_RCC_GetPCLK1Freq>
 800b0a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0a4:	e1ed      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0a6:	4b84      	ldr	r3, [pc, #528]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0b2:	d107      	bne.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0b4:	f107 0318 	add.w	r3, r7, #24
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 fa05 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0c2:	e1de      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c8:	e1db      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0ca:	4b7b      	ldr	r3, [pc, #492]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0d6:	d107      	bne.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0d8:	f107 030c 	add.w	r3, r7, #12
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 fb47 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0e6:	e1cc      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ec:	e1c9      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0ee:	4b72      	ldr	r3, [pc, #456]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0304 	and.w	r3, r3, #4
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d109      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0fa:	4b6f      	ldr	r3, [pc, #444]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	08db      	lsrs	r3, r3, #3
 800b100:	f003 0303 	and.w	r3, r3, #3
 800b104:	4a6d      	ldr	r2, [pc, #436]	@ (800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b106:	fa22 f303 	lsr.w	r3, r2, r3
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b10c:	e1b9      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b112:	e1b6      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b114:	4b68      	ldr	r3, [pc, #416]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b11c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b120:	d102      	bne.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b122:	4b67      	ldr	r3, [pc, #412]	@ (800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b126:	e1ac      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b12c:	e1a9      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b12e:	4b62      	ldr	r3, [pc, #392]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b13a:	d102      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b13c:	4b61      	ldr	r3, [pc, #388]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b140:	e19f      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b146:	e19c      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b14c:	e199      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b14e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b152:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b156:	430b      	orrs	r3, r1
 800b158:	d173      	bne.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b15a:	4b57      	ldr	r3, [pc, #348]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b15c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b15e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b162:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b16a:	d02f      	beq.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b172:	d863      	bhi.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b176:	2b00      	cmp	r3, #0
 800b178:	d004      	beq.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b180:	d012      	beq.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b182:	e05b      	b.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b184:	4b4c      	ldr	r3, [pc, #304]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b18c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b190:	d107      	bne.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b192:	f107 0318 	add.w	r3, r7, #24
 800b196:	4618      	mov	r0, r3
 800b198:	f000 f996 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1a0:	e16f      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1a6:	e16c      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1a8:	4b43      	ldr	r3, [pc, #268]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1b4:	d107      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1b6:	f107 030c 	add.w	r3, r7, #12
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fad8 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1c4:	e15d      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ca:	e15a      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1cc:	4b3a      	ldr	r3, [pc, #232]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1d6:	4b38      	ldr	r3, [pc, #224]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 0304 	and.w	r3, r3, #4
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d10c      	bne.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b1e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d109      	bne.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1e8:	4b33      	ldr	r3, [pc, #204]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	08db      	lsrs	r3, r3, #3
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	4a32      	ldr	r2, [pc, #200]	@ (800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b1f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1fa:	e01e      	b.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1fc:	4b2e      	ldr	r3, [pc, #184]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b208:	d106      	bne.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b20c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b210:	d102      	bne.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b212:	4b2b      	ldr	r3, [pc, #172]	@ (800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b214:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b216:	e010      	b.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b218:	4b27      	ldr	r3, [pc, #156]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b220:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b224:	d106      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b22c:	d102      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b22e:	4b25      	ldr	r3, [pc, #148]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b232:	e002      	b.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b238:	e123      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b23a:	e122      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b240:	e11f      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b242:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b246:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b24a:	430b      	orrs	r3, r1
 800b24c:	d13c      	bne.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b24e:	4b1a      	ldr	r3, [pc, #104]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b256:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b264:	d012      	beq.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b266:	e023      	b.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b268:	4b13      	ldr	r3, [pc, #76]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b270:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b274:	d107      	bne.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fbcc 	bl	800ba18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b284:	e0fd      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b28a:	e0fa      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b28c:	4b0a      	ldr	r3, [pc, #40]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b298:	d107      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b29a:	f107 0318 	add.w	r3, r7, #24
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 f912 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a8:	e0eb      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ae:	e0e8      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b4:	e0e5      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2b6:	bf00      	nop
 800b2b8:	58024400 	.word	0x58024400
 800b2bc:	03d09000 	.word	0x03d09000
 800b2c0:	003d0900 	.word	0x003d0900
 800b2c4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b2c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2cc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b2d0:	430b      	orrs	r3, r1
 800b2d2:	f040 8085 	bne.w	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b2d6:	4b6d      	ldr	r3, [pc, #436]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2da:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b2de:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2e6:	d06b      	beq.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2ee:	d874      	bhi.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2f6:	d056      	beq.n	800b3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2fe:	d86c      	bhi.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b302:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b306:	d03b      	beq.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b30e:	d864      	bhi.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b316:	d021      	beq.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b31e:	d85c      	bhi.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b322:	2b00      	cmp	r3, #0
 800b324:	d004      	beq.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b32c:	d004      	beq.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b32e:	e054      	b.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b330:	f000 f8b4 	bl	800b49c <HAL_RCCEx_GetD3PCLK1Freq>
 800b334:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b336:	e0a4      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b338:	4b54      	ldr	r3, [pc, #336]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b344:	d107      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b346:	f107 0318 	add.w	r3, r7, #24
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 f8bc 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b354:	e095      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b35a:	e092      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b35c:	4b4b      	ldr	r3, [pc, #300]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b368:	d107      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b36a:	f107 030c 	add.w	r3, r7, #12
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 f9fe 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b378:	e083      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b37e:	e080      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b380:	4b42      	ldr	r3, [pc, #264]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b04      	cmp	r3, #4
 800b38a:	d109      	bne.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b38c:	4b3f      	ldr	r3, [pc, #252]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	08db      	lsrs	r3, r3, #3
 800b392:	f003 0303 	and.w	r3, r3, #3
 800b396:	4a3e      	ldr	r2, [pc, #248]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b398:	fa22 f303 	lsr.w	r3, r2, r3
 800b39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b39e:	e070      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3a4:	e06d      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b3a6:	4b39      	ldr	r3, [pc, #228]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3b2:	d102      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b3b4:	4b37      	ldr	r3, [pc, #220]	@ (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3b8:	e063      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3be:	e060      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3c0:	4b32      	ldr	r3, [pc, #200]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3cc:	d102      	bne.n	800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b3ce:	4b32      	ldr	r3, [pc, #200]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3d2:	e056      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3d8:	e053      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3de:	e050      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b3e8:	430b      	orrs	r3, r1
 800b3ea:	d148      	bne.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b3ec:	4b27      	ldr	r3, [pc, #156]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b3f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3fc:	d02a      	beq.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b404:	d838      	bhi.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b412:	d00d      	beq.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b414:	e030      	b.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b416:	4b1d      	ldr	r3, [pc, #116]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b41e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b422:	d102      	bne.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b424:	4b1c      	ldr	r3, [pc, #112]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b428:	e02b      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b42e:	e028      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b430:	4b16      	ldr	r3, [pc, #88]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b438:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b43c:	d107      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b43e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b442:	4618      	mov	r0, r3
 800b444:	f000 fae8 	bl	800ba18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b44c:	e019      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b452:	e016      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b454:	4b0d      	ldr	r3, [pc, #52]	@ (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b45c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b460:	d107      	bne.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b462:	f107 0318 	add.w	r3, r7, #24
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f82e 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b470:	e007      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b476:	e004      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b47c:	e001      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b484:	4618      	mov	r0, r3
 800b486:	3740      	adds	r7, #64	@ 0x40
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	58024400 	.word	0x58024400
 800b490:	03d09000 	.word	0x03d09000
 800b494:	003d0900 	.word	0x003d0900
 800b498:	016e3600 	.word	0x016e3600

0800b49c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b4a0:	f7fe f92e 	bl	8009700 <HAL_RCC_GetHCLKFreq>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	4b06      	ldr	r3, [pc, #24]	@ (800b4c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	091b      	lsrs	r3, r3, #4
 800b4ac:	f003 0307 	and.w	r3, r3, #7
 800b4b0:	4904      	ldr	r1, [pc, #16]	@ (800b4c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b4b2:	5ccb      	ldrb	r3, [r1, r3]
 800b4b4:	f003 031f 	and.w	r3, r3, #31
 800b4b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	58024400 	.word	0x58024400
 800b4c4:	08011e14 	.word	0x08011e14

0800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b089      	sub	sp, #36	@ 0x24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4d0:	4ba1      	ldr	r3, [pc, #644]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d4:	f003 0303 	and.w	r3, r3, #3
 800b4d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b4da:	4b9f      	ldr	r3, [pc, #636]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4de:	0b1b      	lsrs	r3, r3, #12
 800b4e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b4e6:	4b9c      	ldr	r3, [pc, #624]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ea:	091b      	lsrs	r3, r3, #4
 800b4ec:	f003 0301 	and.w	r3, r3, #1
 800b4f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b4f2:	4b99      	ldr	r3, [pc, #612]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4f6:	08db      	lsrs	r3, r3, #3
 800b4f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	fb02 f303 	mul.w	r3, r2, r3
 800b502:	ee07 3a90 	vmov	s15, r3
 800b506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b50a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 8111 	beq.w	800b738 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	2b02      	cmp	r3, #2
 800b51a:	f000 8083 	beq.w	800b624 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	2b02      	cmp	r3, #2
 800b522:	f200 80a1 	bhi.w	800b668 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d003      	beq.n	800b534 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d056      	beq.n	800b5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b532:	e099      	b.n	800b668 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b534:	4b88      	ldr	r3, [pc, #544]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0320 	and.w	r3, r3, #32
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d02d      	beq.n	800b59c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b540:	4b85      	ldr	r3, [pc, #532]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	08db      	lsrs	r3, r3, #3
 800b546:	f003 0303 	and.w	r3, r3, #3
 800b54a:	4a84      	ldr	r2, [pc, #528]	@ (800b75c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b54c:	fa22 f303 	lsr.w	r3, r2, r3
 800b550:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	ee07 3a90 	vmov	s15, r3
 800b558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	ee07 3a90 	vmov	s15, r3
 800b562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b56a:	4b7b      	ldr	r3, [pc, #492]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b56c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b572:	ee07 3a90 	vmov	s15, r3
 800b576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b57a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b57e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b58a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b596:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b59a:	e087      	b.n	800b6ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	ee07 3a90 	vmov	s15, r3
 800b5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ae:	4b6a      	ldr	r3, [pc, #424]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5de:	e065      	b.n	800b6ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	ee07 3a90 	vmov	s15, r3
 800b5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b768 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f2:	4b59      	ldr	r3, [pc, #356]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b602:	ed97 6a03 	vldr	s12, [r7, #12]
 800b606:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b622:	e043      	b.n	800b6ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	ee07 3a90 	vmov	s15, r3
 800b62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b76c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b636:	4b48      	ldr	r3, [pc, #288]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b646:	ed97 6a03 	vldr	s12, [r7, #12]
 800b64a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b666:	e021      	b.n	800b6ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b672:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b768 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b67a:	4b37      	ldr	r3, [pc, #220]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b67c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b68a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b68e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b69a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b6ac:	4b2a      	ldr	r3, [pc, #168]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b0:	0a5b      	lsrs	r3, r3, #9
 800b6b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6d2:	ee17 2a90 	vmov	r2, s15
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b6da:	4b1f      	ldr	r3, [pc, #124]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6de:	0c1b      	lsrs	r3, r3, #16
 800b6e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6e4:	ee07 3a90 	vmov	s15, r3
 800b6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b700:	ee17 2a90 	vmov	r2, s15
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b708:	4b13      	ldr	r3, [pc, #76]	@ (800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b70c:	0e1b      	lsrs	r3, r3, #24
 800b70e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b71a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b71e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b722:	edd7 6a07 	vldr	s13, [r7, #28]
 800b726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b72a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b72e:	ee17 2a90 	vmov	r2, s15
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b736:	e008      	b.n	800b74a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	609a      	str	r2, [r3, #8]
}
 800b74a:	bf00      	nop
 800b74c:	3724      	adds	r7, #36	@ 0x24
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	58024400 	.word	0x58024400
 800b75c:	03d09000 	.word	0x03d09000
 800b760:	46000000 	.word	0x46000000
 800b764:	4c742400 	.word	0x4c742400
 800b768:	4a742400 	.word	0x4a742400
 800b76c:	4bb71b00 	.word	0x4bb71b00

0800b770 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b770:	b480      	push	{r7}
 800b772:	b089      	sub	sp, #36	@ 0x24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b778:	4ba1      	ldr	r3, [pc, #644]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b77c:	f003 0303 	and.w	r3, r3, #3
 800b780:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b782:	4b9f      	ldr	r3, [pc, #636]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b786:	0d1b      	lsrs	r3, r3, #20
 800b788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b78c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b78e:	4b9c      	ldr	r3, [pc, #624]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b792:	0a1b      	lsrs	r3, r3, #8
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b79a:	4b99      	ldr	r3, [pc, #612]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b79c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b79e:	08db      	lsrs	r3, r3, #3
 800b7a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
 800b7aa:	ee07 3a90 	vmov	s15, r3
 800b7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 8111 	beq.w	800b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	f000 8083 	beq.w	800b8cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	f200 80a1 	bhi.w	800b910 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d056      	beq.n	800b888 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b7da:	e099      	b.n	800b910 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7dc:	4b88      	ldr	r3, [pc, #544]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0320 	and.w	r3, r3, #32
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d02d      	beq.n	800b844 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7e8:	4b85      	ldr	r3, [pc, #532]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	08db      	lsrs	r3, r3, #3
 800b7ee:	f003 0303 	and.w	r3, r3, #3
 800b7f2:	4a84      	ldr	r2, [pc, #528]	@ (800ba04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b7f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	ee07 3a90 	vmov	s15, r3
 800b80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b80e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b812:	4b7b      	ldr	r3, [pc, #492]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b81a:	ee07 3a90 	vmov	s15, r3
 800b81e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b822:	ed97 6a03 	vldr	s12, [r7, #12]
 800b826:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ba08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b82a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b82e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b83a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b842:	e087      	b.n	800b954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	ee07 3a90 	vmov	s15, r3
 800b84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b856:	4b6a      	ldr	r3, [pc, #424]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85e:	ee07 3a90 	vmov	s15, r3
 800b862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b866:	ed97 6a03 	vldr	s12, [r7, #12]
 800b86a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ba08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b86e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b87a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b87e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b886:	e065      	b.n	800b954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	ee07 3a90 	vmov	s15, r3
 800b88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b892:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ba10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b89a:	4b59      	ldr	r3, [pc, #356]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a2:	ee07 3a90 	vmov	s15, r3
 800b8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ba08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ca:	e043      	b.n	800b954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8de:	4b48      	ldr	r3, [pc, #288]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e6:	ee07 3a90 	vmov	s15, r3
 800b8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ba08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b90e:	e021      	b.n	800b954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ba10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b922:	4b37      	ldr	r3, [pc, #220]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b932:	ed97 6a03 	vldr	s12, [r7, #12]
 800b936:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ba08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b952:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b954:	4b2a      	ldr	r3, [pc, #168]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b958:	0a5b      	lsrs	r3, r3, #9
 800b95a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b96a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b96e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b97a:	ee17 2a90 	vmov	r2, s15
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b982:	4b1f      	ldr	r3, [pc, #124]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b986:	0c1b      	lsrs	r3, r3, #16
 800b988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b98c:	ee07 3a90 	vmov	s15, r3
 800b990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b998:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b99c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a8:	ee17 2a90 	vmov	r2, s15
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b9b0:	4b13      	ldr	r3, [pc, #76]	@ (800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9b4:	0e1b      	lsrs	r3, r3, #24
 800b9b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9ba:	ee07 3a90 	vmov	s15, r3
 800b9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9d6:	ee17 2a90 	vmov	r2, s15
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b9de:	e008      	b.n	800b9f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	609a      	str	r2, [r3, #8]
}
 800b9f2:	bf00      	nop
 800b9f4:	3724      	adds	r7, #36	@ 0x24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	58024400 	.word	0x58024400
 800ba04:	03d09000 	.word	0x03d09000
 800ba08:	46000000 	.word	0x46000000
 800ba0c:	4c742400 	.word	0x4c742400
 800ba10:	4a742400 	.word	0x4a742400
 800ba14:	4bb71b00 	.word	0x4bb71b00

0800ba18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b089      	sub	sp, #36	@ 0x24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba20:	4ba0      	ldr	r3, [pc, #640]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba24:	f003 0303 	and.w	r3, r3, #3
 800ba28:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ba2a:	4b9e      	ldr	r3, [pc, #632]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba2e:	091b      	lsrs	r3, r3, #4
 800ba30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba34:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ba36:	4b9b      	ldr	r3, [pc, #620]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ba40:	4b98      	ldr	r3, [pc, #608]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba44:	08db      	lsrs	r3, r3, #3
 800ba46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	fb02 f303 	mul.w	r3, r2, r3
 800ba50:	ee07 3a90 	vmov	s15, r3
 800ba54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba58:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f000 8111 	beq.w	800bc86 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	f000 8083 	beq.w	800bb72 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	f200 80a1 	bhi.w	800bbb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d003      	beq.n	800ba82 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d056      	beq.n	800bb2e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ba80:	e099      	b.n	800bbb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba82:	4b88      	ldr	r3, [pc, #544]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 0320 	and.w	r3, r3, #32
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d02d      	beq.n	800baea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba8e:	4b85      	ldr	r3, [pc, #532]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	08db      	lsrs	r3, r3, #3
 800ba94:	f003 0303 	and.w	r3, r3, #3
 800ba98:	4a83      	ldr	r2, [pc, #524]	@ (800bca8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ba9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba9e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	ee07 3a90 	vmov	s15, r3
 800baa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	ee07 3a90 	vmov	s15, r3
 800bab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bab8:	4b7a      	ldr	r3, [pc, #488]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800babc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bac0:	ee07 3a90 	vmov	s15, r3
 800bac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bacc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800bcac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bad8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800badc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bae8:	e087      	b.n	800bbfa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	ee07 3a90 	vmov	s15, r3
 800baf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800baf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafc:	4b69      	ldr	r3, [pc, #420]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bafe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb04:	ee07 3a90 	vmov	s15, r3
 800bb08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb10:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800bcac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb2c:	e065      	b.n	800bbfa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	ee07 3a90 	vmov	s15, r3
 800bb34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb38:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800bcb4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bb3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb40:	4b58      	ldr	r3, [pc, #352]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb48:	ee07 3a90 	vmov	s15, r3
 800bb4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb50:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb54:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800bcac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb70:	e043      	b.n	800bbfa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	ee07 3a90 	vmov	s15, r3
 800bb78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800bcb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bb80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb84:	4b47      	ldr	r3, [pc, #284]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8c:	ee07 3a90 	vmov	s15, r3
 800bb90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb94:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb98:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bcac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbb4:	e021      	b.n	800bbfa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	ee07 3a90 	vmov	s15, r3
 800bbbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc8:	4b36      	ldr	r3, [pc, #216]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd0:	ee07 3a90 	vmov	s15, r3
 800bbd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbdc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bcac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbf8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bbfa:	4b2a      	ldr	r3, [pc, #168]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbfe:	0a5b      	lsrs	r3, r3, #9
 800bc00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc04:	ee07 3a90 	vmov	s15, r3
 800bc08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc14:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc20:	ee17 2a90 	vmov	r2, s15
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bc28:	4b1e      	ldr	r3, [pc, #120]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc2c:	0c1b      	lsrs	r3, r3, #16
 800bc2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc42:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc4e:	ee17 2a90 	vmov	r2, s15
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bc56:	4b13      	ldr	r3, [pc, #76]	@ (800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc5a:	0e1b      	lsrs	r3, r3, #24
 800bc5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc60:	ee07 3a90 	vmov	s15, r3
 800bc64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc70:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc7c:	ee17 2a90 	vmov	r2, s15
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc84:	e008      	b.n	800bc98 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	609a      	str	r2, [r3, #8]
}
 800bc98:	bf00      	nop
 800bc9a:	3724      	adds	r7, #36	@ 0x24
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	58024400 	.word	0x58024400
 800bca8:	03d09000 	.word	0x03d09000
 800bcac:	46000000 	.word	0x46000000
 800bcb0:	4c742400 	.word	0x4c742400
 800bcb4:	4a742400 	.word	0x4a742400
 800bcb8:	4bb71b00 	.word	0x4bb71b00

0800bcbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcca:	4b53      	ldr	r3, [pc, #332]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcce:	f003 0303 	and.w	r3, r3, #3
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	d101      	bne.n	800bcda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e099      	b.n	800be0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bcda:	4b4f      	ldr	r3, [pc, #316]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a4e      	ldr	r2, [pc, #312]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bce0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bce6:	f7f6 ff79 	bl	8002bdc <HAL_GetTick>
 800bcea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bcec:	e008      	b.n	800bd00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bcee:	f7f6 ff75 	bl	8002bdc <HAL_GetTick>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d901      	bls.n	800bd00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	e086      	b.n	800be0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd00:	4b45      	ldr	r3, [pc, #276]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1f0      	bne.n	800bcee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bd0c:	4b42      	ldr	r3, [pc, #264]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd10:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	031b      	lsls	r3, r3, #12
 800bd1a:	493f      	ldr	r1, [pc, #252]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	628b      	str	r3, [r1, #40]	@ 0x28
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	025b      	lsls	r3, r3, #9
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	431a      	orrs	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	041b      	lsls	r3, r3, #16
 800bd3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd42:	431a      	orrs	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	061b      	lsls	r3, r3, #24
 800bd4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd50:	4931      	ldr	r1, [pc, #196]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd56:	4b30      	ldr	r3, [pc, #192]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	492d      	ldr	r1, [pc, #180]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd64:	4313      	orrs	r3, r2
 800bd66:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd68:	4b2b      	ldr	r3, [pc, #172]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6c:	f023 0220 	bic.w	r2, r3, #32
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	4928      	ldr	r1, [pc, #160]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd76:	4313      	orrs	r3, r2
 800bd78:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd7a:	4b27      	ldr	r3, [pc, #156]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd7e:	4a26      	ldr	r2, [pc, #152]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd80:	f023 0310 	bic.w	r3, r3, #16
 800bd84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd86:	4b24      	ldr	r3, [pc, #144]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd8a:	4b24      	ldr	r3, [pc, #144]	@ (800be1c <RCCEx_PLL2_Config+0x160>)
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	69d2      	ldr	r2, [r2, #28]
 800bd92:	00d2      	lsls	r2, r2, #3
 800bd94:	4920      	ldr	r1, [pc, #128]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bd9a:	4b1f      	ldr	r3, [pc, #124]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bd9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd9e:	4a1e      	ldr	r2, [pc, #120]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bda0:	f043 0310 	orr.w	r3, r3, #16
 800bda4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d106      	bne.n	800bdba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bdac:	4b1a      	ldr	r3, [pc, #104]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bdae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb0:	4a19      	ldr	r2, [pc, #100]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bdb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bdb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bdb8:	e00f      	b.n	800bdda <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d106      	bne.n	800bdce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bdc0:	4b15      	ldr	r3, [pc, #84]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bdc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc4:	4a14      	ldr	r2, [pc, #80]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bdc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bdca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bdcc:	e005      	b.n	800bdda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bdce:	4b12      	ldr	r3, [pc, #72]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bdd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd2:	4a11      	ldr	r2, [pc, #68]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bdd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bdd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bdda:	4b0f      	ldr	r3, [pc, #60]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a0e      	ldr	r2, [pc, #56]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800bde0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bde4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bde6:	f7f6 fef9 	bl	8002bdc <HAL_GetTick>
 800bdea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bdec:	e008      	b.n	800be00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bdee:	f7f6 fef5 	bl	8002bdc <HAL_GetTick>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d901      	bls.n	800be00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e006      	b.n	800be0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be00:	4b05      	ldr	r3, [pc, #20]	@ (800be18 <RCCEx_PLL2_Config+0x15c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d0f0      	beq.n	800bdee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	58024400 	.word	0x58024400
 800be1c:	ffff0007 	.word	0xffff0007

0800be20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be2e:	4b53      	ldr	r3, [pc, #332]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800be30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be32:	f003 0303 	and.w	r3, r3, #3
 800be36:	2b03      	cmp	r3, #3
 800be38:	d101      	bne.n	800be3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	e099      	b.n	800bf72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800be3e:	4b4f      	ldr	r3, [pc, #316]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a4e      	ldr	r2, [pc, #312]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800be44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be4a:	f7f6 fec7 	bl	8002bdc <HAL_GetTick>
 800be4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be50:	e008      	b.n	800be64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be52:	f7f6 fec3 	bl	8002bdc <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d901      	bls.n	800be64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be60:	2303      	movs	r3, #3
 800be62:	e086      	b.n	800bf72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be64:	4b45      	ldr	r3, [pc, #276]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1f0      	bne.n	800be52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be70:	4b42      	ldr	r3, [pc, #264]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800be72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	051b      	lsls	r3, r3, #20
 800be7e:	493f      	ldr	r1, [pc, #252]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800be80:	4313      	orrs	r3, r2
 800be82:	628b      	str	r3, [r1, #40]	@ 0x28
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	3b01      	subs	r3, #1
 800be8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	3b01      	subs	r3, #1
 800be94:	025b      	lsls	r3, r3, #9
 800be96:	b29b      	uxth	r3, r3
 800be98:	431a      	orrs	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	041b      	lsls	r3, r3, #16
 800bea2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bea6:	431a      	orrs	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	3b01      	subs	r3, #1
 800beae:	061b      	lsls	r3, r3, #24
 800beb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800beb4:	4931      	ldr	r1, [pc, #196]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800beb6:	4313      	orrs	r3, r2
 800beb8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800beba:	4b30      	ldr	r3, [pc, #192]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bebe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	492d      	ldr	r1, [pc, #180]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bec8:	4313      	orrs	r3, r2
 800beca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800becc:	4b2b      	ldr	r3, [pc, #172]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	4928      	ldr	r1, [pc, #160]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800beda:	4313      	orrs	r3, r2
 800bedc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bede:	4b27      	ldr	r3, [pc, #156]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee2:	4a26      	ldr	r2, [pc, #152]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800beea:	4b24      	ldr	r3, [pc, #144]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800beec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800beee:	4b24      	ldr	r3, [pc, #144]	@ (800bf80 <RCCEx_PLL3_Config+0x160>)
 800bef0:	4013      	ands	r3, r2
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	69d2      	ldr	r2, [r2, #28]
 800bef6:	00d2      	lsls	r2, r2, #3
 800bef8:	4920      	ldr	r1, [pc, #128]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800befa:	4313      	orrs	r3, r2
 800befc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800befe:	4b1f      	ldr	r3, [pc, #124]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf02:	4a1e      	ldr	r2, [pc, #120]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d106      	bne.n	800bf1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bf10:	4b1a      	ldr	r3, [pc, #104]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf14:	4a19      	ldr	r2, [pc, #100]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bf1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf1c:	e00f      	b.n	800bf3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d106      	bne.n	800bf32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bf24:	4b15      	ldr	r3, [pc, #84]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf28:	4a14      	ldr	r2, [pc, #80]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bf2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf30:	e005      	b.n	800bf3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bf32:	4b12      	ldr	r3, [pc, #72]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf36:	4a11      	ldr	r2, [pc, #68]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bf3e:	4b0f      	ldr	r3, [pc, #60]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a0e      	ldr	r2, [pc, #56]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf4a:	f7f6 fe47 	bl	8002bdc <HAL_GetTick>
 800bf4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf50:	e008      	b.n	800bf64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf52:	f7f6 fe43 	bl	8002bdc <HAL_GetTick>
 800bf56:	4602      	mov	r2, r0
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	1ad3      	subs	r3, r2, r3
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d901      	bls.n	800bf64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e006      	b.n	800bf72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf64:	4b05      	ldr	r3, [pc, #20]	@ (800bf7c <RCCEx_PLL3_Config+0x15c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d0f0      	beq.n	800bf52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	58024400 	.word	0x58024400
 800bf80:	ffff0007 	.word	0xffff0007

0800bf84 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08a      	sub	sp, #40	@ 0x28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d101      	bne.n	800bf96 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e075      	b.n	800c082 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d105      	bne.n	800bfae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7f6 fa75 	bl	8002498 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2204      	movs	r2, #4
 800bfb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f868 	bl	800c08c <HAL_SD_InitCard>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e05d      	b.n	800c082 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bfc6:	f107 0308 	add.w	r3, r7, #8
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fdaf 	bl	800cb30 <HAL_SD_GetCardStatus>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d001      	beq.n	800bfdc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e052      	b.n	800c082 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bfdc:	7e3b      	ldrb	r3, [r7, #24]
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bfe2:	7e7b      	ldrb	r3, [r7, #25]
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d10a      	bne.n	800c006 <HAL_SD_Init+0x82>
 800bff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d102      	bne.n	800bffc <HAL_SD_Init+0x78>
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d004      	beq.n	800c006 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c002:	659a      	str	r2, [r3, #88]	@ 0x58
 800c004:	e00b      	b.n	800c01e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d104      	bne.n	800c018 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c014:	659a      	str	r2, [r3, #88]	@ 0x58
 800c016:	e002      	b.n	800c01e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fe6d 	bl	800cd04 <HAL_SD_ConfigWideBusOperation>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e026      	b.n	800c082 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c034:	f7f6 fdd2 	bl	8002bdc <HAL_GetTick>
 800c038:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c03a:	e011      	b.n	800c060 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c03c:	f7f6 fdce 	bl	8002bdc <HAL_GetTick>
 800c040:	4602      	mov	r2, r0
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04a:	d109      	bne.n	800c060 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c052:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e010      	b.n	800c082 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 ff61 	bl	800cf28 <HAL_SD_GetCardState>
 800c066:	4603      	mov	r3, r0
 800c068:	2b04      	cmp	r3, #4
 800c06a:	d1e7      	bne.n	800c03c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	3728      	adds	r7, #40	@ 0x28
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c08c:	b590      	push	{r4, r7, lr}
 800c08e:	b08d      	sub	sp, #52	@ 0x34
 800c090:	af02      	add	r7, sp, #8
 800c092:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c094:	2300      	movs	r3, #0
 800c096:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c098:	2300      	movs	r3, #0
 800c09a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c09c:	2300      	movs	r3, #0
 800c09e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c0a4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c0a8:	f04f 0100 	mov.w	r1, #0
 800c0ac:	f7fe fd24 	bl	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c0b0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d109      	bne.n	800c0cc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c0c6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e070      	b.n	800c1ae <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ce:	0a1b      	lsrs	r3, r3, #8
 800c0d0:	4a39      	ldr	r2, [pc, #228]	@ (800c1b8 <HAL_SD_InitCard+0x12c>)
 800c0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d6:	091b      	lsrs	r3, r3, #4
 800c0d8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681c      	ldr	r4, [r3, #0]
 800c0de:	466a      	mov	r2, sp
 800c0e0:	f107 0318 	add.w	r3, r7, #24
 800c0e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0e8:	e882 0003 	stmia.w	r2, {r0, r1}
 800c0ec:	f107 030c 	add.w	r3, r7, #12
 800c0f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f003 fffe 	bl	80100f4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f004 f841 	bl	8010184 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d005      	beq.n	800c114 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c112:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c116:	2b00      	cmp	r3, #0
 800c118:	d007      	beq.n	800c12a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c11a:	4a28      	ldr	r2, [pc, #160]	@ (800c1bc <HAL_SD_InitCard+0x130>)
 800c11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c122:	3301      	adds	r3, #1
 800c124:	4618      	mov	r0, r3
 800c126:	f7f6 fd65 	bl	8002bf4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 ffea 	bl	800d104 <SD_PowerON>
 800c130:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00b      	beq.n	800c150 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	431a      	orrs	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e02e      	b.n	800c1ae <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 ff09 	bl	800cf68 <SD_InitCard>
 800c156:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00b      	beq.n	800c176 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	431a      	orrs	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	e01b      	b.n	800c1ae <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c17e:	4618      	mov	r0, r3
 800c180:	f004 f896 	bl	80102b0 <SDMMC_CmdBlockLength>
 800c184:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00f      	beq.n	800c1ac <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a0b      	ldr	r2, [pc, #44]	@ (800c1c0 <HAL_SD_InitCard+0x134>)
 800c192:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	431a      	orrs	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e000      	b.n	800c1ae <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	372c      	adds	r7, #44	@ 0x2c
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd90      	pop	{r4, r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	014f8b59 	.word	0x014f8b59
 800c1bc:	00012110 	.word	0x00012110
 800c1c0:	1fe00fff 	.word	0x1fe00fff

0800c1c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08c      	sub	sp, #48	@ 0x30
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d107      	bne.n	800c1ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e08d      	b.n	800c308 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	f040 8086 	bne.w	800c306 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	441a      	add	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d907      	bls.n	800c21e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c212:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e074      	b.n	800c308 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2203      	movs	r2, #3
 800c222:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2200      	movs	r2, #0
 800c22c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	025a      	lsls	r2, r3, #9
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c240:	2b01      	cmp	r3, #1
 800c242:	d002      	beq.n	800c24a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c246:	025b      	lsls	r3, r3, #9
 800c248:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c24a:	f04f 33ff 	mov.w	r3, #4294967295
 800c24e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	025b      	lsls	r3, r3, #9
 800c254:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c256:	2390      	movs	r3, #144	@ 0x90
 800c258:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c25a:	2302      	movs	r3, #2
 800c25c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c25e:	2300      	movs	r3, #0
 800c260:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c262:	2300      	movs	r3, #0
 800c264:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f107 0210 	add.w	r2, r7, #16
 800c26e:	4611      	mov	r1, r2
 800c270:	4618      	mov	r0, r3
 800c272:	f003 fff1 	bl	8010258 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68da      	ldr	r2, [r3, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c284:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2201      	movs	r2, #1
 800c294:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d90a      	bls.n	800c2b2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2282      	movs	r2, #130	@ 0x82
 800c2a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f004 f847 	bl	801033c <SDMMC_CmdReadMultiBlock>
 800c2ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c2b0:	e009      	b.n	800c2c6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2281      	movs	r2, #129	@ 0x81
 800c2b6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f004 f819 	bl	80102f6 <SDMMC_CmdReadSingleBlock>
 800c2c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d012      	beq.n	800c2f2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a0f      	ldr	r2, [pc, #60]	@ (800c310 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c2d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2da:	431a      	orrs	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e00a      	b.n	800c308 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c300:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	e000      	b.n	800c308 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c306:	2302      	movs	r3, #2
  }
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3730      	adds	r7, #48	@ 0x30
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	1fe00fff 	.word	0x1fe00fff

0800c314 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b08c      	sub	sp, #48	@ 0x30
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d107      	bne.n	800c33c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c330:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	e08d      	b.n	800c458 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b01      	cmp	r3, #1
 800c346:	f040 8086 	bne.w	800c456 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	441a      	add	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d907      	bls.n	800c36e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c362:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e074      	b.n	800c458 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2203      	movs	r2, #3
 800c372:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2200      	movs	r2, #0
 800c37c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	025a      	lsls	r2, r3, #9
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c390:	2b01      	cmp	r3, #1
 800c392:	d002      	beq.n	800c39a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c396:	025b      	lsls	r3, r3, #9
 800c398:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c39a:	f04f 33ff 	mov.w	r3, #4294967295
 800c39e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	025b      	lsls	r3, r3, #9
 800c3a4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c3a6:	2390      	movs	r3, #144	@ 0x90
 800c3a8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f107 0210 	add.w	r2, r7, #16
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f003 ff49 	bl	8010258 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68da      	ldr	r2, [r3, #12]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3d4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d90a      	bls.n	800c402 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	22a0      	movs	r2, #160	@ 0xa0
 800c3f0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f003 ffe5 	bl	80103c8 <SDMMC_CmdWriteMultiBlock>
 800c3fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c400:	e009      	b.n	800c416 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2290      	movs	r2, #144	@ 0x90
 800c406:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c40e:	4618      	mov	r0, r3
 800c410:	f003 ffb7 	bl	8010382 <SDMMC_CmdWriteSingleBlock>
 800c414:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d012      	beq.n	800c442 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a0f      	ldr	r2, [pc, #60]	@ (800c460 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c422:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42a:	431a      	orrs	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e00a      	b.n	800c458 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c450:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	e000      	b.n	800c458 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c456:	2302      	movs	r3, #2
  }
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3730      	adds	r7, #48	@ 0x30
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	1fe00fff 	.word	0x1fe00fff

0800c464 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c470:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d008      	beq.n	800c492 <HAL_SD_IRQHandler+0x2e>
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f003 0308 	and.w	r3, r3, #8
 800c486:	2b00      	cmp	r3, #0
 800c488:	d003      	beq.n	800c492 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f001 f926 	bl	800d6dc <SD_Read_IT>
 800c490:	e19a      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 80ac 	beq.w	800c5fa <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c4aa:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	4b59      	ldr	r3, [pc, #356]	@ (800c61c <HAL_SD_IRQHandler+0x1b8>)
 800c4b8:	400b      	ands	r3, r1
 800c4ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c4ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68da      	ldr	r2, [r3, #12]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c4da:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f003 0308 	and.w	r3, r3, #8
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d038      	beq.n	800c558 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f003 0302 	and.w	r3, r3, #2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d104      	bne.n	800c4fa <HAL_SD_IRQHandler+0x96>
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f003 0320 	and.w	r3, r3, #32
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d011      	beq.n	800c51e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f003 ff86 	bl	8010410 <SDMMC_CmdStopTransfer>
 800c504:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d008      	beq.n	800c51e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	431a      	orrs	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f95b 	bl	800c7d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a3f      	ldr	r2, [pc, #252]	@ (800c620 <HAL_SD_IRQHandler+0x1bc>)
 800c524:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d104      	bne.n	800c548 <HAL_SD_IRQHandler+0xe4>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f003 0302 	and.w	r3, r3, #2
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f004 fc31 	bl	8010db0 <HAL_SD_RxCpltCallback>
 800c54e:	e13b      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f004 fc23 	bl	8010d9c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c556:	e137      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f000 8132 	beq.w	800c7c8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2200      	movs	r2, #0
 800c56a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2200      	movs	r2, #0
 800c572:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2200      	movs	r2, #0
 800c57a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f003 0302 	and.w	r3, r3, #2
 800c582:	2b00      	cmp	r3, #0
 800c584:	d104      	bne.n	800c590 <HAL_SD_IRQHandler+0x12c>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f003 0320 	and.w	r3, r3, #32
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d011      	beq.n	800c5b4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4618      	mov	r0, r3
 800c596:	f003 ff3b 	bl	8010410 <SDMMC_CmdStopTransfer>
 800c59a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d008      	beq.n	800c5b4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	431a      	orrs	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f910 	bl	800c7d4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f003 0310 	and.w	r3, r3, #16
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d104      	bne.n	800c5d6 <HAL_SD_IRQHandler+0x172>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f003 0320 	and.w	r3, r3, #32
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f004 fbe0 	bl	8010d9c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d105      	bne.n	800c5f2 <HAL_SD_IRQHandler+0x18e>
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f003 0302 	and.w	r3, r3, #2
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 80eb 	beq.w	800c7c8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f004 fbdc 	bl	8010db0 <HAL_SD_RxCpltCallback>
}
 800c5f8:	e0e6      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00d      	beq.n	800c624 <HAL_SD_IRQHandler+0x1c0>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f003 0308 	and.w	r3, r3, #8
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d008      	beq.n	800c624 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f001 f8a8 	bl	800d768 <SD_Write_IT>
 800c618:	e0d6      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
 800c61a:	bf00      	nop
 800c61c:	ffff3ec5 	.word	0xffff3ec5
 800c620:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c62a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 809d 	beq.w	800c76e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c63a:	f003 0302 	and.w	r3, r3, #2
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d005      	beq.n	800c64e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c646:	f043 0202 	orr.w	r2, r3, #2
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c654:	f003 0308 	and.w	r3, r3, #8
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d005      	beq.n	800c668 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c660:	f043 0208 	orr.w	r2, r3, #8
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c66e:	f003 0320 	and.w	r3, r3, #32
 800c672:	2b00      	cmp	r3, #0
 800c674:	d005      	beq.n	800c682 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67a:	f043 0220 	orr.w	r2, r3, #32
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c688:	f003 0310 	and.w	r3, r3, #16
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d005      	beq.n	800c69c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c694:	f043 0210 	orr.w	r2, r3, #16
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a4b      	ldr	r2, [pc, #300]	@ (800c7d0 <HAL_SD_IRQHandler+0x36c>)
 800c6a2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c6b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68da      	ldr	r2, [r3, #12]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c6c2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c6d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68da      	ldr	r2, [r3, #12]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c6e2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f003 fe91 	bl	8010410 <SDMMC_CmdStopTransfer>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	68da      	ldr	r2, [r3, #12]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c708:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c712:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f003 0308 	and.w	r3, r3, #8
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00a      	beq.n	800c734 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f851 	bl	800c7d4 <HAL_SD_ErrorCallback>
}
 800c732:	e049      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d044      	beq.n	800c7c8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c742:	2b00      	cmp	r3, #0
 800c744:	d040      	beq.n	800c7c8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c754:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2200      	movs	r2, #0
 800c75c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2201      	movs	r2, #1
 800c762:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f834 	bl	800c7d4 <HAL_SD_ErrorCallback>
}
 800c76c:	e02c      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d025      	beq.n	800c7c8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c784:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c78c:	f003 0304 	and.w	r3, r3, #4
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10c      	bne.n	800c7ae <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f003 0320 	and.w	r3, r3, #32
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d003      	beq.n	800c7a6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f001 f84a 	bl	800d838 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c7a4:	e010      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f001 f832 	bl	800d810 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c7ac:	e00c      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f003 0320 	and.w	r3, r3, #32
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d003      	beq.n	800c7c0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 f833 	bl	800d824 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c7be:	e003      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f001 f81b 	bl	800d7fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c7c6:	e7ff      	b.n	800c7c8 <HAL_SD_IRQHandler+0x364>
 800c7c8:	bf00      	nop
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	18000f3a 	.word	0x18000f3a

0800c7d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c7dc:	bf00      	nop
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7f6:	0f9b      	lsrs	r3, r3, #30
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c802:	0e9b      	lsrs	r3, r3, #26
 800c804:	b2db      	uxtb	r3, r3
 800c806:	f003 030f 	and.w	r3, r3, #15
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c814:	0e1b      	lsrs	r3, r3, #24
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 0303 	and.w	r3, r3, #3
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c826:	0c1b      	lsrs	r3, r3, #16
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c832:	0a1b      	lsrs	r3, r3, #8
 800c834:	b2da      	uxtb	r2, r3
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c848:	0d1b      	lsrs	r3, r3, #20
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c854:	0c1b      	lsrs	r3, r3, #16
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f003 030f 	and.w	r3, r3, #15
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c866:	0bdb      	lsrs	r3, r3, #15
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c878:	0b9b      	lsrs	r3, r3, #14
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	b2da      	uxtb	r2, r3
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c88a:	0b5b      	lsrs	r3, r3, #13
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	b2da      	uxtb	r2, r3
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c89c:	0b1b      	lsrs	r3, r3, #12
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d163      	bne.n	800c980 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8bc:	009a      	lsls	r2, r3, #2
 800c8be:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c8c8:	0f92      	lsrs	r2, r2, #30
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8d4:	0edb      	lsrs	r3, r3, #27
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	f003 0307 	and.w	r3, r3, #7
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8e6:	0e1b      	lsrs	r3, r3, #24
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	f003 0307 	and.w	r3, r3, #7
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8f8:	0d5b      	lsrs	r3, r3, #21
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	f003 0307 	and.w	r3, r3, #7
 800c900:	b2da      	uxtb	r2, r3
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c90a:	0c9b      	lsrs	r3, r3, #18
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	f003 0307 	and.w	r3, r3, #7
 800c912:	b2da      	uxtb	r2, r3
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c91c:	0bdb      	lsrs	r3, r3, #15
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	f003 0307 	and.w	r3, r3, #7
 800c924:	b2da      	uxtb	r2, r3
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	7e1b      	ldrb	r3, [r3, #24]
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	f003 0307 	and.w	r3, r3, #7
 800c93e:	3302      	adds	r3, #2
 800c940:	2201      	movs	r2, #1
 800c942:	fa02 f303 	lsl.w	r3, r2, r3
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c94a:	fb03 f202 	mul.w	r2, r3, r2
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	7a1b      	ldrb	r3, [r3, #8]
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f003 030f 	and.w	r3, r3, #15
 800c95c:	2201      	movs	r2, #1
 800c95e:	409a      	lsls	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c96c:	0a52      	lsrs	r2, r2, #9
 800c96e:	fb03 f202 	mul.w	r2, r3, r2
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c97c:	655a      	str	r2, [r3, #84]	@ 0x54
 800c97e:	e031      	b.n	800c9e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c984:	2b01      	cmp	r3, #1
 800c986:	d11d      	bne.n	800c9c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c98c:	041b      	lsls	r3, r3, #16
 800c98e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c996:	0c1b      	lsrs	r3, r3, #16
 800c998:	431a      	orrs	r2, r3
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	029a      	lsls	r2, r3, #10
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	655a      	str	r2, [r3, #84]	@ 0x54
 800c9c2:	e00f      	b.n	800c9e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a58      	ldr	r2, [pc, #352]	@ (800cb2c <HAL_SD_GetCardCSD+0x344>)
 800c9ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e09d      	b.n	800cb20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9e8:	0b9b      	lsrs	r3, r3, #14
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	f003 0301 	and.w	r3, r3, #1
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9fa:	09db      	lsrs	r3, r3, #7
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca1c:	0fdb      	lsrs	r3, r3, #31
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca28:	0f5b      	lsrs	r3, r3, #29
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	f003 0303 	and.w	r3, r3, #3
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca3a:	0e9b      	lsrs	r3, r3, #26
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	f003 0307 	and.w	r3, r3, #7
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca4c:	0d9b      	lsrs	r3, r3, #22
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	f003 030f 	and.w	r3, r3, #15
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca5e:	0d5b      	lsrs	r3, r3, #21
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	f003 0301 	and.w	r3, r3, #1
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca7a:	0c1b      	lsrs	r3, r3, #16
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	f003 0301 	and.w	r3, r3, #1
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca8e:	0bdb      	lsrs	r3, r3, #15
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	f003 0301 	and.w	r3, r3, #1
 800ca96:	b2da      	uxtb	r2, r3
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caa2:	0b9b      	lsrs	r3, r3, #14
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	f003 0301 	and.w	r3, r3, #1
 800caaa:	b2da      	uxtb	r2, r3
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cab6:	0b5b      	lsrs	r3, r3, #13
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	f003 0301 	and.w	r3, r3, #1
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caca:	0b1b      	lsrs	r3, r3, #12
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cade:	0a9b      	lsrs	r3, r3, #10
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	f003 0303 	and.w	r3, r3, #3
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caf2:	0a1b      	lsrs	r3, r3, #8
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	f003 0303 	and.w	r3, r3, #3
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb06:	085b      	lsrs	r3, r3, #1
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	1fe00fff 	.word	0x1fe00fff

0800cb30 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b094      	sub	sp, #80	@ 0x50
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b03      	cmp	r3, #3
 800cb4a:	d101      	bne.n	800cb50 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e0a7      	b.n	800cca0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cb50:	f107 0308 	add.w	r3, r7, #8
 800cb54:	4619      	mov	r1, r3
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fb62 	bl	800d220 <SD_SendSDStatus>
 800cb5c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d011      	beq.n	800cb88 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a4f      	ldr	r2, [pc, #316]	@ (800cca8 <HAL_SD_GetCardStatus+0x178>)
 800cb6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb72:	431a      	orrs	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800cb86:	e070      	b.n	800cc6a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	099b      	lsrs	r3, r3, #6
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	f003 0303 	and.w	r3, r3, #3
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	095b      	lsrs	r3, r3, #5
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	0a1b      	lsrs	r3, r3, #8
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	0e1b      	lsrs	r3, r3, #24
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	b29a      	uxth	r2, r3
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	061a      	lsls	r2, r3, #24
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	021b      	lsls	r3, r3, #8
 800cbca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cbce:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	0a1b      	lsrs	r3, r3, #8
 800cbd4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbd8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	0e1b      	lsrs	r3, r3, #24
 800cbde:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	b2da      	uxtb	r2, r3
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	0a1b      	lsrs	r3, r3, #8
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	0d1b      	lsrs	r3, r3, #20
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	f003 030f 	and.w	r3, r3, #15
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	0c1b      	lsrs	r3, r3, #16
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	0a9b      	lsrs	r3, r3, #10
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc2c:	b2da      	uxtb	r2, r3
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	0a1b      	lsrs	r3, r3, #8
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	f003 0303 	and.w	r3, r3, #3
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	091b      	lsrs	r3, r3, #4
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	f003 030f 	and.w	r3, r3, #15
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	f003 030f 	and.w	r3, r3, #15
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	0e1b      	lsrs	r3, r3, #24
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cc72:	4618      	mov	r0, r3
 800cc74:	f003 fb1c 	bl	80102b0 <SDMMC_CmdBlockLength>
 800cc78:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00d      	beq.n	800cc9c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a08      	ldr	r2, [pc, #32]	@ (800cca8 <HAL_SD_GetCardStatus+0x178>)
 800cc86:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc8c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2201      	movs	r2, #1
 800cc92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800cc9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3750      	adds	r7, #80	@ 0x50
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	1fe00fff 	.word	0x1fe00fff

0800ccac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cd04:	b590      	push	{r4, r7, lr}
 800cd06:	b08d      	sub	sp, #52	@ 0x34
 800cd08:	af02      	add	r7, sp, #8
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2203      	movs	r2, #3
 800cd18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd20:	2b03      	cmp	r3, #3
 800cd22:	d02e      	beq.n	800cd82 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd2a:	d106      	bne.n	800cd3a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd38:	e029      	b.n	800cd8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd40:	d10a      	bne.n	800cd58 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fb64 	bl	800d410 <SD_WideBus_Enable>
 800cd48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	431a      	orrs	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd56:	e01a      	b.n	800cd8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10a      	bne.n	800cd74 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 fba1 	bl	800d4a6 <SD_WideBus_Disable>
 800cd64:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	431a      	orrs	r2, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd72:	e00c      	b.n	800cd8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd78:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd80:	e005      	b.n	800cd8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd86:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d007      	beq.n	800cda6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a5f      	ldr	r2, [pc, #380]	@ (800cf18 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cd9c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cda4:	e096      	b.n	800ced4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cda6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800cdaa:	f04f 0100 	mov.w	r1, #0
 800cdae:	f7fd fea3 	bl	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800cdb2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f000 8083 	beq.w	800cec2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	695a      	ldr	r2, [r3, #20]
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	4950      	ldr	r1, [pc, #320]	@ (800cf1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800cdda:	fba1 1303 	umull	r1, r3, r1, r3
 800cdde:	0e1b      	lsrs	r3, r3, #24
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d303      	bcc.n	800cdec <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	695b      	ldr	r3, [r3, #20]
 800cde8:	61bb      	str	r3, [r7, #24]
 800cdea:	e05a      	b.n	800cea2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdf4:	d103      	bne.n	800cdfe <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	695b      	ldr	r3, [r3, #20]
 800cdfa:	61bb      	str	r3, [r7, #24]
 800cdfc:	e051      	b.n	800cea2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce06:	d126      	bne.n	800ce56 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10e      	bne.n	800ce2e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	4a43      	ldr	r2, [pc, #268]	@ (800cf20 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d906      	bls.n	800ce26 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	4a40      	ldr	r2, [pc, #256]	@ (800cf1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ce20:	0e5b      	lsrs	r3, r3, #25
 800ce22:	61bb      	str	r3, [r7, #24]
 800ce24:	e03d      	b.n	800cea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	61bb      	str	r3, [r7, #24]
 800ce2c:	e039      	b.n	800cea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	695b      	ldr	r3, [r3, #20]
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	69fa      	ldr	r2, [r7, #28]
 800ce36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce3a:	4a39      	ldr	r2, [pc, #228]	@ (800cf20 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d906      	bls.n	800ce4e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	4a36      	ldr	r2, [pc, #216]	@ (800cf1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce44:	fba2 2303 	umull	r2, r3, r2, r3
 800ce48:	0e5b      	lsrs	r3, r3, #25
 800ce4a:	61bb      	str	r3, [r7, #24]
 800ce4c:	e029      	b.n	800cea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	695b      	ldr	r3, [r3, #20]
 800ce52:	61bb      	str	r3, [r7, #24]
 800ce54:	e025      	b.n	800cea2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	695b      	ldr	r3, [r3, #20]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10e      	bne.n	800ce7c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	4a30      	ldr	r2, [pc, #192]	@ (800cf24 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d906      	bls.n	800ce74 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	4a2c      	ldr	r2, [pc, #176]	@ (800cf1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6e:	0e1b      	lsrs	r3, r3, #24
 800ce70:	61bb      	str	r3, [r7, #24]
 800ce72:	e016      	b.n	800cea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	61bb      	str	r3, [r7, #24]
 800ce7a:	e012      	b.n	800cea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	005b      	lsls	r3, r3, #1
 800ce82:	69fa      	ldr	r2, [r7, #28]
 800ce84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce88:	4a26      	ldr	r2, [pc, #152]	@ (800cf24 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d906      	bls.n	800ce9c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	4a22      	ldr	r2, [pc, #136]	@ (800cf1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce92:	fba2 2303 	umull	r2, r3, r2, r3
 800ce96:	0e1b      	lsrs	r3, r3, #24
 800ce98:	61bb      	str	r3, [r7, #24]
 800ce9a:	e002      	b.n	800cea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681c      	ldr	r4, [r3, #0]
 800cea6:	466a      	mov	r2, sp
 800cea8:	f107 0314 	add.w	r3, r7, #20
 800ceac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ceb0:	e882 0003 	stmia.w	r2, {r0, r1}
 800ceb4:	f107 0308 	add.w	r3, r7, #8
 800ceb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ceba:	4620      	mov	r0, r4
 800cebc:	f003 f91a 	bl	80100f4 <SDMMC_Init>
 800cec0:	e008      	b.n	800ced4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cec6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cedc:	4618      	mov	r0, r3
 800cede:	f003 f9e7 	bl	80102b0 <SDMMC_CmdBlockLength>
 800cee2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00c      	beq.n	800cf04 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a0a      	ldr	r2, [pc, #40]	@ (800cf18 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cef0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	431a      	orrs	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cf0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	372c      	adds	r7, #44	@ 0x2c
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd90      	pop	{r4, r7, pc}
 800cf18:	1fe00fff 	.word	0x1fe00fff
 800cf1c:	55e63b89 	.word	0x55e63b89
 800cf20:	02faf080 	.word	0x02faf080
 800cf24:	017d7840 	.word	0x017d7840

0800cf28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cf34:	f107 030c 	add.w	r3, r7, #12
 800cf38:	4619      	mov	r1, r3
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fa40 	bl	800d3c0 <SD_SendStatus>
 800cf40:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d005      	beq.n	800cf54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	0a5b      	lsrs	r3, r3, #9
 800cf58:	f003 030f 	and.w	r3, r3, #15
 800cf5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cf5e:	693b      	ldr	r3, [r7, #16]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b090      	sub	sp, #64	@ 0x40
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cf70:	2300      	movs	r3, #0
 800cf72:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cf74:	f7f5 fe32 	bl	8002bdc <HAL_GetTick>
 800cf78:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f003 f911 	bl	80101a6 <SDMMC_GetPowerState>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d102      	bne.n	800cf90 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cf8a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cf8e:	e0b5      	b.n	800d0fc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf94:	2b03      	cmp	r3, #3
 800cf96:	d02e      	beq.n	800cff6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f003 fb5c 	bl	801065a <SDMMC_CmdSendCID>
 800cfa2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <SD_InitCard+0x46>
    {
      return errorstate;
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfac:	e0a6      	b.n	800d0fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f003 f93c 	bl	8010232 <SDMMC_GetResponse>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2104      	movs	r1, #4
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f003 f933 	bl	8010232 <SDMMC_GetResponse>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2108      	movs	r1, #8
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f003 f92a 	bl	8010232 <SDMMC_GetResponse>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	210c      	movs	r1, #12
 800cfea:	4618      	mov	r0, r3
 800cfec:	f003 f921 	bl	8010232 <SDMMC_GetResponse>
 800cff0:	4602      	mov	r2, r0
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d01d      	beq.n	800d03a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800cffe:	e019      	b.n	800d034 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f107 020a 	add.w	r2, r7, #10
 800d008:	4611      	mov	r1, r2
 800d00a:	4618      	mov	r0, r3
 800d00c:	f003 fb64 	bl	80106d8 <SDMMC_CmdSetRelAdd>
 800d010:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <SD_InitCard+0xb4>
      {
        return errorstate;
 800d018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d01a:	e06f      	b.n	800d0fc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d01c:	f7f5 fdde 	bl	8002bdc <HAL_GetTick>
 800d020:	4602      	mov	r2, r0
 800d022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d902      	bls.n	800d034 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d02e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d032:	e063      	b.n	800d0fc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d034:	897b      	ldrh	r3, [r7, #10]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0e2      	beq.n	800d000 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d036      	beq.n	800d0b0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d042:	897b      	ldrh	r3, [r7, #10]
 800d044:	461a      	mov	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d052:	041b      	lsls	r3, r3, #16
 800d054:	4619      	mov	r1, r3
 800d056:	4610      	mov	r0, r2
 800d058:	f003 fb1e 	bl	8010698 <SDMMC_CmdSendCSD>
 800d05c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d060:	2b00      	cmp	r3, #0
 800d062:	d001      	beq.n	800d068 <SD_InitCard+0x100>
    {
      return errorstate;
 800d064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d066:	e049      	b.n	800d0fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2100      	movs	r1, #0
 800d06e:	4618      	mov	r0, r3
 800d070:	f003 f8df 	bl	8010232 <SDMMC_GetResponse>
 800d074:	4602      	mov	r2, r0
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2104      	movs	r1, #4
 800d080:	4618      	mov	r0, r3
 800d082:	f003 f8d6 	bl	8010232 <SDMMC_GetResponse>
 800d086:	4602      	mov	r2, r0
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2108      	movs	r1, #8
 800d092:	4618      	mov	r0, r3
 800d094:	f003 f8cd 	bl	8010232 <SDMMC_GetResponse>
 800d098:	4602      	mov	r2, r0
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	210c      	movs	r1, #12
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f003 f8c4 	bl	8010232 <SDMMC_GetResponse>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2104      	movs	r1, #4
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f003 f8bb 	bl	8010232 <SDMMC_GetResponse>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	0d1a      	lsrs	r2, r3, #20
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d0c4:	f107 030c 	add.w	r3, r7, #12
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7ff fb8c 	bl	800c7e8 <HAL_SD_GetCardCSD>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d0da:	e00f      	b.n	800d0fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0e4:	041b      	lsls	r3, r3, #16
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	f003 f9cd 	bl	8010488 <SDMMC_CmdSelDesel>
 800d0ee:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d001      	beq.n	800d0fa <SD_InitCard+0x192>
  {
    return errorstate;
 800d0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f8:	e000      	b.n	800d0fc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3740      	adds	r7, #64	@ 0x40
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b086      	sub	sp, #24
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d10c:	2300      	movs	r3, #0
 800d10e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d110:	2300      	movs	r3, #0
 800d112:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d114:	2300      	movs	r3, #0
 800d116:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f003 f9d6 	bl	80104ce <SDMMC_CmdGoIdleState>
 800d122:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	e072      	b.n	800d214 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4618      	mov	r0, r3
 800d134:	f003 f9e9 	bl	801050a <SDMMC_CmdOperCond>
 800d138:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d140:	d10d      	bne.n	800d15e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f003 f9be 	bl	80104ce <SDMMC_CmdGoIdleState>
 800d152:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d004      	beq.n	800d164 <SD_PowerON+0x60>
    {
      return errorstate;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	e05a      	b.n	800d214 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d137      	bne.n	800d1dc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2100      	movs	r1, #0
 800d172:	4618      	mov	r0, r3
 800d174:	f003 f9e9 	bl	801054a <SDMMC_CmdAppCommand>
 800d178:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d02d      	beq.n	800d1dc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d180:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d184:	e046      	b.n	800d214 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2100      	movs	r1, #0
 800d18c:	4618      	mov	r0, r3
 800d18e:	f003 f9dc 	bl	801054a <SDMMC_CmdAppCommand>
 800d192:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <SD_PowerON+0x9a>
    {
      return errorstate;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	e03a      	b.n	800d214 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	491e      	ldr	r1, [pc, #120]	@ (800d21c <SD_PowerON+0x118>)
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f003 f9f3 	bl	8010590 <SDMMC_CmdAppOperCommand>
 800d1aa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d1b6:	e02d      	b.n	800d214 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2100      	movs	r1, #0
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f003 f837 	bl	8010232 <SDMMC_GetResponse>
 800d1c4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	0fdb      	lsrs	r3, r3, #31
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d101      	bne.n	800d1d2 <SD_PowerON+0xce>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e000      	b.n	800d1d4 <SD_PowerON+0xd0>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	613b      	str	r3, [r7, #16]

    count++;
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d802      	bhi.n	800d1ec <SD_PowerON+0xe8>
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d0cc      	beq.n	800d186 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d902      	bls.n	800d1fc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d1f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d1fa:	e00b      	b.n	800d214 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d002      	beq.n	800d212 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2201      	movs	r2, #1
 800d210:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	3718      	adds	r7, #24
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	c1100000 	.word	0xc1100000

0800d220 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08c      	sub	sp, #48	@ 0x30
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d22a:	f7f5 fcd7 	bl	8002bdc <HAL_GetTick>
 800d22e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2100      	movs	r1, #0
 800d23a:	4618      	mov	r0, r3
 800d23c:	f002 fff9 	bl	8010232 <SDMMC_GetResponse>
 800d240:	4603      	mov	r3, r0
 800d242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d24a:	d102      	bne.n	800d252 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d24c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d250:	e0b0      	b.n	800d3b4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2140      	movs	r1, #64	@ 0x40
 800d258:	4618      	mov	r0, r3
 800d25a:	f003 f829 	bl	80102b0 <SDMMC_CmdBlockLength>
 800d25e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d005      	beq.n	800d272 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d26e:	6a3b      	ldr	r3, [r7, #32]
 800d270:	e0a0      	b.n	800d3b4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d27a:	041b      	lsls	r3, r3, #16
 800d27c:	4619      	mov	r1, r3
 800d27e:	4610      	mov	r0, r2
 800d280:	f003 f963 	bl	801054a <SDMMC_CmdAppCommand>
 800d284:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d005      	beq.n	800d298 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	e08d      	b.n	800d3b4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d298:	f04f 33ff 	mov.w	r3, #4294967295
 800d29c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d29e:	2340      	movs	r3, #64	@ 0x40
 800d2a0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d2a2:	2360      	movs	r3, #96	@ 0x60
 800d2a4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2a6:	2302      	movs	r3, #2
 800d2a8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f107 0208 	add.w	r2, r7, #8
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f002 ffcb 	bl	8010258 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f003 fa4b 	bl	8010762 <SDMMC_CmdStatusRegister>
 800d2cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d02b      	beq.n	800d32c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d2dc:	6a3b      	ldr	r3, [r7, #32]
 800d2de:	e069      	b.n	800d3b4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d013      	beq.n	800d316 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2f2:	e00d      	b.n	800d310 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f002 ff25 	bl	8010148 <SDMMC_ReadFIFO>
 800d2fe:	4602      	mov	r2, r0
 800d300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d302:	601a      	str	r2, [r3, #0]
        pData++;
 800d304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d306:	3304      	adds	r3, #4
 800d308:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30c:	3301      	adds	r3, #1
 800d30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d312:	2b07      	cmp	r3, #7
 800d314:	d9ee      	bls.n	800d2f4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d316:	f7f5 fc61 	bl	8002bdc <HAL_GetTick>
 800d31a:	4602      	mov	r2, r0
 800d31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31e:	1ad3      	subs	r3, r2, r3
 800d320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d324:	d102      	bne.n	800d32c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d326:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d32a:	e043      	b.n	800d3b4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d332:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d336:	2b00      	cmp	r3, #0
 800d338:	d0d2      	beq.n	800d2e0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d340:	f003 0308 	and.w	r3, r3, #8
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d348:	2308      	movs	r3, #8
 800d34a:	e033      	b.n	800d3b4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d352:	f003 0302 	and.w	r3, r3, #2
 800d356:	2b00      	cmp	r3, #0
 800d358:	d001      	beq.n	800d35e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d35a:	2302      	movs	r3, #2
 800d35c:	e02a      	b.n	800d3b4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d364:	f003 0320 	and.w	r3, r3, #32
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d017      	beq.n	800d39c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d36c:	2320      	movs	r3, #32
 800d36e:	e021      	b.n	800d3b4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4618      	mov	r0, r3
 800d376:	f002 fee7 	bl	8010148 <SDMMC_ReadFIFO>
 800d37a:	4602      	mov	r2, r0
 800d37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37e:	601a      	str	r2, [r3, #0]
    pData++;
 800d380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d382:	3304      	adds	r3, #4
 800d384:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d386:	f7f5 fc29 	bl	8002bdc <HAL_GetTick>
 800d38a:	4602      	mov	r2, r0
 800d38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38e:	1ad3      	subs	r3, r2, r3
 800d390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d394:	d102      	bne.n	800d39c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d396:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d39a:	e00b      	b.n	800d3b4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1e2      	bne.n	800d370 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a03      	ldr	r2, [pc, #12]	@ (800d3bc <SD_SendSDStatus+0x19c>)
 800d3b0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3730      	adds	r7, #48	@ 0x30
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	18000f3a 	.word	0x18000f3a

0800d3c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d102      	bne.n	800d3d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d3d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d3d4:	e018      	b.n	800d408 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3de:	041b      	lsls	r3, r3, #16
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	4610      	mov	r0, r2
 800d3e4:	f003 f99a 	bl	801071c <SDMMC_CmdSendStatus>
 800d3e8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	e009      	b.n	800d408 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f002 ff19 	bl	8010232 <SDMMC_GetResponse>
 800d400:	4602      	mov	r2, r0
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d418:	2300      	movs	r3, #0
 800d41a:	60fb      	str	r3, [r7, #12]
 800d41c:	2300      	movs	r3, #0
 800d41e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2100      	movs	r1, #0
 800d426:	4618      	mov	r0, r3
 800d428:	f002 ff03 	bl	8010232 <SDMMC_GetResponse>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d436:	d102      	bne.n	800d43e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d438:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d43c:	e02f      	b.n	800d49e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d43e:	f107 030c 	add.w	r3, r7, #12
 800d442:	4619      	mov	r1, r3
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 f879 	bl	800d53c <SD_FindSCR>
 800d44a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	e023      	b.n	800d49e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d01c      	beq.n	800d49a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d468:	041b      	lsls	r3, r3, #16
 800d46a:	4619      	mov	r1, r3
 800d46c:	4610      	mov	r0, r2
 800d46e:	f003 f86c 	bl	801054a <SDMMC_CmdAppCommand>
 800d472:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	e00f      	b.n	800d49e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2102      	movs	r1, #2
 800d484:	4618      	mov	r0, r3
 800d486:	f003 f8a3 	bl	80105d0 <SDMMC_CmdBusWidth>
 800d48a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	e003      	b.n	800d49e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d496:	2300      	movs	r3, #0
 800d498:	e001      	b.n	800d49e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d49a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b086      	sub	sp, #24
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	60fb      	str	r3, [r7, #12]
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f002 feb8 	bl	8010232 <SDMMC_GetResponse>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4cc:	d102      	bne.n	800d4d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d4ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4d2:	e02f      	b.n	800d534 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d4d4:	f107 030c 	add.w	r3, r7, #12
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f82e 	bl	800d53c <SD_FindSCR>
 800d4e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	e023      	b.n	800d534 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d01c      	beq.n	800d530 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4fe:	041b      	lsls	r3, r3, #16
 800d500:	4619      	mov	r1, r3
 800d502:	4610      	mov	r0, r2
 800d504:	f003 f821 	bl	801054a <SDMMC_CmdAppCommand>
 800d508:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	e00f      	b.n	800d534 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2100      	movs	r1, #0
 800d51a:	4618      	mov	r0, r3
 800d51c:	f003 f858 	bl	80105d0 <SDMMC_CmdBusWidth>
 800d520:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	e003      	b.n	800d534 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d52c:	2300      	movs	r3, #0
 800d52e:	e001      	b.n	800d534 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d530:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d534:	4618      	mov	r0, r3
 800d536:	3718      	adds	r7, #24
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08e      	sub	sp, #56	@ 0x38
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d546:	f7f5 fb49 	bl	8002bdc <HAL_GetTick>
 800d54a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d54c:	2300      	movs	r3, #0
 800d54e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d550:	2300      	movs	r3, #0
 800d552:	60bb      	str	r3, [r7, #8]
 800d554:	2300      	movs	r3, #0
 800d556:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2108      	movs	r1, #8
 800d562:	4618      	mov	r0, r3
 800d564:	f002 fea4 	bl	80102b0 <SDMMC_CmdBlockLength>
 800d568:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d572:	e0ad      	b.n	800d6d0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d57c:	041b      	lsls	r3, r3, #16
 800d57e:	4619      	mov	r1, r3
 800d580:	4610      	mov	r0, r2
 800d582:	f002 ffe2 	bl	801054a <SDMMC_CmdAppCommand>
 800d586:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d001      	beq.n	800d592 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d590:	e09e      	b.n	800d6d0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d592:	f04f 33ff 	mov.w	r3, #4294967295
 800d596:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d598:	2308      	movs	r3, #8
 800d59a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d59c:	2330      	movs	r3, #48	@ 0x30
 800d59e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f107 0210 	add.w	r2, r7, #16
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f002 fe4e 	bl	8010258 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f003 f828 	bl	8010616 <SDMMC_CmdSendSCR>
 800d5c6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d027      	beq.n	800d61e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d0:	e07e      	b.n	800d6d0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d113      	bne.n	800d608 <SD_FindSCR+0xcc>
 800d5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d110      	bne.n	800d608 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f002 fdac 	bl	8010148 <SDMMC_ReadFIFO>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f002 fda5 	bl	8010148 <SDMMC_ReadFIFO>
 800d5fe:	4603      	mov	r3, r0
 800d600:	60fb      	str	r3, [r7, #12]
      index++;
 800d602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d604:	3301      	adds	r3, #1
 800d606:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d608:	f7f5 fae8 	bl	8002bdc <HAL_GetTick>
 800d60c:	4602      	mov	r2, r0
 800d60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d616:	d102      	bne.n	800d61e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d618:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d61c:	e058      	b.n	800d6d0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d624:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d628:	4013      	ands	r3, r2
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d0d1      	beq.n	800d5d2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d634:	f003 0308 	and.w	r3, r3, #8
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d005      	beq.n	800d648 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2208      	movs	r2, #8
 800d642:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d644:	2308      	movs	r3, #8
 800d646:	e043      	b.n	800d6d0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d64e:	f003 0302 	and.w	r3, r3, #2
 800d652:	2b00      	cmp	r3, #0
 800d654:	d005      	beq.n	800d662 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2202      	movs	r2, #2
 800d65c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d65e:	2302      	movs	r3, #2
 800d660:	e036      	b.n	800d6d0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d668:	f003 0320 	and.w	r3, r3, #32
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d005      	beq.n	800d67c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2220      	movs	r2, #32
 800d676:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d678:	2320      	movs	r3, #32
 800d67a:	e029      	b.n	800d6d0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a15      	ldr	r2, [pc, #84]	@ (800d6d8 <SD_FindSCR+0x19c>)
 800d682:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	061a      	lsls	r2, r3, #24
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	021b      	lsls	r3, r3, #8
 800d68c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d690:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	0a1b      	lsrs	r3, r3, #8
 800d696:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d69a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	0e1b      	lsrs	r3, r3, #24
 800d6a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a4:	601a      	str	r2, [r3, #0]
    scr++;
 800d6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a8:	3304      	adds	r3, #4
 800d6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	061a      	lsls	r2, r3, #24
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	021b      	lsls	r3, r3, #8
 800d6b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d6b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	0a1b      	lsrs	r3, r3, #8
 800d6be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	0e1b      	lsrs	r3, r3, #24
 800d6c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3738      	adds	r7, #56	@ 0x38
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	18000f3a 	.word	0x18000f3a

0800d6dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ee:	2b1f      	cmp	r3, #31
 800d6f0:	d936      	bls.n	800d760 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	617b      	str	r3, [r7, #20]
 800d6f6:	e027      	b.n	800d748 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f002 fd23 	bl	8010148 <SDMMC_ReadFIFO>
 800d702:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	b2da      	uxtb	r2, r3
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	3301      	adds	r3, #1
 800d710:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	0a1b      	lsrs	r3, r3, #8
 800d716:	b2da      	uxtb	r2, r3
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	3301      	adds	r3, #1
 800d720:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	0c1b      	lsrs	r3, r3, #16
 800d726:	b2da      	uxtb	r2, r3
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	3301      	adds	r3, #1
 800d730:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	0e1b      	lsrs	r3, r3, #24
 800d736:	b2da      	uxtb	r2, r3
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	3301      	adds	r3, #1
 800d740:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	3301      	adds	r3, #1
 800d746:	617b      	str	r3, [r7, #20]
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2b07      	cmp	r3, #7
 800d74c:	d9d4      	bls.n	800d6f8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d758:	f1a3 0220 	sub.w	r2, r3, #32
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d760:	bf00      	nop
 800d762:	3718      	adds	r7, #24
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b086      	sub	sp, #24
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	69db      	ldr	r3, [r3, #28]
 800d774:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	2b1f      	cmp	r3, #31
 800d77c:	d93a      	bls.n	800d7f4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]
 800d782:	e02b      	b.n	800d7dc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	3301      	adds	r3, #1
 800d78e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	021a      	lsls	r2, r3, #8
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	4313      	orrs	r3, r2
 800d79a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	041a      	lsls	r2, r3, #16
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	061a      	lsls	r2, r3, #24
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f107 020c 	add.w	r2, r7, #12
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f002 fcc6 	bl	8010162 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	2b07      	cmp	r3, #7
 800d7e0:	d9d0      	bls.n	800d784 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6a1b      	ldr	r3, [r3, #32]
 800d7ec:	f1a3 0220 	sub.w	r2, r3, #32
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	621a      	str	r2, [r3, #32]
  }
}
 800d7f4:	bf00      	nop
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d818:	bf00      	nop
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d82c:	bf00      	nop
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d101      	bne.n	800d85e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d85a:	2301      	movs	r3, #1
 800d85c:	e049      	b.n	800d8f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d864:	b2db      	uxtb	r3, r3
 800d866:	2b00      	cmp	r3, #0
 800d868:	d106      	bne.n	800d878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7f4 fea6 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2202      	movs	r2, #2
 800d87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	3304      	adds	r3, #4
 800d888:	4619      	mov	r1, r3
 800d88a:	4610      	mov	r0, r2
 800d88c:	f000 fc58 	bl	800e140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d001      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d910:	2301      	movs	r3, #1
 800d912:	e05e      	b.n	800d9d2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2202      	movs	r2, #2
 800d918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	68da      	ldr	r2, [r3, #12]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f042 0201 	orr.w	r2, r2, #1
 800d92a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a2b      	ldr	r2, [pc, #172]	@ (800d9e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d02c      	beq.n	800d990 <HAL_TIM_Base_Start_IT+0x94>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d93e:	d027      	beq.n	800d990 <HAL_TIM_Base_Start_IT+0x94>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a27      	ldr	r2, [pc, #156]	@ (800d9e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d022      	beq.n	800d990 <HAL_TIM_Base_Start_IT+0x94>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a26      	ldr	r2, [pc, #152]	@ (800d9e8 <HAL_TIM_Base_Start_IT+0xec>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d01d      	beq.n	800d990 <HAL_TIM_Base_Start_IT+0x94>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a24      	ldr	r2, [pc, #144]	@ (800d9ec <HAL_TIM_Base_Start_IT+0xf0>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d018      	beq.n	800d990 <HAL_TIM_Base_Start_IT+0x94>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a23      	ldr	r2, [pc, #140]	@ (800d9f0 <HAL_TIM_Base_Start_IT+0xf4>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d013      	beq.n	800d990 <HAL_TIM_Base_Start_IT+0x94>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a21      	ldr	r2, [pc, #132]	@ (800d9f4 <HAL_TIM_Base_Start_IT+0xf8>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d00e      	beq.n	800d990 <HAL_TIM_Base_Start_IT+0x94>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a20      	ldr	r2, [pc, #128]	@ (800d9f8 <HAL_TIM_Base_Start_IT+0xfc>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d009      	beq.n	800d990 <HAL_TIM_Base_Start_IT+0x94>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a1e      	ldr	r2, [pc, #120]	@ (800d9fc <HAL_TIM_Base_Start_IT+0x100>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d004      	beq.n	800d990 <HAL_TIM_Base_Start_IT+0x94>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a1d      	ldr	r2, [pc, #116]	@ (800da00 <HAL_TIM_Base_Start_IT+0x104>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d115      	bne.n	800d9bc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	689a      	ldr	r2, [r3, #8]
 800d996:	4b1b      	ldr	r3, [pc, #108]	@ (800da04 <HAL_TIM_Base_Start_IT+0x108>)
 800d998:	4013      	ands	r3, r2
 800d99a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b06      	cmp	r3, #6
 800d9a0:	d015      	beq.n	800d9ce <HAL_TIM_Base_Start_IT+0xd2>
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9a8:	d011      	beq.n	800d9ce <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f042 0201 	orr.w	r2, r2, #1
 800d9b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9ba:	e008      	b.n	800d9ce <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f042 0201 	orr.w	r2, r2, #1
 800d9ca:	601a      	str	r2, [r3, #0]
 800d9cc:	e000      	b.n	800d9d0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	40010000 	.word	0x40010000
 800d9e4:	40000400 	.word	0x40000400
 800d9e8:	40000800 	.word	0x40000800
 800d9ec:	40000c00 	.word	0x40000c00
 800d9f0:	40010400 	.word	0x40010400
 800d9f4:	40001800 	.word	0x40001800
 800d9f8:	40014000 	.word	0x40014000
 800d9fc:	4000e000 	.word	0x4000e000
 800da00:	4000e400 	.word	0x4000e400
 800da04:	00010007 	.word	0x00010007

0800da08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d101      	bne.n	800da1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800da16:	2301      	movs	r3, #1
 800da18:	e049      	b.n	800daae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b00      	cmp	r3, #0
 800da24:	d106      	bne.n	800da34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f841 	bl	800dab6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2202      	movs	r2, #2
 800da38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3304      	adds	r3, #4
 800da44:	4619      	mov	r1, r3
 800da46:	4610      	mov	r0, r2
 800da48:	f000 fb7a 	bl	800e140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2201      	movs	r2, #1
 800da80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b083      	sub	sp, #12
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dabe:	bf00      	nop
 800dac0:	370c      	adds	r7, #12
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr

0800daca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	f003 0302 	and.w	r3, r3, #2
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d020      	beq.n	800db2e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f003 0302 	and.w	r3, r3, #2
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d01b      	beq.n	800db2e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f06f 0202 	mvn.w	r2, #2
 800dafe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2201      	movs	r2, #1
 800db04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	f003 0303 	and.w	r3, r3, #3
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 faf5 	bl	800e104 <HAL_TIM_IC_CaptureCallback>
 800db1a:	e005      	b.n	800db28 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fae7 	bl	800e0f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 faf8 	bl	800e118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	f003 0304 	and.w	r3, r3, #4
 800db34:	2b00      	cmp	r3, #0
 800db36:	d020      	beq.n	800db7a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f003 0304 	and.w	r3, r3, #4
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d01b      	beq.n	800db7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f06f 0204 	mvn.w	r2, #4
 800db4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2202      	movs	r2, #2
 800db50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	699b      	ldr	r3, [r3, #24]
 800db58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d003      	beq.n	800db68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 facf 	bl	800e104 <HAL_TIM_IC_CaptureCallback>
 800db66:	e005      	b.n	800db74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fac1 	bl	800e0f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 fad2 	bl	800e118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	f003 0308 	and.w	r3, r3, #8
 800db80:	2b00      	cmp	r3, #0
 800db82:	d020      	beq.n	800dbc6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f003 0308 	and.w	r3, r3, #8
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d01b      	beq.n	800dbc6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f06f 0208 	mvn.w	r2, #8
 800db96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2204      	movs	r2, #4
 800db9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	69db      	ldr	r3, [r3, #28]
 800dba4:	f003 0303 	and.w	r3, r3, #3
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d003      	beq.n	800dbb4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 faa9 	bl	800e104 <HAL_TIM_IC_CaptureCallback>
 800dbb2:	e005      	b.n	800dbc0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 fa9b 	bl	800e0f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 faac 	bl	800e118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	f003 0310 	and.w	r3, r3, #16
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d020      	beq.n	800dc12 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f003 0310 	and.w	r3, r3, #16
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d01b      	beq.n	800dc12 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f06f 0210 	mvn.w	r2, #16
 800dbe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2208      	movs	r2, #8
 800dbe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	69db      	ldr	r3, [r3, #28]
 800dbf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 fa83 	bl	800e104 <HAL_TIM_IC_CaptureCallback>
 800dbfe:	e005      	b.n	800dc0c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 fa75 	bl	800e0f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 fa86 	bl	800e118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	f003 0301 	and.w	r3, r3, #1
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00c      	beq.n	800dc36 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f003 0301 	and.w	r3, r3, #1
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d007      	beq.n	800dc36 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f06f 0201 	mvn.w	r2, #1
 800dc2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7f3 ffab 	bl	8001b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d104      	bne.n	800dc4a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00c      	beq.n	800dc64 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d007      	beq.n	800dc64 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dc5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 ffc6 	bl	800ebf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d00c      	beq.n	800dc88 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d007      	beq.n	800dc88 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dc80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 ffbe 	bl	800ec04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00c      	beq.n	800dcac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d007      	beq.n	800dcac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fa40 	bl	800e12c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	f003 0320 	and.w	r3, r3, #32
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00c      	beq.n	800dcd0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f003 0320 	and.w	r3, r3, #32
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d007      	beq.n	800dcd0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f06f 0220 	mvn.w	r2, #32
 800dcc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 ff86 	bl	800ebdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcd0:	bf00      	nop
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b086      	sub	sp, #24
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d101      	bne.n	800dcf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dcf2:	2302      	movs	r3, #2
 800dcf4:	e0ff      	b.n	800def6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b14      	cmp	r3, #20
 800dd02:	f200 80f0 	bhi.w	800dee6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dd06:	a201      	add	r2, pc, #4	@ (adr r2, 800dd0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800dd61 	.word	0x0800dd61
 800dd10:	0800dee7 	.word	0x0800dee7
 800dd14:	0800dee7 	.word	0x0800dee7
 800dd18:	0800dee7 	.word	0x0800dee7
 800dd1c:	0800dda1 	.word	0x0800dda1
 800dd20:	0800dee7 	.word	0x0800dee7
 800dd24:	0800dee7 	.word	0x0800dee7
 800dd28:	0800dee7 	.word	0x0800dee7
 800dd2c:	0800dde3 	.word	0x0800dde3
 800dd30:	0800dee7 	.word	0x0800dee7
 800dd34:	0800dee7 	.word	0x0800dee7
 800dd38:	0800dee7 	.word	0x0800dee7
 800dd3c:	0800de23 	.word	0x0800de23
 800dd40:	0800dee7 	.word	0x0800dee7
 800dd44:	0800dee7 	.word	0x0800dee7
 800dd48:	0800dee7 	.word	0x0800dee7
 800dd4c:	0800de65 	.word	0x0800de65
 800dd50:	0800dee7 	.word	0x0800dee7
 800dd54:	0800dee7 	.word	0x0800dee7
 800dd58:	0800dee7 	.word	0x0800dee7
 800dd5c:	0800dea5 	.word	0x0800dea5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	68b9      	ldr	r1, [r7, #8]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f000 fa9c 	bl	800e2a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	699a      	ldr	r2, [r3, #24]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f042 0208 	orr.w	r2, r2, #8
 800dd7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	699a      	ldr	r2, [r3, #24]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f022 0204 	bic.w	r2, r2, #4
 800dd8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6999      	ldr	r1, [r3, #24]
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	691a      	ldr	r2, [r3, #16]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	430a      	orrs	r2, r1
 800dd9c:	619a      	str	r2, [r3, #24]
      break;
 800dd9e:	e0a5      	b.n	800deec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	68b9      	ldr	r1, [r7, #8]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f000 fb0c 	bl	800e3c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	699a      	ldr	r2, [r3, #24]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ddba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	699a      	ldr	r2, [r3, #24]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	6999      	ldr	r1, [r3, #24]
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	021a      	lsls	r2, r3, #8
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	430a      	orrs	r2, r1
 800ddde:	619a      	str	r2, [r3, #24]
      break;
 800dde0:	e084      	b.n	800deec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	68b9      	ldr	r1, [r7, #8]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 fb75 	bl	800e4d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	69da      	ldr	r2, [r3, #28]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f042 0208 	orr.w	r2, r2, #8
 800ddfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	69da      	ldr	r2, [r3, #28]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f022 0204 	bic.w	r2, r2, #4
 800de0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	69d9      	ldr	r1, [r3, #28]
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	691a      	ldr	r2, [r3, #16]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	430a      	orrs	r2, r1
 800de1e:	61da      	str	r2, [r3, #28]
      break;
 800de20:	e064      	b.n	800deec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	68b9      	ldr	r1, [r7, #8]
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 fbdd 	bl	800e5e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	69da      	ldr	r2, [r3, #28]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	69da      	ldr	r2, [r3, #28]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	69d9      	ldr	r1, [r3, #28]
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	021a      	lsls	r2, r3, #8
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	430a      	orrs	r2, r1
 800de60:	61da      	str	r2, [r3, #28]
      break;
 800de62:	e043      	b.n	800deec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	68b9      	ldr	r1, [r7, #8]
 800de6a:	4618      	mov	r0, r3
 800de6c:	f000 fc26 	bl	800e6bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f042 0208 	orr.w	r2, r2, #8
 800de7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f022 0204 	bic.w	r2, r2, #4
 800de8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	691a      	ldr	r2, [r3, #16]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	430a      	orrs	r2, r1
 800dea0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dea2:	e023      	b.n	800deec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	68b9      	ldr	r1, [r7, #8]
 800deaa:	4618      	mov	r0, r3
 800deac:	f000 fc6a 	bl	800e784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800debe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dece:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	021a      	lsls	r2, r3, #8
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	430a      	orrs	r2, r1
 800dee2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dee4:	e002      	b.n	800deec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	75fb      	strb	r3, [r7, #23]
      break;
 800deea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2200      	movs	r2, #0
 800def0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800def4:	7dfb      	ldrb	r3, [r7, #23]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3718      	adds	r7, #24
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop

0800df00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df14:	2b01      	cmp	r3, #1
 800df16:	d101      	bne.n	800df1c <HAL_TIM_ConfigClockSource+0x1c>
 800df18:	2302      	movs	r3, #2
 800df1a:	e0dc      	b.n	800e0d6 <HAL_TIM_ConfigClockSource+0x1d6>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2201      	movs	r2, #1
 800df20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2202      	movs	r2, #2
 800df28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df34:	68ba      	ldr	r2, [r7, #8]
 800df36:	4b6a      	ldr	r3, [pc, #424]	@ (800e0e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800df38:	4013      	ands	r3, r2
 800df3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a64      	ldr	r2, [pc, #400]	@ (800e0e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800df52:	4293      	cmp	r3, r2
 800df54:	f000 80a9 	beq.w	800e0aa <HAL_TIM_ConfigClockSource+0x1aa>
 800df58:	4a62      	ldr	r2, [pc, #392]	@ (800e0e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	f200 80ae 	bhi.w	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800df60:	4a61      	ldr	r2, [pc, #388]	@ (800e0e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800df62:	4293      	cmp	r3, r2
 800df64:	f000 80a1 	beq.w	800e0aa <HAL_TIM_ConfigClockSource+0x1aa>
 800df68:	4a5f      	ldr	r2, [pc, #380]	@ (800e0e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	f200 80a6 	bhi.w	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800df70:	4a5e      	ldr	r2, [pc, #376]	@ (800e0ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800df72:	4293      	cmp	r3, r2
 800df74:	f000 8099 	beq.w	800e0aa <HAL_TIM_ConfigClockSource+0x1aa>
 800df78:	4a5c      	ldr	r2, [pc, #368]	@ (800e0ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	f200 809e 	bhi.w	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800df80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800df84:	f000 8091 	beq.w	800e0aa <HAL_TIM_ConfigClockSource+0x1aa>
 800df88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800df8c:	f200 8096 	bhi.w	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800df90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df94:	f000 8089 	beq.w	800e0aa <HAL_TIM_ConfigClockSource+0x1aa>
 800df98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df9c:	f200 808e 	bhi.w	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800dfa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfa4:	d03e      	beq.n	800e024 <HAL_TIM_ConfigClockSource+0x124>
 800dfa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfaa:	f200 8087 	bhi.w	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800dfae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfb2:	f000 8086 	beq.w	800e0c2 <HAL_TIM_ConfigClockSource+0x1c2>
 800dfb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfba:	d87f      	bhi.n	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800dfbc:	2b70      	cmp	r3, #112	@ 0x70
 800dfbe:	d01a      	beq.n	800dff6 <HAL_TIM_ConfigClockSource+0xf6>
 800dfc0:	2b70      	cmp	r3, #112	@ 0x70
 800dfc2:	d87b      	bhi.n	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800dfc4:	2b60      	cmp	r3, #96	@ 0x60
 800dfc6:	d050      	beq.n	800e06a <HAL_TIM_ConfigClockSource+0x16a>
 800dfc8:	2b60      	cmp	r3, #96	@ 0x60
 800dfca:	d877      	bhi.n	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800dfcc:	2b50      	cmp	r3, #80	@ 0x50
 800dfce:	d03c      	beq.n	800e04a <HAL_TIM_ConfigClockSource+0x14a>
 800dfd0:	2b50      	cmp	r3, #80	@ 0x50
 800dfd2:	d873      	bhi.n	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800dfd4:	2b40      	cmp	r3, #64	@ 0x40
 800dfd6:	d058      	beq.n	800e08a <HAL_TIM_ConfigClockSource+0x18a>
 800dfd8:	2b40      	cmp	r3, #64	@ 0x40
 800dfda:	d86f      	bhi.n	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800dfdc:	2b30      	cmp	r3, #48	@ 0x30
 800dfde:	d064      	beq.n	800e0aa <HAL_TIM_ConfigClockSource+0x1aa>
 800dfe0:	2b30      	cmp	r3, #48	@ 0x30
 800dfe2:	d86b      	bhi.n	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800dfe4:	2b20      	cmp	r3, #32
 800dfe6:	d060      	beq.n	800e0aa <HAL_TIM_ConfigClockSource+0x1aa>
 800dfe8:	2b20      	cmp	r3, #32
 800dfea:	d867      	bhi.n	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d05c      	beq.n	800e0aa <HAL_TIM_ConfigClockSource+0x1aa>
 800dff0:	2b10      	cmp	r3, #16
 800dff2:	d05a      	beq.n	800e0aa <HAL_TIM_ConfigClockSource+0x1aa>
 800dff4:	e062      	b.n	800e0bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e006:	f000 fca1 	bl	800e94c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	609a      	str	r2, [r3, #8]
      break;
 800e022:	e04f      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e034:	f000 fc8a 	bl	800e94c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689a      	ldr	r2, [r3, #8]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e046:	609a      	str	r2, [r3, #8]
      break;
 800e048:	e03c      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e056:	461a      	mov	r2, r3
 800e058:	f000 fbfa 	bl	800e850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2150      	movs	r1, #80	@ 0x50
 800e062:	4618      	mov	r0, r3
 800e064:	f000 fc54 	bl	800e910 <TIM_ITRx_SetConfig>
      break;
 800e068:	e02c      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e076:	461a      	mov	r2, r3
 800e078:	f000 fc19 	bl	800e8ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2160      	movs	r1, #96	@ 0x60
 800e082:	4618      	mov	r0, r3
 800e084:	f000 fc44 	bl	800e910 <TIM_ITRx_SetConfig>
      break;
 800e088:	e01c      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e096:	461a      	mov	r2, r3
 800e098:	f000 fbda 	bl	800e850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2140      	movs	r1, #64	@ 0x40
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f000 fc34 	bl	800e910 <TIM_ITRx_SetConfig>
      break;
 800e0a8:	e00c      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	f000 fc2b 	bl	800e910 <TIM_ITRx_SetConfig>
      break;
 800e0ba:	e003      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	73fb      	strb	r3, [r7, #15]
      break;
 800e0c0:	e000      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e0c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3710      	adds	r7, #16
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	ffceff88 	.word	0xffceff88
 800e0e4:	00100040 	.word	0x00100040
 800e0e8:	00100030 	.word	0x00100030
 800e0ec:	00100020 	.word	0x00100020

0800e0f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e120:	bf00      	nop
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e134:	bf00      	nop
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e140:	b480      	push	{r7}
 800e142:	b085      	sub	sp, #20
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4a4a      	ldr	r2, [pc, #296]	@ (800e27c <TIM_Base_SetConfig+0x13c>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d013      	beq.n	800e180 <TIM_Base_SetConfig+0x40>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e15e:	d00f      	beq.n	800e180 <TIM_Base_SetConfig+0x40>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	4a47      	ldr	r2, [pc, #284]	@ (800e280 <TIM_Base_SetConfig+0x140>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d00b      	beq.n	800e180 <TIM_Base_SetConfig+0x40>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	4a46      	ldr	r2, [pc, #280]	@ (800e284 <TIM_Base_SetConfig+0x144>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d007      	beq.n	800e180 <TIM_Base_SetConfig+0x40>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a45      	ldr	r2, [pc, #276]	@ (800e288 <TIM_Base_SetConfig+0x148>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d003      	beq.n	800e180 <TIM_Base_SetConfig+0x40>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	4a44      	ldr	r2, [pc, #272]	@ (800e28c <TIM_Base_SetConfig+0x14c>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d108      	bne.n	800e192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	4313      	orrs	r3, r2
 800e190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4a39      	ldr	r2, [pc, #228]	@ (800e27c <TIM_Base_SetConfig+0x13c>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d027      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1a0:	d023      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	4a36      	ldr	r2, [pc, #216]	@ (800e280 <TIM_Base_SetConfig+0x140>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d01f      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4a35      	ldr	r2, [pc, #212]	@ (800e284 <TIM_Base_SetConfig+0x144>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d01b      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	4a34      	ldr	r2, [pc, #208]	@ (800e288 <TIM_Base_SetConfig+0x148>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d017      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4a33      	ldr	r2, [pc, #204]	@ (800e28c <TIM_Base_SetConfig+0x14c>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d013      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a32      	ldr	r2, [pc, #200]	@ (800e290 <TIM_Base_SetConfig+0x150>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d00f      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	4a31      	ldr	r2, [pc, #196]	@ (800e294 <TIM_Base_SetConfig+0x154>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d00b      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4a30      	ldr	r2, [pc, #192]	@ (800e298 <TIM_Base_SetConfig+0x158>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d007      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4a2f      	ldr	r2, [pc, #188]	@ (800e29c <TIM_Base_SetConfig+0x15c>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d003      	beq.n	800e1ea <TIM_Base_SetConfig+0xaa>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4a2e      	ldr	r2, [pc, #184]	@ (800e2a0 <TIM_Base_SetConfig+0x160>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d108      	bne.n	800e1fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	695b      	ldr	r3, [r3, #20]
 800e206:	4313      	orrs	r3, r2
 800e208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	689a      	ldr	r2, [r3, #8]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a16      	ldr	r2, [pc, #88]	@ (800e27c <TIM_Base_SetConfig+0x13c>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d00f      	beq.n	800e248 <TIM_Base_SetConfig+0x108>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	4a18      	ldr	r2, [pc, #96]	@ (800e28c <TIM_Base_SetConfig+0x14c>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d00b      	beq.n	800e248 <TIM_Base_SetConfig+0x108>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a17      	ldr	r2, [pc, #92]	@ (800e290 <TIM_Base_SetConfig+0x150>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d007      	beq.n	800e248 <TIM_Base_SetConfig+0x108>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4a16      	ldr	r2, [pc, #88]	@ (800e294 <TIM_Base_SetConfig+0x154>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d003      	beq.n	800e248 <TIM_Base_SetConfig+0x108>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4a15      	ldr	r2, [pc, #84]	@ (800e298 <TIM_Base_SetConfig+0x158>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d103      	bne.n	800e250 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	691a      	ldr	r2, [r3, #16]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2201      	movs	r2, #1
 800e254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d105      	bne.n	800e26e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	f023 0201 	bic.w	r2, r3, #1
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	611a      	str	r2, [r3, #16]
  }
}
 800e26e:	bf00      	nop
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	40010000 	.word	0x40010000
 800e280:	40000400 	.word	0x40000400
 800e284:	40000800 	.word	0x40000800
 800e288:	40000c00 	.word	0x40000c00
 800e28c:	40010400 	.word	0x40010400
 800e290:	40014000 	.word	0x40014000
 800e294:	40014400 	.word	0x40014400
 800e298:	40014800 	.word	0x40014800
 800e29c:	4000e000 	.word	0x4000e000
 800e2a0:	4000e400 	.word	0x4000e400

0800e2a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b087      	sub	sp, #28
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a1b      	ldr	r3, [r3, #32]
 800e2b8:	f023 0201 	bic.w	r2, r3, #1
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	699b      	ldr	r3, [r3, #24]
 800e2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	4b37      	ldr	r3, [pc, #220]	@ (800e3ac <TIM_OC1_SetConfig+0x108>)
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f023 0303 	bic.w	r3, r3, #3
 800e2da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	f023 0302 	bic.w	r3, r3, #2
 800e2ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	689b      	ldr	r3, [r3, #8]
 800e2f2:	697a      	ldr	r2, [r7, #20]
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4a2d      	ldr	r2, [pc, #180]	@ (800e3b0 <TIM_OC1_SetConfig+0x10c>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d00f      	beq.n	800e320 <TIM_OC1_SetConfig+0x7c>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4a2c      	ldr	r2, [pc, #176]	@ (800e3b4 <TIM_OC1_SetConfig+0x110>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d00b      	beq.n	800e320 <TIM_OC1_SetConfig+0x7c>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4a2b      	ldr	r2, [pc, #172]	@ (800e3b8 <TIM_OC1_SetConfig+0x114>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d007      	beq.n	800e320 <TIM_OC1_SetConfig+0x7c>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a2a      	ldr	r2, [pc, #168]	@ (800e3bc <TIM_OC1_SetConfig+0x118>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d003      	beq.n	800e320 <TIM_OC1_SetConfig+0x7c>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	4a29      	ldr	r2, [pc, #164]	@ (800e3c0 <TIM_OC1_SetConfig+0x11c>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d10c      	bne.n	800e33a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	f023 0308 	bic.w	r3, r3, #8
 800e326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	4313      	orrs	r3, r2
 800e330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	f023 0304 	bic.w	r3, r3, #4
 800e338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4a1c      	ldr	r2, [pc, #112]	@ (800e3b0 <TIM_OC1_SetConfig+0x10c>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d00f      	beq.n	800e362 <TIM_OC1_SetConfig+0xbe>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	4a1b      	ldr	r2, [pc, #108]	@ (800e3b4 <TIM_OC1_SetConfig+0x110>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d00b      	beq.n	800e362 <TIM_OC1_SetConfig+0xbe>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4a1a      	ldr	r2, [pc, #104]	@ (800e3b8 <TIM_OC1_SetConfig+0x114>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d007      	beq.n	800e362 <TIM_OC1_SetConfig+0xbe>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a19      	ldr	r2, [pc, #100]	@ (800e3bc <TIM_OC1_SetConfig+0x118>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d003      	beq.n	800e362 <TIM_OC1_SetConfig+0xbe>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a18      	ldr	r2, [pc, #96]	@ (800e3c0 <TIM_OC1_SetConfig+0x11c>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d111      	bne.n	800e386 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	695b      	ldr	r3, [r3, #20]
 800e376:	693a      	ldr	r2, [r7, #16]
 800e378:	4313      	orrs	r3, r2
 800e37a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	699b      	ldr	r3, [r3, #24]
 800e380:	693a      	ldr	r2, [r7, #16]
 800e382:	4313      	orrs	r3, r2
 800e384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	693a      	ldr	r2, [r7, #16]
 800e38a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	68fa      	ldr	r2, [r7, #12]
 800e390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	685a      	ldr	r2, [r3, #4]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	697a      	ldr	r2, [r7, #20]
 800e39e:	621a      	str	r2, [r3, #32]
}
 800e3a0:	bf00      	nop
 800e3a2:	371c      	adds	r7, #28
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr
 800e3ac:	fffeff8f 	.word	0xfffeff8f
 800e3b0:	40010000 	.word	0x40010000
 800e3b4:	40010400 	.word	0x40010400
 800e3b8:	40014000 	.word	0x40014000
 800e3bc:	40014400 	.word	0x40014400
 800e3c0:	40014800 	.word	0x40014800

0800e3c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6a1b      	ldr	r3, [r3, #32]
 800e3d8:	f023 0210 	bic.w	r2, r3, #16
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	699b      	ldr	r3, [r3, #24]
 800e3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	4b34      	ldr	r3, [pc, #208]	@ (800e4c0 <TIM_OC2_SetConfig+0xfc>)
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e3fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	021b      	lsls	r3, r3, #8
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	4313      	orrs	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	f023 0320 	bic.w	r3, r3, #32
 800e40e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	011b      	lsls	r3, r3, #4
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	4313      	orrs	r3, r2
 800e41a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4a29      	ldr	r2, [pc, #164]	@ (800e4c4 <TIM_OC2_SetConfig+0x100>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d003      	beq.n	800e42c <TIM_OC2_SetConfig+0x68>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	4a28      	ldr	r2, [pc, #160]	@ (800e4c8 <TIM_OC2_SetConfig+0x104>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d10d      	bne.n	800e448 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	011b      	lsls	r3, r3, #4
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	4313      	orrs	r3, r2
 800e43e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e446:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4a1e      	ldr	r2, [pc, #120]	@ (800e4c4 <TIM_OC2_SetConfig+0x100>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d00f      	beq.n	800e470 <TIM_OC2_SetConfig+0xac>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	4a1d      	ldr	r2, [pc, #116]	@ (800e4c8 <TIM_OC2_SetConfig+0x104>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d00b      	beq.n	800e470 <TIM_OC2_SetConfig+0xac>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	4a1c      	ldr	r2, [pc, #112]	@ (800e4cc <TIM_OC2_SetConfig+0x108>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d007      	beq.n	800e470 <TIM_OC2_SetConfig+0xac>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4a1b      	ldr	r2, [pc, #108]	@ (800e4d0 <TIM_OC2_SetConfig+0x10c>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d003      	beq.n	800e470 <TIM_OC2_SetConfig+0xac>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4a1a      	ldr	r2, [pc, #104]	@ (800e4d4 <TIM_OC2_SetConfig+0x110>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d113      	bne.n	800e498 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e47e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	695b      	ldr	r3, [r3, #20]
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	4313      	orrs	r3, r2
 800e48a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	699b      	ldr	r3, [r3, #24]
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	693a      	ldr	r2, [r7, #16]
 800e494:	4313      	orrs	r3, r2
 800e496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	693a      	ldr	r2, [r7, #16]
 800e49c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	685a      	ldr	r2, [r3, #4]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	697a      	ldr	r2, [r7, #20]
 800e4b0:	621a      	str	r2, [r3, #32]
}
 800e4b2:	bf00      	nop
 800e4b4:	371c      	adds	r7, #28
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	feff8fff 	.word	0xfeff8fff
 800e4c4:	40010000 	.word	0x40010000
 800e4c8:	40010400 	.word	0x40010400
 800e4cc:	40014000 	.word	0x40014000
 800e4d0:	40014400 	.word	0x40014400
 800e4d4:	40014800 	.word	0x40014800

0800e4d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b087      	sub	sp, #28
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a1b      	ldr	r3, [r3, #32]
 800e4e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6a1b      	ldr	r3, [r3, #32]
 800e4ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	69db      	ldr	r3, [r3, #28]
 800e4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	4b33      	ldr	r3, [pc, #204]	@ (800e5d0 <TIM_OC3_SetConfig+0xf8>)
 800e504:	4013      	ands	r3, r2
 800e506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f023 0303 	bic.w	r3, r3, #3
 800e50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	4313      	orrs	r3, r2
 800e518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	021b      	lsls	r3, r3, #8
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4a28      	ldr	r2, [pc, #160]	@ (800e5d4 <TIM_OC3_SetConfig+0xfc>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d003      	beq.n	800e53e <TIM_OC3_SetConfig+0x66>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a27      	ldr	r2, [pc, #156]	@ (800e5d8 <TIM_OC3_SetConfig+0x100>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d10d      	bne.n	800e55a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	021b      	lsls	r3, r3, #8
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	4313      	orrs	r3, r2
 800e550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a1d      	ldr	r2, [pc, #116]	@ (800e5d4 <TIM_OC3_SetConfig+0xfc>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d00f      	beq.n	800e582 <TIM_OC3_SetConfig+0xaa>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a1c      	ldr	r2, [pc, #112]	@ (800e5d8 <TIM_OC3_SetConfig+0x100>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d00b      	beq.n	800e582 <TIM_OC3_SetConfig+0xaa>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a1b      	ldr	r2, [pc, #108]	@ (800e5dc <TIM_OC3_SetConfig+0x104>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d007      	beq.n	800e582 <TIM_OC3_SetConfig+0xaa>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4a1a      	ldr	r2, [pc, #104]	@ (800e5e0 <TIM_OC3_SetConfig+0x108>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d003      	beq.n	800e582 <TIM_OC3_SetConfig+0xaa>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4a19      	ldr	r2, [pc, #100]	@ (800e5e4 <TIM_OC3_SetConfig+0x10c>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d113      	bne.n	800e5aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	695b      	ldr	r3, [r3, #20]
 800e596:	011b      	lsls	r3, r3, #4
 800e598:	693a      	ldr	r2, [r7, #16]
 800e59a:	4313      	orrs	r3, r2
 800e59c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	699b      	ldr	r3, [r3, #24]
 800e5a2:	011b      	lsls	r3, r3, #4
 800e5a4:	693a      	ldr	r2, [r7, #16]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	693a      	ldr	r2, [r7, #16]
 800e5ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	697a      	ldr	r2, [r7, #20]
 800e5c2:	621a      	str	r2, [r3, #32]
}
 800e5c4:	bf00      	nop
 800e5c6:	371c      	adds	r7, #28
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	fffeff8f 	.word	0xfffeff8f
 800e5d4:	40010000 	.word	0x40010000
 800e5d8:	40010400 	.word	0x40010400
 800e5dc:	40014000 	.word	0x40014000
 800e5e0:	40014400 	.word	0x40014400
 800e5e4:	40014800 	.word	0x40014800

0800e5e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b087      	sub	sp, #28
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6a1b      	ldr	r3, [r3, #32]
 800e5fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	69db      	ldr	r3, [r3, #28]
 800e60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	4b24      	ldr	r3, [pc, #144]	@ (800e6a4 <TIM_OC4_SetConfig+0xbc>)
 800e614:	4013      	ands	r3, r2
 800e616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e61e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	021b      	lsls	r3, r3, #8
 800e626:	68fa      	ldr	r2, [r7, #12]
 800e628:	4313      	orrs	r3, r2
 800e62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	031b      	lsls	r3, r3, #12
 800e63a:	693a      	ldr	r2, [r7, #16]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a19      	ldr	r2, [pc, #100]	@ (800e6a8 <TIM_OC4_SetConfig+0xc0>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d00f      	beq.n	800e668 <TIM_OC4_SetConfig+0x80>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4a18      	ldr	r2, [pc, #96]	@ (800e6ac <TIM_OC4_SetConfig+0xc4>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d00b      	beq.n	800e668 <TIM_OC4_SetConfig+0x80>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a17      	ldr	r2, [pc, #92]	@ (800e6b0 <TIM_OC4_SetConfig+0xc8>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d007      	beq.n	800e668 <TIM_OC4_SetConfig+0x80>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a16      	ldr	r2, [pc, #88]	@ (800e6b4 <TIM_OC4_SetConfig+0xcc>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d003      	beq.n	800e668 <TIM_OC4_SetConfig+0x80>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a15      	ldr	r2, [pc, #84]	@ (800e6b8 <TIM_OC4_SetConfig+0xd0>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d109      	bne.n	800e67c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e66e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	695b      	ldr	r3, [r3, #20]
 800e674:	019b      	lsls	r3, r3, #6
 800e676:	697a      	ldr	r2, [r7, #20]
 800e678:	4313      	orrs	r3, r2
 800e67a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	685a      	ldr	r2, [r3, #4]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	621a      	str	r2, [r3, #32]
}
 800e696:	bf00      	nop
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	feff8fff 	.word	0xfeff8fff
 800e6a8:	40010000 	.word	0x40010000
 800e6ac:	40010400 	.word	0x40010400
 800e6b0:	40014000 	.word	0x40014000
 800e6b4:	40014400 	.word	0x40014400
 800e6b8:	40014800 	.word	0x40014800

0800e6bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b087      	sub	sp, #28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a1b      	ldr	r3, [r3, #32]
 800e6ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6a1b      	ldr	r3, [r3, #32]
 800e6d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	4b21      	ldr	r3, [pc, #132]	@ (800e76c <TIM_OC5_SetConfig+0xb0>)
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e6fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	041b      	lsls	r3, r3, #16
 800e704:	693a      	ldr	r2, [r7, #16]
 800e706:	4313      	orrs	r3, r2
 800e708:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4a18      	ldr	r2, [pc, #96]	@ (800e770 <TIM_OC5_SetConfig+0xb4>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d00f      	beq.n	800e732 <TIM_OC5_SetConfig+0x76>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	4a17      	ldr	r2, [pc, #92]	@ (800e774 <TIM_OC5_SetConfig+0xb8>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d00b      	beq.n	800e732 <TIM_OC5_SetConfig+0x76>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4a16      	ldr	r2, [pc, #88]	@ (800e778 <TIM_OC5_SetConfig+0xbc>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d007      	beq.n	800e732 <TIM_OC5_SetConfig+0x76>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4a15      	ldr	r2, [pc, #84]	@ (800e77c <TIM_OC5_SetConfig+0xc0>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d003      	beq.n	800e732 <TIM_OC5_SetConfig+0x76>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4a14      	ldr	r2, [pc, #80]	@ (800e780 <TIM_OC5_SetConfig+0xc4>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d109      	bne.n	800e746 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	695b      	ldr	r3, [r3, #20]
 800e73e:	021b      	lsls	r3, r3, #8
 800e740:	697a      	ldr	r2, [r7, #20]
 800e742:	4313      	orrs	r3, r2
 800e744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	697a      	ldr	r2, [r7, #20]
 800e74a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	685a      	ldr	r2, [r3, #4]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	693a      	ldr	r2, [r7, #16]
 800e75e:	621a      	str	r2, [r3, #32]
}
 800e760:	bf00      	nop
 800e762:	371c      	adds	r7, #28
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	fffeff8f 	.word	0xfffeff8f
 800e770:	40010000 	.word	0x40010000
 800e774:	40010400 	.word	0x40010400
 800e778:	40014000 	.word	0x40014000
 800e77c:	40014400 	.word	0x40014400
 800e780:	40014800 	.word	0x40014800

0800e784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e784:	b480      	push	{r7}
 800e786:	b087      	sub	sp, #28
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a1b      	ldr	r3, [r3, #32]
 800e792:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6a1b      	ldr	r3, [r3, #32]
 800e798:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	4b22      	ldr	r3, [pc, #136]	@ (800e838 <TIM_OC6_SetConfig+0xb4>)
 800e7b0:	4013      	ands	r3, r2
 800e7b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	021b      	lsls	r3, r3, #8
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e7c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	051b      	lsls	r3, r3, #20
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	4a19      	ldr	r2, [pc, #100]	@ (800e83c <TIM_OC6_SetConfig+0xb8>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d00f      	beq.n	800e7fc <TIM_OC6_SetConfig+0x78>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	4a18      	ldr	r2, [pc, #96]	@ (800e840 <TIM_OC6_SetConfig+0xbc>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d00b      	beq.n	800e7fc <TIM_OC6_SetConfig+0x78>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	4a17      	ldr	r2, [pc, #92]	@ (800e844 <TIM_OC6_SetConfig+0xc0>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d007      	beq.n	800e7fc <TIM_OC6_SetConfig+0x78>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	4a16      	ldr	r2, [pc, #88]	@ (800e848 <TIM_OC6_SetConfig+0xc4>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d003      	beq.n	800e7fc <TIM_OC6_SetConfig+0x78>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	4a15      	ldr	r2, [pc, #84]	@ (800e84c <TIM_OC6_SetConfig+0xc8>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d109      	bne.n	800e810 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e802:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	029b      	lsls	r3, r3, #10
 800e80a:	697a      	ldr	r2, [r7, #20]
 800e80c:	4313      	orrs	r3, r2
 800e80e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	697a      	ldr	r2, [r7, #20]
 800e814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	685a      	ldr	r2, [r3, #4]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	621a      	str	r2, [r3, #32]
}
 800e82a:	bf00      	nop
 800e82c:	371c      	adds	r7, #28
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	feff8fff 	.word	0xfeff8fff
 800e83c:	40010000 	.word	0x40010000
 800e840:	40010400 	.word	0x40010400
 800e844:	40014000 	.word	0x40014000
 800e848:	40014400 	.word	0x40014400
 800e84c:	40014800 	.word	0x40014800

0800e850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e850:	b480      	push	{r7}
 800e852:	b087      	sub	sp, #28
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6a1b      	ldr	r3, [r3, #32]
 800e860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6a1b      	ldr	r3, [r3, #32]
 800e866:	f023 0201 	bic.w	r2, r3, #1
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	699b      	ldr	r3, [r3, #24]
 800e872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e87a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	011b      	lsls	r3, r3, #4
 800e880:	693a      	ldr	r2, [r7, #16]
 800e882:	4313      	orrs	r3, r2
 800e884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	f023 030a 	bic.w	r3, r3, #10
 800e88c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e88e:	697a      	ldr	r2, [r7, #20]
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	4313      	orrs	r3, r2
 800e894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	693a      	ldr	r2, [r7, #16]
 800e89a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	697a      	ldr	r2, [r7, #20]
 800e8a0:	621a      	str	r2, [r3, #32]
}
 800e8a2:	bf00      	nop
 800e8a4:	371c      	adds	r7, #28
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8ae:	b480      	push	{r7}
 800e8b0:	b087      	sub	sp, #28
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	60f8      	str	r0, [r7, #12]
 800e8b6:	60b9      	str	r1, [r7, #8]
 800e8b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	6a1b      	ldr	r3, [r3, #32]
 800e8c4:	f023 0210 	bic.w	r2, r3, #16
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	699b      	ldr	r3, [r3, #24]
 800e8d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e8d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	031b      	lsls	r3, r3, #12
 800e8de:	693a      	ldr	r2, [r7, #16]
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e8ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	011b      	lsls	r3, r3, #4
 800e8f0:	697a      	ldr	r2, [r7, #20]
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	693a      	ldr	r2, [r7, #16]
 800e8fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	621a      	str	r2, [r3, #32]
}
 800e902:	bf00      	nop
 800e904:	371c      	adds	r7, #28
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr
	...

0800e910 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e910:	b480      	push	{r7}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	689b      	ldr	r3, [r3, #8]
 800e91e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4b09      	ldr	r3, [pc, #36]	@ (800e948 <TIM_ITRx_SetConfig+0x38>)
 800e924:	4013      	ands	r3, r2
 800e926:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e928:	683a      	ldr	r2, [r7, #0]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	4313      	orrs	r3, r2
 800e92e:	f043 0307 	orr.w	r3, r3, #7
 800e932:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	609a      	str	r2, [r3, #8]
}
 800e93a:	bf00      	nop
 800e93c:	3714      	adds	r7, #20
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	ffcfff8f 	.word	0xffcfff8f

0800e94c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b087      	sub	sp, #28
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
 800e958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	021a      	lsls	r2, r3, #8
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	431a      	orrs	r2, r3
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	4313      	orrs	r3, r2
 800e974:	697a      	ldr	r2, [r7, #20]
 800e976:	4313      	orrs	r3, r2
 800e978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	697a      	ldr	r2, [r7, #20]
 800e97e:	609a      	str	r2, [r3, #8]
}
 800e980:	bf00      	nop
 800e982:	371c      	adds	r7, #28
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b085      	sub	sp, #20
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d101      	bne.n	800e9a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9a0:	2302      	movs	r3, #2
 800e9a2:	e077      	b.n	800ea94 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2202      	movs	r2, #2
 800e9b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a35      	ldr	r2, [pc, #212]	@ (800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d004      	beq.n	800e9d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a34      	ldr	r2, [pc, #208]	@ (800eaa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d108      	bne.n	800e9ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e9de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a25      	ldr	r2, [pc, #148]	@ (800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d02c      	beq.n	800ea68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea16:	d027      	beq.n	800ea68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a22      	ldr	r2, [pc, #136]	@ (800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d022      	beq.n	800ea68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a21      	ldr	r2, [pc, #132]	@ (800eaac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d01d      	beq.n	800ea68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a1f      	ldr	r2, [pc, #124]	@ (800eab0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d018      	beq.n	800ea68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a1a      	ldr	r2, [pc, #104]	@ (800eaa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d013      	beq.n	800ea68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4a1b      	ldr	r2, [pc, #108]	@ (800eab4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d00e      	beq.n	800ea68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4a1a      	ldr	r2, [pc, #104]	@ (800eab8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d009      	beq.n	800ea68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4a18      	ldr	r2, [pc, #96]	@ (800eabc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d004      	beq.n	800ea68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4a17      	ldr	r2, [pc, #92]	@ (800eac0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d10c      	bne.n	800ea82 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	68ba      	ldr	r2, [r7, #8]
 800ea76:	4313      	orrs	r3, r2
 800ea78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	68ba      	ldr	r2, [r7, #8]
 800ea80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2201      	movs	r2, #1
 800ea86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	40010000 	.word	0x40010000
 800eaa4:	40010400 	.word	0x40010400
 800eaa8:	40000400 	.word	0x40000400
 800eaac:	40000800 	.word	0x40000800
 800eab0:	40000c00 	.word	0x40000c00
 800eab4:	40001800 	.word	0x40001800
 800eab8:	40014000 	.word	0x40014000
 800eabc:	4000e000 	.word	0x4000e000
 800eac0:	4000e400 	.word	0x4000e400

0800eac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eace:	2300      	movs	r3, #0
 800ead0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d101      	bne.n	800eae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eadc:	2302      	movs	r3, #2
 800eade:	e073      	b.n	800ebc8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	689b      	ldr	r3, [r3, #8]
 800eb00:	4313      	orrs	r3, r2
 800eb02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	691b      	ldr	r3, [r3, #16]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	695b      	ldr	r3, [r3, #20]
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb46:	4313      	orrs	r3, r2
 800eb48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	699b      	ldr	r3, [r3, #24]
 800eb54:	041b      	lsls	r3, r3, #16
 800eb56:	4313      	orrs	r3, r2
 800eb58:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	69db      	ldr	r3, [r3, #28]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a19      	ldr	r2, [pc, #100]	@ (800ebd4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d004      	beq.n	800eb7c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4a18      	ldr	r2, [pc, #96]	@ (800ebd8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d11c      	bne.n	800ebb6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb86:	051b      	lsls	r3, r3, #20
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	4313      	orrs	r3, r2
 800eb98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eba4:	4313      	orrs	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3714      	adds	r7, #20
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr
 800ebd4:	40010000 	.word	0x40010000
 800ebd8:	40010400 	.word	0x40010400

0800ebdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ebf8:	bf00      	nop
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec0c:	bf00      	nop
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d101      	bne.n	800ec2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec26:	2301      	movs	r3, #1
 800ec28:	e042      	b.n	800ecb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d106      	bne.n	800ec42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7f3 fd3d 	bl	80026bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2224      	movs	r2, #36	@ 0x24
 800ec46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f022 0201 	bic.w	r2, r2, #1
 800ec58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 ff22 	bl	800faac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 f8b3 	bl	800edd4 <UART_SetConfig>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d101      	bne.n	800ec78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ec74:	2301      	movs	r3, #1
 800ec76:	e01b      	b.n	800ecb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	685a      	ldr	r2, [r3, #4]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ec86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	689a      	ldr	r2, [r3, #8]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ec96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f042 0201 	orr.w	r2, r2, #1
 800eca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 ffa1 	bl	800fbf0 <UART_CheckIdleState>
 800ecae:	4603      	mov	r3, r0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b08a      	sub	sp, #40	@ 0x28
 800ecbc:	af02      	add	r7, sp, #8
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	603b      	str	r3, [r7, #0]
 800ecc4:	4613      	mov	r3, r2
 800ecc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecce:	2b20      	cmp	r3, #32
 800ecd0:	d17b      	bne.n	800edca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d002      	beq.n	800ecde <HAL_UART_Transmit+0x26>
 800ecd8:	88fb      	ldrh	r3, [r7, #6]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d101      	bne.n	800ece2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ecde:	2301      	movs	r3, #1
 800ece0:	e074      	b.n	800edcc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2221      	movs	r2, #33	@ 0x21
 800ecee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ecf2:	f7f3 ff73 	bl	8002bdc <HAL_GetTick>
 800ecf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	88fa      	ldrh	r2, [r7, #6]
 800ecfc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	88fa      	ldrh	r2, [r7, #6]
 800ed04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed10:	d108      	bne.n	800ed24 <HAL_UART_Transmit+0x6c>
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d104      	bne.n	800ed24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	61bb      	str	r3, [r7, #24]
 800ed22:	e003      	b.n	800ed2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ed2c:	e030      	b.n	800ed90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	2200      	movs	r2, #0
 800ed36:	2180      	movs	r1, #128	@ 0x80
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f001 f803 	bl	800fd44 <UART_WaitOnFlagUntilTimeout>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d005      	beq.n	800ed50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2220      	movs	r2, #32
 800ed48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ed4c:	2303      	movs	r3, #3
 800ed4e:	e03d      	b.n	800edcc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d10b      	bne.n	800ed6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	881b      	ldrh	r3, [r3, #0]
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	3302      	adds	r3, #2
 800ed6a:	61bb      	str	r3, [r7, #24]
 800ed6c:	e007      	b.n	800ed7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	781a      	ldrb	r2, [r3, #0]
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	3b01      	subs	r3, #1
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1c8      	bne.n	800ed2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	2200      	movs	r2, #0
 800eda4:	2140      	movs	r1, #64	@ 0x40
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f000 ffcc 	bl	800fd44 <UART_WaitOnFlagUntilTimeout>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d005      	beq.n	800edbe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2220      	movs	r2, #32
 800edb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800edba:	2303      	movs	r3, #3
 800edbc:	e006      	b.n	800edcc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2220      	movs	r2, #32
 800edc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800edc6:	2300      	movs	r3, #0
 800edc8:	e000      	b.n	800edcc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800edca:	2302      	movs	r3, #2
  }
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3720      	adds	r7, #32
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800edd8:	b092      	sub	sp, #72	@ 0x48
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	689a      	ldr	r2, [r3, #8]
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	431a      	orrs	r2, r3
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	695b      	ldr	r3, [r3, #20]
 800edf2:	431a      	orrs	r2, r3
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	69db      	ldr	r3, [r3, #28]
 800edf8:	4313      	orrs	r3, r2
 800edfa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	4bbe      	ldr	r3, [pc, #760]	@ (800f0fc <UART_SetConfig+0x328>)
 800ee04:	4013      	ands	r3, r2
 800ee06:	697a      	ldr	r2, [r7, #20]
 800ee08:	6812      	ldr	r2, [r2, #0]
 800ee0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ee0c:	430b      	orrs	r3, r1
 800ee0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	68da      	ldr	r2, [r3, #12]
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	430a      	orrs	r2, r1
 800ee24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	699b      	ldr	r3, [r3, #24]
 800ee2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4ab3      	ldr	r2, [pc, #716]	@ (800f100 <UART_SetConfig+0x32c>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d004      	beq.n	800ee40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	6a1b      	ldr	r3, [r3, #32]
 800ee3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	689a      	ldr	r2, [r3, #8]
 800ee46:	4baf      	ldr	r3, [pc, #700]	@ (800f104 <UART_SetConfig+0x330>)
 800ee48:	4013      	ands	r3, r2
 800ee4a:	697a      	ldr	r2, [r7, #20]
 800ee4c:	6812      	ldr	r2, [r2, #0]
 800ee4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ee50:	430b      	orrs	r3, r1
 800ee52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5a:	f023 010f 	bic.w	r1, r3, #15
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	430a      	orrs	r2, r1
 800ee68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4aa6      	ldr	r2, [pc, #664]	@ (800f108 <UART_SetConfig+0x334>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d177      	bne.n	800ef64 <UART_SetConfig+0x190>
 800ee74:	4ba5      	ldr	r3, [pc, #660]	@ (800f10c <UART_SetConfig+0x338>)
 800ee76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ee7c:	2b28      	cmp	r3, #40	@ 0x28
 800ee7e:	d86d      	bhi.n	800ef5c <UART_SetConfig+0x188>
 800ee80:	a201      	add	r2, pc, #4	@ (adr r2, 800ee88 <UART_SetConfig+0xb4>)
 800ee82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee86:	bf00      	nop
 800ee88:	0800ef2d 	.word	0x0800ef2d
 800ee8c:	0800ef5d 	.word	0x0800ef5d
 800ee90:	0800ef5d 	.word	0x0800ef5d
 800ee94:	0800ef5d 	.word	0x0800ef5d
 800ee98:	0800ef5d 	.word	0x0800ef5d
 800ee9c:	0800ef5d 	.word	0x0800ef5d
 800eea0:	0800ef5d 	.word	0x0800ef5d
 800eea4:	0800ef5d 	.word	0x0800ef5d
 800eea8:	0800ef35 	.word	0x0800ef35
 800eeac:	0800ef5d 	.word	0x0800ef5d
 800eeb0:	0800ef5d 	.word	0x0800ef5d
 800eeb4:	0800ef5d 	.word	0x0800ef5d
 800eeb8:	0800ef5d 	.word	0x0800ef5d
 800eebc:	0800ef5d 	.word	0x0800ef5d
 800eec0:	0800ef5d 	.word	0x0800ef5d
 800eec4:	0800ef5d 	.word	0x0800ef5d
 800eec8:	0800ef3d 	.word	0x0800ef3d
 800eecc:	0800ef5d 	.word	0x0800ef5d
 800eed0:	0800ef5d 	.word	0x0800ef5d
 800eed4:	0800ef5d 	.word	0x0800ef5d
 800eed8:	0800ef5d 	.word	0x0800ef5d
 800eedc:	0800ef5d 	.word	0x0800ef5d
 800eee0:	0800ef5d 	.word	0x0800ef5d
 800eee4:	0800ef5d 	.word	0x0800ef5d
 800eee8:	0800ef45 	.word	0x0800ef45
 800eeec:	0800ef5d 	.word	0x0800ef5d
 800eef0:	0800ef5d 	.word	0x0800ef5d
 800eef4:	0800ef5d 	.word	0x0800ef5d
 800eef8:	0800ef5d 	.word	0x0800ef5d
 800eefc:	0800ef5d 	.word	0x0800ef5d
 800ef00:	0800ef5d 	.word	0x0800ef5d
 800ef04:	0800ef5d 	.word	0x0800ef5d
 800ef08:	0800ef4d 	.word	0x0800ef4d
 800ef0c:	0800ef5d 	.word	0x0800ef5d
 800ef10:	0800ef5d 	.word	0x0800ef5d
 800ef14:	0800ef5d 	.word	0x0800ef5d
 800ef18:	0800ef5d 	.word	0x0800ef5d
 800ef1c:	0800ef5d 	.word	0x0800ef5d
 800ef20:	0800ef5d 	.word	0x0800ef5d
 800ef24:	0800ef5d 	.word	0x0800ef5d
 800ef28:	0800ef55 	.word	0x0800ef55
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef32:	e326      	b.n	800f582 <UART_SetConfig+0x7ae>
 800ef34:	2304      	movs	r3, #4
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3a:	e322      	b.n	800f582 <UART_SetConfig+0x7ae>
 800ef3c:	2308      	movs	r3, #8
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef42:	e31e      	b.n	800f582 <UART_SetConfig+0x7ae>
 800ef44:	2310      	movs	r3, #16
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4a:	e31a      	b.n	800f582 <UART_SetConfig+0x7ae>
 800ef4c:	2320      	movs	r3, #32
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef52:	e316      	b.n	800f582 <UART_SetConfig+0x7ae>
 800ef54:	2340      	movs	r3, #64	@ 0x40
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5a:	e312      	b.n	800f582 <UART_SetConfig+0x7ae>
 800ef5c:	2380      	movs	r3, #128	@ 0x80
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef62:	e30e      	b.n	800f582 <UART_SetConfig+0x7ae>
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a69      	ldr	r2, [pc, #420]	@ (800f110 <UART_SetConfig+0x33c>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d130      	bne.n	800efd0 <UART_SetConfig+0x1fc>
 800ef6e:	4b67      	ldr	r3, [pc, #412]	@ (800f10c <UART_SetConfig+0x338>)
 800ef70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef72:	f003 0307 	and.w	r3, r3, #7
 800ef76:	2b05      	cmp	r3, #5
 800ef78:	d826      	bhi.n	800efc8 <UART_SetConfig+0x1f4>
 800ef7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef80 <UART_SetConfig+0x1ac>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800ef99 	.word	0x0800ef99
 800ef84:	0800efa1 	.word	0x0800efa1
 800ef88:	0800efa9 	.word	0x0800efa9
 800ef8c:	0800efb1 	.word	0x0800efb1
 800ef90:	0800efb9 	.word	0x0800efb9
 800ef94:	0800efc1 	.word	0x0800efc1
 800ef98:	2300      	movs	r3, #0
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef9e:	e2f0      	b.n	800f582 <UART_SetConfig+0x7ae>
 800efa0:	2304      	movs	r3, #4
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efa6:	e2ec      	b.n	800f582 <UART_SetConfig+0x7ae>
 800efa8:	2308      	movs	r3, #8
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efae:	e2e8      	b.n	800f582 <UART_SetConfig+0x7ae>
 800efb0:	2310      	movs	r3, #16
 800efb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efb6:	e2e4      	b.n	800f582 <UART_SetConfig+0x7ae>
 800efb8:	2320      	movs	r3, #32
 800efba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efbe:	e2e0      	b.n	800f582 <UART_SetConfig+0x7ae>
 800efc0:	2340      	movs	r3, #64	@ 0x40
 800efc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc6:	e2dc      	b.n	800f582 <UART_SetConfig+0x7ae>
 800efc8:	2380      	movs	r3, #128	@ 0x80
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efce:	e2d8      	b.n	800f582 <UART_SetConfig+0x7ae>
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a4f      	ldr	r2, [pc, #316]	@ (800f114 <UART_SetConfig+0x340>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d130      	bne.n	800f03c <UART_SetConfig+0x268>
 800efda:	4b4c      	ldr	r3, [pc, #304]	@ (800f10c <UART_SetConfig+0x338>)
 800efdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efde:	f003 0307 	and.w	r3, r3, #7
 800efe2:	2b05      	cmp	r3, #5
 800efe4:	d826      	bhi.n	800f034 <UART_SetConfig+0x260>
 800efe6:	a201      	add	r2, pc, #4	@ (adr r2, 800efec <UART_SetConfig+0x218>)
 800efe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efec:	0800f005 	.word	0x0800f005
 800eff0:	0800f00d 	.word	0x0800f00d
 800eff4:	0800f015 	.word	0x0800f015
 800eff8:	0800f01d 	.word	0x0800f01d
 800effc:	0800f025 	.word	0x0800f025
 800f000:	0800f02d 	.word	0x0800f02d
 800f004:	2300      	movs	r3, #0
 800f006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f00a:	e2ba      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f00c:	2304      	movs	r3, #4
 800f00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f012:	e2b6      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f014:	2308      	movs	r3, #8
 800f016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f01a:	e2b2      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f01c:	2310      	movs	r3, #16
 800f01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f022:	e2ae      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f024:	2320      	movs	r3, #32
 800f026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f02a:	e2aa      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f02c:	2340      	movs	r3, #64	@ 0x40
 800f02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f032:	e2a6      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f034:	2380      	movs	r3, #128	@ 0x80
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f03a:	e2a2      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	4a35      	ldr	r2, [pc, #212]	@ (800f118 <UART_SetConfig+0x344>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d130      	bne.n	800f0a8 <UART_SetConfig+0x2d4>
 800f046:	4b31      	ldr	r3, [pc, #196]	@ (800f10c <UART_SetConfig+0x338>)
 800f048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f04a:	f003 0307 	and.w	r3, r3, #7
 800f04e:	2b05      	cmp	r3, #5
 800f050:	d826      	bhi.n	800f0a0 <UART_SetConfig+0x2cc>
 800f052:	a201      	add	r2, pc, #4	@ (adr r2, 800f058 <UART_SetConfig+0x284>)
 800f054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f058:	0800f071 	.word	0x0800f071
 800f05c:	0800f079 	.word	0x0800f079
 800f060:	0800f081 	.word	0x0800f081
 800f064:	0800f089 	.word	0x0800f089
 800f068:	0800f091 	.word	0x0800f091
 800f06c:	0800f099 	.word	0x0800f099
 800f070:	2300      	movs	r3, #0
 800f072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f076:	e284      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f078:	2304      	movs	r3, #4
 800f07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f07e:	e280      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f080:	2308      	movs	r3, #8
 800f082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f086:	e27c      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f088:	2310      	movs	r3, #16
 800f08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f08e:	e278      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f090:	2320      	movs	r3, #32
 800f092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f096:	e274      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f098:	2340      	movs	r3, #64	@ 0x40
 800f09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f09e:	e270      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f0a0:	2380      	movs	r3, #128	@ 0x80
 800f0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0a6:	e26c      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a1b      	ldr	r2, [pc, #108]	@ (800f11c <UART_SetConfig+0x348>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d142      	bne.n	800f138 <UART_SetConfig+0x364>
 800f0b2:	4b16      	ldr	r3, [pc, #88]	@ (800f10c <UART_SetConfig+0x338>)
 800f0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0b6:	f003 0307 	and.w	r3, r3, #7
 800f0ba:	2b05      	cmp	r3, #5
 800f0bc:	d838      	bhi.n	800f130 <UART_SetConfig+0x35c>
 800f0be:	a201      	add	r2, pc, #4	@ (adr r2, 800f0c4 <UART_SetConfig+0x2f0>)
 800f0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c4:	0800f0dd 	.word	0x0800f0dd
 800f0c8:	0800f0e5 	.word	0x0800f0e5
 800f0cc:	0800f0ed 	.word	0x0800f0ed
 800f0d0:	0800f0f5 	.word	0x0800f0f5
 800f0d4:	0800f121 	.word	0x0800f121
 800f0d8:	0800f129 	.word	0x0800f129
 800f0dc:	2300      	movs	r3, #0
 800f0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0e2:	e24e      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f0e4:	2304      	movs	r3, #4
 800f0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ea:	e24a      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f0ec:	2308      	movs	r3, #8
 800f0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0f2:	e246      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f0f4:	2310      	movs	r3, #16
 800f0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0fa:	e242      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f0fc:	cfff69f3 	.word	0xcfff69f3
 800f100:	58000c00 	.word	0x58000c00
 800f104:	11fff4ff 	.word	0x11fff4ff
 800f108:	40011000 	.word	0x40011000
 800f10c:	58024400 	.word	0x58024400
 800f110:	40004400 	.word	0x40004400
 800f114:	40004800 	.word	0x40004800
 800f118:	40004c00 	.word	0x40004c00
 800f11c:	40005000 	.word	0x40005000
 800f120:	2320      	movs	r3, #32
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f126:	e22c      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f128:	2340      	movs	r3, #64	@ 0x40
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f12e:	e228      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f130:	2380      	movs	r3, #128	@ 0x80
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f136:	e224      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4ab1      	ldr	r2, [pc, #708]	@ (800f404 <UART_SetConfig+0x630>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d176      	bne.n	800f230 <UART_SetConfig+0x45c>
 800f142:	4bb1      	ldr	r3, [pc, #708]	@ (800f408 <UART_SetConfig+0x634>)
 800f144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f146:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f14a:	2b28      	cmp	r3, #40	@ 0x28
 800f14c:	d86c      	bhi.n	800f228 <UART_SetConfig+0x454>
 800f14e:	a201      	add	r2, pc, #4	@ (adr r2, 800f154 <UART_SetConfig+0x380>)
 800f150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f154:	0800f1f9 	.word	0x0800f1f9
 800f158:	0800f229 	.word	0x0800f229
 800f15c:	0800f229 	.word	0x0800f229
 800f160:	0800f229 	.word	0x0800f229
 800f164:	0800f229 	.word	0x0800f229
 800f168:	0800f229 	.word	0x0800f229
 800f16c:	0800f229 	.word	0x0800f229
 800f170:	0800f229 	.word	0x0800f229
 800f174:	0800f201 	.word	0x0800f201
 800f178:	0800f229 	.word	0x0800f229
 800f17c:	0800f229 	.word	0x0800f229
 800f180:	0800f229 	.word	0x0800f229
 800f184:	0800f229 	.word	0x0800f229
 800f188:	0800f229 	.word	0x0800f229
 800f18c:	0800f229 	.word	0x0800f229
 800f190:	0800f229 	.word	0x0800f229
 800f194:	0800f209 	.word	0x0800f209
 800f198:	0800f229 	.word	0x0800f229
 800f19c:	0800f229 	.word	0x0800f229
 800f1a0:	0800f229 	.word	0x0800f229
 800f1a4:	0800f229 	.word	0x0800f229
 800f1a8:	0800f229 	.word	0x0800f229
 800f1ac:	0800f229 	.word	0x0800f229
 800f1b0:	0800f229 	.word	0x0800f229
 800f1b4:	0800f211 	.word	0x0800f211
 800f1b8:	0800f229 	.word	0x0800f229
 800f1bc:	0800f229 	.word	0x0800f229
 800f1c0:	0800f229 	.word	0x0800f229
 800f1c4:	0800f229 	.word	0x0800f229
 800f1c8:	0800f229 	.word	0x0800f229
 800f1cc:	0800f229 	.word	0x0800f229
 800f1d0:	0800f229 	.word	0x0800f229
 800f1d4:	0800f219 	.word	0x0800f219
 800f1d8:	0800f229 	.word	0x0800f229
 800f1dc:	0800f229 	.word	0x0800f229
 800f1e0:	0800f229 	.word	0x0800f229
 800f1e4:	0800f229 	.word	0x0800f229
 800f1e8:	0800f229 	.word	0x0800f229
 800f1ec:	0800f229 	.word	0x0800f229
 800f1f0:	0800f229 	.word	0x0800f229
 800f1f4:	0800f221 	.word	0x0800f221
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1fe:	e1c0      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f200:	2304      	movs	r3, #4
 800f202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f206:	e1bc      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f208:	2308      	movs	r3, #8
 800f20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f20e:	e1b8      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f210:	2310      	movs	r3, #16
 800f212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f216:	e1b4      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f218:	2320      	movs	r3, #32
 800f21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f21e:	e1b0      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f220:	2340      	movs	r3, #64	@ 0x40
 800f222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f226:	e1ac      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f228:	2380      	movs	r3, #128	@ 0x80
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22e:	e1a8      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a75      	ldr	r2, [pc, #468]	@ (800f40c <UART_SetConfig+0x638>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d130      	bne.n	800f29c <UART_SetConfig+0x4c8>
 800f23a:	4b73      	ldr	r3, [pc, #460]	@ (800f408 <UART_SetConfig+0x634>)
 800f23c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f23e:	f003 0307 	and.w	r3, r3, #7
 800f242:	2b05      	cmp	r3, #5
 800f244:	d826      	bhi.n	800f294 <UART_SetConfig+0x4c0>
 800f246:	a201      	add	r2, pc, #4	@ (adr r2, 800f24c <UART_SetConfig+0x478>)
 800f248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f24c:	0800f265 	.word	0x0800f265
 800f250:	0800f26d 	.word	0x0800f26d
 800f254:	0800f275 	.word	0x0800f275
 800f258:	0800f27d 	.word	0x0800f27d
 800f25c:	0800f285 	.word	0x0800f285
 800f260:	0800f28d 	.word	0x0800f28d
 800f264:	2300      	movs	r3, #0
 800f266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f26a:	e18a      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f26c:	2304      	movs	r3, #4
 800f26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f272:	e186      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f274:	2308      	movs	r3, #8
 800f276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f27a:	e182      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f27c:	2310      	movs	r3, #16
 800f27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f282:	e17e      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f284:	2320      	movs	r3, #32
 800f286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f28a:	e17a      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f28c:	2340      	movs	r3, #64	@ 0x40
 800f28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f292:	e176      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f294:	2380      	movs	r3, #128	@ 0x80
 800f296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f29a:	e172      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a5b      	ldr	r2, [pc, #364]	@ (800f410 <UART_SetConfig+0x63c>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d130      	bne.n	800f308 <UART_SetConfig+0x534>
 800f2a6:	4b58      	ldr	r3, [pc, #352]	@ (800f408 <UART_SetConfig+0x634>)
 800f2a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2aa:	f003 0307 	and.w	r3, r3, #7
 800f2ae:	2b05      	cmp	r3, #5
 800f2b0:	d826      	bhi.n	800f300 <UART_SetConfig+0x52c>
 800f2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2b8 <UART_SetConfig+0x4e4>)
 800f2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b8:	0800f2d1 	.word	0x0800f2d1
 800f2bc:	0800f2d9 	.word	0x0800f2d9
 800f2c0:	0800f2e1 	.word	0x0800f2e1
 800f2c4:	0800f2e9 	.word	0x0800f2e9
 800f2c8:	0800f2f1 	.word	0x0800f2f1
 800f2cc:	0800f2f9 	.word	0x0800f2f9
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2d6:	e154      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f2d8:	2304      	movs	r3, #4
 800f2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2de:	e150      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f2e0:	2308      	movs	r3, #8
 800f2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2e6:	e14c      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f2e8:	2310      	movs	r3, #16
 800f2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ee:	e148      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f2f0:	2320      	movs	r3, #32
 800f2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2f6:	e144      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f2f8:	2340      	movs	r3, #64	@ 0x40
 800f2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2fe:	e140      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f300:	2380      	movs	r3, #128	@ 0x80
 800f302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f306:	e13c      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a41      	ldr	r2, [pc, #260]	@ (800f414 <UART_SetConfig+0x640>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	f040 8082 	bne.w	800f418 <UART_SetConfig+0x644>
 800f314:	4b3c      	ldr	r3, [pc, #240]	@ (800f408 <UART_SetConfig+0x634>)
 800f316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f318:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f31c:	2b28      	cmp	r3, #40	@ 0x28
 800f31e:	d86d      	bhi.n	800f3fc <UART_SetConfig+0x628>
 800f320:	a201      	add	r2, pc, #4	@ (adr r2, 800f328 <UART_SetConfig+0x554>)
 800f322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f326:	bf00      	nop
 800f328:	0800f3cd 	.word	0x0800f3cd
 800f32c:	0800f3fd 	.word	0x0800f3fd
 800f330:	0800f3fd 	.word	0x0800f3fd
 800f334:	0800f3fd 	.word	0x0800f3fd
 800f338:	0800f3fd 	.word	0x0800f3fd
 800f33c:	0800f3fd 	.word	0x0800f3fd
 800f340:	0800f3fd 	.word	0x0800f3fd
 800f344:	0800f3fd 	.word	0x0800f3fd
 800f348:	0800f3d5 	.word	0x0800f3d5
 800f34c:	0800f3fd 	.word	0x0800f3fd
 800f350:	0800f3fd 	.word	0x0800f3fd
 800f354:	0800f3fd 	.word	0x0800f3fd
 800f358:	0800f3fd 	.word	0x0800f3fd
 800f35c:	0800f3fd 	.word	0x0800f3fd
 800f360:	0800f3fd 	.word	0x0800f3fd
 800f364:	0800f3fd 	.word	0x0800f3fd
 800f368:	0800f3dd 	.word	0x0800f3dd
 800f36c:	0800f3fd 	.word	0x0800f3fd
 800f370:	0800f3fd 	.word	0x0800f3fd
 800f374:	0800f3fd 	.word	0x0800f3fd
 800f378:	0800f3fd 	.word	0x0800f3fd
 800f37c:	0800f3fd 	.word	0x0800f3fd
 800f380:	0800f3fd 	.word	0x0800f3fd
 800f384:	0800f3fd 	.word	0x0800f3fd
 800f388:	0800f3e5 	.word	0x0800f3e5
 800f38c:	0800f3fd 	.word	0x0800f3fd
 800f390:	0800f3fd 	.word	0x0800f3fd
 800f394:	0800f3fd 	.word	0x0800f3fd
 800f398:	0800f3fd 	.word	0x0800f3fd
 800f39c:	0800f3fd 	.word	0x0800f3fd
 800f3a0:	0800f3fd 	.word	0x0800f3fd
 800f3a4:	0800f3fd 	.word	0x0800f3fd
 800f3a8:	0800f3ed 	.word	0x0800f3ed
 800f3ac:	0800f3fd 	.word	0x0800f3fd
 800f3b0:	0800f3fd 	.word	0x0800f3fd
 800f3b4:	0800f3fd 	.word	0x0800f3fd
 800f3b8:	0800f3fd 	.word	0x0800f3fd
 800f3bc:	0800f3fd 	.word	0x0800f3fd
 800f3c0:	0800f3fd 	.word	0x0800f3fd
 800f3c4:	0800f3fd 	.word	0x0800f3fd
 800f3c8:	0800f3f5 	.word	0x0800f3f5
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3d2:	e0d6      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f3d4:	2304      	movs	r3, #4
 800f3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3da:	e0d2      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f3dc:	2308      	movs	r3, #8
 800f3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3e2:	e0ce      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f3e4:	2310      	movs	r3, #16
 800f3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ea:	e0ca      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f3ec:	2320      	movs	r3, #32
 800f3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f2:	e0c6      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f3f4:	2340      	movs	r3, #64	@ 0x40
 800f3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fa:	e0c2      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f3fc:	2380      	movs	r3, #128	@ 0x80
 800f3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f402:	e0be      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f404:	40011400 	.word	0x40011400
 800f408:	58024400 	.word	0x58024400
 800f40c:	40007800 	.word	0x40007800
 800f410:	40007c00 	.word	0x40007c00
 800f414:	40011800 	.word	0x40011800
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4aad      	ldr	r2, [pc, #692]	@ (800f6d4 <UART_SetConfig+0x900>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d176      	bne.n	800f510 <UART_SetConfig+0x73c>
 800f422:	4bad      	ldr	r3, [pc, #692]	@ (800f6d8 <UART_SetConfig+0x904>)
 800f424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f42a:	2b28      	cmp	r3, #40	@ 0x28
 800f42c:	d86c      	bhi.n	800f508 <UART_SetConfig+0x734>
 800f42e:	a201      	add	r2, pc, #4	@ (adr r2, 800f434 <UART_SetConfig+0x660>)
 800f430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f434:	0800f4d9 	.word	0x0800f4d9
 800f438:	0800f509 	.word	0x0800f509
 800f43c:	0800f509 	.word	0x0800f509
 800f440:	0800f509 	.word	0x0800f509
 800f444:	0800f509 	.word	0x0800f509
 800f448:	0800f509 	.word	0x0800f509
 800f44c:	0800f509 	.word	0x0800f509
 800f450:	0800f509 	.word	0x0800f509
 800f454:	0800f4e1 	.word	0x0800f4e1
 800f458:	0800f509 	.word	0x0800f509
 800f45c:	0800f509 	.word	0x0800f509
 800f460:	0800f509 	.word	0x0800f509
 800f464:	0800f509 	.word	0x0800f509
 800f468:	0800f509 	.word	0x0800f509
 800f46c:	0800f509 	.word	0x0800f509
 800f470:	0800f509 	.word	0x0800f509
 800f474:	0800f4e9 	.word	0x0800f4e9
 800f478:	0800f509 	.word	0x0800f509
 800f47c:	0800f509 	.word	0x0800f509
 800f480:	0800f509 	.word	0x0800f509
 800f484:	0800f509 	.word	0x0800f509
 800f488:	0800f509 	.word	0x0800f509
 800f48c:	0800f509 	.word	0x0800f509
 800f490:	0800f509 	.word	0x0800f509
 800f494:	0800f4f1 	.word	0x0800f4f1
 800f498:	0800f509 	.word	0x0800f509
 800f49c:	0800f509 	.word	0x0800f509
 800f4a0:	0800f509 	.word	0x0800f509
 800f4a4:	0800f509 	.word	0x0800f509
 800f4a8:	0800f509 	.word	0x0800f509
 800f4ac:	0800f509 	.word	0x0800f509
 800f4b0:	0800f509 	.word	0x0800f509
 800f4b4:	0800f4f9 	.word	0x0800f4f9
 800f4b8:	0800f509 	.word	0x0800f509
 800f4bc:	0800f509 	.word	0x0800f509
 800f4c0:	0800f509 	.word	0x0800f509
 800f4c4:	0800f509 	.word	0x0800f509
 800f4c8:	0800f509 	.word	0x0800f509
 800f4cc:	0800f509 	.word	0x0800f509
 800f4d0:	0800f509 	.word	0x0800f509
 800f4d4:	0800f501 	.word	0x0800f501
 800f4d8:	2301      	movs	r3, #1
 800f4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4de:	e050      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f4e0:	2304      	movs	r3, #4
 800f4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4e6:	e04c      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f4e8:	2308      	movs	r3, #8
 800f4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ee:	e048      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f4f0:	2310      	movs	r3, #16
 800f4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4f6:	e044      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f4f8:	2320      	movs	r3, #32
 800f4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4fe:	e040      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f500:	2340      	movs	r3, #64	@ 0x40
 800f502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f506:	e03c      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f508:	2380      	movs	r3, #128	@ 0x80
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50e:	e038      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4a71      	ldr	r2, [pc, #452]	@ (800f6dc <UART_SetConfig+0x908>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d130      	bne.n	800f57c <UART_SetConfig+0x7a8>
 800f51a:	4b6f      	ldr	r3, [pc, #444]	@ (800f6d8 <UART_SetConfig+0x904>)
 800f51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f51e:	f003 0307 	and.w	r3, r3, #7
 800f522:	2b05      	cmp	r3, #5
 800f524:	d826      	bhi.n	800f574 <UART_SetConfig+0x7a0>
 800f526:	a201      	add	r2, pc, #4	@ (adr r2, 800f52c <UART_SetConfig+0x758>)
 800f528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f52c:	0800f545 	.word	0x0800f545
 800f530:	0800f54d 	.word	0x0800f54d
 800f534:	0800f555 	.word	0x0800f555
 800f538:	0800f55d 	.word	0x0800f55d
 800f53c:	0800f565 	.word	0x0800f565
 800f540:	0800f56d 	.word	0x0800f56d
 800f544:	2302      	movs	r3, #2
 800f546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f54a:	e01a      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f54c:	2304      	movs	r3, #4
 800f54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f552:	e016      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f554:	2308      	movs	r3, #8
 800f556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f55a:	e012      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f55c:	2310      	movs	r3, #16
 800f55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f562:	e00e      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f564:	2320      	movs	r3, #32
 800f566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f56a:	e00a      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f56c:	2340      	movs	r3, #64	@ 0x40
 800f56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f572:	e006      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f574:	2380      	movs	r3, #128	@ 0x80
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57a:	e002      	b.n	800f582 <UART_SetConfig+0x7ae>
 800f57c:	2380      	movs	r3, #128	@ 0x80
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4a55      	ldr	r2, [pc, #340]	@ (800f6dc <UART_SetConfig+0x908>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	f040 80f8 	bne.w	800f77e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f58e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f592:	2b20      	cmp	r3, #32
 800f594:	dc46      	bgt.n	800f624 <UART_SetConfig+0x850>
 800f596:	2b02      	cmp	r3, #2
 800f598:	db75      	blt.n	800f686 <UART_SetConfig+0x8b2>
 800f59a:	3b02      	subs	r3, #2
 800f59c:	2b1e      	cmp	r3, #30
 800f59e:	d872      	bhi.n	800f686 <UART_SetConfig+0x8b2>
 800f5a0:	a201      	add	r2, pc, #4	@ (adr r2, 800f5a8 <UART_SetConfig+0x7d4>)
 800f5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a6:	bf00      	nop
 800f5a8:	0800f62b 	.word	0x0800f62b
 800f5ac:	0800f687 	.word	0x0800f687
 800f5b0:	0800f633 	.word	0x0800f633
 800f5b4:	0800f687 	.word	0x0800f687
 800f5b8:	0800f687 	.word	0x0800f687
 800f5bc:	0800f687 	.word	0x0800f687
 800f5c0:	0800f643 	.word	0x0800f643
 800f5c4:	0800f687 	.word	0x0800f687
 800f5c8:	0800f687 	.word	0x0800f687
 800f5cc:	0800f687 	.word	0x0800f687
 800f5d0:	0800f687 	.word	0x0800f687
 800f5d4:	0800f687 	.word	0x0800f687
 800f5d8:	0800f687 	.word	0x0800f687
 800f5dc:	0800f687 	.word	0x0800f687
 800f5e0:	0800f653 	.word	0x0800f653
 800f5e4:	0800f687 	.word	0x0800f687
 800f5e8:	0800f687 	.word	0x0800f687
 800f5ec:	0800f687 	.word	0x0800f687
 800f5f0:	0800f687 	.word	0x0800f687
 800f5f4:	0800f687 	.word	0x0800f687
 800f5f8:	0800f687 	.word	0x0800f687
 800f5fc:	0800f687 	.word	0x0800f687
 800f600:	0800f687 	.word	0x0800f687
 800f604:	0800f687 	.word	0x0800f687
 800f608:	0800f687 	.word	0x0800f687
 800f60c:	0800f687 	.word	0x0800f687
 800f610:	0800f687 	.word	0x0800f687
 800f614:	0800f687 	.word	0x0800f687
 800f618:	0800f687 	.word	0x0800f687
 800f61c:	0800f687 	.word	0x0800f687
 800f620:	0800f679 	.word	0x0800f679
 800f624:	2b40      	cmp	r3, #64	@ 0x40
 800f626:	d02a      	beq.n	800f67e <UART_SetConfig+0x8aa>
 800f628:	e02d      	b.n	800f686 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f62a:	f7fb ff37 	bl	800b49c <HAL_RCCEx_GetD3PCLK1Freq>
 800f62e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f630:	e02f      	b.n	800f692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f636:	4618      	mov	r0, r3
 800f638:	f7fb ff46 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f640:	e027      	b.n	800f692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f642:	f107 0318 	add.w	r3, r7, #24
 800f646:	4618      	mov	r0, r3
 800f648:	f7fc f892 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f650:	e01f      	b.n	800f692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f652:	4b21      	ldr	r3, [pc, #132]	@ (800f6d8 <UART_SetConfig+0x904>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f003 0320 	and.w	r3, r3, #32
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d009      	beq.n	800f672 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f65e:	4b1e      	ldr	r3, [pc, #120]	@ (800f6d8 <UART_SetConfig+0x904>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	08db      	lsrs	r3, r3, #3
 800f664:	f003 0303 	and.w	r3, r3, #3
 800f668:	4a1d      	ldr	r2, [pc, #116]	@ (800f6e0 <UART_SetConfig+0x90c>)
 800f66a:	fa22 f303 	lsr.w	r3, r2, r3
 800f66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f670:	e00f      	b.n	800f692 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f672:	4b1b      	ldr	r3, [pc, #108]	@ (800f6e0 <UART_SetConfig+0x90c>)
 800f674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f676:	e00c      	b.n	800f692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f678:	4b1a      	ldr	r3, [pc, #104]	@ (800f6e4 <UART_SetConfig+0x910>)
 800f67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f67c:	e009      	b.n	800f692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f67e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f684:	e005      	b.n	800f692 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f686:	2300      	movs	r3, #0
 800f688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f68a:	2301      	movs	r3, #1
 800f68c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f694:	2b00      	cmp	r3, #0
 800f696:	f000 81ee 	beq.w	800fa76 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f69e:	4a12      	ldr	r2, [pc, #72]	@ (800f6e8 <UART_SetConfig+0x914>)
 800f6a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	685a      	ldr	r2, [r3, #4]
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	005b      	lsls	r3, r3, #1
 800f6b6:	4413      	add	r3, r2
 800f6b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d305      	bcc.n	800f6ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d910      	bls.n	800f6ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f6d0:	e1d1      	b.n	800fa76 <UART_SetConfig+0xca2>
 800f6d2:	bf00      	nop
 800f6d4:	40011c00 	.word	0x40011c00
 800f6d8:	58024400 	.word	0x58024400
 800f6dc:	58000c00 	.word	0x58000c00
 800f6e0:	03d09000 	.word	0x03d09000
 800f6e4:	003d0900 	.word	0x003d0900
 800f6e8:	08011e3c 	.word	0x08011e3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	60bb      	str	r3, [r7, #8]
 800f6f2:	60fa      	str	r2, [r7, #12]
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6f8:	4ac0      	ldr	r2, [pc, #768]	@ (800f9fc <UART_SetConfig+0xc28>)
 800f6fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	2200      	movs	r2, #0
 800f702:	603b      	str	r3, [r7, #0]
 800f704:	607a      	str	r2, [r7, #4]
 800f706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f70a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f70e:	f7f0 fe57 	bl	80003c0 <__aeabi_uldivmod>
 800f712:	4602      	mov	r2, r0
 800f714:	460b      	mov	r3, r1
 800f716:	4610      	mov	r0, r2
 800f718:	4619      	mov	r1, r3
 800f71a:	f04f 0200 	mov.w	r2, #0
 800f71e:	f04f 0300 	mov.w	r3, #0
 800f722:	020b      	lsls	r3, r1, #8
 800f724:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f728:	0202      	lsls	r2, r0, #8
 800f72a:	6979      	ldr	r1, [r7, #20]
 800f72c:	6849      	ldr	r1, [r1, #4]
 800f72e:	0849      	lsrs	r1, r1, #1
 800f730:	2000      	movs	r0, #0
 800f732:	460c      	mov	r4, r1
 800f734:	4605      	mov	r5, r0
 800f736:	eb12 0804 	adds.w	r8, r2, r4
 800f73a:	eb43 0905 	adc.w	r9, r3, r5
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	469a      	mov	sl, r3
 800f746:	4693      	mov	fp, r2
 800f748:	4652      	mov	r2, sl
 800f74a:	465b      	mov	r3, fp
 800f74c:	4640      	mov	r0, r8
 800f74e:	4649      	mov	r1, r9
 800f750:	f7f0 fe36 	bl	80003c0 <__aeabi_uldivmod>
 800f754:	4602      	mov	r2, r0
 800f756:	460b      	mov	r3, r1
 800f758:	4613      	mov	r3, r2
 800f75a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f762:	d308      	bcc.n	800f776 <UART_SetConfig+0x9a2>
 800f764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f76a:	d204      	bcs.n	800f776 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f772:	60da      	str	r2, [r3, #12]
 800f774:	e17f      	b.n	800fa76 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f776:	2301      	movs	r3, #1
 800f778:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f77c:	e17b      	b.n	800fa76 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	69db      	ldr	r3, [r3, #28]
 800f782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f786:	f040 80bd 	bne.w	800f904 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f78a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f78e:	2b20      	cmp	r3, #32
 800f790:	dc48      	bgt.n	800f824 <UART_SetConfig+0xa50>
 800f792:	2b00      	cmp	r3, #0
 800f794:	db7b      	blt.n	800f88e <UART_SetConfig+0xaba>
 800f796:	2b20      	cmp	r3, #32
 800f798:	d879      	bhi.n	800f88e <UART_SetConfig+0xaba>
 800f79a:	a201      	add	r2, pc, #4	@ (adr r2, 800f7a0 <UART_SetConfig+0x9cc>)
 800f79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a0:	0800f82b 	.word	0x0800f82b
 800f7a4:	0800f833 	.word	0x0800f833
 800f7a8:	0800f88f 	.word	0x0800f88f
 800f7ac:	0800f88f 	.word	0x0800f88f
 800f7b0:	0800f83b 	.word	0x0800f83b
 800f7b4:	0800f88f 	.word	0x0800f88f
 800f7b8:	0800f88f 	.word	0x0800f88f
 800f7bc:	0800f88f 	.word	0x0800f88f
 800f7c0:	0800f84b 	.word	0x0800f84b
 800f7c4:	0800f88f 	.word	0x0800f88f
 800f7c8:	0800f88f 	.word	0x0800f88f
 800f7cc:	0800f88f 	.word	0x0800f88f
 800f7d0:	0800f88f 	.word	0x0800f88f
 800f7d4:	0800f88f 	.word	0x0800f88f
 800f7d8:	0800f88f 	.word	0x0800f88f
 800f7dc:	0800f88f 	.word	0x0800f88f
 800f7e0:	0800f85b 	.word	0x0800f85b
 800f7e4:	0800f88f 	.word	0x0800f88f
 800f7e8:	0800f88f 	.word	0x0800f88f
 800f7ec:	0800f88f 	.word	0x0800f88f
 800f7f0:	0800f88f 	.word	0x0800f88f
 800f7f4:	0800f88f 	.word	0x0800f88f
 800f7f8:	0800f88f 	.word	0x0800f88f
 800f7fc:	0800f88f 	.word	0x0800f88f
 800f800:	0800f88f 	.word	0x0800f88f
 800f804:	0800f88f 	.word	0x0800f88f
 800f808:	0800f88f 	.word	0x0800f88f
 800f80c:	0800f88f 	.word	0x0800f88f
 800f810:	0800f88f 	.word	0x0800f88f
 800f814:	0800f88f 	.word	0x0800f88f
 800f818:	0800f88f 	.word	0x0800f88f
 800f81c:	0800f88f 	.word	0x0800f88f
 800f820:	0800f881 	.word	0x0800f881
 800f824:	2b40      	cmp	r3, #64	@ 0x40
 800f826:	d02e      	beq.n	800f886 <UART_SetConfig+0xab2>
 800f828:	e031      	b.n	800f88e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f82a:	f7f9 ff99 	bl	8009760 <HAL_RCC_GetPCLK1Freq>
 800f82e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f830:	e033      	b.n	800f89a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f832:	f7f9 ffab 	bl	800978c <HAL_RCC_GetPCLK2Freq>
 800f836:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f838:	e02f      	b.n	800f89a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f83a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fb fe42 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f848:	e027      	b.n	800f89a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f84a:	f107 0318 	add.w	r3, r7, #24
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fb ff8e 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f858:	e01f      	b.n	800f89a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f85a:	4b69      	ldr	r3, [pc, #420]	@ (800fa00 <UART_SetConfig+0xc2c>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f003 0320 	and.w	r3, r3, #32
 800f862:	2b00      	cmp	r3, #0
 800f864:	d009      	beq.n	800f87a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f866:	4b66      	ldr	r3, [pc, #408]	@ (800fa00 <UART_SetConfig+0xc2c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	08db      	lsrs	r3, r3, #3
 800f86c:	f003 0303 	and.w	r3, r3, #3
 800f870:	4a64      	ldr	r2, [pc, #400]	@ (800fa04 <UART_SetConfig+0xc30>)
 800f872:	fa22 f303 	lsr.w	r3, r2, r3
 800f876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f878:	e00f      	b.n	800f89a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f87a:	4b62      	ldr	r3, [pc, #392]	@ (800fa04 <UART_SetConfig+0xc30>)
 800f87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f87e:	e00c      	b.n	800f89a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f880:	4b61      	ldr	r3, [pc, #388]	@ (800fa08 <UART_SetConfig+0xc34>)
 800f882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f884:	e009      	b.n	800f89a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f88c:	e005      	b.n	800f89a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f88e:	2300      	movs	r3, #0
 800f890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f892:	2301      	movs	r3, #1
 800f894:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f898:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f89a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f000 80ea 	beq.w	800fa76 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8a6:	4a55      	ldr	r2, [pc, #340]	@ (800f9fc <UART_SetConfig+0xc28>)
 800f8a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8b4:	005a      	lsls	r2, r3, #1
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	085b      	lsrs	r3, r3, #1
 800f8bc:	441a      	add	r2, r3
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ca:	2b0f      	cmp	r3, #15
 800f8cc:	d916      	bls.n	800f8fc <UART_SetConfig+0xb28>
 800f8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8d4:	d212      	bcs.n	800f8fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	f023 030f 	bic.w	r3, r3, #15
 800f8de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e2:	085b      	lsrs	r3, r3, #1
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	f003 0307 	and.w	r3, r3, #7
 800f8ea:	b29a      	uxth	r2, r3
 800f8ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f8f8:	60da      	str	r2, [r3, #12]
 800f8fa:	e0bc      	b.n	800fa76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f902:	e0b8      	b.n	800fa76 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f904:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f908:	2b20      	cmp	r3, #32
 800f90a:	dc4b      	bgt.n	800f9a4 <UART_SetConfig+0xbd0>
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f2c0 8087 	blt.w	800fa20 <UART_SetConfig+0xc4c>
 800f912:	2b20      	cmp	r3, #32
 800f914:	f200 8084 	bhi.w	800fa20 <UART_SetConfig+0xc4c>
 800f918:	a201      	add	r2, pc, #4	@ (adr r2, 800f920 <UART_SetConfig+0xb4c>)
 800f91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f91e:	bf00      	nop
 800f920:	0800f9ab 	.word	0x0800f9ab
 800f924:	0800f9b3 	.word	0x0800f9b3
 800f928:	0800fa21 	.word	0x0800fa21
 800f92c:	0800fa21 	.word	0x0800fa21
 800f930:	0800f9bb 	.word	0x0800f9bb
 800f934:	0800fa21 	.word	0x0800fa21
 800f938:	0800fa21 	.word	0x0800fa21
 800f93c:	0800fa21 	.word	0x0800fa21
 800f940:	0800f9cb 	.word	0x0800f9cb
 800f944:	0800fa21 	.word	0x0800fa21
 800f948:	0800fa21 	.word	0x0800fa21
 800f94c:	0800fa21 	.word	0x0800fa21
 800f950:	0800fa21 	.word	0x0800fa21
 800f954:	0800fa21 	.word	0x0800fa21
 800f958:	0800fa21 	.word	0x0800fa21
 800f95c:	0800fa21 	.word	0x0800fa21
 800f960:	0800f9db 	.word	0x0800f9db
 800f964:	0800fa21 	.word	0x0800fa21
 800f968:	0800fa21 	.word	0x0800fa21
 800f96c:	0800fa21 	.word	0x0800fa21
 800f970:	0800fa21 	.word	0x0800fa21
 800f974:	0800fa21 	.word	0x0800fa21
 800f978:	0800fa21 	.word	0x0800fa21
 800f97c:	0800fa21 	.word	0x0800fa21
 800f980:	0800fa21 	.word	0x0800fa21
 800f984:	0800fa21 	.word	0x0800fa21
 800f988:	0800fa21 	.word	0x0800fa21
 800f98c:	0800fa21 	.word	0x0800fa21
 800f990:	0800fa21 	.word	0x0800fa21
 800f994:	0800fa21 	.word	0x0800fa21
 800f998:	0800fa21 	.word	0x0800fa21
 800f99c:	0800fa21 	.word	0x0800fa21
 800f9a0:	0800fa13 	.word	0x0800fa13
 800f9a4:	2b40      	cmp	r3, #64	@ 0x40
 800f9a6:	d037      	beq.n	800fa18 <UART_SetConfig+0xc44>
 800f9a8:	e03a      	b.n	800fa20 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9aa:	f7f9 fed9 	bl	8009760 <HAL_RCC_GetPCLK1Freq>
 800f9ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f9b0:	e03c      	b.n	800fa2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9b2:	f7f9 feeb 	bl	800978c <HAL_RCC_GetPCLK2Freq>
 800f9b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f9b8:	e038      	b.n	800fa2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fb fd82 	bl	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9c8:	e030      	b.n	800fa2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9ca:	f107 0318 	add.w	r3, r7, #24
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fb fece 	bl	800b770 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9d8:	e028      	b.n	800fa2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9da:	4b09      	ldr	r3, [pc, #36]	@ (800fa00 <UART_SetConfig+0xc2c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f003 0320 	and.w	r3, r3, #32
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d012      	beq.n	800fa0c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f9e6:	4b06      	ldr	r3, [pc, #24]	@ (800fa00 <UART_SetConfig+0xc2c>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	08db      	lsrs	r3, r3, #3
 800f9ec:	f003 0303 	and.w	r3, r3, #3
 800f9f0:	4a04      	ldr	r2, [pc, #16]	@ (800fa04 <UART_SetConfig+0xc30>)
 800f9f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f9f8:	e018      	b.n	800fa2c <UART_SetConfig+0xc58>
 800f9fa:	bf00      	nop
 800f9fc:	08011e3c 	.word	0x08011e3c
 800fa00:	58024400 	.word	0x58024400
 800fa04:	03d09000 	.word	0x03d09000
 800fa08:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fa0c:	4b24      	ldr	r3, [pc, #144]	@ (800faa0 <UART_SetConfig+0xccc>)
 800fa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa10:	e00c      	b.n	800fa2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa12:	4b24      	ldr	r3, [pc, #144]	@ (800faa4 <UART_SetConfig+0xcd0>)
 800fa14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa16:	e009      	b.n	800fa2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa1e:	e005      	b.n	800fa2c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fa20:	2300      	movs	r3, #0
 800fa22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fa24:	2301      	movs	r3, #1
 800fa26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fa2a:	bf00      	nop
    }

    if (pclk != 0U)
 800fa2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d021      	beq.n	800fa76 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa36:	4a1c      	ldr	r2, [pc, #112]	@ (800faa8 <UART_SetConfig+0xcd4>)
 800fa38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa40:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	085b      	lsrs	r3, r3, #1
 800fa4a:	441a      	add	r2, r3
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa54:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa58:	2b0f      	cmp	r3, #15
 800fa5a:	d909      	bls.n	800fa70 <UART_SetConfig+0xc9c>
 800fa5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa62:	d205      	bcs.n	800fa70 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fa64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	60da      	str	r2, [r3, #12]
 800fa6e:	e002      	b.n	800fa76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fa70:	2301      	movs	r3, #1
 800fa72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2201      	movs	r2, #1
 800fa7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	2201      	movs	r2, #1
 800fa82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fa92:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3748      	adds	r7, #72	@ 0x48
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800faa0:	03d09000 	.word	0x03d09000
 800faa4:	003d0900 	.word	0x003d0900
 800faa8:	08011e3c 	.word	0x08011e3c

0800faac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fab8:	f003 0308 	and.w	r3, r3, #8
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00a      	beq.n	800fad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	430a      	orrs	r2, r1
 800fad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fada:	f003 0301 	and.w	r3, r3, #1
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d00a      	beq.n	800faf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	430a      	orrs	r2, r1
 800faf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fafc:	f003 0302 	and.w	r3, r3, #2
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d00a      	beq.n	800fb1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	430a      	orrs	r2, r1
 800fb18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb1e:	f003 0304 	and.w	r3, r3, #4
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d00a      	beq.n	800fb3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	430a      	orrs	r2, r1
 800fb3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb40:	f003 0310 	and.w	r3, r3, #16
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00a      	beq.n	800fb5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	430a      	orrs	r2, r1
 800fb5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb62:	f003 0320 	and.w	r3, r3, #32
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00a      	beq.n	800fb80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	689b      	ldr	r3, [r3, #8]
 800fb70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	430a      	orrs	r2, r1
 800fb7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d01a      	beq.n	800fbc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	430a      	orrs	r2, r1
 800fba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fbaa:	d10a      	bne.n	800fbc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	430a      	orrs	r2, r1
 800fbc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00a      	beq.n	800fbe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	430a      	orrs	r2, r1
 800fbe2:	605a      	str	r2, [r3, #4]
  }
}
 800fbe4:	bf00      	nop
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b098      	sub	sp, #96	@ 0x60
 800fbf4:	af02      	add	r7, sp, #8
 800fbf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc00:	f7f2 ffec 	bl	8002bdc <HAL_GetTick>
 800fc04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f003 0308 	and.w	r3, r3, #8
 800fc10:	2b08      	cmp	r3, #8
 800fc12:	d12f      	bne.n	800fc74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 f88e 	bl	800fd44 <UART_WaitOnFlagUntilTimeout>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d022      	beq.n	800fc74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc36:	e853 3f00 	ldrex	r3, [r3]
 800fc3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc42:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	461a      	mov	r2, r3
 800fc4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc54:	e841 2300 	strex	r3, r2, [r1]
 800fc58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d1e6      	bne.n	800fc2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2220      	movs	r2, #32
 800fc64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc70:	2303      	movs	r3, #3
 800fc72:	e063      	b.n	800fd3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f003 0304 	and.w	r3, r3, #4
 800fc7e:	2b04      	cmp	r3, #4
 800fc80:	d149      	bne.n	800fd16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fc86:	9300      	str	r3, [sp, #0]
 800fc88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 f857 	bl	800fd44 <UART_WaitOnFlagUntilTimeout>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d03c      	beq.n	800fd16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca4:	e853 3f00 	ldrex	r3, [r3]
 800fca8:	623b      	str	r3, [r7, #32]
   return(result);
 800fcaa:	6a3b      	ldr	r3, [r7, #32]
 800fcac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcba:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fcc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcc2:	e841 2300 	strex	r3, r2, [r1]
 800fcc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1e6      	bne.n	800fc9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	3308      	adds	r3, #8
 800fcd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	e853 3f00 	ldrex	r3, [r3]
 800fcdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f023 0301 	bic.w	r3, r3, #1
 800fce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	3308      	adds	r3, #8
 800fcec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcee:	61fa      	str	r2, [r7, #28]
 800fcf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf2:	69b9      	ldr	r1, [r7, #24]
 800fcf4:	69fa      	ldr	r2, [r7, #28]
 800fcf6:	e841 2300 	strex	r3, r2, [r1]
 800fcfa:	617b      	str	r3, [r7, #20]
   return(result);
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d1e5      	bne.n	800fcce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2220      	movs	r2, #32
 800fd06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd12:	2303      	movs	r3, #3
 800fd14:	e012      	b.n	800fd3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2220      	movs	r2, #32
 800fd1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2220      	movs	r2, #32
 800fd22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3758      	adds	r7, #88	@ 0x58
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	60b9      	str	r1, [r7, #8]
 800fd4e:	603b      	str	r3, [r7, #0]
 800fd50:	4613      	mov	r3, r2
 800fd52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd54:	e04f      	b.n	800fdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd5c:	d04b      	beq.n	800fdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd5e:	f7f2 ff3d 	bl	8002bdc <HAL_GetTick>
 800fd62:	4602      	mov	r2, r0
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	69ba      	ldr	r2, [r7, #24]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d302      	bcc.n	800fd74 <UART_WaitOnFlagUntilTimeout+0x30>
 800fd6e:	69bb      	ldr	r3, [r7, #24]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d101      	bne.n	800fd78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fd74:	2303      	movs	r3, #3
 800fd76:	e04e      	b.n	800fe16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f003 0304 	and.w	r3, r3, #4
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d037      	beq.n	800fdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	2b80      	cmp	r3, #128	@ 0x80
 800fd8a:	d034      	beq.n	800fdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	2b40      	cmp	r3, #64	@ 0x40
 800fd90:	d031      	beq.n	800fdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	69db      	ldr	r3, [r3, #28]
 800fd98:	f003 0308 	and.w	r3, r3, #8
 800fd9c:	2b08      	cmp	r3, #8
 800fd9e:	d110      	bne.n	800fdc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2208      	movs	r2, #8
 800fda6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f000 f839 	bl	800fe20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2208      	movs	r2, #8
 800fdb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e029      	b.n	800fe16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	69db      	ldr	r3, [r3, #28]
 800fdc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fdcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fdd0:	d111      	bne.n	800fdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fdda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f000 f81f 	bl	800fe20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2220      	movs	r2, #32
 800fde6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2200      	movs	r2, #0
 800fdee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fdf2:	2303      	movs	r3, #3
 800fdf4:	e00f      	b.n	800fe16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	69da      	ldr	r2, [r3, #28]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	4013      	ands	r3, r2
 800fe00:	68ba      	ldr	r2, [r7, #8]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	bf0c      	ite	eq
 800fe06:	2301      	moveq	r3, #1
 800fe08:	2300      	movne	r3, #0
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	79fb      	ldrb	r3, [r7, #7]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d0a0      	beq.n	800fd56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
	...

0800fe20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b095      	sub	sp, #84	@ 0x54
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe30:	e853 3f00 	ldrex	r3, [r3]
 800fe34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fe36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	461a      	mov	r2, r3
 800fe44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe46:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fe4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fe4e:	e841 2300 	strex	r3, r2, [r1]
 800fe52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fe54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1e6      	bne.n	800fe28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	3308      	adds	r3, #8
 800fe60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe62:	6a3b      	ldr	r3, [r7, #32]
 800fe64:	e853 3f00 	ldrex	r3, [r3]
 800fe68:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe6a:	69fa      	ldr	r2, [r7, #28]
 800fe6c:	4b1e      	ldr	r3, [pc, #120]	@ (800fee8 <UART_EndRxTransfer+0xc8>)
 800fe6e:	4013      	ands	r3, r2
 800fe70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	3308      	adds	r3, #8
 800fe78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fe7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe82:	e841 2300 	strex	r3, r2, [r1]
 800fe86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fe88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d1e5      	bne.n	800fe5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d118      	bne.n	800fec8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	e853 3f00 	ldrex	r3, [r3]
 800fea2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	f023 0310 	bic.w	r3, r3, #16
 800feaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	461a      	mov	r2, r3
 800feb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800feb4:	61bb      	str	r3, [r7, #24]
 800feb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb8:	6979      	ldr	r1, [r7, #20]
 800feba:	69ba      	ldr	r2, [r7, #24]
 800febc:	e841 2300 	strex	r3, r2, [r1]
 800fec0:	613b      	str	r3, [r7, #16]
   return(result);
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1e6      	bne.n	800fe96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2220      	movs	r2, #32
 800fecc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2200      	movs	r2, #0
 800fed4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fedc:	bf00      	nop
 800fede:	3754      	adds	r7, #84	@ 0x54
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	effffffe 	.word	0xeffffffe

0800feec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d101      	bne.n	800ff02 <HAL_UARTEx_DisableFifoMode+0x16>
 800fefe:	2302      	movs	r3, #2
 800ff00:	e027      	b.n	800ff52 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2201      	movs	r2, #1
 800ff06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2224      	movs	r2, #36	@ 0x24
 800ff0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f022 0201 	bic.w	r2, r2, #1
 800ff28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ff30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	68fa      	ldr	r2, [r7, #12]
 800ff3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2220      	movs	r2, #32
 800ff44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3714      	adds	r7, #20
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr

0800ff5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b084      	sub	sp, #16
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
 800ff66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d101      	bne.n	800ff76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff72:	2302      	movs	r3, #2
 800ff74:	e02d      	b.n	800ffd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2201      	movs	r2, #1
 800ff7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2224      	movs	r2, #36	@ 0x24
 800ff82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f022 0201 	bic.w	r2, r2, #1
 800ff9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	683a      	ldr	r2, [r7, #0]
 800ffae:	430a      	orrs	r2, r1
 800ffb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 f850 	bl	8010058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	68fa      	ldr	r2, [r7, #12]
 800ffbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2220      	movs	r2, #32
 800ffc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ffd0:	2300      	movs	r3, #0
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3710      	adds	r7, #16
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}

0800ffda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffda:	b580      	push	{r7, lr}
 800ffdc:	b084      	sub	sp, #16
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
 800ffe2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ffea:	2b01      	cmp	r3, #1
 800ffec:	d101      	bne.n	800fff2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ffee:	2302      	movs	r3, #2
 800fff0:	e02d      	b.n	801004e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2201      	movs	r2, #1
 800fff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2224      	movs	r2, #36	@ 0x24
 800fffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f022 0201 	bic.w	r2, r2, #1
 8010018:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	683a      	ldr	r2, [r7, #0]
 801002a:	430a      	orrs	r2, r1
 801002c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 f812 	bl	8010058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2220      	movs	r2, #32
 8010040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2200      	movs	r2, #0
 8010048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
	...

08010058 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010064:	2b00      	cmp	r3, #0
 8010066:	d108      	bne.n	801007a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2201      	movs	r2, #1
 801006c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2201      	movs	r2, #1
 8010074:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010078:	e031      	b.n	80100de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801007a:	2310      	movs	r3, #16
 801007c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801007e:	2310      	movs	r3, #16
 8010080:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	689b      	ldr	r3, [r3, #8]
 8010088:	0e5b      	lsrs	r3, r3, #25
 801008a:	b2db      	uxtb	r3, r3
 801008c:	f003 0307 	and.w	r3, r3, #7
 8010090:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	689b      	ldr	r3, [r3, #8]
 8010098:	0f5b      	lsrs	r3, r3, #29
 801009a:	b2db      	uxtb	r3, r3
 801009c:	f003 0307 	and.w	r3, r3, #7
 80100a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100a2:	7bbb      	ldrb	r3, [r7, #14]
 80100a4:	7b3a      	ldrb	r2, [r7, #12]
 80100a6:	4911      	ldr	r1, [pc, #68]	@ (80100ec <UARTEx_SetNbDataToProcess+0x94>)
 80100a8:	5c8a      	ldrb	r2, [r1, r2]
 80100aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80100ae:	7b3a      	ldrb	r2, [r7, #12]
 80100b0:	490f      	ldr	r1, [pc, #60]	@ (80100f0 <UARTEx_SetNbDataToProcess+0x98>)
 80100b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100c0:	7bfb      	ldrb	r3, [r7, #15]
 80100c2:	7b7a      	ldrb	r2, [r7, #13]
 80100c4:	4909      	ldr	r1, [pc, #36]	@ (80100ec <UARTEx_SetNbDataToProcess+0x94>)
 80100c6:	5c8a      	ldrb	r2, [r1, r2]
 80100c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100cc:	7b7a      	ldrb	r2, [r7, #13]
 80100ce:	4908      	ldr	r1, [pc, #32]	@ (80100f0 <UARTEx_SetNbDataToProcess+0x98>)
 80100d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80100d6:	b29a      	uxth	r2, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80100de:	bf00      	nop
 80100e0:	3714      	adds	r7, #20
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr
 80100ea:	bf00      	nop
 80100ec:	08011e54 	.word	0x08011e54
 80100f0:	08011e5c 	.word	0x08011e5c

080100f4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80100f4:	b084      	sub	sp, #16
 80100f6:	b480      	push	{r7}
 80100f8:	b085      	sub	sp, #20
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	f107 001c 	add.w	r0, r7, #28
 8010102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010106:	2300      	movs	r3, #0
 8010108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801010a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801010c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801010e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8010112:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8010116:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801011a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	4313      	orrs	r3, r2
 8010120:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	685a      	ldr	r2, [r3, #4]
 8010126:	4b07      	ldr	r3, [pc, #28]	@ (8010144 <SDMMC_Init+0x50>)
 8010128:	4013      	ands	r3, r2
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	431a      	orrs	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010132:	2300      	movs	r3, #0
}
 8010134:	4618      	mov	r0, r3
 8010136:	3714      	adds	r7, #20
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	b004      	add	sp, #16
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop
 8010144:	ffc02c00 	.word	0xffc02c00

08010148 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010156:	4618      	mov	r0, r3
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010162:	b480      	push	{r7}
 8010164:	b083      	sub	sp, #12
 8010166:	af00      	add	r7, sp, #0
 8010168:	6078      	str	r0, [r7, #4]
 801016a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010176:	2300      	movs	r3, #0
}
 8010178:	4618      	mov	r0, r3
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	f043 0203 	orr.w	r2, r3, #3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010198:	2300      	movs	r3, #0
}
 801019a:	4618      	mov	r0, r3
 801019c:	370c      	adds	r7, #12
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80101a6:	b480      	push	{r7}
 80101a8:	b083      	sub	sp, #12
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f003 0303 	and.w	r3, r3, #3
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	370c      	adds	r7, #12
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr
	...

080101c4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b085      	sub	sp, #20
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80101ce:	2300      	movs	r3, #0
 80101d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80101e2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80101e8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80101ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	68da      	ldr	r2, [r3, #12]
 80101fa:	4b06      	ldr	r3, [pc, #24]	@ (8010214 <SDMMC_SendCommand+0x50>)
 80101fc:	4013      	ands	r3, r2
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	431a      	orrs	r2, r3
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3714      	adds	r7, #20
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr
 8010214:	fffee0c0 	.word	0xfffee0c0

08010218 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010218:	b480      	push	{r7}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	b2db      	uxtb	r3, r3
}
 8010226:	4618      	mov	r0, r3
 8010228:	370c      	adds	r7, #12
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr

08010232 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010232:	b480      	push	{r7}
 8010234:	b085      	sub	sp, #20
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
 801023a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3314      	adds	r3, #20
 8010240:	461a      	mov	r2, r3
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	4413      	add	r3, r2
 8010246:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
}
 801024c:	4618      	mov	r0, r3
 801024e:	3714      	adds	r7, #20
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010258:	b480      	push	{r7}
 801025a:	b085      	sub	sp, #20
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010262:	2300      	movs	r3, #0
 8010264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	685a      	ldr	r2, [r3, #4]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801027e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010284:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801028a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	4313      	orrs	r3, r2
 8010290:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010296:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	431a      	orrs	r2, r3
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80102a2:	2300      	movs	r3, #0

}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3714      	adds	r7, #20
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b088      	sub	sp, #32
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102be:	2310      	movs	r3, #16
 80102c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102c8:	2300      	movs	r3, #0
 80102ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102d2:	f107 0308 	add.w	r3, r7, #8
 80102d6:	4619      	mov	r1, r3
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f7ff ff73 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80102de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102e2:	2110      	movs	r1, #16
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 fa5f 	bl	80107a8 <SDMMC_GetCmdResp1>
 80102ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102ec:	69fb      	ldr	r3, [r7, #28]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3720      	adds	r7, #32
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}

080102f6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80102f6:	b580      	push	{r7, lr}
 80102f8:	b088      	sub	sp, #32
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
 80102fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010304:	2311      	movs	r3, #17
 8010306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801030c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801030e:	2300      	movs	r3, #0
 8010310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010318:	f107 0308 	add.w	r3, r7, #8
 801031c:	4619      	mov	r1, r3
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f7ff ff50 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010328:	2111      	movs	r1, #17
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f000 fa3c 	bl	80107a8 <SDMMC_GetCmdResp1>
 8010330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010332:	69fb      	ldr	r3, [r7, #28]
}
 8010334:	4618      	mov	r0, r3
 8010336:	3720      	adds	r7, #32
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b088      	sub	sp, #32
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801034a:	2312      	movs	r3, #18
 801034c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801034e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010354:	2300      	movs	r3, #0
 8010356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801035c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801035e:	f107 0308 	add.w	r3, r7, #8
 8010362:	4619      	mov	r1, r3
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7ff ff2d 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801036a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801036e:	2112      	movs	r1, #18
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 fa19 	bl	80107a8 <SDMMC_GetCmdResp1>
 8010376:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010378:	69fb      	ldr	r3, [r7, #28]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3720      	adds	r7, #32
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b088      	sub	sp, #32
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010390:	2318      	movs	r3, #24
 8010392:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010398:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801039a:	2300      	movs	r3, #0
 801039c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801039e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103a4:	f107 0308 	add.w	r3, r7, #8
 80103a8:	4619      	mov	r1, r3
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f7ff ff0a 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103b4:	2118      	movs	r1, #24
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 f9f6 	bl	80107a8 <SDMMC_GetCmdResp1>
 80103bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103be:	69fb      	ldr	r3, [r7, #28]
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3720      	adds	r7, #32
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b088      	sub	sp, #32
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80103d6:	2319      	movs	r3, #25
 80103d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103e0:	2300      	movs	r3, #0
 80103e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103ea:	f107 0308 	add.w	r3, r7, #8
 80103ee:	4619      	mov	r1, r3
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f7ff fee7 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80103f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103fa:	2119      	movs	r1, #25
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f000 f9d3 	bl	80107a8 <SDMMC_GetCmdResp1>
 8010402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010404:	69fb      	ldr	r3, [r7, #28]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3720      	adds	r7, #32
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
	...

08010410 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b088      	sub	sp, #32
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010418:	2300      	movs	r3, #0
 801041a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801041c:	230c      	movs	r3, #12
 801041e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010426:	2300      	movs	r3, #0
 8010428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801042a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801042e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010448:	f107 0308 	add.w	r3, r7, #8
 801044c:	4619      	mov	r1, r3
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f7ff feb8 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010454:	4a0b      	ldr	r2, [pc, #44]	@ (8010484 <SDMMC_CmdStopTransfer+0x74>)
 8010456:	210c      	movs	r1, #12
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f000 f9a5 	bl	80107a8 <SDMMC_GetCmdResp1>
 801045e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010472:	d101      	bne.n	8010478 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010474:	2300      	movs	r3, #0
 8010476:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010478:	69fb      	ldr	r3, [r7, #28]
}
 801047a:	4618      	mov	r0, r3
 801047c:	3720      	adds	r7, #32
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	05f5e100 	.word	0x05f5e100

08010488 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b088      	sub	sp, #32
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010496:	2307      	movs	r3, #7
 8010498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801049a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801049e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104a0:	2300      	movs	r3, #0
 80104a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104aa:	f107 0308 	add.w	r3, r7, #8
 80104ae:	4619      	mov	r1, r3
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f7ff fe87 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80104b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104ba:	2107      	movs	r1, #7
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 f973 	bl	80107a8 <SDMMC_GetCmdResp1>
 80104c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104c4:	69fb      	ldr	r3, [r7, #28]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3720      	adds	r7, #32
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b088      	sub	sp, #32
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80104d6:	2300      	movs	r3, #0
 80104d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80104da:	2300      	movs	r3, #0
 80104dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80104de:	2300      	movs	r3, #0
 80104e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104e2:	2300      	movs	r3, #0
 80104e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104ec:	f107 0308 	add.w	r3, r7, #8
 80104f0:	4619      	mov	r1, r3
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f7ff fe66 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 fb97 	bl	8010c2c <SDMMC_GetCmdError>
 80104fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010500:	69fb      	ldr	r3, [r7, #28]
}
 8010502:	4618      	mov	r0, r3
 8010504:	3720      	adds	r7, #32
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}

0801050a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801050a:	b580      	push	{r7, lr}
 801050c:	b088      	sub	sp, #32
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010512:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010518:	2308      	movs	r3, #8
 801051a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801051c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010522:	2300      	movs	r3, #0
 8010524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010526:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801052a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801052c:	f107 0308 	add.w	r3, r7, #8
 8010530:	4619      	mov	r1, r3
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f7ff fe46 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 fb29 	bl	8010b90 <SDMMC_GetCmdResp7>
 801053e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010540:	69fb      	ldr	r3, [r7, #28]
}
 8010542:	4618      	mov	r0, r3
 8010544:	3720      	adds	r7, #32
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801054a:	b580      	push	{r7, lr}
 801054c:	b088      	sub	sp, #32
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
 8010552:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010558:	2337      	movs	r3, #55	@ 0x37
 801055a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801055c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010562:	2300      	movs	r3, #0
 8010564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801056a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801056c:	f107 0308 	add.w	r3, r7, #8
 8010570:	4619      	mov	r1, r3
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7ff fe26 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010578:	f241 3288 	movw	r2, #5000	@ 0x1388
 801057c:	2137      	movs	r1, #55	@ 0x37
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f912 	bl	80107a8 <SDMMC_GetCmdResp1>
 8010584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010586:	69fb      	ldr	r3, [r7, #28]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3720      	adds	r7, #32
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b088      	sub	sp, #32
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801059e:	2329      	movs	r3, #41	@ 0x29
 80105a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105a8:	2300      	movs	r3, #0
 80105aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105b2:	f107 0308 	add.w	r3, r7, #8
 80105b6:	4619      	mov	r1, r3
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f7ff fe03 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 fa2e 	bl	8010a20 <SDMMC_GetCmdResp3>
 80105c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105c6:	69fb      	ldr	r3, [r7, #28]
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3720      	adds	r7, #32
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b088      	sub	sp, #32
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80105de:	2306      	movs	r3, #6
 80105e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105e8:	2300      	movs	r3, #0
 80105ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105f2:	f107 0308 	add.w	r3, r7, #8
 80105f6:	4619      	mov	r1, r3
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff fde3 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80105fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010602:	2106      	movs	r1, #6
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 f8cf 	bl	80107a8 <SDMMC_GetCmdResp1>
 801060a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801060c:	69fb      	ldr	r3, [r7, #28]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3720      	adds	r7, #32
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010616:	b580      	push	{r7, lr}
 8010618:	b088      	sub	sp, #32
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801061e:	2300      	movs	r3, #0
 8010620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010622:	2333      	movs	r3, #51	@ 0x33
 8010624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801062a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801062c:	2300      	movs	r3, #0
 801062e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010636:	f107 0308 	add.w	r3, r7, #8
 801063a:	4619      	mov	r1, r3
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f7ff fdc1 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010646:	2133      	movs	r1, #51	@ 0x33
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 f8ad 	bl	80107a8 <SDMMC_GetCmdResp1>
 801064e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010650:	69fb      	ldr	r3, [r7, #28]
}
 8010652:	4618      	mov	r0, r3
 8010654:	3720      	adds	r7, #32
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b088      	sub	sp, #32
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010662:	2300      	movs	r3, #0
 8010664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010666:	2302      	movs	r3, #2
 8010668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801066a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801066e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010670:	2300      	movs	r3, #0
 8010672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010678:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801067a:	f107 0308 	add.w	r3, r7, #8
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7ff fd9f 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 f980 	bl	801098c <SDMMC_GetCmdResp2>
 801068c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801068e:	69fb      	ldr	r3, [r7, #28]
}
 8010690:	4618      	mov	r0, r3
 8010692:	3720      	adds	r7, #32
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b088      	sub	sp, #32
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106a6:	2309      	movs	r3, #9
 80106a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80106ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106b0:	2300      	movs	r3, #0
 80106b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80106b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106ba:	f107 0308 	add.w	r3, r7, #8
 80106be:	4619      	mov	r1, r3
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f7ff fd7f 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f000 f960 	bl	801098c <SDMMC_GetCmdResp2>
 80106cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106ce:	69fb      	ldr	r3, [r7, #28]
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3720      	adds	r7, #32
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b088      	sub	sp, #32
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80106e2:	2300      	movs	r3, #0
 80106e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80106e6:	2303      	movs	r3, #3
 80106e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80106ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106f0:	2300      	movs	r3, #0
 80106f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80106f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106fa:	f107 0308 	add.w	r3, r7, #8
 80106fe:	4619      	mov	r1, r3
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f7ff fd5f 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	2103      	movs	r1, #3
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f000 f9c8 	bl	8010aa0 <SDMMC_GetCmdResp6>
 8010710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010712:	69fb      	ldr	r3, [r7, #28]
}
 8010714:	4618      	mov	r0, r3
 8010716:	3720      	adds	r7, #32
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b088      	sub	sp, #32
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801072a:	230d      	movs	r3, #13
 801072c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801072e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010734:	2300      	movs	r3, #0
 8010736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801073c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801073e:	f107 0308 	add.w	r3, r7, #8
 8010742:	4619      	mov	r1, r3
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7ff fd3d 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801074a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801074e:	210d      	movs	r1, #13
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f000 f829 	bl	80107a8 <SDMMC_GetCmdResp1>
 8010756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010758:	69fb      	ldr	r3, [r7, #28]
}
 801075a:	4618      	mov	r0, r3
 801075c:	3720      	adds	r7, #32
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010762:	b580      	push	{r7, lr}
 8010764:	b088      	sub	sp, #32
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801076a:	2300      	movs	r3, #0
 801076c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801076e:	230d      	movs	r3, #13
 8010770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010778:	2300      	movs	r3, #0
 801077a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801077c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010782:	f107 0308 	add.w	r3, r7, #8
 8010786:	4619      	mov	r1, r3
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7ff fd1b 	bl	80101c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801078e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010792:	210d      	movs	r1, #13
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f000 f807 	bl	80107a8 <SDMMC_GetCmdResp1>
 801079a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801079c:	69fb      	ldr	r3, [r7, #28]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3720      	adds	r7, #32
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
	...

080107a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b088      	sub	sp, #32
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	460b      	mov	r3, r1
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80107b6:	4b70      	ldr	r3, [pc, #448]	@ (8010978 <SDMMC_GetCmdResp1+0x1d0>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a70      	ldr	r2, [pc, #448]	@ (801097c <SDMMC_GetCmdResp1+0x1d4>)
 80107bc:	fba2 2303 	umull	r2, r3, r2, r3
 80107c0:	0a5a      	lsrs	r2, r3, #9
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	fb02 f303 	mul.w	r3, r2, r3
 80107c8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	1e5a      	subs	r2, r3, #1
 80107ce:	61fa      	str	r2, [r7, #28]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d102      	bne.n	80107da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107d8:	e0c9      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107de:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80107e0:	69ba      	ldr	r2, [r7, #24]
 80107e2:	4b67      	ldr	r3, [pc, #412]	@ (8010980 <SDMMC_GetCmdResp1+0x1d8>)
 80107e4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d0ef      	beq.n	80107ca <SDMMC_GetCmdResp1+0x22>
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d1ea      	bne.n	80107ca <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107f8:	f003 0304 	and.w	r3, r3, #4
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d004      	beq.n	801080a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2204      	movs	r2, #4
 8010804:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010806:	2304      	movs	r3, #4
 8010808:	e0b1      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801080e:	f003 0301 	and.w	r3, r3, #1
 8010812:	2b00      	cmp	r3, #0
 8010814:	d004      	beq.n	8010820 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2201      	movs	r2, #1
 801081a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801081c:	2301      	movs	r3, #1
 801081e:	e0a6      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	4a58      	ldr	r2, [pc, #352]	@ (8010984 <SDMMC_GetCmdResp1+0x1dc>)
 8010824:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010826:	68f8      	ldr	r0, [r7, #12]
 8010828:	f7ff fcf6 	bl	8010218 <SDMMC_GetCommandResponse>
 801082c:	4603      	mov	r3, r0
 801082e:	461a      	mov	r2, r3
 8010830:	7afb      	ldrb	r3, [r7, #11]
 8010832:	4293      	cmp	r3, r2
 8010834:	d001      	beq.n	801083a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010836:	2301      	movs	r3, #1
 8010838:	e099      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801083a:	2100      	movs	r1, #0
 801083c:	68f8      	ldr	r0, [r7, #12]
 801083e:	f7ff fcf8 	bl	8010232 <SDMMC_GetResponse>
 8010842:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010844:	697a      	ldr	r2, [r7, #20]
 8010846:	4b50      	ldr	r3, [pc, #320]	@ (8010988 <SDMMC_GetCmdResp1+0x1e0>)
 8010848:	4013      	ands	r3, r2
 801084a:	2b00      	cmp	r3, #0
 801084c:	d101      	bne.n	8010852 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801084e:	2300      	movs	r3, #0
 8010850:	e08d      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	2b00      	cmp	r3, #0
 8010856:	da02      	bge.n	801085e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010858:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801085c:	e087      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010868:	2340      	movs	r3, #64	@ 0x40
 801086a:	e080      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010872:	2b00      	cmp	r3, #0
 8010874:	d001      	beq.n	801087a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010876:	2380      	movs	r3, #128	@ 0x80
 8010878:	e079      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010880:	2b00      	cmp	r3, #0
 8010882:	d002      	beq.n	801088a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010888:	e071      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010890:	2b00      	cmp	r3, #0
 8010892:	d002      	beq.n	801089a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010898:	e069      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d002      	beq.n	80108aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108a8:	e061      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d002      	beq.n	80108ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80108b8:	e059      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d002      	beq.n	80108ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80108c8:	e051      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d002      	beq.n	80108da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80108d8:	e049      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d002      	beq.n	80108ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80108e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80108e8:	e041      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d002      	beq.n	80108fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80108f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80108f8:	e039      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010900:	2b00      	cmp	r3, #0
 8010902:	d002      	beq.n	801090a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010904:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010908:	e031      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010910:	2b00      	cmp	r3, #0
 8010912:	d002      	beq.n	801091a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010914:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010918:	e029      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010920:	2b00      	cmp	r3, #0
 8010922:	d002      	beq.n	801092a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010924:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010928:	e021      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010930:	2b00      	cmp	r3, #0
 8010932:	d002      	beq.n	801093a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010934:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010938:	e019      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010940:	2b00      	cmp	r3, #0
 8010942:	d002      	beq.n	801094a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010944:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010948:	e011      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010950:	2b00      	cmp	r3, #0
 8010952:	d002      	beq.n	801095a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010954:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010958:	e009      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	f003 0308 	and.w	r3, r3, #8
 8010960:	2b00      	cmp	r3, #0
 8010962:	d002      	beq.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010964:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010968:	e001      	b.n	801096e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801096a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801096e:	4618      	mov	r0, r3
 8010970:	3720      	adds	r7, #32
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	2400000c 	.word	0x2400000c
 801097c:	10624dd3 	.word	0x10624dd3
 8010980:	00200045 	.word	0x00200045
 8010984:	002000c5 	.word	0x002000c5
 8010988:	fdffe008 	.word	0xfdffe008

0801098c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801098c:	b480      	push	{r7}
 801098e:	b085      	sub	sp, #20
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010994:	4b1f      	ldr	r3, [pc, #124]	@ (8010a14 <SDMMC_GetCmdResp2+0x88>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4a1f      	ldr	r2, [pc, #124]	@ (8010a18 <SDMMC_GetCmdResp2+0x8c>)
 801099a:	fba2 2303 	umull	r2, r3, r2, r3
 801099e:	0a5b      	lsrs	r3, r3, #9
 80109a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109a4:	fb02 f303 	mul.w	r3, r2, r3
 80109a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	1e5a      	subs	r2, r3, #1
 80109ae:	60fa      	str	r2, [r7, #12]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d102      	bne.n	80109ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80109b8:	e026      	b.n	8010a08 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d0ef      	beq.n	80109aa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d1ea      	bne.n	80109aa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109d8:	f003 0304 	and.w	r3, r3, #4
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d004      	beq.n	80109ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2204      	movs	r2, #4
 80109e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109e6:	2304      	movs	r3, #4
 80109e8:	e00e      	b.n	8010a08 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109ee:	f003 0301 	and.w	r3, r3, #1
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d004      	beq.n	8010a00 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2201      	movs	r2, #1
 80109fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80109fc:	2301      	movs	r3, #1
 80109fe:	e003      	b.n	8010a08 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	4a06      	ldr	r2, [pc, #24]	@ (8010a1c <SDMMC_GetCmdResp2+0x90>)
 8010a04:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a06:	2300      	movs	r3, #0
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3714      	adds	r7, #20
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr
 8010a14:	2400000c 	.word	0x2400000c
 8010a18:	10624dd3 	.word	0x10624dd3
 8010a1c:	002000c5 	.word	0x002000c5

08010a20 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b085      	sub	sp, #20
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a28:	4b1a      	ldr	r3, [pc, #104]	@ (8010a94 <SDMMC_GetCmdResp3+0x74>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8010a98 <SDMMC_GetCmdResp3+0x78>)
 8010a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a32:	0a5b      	lsrs	r3, r3, #9
 8010a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a38:	fb02 f303 	mul.w	r3, r2, r3
 8010a3c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	1e5a      	subs	r2, r3, #1
 8010a42:	60fa      	str	r2, [r7, #12]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d102      	bne.n	8010a4e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010a4c:	e01b      	b.n	8010a86 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a52:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d0ef      	beq.n	8010a3e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d1ea      	bne.n	8010a3e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a6c:	f003 0304 	and.w	r3, r3, #4
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d004      	beq.n	8010a7e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2204      	movs	r2, #4
 8010a78:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a7a:	2304      	movs	r3, #4
 8010a7c:	e003      	b.n	8010a86 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	4a06      	ldr	r2, [pc, #24]	@ (8010a9c <SDMMC_GetCmdResp3+0x7c>)
 8010a82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a84:	2300      	movs	r3, #0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3714      	adds	r7, #20
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop
 8010a94:	2400000c 	.word	0x2400000c
 8010a98:	10624dd3 	.word	0x10624dd3
 8010a9c:	002000c5 	.word	0x002000c5

08010aa0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b088      	sub	sp, #32
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	607a      	str	r2, [r7, #4]
 8010aac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010aae:	4b35      	ldr	r3, [pc, #212]	@ (8010b84 <SDMMC_GetCmdResp6+0xe4>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a35      	ldr	r2, [pc, #212]	@ (8010b88 <SDMMC_GetCmdResp6+0xe8>)
 8010ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ab8:	0a5b      	lsrs	r3, r3, #9
 8010aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010abe:	fb02 f303 	mul.w	r3, r2, r3
 8010ac2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	1e5a      	subs	r2, r3, #1
 8010ac8:	61fa      	str	r2, [r7, #28]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d102      	bne.n	8010ad4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ace:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ad2:	e052      	b.n	8010b7a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ad8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d0ef      	beq.n	8010ac4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010ae4:	69bb      	ldr	r3, [r7, #24]
 8010ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d1ea      	bne.n	8010ac4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010af2:	f003 0304 	and.w	r3, r3, #4
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d004      	beq.n	8010b04 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2204      	movs	r2, #4
 8010afe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b00:	2304      	movs	r3, #4
 8010b02:	e03a      	b.n	8010b7a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b08:	f003 0301 	and.w	r3, r3, #1
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d004      	beq.n	8010b1a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2201      	movs	r2, #1
 8010b14:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b16:	2301      	movs	r3, #1
 8010b18:	e02f      	b.n	8010b7a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f7ff fb7c 	bl	8010218 <SDMMC_GetCommandResponse>
 8010b20:	4603      	mov	r3, r0
 8010b22:	461a      	mov	r2, r3
 8010b24:	7afb      	ldrb	r3, [r7, #11]
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d001      	beq.n	8010b2e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	e025      	b.n	8010b7a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	4a16      	ldr	r2, [pc, #88]	@ (8010b8c <SDMMC_GetCmdResp6+0xec>)
 8010b32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010b34:	2100      	movs	r1, #0
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	f7ff fb7b 	bl	8010232 <SDMMC_GetResponse>
 8010b3c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d106      	bne.n	8010b56 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	0c1b      	lsrs	r3, r3, #16
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010b52:	2300      	movs	r3, #0
 8010b54:	e011      	b.n	8010b7a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d002      	beq.n	8010b66 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010b64:	e009      	b.n	8010b7a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d002      	beq.n	8010b76 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b74:	e001      	b.n	8010b7a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3720      	adds	r7, #32
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	2400000c 	.word	0x2400000c
 8010b88:	10624dd3 	.word	0x10624dd3
 8010b8c:	002000c5 	.word	0x002000c5

08010b90 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010b98:	4b22      	ldr	r3, [pc, #136]	@ (8010c24 <SDMMC_GetCmdResp7+0x94>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	4a22      	ldr	r2, [pc, #136]	@ (8010c28 <SDMMC_GetCmdResp7+0x98>)
 8010b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010ba2:	0a5b      	lsrs	r3, r3, #9
 8010ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ba8:	fb02 f303 	mul.w	r3, r2, r3
 8010bac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	1e5a      	subs	r2, r3, #1
 8010bb2:	60fa      	str	r2, [r7, #12]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d102      	bne.n	8010bbe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010bbc:	e02c      	b.n	8010c18 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bc2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d0ef      	beq.n	8010bae <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1ea      	bne.n	8010bae <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bdc:	f003 0304 	and.w	r3, r3, #4
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d004      	beq.n	8010bee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2204      	movs	r2, #4
 8010be8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bea:	2304      	movs	r3, #4
 8010bec:	e014      	b.n	8010c18 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bf2:	f003 0301 	and.w	r3, r3, #1
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d004      	beq.n	8010c04 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2201      	movs	r2, #1
 8010bfe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c00:	2301      	movs	r3, #1
 8010c02:	e009      	b.n	8010c18 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2240      	movs	r2, #64	@ 0x40
 8010c14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c16:	2300      	movs	r3, #0

}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3714      	adds	r7, #20
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr
 8010c24:	2400000c 	.word	0x2400000c
 8010c28:	10624dd3 	.word	0x10624dd3

08010c2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	b085      	sub	sp, #20
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c34:	4b11      	ldr	r3, [pc, #68]	@ (8010c7c <SDMMC_GetCmdError+0x50>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a11      	ldr	r2, [pc, #68]	@ (8010c80 <SDMMC_GetCmdError+0x54>)
 8010c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8010c3e:	0a5b      	lsrs	r3, r3, #9
 8010c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c44:	fb02 f303 	mul.w	r3, r2, r3
 8010c48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	1e5a      	subs	r2, r3, #1
 8010c4e:	60fa      	str	r2, [r7, #12]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d102      	bne.n	8010c5a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010c58:	e009      	b.n	8010c6e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d0f1      	beq.n	8010c4a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4a06      	ldr	r2, [pc, #24]	@ (8010c84 <SDMMC_GetCmdError+0x58>)
 8010c6a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010c6c:	2300      	movs	r3, #0
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3714      	adds	r7, #20
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	2400000c 	.word	0x2400000c
 8010c80:	10624dd3 	.word	0x10624dd3
 8010c84:	002000c5 	.word	0x002000c5

08010c88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010c8c:	4904      	ldr	r1, [pc, #16]	@ (8010ca0 <MX_FATFS_Init+0x18>)
 8010c8e:	4805      	ldr	r0, [pc, #20]	@ (8010ca4 <MX_FATFS_Init+0x1c>)
 8010c90:	f000 fa8e 	bl	80111b0 <FATFS_LinkDriver>
 8010c94:	4603      	mov	r3, r0
 8010c96:	461a      	mov	r2, r3
 8010c98:	4b03      	ldr	r3, [pc, #12]	@ (8010ca8 <MX_FATFS_Init+0x20>)
 8010c9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010c9c:	bf00      	nop
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	240008a4 	.word	0x240008a4
 8010ca4:	08011e64 	.word	0x08011e64
 8010ca8:	240008a0 	.word	0x240008a0

08010cac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010cb6:	f000 f885 	bl	8010dc4 <BSP_SD_IsDetected>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	d001      	beq.n	8010cc4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010cc0:	2302      	movs	r3, #2
 8010cc2:	e012      	b.n	8010cea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010cc4:	480b      	ldr	r0, [pc, #44]	@ (8010cf4 <BSP_SD_Init+0x48>)
 8010cc6:	f7fb f95d 	bl	800bf84 <HAL_SD_Init>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d109      	bne.n	8010ce8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010cd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010cd8:	4806      	ldr	r0, [pc, #24]	@ (8010cf4 <BSP_SD_Init+0x48>)
 8010cda:	f7fc f813 	bl	800cd04 <HAL_SD_ConfigWideBusOperation>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d001      	beq.n	8010ce8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	240003cc 	.word	0x240003cc

08010cf8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b086      	sub	sp, #24
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d04:	2300      	movs	r3, #0
 8010d06:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	68ba      	ldr	r2, [r7, #8]
 8010d0c:	68f9      	ldr	r1, [r7, #12]
 8010d0e:	4806      	ldr	r0, [pc, #24]	@ (8010d28 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010d10:	f7fb fa58 	bl	800c1c4 <HAL_SD_ReadBlocks_DMA>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d001      	beq.n	8010d1e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3718      	adds	r7, #24
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	240003cc 	.word	0x240003cc

08010d2c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b086      	sub	sp, #24
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	60b9      	str	r1, [r7, #8]
 8010d36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	68ba      	ldr	r2, [r7, #8]
 8010d40:	68f9      	ldr	r1, [r7, #12]
 8010d42:	4806      	ldr	r0, [pc, #24]	@ (8010d5c <BSP_SD_WriteBlocks_DMA+0x30>)
 8010d44:	f7fb fae6 	bl	800c314 <HAL_SD_WriteBlocks_DMA>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d4e:	2301      	movs	r3, #1
 8010d50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3718      	adds	r7, #24
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	240003cc 	.word	0x240003cc

08010d60 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010d64:	4805      	ldr	r0, [pc, #20]	@ (8010d7c <BSP_SD_GetCardState+0x1c>)
 8010d66:	f7fc f8df 	bl	800cf28 <HAL_SD_GetCardState>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b04      	cmp	r3, #4
 8010d6e:	bf14      	ite	ne
 8010d70:	2301      	movne	r3, #1
 8010d72:	2300      	moveq	r3, #0
 8010d74:	b2db      	uxtb	r3, r3
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	240003cc 	.word	0x240003cc

08010d80 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010d88:	6879      	ldr	r1, [r7, #4]
 8010d8a:	4803      	ldr	r0, [pc, #12]	@ (8010d98 <BSP_SD_GetCardInfo+0x18>)
 8010d8c:	f7fb ff8e 	bl	800ccac <HAL_SD_GetCardInfo>
}
 8010d90:	bf00      	nop
 8010d92:	3708      	adds	r7, #8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	240003cc 	.word	0x240003cc

08010d9c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b082      	sub	sp, #8
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010da4:	f000 f9a0 	bl	80110e8 <BSP_SD_WriteCpltCallback>
}
 8010da8:	bf00      	nop
 8010daa:	3708      	adds	r7, #8
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010db8:	f000 f9a2 	bl	8011100 <BSP_SD_ReadCpltCallback>
}
 8010dbc:	bf00      	nop
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010dca:	2301      	movs	r3, #1
 8010dcc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010dce:	f000 f80b 	bl	8010de8 <BSP_PlatformIsDetected>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d101      	bne.n	8010ddc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010ddc:	79fb      	ldrb	r3, [r7, #7]
 8010dde:	b2db      	uxtb	r3, r3
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010dee:	2301      	movs	r3, #1
 8010df0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010df2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010df6:	4806      	ldr	r0, [pc, #24]	@ (8010e10 <BSP_PlatformIsDetected+0x28>)
 8010df8:	f7f7 fd0c 	bl	8008814 <HAL_GPIO_ReadPin>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d001      	beq.n	8010e06 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010e02:	2300      	movs	r3, #0
 8010e04:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010e06:	79fb      	ldrb	r3, [r7, #7]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	58021400 	.word	0x58021400

08010e14 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b084      	sub	sp, #16
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010e1c:	f7f1 fede 	bl	8002bdc <HAL_GetTick>
 8010e20:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010e22:	e006      	b.n	8010e32 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e24:	f7ff ff9c 	bl	8010d60 <BSP_SD_GetCardState>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	e009      	b.n	8010e46 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010e32:	f7f1 fed3 	bl	8002bdc <HAL_GetTick>
 8010e36:	4602      	mov	r2, r0
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	1ad3      	subs	r3, r2, r3
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d8f0      	bhi.n	8010e24 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
	...

08010e50 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	4603      	mov	r3, r0
 8010e58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e88 <SD_CheckStatus+0x38>)
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e60:	f7ff ff7e 	bl	8010d60 <BSP_SD_GetCardState>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d107      	bne.n	8010e7a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e6a:	4b07      	ldr	r3, [pc, #28]	@ (8010e88 <SD_CheckStatus+0x38>)
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	f023 0301 	bic.w	r3, r3, #1
 8010e74:	b2da      	uxtb	r2, r3
 8010e76:	4b04      	ldr	r3, [pc, #16]	@ (8010e88 <SD_CheckStatus+0x38>)
 8010e78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e7a:	4b03      	ldr	r3, [pc, #12]	@ (8010e88 <SD_CheckStatus+0x38>)
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	b2db      	uxtb	r3, r3
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	24000019 	.word	0x24000019

08010e8c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	4603      	mov	r3, r0
 8010e94:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010e96:	f7ff ff09 	bl	8010cac <BSP_SD_Init>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d107      	bne.n	8010eb0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010ea0:	79fb      	ldrb	r3, [r7, #7]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7ff ffd4 	bl	8010e50 <SD_CheckStatus>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	461a      	mov	r2, r3
 8010eac:	4b04      	ldr	r3, [pc, #16]	@ (8010ec0 <SD_initialize+0x34>)
 8010eae:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010eb0:	4b03      	ldr	r3, [pc, #12]	@ (8010ec0 <SD_initialize+0x34>)
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	b2db      	uxtb	r3, r3
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3708      	adds	r7, #8
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	24000019 	.word	0x24000019

08010ec4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	4603      	mov	r3, r0
 8010ecc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010ece:	79fb      	ldrb	r3, [r7, #7]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7ff ffbd 	bl	8010e50 <SD_CheckStatus>
 8010ed6:	4603      	mov	r3, r0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b086      	sub	sp, #24
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60b9      	str	r1, [r7, #8]
 8010ee8:	607a      	str	r2, [r7, #4]
 8010eea:	603b      	str	r3, [r7, #0]
 8010eec:	4603      	mov	r3, r0
 8010eee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010ef4:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010ef8:	f7ff ff8c 	bl	8010e14 <SD_CheckStatusWithTimeout>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	da01      	bge.n	8010f06 <SD_read+0x26>
  {
    return res;
 8010f02:	7dfb      	ldrb	r3, [r7, #23]
 8010f04:	e03b      	b.n	8010f7e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010f06:	683a      	ldr	r2, [r7, #0]
 8010f08:	6879      	ldr	r1, [r7, #4]
 8010f0a:	68b8      	ldr	r0, [r7, #8]
 8010f0c:	f7ff fef4 	bl	8010cf8 <BSP_SD_ReadBlocks_DMA>
 8010f10:	4603      	mov	r3, r0
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d132      	bne.n	8010f7c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010f16:	4b1c      	ldr	r3, [pc, #112]	@ (8010f88 <SD_read+0xa8>)
 8010f18:	2200      	movs	r2, #0
 8010f1a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010f1c:	f7f1 fe5e 	bl	8002bdc <HAL_GetTick>
 8010f20:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f22:	bf00      	nop
 8010f24:	4b18      	ldr	r3, [pc, #96]	@ (8010f88 <SD_read+0xa8>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d108      	bne.n	8010f3e <SD_read+0x5e>
 8010f2c:	f7f1 fe56 	bl	8002bdc <HAL_GetTick>
 8010f30:	4602      	mov	r2, r0
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	1ad3      	subs	r3, r2, r3
 8010f36:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d9f2      	bls.n	8010f24 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010f3e:	4b12      	ldr	r3, [pc, #72]	@ (8010f88 <SD_read+0xa8>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d102      	bne.n	8010f4c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010f46:	2301      	movs	r3, #1
 8010f48:	75fb      	strb	r3, [r7, #23]
 8010f4a:	e017      	b.n	8010f7c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8010f88 <SD_read+0xa8>)
 8010f4e:	2200      	movs	r2, #0
 8010f50:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f52:	f7f1 fe43 	bl	8002bdc <HAL_GetTick>
 8010f56:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f58:	e007      	b.n	8010f6a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f5a:	f7ff ff01 	bl	8010d60 <BSP_SD_GetCardState>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d102      	bne.n	8010f6a <SD_read+0x8a>
          {
            res = RES_OK;
 8010f64:	2300      	movs	r3, #0
 8010f66:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010f68:	e008      	b.n	8010f7c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f6a:	f7f1 fe37 	bl	8002bdc <HAL_GetTick>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	1ad3      	subs	r3, r2, r3
 8010f74:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010f78:	4293      	cmp	r3, r2
 8010f7a:	d9ee      	bls.n	8010f5a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3718      	adds	r7, #24
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	240008ac 	.word	0x240008ac

08010f8c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60b9      	str	r1, [r7, #8]
 8010f94:	607a      	str	r2, [r7, #4]
 8010f96:	603b      	str	r3, [r7, #0]
 8010f98:	4603      	mov	r3, r0
 8010f9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010fa0:	4b24      	ldr	r3, [pc, #144]	@ (8011034 <SD_write+0xa8>)
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010fa6:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010faa:	f7ff ff33 	bl	8010e14 <SD_CheckStatusWithTimeout>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	da01      	bge.n	8010fb8 <SD_write+0x2c>
  {
    return res;
 8010fb4:	7dfb      	ldrb	r3, [r7, #23]
 8010fb6:	e038      	b.n	801102a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010fb8:	683a      	ldr	r2, [r7, #0]
 8010fba:	6879      	ldr	r1, [r7, #4]
 8010fbc:	68b8      	ldr	r0, [r7, #8]
 8010fbe:	f7ff feb5 	bl	8010d2c <BSP_SD_WriteBlocks_DMA>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d12f      	bne.n	8011028 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010fc8:	f7f1 fe08 	bl	8002bdc <HAL_GetTick>
 8010fcc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010fce:	bf00      	nop
 8010fd0:	4b18      	ldr	r3, [pc, #96]	@ (8011034 <SD_write+0xa8>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d108      	bne.n	8010fea <SD_write+0x5e>
 8010fd8:	f7f1 fe00 	bl	8002bdc <HAL_GetTick>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d9f2      	bls.n	8010fd0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010fea:	4b12      	ldr	r3, [pc, #72]	@ (8011034 <SD_write+0xa8>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d102      	bne.n	8010ff8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	75fb      	strb	r3, [r7, #23]
 8010ff6:	e017      	b.n	8011028 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8011034 <SD_write+0xa8>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010ffe:	f7f1 fded 	bl	8002bdc <HAL_GetTick>
 8011002:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011004:	e007      	b.n	8011016 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011006:	f7ff feab 	bl	8010d60 <BSP_SD_GetCardState>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	d102      	bne.n	8011016 <SD_write+0x8a>
          {
            res = RES_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	75fb      	strb	r3, [r7, #23]
            break;
 8011014:	e008      	b.n	8011028 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011016:	f7f1 fde1 	bl	8002bdc <HAL_GetTick>
 801101a:	4602      	mov	r2, r0
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011024:	4293      	cmp	r3, r2
 8011026:	d9ee      	bls.n	8011006 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011028:	7dfb      	ldrb	r3, [r7, #23]
}
 801102a:	4618      	mov	r0, r3
 801102c:	3718      	adds	r7, #24
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	240008a8 	.word	0x240008a8

08011038 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b08c      	sub	sp, #48	@ 0x30
 801103c:	af00      	add	r7, sp, #0
 801103e:	4603      	mov	r3, r0
 8011040:	603a      	str	r2, [r7, #0]
 8011042:	71fb      	strb	r3, [r7, #7]
 8011044:	460b      	mov	r3, r1
 8011046:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011048:	2301      	movs	r3, #1
 801104a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801104e:	4b25      	ldr	r3, [pc, #148]	@ (80110e4 <SD_ioctl+0xac>)
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	b2db      	uxtb	r3, r3
 8011054:	f003 0301 	and.w	r3, r3, #1
 8011058:	2b00      	cmp	r3, #0
 801105a:	d001      	beq.n	8011060 <SD_ioctl+0x28>
 801105c:	2303      	movs	r3, #3
 801105e:	e03c      	b.n	80110da <SD_ioctl+0xa2>

  switch (cmd)
 8011060:	79bb      	ldrb	r3, [r7, #6]
 8011062:	2b03      	cmp	r3, #3
 8011064:	d834      	bhi.n	80110d0 <SD_ioctl+0x98>
 8011066:	a201      	add	r2, pc, #4	@ (adr r2, 801106c <SD_ioctl+0x34>)
 8011068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801106c:	0801107d 	.word	0x0801107d
 8011070:	08011085 	.word	0x08011085
 8011074:	0801109d 	.word	0x0801109d
 8011078:	080110b7 	.word	0x080110b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011082:	e028      	b.n	80110d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011084:	f107 0308 	add.w	r3, r7, #8
 8011088:	4618      	mov	r0, r3
 801108a:	f7ff fe79 	bl	8010d80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801108e:	6a3a      	ldr	r2, [r7, #32]
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801109a:	e01c      	b.n	80110d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801109c:	f107 0308 	add.w	r3, r7, #8
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7ff fe6d 	bl	8010d80 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80110a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80110ae:	2300      	movs	r3, #0
 80110b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80110b4:	e00f      	b.n	80110d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110b6:	f107 0308 	add.w	r3, r7, #8
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7ff fe60 	bl	8010d80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80110c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110c2:	0a5a      	lsrs	r2, r3, #9
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110c8:	2300      	movs	r3, #0
 80110ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80110ce:	e002      	b.n	80110d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80110d0:	2304      	movs	r3, #4
 80110d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80110d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3730      	adds	r7, #48	@ 0x30
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	24000019 	.word	0x24000019

080110e8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80110e8:	b480      	push	{r7}
 80110ea:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80110ec:	4b03      	ldr	r3, [pc, #12]	@ (80110fc <BSP_SD_WriteCpltCallback+0x14>)
 80110ee:	2201      	movs	r2, #1
 80110f0:	601a      	str	r2, [r3, #0]
}
 80110f2:	bf00      	nop
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr
 80110fc:	240008a8 	.word	0x240008a8

08011100 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011100:	b480      	push	{r7}
 8011102:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011104:	4b03      	ldr	r3, [pc, #12]	@ (8011114 <BSP_SD_ReadCpltCallback+0x14>)
 8011106:	2201      	movs	r2, #1
 8011108:	601a      	str	r2, [r3, #0]
}
 801110a:	bf00      	nop
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr
 8011114:	240008ac 	.word	0x240008ac

08011118 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011118:	b480      	push	{r7}
 801111a:	b087      	sub	sp, #28
 801111c:	af00      	add	r7, sp, #0
 801111e:	60f8      	str	r0, [r7, #12]
 8011120:	60b9      	str	r1, [r7, #8]
 8011122:	4613      	mov	r3, r2
 8011124:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011126:	2301      	movs	r3, #1
 8011128:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801112a:	2300      	movs	r3, #0
 801112c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801112e:	4b1f      	ldr	r3, [pc, #124]	@ (80111ac <FATFS_LinkDriverEx+0x94>)
 8011130:	7a5b      	ldrb	r3, [r3, #9]
 8011132:	b2db      	uxtb	r3, r3
 8011134:	2b00      	cmp	r3, #0
 8011136:	d131      	bne.n	801119c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011138:	4b1c      	ldr	r3, [pc, #112]	@ (80111ac <FATFS_LinkDriverEx+0x94>)
 801113a:	7a5b      	ldrb	r3, [r3, #9]
 801113c:	b2db      	uxtb	r3, r3
 801113e:	461a      	mov	r2, r3
 8011140:	4b1a      	ldr	r3, [pc, #104]	@ (80111ac <FATFS_LinkDriverEx+0x94>)
 8011142:	2100      	movs	r1, #0
 8011144:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011146:	4b19      	ldr	r3, [pc, #100]	@ (80111ac <FATFS_LinkDriverEx+0x94>)
 8011148:	7a5b      	ldrb	r3, [r3, #9]
 801114a:	b2db      	uxtb	r3, r3
 801114c:	4a17      	ldr	r2, [pc, #92]	@ (80111ac <FATFS_LinkDriverEx+0x94>)
 801114e:	009b      	lsls	r3, r3, #2
 8011150:	4413      	add	r3, r2
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011156:	4b15      	ldr	r3, [pc, #84]	@ (80111ac <FATFS_LinkDriverEx+0x94>)
 8011158:	7a5b      	ldrb	r3, [r3, #9]
 801115a:	b2db      	uxtb	r3, r3
 801115c:	461a      	mov	r2, r3
 801115e:	4b13      	ldr	r3, [pc, #76]	@ (80111ac <FATFS_LinkDriverEx+0x94>)
 8011160:	4413      	add	r3, r2
 8011162:	79fa      	ldrb	r2, [r7, #7]
 8011164:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011166:	4b11      	ldr	r3, [pc, #68]	@ (80111ac <FATFS_LinkDriverEx+0x94>)
 8011168:	7a5b      	ldrb	r3, [r3, #9]
 801116a:	b2db      	uxtb	r3, r3
 801116c:	1c5a      	adds	r2, r3, #1
 801116e:	b2d1      	uxtb	r1, r2
 8011170:	4a0e      	ldr	r2, [pc, #56]	@ (80111ac <FATFS_LinkDriverEx+0x94>)
 8011172:	7251      	strb	r1, [r2, #9]
 8011174:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011176:	7dbb      	ldrb	r3, [r7, #22]
 8011178:	3330      	adds	r3, #48	@ 0x30
 801117a:	b2da      	uxtb	r2, r3
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	3301      	adds	r3, #1
 8011184:	223a      	movs	r2, #58	@ 0x3a
 8011186:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	3302      	adds	r3, #2
 801118c:	222f      	movs	r2, #47	@ 0x2f
 801118e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	3303      	adds	r3, #3
 8011194:	2200      	movs	r2, #0
 8011196:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011198:	2300      	movs	r3, #0
 801119a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801119c:	7dfb      	ldrb	r3, [r7, #23]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	371c      	adds	r7, #28
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop
 80111ac:	240008b0 	.word	0x240008b0

080111b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80111ba:	2200      	movs	r2, #0
 80111bc:	6839      	ldr	r1, [r7, #0]
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f7ff ffaa 	bl	8011118 <FATFS_LinkDriverEx>
 80111c4:	4603      	mov	r3, r0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3708      	adds	r7, #8
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
	...

080111d0 <siprintf>:
 80111d0:	b40e      	push	{r1, r2, r3}
 80111d2:	b510      	push	{r4, lr}
 80111d4:	b09d      	sub	sp, #116	@ 0x74
 80111d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80111d8:	9002      	str	r0, [sp, #8]
 80111da:	9006      	str	r0, [sp, #24]
 80111dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80111e0:	480a      	ldr	r0, [pc, #40]	@ (801120c <siprintf+0x3c>)
 80111e2:	9107      	str	r1, [sp, #28]
 80111e4:	9104      	str	r1, [sp, #16]
 80111e6:	490a      	ldr	r1, [pc, #40]	@ (8011210 <siprintf+0x40>)
 80111e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ec:	9105      	str	r1, [sp, #20]
 80111ee:	2400      	movs	r4, #0
 80111f0:	a902      	add	r1, sp, #8
 80111f2:	6800      	ldr	r0, [r0, #0]
 80111f4:	9301      	str	r3, [sp, #4]
 80111f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80111f8:	f000 f9a2 	bl	8011540 <_svfiprintf_r>
 80111fc:	9b02      	ldr	r3, [sp, #8]
 80111fe:	701c      	strb	r4, [r3, #0]
 8011200:	b01d      	add	sp, #116	@ 0x74
 8011202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011206:	b003      	add	sp, #12
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop
 801120c:	2400001c 	.word	0x2400001c
 8011210:	ffff0208 	.word	0xffff0208

08011214 <memset>:
 8011214:	4402      	add	r2, r0
 8011216:	4603      	mov	r3, r0
 8011218:	4293      	cmp	r3, r2
 801121a:	d100      	bne.n	801121e <memset+0xa>
 801121c:	4770      	bx	lr
 801121e:	f803 1b01 	strb.w	r1, [r3], #1
 8011222:	e7f9      	b.n	8011218 <memset+0x4>

08011224 <__errno>:
 8011224:	4b01      	ldr	r3, [pc, #4]	@ (801122c <__errno+0x8>)
 8011226:	6818      	ldr	r0, [r3, #0]
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	2400001c 	.word	0x2400001c

08011230 <__libc_init_array>:
 8011230:	b570      	push	{r4, r5, r6, lr}
 8011232:	4d0d      	ldr	r5, [pc, #52]	@ (8011268 <__libc_init_array+0x38>)
 8011234:	4c0d      	ldr	r4, [pc, #52]	@ (801126c <__libc_init_array+0x3c>)
 8011236:	1b64      	subs	r4, r4, r5
 8011238:	10a4      	asrs	r4, r4, #2
 801123a:	2600      	movs	r6, #0
 801123c:	42a6      	cmp	r6, r4
 801123e:	d109      	bne.n	8011254 <__libc_init_array+0x24>
 8011240:	4d0b      	ldr	r5, [pc, #44]	@ (8011270 <__libc_init_array+0x40>)
 8011242:	4c0c      	ldr	r4, [pc, #48]	@ (8011274 <__libc_init_array+0x44>)
 8011244:	f000 fc64 	bl	8011b10 <_init>
 8011248:	1b64      	subs	r4, r4, r5
 801124a:	10a4      	asrs	r4, r4, #2
 801124c:	2600      	movs	r6, #0
 801124e:	42a6      	cmp	r6, r4
 8011250:	d105      	bne.n	801125e <__libc_init_array+0x2e>
 8011252:	bd70      	pop	{r4, r5, r6, pc}
 8011254:	f855 3b04 	ldr.w	r3, [r5], #4
 8011258:	4798      	blx	r3
 801125a:	3601      	adds	r6, #1
 801125c:	e7ee      	b.n	801123c <__libc_init_array+0xc>
 801125e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011262:	4798      	blx	r3
 8011264:	3601      	adds	r6, #1
 8011266:	e7f2      	b.n	801124e <__libc_init_array+0x1e>
 8011268:	08011eb4 	.word	0x08011eb4
 801126c:	08011eb4 	.word	0x08011eb4
 8011270:	08011eb4 	.word	0x08011eb4
 8011274:	08011eb8 	.word	0x08011eb8

08011278 <__retarget_lock_acquire_recursive>:
 8011278:	4770      	bx	lr

0801127a <__retarget_lock_release_recursive>:
 801127a:	4770      	bx	lr

0801127c <memcpy>:
 801127c:	440a      	add	r2, r1
 801127e:	4291      	cmp	r1, r2
 8011280:	f100 33ff 	add.w	r3, r0, #4294967295
 8011284:	d100      	bne.n	8011288 <memcpy+0xc>
 8011286:	4770      	bx	lr
 8011288:	b510      	push	{r4, lr}
 801128a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801128e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011292:	4291      	cmp	r1, r2
 8011294:	d1f9      	bne.n	801128a <memcpy+0xe>
 8011296:	bd10      	pop	{r4, pc}

08011298 <_free_r>:
 8011298:	b538      	push	{r3, r4, r5, lr}
 801129a:	4605      	mov	r5, r0
 801129c:	2900      	cmp	r1, #0
 801129e:	d041      	beq.n	8011324 <_free_r+0x8c>
 80112a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112a4:	1f0c      	subs	r4, r1, #4
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	bfb8      	it	lt
 80112aa:	18e4      	addlt	r4, r4, r3
 80112ac:	f000 f8e0 	bl	8011470 <__malloc_lock>
 80112b0:	4a1d      	ldr	r2, [pc, #116]	@ (8011328 <_free_r+0x90>)
 80112b2:	6813      	ldr	r3, [r2, #0]
 80112b4:	b933      	cbnz	r3, 80112c4 <_free_r+0x2c>
 80112b6:	6063      	str	r3, [r4, #4]
 80112b8:	6014      	str	r4, [r2, #0]
 80112ba:	4628      	mov	r0, r5
 80112bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112c0:	f000 b8dc 	b.w	801147c <__malloc_unlock>
 80112c4:	42a3      	cmp	r3, r4
 80112c6:	d908      	bls.n	80112da <_free_r+0x42>
 80112c8:	6820      	ldr	r0, [r4, #0]
 80112ca:	1821      	adds	r1, r4, r0
 80112cc:	428b      	cmp	r3, r1
 80112ce:	bf01      	itttt	eq
 80112d0:	6819      	ldreq	r1, [r3, #0]
 80112d2:	685b      	ldreq	r3, [r3, #4]
 80112d4:	1809      	addeq	r1, r1, r0
 80112d6:	6021      	streq	r1, [r4, #0]
 80112d8:	e7ed      	b.n	80112b6 <_free_r+0x1e>
 80112da:	461a      	mov	r2, r3
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	b10b      	cbz	r3, 80112e4 <_free_r+0x4c>
 80112e0:	42a3      	cmp	r3, r4
 80112e2:	d9fa      	bls.n	80112da <_free_r+0x42>
 80112e4:	6811      	ldr	r1, [r2, #0]
 80112e6:	1850      	adds	r0, r2, r1
 80112e8:	42a0      	cmp	r0, r4
 80112ea:	d10b      	bne.n	8011304 <_free_r+0x6c>
 80112ec:	6820      	ldr	r0, [r4, #0]
 80112ee:	4401      	add	r1, r0
 80112f0:	1850      	adds	r0, r2, r1
 80112f2:	4283      	cmp	r3, r0
 80112f4:	6011      	str	r1, [r2, #0]
 80112f6:	d1e0      	bne.n	80112ba <_free_r+0x22>
 80112f8:	6818      	ldr	r0, [r3, #0]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	6053      	str	r3, [r2, #4]
 80112fe:	4408      	add	r0, r1
 8011300:	6010      	str	r0, [r2, #0]
 8011302:	e7da      	b.n	80112ba <_free_r+0x22>
 8011304:	d902      	bls.n	801130c <_free_r+0x74>
 8011306:	230c      	movs	r3, #12
 8011308:	602b      	str	r3, [r5, #0]
 801130a:	e7d6      	b.n	80112ba <_free_r+0x22>
 801130c:	6820      	ldr	r0, [r4, #0]
 801130e:	1821      	adds	r1, r4, r0
 8011310:	428b      	cmp	r3, r1
 8011312:	bf04      	itt	eq
 8011314:	6819      	ldreq	r1, [r3, #0]
 8011316:	685b      	ldreq	r3, [r3, #4]
 8011318:	6063      	str	r3, [r4, #4]
 801131a:	bf04      	itt	eq
 801131c:	1809      	addeq	r1, r1, r0
 801131e:	6021      	streq	r1, [r4, #0]
 8011320:	6054      	str	r4, [r2, #4]
 8011322:	e7ca      	b.n	80112ba <_free_r+0x22>
 8011324:	bd38      	pop	{r3, r4, r5, pc}
 8011326:	bf00      	nop
 8011328:	24000a00 	.word	0x24000a00

0801132c <sbrk_aligned>:
 801132c:	b570      	push	{r4, r5, r6, lr}
 801132e:	4e0f      	ldr	r6, [pc, #60]	@ (801136c <sbrk_aligned+0x40>)
 8011330:	460c      	mov	r4, r1
 8011332:	6831      	ldr	r1, [r6, #0]
 8011334:	4605      	mov	r5, r0
 8011336:	b911      	cbnz	r1, 801133e <sbrk_aligned+0x12>
 8011338:	f000 fba4 	bl	8011a84 <_sbrk_r>
 801133c:	6030      	str	r0, [r6, #0]
 801133e:	4621      	mov	r1, r4
 8011340:	4628      	mov	r0, r5
 8011342:	f000 fb9f 	bl	8011a84 <_sbrk_r>
 8011346:	1c43      	adds	r3, r0, #1
 8011348:	d103      	bne.n	8011352 <sbrk_aligned+0x26>
 801134a:	f04f 34ff 	mov.w	r4, #4294967295
 801134e:	4620      	mov	r0, r4
 8011350:	bd70      	pop	{r4, r5, r6, pc}
 8011352:	1cc4      	adds	r4, r0, #3
 8011354:	f024 0403 	bic.w	r4, r4, #3
 8011358:	42a0      	cmp	r0, r4
 801135a:	d0f8      	beq.n	801134e <sbrk_aligned+0x22>
 801135c:	1a21      	subs	r1, r4, r0
 801135e:	4628      	mov	r0, r5
 8011360:	f000 fb90 	bl	8011a84 <_sbrk_r>
 8011364:	3001      	adds	r0, #1
 8011366:	d1f2      	bne.n	801134e <sbrk_aligned+0x22>
 8011368:	e7ef      	b.n	801134a <sbrk_aligned+0x1e>
 801136a:	bf00      	nop
 801136c:	240009fc 	.word	0x240009fc

08011370 <_malloc_r>:
 8011370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011374:	1ccd      	adds	r5, r1, #3
 8011376:	f025 0503 	bic.w	r5, r5, #3
 801137a:	3508      	adds	r5, #8
 801137c:	2d0c      	cmp	r5, #12
 801137e:	bf38      	it	cc
 8011380:	250c      	movcc	r5, #12
 8011382:	2d00      	cmp	r5, #0
 8011384:	4606      	mov	r6, r0
 8011386:	db01      	blt.n	801138c <_malloc_r+0x1c>
 8011388:	42a9      	cmp	r1, r5
 801138a:	d904      	bls.n	8011396 <_malloc_r+0x26>
 801138c:	230c      	movs	r3, #12
 801138e:	6033      	str	r3, [r6, #0]
 8011390:	2000      	movs	r0, #0
 8011392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801146c <_malloc_r+0xfc>
 801139a:	f000 f869 	bl	8011470 <__malloc_lock>
 801139e:	f8d8 3000 	ldr.w	r3, [r8]
 80113a2:	461c      	mov	r4, r3
 80113a4:	bb44      	cbnz	r4, 80113f8 <_malloc_r+0x88>
 80113a6:	4629      	mov	r1, r5
 80113a8:	4630      	mov	r0, r6
 80113aa:	f7ff ffbf 	bl	801132c <sbrk_aligned>
 80113ae:	1c43      	adds	r3, r0, #1
 80113b0:	4604      	mov	r4, r0
 80113b2:	d158      	bne.n	8011466 <_malloc_r+0xf6>
 80113b4:	f8d8 4000 	ldr.w	r4, [r8]
 80113b8:	4627      	mov	r7, r4
 80113ba:	2f00      	cmp	r7, #0
 80113bc:	d143      	bne.n	8011446 <_malloc_r+0xd6>
 80113be:	2c00      	cmp	r4, #0
 80113c0:	d04b      	beq.n	801145a <_malloc_r+0xea>
 80113c2:	6823      	ldr	r3, [r4, #0]
 80113c4:	4639      	mov	r1, r7
 80113c6:	4630      	mov	r0, r6
 80113c8:	eb04 0903 	add.w	r9, r4, r3
 80113cc:	f000 fb5a 	bl	8011a84 <_sbrk_r>
 80113d0:	4581      	cmp	r9, r0
 80113d2:	d142      	bne.n	801145a <_malloc_r+0xea>
 80113d4:	6821      	ldr	r1, [r4, #0]
 80113d6:	1a6d      	subs	r5, r5, r1
 80113d8:	4629      	mov	r1, r5
 80113da:	4630      	mov	r0, r6
 80113dc:	f7ff ffa6 	bl	801132c <sbrk_aligned>
 80113e0:	3001      	adds	r0, #1
 80113e2:	d03a      	beq.n	801145a <_malloc_r+0xea>
 80113e4:	6823      	ldr	r3, [r4, #0]
 80113e6:	442b      	add	r3, r5
 80113e8:	6023      	str	r3, [r4, #0]
 80113ea:	f8d8 3000 	ldr.w	r3, [r8]
 80113ee:	685a      	ldr	r2, [r3, #4]
 80113f0:	bb62      	cbnz	r2, 801144c <_malloc_r+0xdc>
 80113f2:	f8c8 7000 	str.w	r7, [r8]
 80113f6:	e00f      	b.n	8011418 <_malloc_r+0xa8>
 80113f8:	6822      	ldr	r2, [r4, #0]
 80113fa:	1b52      	subs	r2, r2, r5
 80113fc:	d420      	bmi.n	8011440 <_malloc_r+0xd0>
 80113fe:	2a0b      	cmp	r2, #11
 8011400:	d917      	bls.n	8011432 <_malloc_r+0xc2>
 8011402:	1961      	adds	r1, r4, r5
 8011404:	42a3      	cmp	r3, r4
 8011406:	6025      	str	r5, [r4, #0]
 8011408:	bf18      	it	ne
 801140a:	6059      	strne	r1, [r3, #4]
 801140c:	6863      	ldr	r3, [r4, #4]
 801140e:	bf08      	it	eq
 8011410:	f8c8 1000 	streq.w	r1, [r8]
 8011414:	5162      	str	r2, [r4, r5]
 8011416:	604b      	str	r3, [r1, #4]
 8011418:	4630      	mov	r0, r6
 801141a:	f000 f82f 	bl	801147c <__malloc_unlock>
 801141e:	f104 000b 	add.w	r0, r4, #11
 8011422:	1d23      	adds	r3, r4, #4
 8011424:	f020 0007 	bic.w	r0, r0, #7
 8011428:	1ac2      	subs	r2, r0, r3
 801142a:	bf1c      	itt	ne
 801142c:	1a1b      	subne	r3, r3, r0
 801142e:	50a3      	strne	r3, [r4, r2]
 8011430:	e7af      	b.n	8011392 <_malloc_r+0x22>
 8011432:	6862      	ldr	r2, [r4, #4]
 8011434:	42a3      	cmp	r3, r4
 8011436:	bf0c      	ite	eq
 8011438:	f8c8 2000 	streq.w	r2, [r8]
 801143c:	605a      	strne	r2, [r3, #4]
 801143e:	e7eb      	b.n	8011418 <_malloc_r+0xa8>
 8011440:	4623      	mov	r3, r4
 8011442:	6864      	ldr	r4, [r4, #4]
 8011444:	e7ae      	b.n	80113a4 <_malloc_r+0x34>
 8011446:	463c      	mov	r4, r7
 8011448:	687f      	ldr	r7, [r7, #4]
 801144a:	e7b6      	b.n	80113ba <_malloc_r+0x4a>
 801144c:	461a      	mov	r2, r3
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	42a3      	cmp	r3, r4
 8011452:	d1fb      	bne.n	801144c <_malloc_r+0xdc>
 8011454:	2300      	movs	r3, #0
 8011456:	6053      	str	r3, [r2, #4]
 8011458:	e7de      	b.n	8011418 <_malloc_r+0xa8>
 801145a:	230c      	movs	r3, #12
 801145c:	6033      	str	r3, [r6, #0]
 801145e:	4630      	mov	r0, r6
 8011460:	f000 f80c 	bl	801147c <__malloc_unlock>
 8011464:	e794      	b.n	8011390 <_malloc_r+0x20>
 8011466:	6005      	str	r5, [r0, #0]
 8011468:	e7d6      	b.n	8011418 <_malloc_r+0xa8>
 801146a:	bf00      	nop
 801146c:	24000a00 	.word	0x24000a00

08011470 <__malloc_lock>:
 8011470:	4801      	ldr	r0, [pc, #4]	@ (8011478 <__malloc_lock+0x8>)
 8011472:	f7ff bf01 	b.w	8011278 <__retarget_lock_acquire_recursive>
 8011476:	bf00      	nop
 8011478:	240009f8 	.word	0x240009f8

0801147c <__malloc_unlock>:
 801147c:	4801      	ldr	r0, [pc, #4]	@ (8011484 <__malloc_unlock+0x8>)
 801147e:	f7ff befc 	b.w	801127a <__retarget_lock_release_recursive>
 8011482:	bf00      	nop
 8011484:	240009f8 	.word	0x240009f8

08011488 <__ssputs_r>:
 8011488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801148c:	688e      	ldr	r6, [r1, #8]
 801148e:	461f      	mov	r7, r3
 8011490:	42be      	cmp	r6, r7
 8011492:	680b      	ldr	r3, [r1, #0]
 8011494:	4682      	mov	sl, r0
 8011496:	460c      	mov	r4, r1
 8011498:	4690      	mov	r8, r2
 801149a:	d82d      	bhi.n	80114f8 <__ssputs_r+0x70>
 801149c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80114a4:	d026      	beq.n	80114f4 <__ssputs_r+0x6c>
 80114a6:	6965      	ldr	r5, [r4, #20]
 80114a8:	6909      	ldr	r1, [r1, #16]
 80114aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114ae:	eba3 0901 	sub.w	r9, r3, r1
 80114b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80114b6:	1c7b      	adds	r3, r7, #1
 80114b8:	444b      	add	r3, r9
 80114ba:	106d      	asrs	r5, r5, #1
 80114bc:	429d      	cmp	r5, r3
 80114be:	bf38      	it	cc
 80114c0:	461d      	movcc	r5, r3
 80114c2:	0553      	lsls	r3, r2, #21
 80114c4:	d527      	bpl.n	8011516 <__ssputs_r+0x8e>
 80114c6:	4629      	mov	r1, r5
 80114c8:	f7ff ff52 	bl	8011370 <_malloc_r>
 80114cc:	4606      	mov	r6, r0
 80114ce:	b360      	cbz	r0, 801152a <__ssputs_r+0xa2>
 80114d0:	6921      	ldr	r1, [r4, #16]
 80114d2:	464a      	mov	r2, r9
 80114d4:	f7ff fed2 	bl	801127c <memcpy>
 80114d8:	89a3      	ldrh	r3, [r4, #12]
 80114da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80114de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114e2:	81a3      	strh	r3, [r4, #12]
 80114e4:	6126      	str	r6, [r4, #16]
 80114e6:	6165      	str	r5, [r4, #20]
 80114e8:	444e      	add	r6, r9
 80114ea:	eba5 0509 	sub.w	r5, r5, r9
 80114ee:	6026      	str	r6, [r4, #0]
 80114f0:	60a5      	str	r5, [r4, #8]
 80114f2:	463e      	mov	r6, r7
 80114f4:	42be      	cmp	r6, r7
 80114f6:	d900      	bls.n	80114fa <__ssputs_r+0x72>
 80114f8:	463e      	mov	r6, r7
 80114fa:	6820      	ldr	r0, [r4, #0]
 80114fc:	4632      	mov	r2, r6
 80114fe:	4641      	mov	r1, r8
 8011500:	f000 faa6 	bl	8011a50 <memmove>
 8011504:	68a3      	ldr	r3, [r4, #8]
 8011506:	1b9b      	subs	r3, r3, r6
 8011508:	60a3      	str	r3, [r4, #8]
 801150a:	6823      	ldr	r3, [r4, #0]
 801150c:	4433      	add	r3, r6
 801150e:	6023      	str	r3, [r4, #0]
 8011510:	2000      	movs	r0, #0
 8011512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011516:	462a      	mov	r2, r5
 8011518:	f000 fac4 	bl	8011aa4 <_realloc_r>
 801151c:	4606      	mov	r6, r0
 801151e:	2800      	cmp	r0, #0
 8011520:	d1e0      	bne.n	80114e4 <__ssputs_r+0x5c>
 8011522:	6921      	ldr	r1, [r4, #16]
 8011524:	4650      	mov	r0, sl
 8011526:	f7ff feb7 	bl	8011298 <_free_r>
 801152a:	230c      	movs	r3, #12
 801152c:	f8ca 3000 	str.w	r3, [sl]
 8011530:	89a3      	ldrh	r3, [r4, #12]
 8011532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011536:	81a3      	strh	r3, [r4, #12]
 8011538:	f04f 30ff 	mov.w	r0, #4294967295
 801153c:	e7e9      	b.n	8011512 <__ssputs_r+0x8a>
	...

08011540 <_svfiprintf_r>:
 8011540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011544:	4698      	mov	r8, r3
 8011546:	898b      	ldrh	r3, [r1, #12]
 8011548:	061b      	lsls	r3, r3, #24
 801154a:	b09d      	sub	sp, #116	@ 0x74
 801154c:	4607      	mov	r7, r0
 801154e:	460d      	mov	r5, r1
 8011550:	4614      	mov	r4, r2
 8011552:	d510      	bpl.n	8011576 <_svfiprintf_r+0x36>
 8011554:	690b      	ldr	r3, [r1, #16]
 8011556:	b973      	cbnz	r3, 8011576 <_svfiprintf_r+0x36>
 8011558:	2140      	movs	r1, #64	@ 0x40
 801155a:	f7ff ff09 	bl	8011370 <_malloc_r>
 801155e:	6028      	str	r0, [r5, #0]
 8011560:	6128      	str	r0, [r5, #16]
 8011562:	b930      	cbnz	r0, 8011572 <_svfiprintf_r+0x32>
 8011564:	230c      	movs	r3, #12
 8011566:	603b      	str	r3, [r7, #0]
 8011568:	f04f 30ff 	mov.w	r0, #4294967295
 801156c:	b01d      	add	sp, #116	@ 0x74
 801156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011572:	2340      	movs	r3, #64	@ 0x40
 8011574:	616b      	str	r3, [r5, #20]
 8011576:	2300      	movs	r3, #0
 8011578:	9309      	str	r3, [sp, #36]	@ 0x24
 801157a:	2320      	movs	r3, #32
 801157c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011580:	f8cd 800c 	str.w	r8, [sp, #12]
 8011584:	2330      	movs	r3, #48	@ 0x30
 8011586:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011724 <_svfiprintf_r+0x1e4>
 801158a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801158e:	f04f 0901 	mov.w	r9, #1
 8011592:	4623      	mov	r3, r4
 8011594:	469a      	mov	sl, r3
 8011596:	f813 2b01 	ldrb.w	r2, [r3], #1
 801159a:	b10a      	cbz	r2, 80115a0 <_svfiprintf_r+0x60>
 801159c:	2a25      	cmp	r2, #37	@ 0x25
 801159e:	d1f9      	bne.n	8011594 <_svfiprintf_r+0x54>
 80115a0:	ebba 0b04 	subs.w	fp, sl, r4
 80115a4:	d00b      	beq.n	80115be <_svfiprintf_r+0x7e>
 80115a6:	465b      	mov	r3, fp
 80115a8:	4622      	mov	r2, r4
 80115aa:	4629      	mov	r1, r5
 80115ac:	4638      	mov	r0, r7
 80115ae:	f7ff ff6b 	bl	8011488 <__ssputs_r>
 80115b2:	3001      	adds	r0, #1
 80115b4:	f000 80a7 	beq.w	8011706 <_svfiprintf_r+0x1c6>
 80115b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115ba:	445a      	add	r2, fp
 80115bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80115be:	f89a 3000 	ldrb.w	r3, [sl]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f000 809f 	beq.w	8011706 <_svfiprintf_r+0x1c6>
 80115c8:	2300      	movs	r3, #0
 80115ca:	f04f 32ff 	mov.w	r2, #4294967295
 80115ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115d2:	f10a 0a01 	add.w	sl, sl, #1
 80115d6:	9304      	str	r3, [sp, #16]
 80115d8:	9307      	str	r3, [sp, #28]
 80115da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115de:	931a      	str	r3, [sp, #104]	@ 0x68
 80115e0:	4654      	mov	r4, sl
 80115e2:	2205      	movs	r2, #5
 80115e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115e8:	484e      	ldr	r0, [pc, #312]	@ (8011724 <_svfiprintf_r+0x1e4>)
 80115ea:	f7ee fe99 	bl	8000320 <memchr>
 80115ee:	9a04      	ldr	r2, [sp, #16]
 80115f0:	b9d8      	cbnz	r0, 801162a <_svfiprintf_r+0xea>
 80115f2:	06d0      	lsls	r0, r2, #27
 80115f4:	bf44      	itt	mi
 80115f6:	2320      	movmi	r3, #32
 80115f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115fc:	0711      	lsls	r1, r2, #28
 80115fe:	bf44      	itt	mi
 8011600:	232b      	movmi	r3, #43	@ 0x2b
 8011602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011606:	f89a 3000 	ldrb.w	r3, [sl]
 801160a:	2b2a      	cmp	r3, #42	@ 0x2a
 801160c:	d015      	beq.n	801163a <_svfiprintf_r+0xfa>
 801160e:	9a07      	ldr	r2, [sp, #28]
 8011610:	4654      	mov	r4, sl
 8011612:	2000      	movs	r0, #0
 8011614:	f04f 0c0a 	mov.w	ip, #10
 8011618:	4621      	mov	r1, r4
 801161a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801161e:	3b30      	subs	r3, #48	@ 0x30
 8011620:	2b09      	cmp	r3, #9
 8011622:	d94b      	bls.n	80116bc <_svfiprintf_r+0x17c>
 8011624:	b1b0      	cbz	r0, 8011654 <_svfiprintf_r+0x114>
 8011626:	9207      	str	r2, [sp, #28]
 8011628:	e014      	b.n	8011654 <_svfiprintf_r+0x114>
 801162a:	eba0 0308 	sub.w	r3, r0, r8
 801162e:	fa09 f303 	lsl.w	r3, r9, r3
 8011632:	4313      	orrs	r3, r2
 8011634:	9304      	str	r3, [sp, #16]
 8011636:	46a2      	mov	sl, r4
 8011638:	e7d2      	b.n	80115e0 <_svfiprintf_r+0xa0>
 801163a:	9b03      	ldr	r3, [sp, #12]
 801163c:	1d19      	adds	r1, r3, #4
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	9103      	str	r1, [sp, #12]
 8011642:	2b00      	cmp	r3, #0
 8011644:	bfbb      	ittet	lt
 8011646:	425b      	neglt	r3, r3
 8011648:	f042 0202 	orrlt.w	r2, r2, #2
 801164c:	9307      	strge	r3, [sp, #28]
 801164e:	9307      	strlt	r3, [sp, #28]
 8011650:	bfb8      	it	lt
 8011652:	9204      	strlt	r2, [sp, #16]
 8011654:	7823      	ldrb	r3, [r4, #0]
 8011656:	2b2e      	cmp	r3, #46	@ 0x2e
 8011658:	d10a      	bne.n	8011670 <_svfiprintf_r+0x130>
 801165a:	7863      	ldrb	r3, [r4, #1]
 801165c:	2b2a      	cmp	r3, #42	@ 0x2a
 801165e:	d132      	bne.n	80116c6 <_svfiprintf_r+0x186>
 8011660:	9b03      	ldr	r3, [sp, #12]
 8011662:	1d1a      	adds	r2, r3, #4
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	9203      	str	r2, [sp, #12]
 8011668:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801166c:	3402      	adds	r4, #2
 801166e:	9305      	str	r3, [sp, #20]
 8011670:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011734 <_svfiprintf_r+0x1f4>
 8011674:	7821      	ldrb	r1, [r4, #0]
 8011676:	2203      	movs	r2, #3
 8011678:	4650      	mov	r0, sl
 801167a:	f7ee fe51 	bl	8000320 <memchr>
 801167e:	b138      	cbz	r0, 8011690 <_svfiprintf_r+0x150>
 8011680:	9b04      	ldr	r3, [sp, #16]
 8011682:	eba0 000a 	sub.w	r0, r0, sl
 8011686:	2240      	movs	r2, #64	@ 0x40
 8011688:	4082      	lsls	r2, r0
 801168a:	4313      	orrs	r3, r2
 801168c:	3401      	adds	r4, #1
 801168e:	9304      	str	r3, [sp, #16]
 8011690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011694:	4824      	ldr	r0, [pc, #144]	@ (8011728 <_svfiprintf_r+0x1e8>)
 8011696:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801169a:	2206      	movs	r2, #6
 801169c:	f7ee fe40 	bl	8000320 <memchr>
 80116a0:	2800      	cmp	r0, #0
 80116a2:	d036      	beq.n	8011712 <_svfiprintf_r+0x1d2>
 80116a4:	4b21      	ldr	r3, [pc, #132]	@ (801172c <_svfiprintf_r+0x1ec>)
 80116a6:	bb1b      	cbnz	r3, 80116f0 <_svfiprintf_r+0x1b0>
 80116a8:	9b03      	ldr	r3, [sp, #12]
 80116aa:	3307      	adds	r3, #7
 80116ac:	f023 0307 	bic.w	r3, r3, #7
 80116b0:	3308      	adds	r3, #8
 80116b2:	9303      	str	r3, [sp, #12]
 80116b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116b6:	4433      	add	r3, r6
 80116b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80116ba:	e76a      	b.n	8011592 <_svfiprintf_r+0x52>
 80116bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80116c0:	460c      	mov	r4, r1
 80116c2:	2001      	movs	r0, #1
 80116c4:	e7a8      	b.n	8011618 <_svfiprintf_r+0xd8>
 80116c6:	2300      	movs	r3, #0
 80116c8:	3401      	adds	r4, #1
 80116ca:	9305      	str	r3, [sp, #20]
 80116cc:	4619      	mov	r1, r3
 80116ce:	f04f 0c0a 	mov.w	ip, #10
 80116d2:	4620      	mov	r0, r4
 80116d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116d8:	3a30      	subs	r2, #48	@ 0x30
 80116da:	2a09      	cmp	r2, #9
 80116dc:	d903      	bls.n	80116e6 <_svfiprintf_r+0x1a6>
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d0c6      	beq.n	8011670 <_svfiprintf_r+0x130>
 80116e2:	9105      	str	r1, [sp, #20]
 80116e4:	e7c4      	b.n	8011670 <_svfiprintf_r+0x130>
 80116e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80116ea:	4604      	mov	r4, r0
 80116ec:	2301      	movs	r3, #1
 80116ee:	e7f0      	b.n	80116d2 <_svfiprintf_r+0x192>
 80116f0:	ab03      	add	r3, sp, #12
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	462a      	mov	r2, r5
 80116f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011730 <_svfiprintf_r+0x1f0>)
 80116f8:	a904      	add	r1, sp, #16
 80116fa:	4638      	mov	r0, r7
 80116fc:	f3af 8000 	nop.w
 8011700:	1c42      	adds	r2, r0, #1
 8011702:	4606      	mov	r6, r0
 8011704:	d1d6      	bne.n	80116b4 <_svfiprintf_r+0x174>
 8011706:	89ab      	ldrh	r3, [r5, #12]
 8011708:	065b      	lsls	r3, r3, #25
 801170a:	f53f af2d 	bmi.w	8011568 <_svfiprintf_r+0x28>
 801170e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011710:	e72c      	b.n	801156c <_svfiprintf_r+0x2c>
 8011712:	ab03      	add	r3, sp, #12
 8011714:	9300      	str	r3, [sp, #0]
 8011716:	462a      	mov	r2, r5
 8011718:	4b05      	ldr	r3, [pc, #20]	@ (8011730 <_svfiprintf_r+0x1f0>)
 801171a:	a904      	add	r1, sp, #16
 801171c:	4638      	mov	r0, r7
 801171e:	f000 f879 	bl	8011814 <_printf_i>
 8011722:	e7ed      	b.n	8011700 <_svfiprintf_r+0x1c0>
 8011724:	08011e78 	.word	0x08011e78
 8011728:	08011e82 	.word	0x08011e82
 801172c:	00000000 	.word	0x00000000
 8011730:	08011489 	.word	0x08011489
 8011734:	08011e7e 	.word	0x08011e7e

08011738 <_printf_common>:
 8011738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801173c:	4616      	mov	r6, r2
 801173e:	4698      	mov	r8, r3
 8011740:	688a      	ldr	r2, [r1, #8]
 8011742:	690b      	ldr	r3, [r1, #16]
 8011744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011748:	4293      	cmp	r3, r2
 801174a:	bfb8      	it	lt
 801174c:	4613      	movlt	r3, r2
 801174e:	6033      	str	r3, [r6, #0]
 8011750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011754:	4607      	mov	r7, r0
 8011756:	460c      	mov	r4, r1
 8011758:	b10a      	cbz	r2, 801175e <_printf_common+0x26>
 801175a:	3301      	adds	r3, #1
 801175c:	6033      	str	r3, [r6, #0]
 801175e:	6823      	ldr	r3, [r4, #0]
 8011760:	0699      	lsls	r1, r3, #26
 8011762:	bf42      	ittt	mi
 8011764:	6833      	ldrmi	r3, [r6, #0]
 8011766:	3302      	addmi	r3, #2
 8011768:	6033      	strmi	r3, [r6, #0]
 801176a:	6825      	ldr	r5, [r4, #0]
 801176c:	f015 0506 	ands.w	r5, r5, #6
 8011770:	d106      	bne.n	8011780 <_printf_common+0x48>
 8011772:	f104 0a19 	add.w	sl, r4, #25
 8011776:	68e3      	ldr	r3, [r4, #12]
 8011778:	6832      	ldr	r2, [r6, #0]
 801177a:	1a9b      	subs	r3, r3, r2
 801177c:	42ab      	cmp	r3, r5
 801177e:	dc26      	bgt.n	80117ce <_printf_common+0x96>
 8011780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011784:	6822      	ldr	r2, [r4, #0]
 8011786:	3b00      	subs	r3, #0
 8011788:	bf18      	it	ne
 801178a:	2301      	movne	r3, #1
 801178c:	0692      	lsls	r2, r2, #26
 801178e:	d42b      	bmi.n	80117e8 <_printf_common+0xb0>
 8011790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011794:	4641      	mov	r1, r8
 8011796:	4638      	mov	r0, r7
 8011798:	47c8      	blx	r9
 801179a:	3001      	adds	r0, #1
 801179c:	d01e      	beq.n	80117dc <_printf_common+0xa4>
 801179e:	6823      	ldr	r3, [r4, #0]
 80117a0:	6922      	ldr	r2, [r4, #16]
 80117a2:	f003 0306 	and.w	r3, r3, #6
 80117a6:	2b04      	cmp	r3, #4
 80117a8:	bf02      	ittt	eq
 80117aa:	68e5      	ldreq	r5, [r4, #12]
 80117ac:	6833      	ldreq	r3, [r6, #0]
 80117ae:	1aed      	subeq	r5, r5, r3
 80117b0:	68a3      	ldr	r3, [r4, #8]
 80117b2:	bf0c      	ite	eq
 80117b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80117b8:	2500      	movne	r5, #0
 80117ba:	4293      	cmp	r3, r2
 80117bc:	bfc4      	itt	gt
 80117be:	1a9b      	subgt	r3, r3, r2
 80117c0:	18ed      	addgt	r5, r5, r3
 80117c2:	2600      	movs	r6, #0
 80117c4:	341a      	adds	r4, #26
 80117c6:	42b5      	cmp	r5, r6
 80117c8:	d11a      	bne.n	8011800 <_printf_common+0xc8>
 80117ca:	2000      	movs	r0, #0
 80117cc:	e008      	b.n	80117e0 <_printf_common+0xa8>
 80117ce:	2301      	movs	r3, #1
 80117d0:	4652      	mov	r2, sl
 80117d2:	4641      	mov	r1, r8
 80117d4:	4638      	mov	r0, r7
 80117d6:	47c8      	blx	r9
 80117d8:	3001      	adds	r0, #1
 80117da:	d103      	bne.n	80117e4 <_printf_common+0xac>
 80117dc:	f04f 30ff 	mov.w	r0, #4294967295
 80117e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117e4:	3501      	adds	r5, #1
 80117e6:	e7c6      	b.n	8011776 <_printf_common+0x3e>
 80117e8:	18e1      	adds	r1, r4, r3
 80117ea:	1c5a      	adds	r2, r3, #1
 80117ec:	2030      	movs	r0, #48	@ 0x30
 80117ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80117f2:	4422      	add	r2, r4
 80117f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80117f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80117fc:	3302      	adds	r3, #2
 80117fe:	e7c7      	b.n	8011790 <_printf_common+0x58>
 8011800:	2301      	movs	r3, #1
 8011802:	4622      	mov	r2, r4
 8011804:	4641      	mov	r1, r8
 8011806:	4638      	mov	r0, r7
 8011808:	47c8      	blx	r9
 801180a:	3001      	adds	r0, #1
 801180c:	d0e6      	beq.n	80117dc <_printf_common+0xa4>
 801180e:	3601      	adds	r6, #1
 8011810:	e7d9      	b.n	80117c6 <_printf_common+0x8e>
	...

08011814 <_printf_i>:
 8011814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011818:	7e0f      	ldrb	r7, [r1, #24]
 801181a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801181c:	2f78      	cmp	r7, #120	@ 0x78
 801181e:	4691      	mov	r9, r2
 8011820:	4680      	mov	r8, r0
 8011822:	460c      	mov	r4, r1
 8011824:	469a      	mov	sl, r3
 8011826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801182a:	d807      	bhi.n	801183c <_printf_i+0x28>
 801182c:	2f62      	cmp	r7, #98	@ 0x62
 801182e:	d80a      	bhi.n	8011846 <_printf_i+0x32>
 8011830:	2f00      	cmp	r7, #0
 8011832:	f000 80d1 	beq.w	80119d8 <_printf_i+0x1c4>
 8011836:	2f58      	cmp	r7, #88	@ 0x58
 8011838:	f000 80b8 	beq.w	80119ac <_printf_i+0x198>
 801183c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011844:	e03a      	b.n	80118bc <_printf_i+0xa8>
 8011846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801184a:	2b15      	cmp	r3, #21
 801184c:	d8f6      	bhi.n	801183c <_printf_i+0x28>
 801184e:	a101      	add	r1, pc, #4	@ (adr r1, 8011854 <_printf_i+0x40>)
 8011850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011854:	080118ad 	.word	0x080118ad
 8011858:	080118c1 	.word	0x080118c1
 801185c:	0801183d 	.word	0x0801183d
 8011860:	0801183d 	.word	0x0801183d
 8011864:	0801183d 	.word	0x0801183d
 8011868:	0801183d 	.word	0x0801183d
 801186c:	080118c1 	.word	0x080118c1
 8011870:	0801183d 	.word	0x0801183d
 8011874:	0801183d 	.word	0x0801183d
 8011878:	0801183d 	.word	0x0801183d
 801187c:	0801183d 	.word	0x0801183d
 8011880:	080119bf 	.word	0x080119bf
 8011884:	080118eb 	.word	0x080118eb
 8011888:	08011979 	.word	0x08011979
 801188c:	0801183d 	.word	0x0801183d
 8011890:	0801183d 	.word	0x0801183d
 8011894:	080119e1 	.word	0x080119e1
 8011898:	0801183d 	.word	0x0801183d
 801189c:	080118eb 	.word	0x080118eb
 80118a0:	0801183d 	.word	0x0801183d
 80118a4:	0801183d 	.word	0x0801183d
 80118a8:	08011981 	.word	0x08011981
 80118ac:	6833      	ldr	r3, [r6, #0]
 80118ae:	1d1a      	adds	r2, r3, #4
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	6032      	str	r2, [r6, #0]
 80118b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80118b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80118bc:	2301      	movs	r3, #1
 80118be:	e09c      	b.n	80119fa <_printf_i+0x1e6>
 80118c0:	6833      	ldr	r3, [r6, #0]
 80118c2:	6820      	ldr	r0, [r4, #0]
 80118c4:	1d19      	adds	r1, r3, #4
 80118c6:	6031      	str	r1, [r6, #0]
 80118c8:	0606      	lsls	r6, r0, #24
 80118ca:	d501      	bpl.n	80118d0 <_printf_i+0xbc>
 80118cc:	681d      	ldr	r5, [r3, #0]
 80118ce:	e003      	b.n	80118d8 <_printf_i+0xc4>
 80118d0:	0645      	lsls	r5, r0, #25
 80118d2:	d5fb      	bpl.n	80118cc <_printf_i+0xb8>
 80118d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80118d8:	2d00      	cmp	r5, #0
 80118da:	da03      	bge.n	80118e4 <_printf_i+0xd0>
 80118dc:	232d      	movs	r3, #45	@ 0x2d
 80118de:	426d      	negs	r5, r5
 80118e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118e4:	4858      	ldr	r0, [pc, #352]	@ (8011a48 <_printf_i+0x234>)
 80118e6:	230a      	movs	r3, #10
 80118e8:	e011      	b.n	801190e <_printf_i+0xfa>
 80118ea:	6821      	ldr	r1, [r4, #0]
 80118ec:	6833      	ldr	r3, [r6, #0]
 80118ee:	0608      	lsls	r0, r1, #24
 80118f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80118f4:	d402      	bmi.n	80118fc <_printf_i+0xe8>
 80118f6:	0649      	lsls	r1, r1, #25
 80118f8:	bf48      	it	mi
 80118fa:	b2ad      	uxthmi	r5, r5
 80118fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80118fe:	4852      	ldr	r0, [pc, #328]	@ (8011a48 <_printf_i+0x234>)
 8011900:	6033      	str	r3, [r6, #0]
 8011902:	bf14      	ite	ne
 8011904:	230a      	movne	r3, #10
 8011906:	2308      	moveq	r3, #8
 8011908:	2100      	movs	r1, #0
 801190a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801190e:	6866      	ldr	r6, [r4, #4]
 8011910:	60a6      	str	r6, [r4, #8]
 8011912:	2e00      	cmp	r6, #0
 8011914:	db05      	blt.n	8011922 <_printf_i+0x10e>
 8011916:	6821      	ldr	r1, [r4, #0]
 8011918:	432e      	orrs	r6, r5
 801191a:	f021 0104 	bic.w	r1, r1, #4
 801191e:	6021      	str	r1, [r4, #0]
 8011920:	d04b      	beq.n	80119ba <_printf_i+0x1a6>
 8011922:	4616      	mov	r6, r2
 8011924:	fbb5 f1f3 	udiv	r1, r5, r3
 8011928:	fb03 5711 	mls	r7, r3, r1, r5
 801192c:	5dc7      	ldrb	r7, [r0, r7]
 801192e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011932:	462f      	mov	r7, r5
 8011934:	42bb      	cmp	r3, r7
 8011936:	460d      	mov	r5, r1
 8011938:	d9f4      	bls.n	8011924 <_printf_i+0x110>
 801193a:	2b08      	cmp	r3, #8
 801193c:	d10b      	bne.n	8011956 <_printf_i+0x142>
 801193e:	6823      	ldr	r3, [r4, #0]
 8011940:	07df      	lsls	r7, r3, #31
 8011942:	d508      	bpl.n	8011956 <_printf_i+0x142>
 8011944:	6923      	ldr	r3, [r4, #16]
 8011946:	6861      	ldr	r1, [r4, #4]
 8011948:	4299      	cmp	r1, r3
 801194a:	bfde      	ittt	le
 801194c:	2330      	movle	r3, #48	@ 0x30
 801194e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011952:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011956:	1b92      	subs	r2, r2, r6
 8011958:	6122      	str	r2, [r4, #16]
 801195a:	f8cd a000 	str.w	sl, [sp]
 801195e:	464b      	mov	r3, r9
 8011960:	aa03      	add	r2, sp, #12
 8011962:	4621      	mov	r1, r4
 8011964:	4640      	mov	r0, r8
 8011966:	f7ff fee7 	bl	8011738 <_printf_common>
 801196a:	3001      	adds	r0, #1
 801196c:	d14a      	bne.n	8011a04 <_printf_i+0x1f0>
 801196e:	f04f 30ff 	mov.w	r0, #4294967295
 8011972:	b004      	add	sp, #16
 8011974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011978:	6823      	ldr	r3, [r4, #0]
 801197a:	f043 0320 	orr.w	r3, r3, #32
 801197e:	6023      	str	r3, [r4, #0]
 8011980:	4832      	ldr	r0, [pc, #200]	@ (8011a4c <_printf_i+0x238>)
 8011982:	2778      	movs	r7, #120	@ 0x78
 8011984:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011988:	6823      	ldr	r3, [r4, #0]
 801198a:	6831      	ldr	r1, [r6, #0]
 801198c:	061f      	lsls	r7, r3, #24
 801198e:	f851 5b04 	ldr.w	r5, [r1], #4
 8011992:	d402      	bmi.n	801199a <_printf_i+0x186>
 8011994:	065f      	lsls	r7, r3, #25
 8011996:	bf48      	it	mi
 8011998:	b2ad      	uxthmi	r5, r5
 801199a:	6031      	str	r1, [r6, #0]
 801199c:	07d9      	lsls	r1, r3, #31
 801199e:	bf44      	itt	mi
 80119a0:	f043 0320 	orrmi.w	r3, r3, #32
 80119a4:	6023      	strmi	r3, [r4, #0]
 80119a6:	b11d      	cbz	r5, 80119b0 <_printf_i+0x19c>
 80119a8:	2310      	movs	r3, #16
 80119aa:	e7ad      	b.n	8011908 <_printf_i+0xf4>
 80119ac:	4826      	ldr	r0, [pc, #152]	@ (8011a48 <_printf_i+0x234>)
 80119ae:	e7e9      	b.n	8011984 <_printf_i+0x170>
 80119b0:	6823      	ldr	r3, [r4, #0]
 80119b2:	f023 0320 	bic.w	r3, r3, #32
 80119b6:	6023      	str	r3, [r4, #0]
 80119b8:	e7f6      	b.n	80119a8 <_printf_i+0x194>
 80119ba:	4616      	mov	r6, r2
 80119bc:	e7bd      	b.n	801193a <_printf_i+0x126>
 80119be:	6833      	ldr	r3, [r6, #0]
 80119c0:	6825      	ldr	r5, [r4, #0]
 80119c2:	6961      	ldr	r1, [r4, #20]
 80119c4:	1d18      	adds	r0, r3, #4
 80119c6:	6030      	str	r0, [r6, #0]
 80119c8:	062e      	lsls	r6, r5, #24
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	d501      	bpl.n	80119d2 <_printf_i+0x1be>
 80119ce:	6019      	str	r1, [r3, #0]
 80119d0:	e002      	b.n	80119d8 <_printf_i+0x1c4>
 80119d2:	0668      	lsls	r0, r5, #25
 80119d4:	d5fb      	bpl.n	80119ce <_printf_i+0x1ba>
 80119d6:	8019      	strh	r1, [r3, #0]
 80119d8:	2300      	movs	r3, #0
 80119da:	6123      	str	r3, [r4, #16]
 80119dc:	4616      	mov	r6, r2
 80119de:	e7bc      	b.n	801195a <_printf_i+0x146>
 80119e0:	6833      	ldr	r3, [r6, #0]
 80119e2:	1d1a      	adds	r2, r3, #4
 80119e4:	6032      	str	r2, [r6, #0]
 80119e6:	681e      	ldr	r6, [r3, #0]
 80119e8:	6862      	ldr	r2, [r4, #4]
 80119ea:	2100      	movs	r1, #0
 80119ec:	4630      	mov	r0, r6
 80119ee:	f7ee fc97 	bl	8000320 <memchr>
 80119f2:	b108      	cbz	r0, 80119f8 <_printf_i+0x1e4>
 80119f4:	1b80      	subs	r0, r0, r6
 80119f6:	6060      	str	r0, [r4, #4]
 80119f8:	6863      	ldr	r3, [r4, #4]
 80119fa:	6123      	str	r3, [r4, #16]
 80119fc:	2300      	movs	r3, #0
 80119fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a02:	e7aa      	b.n	801195a <_printf_i+0x146>
 8011a04:	6923      	ldr	r3, [r4, #16]
 8011a06:	4632      	mov	r2, r6
 8011a08:	4649      	mov	r1, r9
 8011a0a:	4640      	mov	r0, r8
 8011a0c:	47d0      	blx	sl
 8011a0e:	3001      	adds	r0, #1
 8011a10:	d0ad      	beq.n	801196e <_printf_i+0x15a>
 8011a12:	6823      	ldr	r3, [r4, #0]
 8011a14:	079b      	lsls	r3, r3, #30
 8011a16:	d413      	bmi.n	8011a40 <_printf_i+0x22c>
 8011a18:	68e0      	ldr	r0, [r4, #12]
 8011a1a:	9b03      	ldr	r3, [sp, #12]
 8011a1c:	4298      	cmp	r0, r3
 8011a1e:	bfb8      	it	lt
 8011a20:	4618      	movlt	r0, r3
 8011a22:	e7a6      	b.n	8011972 <_printf_i+0x15e>
 8011a24:	2301      	movs	r3, #1
 8011a26:	4632      	mov	r2, r6
 8011a28:	4649      	mov	r1, r9
 8011a2a:	4640      	mov	r0, r8
 8011a2c:	47d0      	blx	sl
 8011a2e:	3001      	adds	r0, #1
 8011a30:	d09d      	beq.n	801196e <_printf_i+0x15a>
 8011a32:	3501      	adds	r5, #1
 8011a34:	68e3      	ldr	r3, [r4, #12]
 8011a36:	9903      	ldr	r1, [sp, #12]
 8011a38:	1a5b      	subs	r3, r3, r1
 8011a3a:	42ab      	cmp	r3, r5
 8011a3c:	dcf2      	bgt.n	8011a24 <_printf_i+0x210>
 8011a3e:	e7eb      	b.n	8011a18 <_printf_i+0x204>
 8011a40:	2500      	movs	r5, #0
 8011a42:	f104 0619 	add.w	r6, r4, #25
 8011a46:	e7f5      	b.n	8011a34 <_printf_i+0x220>
 8011a48:	08011e89 	.word	0x08011e89
 8011a4c:	08011e9a 	.word	0x08011e9a

08011a50 <memmove>:
 8011a50:	4288      	cmp	r0, r1
 8011a52:	b510      	push	{r4, lr}
 8011a54:	eb01 0402 	add.w	r4, r1, r2
 8011a58:	d902      	bls.n	8011a60 <memmove+0x10>
 8011a5a:	4284      	cmp	r4, r0
 8011a5c:	4623      	mov	r3, r4
 8011a5e:	d807      	bhi.n	8011a70 <memmove+0x20>
 8011a60:	1e43      	subs	r3, r0, #1
 8011a62:	42a1      	cmp	r1, r4
 8011a64:	d008      	beq.n	8011a78 <memmove+0x28>
 8011a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a6e:	e7f8      	b.n	8011a62 <memmove+0x12>
 8011a70:	4402      	add	r2, r0
 8011a72:	4601      	mov	r1, r0
 8011a74:	428a      	cmp	r2, r1
 8011a76:	d100      	bne.n	8011a7a <memmove+0x2a>
 8011a78:	bd10      	pop	{r4, pc}
 8011a7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a82:	e7f7      	b.n	8011a74 <memmove+0x24>

08011a84 <_sbrk_r>:
 8011a84:	b538      	push	{r3, r4, r5, lr}
 8011a86:	4d06      	ldr	r5, [pc, #24]	@ (8011aa0 <_sbrk_r+0x1c>)
 8011a88:	2300      	movs	r3, #0
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	4608      	mov	r0, r1
 8011a8e:	602b      	str	r3, [r5, #0]
 8011a90:	f7f0 ff46 	bl	8002920 <_sbrk>
 8011a94:	1c43      	adds	r3, r0, #1
 8011a96:	d102      	bne.n	8011a9e <_sbrk_r+0x1a>
 8011a98:	682b      	ldr	r3, [r5, #0]
 8011a9a:	b103      	cbz	r3, 8011a9e <_sbrk_r+0x1a>
 8011a9c:	6023      	str	r3, [r4, #0]
 8011a9e:	bd38      	pop	{r3, r4, r5, pc}
 8011aa0:	240009f4 	.word	0x240009f4

08011aa4 <_realloc_r>:
 8011aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa8:	4607      	mov	r7, r0
 8011aaa:	4614      	mov	r4, r2
 8011aac:	460d      	mov	r5, r1
 8011aae:	b921      	cbnz	r1, 8011aba <_realloc_r+0x16>
 8011ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ab4:	4611      	mov	r1, r2
 8011ab6:	f7ff bc5b 	b.w	8011370 <_malloc_r>
 8011aba:	b92a      	cbnz	r2, 8011ac8 <_realloc_r+0x24>
 8011abc:	f7ff fbec 	bl	8011298 <_free_r>
 8011ac0:	4625      	mov	r5, r4
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac8:	f000 f81a 	bl	8011b00 <_malloc_usable_size_r>
 8011acc:	4284      	cmp	r4, r0
 8011ace:	4606      	mov	r6, r0
 8011ad0:	d802      	bhi.n	8011ad8 <_realloc_r+0x34>
 8011ad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011ad6:	d8f4      	bhi.n	8011ac2 <_realloc_r+0x1e>
 8011ad8:	4621      	mov	r1, r4
 8011ada:	4638      	mov	r0, r7
 8011adc:	f7ff fc48 	bl	8011370 <_malloc_r>
 8011ae0:	4680      	mov	r8, r0
 8011ae2:	b908      	cbnz	r0, 8011ae8 <_realloc_r+0x44>
 8011ae4:	4645      	mov	r5, r8
 8011ae6:	e7ec      	b.n	8011ac2 <_realloc_r+0x1e>
 8011ae8:	42b4      	cmp	r4, r6
 8011aea:	4622      	mov	r2, r4
 8011aec:	4629      	mov	r1, r5
 8011aee:	bf28      	it	cs
 8011af0:	4632      	movcs	r2, r6
 8011af2:	f7ff fbc3 	bl	801127c <memcpy>
 8011af6:	4629      	mov	r1, r5
 8011af8:	4638      	mov	r0, r7
 8011afa:	f7ff fbcd 	bl	8011298 <_free_r>
 8011afe:	e7f1      	b.n	8011ae4 <_realloc_r+0x40>

08011b00 <_malloc_usable_size_r>:
 8011b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b04:	1f18      	subs	r0, r3, #4
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	bfbc      	itt	lt
 8011b0a:	580b      	ldrlt	r3, [r1, r0]
 8011b0c:	18c0      	addlt	r0, r0, r3
 8011b0e:	4770      	bx	lr

08011b10 <_init>:
 8011b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b12:	bf00      	nop
 8011b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b16:	bc08      	pop	{r3}
 8011b18:	469e      	mov	lr, r3
 8011b1a:	4770      	bx	lr

08011b1c <_fini>:
 8011b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b1e:	bf00      	nop
 8011b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b22:	bc08      	pop	{r3}
 8011b24:	469e      	mov	lr, r3
 8011b26:	4770      	bx	lr
