
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000147fc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  08014acc  08014acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015424  08015424  00016424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801542c  0801542c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015430  08015430  00016430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08015434  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b44  2400006c  080154a0  0001706c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001bb0  080154a0  00017bb0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001706c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028ad1  00000000  00000000  0001709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042d9  00000000  00000000  0003fb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020a8  00000000  00000000  00043e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001974  00000000  00000000  00045ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003acc6  00000000  00000000  00047864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c637  00000000  00000000  0008252a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a532  00000000  00000000  000aeb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  00229093  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009330  00000000  00000000  0022911c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  0023244c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014ab4 	.word	0x08014ab4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08014ab4 	.word	0x08014ab4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <LPF_EMA_Init>:
 *      Author: RMG
 */

#include "LPF.h"

void LPF_EMA_Init(LPF_EMA *filt, float alpha){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	ed87 0a00 	vstr	s0, [r7]

	//Set filter coefficient

	LPF_EMA_SetAlpha(filt, alpha);
 80006bc:	ed97 0a00 	vldr	s0, [r7]
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f808 	bl	80006d6 <LPF_EMA_SetAlpha>

	//Clear filter output

	filt->output = 0.0f;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <LPF_EMA_SetAlpha>:

void LPF_EMA_SetAlpha(LPF_EMA *filt, float alpha){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	ed87 0a00 	vstr	s0, [r7]

	//Correct filter

	if(alpha > 1.0f){
 80006e2:	edd7 7a00 	vldr	s15, [r7]
 80006e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f2:	dd03      	ble.n	80006fc <LPF_EMA_SetAlpha+0x26>
		alpha = 1.0f;
 80006f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	e009      	b.n	8000710 <LPF_EMA_SetAlpha+0x3a>

	}else if (alpha < 0.0f){
 80006fc:	edd7 7a00 	vldr	s15, [r7]
 8000700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000708:	d502      	bpl.n	8000710 <LPF_EMA_SetAlpha+0x3a>
		alpha = 0.0f;
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
	}

	//Set filter coefficient

	filt->alpha = alpha;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <LPF_EMA_Update>:

float LPF_EMA_Update(LPF_EMA *filt, float in){
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	ed87 0a00 	vstr	s0, [r7]

	filt->output = filt->alpha*in + (1-filt->alpha)*filt->output;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	ed93 7a00 	vldr	s14, [r3]
 8000734:	edd7 7a00 	vldr	s15, [r7]
 8000738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000746:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	edc3 7a01 	vstr	s15, [r3, #4]

	return filt->output;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	ee07 3a90 	vmov	s15, r3
}
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000778:	f002 f972 	bl	8002a60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800077c:	f000 f98e 	bl	8000a9c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000780:	f000 f9fa 	bl	8000b78 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000784:	f000 fde0 	bl	8001348 <MX_GPIO_Init>
	MX_DMA_Init();
 8000788:	f000 fdbe 	bl	8001308 <MX_DMA_Init>
	MX_ADC1_Init();
 800078c:	f000 fa26 	bl	8000bdc <MX_ADC1_Init>
	MX_ADC2_Init();
 8000790:	f000 fac0 	bl	8000d14 <MX_ADC2_Init>
	MX_FDCAN1_Init();
 8000794:	f000 fb26 	bl	8000de4 <MX_FDCAN1_Init>
	MX_FDCAN2_Init();
 8000798:	f000 fba2 	bl	8000ee0 <MX_FDCAN2_Init>
	MX_TIM1_Init();
 800079c:	f000 fc3c 	bl	8001018 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80007a0:	f000 fd66 	bl	8001270 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80007a4:	f000 fcf0 	bl	8001188 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 80007a8:	f000 fd16 	bl	80011d8 <MX_USART1_UART_Init>
	MX_SDMMC1_SD_Init();
 80007ac:	f000 fc16 	bl	8000fdc <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 80007b0:	f010 fa7c 	bl	8010cac <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	// Inicializar tarjeta microSD
	SDCard_start();
 80007b4:	f001 fa7c 	bl	8001cb0 <SDCard_start>
	HAL_Delay(2000);
 80007b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007bc:	f002 f9e2 	bl	8002b84 <HAL_Delay>

	//sprintf(buffer, "%u,test,test1,test2\n", (unsigned)time(NULL));

	//print(buffer);
	//SDCard_write("data.csv", buffer, 1);
	SDCard_write("data.csv", "test,test1,test2\n", 1); // el modo 1 crea un archivo nuevo (importante añadir \n al final)
 80007c0:	2201      	movs	r2, #1
 80007c2:	4988      	ldr	r1, [pc, #544]	@ (80009e4 <main+0x270>)
 80007c4:	4888      	ldr	r0, [pc, #544]	@ (80009e8 <main+0x274>)
 80007c6:	f001 faff 	bl	8001dc8 <SDCard_write>
	//print(buffer);						 // Mostrar el buffer por USART
	// fprintf(timestamp, "%u\n", (unsigned)time(NULL));
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
 80007ca:	2200      	movs	r2, #0
 80007cc:	4987      	ldr	r1, [pc, #540]	@ (80009ec <main+0x278>)
 80007ce:	4886      	ldr	r0, [pc, #536]	@ (80009e8 <main+0x274>)
 80007d0:	f001 fafa 	bl	8001dc8 <SDCard_write>
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 80007d4:	2203      	movs	r2, #3
 80007d6:	4986      	ldr	r1, [pc, #536]	@ (80009f0 <main+0x27c>)
 80007d8:	4886      	ldr	r0, [pc, #536]	@ (80009f4 <main+0x280>)
 80007da:	f002 feeb 	bl	80035b4 <HAL_ADC_Start_DMA>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d004      	beq.n	80007ee <main+0x7a>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 80007e4:	4884      	ldr	r0, [pc, #528]	@ (80009f8 <main+0x284>)
 80007e6:	f000 fe93 	bl	8001510 <print>
#endif
		Error_Handler();
 80007ea:	f001 fbe7 	bl	8001fbc <Error_Handler>
	}
	// Inicializacion filtro paso bajo
	LPF_EMA_Init(&s1_filt, 0.2f);
 80007ee:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 80009fc <main+0x288>
 80007f2:	4883      	ldr	r0, [pc, #524]	@ (8000a00 <main+0x28c>)
 80007f4:	f7ff ff5c 	bl	80006b0 <LPF_EMA_Init>
	LPF_EMA_Init(&s2_filt, 0.2f);
 80007f8:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 80009fc <main+0x288>
 80007fc:	4881      	ldr	r0, [pc, #516]	@ (8000a04 <main+0x290>)
 80007fe:	f7ff ff57 	bl	80006b0 <LPF_EMA_Init>

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000802:	4881      	ldr	r0, [pc, #516]	@ (8000a08 <main+0x294>)
 8000804:	f006 feb8 	bl	8007578 <HAL_FDCAN_Start>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d004      	beq.n	8000818 <main+0xa4>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 800080e:	487f      	ldr	r0, [pc, #508]	@ (8000a0c <main+0x298>)
 8000810:	f000 fe7e 	bl	8001510 <print>
#endif
		Error_Handler();
 8000814:	f001 fbd2 	bl	8001fbc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	487a      	ldr	r0, [pc, #488]	@ (8000a08 <main+0x294>)
 800081e:	f007 f8ed 	bl	80079fc <HAL_FDCAN_ActivateNotification>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d004      	beq.n	8000832 <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000828:	4879      	ldr	r0, [pc, #484]	@ (8000a10 <main+0x29c>)
 800082a:	f000 fe71 	bl	8001510 <print>
#endif
		Error_Handler();
 800082e:	f001 fbc5 	bl	8001fbc <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8000832:	4878      	ldr	r0, [pc, #480]	@ (8000a14 <main+0x2a0>)
 8000834:	f006 fea0 	bl	8007578 <HAL_FDCAN_Start>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 800083e:	4876      	ldr	r0, [pc, #472]	@ (8000a18 <main+0x2a4>)
 8000840:	f000 fe66 	bl	8001510 <print>

#endif
		Error_Handler();
 8000844:	f001 fbba 	bl	8001fbc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000848:	2200      	movs	r2, #0
 800084a:	2101      	movs	r1, #1
 800084c:	4871      	ldr	r0, [pc, #452]	@ (8000a14 <main+0x2a0>)
 800084e:	f007 f8d5 	bl	80079fc <HAL_FDCAN_ActivateNotification>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d004      	beq.n	8000862 <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000858:	4870      	ldr	r0, [pc, #448]	@ (8000a1c <main+0x2a8>)
 800085a:	f000 fe59 	bl	8001510 <print>
#endif
		Error_Handler();
 800085e:	f001 fbad 	bl	8001fbc <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 8000862:	486f      	ldr	r0, [pc, #444]	@ (8000a20 <main+0x2ac>)
 8000864:	f000 fe54 	bl	8001510 <print>
#endif
	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 8000868:	e006      	b.n	8000878 <main+0x104>
	{

		if (config_inv_lectura_v == 1)
 800086a:	4b6e      	ldr	r3, [pc, #440]	@ (8000a24 <main+0x2b0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d102      	bne.n	8000878 <main+0x104>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 8000872:	486d      	ldr	r0, [pc, #436]	@ (8000a28 <main+0x2b4>)
 8000874:	f000 fe4c 	bl	8001510 <print>
	while (config_inv_lectura_v == 0)
 8000878:	4b6a      	ldr	r3, [pc, #424]	@ (8000a24 <main+0x2b0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0f4      	beq.n	800086a <main+0xf6>
	}

#if !CALIBRATION

	// Estado STAND BY inversor
	while (state != 3)
 8000880:	e006      	b.n	8000890 <main+0x11c>
	{

		if (state == 3)
 8000882:	4b6a      	ldr	r3, [pc, #424]	@ (8000a2c <main+0x2b8>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b03      	cmp	r3, #3
 8000888:	d102      	bne.n	8000890 <main+0x11c>
		{
#if DEBUG
			print("Precarga");
 800088a:	4869      	ldr	r0, [pc, #420]	@ (8000a30 <main+0x2bc>)
 800088c:	f000 fe40 	bl	8001510 <print>
	while (state != 3)
 8000890:	4b66      	ldr	r3, [pc, #408]	@ (8000a2c <main+0x2b8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b03      	cmp	r3, #3
 8000896:	d1f4      	bne.n	8000882 <main+0x10e>
#endif
		}
	}
	// PRE-CHARGE
	while (precarga_inv == 0)
 8000898:	e037      	b.n	800090a <main+0x196>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 800089a:	4b66      	ldr	r3, [pc, #408]	@ (8000a34 <main+0x2c0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	4965      	ldr	r1, [pc, #404]	@ (8000a38 <main+0x2c4>)
 80008a2:	4866      	ldr	r0, [pc, #408]	@ (8000a3c <main+0x2c8>)
 80008a4:	f013 fc66 	bl	8014174 <siprintf>
		print(TxBuffer);
 80008a8:	4864      	ldr	r0, [pc, #400]	@ (8000a3c <main+0x2c8>)
 80008aa:	f000 fe31 	bl	8001510 <print>
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80008ae:	4b64      	ldr	r3, [pc, #400]	@ (8000a40 <main+0x2cc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a64      	ldr	r2, [pc, #400]	@ (8000a44 <main+0x2d0>)
 80008b4:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 80008b6:	4b63      	ldr	r3, [pc, #396]	@ (8000a44 <main+0x2d0>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008bc:	4b61      	ldr	r3, [pc, #388]	@ (8000a44 <main+0x2d0>)
 80008be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c2:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008c4:	4b5f      	ldr	r3, [pc, #380]	@ (8000a44 <main+0x2d0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008ca:	4b5e      	ldr	r3, [pc, #376]	@ (8000a44 <main+0x2d0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008d0:	4b58      	ldr	r3, [pc, #352]	@ (8000a34 <main+0x2c0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b5c      	ldr	r3, [pc, #368]	@ (8000a48 <main+0x2d4>)
 80008d8:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008da:	4b56      	ldr	r3, [pc, #344]	@ (8000a34 <main+0x2c0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	121b      	asrs	r3, r3, #8
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b59      	ldr	r3, [pc, #356]	@ (8000a48 <main+0x2d4>)
 80008e4:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80008e6:	4a58      	ldr	r2, [pc, #352]	@ (8000a48 <main+0x2d4>)
 80008e8:	4956      	ldr	r1, [pc, #344]	@ (8000a44 <main+0x2d0>)
 80008ea:	484a      	ldr	r0, [pc, #296]	@ (8000a14 <main+0x2a0>)
 80008ec:	f006 fe6f 	bl	80075ce <HAL_FDCAN_AddMessageToTxFifoQ>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <main+0x188>
		{
#if DEBUG
			print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
 80008f6:	4855      	ldr	r0, [pc, #340]	@ (8000a4c <main+0x2d8>)
 80008f8:	f000 fe0a 	bl	8001510 <print>
#endif
		}

		if (precarga_inv == 1)
 80008fc:	4b54      	ldr	r3, [pc, #336]	@ (8000a50 <main+0x2dc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d102      	bne.n	800090a <main+0x196>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 8000904:	4853      	ldr	r0, [pc, #332]	@ (8000a54 <main+0x2e0>)
 8000906:	f000 fe03 	bl	8001510 <print>
	while (precarga_inv == 0)
 800090a:	4b51      	ldr	r3, [pc, #324]	@ (8000a50 <main+0x2dc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0c3      	beq.n	800089a <main+0x126>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 8000912:	4851      	ldr	r0, [pc, #324]	@ (8000a58 <main+0x2e4>)
 8000914:	f000 fdfc 	bl	8001510 <print>
#endif
	// Estado READY inversor
	TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000918:	4b50      	ldr	r3, [pc, #320]	@ (8000a5c <main+0x2e8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a50      	ldr	r2, [pc, #320]	@ (8000a60 <main+0x2ec>)
 800091e:	6013      	str	r3, [r2, #0]
	TxHeader_Inv.DataLength = 3;
 8000920:	4b4f      	ldr	r3, [pc, #316]	@ (8000a60 <main+0x2ec>)
 8000922:	2203      	movs	r2, #3
 8000924:	60da      	str	r2, [r3, #12]
	TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000926:	4b4e      	ldr	r3, [pc, #312]	@ (8000a60 <main+0x2ec>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]

	TxData_Inv[0] = 0x0;
 800092c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a64 <main+0x2f0>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
	TxData_Inv[1] = 0x0;
 8000932:	4b4c      	ldr	r3, [pc, #304]	@ (8000a64 <main+0x2f0>)
 8000934:	2200      	movs	r2, #0
 8000936:	705a      	strb	r2, [r3, #1]
	TxData_Inv[2] = 0x4;
 8000938:	4b4a      	ldr	r3, [pc, #296]	@ (8000a64 <main+0x2f0>)
 800093a:	2204      	movs	r2, #4
 800093c:	709a      	strb	r2, [r3, #2]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800093e:	4a49      	ldr	r2, [pc, #292]	@ (8000a64 <main+0x2f0>)
 8000940:	4947      	ldr	r1, [pc, #284]	@ (8000a60 <main+0x2ec>)
 8000942:	4831      	ldr	r0, [pc, #196]	@ (8000a08 <main+0x294>)
 8000944:	f006 fe43 	bl	80075ce <HAL_FDCAN_AddMessageToTxFifoQ>

	while (state != 4)
 8000948:	bf00      	nop
 800094a:	4b38      	ldr	r3, [pc, #224]	@ (8000a2c <main+0x2b8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b04      	cmp	r3, #4
 8000950:	d1fb      	bne.n	800094a <main+0x1d6>
	{
	}

#if DEBUG
	print("state: ready");
 8000952:	4845      	ldr	r0, [pc, #276]	@ (8000a68 <main+0x2f4>)
 8000954:	f000 fddc 	bl	8001510 <print>

#endif

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000958:	e027      	b.n	80009aa <main+0x236>
	{

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 800095a:	2180      	movs	r1, #128	@ 0x80
 800095c:	4843      	ldr	r0, [pc, #268]	@ (8000a6c <main+0x2f8>)
 800095e:	f007 ff6b 	bl	8008838 <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b42      	ldr	r3, [pc, #264]	@ (8000a70 <main+0x2fc>)
 8000968:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (start_button_act == 1 && start_button_ant == 0)
 800096a:	4b41      	ldr	r3, [pc, #260]	@ (8000a70 <main+0x2fc>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d11b      	bne.n	80009aa <main+0x236>
 8000972:	4b40      	ldr	r3, [pc, #256]	@ (8000a74 <main+0x300>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d117      	bne.n	80009aa <main+0x236>
		{

#if DEBUG
			print("Botón Start + Freno:");
 800097a:	483f      	ldr	r0, [pc, #252]	@ (8000a78 <main+0x304>)
 800097c:	f000 fdc8 	bl	8001510 <print>
			printValue(s_freno);
 8000980:	4b3e      	ldr	r3, [pc, #248]	@ (8000a7c <main+0x308>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fde1 	bl	800154c <printValue>
#endif
			if (s_freno > UMBRAL_FRENO)
 800098a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a7c <main+0x308>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000992:	4293      	cmp	r3, r2
 8000994:	dd06      	ble.n	80009a4 <main+0x230>
			{
				boton_arranque = 1;
 8000996:	4b3a      	ldr	r3, [pc, #232]	@ (8000a80 <main+0x30c>)
 8000998:	2201      	movs	r2, #1
 800099a:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 800099c:	4839      	ldr	r0, [pc, #228]	@ (8000a84 <main+0x310>)
 800099e:	f000 fdb7 	bl	8001510 <print>
 80009a2:	e002      	b.n	80009aa <main+0x236>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 80009a4:	4838      	ldr	r0, [pc, #224]	@ (8000a88 <main+0x314>)
 80009a6:	f000 fdb3 	bl	8001510 <print>
	while (boton_arranque == 0)
 80009aa:	4b35      	ldr	r3, [pc, #212]	@ (8000a80 <main+0x30c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0d3      	beq.n	800095a <main+0x1e6>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 80009b2:	4836      	ldr	r0, [pc, #216]	@ (8000a8c <main+0x318>)
 80009b4:	f000 fdac 	bl	8001510 <print>
#endif
#if !CALIBRATION

	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 80009b8:	2201      	movs	r2, #1
 80009ba:	2102      	movs	r1, #2
 80009bc:	4834      	ldr	r0, [pc, #208]	@ (8000a90 <main+0x31c>)
 80009be:	f007 ff53 	bl	8008868 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80009c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009c6:	f002 f8dd 	bl	8002b84 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 80009ca:	2200      	movs	r2, #0
 80009cc:	2102      	movs	r1, #2
 80009ce:	4830      	ldr	r0, [pc, #192]	@ (8000a90 <main+0x31c>)
 80009d0:	f007 ff4a 	bl	8008868 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 80009d4:	482f      	ldr	r0, [pc, #188]	@ (8000a94 <main+0x320>)
 80009d6:	f000 fd9b 	bl	8001510 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * prescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80009da:	482f      	ldr	r0, [pc, #188]	@ (8000a98 <main+0x324>)
 80009dc:	f00c ffa0 	bl	800d920 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <main+0x26c>
 80009e4:	08014acc 	.word	0x08014acc
 80009e8:	08014ae0 	.word	0x08014ae0
 80009ec:	08014aec 	.word	0x08014aec
 80009f0:	2400166c 	.word	0x2400166c
 80009f4:	24000094 	.word	0x24000094
 80009f8:	08014b04 	.word	0x08014b04
 80009fc:	3e4ccccd 	.word	0x3e4ccccd
 8000a00:	24001684 	.word	0x24001684
 8000a04:	2400168c 	.word	0x2400168c
 8000a08:	240001ec 	.word	0x240001ec
 8000a0c:	08014b24 	.word	0x08014b24
 8000a10:	08014b44 	.word	0x08014b44
 8000a14:	2400028c 	.word	0x2400028c
 8000a18:	08014b6c 	.word	0x08014b6c
 8000a1c:	08014b8c 	.word	0x08014b8c
 8000a20:	08014bb4 	.word	0x08014bb4
 8000a24:	2400008c 	.word	0x2400008c
 8000a28:	08014bd0 	.word	0x08014bd0
 8000a2c:	240016a2 	.word	0x240016a2
 8000a30:	08014c04 	.word	0x08014c04
 8000a34:	24001660 	.word	0x24001660
 8000a38:	08014c10 	.word	0x08014c10
 8000a3c:	24001714 	.word	0x24001714
 8000a40:	24000004 	.word	0x24000004
 8000a44:	240005b4 	.word	0x240005b4
 8000a48:	24000610 	.word	0x24000610
 8000a4c:	08014c28 	.word	0x08014c28
 8000a50:	24000088 	.word	0x24000088
 8000a54:	08014c50 	.word	0x08014c50
 8000a58:	08014c6c 	.word	0x08014c6c
 8000a5c:	24000000 	.word	0x24000000
 8000a60:	24000568 	.word	0x24000568
 8000a64:	24000600 	.word	0x24000600
 8000a68:	08014c80 	.word	0x08014c80
 8000a6c:	58021800 	.word	0x58021800
 8000a70:	24001658 	.word	0x24001658
 8000a74:	2400165c 	.word	0x2400165c
 8000a78:	08014c90 	.word	0x08014c90
 8000a7c:	24001694 	.word	0x24001694
 8000a80:	24000090 	.word	0x24000090
 8000a84:	08014ca8 	.word	0x08014ca8
 8000a88:	08014cc8 	.word	0x08014cc8
 8000a8c:	08014ce4 	.word	0x08014ce4
 8000a90:	58020800 	.word	0x58020800
 8000a94:	08014cf4 	.word	0x08014cf4
 8000a98:	240003f4 	.word	0x240003f4

08000a9c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	@ 0x70
 8000aa0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa6:	224c      	movs	r2, #76	@ 0x4c
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f013 fb82 	bl	80141b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f013 fb7c 	bl	80141b4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000abc:	2002      	movs	r0, #2
 8000abe:	f007 feed 	bl	800889c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <SystemClock_Config+0xd8>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a2a      	ldr	r2, [pc, #168]	@ (8000b74 <SystemClock_Config+0xd8>)
 8000acc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <SystemClock_Config+0xd8>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000ade:	bf00      	nop
 8000ae0:	4b24      	ldr	r3, [pc, #144]	@ (8000b74 <SystemClock_Config+0xd8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aec:	d1f8      	bne.n	8000ae0 <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afc:	2302      	movs	r3, #2
 8000afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 8000b04:	232c      	movs	r3, #44	@ 0x2c
 8000b06:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b14:	230c      	movs	r3, #12
 8000b16:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b24:	4618      	mov	r0, r3
 8000b26:	f007 fef3 	bl	8008910 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000b30:	f001 fa44 	bl	8001fbc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000b34:	233f      	movs	r3, #63	@ 0x3f
 8000b36:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b40:	2308      	movs	r3, #8
 8000b42:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b44:	2340      	movs	r3, #64	@ 0x40
 8000b46:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b48:	2340      	movs	r3, #64	@ 0x40
 8000b4a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b50:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b52:	2340      	movs	r3, #64	@ 0x40
 8000b54:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2103      	movs	r1, #3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fab2 	bl	80090c4 <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xce>
	{
		Error_Handler();
 8000b66:	f001 fa29 	bl	8001fbc <Error_Handler>
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3770      	adds	r7, #112	@ 0x70
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	58024800 	.word	0x58024800

08000b78 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b7c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	22b8      	movs	r2, #184	@ 0xb8
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f013 fb15 	bl	80141b4 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_SDMMC;
 8000b8a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b8e:	f04f 0300 	mov.w	r3, #0
 8000b92:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000baa:	23c0      	movs	r3, #192	@ 0xc0
 8000bac:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000bb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bba:	653b      	str	r3, [r7, #80]	@ 0x50
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f008 fe09 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <PeriphCommonClock_Config+0x5c>
	{
		Error_Handler();
 8000bd0:	f001 f9f4 	bl	8001fbc <Error_Handler>
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	37b8      	adds	r7, #184	@ 0xb8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2224      	movs	r2, #36	@ 0x24
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f013 fadd 	bl	80141b4 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000bfa:	4b41      	ldr	r3, [pc, #260]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000bfc:	4a41      	ldr	r2, [pc, #260]	@ (8000d04 <MX_ADC1_Init+0x128>)
 8000bfe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c00:	4b3f      	ldr	r3, [pc, #252]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c02:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c06:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c08:	4b3d      	ldr	r3, [pc, #244]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c14:	4b3a      	ldr	r3, [pc, #232]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c1a:	4b39      	ldr	r3, [pc, #228]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000c20:	4b37      	ldr	r3, [pc, #220]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 3;
 8000c26:	4b36      	ldr	r3, [pc, #216]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c28:	2203      	movs	r2, #3
 8000c2a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c2c:	4b34      	ldr	r3, [pc, #208]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	4b32      	ldr	r3, [pc, #200]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3a:	4b31      	ldr	r3, [pc, #196]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c40:	4b2f      	ldr	r3, [pc, #188]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c42:	2203      	movs	r2, #3
 8000c44:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c46:	4b2e      	ldr	r3, [pc, #184]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8000c52:	4b2b      	ldr	r3, [pc, #172]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.Ratio = 1;
 8000c5a:	4b29      	ldr	r3, [pc, #164]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c60:	4827      	ldr	r0, [pc, #156]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c62:	f002 fa9f 	bl	80031a4 <HAL_ADC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC1_Init+0x94>
	{
		Error_Handler();
 8000c6c:	f001 f9a6 	bl	8001fbc <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4821      	ldr	r0, [pc, #132]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000c7c:	f003 ff62 	bl	8004b44 <HAL_ADCEx_MultiModeConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0xae>
	{
		Error_Handler();
 8000c86:	f001 f999 	bl	8001fbc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <MX_ADC1_Init+0x12c>)
 8000c8c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c92:	2305      	movs	r3, #5
 8000c94:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c96:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c9a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000caa:	463b      	mov	r3, r7
 8000cac:	4619      	mov	r1, r3
 8000cae:	4814      	ldr	r0, [pc, #80]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000cb0:	f002 ffb4 	bl	8003c1c <HAL_ADC_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_ADC1_Init+0xe2>
	{
		Error_Handler();
 8000cba:	f001 f97f 	bl	8001fbc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <MX_ADC1_Init+0x130>)
 8000cc0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000ccc:	f002 ffa6 	bl	8003c1c <HAL_ADC_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_ADC1_Init+0xfe>
	{
		Error_Handler();
 8000cd6:	f001 f971 	bl	8001fbc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <MX_ADC1_Init+0x134>)
 8000cdc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4806      	ldr	r0, [pc, #24]	@ (8000d00 <MX_ADC1_Init+0x124>)
 8000ce8:	f002 ff98 	bl	8003c1c <HAL_ADC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0x11a>
	{
		Error_Handler();
 8000cf2:	f001 f963 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3730      	adds	r7, #48	@ 0x30
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	24000094 	.word	0x24000094
 8000d04:	40022000 	.word	0x40022000
 8000d08:	10c00010 	.word	0x10c00010
 8000d0c:	14f00020 	.word	0x14f00020
 8000d10:	08600004 	.word	0x08600004

08000d14 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2224      	movs	r2, #36	@ 0x24
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f013 fa47 	bl	80141b4 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000d26:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d28:	4a2c      	ldr	r2, [pc, #176]	@ (8000ddc <MX_ADC2_Init+0xc8>)
 8000d2a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d2e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d32:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d34:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d3a:	4b27      	ldr	r3, [pc, #156]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d40:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d46:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc2.Init.OversamplingMode = DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc2.Init.Oversampling.Ratio = 1;
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d8c:	4812      	ldr	r0, [pc, #72]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d8e:	f002 fa09 	bl	80031a4 <HAL_ADC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC2_Init+0x88>
	{
		Error_Handler();
 8000d98:	f001 f910 	bl	8001fbc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_ADC2_Init+0xcc>)
 8000d9e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da0:	2306      	movs	r3, #6
 8000da2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000dac:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dae:	2304      	movs	r3, #4
 8000db0:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000dc2:	f002 ff2b 	bl	8003c1c <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC2_Init+0xbc>
	{
		Error_Handler();
 8000dcc:	f001 f8f6 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	@ 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000104 	.word	0x24000104
 8000ddc:	40022100 	.word	0x40022100
 8000de0:	25b00200 	.word	0x25b00200

08000de4 <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000dea:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000dec:	4a3b      	ldr	r2, [pc, #236]	@ (8000edc <MX_FDCAN1_Init+0xf8>)
 8000dee:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000df0:	4b39      	ldr	r3, [pc, #228]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000df6:	4b38      	ldr	r3, [pc, #224]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = ENABLE;
 8000dfc:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000e02:	4b35      	ldr	r3, [pc, #212]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000e08:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 6;
 8000e0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e10:	2206      	movs	r2, #6
 8000e12:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e14:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e22:	2205      	movs	r2, #5
 8000e24:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000e26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 8000e32:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 1;
 8000e44:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 1;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e50:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e52:	2220      	movs	r2, #32
 8000e54:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e58:	2204      	movs	r2, #4
 8000e5a:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e5e:	2220      	movs	r2, #32
 8000e60:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e64:	2204      	movs	r2, #4
 8000e66:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e70:	2204      	movs	r2, #4
 8000e72:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e82:	2220      	movs	r2, #32
 8000e84:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e92:	4811      	ldr	r0, [pc, #68]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000e94:	f006 f91c 	bl	80070d0 <HAL_FDCAN_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8000e9e:	f001 f88d 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <MX_FDCAN1_Init+0xf4>)
 8000ec0:	f006 fae4 	bl	800748c <HAL_FDCAN_ConfigFilter>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000eca:	f001 f877 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE END FDCAN1_Init 2 */
}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	240001ec 	.word	0x240001ec
 8000edc:	4000a000 	.word	0x4000a000

08000ee0 <MX_FDCAN2_Init>:
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN2_Init 0 */

	/* USER CODE BEGIN FDCAN2_Init 1 */

	/* USER CODE END FDCAN2_Init 1 */
	hfdcan2.Instance = FDCAN2;
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd8 <MX_FDCAN2_Init+0xf8>)
 8000eea:	601a      	str	r2, [r3, #0]
	hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000eec:	4b39      	ldr	r3, [pc, #228]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
	hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ef2:	4b38      	ldr	r3, [pc, #224]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
	hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ef8:	4b36      	ldr	r3, [pc, #216]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	741a      	strb	r2, [r3, #16]
	hfdcan2.Init.TransmitPause = DISABLE;
 8000efe:	4b35      	ldr	r3, [pc, #212]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	745a      	strb	r2, [r3, #17]
	hfdcan2.Init.ProtocolException = DISABLE;
 8000f04:	4b33      	ldr	r3, [pc, #204]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	749a      	strb	r2, [r3, #18]
	hfdcan2.Init.NominalPrescaler = 6;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f0c:	2206      	movs	r2, #6
 8000f0e:	615a      	str	r2, [r3, #20]
	hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f10:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	619a      	str	r2, [r3, #24]
	hfdcan2.Init.NominalTimeSeg1 = 10;
 8000f16:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f18:	220a      	movs	r2, #10
 8000f1a:	61da      	str	r2, [r3, #28]
	hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f1e:	2205      	movs	r2, #5
 8000f20:	621a      	str	r2, [r3, #32]
	hfdcan2.Init.DataPrescaler = 1;
 8000f22:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f28:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan2.Init.DataTimeSeg1 = 1;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan2.Init.DataTimeSeg2 = 1;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan2.Init.MessageRAMOffset = 0;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan2.Init.StdFiltersNbr = 1;
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan2.Init.ExtFiltersNbr = 1;
 8000f46:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f4e:	2210      	movs	r2, #16
 8000f50:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f54:	2204      	movs	r2, #4
 8000f56:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f60:	2204      	movs	r2, #4
 8000f62:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan2.Init.RxBuffersNbr = 0;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan2.Init.TxEventsNbr = 0;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan2.Init.TxBuffersNbr = 0;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f7e:	2210      	movs	r2, #16
 8000f80:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f8e:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000f90:	f006 f89e 	bl	80070d0 <HAL_FDCAN_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_FDCAN2_Init+0xbe>
	{
		Error_Handler();
 8000f9a:	f001 f80f 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000f9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fa2:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_FDCAN2_Init+0xf4>)
 8000fbe:	f006 fa65 	bl	800748c <HAL_FDCAN_ConfigFilter>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8000fc8:	f000 fff8 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE END FDCAN2_Init 2 */
}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2400028c 	.word	0x2400028c
 8000fd8:	4000a400 	.word	0x4000a400

08000fdc <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_SDMMC1_SD_Init+0x34>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8001014 <MX_SDMMC1_SD_Init+0x38>)
 8000fe4:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <MX_SDMMC1_SD_Init+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <MX_SDMMC1_SD_Init+0x34>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <MX_SDMMC1_SD_Init+0x34>)
 8000ff4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ff8:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <MX_SDMMC1_SD_Init+0x34>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 2;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <MX_SDMMC1_SD_Init+0x34>)
 8001002:	2202      	movs	r2, #2
 8001004:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	2400032c 	.word	0x2400032c
 8001014:	52007000 	.word	0x52007000

08001018 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09c      	sub	sp, #112	@ 0x70
 800101c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001038:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2234      	movs	r2, #52	@ 0x34
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f013 f8ae 	bl	80141b4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001058:	4b49      	ldr	r3, [pc, #292]	@ (8001180 <MX_TIM1_Init+0x168>)
 800105a:	4a4a      	ldr	r2, [pc, #296]	@ (8001184 <MX_TIM1_Init+0x16c>)
 800105c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800105e:	4b48      	ldr	r3, [pc, #288]	@ (8001180 <MX_TIM1_Init+0x168>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b46      	ldr	r3, [pc, #280]	@ (8001180 <MX_TIM1_Init+0x168>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800106a:	4b45      	ldr	r3, [pc, #276]	@ (8001180 <MX_TIM1_Init+0x168>)
 800106c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001070:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b43      	ldr	r3, [pc, #268]	@ (8001180 <MX_TIM1_Init+0x168>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001078:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <MX_TIM1_Init+0x168>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107e:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <MX_TIM1_Init+0x168>)
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001084:	483e      	ldr	r0, [pc, #248]	@ (8001180 <MX_TIM1_Init+0x168>)
 8001086:	f00c fbf3 	bl	800d870 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001090:	f000 ff94 	bl	8001fbc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001098:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800109e:	4619      	mov	r1, r3
 80010a0:	4837      	ldr	r0, [pc, #220]	@ (8001180 <MX_TIM1_Init+0x168>)
 80010a2:	f00c ff3f 	bl	800df24 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80010ac:	f000 ff86 	bl	8001fbc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b0:	4833      	ldr	r0, [pc, #204]	@ (8001180 <MX_TIM1_Init+0x168>)
 80010b2:	f00c fcbb 	bl	800da2c <HAL_TIM_PWM_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80010bc:	f000 ff7e 	bl	8001fbc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d0:	4619      	mov	r1, r3
 80010d2:	482b      	ldr	r0, [pc, #172]	@ (8001180 <MX_TIM1_Init+0x168>)
 80010d4:	f00d fc6c 	bl	800e9b0 <HAL_TIMEx_MasterConfigSynchronization>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80010de:	f000 ff6d 	bl	8001fbc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e2:	2360      	movs	r3, #96	@ 0x60
 80010e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ee:	2300      	movs	r3, #0
 80010f0:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	481e      	ldr	r0, [pc, #120]	@ (8001180 <MX_TIM1_Init+0x168>)
 8001108:	f00c fdf8 	bl	800dcfc <HAL_TIM_PWM_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8001112:	f000 ff53 	bl	8001fbc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001116:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800111a:	2204      	movs	r2, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4818      	ldr	r0, [pc, #96]	@ (8001180 <MX_TIM1_Init+0x168>)
 8001120:	f00c fdec 	bl	800dcfc <HAL_TIM_PWM_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 800112a:	f000 ff47 	bl	8001fbc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001146:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001150:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001154:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4807      	ldr	r0, [pc, #28]	@ (8001180 <MX_TIM1_Init+0x168>)
 8001164:	f00d fcc0 	bl	800eae8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0x15a>
	{
		Error_Handler();
 800116e:	f000 ff25 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001172:	4803      	ldr	r0, [pc, #12]	@ (8001180 <MX_TIM1_Init+0x168>)
 8001174:	f001 fa38 	bl	80025e8 <HAL_TIM_MspPostInit>
}
 8001178:	bf00      	nop
 800117a:	3770      	adds	r7, #112	@ 0x70
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	240003a8 	.word	0x240003a8
 8001184:	40010000 	.word	0x40010000

08001188 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800118c:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <MX_TIM16_Init+0x48>)
 800118e:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <MX_TIM16_Init+0x4c>)
 8001190:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 528;
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_TIM16_Init+0x48>)
 8001194:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8001198:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <MX_TIM16_Init+0x48>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 10000 - 1;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_TIM16_Init+0x48>)
 80011a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011a6:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_TIM16_Init+0x48>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_TIM16_Init+0x48>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_TIM16_Init+0x48>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_TIM16_Init+0x48>)
 80011bc:	f00c fb58 	bl	800d870 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM16_Init+0x42>
	{
		Error_Handler();
 80011c6:	f000 fef9 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	240003f4 	.word	0x240003f4
 80011d4:	40014400 	.word	0x40014400

080011d8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011de:	4a23      	ldr	r2, [pc, #140]	@ (800126c <MX_USART1_UART_Init+0x94>)
 80011e0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80011e2:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001220:	4811      	ldr	r0, [pc, #68]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001222:	f00d fd0b 	bl	800ec3c <HAL_UART_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 800122c:	f000 fec6 	bl	8001fbc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	480d      	ldr	r0, [pc, #52]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001234:	f00e fea5 	bl	800ff82 <HAL_UARTEx_SetTxFifoThreshold>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 800123e:	f000 febd 	bl	8001fbc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	4808      	ldr	r0, [pc, #32]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001246:	f00e feda 	bl	800fffe <HAL_UARTEx_SetRxFifoThreshold>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001250:	f000 feb4 	bl	8001fbc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001256:	f00e fe5b 	bl	800ff10 <HAL_UARTEx_DisableFifoMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001260:	f000 feac 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	24000440 	.word	0x24000440
 800126c:	40011000 	.word	0x40011000

08001270 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <MX_USART2_UART_Init+0x94>)
 8001278:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800127a:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b8:	4811      	ldr	r0, [pc, #68]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 80012ba:	f00d fcbf 	bl	800ec3c <HAL_UART_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80012c4:	f000 fe7a 	bl	8001fbc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 80012cc:	f00e fe59 	bl	800ff82 <HAL_UARTEx_SetTxFifoThreshold>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 80012d6:	f000 fe71 	bl	8001fbc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012da:	2100      	movs	r1, #0
 80012dc:	4808      	ldr	r0, [pc, #32]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 80012de:	f00e fe8e 	bl	800fffe <HAL_UARTEx_SetRxFifoThreshold>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 80012e8:	f000 fe68 	bl	8001fbc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_USART2_UART_Init+0x90>)
 80012ee:	f00e fe0f 	bl	800ff10 <HAL_UARTEx_DisableFifoMode>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80012f8:	f000 fe60 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	240004d4 	.word	0x240004d4
 8001304:	40004400 	.word	0x40004400

08001308 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <MX_DMA_Init+0x3c>)
 8001310:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001314:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <MX_DMA_Init+0x3c>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_DMA_Init+0x3c>)
 8001320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	200b      	movs	r0, #11
 8001332:	f003 fdc4 	bl	8004ebe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001336:	200b      	movs	r0, #11
 8001338:	f003 fddb 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	58024400 	.word	0x58024400

08001348 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	@ 0x38
 800134c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	4b67      	ldr	r3, [pc, #412]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001364:	4a65      	ldr	r2, [pc, #404]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136e:	4b63      	ldr	r3, [pc, #396]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001378:	623b      	str	r3, [r7, #32]
 800137a:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b5f      	ldr	r3, [pc, #380]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001382:	4a5e      	ldr	r2, [pc, #376]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138c:	4b5b      	ldr	r3, [pc, #364]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b58      	ldr	r3, [pc, #352]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a0:	4a56      	ldr	r2, [pc, #344]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013aa:	4b54      	ldr	r3, [pc, #336]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013be:	4a4f      	ldr	r2, [pc, #316]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c8:	4b4c      	ldr	r3, [pc, #304]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80013d6:	4b49      	ldr	r3, [pc, #292]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	4a47      	ldr	r2, [pc, #284]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013de:	f043 0320 	orr.w	r3, r3, #32
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e6:	4b45      	ldr	r3, [pc, #276]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013f4:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	4a40      	ldr	r2, [pc, #256]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001404:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001412:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	4a38      	ldr	r2, [pc, #224]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 800141a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001422:	4b36      	ldr	r3, [pc, #216]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b32      	ldr	r3, [pc, #200]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	4a31      	ldr	r2, [pc, #196]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001440:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <MX_GPIO_Init+0x1b4>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin | RTDS_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2103      	movs	r1, #3
 8001452:	482b      	ldr	r0, [pc, #172]	@ (8001500 <MX_GPIO_Init+0x1b8>)
 8001454:	f007 fa08 	bl	8008868 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800145e:	4829      	ldr	r0, [pc, #164]	@ (8001504 <MX_GPIO_Init+0x1bc>)
 8001460:	f007 fa02 	bl	8008868 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
	GPIO_InitStruct.Pin = START_BUTTON_LED_Pin | RTDS_Pin;
 8001464:	2303      	movs	r3, #3
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	4821      	ldr	r0, [pc, #132]	@ (8001500 <MX_GPIO_Init+0x1b8>)
 800147c:	f007 f834 	bl	80084e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MICROSD_DET_Pin */
	GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	481c      	ldr	r0, [pc, #112]	@ (8001508 <MX_GPIO_Init+0x1c0>)
 8001496:	f007 f827 	bl	80084e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DS18B20_Data_Pin */
	GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 800149a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	4814      	ldr	r0, [pc, #80]	@ (8001504 <MX_GPIO_Init+0x1bc>)
 80014b4:	f007 f818 	bl	80084e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : START_BUTTON_Pin */
	GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4810      	ldr	r0, [pc, #64]	@ (800150c <MX_GPIO_Init+0x1c4>)
 80014cc:	f007 f80c 	bl	80084e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80014d0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80014e2:	2302      	movs	r3, #2
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <MX_GPIO_Init+0x1c4>)
 80014ee:	f006 fffb 	bl	80084e8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80014f2:	bf00      	nop
 80014f4:	3738      	adds	r7, #56	@ 0x38
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	58024400 	.word	0x58024400
 8001500:	58020800 	.word	0x58020800
 8001504:	58021000 	.word	0x58021000
 8001508:	58021400 	.word	0x58021400
 800150c:	58021800 	.word	0x58021800

08001510 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4909      	ldr	r1, [pc, #36]	@ (8001540 <print+0x30>)
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <print+0x34>)
 800151e:	f012 fe29 	bl	8014174 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001522:	4808      	ldr	r0, [pc, #32]	@ (8001544 <print+0x34>)
 8001524:	f7fe fef4 	bl	8000310 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	b29a      	uxth	r2, r3
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	4904      	ldr	r1, [pc, #16]	@ (8001544 <print+0x34>)
 8001532:	4805      	ldr	r0, [pc, #20]	@ (8001548 <print+0x38>)
 8001534:	f00d fbd2 	bl	800ecdc <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	08014d04 	.word	0x08014d04
 8001544:	240016b0 	.word	0x240016b0
 8001548:	240004d4 	.word	0x240004d4

0800154c <printValue>:

void printValue(int value)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4909      	ldr	r1, [pc, #36]	@ (800157c <printValue+0x30>)
 8001558:	4809      	ldr	r0, [pc, #36]	@ (8001580 <printValue+0x34>)
 800155a:	f012 fe0b 	bl	8014174 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800155e:	4808      	ldr	r0, [pc, #32]	@ (8001580 <printValue+0x34>)
 8001560:	f7fe fed6 	bl	8000310 <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	4904      	ldr	r1, [pc, #16]	@ (8001580 <printValue+0x34>)
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <printValue+0x38>)
 8001570:	f00d fbb4 	bl	800ecdc <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	08014d0c 	.word	0x08014d0c
 8001580:	240016b0 	.word	0x240016b0
 8001584:	240004d4 	.word	0x240004d4

08001588 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	s1_aceleracion = buffer_adc[0];
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x34>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x38>)
 8001598:	601a      	str	r2, [r3, #0]
	s2_aceleracion = buffer_adc[1];
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x34>)
 800159c:	885b      	ldrh	r3, [r3, #2]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80015a2:	601a      	str	r2, [r3, #0]
	s_freno = buffer_adc[2];
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x34>)
 80015a6:	889b      	ldrh	r3, [r3, #4]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <HAL_ADC_ConvCpltCallback+0x40>)
 80015ac:	601a      	str	r2, [r3, #0]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	2400166c 	.word	0x2400166c
 80015c0:	24001674 	.word	0x24001674
 80015c4:	24001678 	.word	0x24001678
 80015c8:	24001694 	.word	0x24001694

080015cc <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80ba 	beq.w	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x194>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	f040 8081 	bne.w	80016f0 <HAL_FDCAN_RxFifo0Callback+0x124>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80015ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80015f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 80015f2:	2140      	movs	r1, #64	@ 0x40
 80015f4:	485d      	ldr	r0, [pc, #372]	@ (800176c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 80015f6:	f006 f845 	bl	8007684 <HAL_FDCAN_GetRxMessage>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f040 80aa 	bne.w	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 8001602:	4b59      	ldr	r3, [pc, #356]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f240 4266 	movw	r2, #1126	@ 0x466
 800160a:	4293      	cmp	r3, r2
 800160c:	d037      	beq.n	800167e <HAL_FDCAN_RxFifo0Callback+0xb2>
 800160e:	f240 4266 	movw	r2, #1126	@ 0x466
 8001612:	4293      	cmp	r3, r2
 8001614:	f200 809f 	bhi.w	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
 8001618:	f240 4262 	movw	r2, #1122	@ 0x462
 800161c:	4293      	cmp	r3, r2
 800161e:	d004      	beq.n	800162a <HAL_FDCAN_RxFifo0Callback+0x5e>
 8001620:	f240 4263 	movw	r2, #1123	@ 0x463
 8001624:	4293      	cmp	r3, r2
 8001626:	d010      	beq.n	800164a <HAL_FDCAN_RxFifo0Callback+0x7e>
					break;
				}
			}
		}
	}
}
 8001628:	e095      	b.n	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
					state = RxData_Inv[2] >> 0x1;
 800162a:	4b4e      	ldr	r3, [pc, #312]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b4f      	ldr	r3, [pc, #316]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001634:	701a      	strb	r2, [r3, #0]
					if (state == 10)
 8001636:	4b4e      	ldr	r3, [pc, #312]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b0a      	cmp	r3, #10
 800163c:	f040 8084 	bne.w	8001748 <HAL_FDCAN_RxFifo0Callback+0x17c>
						error = RxData_Inv[0];
 8001640:	4b48      	ldr	r3, [pc, #288]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8001646:	701a      	strb	r2, [r3, #0]
					break;
 8001648:	e07e      	b.n	8001748 <HAL_FDCAN_RxFifo0Callback+0x17c>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 800164a:	4b46      	ldr	r3, [pc, #280]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800164c:	79db      	ldrb	r3, [r3, #7]
 800164e:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001652:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001654:	7a1b      	ldrb	r3, [r3, #8]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	4313      	orrs	r3, r2
 800165a:	4a42      	ldr	r2, [pc, #264]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800165c:	7952      	ldrb	r2, [r2, #5]
 800165e:	4313      	orrs	r3, r2
 8001660:	4a45      	ldr	r2, [pc, #276]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001662:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001664:	4b44      	ldr	r3, [pc, #272]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d06d      	beq.n	800174c <HAL_FDCAN_RxFifo0Callback+0x180>
						e_machine_rpm |= 0xFFF0000;
 8001670:	4b41      	ldr	r3, [pc, #260]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b41      	ldr	r3, [pc, #260]	@ (800177c <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001676:	4313      	orrs	r3, r2
 8001678:	4a3f      	ldr	r2, [pc, #252]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 800167a:	6013      	str	r3, [r2, #0]
					break;
 800167c:	e066      	b.n	800174c <HAL_FDCAN_RxFifo0Callback+0x180>
					if (RxHeader_Inv.DataLength == 6)
 800167e:	4b3a      	ldr	r3, [pc, #232]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b06      	cmp	r3, #6
 8001684:	d164      	bne.n	8001750 <HAL_FDCAN_RxFifo0Callback+0x184>
						if (config_inv_lectura_v == 0)
 8001686:	4b3e      	ldr	r3, [pc, #248]	@ (8001780 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d103      	bne.n	8001696 <HAL_FDCAN_RxFifo0Callback+0xca>
							config_inv_lectura_v = 1;
 800168e:	4b3c      	ldr	r3, [pc, #240]	@ (8001780 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
					break;
 8001694:	e05c      	b.n	8001750 <HAL_FDCAN_RxFifo0Callback+0x184>
						else if (config_inv_lectura_v == 1)
 8001696:	4b3a      	ldr	r3, [pc, #232]	@ (8001780 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d158      	bne.n	8001750 <HAL_FDCAN_RxFifo0Callback+0x184>
							inv_dc_bus_voltage = (int)RxData_Inv[1] << 8 | (int)RxData_Inv[0];
 800169e:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80016a6:	7812      	ldrb	r2, [r2, #0]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	4a36      	ldr	r2, [pc, #216]	@ (8001784 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016ac:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = (int)RxData_Inv[2] << 8 | (int)RxData_Inv[1];
 80016ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80016b6:	7852      	ldrb	r2, [r2, #1]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a33      	ldr	r2, [pc, #204]	@ (8001788 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016bc:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power >> 2; // Bits 10 to 16
 80016be:	4b32      	ldr	r3, [pc, #200]	@ (8001788 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	109b      	asrs	r3, r3, #2
 80016c4:	4a30      	ldr	r2, [pc, #192]	@ (8001788 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016c6:	6013      	str	r3, [r2, #0]
							if (inv_dc_bus_power & 0x2000)
 80016c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_FDCAN_RxFifo0Callback+0x114>
								inv_dc_bus_power |= 0xC000;
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001788 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016de:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power * 32767; // Scale factor
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	03db      	lsls	r3, r3, #15
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	4a27      	ldr	r2, [pc, #156]	@ (8001788 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016ec:	6013      	str	r3, [r2, #0]
					break;
 80016ee:	e02f      	b.n	8001750 <HAL_FDCAN_RxFifo0Callback+0x184>
		else if (hfdcan->Instance == FDCAN2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a25      	ldr	r2, [pc, #148]	@ (800178c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12d      	bne.n	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80016fa:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016fc:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80016fe:	2140      	movs	r1, #64	@ 0x40
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f005 ffbf 	bl	8007684 <HAL_FDCAN_GetRxMessage>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d124      	bne.n	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
				switch (RxHeader_Acu.Identifier)
 800170c:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b20      	cmp	r3, #32
 8001712:	d003      	beq.n	800171c <HAL_FDCAN_RxFifo0Callback+0x150>
 8001714:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001718:	d008      	beq.n	800172c <HAL_FDCAN_RxFifo0Callback+0x160>
}
 800171a:	e01c      	b.n	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
					if (RxData_Acu[0] == 0)
 800171c:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d117      	bne.n	8001754 <HAL_FDCAN_RxFifo0Callback+0x188>
						precarga_inv = 1;
 8001724:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
					break;
 800172a:	e013      	b.n	8001754 <HAL_FDCAN_RxFifo0Callback+0x188>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001734:	7852      	ldrb	r2, [r2, #1]
 8001736:	4313      	orrs	r3, r2
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001740:	4b16      	ldr	r3, [pc, #88]	@ (800179c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001742:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001746:	e006      	b.n	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001748:	bf00      	nop
 800174a:	e004      	b.n	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 800174c:	bf00      	nop
 800174e:	e002      	b.n	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001750:	bf00      	nop
 8001752:	e000      	b.n	8001756 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001754:	bf00      	nop
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	4000a000 	.word	0x4000a000
 8001764:	24000608 	.word	0x24000608
 8001768:	2400058c 	.word	0x2400058c
 800176c:	240001ec 	.word	0x240001ec
 8001770:	240016a2 	.word	0x240016a2
 8001774:	2400180e 	.word	0x2400180e
 8001778:	24001668 	.word	0x24001668
 800177c:	0fff0000 	.word	0x0fff0000
 8001780:	2400008c 	.word	0x2400008c
 8001784:	24001660 	.word	0x24001660
 8001788:	24001664 	.word	0x24001664
 800178c:	4000a400 	.word	0x4000a400
 8001790:	24000618 	.word	0x24000618
 8001794:	240005d8 	.word	0x240005d8
 8001798:	24000088 	.word	0x24000088
 800179c:	24000008 	.word	0x24000008

080017a0 <setTorque>:
	}
	return sum / N_LECTURAS;
}

uint16_t setTorque()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
	// Leemos sensores de posición del pedal de acelaración

	int s1_aceleracion_filtr = LPF_EMA_Update(&s1_filt, s1_aceleracion);
 80017a6:	4ba6      	ldr	r3, [pc, #664]	@ (8001a40 <setTorque+0x2a0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	48a3      	ldr	r0, [pc, #652]	@ (8001a44 <setTorque+0x2a4>)
 80017b8:	f7fe ffb3 	bl	8000722 <LPF_EMA_Update>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
 80017c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c4:	ee17 3a90 	vmov	r3, s15
 80017c8:	60fb      	str	r3, [r7, #12]
	int s2_aceleracion_filtr = LPF_EMA_Update(&s2_filt, s2_aceleracion);
 80017ca:	4b9f      	ldr	r3, [pc, #636]	@ (8001a48 <setTorque+0x2a8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	489c      	ldr	r0, [pc, #624]	@ (8001a4c <setTorque+0x2ac>)
 80017dc:	f7fe ffa1 	bl	8000722 <LPF_EMA_Update>
 80017e0:	eef0 7a40 	vmov.f32	s15, s0
 80017e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e8:	ee17 3a90 	vmov	r3, s15
 80017ec:	60bb      	str	r3, [r7, #8]
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion_filtr - 1886) / (29.4 - 18.86);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f2a3 735e 	subw	r3, r3, #1886	@ 0x75e
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017fc:	ed9f 5b84 	vldr	d5, [pc, #528]	@ 8001a10 <setTorque+0x270>
 8001800:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001804:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001808:	ee17 2a90 	vmov	r2, s15
 800180c:	4b90      	ldr	r3, [pc, #576]	@ (8001a50 <setTorque+0x2b0>)
 800180e:	601a      	str	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
 8001810:	4b8f      	ldr	r3, [pc, #572]	@ (8001a50 <setTorque+0x2b0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da03      	bge.n	8001820 <setTorque+0x80>
	{
		s1_aceleracion_aux = 0;
 8001818:	4b8d      	ldr	r3, [pc, #564]	@ (8001a50 <setTorque+0x2b0>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e006      	b.n	800182e <setTorque+0x8e>
	}
	else if (s1_aceleracion_aux > 100)
 8001820:	4b8b      	ldr	r3, [pc, #556]	@ (8001a50 <setTorque+0x2b0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b64      	cmp	r3, #100	@ 0x64
 8001826:	dd02      	ble.n	800182e <setTorque+0x8e>
	{
		s1_aceleracion_aux = 100;
 8001828:	4b89      	ldr	r3, [pc, #548]	@ (8001a50 <setTorque+0x2b0>)
 800182a:	2264      	movs	r2, #100	@ 0x64
 800182c:	601a      	str	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion_filtr - 1780) / (25.27 - 17.8);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800183c:	ed9f 5b76 	vldr	d5, [pc, #472]	@ 8001a18 <setTorque+0x278>
 8001840:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001844:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001848:	ee17 2a90 	vmov	r2, s15
 800184c:	4b81      	ldr	r3, [pc, #516]	@ (8001a54 <setTorque+0x2b4>)
 800184e:	601a      	str	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
 8001850:	4b80      	ldr	r3, [pc, #512]	@ (8001a54 <setTorque+0x2b4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da03      	bge.n	8001860 <setTorque+0xc0>
	{
		s2_aceleracion_aux = 0;
 8001858:	4b7e      	ldr	r3, [pc, #504]	@ (8001a54 <setTorque+0x2b4>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e006      	b.n	800186e <setTorque+0xce>
	}
	else if (s2_aceleracion_aux > 100)
 8001860:	4b7c      	ldr	r3, [pc, #496]	@ (8001a54 <setTorque+0x2b4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b64      	cmp	r3, #100	@ 0x64
 8001866:	dd02      	ble.n	800186e <setTorque+0xce>
	{
		s2_aceleracion_aux = 100;
 8001868:	4b7a      	ldr	r3, [pc, #488]	@ (8001a54 <setTorque+0x2b4>)
 800186a:	2264      	movs	r2, #100	@ 0x64
 800186c:	601a      	str	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 800186e:	4b78      	ldr	r3, [pc, #480]	@ (8001a50 <setTorque+0x2b0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b08      	cmp	r3, #8
 8001874:	dd10      	ble.n	8001898 <setTorque+0xf8>
 8001876:	4b77      	ldr	r3, [pc, #476]	@ (8001a54 <setTorque+0x2b4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b08      	cmp	r3, #8
 800187c:	dd0c      	ble.n	8001898 <setTorque+0xf8>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 800187e:	4b74      	ldr	r3, [pc, #464]	@ (8001a50 <setTorque+0x2b0>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b74      	ldr	r3, [pc, #464]	@ (8001a54 <setTorque+0x2b4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	da00      	bge.n	800188e <setTorque+0xee>
 800188c:	3301      	adds	r3, #1
 800188e:	105b      	asrs	r3, r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b71      	ldr	r3, [pc, #452]	@ (8001a58 <setTorque+0x2b8>)
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	e002      	b.n	800189e <setTorque+0xfe>
	}
	else
	{
		torque_total = 0;
 8001898:	4b6f      	ldr	r3, [pc, #444]	@ (8001a58 <setTorque+0x2b8>)
 800189a:	2200      	movs	r2, #0
 800189c:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 800189e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a58 <setTorque+0x2b8>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	2b09      	cmp	r3, #9
 80018a4:	d803      	bhi.n	80018ae <setTorque+0x10e>
	{
		torque_total = 0;
 80018a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a58 <setTorque+0x2b8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	e006      	b.n	80018bc <setTorque+0x11c>
	}
	else if (torque_total > 90)
 80018ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001a58 <setTorque+0x2b8>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	2b5a      	cmp	r3, #90	@ 0x5a
 80018b4:	d902      	bls.n	80018bc <setTorque+0x11c>
	{
		torque_total = 100;
 80018b6:	4b68      	ldr	r3, [pc, #416]	@ (8001a58 <setTorque+0x2b8>)
 80018b8:	2264      	movs	r2, #100	@ 0x64
 80018ba:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 80018bc:	4b67      	ldr	r3, [pc, #412]	@ (8001a5c <setTorque+0x2bc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80018c4:	4293      	cmp	r3, r2
 80018c6:	dd0a      	ble.n	80018de <setTorque+0x13e>
 80018c8:	4b63      	ldr	r3, [pc, #396]	@ (8001a58 <setTorque+0x2b8>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	2b19      	cmp	r3, #25
 80018ce:	d906      	bls.n	80018de <setTorque+0x13e>
	{
		print("EV_2_3");
 80018d0:	4863      	ldr	r0, [pc, #396]	@ (8001a60 <setTorque+0x2c0>)
 80018d2:	f7ff fe1d 	bl	8001510 <print>
		flag_EV_2_3 = 1;
 80018d6:	4b63      	ldr	r3, [pc, #396]	@ (8001a64 <setTorque+0x2c4>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e00c      	b.n	80018f8 <setTorque+0x158>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 80018de:	4b5f      	ldr	r3, [pc, #380]	@ (8001a5c <setTorque+0x2bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80018e6:	4293      	cmp	r3, r2
 80018e8:	dc06      	bgt.n	80018f8 <setTorque+0x158>
 80018ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001a58 <setTorque+0x2b8>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d802      	bhi.n	80018f8 <setTorque+0x158>
	{
		flag_EV_2_3 = 0;
 80018f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a64 <setTorque+0x2c4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 80018f8:	4b55      	ldr	r3, [pc, #340]	@ (8001a50 <setTorque+0x2b0>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b55      	ldr	r3, [pc, #340]	@ (8001a54 <setTorque+0x2b4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	bfb8      	it	lt
 8001906:	425b      	neglt	r3, r3
 8001908:	2b0a      	cmp	r3, #10
 800190a:	dd06      	ble.n	800191a <setTorque+0x17a>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 800190c:	4856      	ldr	r0, [pc, #344]	@ (8001a68 <setTorque+0x2c8>)
 800190e:	f7ff fdff 	bl	8001510 <print>
		flag_T11_8_9 = 1;
 8001912:	4b56      	ldr	r3, [pc, #344]	@ (8001a6c <setTorque+0x2cc>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e007      	b.n	800192a <setTorque+0x18a>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 800191a:	f001 f927 	bl	8002b6c <HAL_GetTick>
 800191e:	4603      	mov	r3, r0
 8001920:	4a53      	ldr	r2, [pc, #332]	@ (8001a70 <setTorque+0x2d0>)
 8001922:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001924:	4b51      	ldr	r3, [pc, #324]	@ (8001a6c <setTorque+0x2cc>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 800192a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a64 <setTorque+0x2c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001930:	4b50      	ldr	r3, [pc, #320]	@ (8001a74 <setTorque+0x2d4>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001a78 <setTorque+0x2d8>
 800193a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	d53a      	bpl.n	80019ba <setTorque+0x21a>
	{
		if (v_celda_min > 2800)
 8001944:	4b4b      	ldr	r3, [pc, #300]	@ (8001a74 <setTorque+0x2d4>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001a7c <setTorque+0x2dc>
 800194e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	dd1f      	ble.n	8001998 <setTorque+0x1f8>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001958:	4b3f      	ldr	r3, [pc, #252]	@ (8001a58 <setTorque+0x2b8>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001964:	4b43      	ldr	r3, [pc, #268]	@ (8001a74 <setTorque+0x2d4>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800196e:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8001a20 <setTorque+0x280>
 8001972:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001976:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8001a28 <setTorque+0x288>
 800197a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800197e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001982:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8001a30 <setTorque+0x290>
 8001986:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800198a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800198e:	ee17 2a90 	vmov	r2, s15
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <setTorque+0x2e0>)
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e015      	b.n	80019c4 <setTorque+0x224>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001998:	4b2f      	ldr	r3, [pc, #188]	@ (8001a58 <setTorque+0x2b8>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019a4:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001a38 <setTorque+0x298>
 80019a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019b0:	ee17 2a90 	vmov	r2, s15
 80019b4:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <setTorque+0x2e0>)
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e004      	b.n	80019c4 <setTorque+0x224>
		}
	}
	else
	{
		torque_limitado = torque_total;
 80019ba:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <setTorque+0x2b8>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <setTorque+0x2e0>)
 80019c2:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 80019c4:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <setTorque+0x2b8>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	d912      	bls.n	80019f2 <setTorque+0x252>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <setTorque+0x2b8>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4a2a      	ldr	r2, [pc, #168]	@ (8001a84 <setTorque+0x2e4>)
 80019dc:	fb82 1203 	smull	r1, r2, r2, r3
 80019e0:	441a      	add	r2, r3
 80019e2:	1192      	asrs	r2, r2, #6
 80019e4:	17db      	asrs	r3, r3, #31
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3b1a      	subs	r3, #26
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <setTorque+0x2b8>)
 80019f0:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 80019f2:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <setTorque+0x2b8>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	3301      	adds	r3, #1
 80019fe:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001a00:	88bb      	ldrh	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	f3af 8000 	nop.w
 8001a10:	e147ae14 	.word	0xe147ae14
 8001a14:	4025147a 	.word	0x4025147a
 8001a18:	ae147ae0 	.word	0xae147ae0
 8001a1c:	401de147 	.word	0x401de147
 8001a20:	a1cac083 	.word	0xa1cac083
 8001a24:	3ff5b645 	.word	0x3ff5b645
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40ad4c00 	.word	0x40ad4c00
 8001a30:	00000000 	.word	0x00000000
 8001a34:	408f4000 	.word	0x408f4000
 8001a38:	9999999a 	.word	0x9999999a
 8001a3c:	3fa99999 	.word	0x3fa99999
 8001a40:	24001674 	.word	0x24001674
 8001a44:	24001684 	.word	0x24001684
 8001a48:	24001678 	.word	0x24001678
 8001a4c:	2400168c 	.word	0x2400168c
 8001a50:	2400167c 	.word	0x2400167c
 8001a54:	24001680 	.word	0x24001680
 8001a58:	24001698 	.word	0x24001698
 8001a5c:	24001694 	.word	0x24001694
 8001a60:	08014d20 	.word	0x08014d20
 8001a64:	240016a8 	.word	0x240016a8
 8001a68:	08014d28 	.word	0x08014d28
 8001a6c:	240016ac 	.word	0x240016ac
 8001a70:	240016a4 	.word	0x240016a4
 8001a74:	24000008 	.word	0x24000008
 8001a78:	455ac000 	.word	0x455ac000
 8001a7c:	452f0000 	.word	0x452f0000
 8001a80:	2400169c 	.word	0x2400169c
 8001a84:	b60b60b7 	.word	0xb60b60b7

08001a88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a78      	ldr	r2, [pc, #480]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	f040 80e9 	bne.w	8001c6c <HAL_TIM_PeriodElapsedCallback+0x1e4>
#if !CALIBRATION

		// ---------- CONTROL DEL INVERSOR ----------

		// Estado TORQUE
		if (flag_react == 0)
 8001a9a:	4b77      	ldr	r3, [pc, #476]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d117      	bne.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001aa2:	4b76      	ldr	r3, [pc, #472]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a76      	ldr	r2, [pc, #472]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001aa8:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001aaa:	4b75      	ldr	r3, [pc, #468]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001aac:	2203      	movs	r2, #3
 8001aae:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001ab0:	4b73      	ldr	r3, [pc, #460]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001ab6:	4b73      	ldr	r3, [pc, #460]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001abc:	4b71      	ldr	r3, [pc, #452]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001ac2:	4b70      	ldr	r3, [pc, #448]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ac4:	2206      	movs	r2, #6
 8001ac6:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001aca:	496d      	ldr	r1, [pc, #436]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001acc:	486e      	ldr	r0, [pc, #440]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001ace:	f005 fd7e 	bl	80075ce <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		switch (state)
 8001ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	3b03      	subs	r3, #3
 8001ad8:	2b07      	cmp	r3, #7
 8001ada:	f200 80c7 	bhi.w	8001c6c <HAL_TIM_PeriodElapsedCallback+0x1e4>
 8001ade:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001b05 	.word	0x08001b05
 8001ae8:	08001b3b 	.word	0x08001b3b
 8001aec:	08001c6d 	.word	0x08001c6d
 8001af0:	08001b83 	.word	0x08001b83
 8001af4:	08001c6d 	.word	0x08001c6d
 8001af8:	08001c6d 	.word	0x08001c6d
 8001afc:	08001c6d 	.word	0x08001c6d
 8001b00:	08001be3 	.word	0x08001be3
		{
		case 3:
#if DEBUG
			print("state: standby");
 8001b04:	4862      	ldr	r0, [pc, #392]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001b06:	f7ff fd03 	bl	8001510 <print>
#endif
			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b10:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001b12:	4b5b      	ldr	r3, [pc, #364]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b14:	2203      	movs	r2, #3
 8001b16:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001b18:	4b59      	ldr	r3, [pc, #356]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001b1e:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b24:	4b57      	ldr	r3, [pc, #348]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001b2a:	4b56      	ldr	r3, [pc, #344]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b30:	4a54      	ldr	r2, [pc, #336]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b32:	4953      	ldr	r1, [pc, #332]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b34:	4854      	ldr	r0, [pc, #336]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b36:	f005 fd4a 	bl	80075ce <HAL_FDCAN_AddMessageToTxFifoQ>
			//}

		case 4:

#if DEBUG
			print("state: ready");
 8001b3a:	4856      	ldr	r0, [pc, #344]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001b3c:	f7ff fce8 	bl	8001510 <print>
#endif
			TxHeader_Inv.Identifier = 0x362;
 8001b40:	4b4f      	ldr	r3, [pc, #316]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b42:	f240 3262 	movw	r2, #866	@ 0x362
 8001b46:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001b48:	4b4d      	ldr	r3, [pc, #308]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 8001b4e:	4b52      	ldr	r3, [pc, #328]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001b54:	4b4b      	ldr	r3, [pc, #300]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001b60:	4b4d      	ldr	r3, [pc, #308]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b68:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001b6a:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b70:	4a44      	ldr	r2, [pc, #272]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b72:	4943      	ldr	r1, [pc, #268]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b74:	4844      	ldr	r0, [pc, #272]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b76:	f005 fd2a 	bl	80075ce <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 0; // Reactivado
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]

			break;
 8001b80:	e074      	b.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x1e4>

			// Request TORQUE inversor

			// flag_react = 1;

			real_torque = setTorque();
 8001b82:	f7ff fe0d 	bl	80017a0 <setTorque>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b43      	ldr	r3, [pc, #268]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001b8c:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b90:	f240 3262 	movw	r2, #866	@ 0x362
 8001b94:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001b96:	4b3a      	ldr	r3, [pc, #232]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b98:	2204      	movs	r2, #4
 8001b9a:	60da      	str	r2, [r3, #12]

			// real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001ba4:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001bb2:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001bb4:	4b33      	ldr	r3, [pc, #204]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001bba:	4b32      	ldr	r3, [pc, #200]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001bc0:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bc6:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001bc8:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bce:	70da      	strb	r2, [r3, #3]
			// TxData_Inv[2] = 0xFE;
			// TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bd2:	492b      	ldr	r1, [pc, #172]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001bd4:	482c      	ldr	r0, [pc, #176]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001bd6:	f005 fcfa 	bl	80075ce <HAL_FDCAN_AddMessageToTxFifoQ>
			CAN_bus_off_check_reset(&hfdcan1);
 8001bda:	482b      	ldr	r0, [pc, #172]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001bdc:	f000 f8da 	bl	8001d94 <CAN_bus_off_check_reset>

			break;
 8001be0:	e044      	b.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x1e4>

		case 10:
			print("state: soft fault");
 8001be2:	4830      	ldr	r0, [pc, #192]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001be4:	f7ff fc94 	bl	8001510 <print>
			printValue(error);
 8001be8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fcad 	bl	800154c <printValue>

			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001bf2:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a22      	ldr	r2, [pc, #136]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001bf8:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c06:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x3;
 8001c12:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c14:	2203      	movs	r2, #3
 8001c16:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c18:	4a1a      	ldr	r2, [pc, #104]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c1a:	4919      	ldr	r1, [pc, #100]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c1c:	481a      	ldr	r0, [pc, #104]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c1e:	f005 fcd6 	bl	80075ce <HAL_FDCAN_AddMessageToTxFifoQ>
			case 3:
				print("Error: Overtemperature");
				break;
			}*/

			if (inv_dc_bus_voltage < 60)
 8001c22:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c28:	dc1f      	bgt.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x1e2>
			{

				// Estado STAND BY inversor
				while (state != 3)
 8001c2a:	e01a      	b.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x1da>
				{

					flag_react = 1;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]

					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c38:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]

					TxData_Inv[0] = 0x0;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x3;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c54:	2203      	movs	r2, #3
 8001c56:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
 8001c58:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c5a:	4909      	ldr	r1, [pc, #36]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c5c:	480a      	ldr	r0, [pc, #40]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c5e:	f005 fcb6 	bl	80075ce <HAL_FDCAN_AddMessageToTxFifoQ>
				while (state != 3)
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d1e0      	bne.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x1a4>
												  TxData_Inv);
				}
			}

			break;
 8001c6a:	bf00      	nop
		}
#endif
	}
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	240003f4 	.word	0x240003f4
 8001c78:	2400180f 	.word	0x2400180f
 8001c7c:	24000000 	.word	0x24000000
 8001c80:	24000568 	.word	0x24000568
 8001c84:	24000600 	.word	0x24000600
 8001c88:	240001ec 	.word	0x240001ec
 8001c8c:	240016a2 	.word	0x240016a2
 8001c90:	08014d30 	.word	0x08014d30
 8001c94:	08014c80 	.word	0x08014c80
 8001c98:	240016a0 	.word	0x240016a0
 8001c9c:	2400169a 	.word	0x2400169a
 8001ca0:	2400169b 	.word	0x2400169b
 8001ca4:	08014d40 	.word	0x08014d40
 8001ca8:	2400180e 	.word	0x2400180e
 8001cac:	24001660 	.word	0x24001660

08001cb0 <SDCard_start>:

void SDCard_start(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
	DWORD FreeClusters;
	uint32_t TotalSize, FreeSpace;
	do
	{
		//------------------[ Mount The SD Card ]--------------------
		FR_Status = f_mount(&FatFs, SDPath, 1);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	492e      	ldr	r1, [pc, #184]	@ (8001d74 <SDCard_start+0xc4>)
 8001cba:	482f      	ldr	r0, [pc, #188]	@ (8001d78 <SDCard_start+0xc8>)
 8001cbc:	f011 fc38 	bl	8013530 <f_mount>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	75fb      	strb	r3, [r7, #23]
		if (FR_Status != FR_OK)
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <SDCard_start+0x2e>
		{
			sprintf(TxBuffer, "Error! Error Code: (%i)\r\n", FR_Status);
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	492b      	ldr	r1, [pc, #172]	@ (8001d7c <SDCard_start+0xcc>)
 8001cd0:	482b      	ldr	r0, [pc, #172]	@ (8001d80 <SDCard_start+0xd0>)
 8001cd2:	f012 fa4f 	bl	8014174 <siprintf>
			print(TxBuffer);
 8001cd6:	482a      	ldr	r0, [pc, #168]	@ (8001d80 <SDCard_start+0xd0>)
 8001cd8:	f7ff fc1a 	bl	8001510 <print>
			break;
 8001cdc:	e045      	b.n	8001d6a <SDCard_start+0xba>
		}
		sprintf(TxBuffer, "SD montada correctamente \r\n\n");
 8001cde:	4929      	ldr	r1, [pc, #164]	@ (8001d84 <SDCard_start+0xd4>)
 8001ce0:	4827      	ldr	r0, [pc, #156]	@ (8001d80 <SDCard_start+0xd0>)
 8001ce2:	f012 fa47 	bl	8014174 <siprintf>
		print(TxBuffer);
 8001ce6:	4826      	ldr	r0, [pc, #152]	@ (8001d80 <SDCard_start+0xd0>)
 8001ce8:	f7ff fc12 	bl	8001510 <print>
		//------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8001cec:	f107 0208 	add.w	r2, r7, #8
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4824      	ldr	r0, [pc, #144]	@ (8001d88 <SDCard_start+0xd8>)
 8001cf6:	f012 f865 	bl	8013dc4 <f_getfree>
		TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	3b02      	subs	r3, #2
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	8952      	ldrh	r2, [r2, #10]
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d10:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d1c:	ee17 3a90 	vmov	r3, s15
 8001d20:	613b      	str	r3, [r7, #16]
		FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	895b      	ldrh	r3, [r3, #10]
 8001d26:	461a      	mov	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d36:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d42:	ee17 3a90 	vmov	r3, s15
 8001d46:	60fb      	str	r3, [r7, #12]
		sprintf(TxBuffer, "Espacio total: %lu Bytes\r\n", TotalSize);
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4910      	ldr	r1, [pc, #64]	@ (8001d8c <SDCard_start+0xdc>)
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <SDCard_start+0xd0>)
 8001d4e:	f012 fa11 	bl	8014174 <siprintf>
		print(TxBuffer);
 8001d52:	480b      	ldr	r0, [pc, #44]	@ (8001d80 <SDCard_start+0xd0>)
 8001d54:	f7ff fbdc 	bl	8001510 <print>
		sprintf(TxBuffer, "Espacio libre: %lu Bytes\r\n\n", FreeSpace);
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	490d      	ldr	r1, [pc, #52]	@ (8001d90 <SDCard_start+0xe0>)
 8001d5c:	4808      	ldr	r0, [pc, #32]	@ (8001d80 <SDCard_start+0xd0>)
 8001d5e:	f012 fa09 	bl	8014174 <siprintf>
		print(TxBuffer);
 8001d62:	4807      	ldr	r0, [pc, #28]	@ (8001d80 <SDCard_start+0xd0>)
 8001d64:	f7ff fbd4 	bl	8001510 <print>
	} while (0);
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	24001824 	.word	0x24001824
 8001d78:	24000620 	.word	0x24000620
 8001d7c:	08014d54 	.word	0x08014d54
 8001d80:	24001714 	.word	0x24001714
 8001d84:	08014d70 	.word	0x08014d70
 8001d88:	08014d90 	.word	0x08014d90
 8001d8c:	08014d94 	.word	0x08014d94
 8001d90:	08014db0 	.word	0x08014db0

08001d94 <CAN_bus_off_check_reset>:

void CAN_bus_off_check_reset(FDCAN_HandleTypeDef *hfdcan)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	@ 0x38
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	FDCAN_ProtocolStatusTypeDef protocolStatus;
	HAL_FDCAN_GetProtocolStatus(hfdcan, &protocolStatus);
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f005 fdda 	bl	800795c <HAL_FDCAN_GetProtocolStatus>
	if (protocolStatus.BusOff)
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <CAN_bus_off_check_reset+0x2a>
	{
		CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	619a      	str	r2, [r3, #24]
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	3738      	adds	r7, #56	@ 0x38
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <SDCard_write>:
		logBufferToSD(); // Write the data to the SD card
	}
}

void SDCard_write(char *filename, char *data, int newFile)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dd6:	f843 0c3c 	str.w	r0, [r3, #-60]
 8001dda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dde:	f843 1c40 	str.w	r1, [r3, #-64]
 8001de2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001de6:	f843 2c44 	str.w	r2, [r3, #-68]
	FRESULT fr; // FATFS function common result code
	UINT bw;	// Bytes written

	//------------------[ Open or Create a File ]--------------------

	if (newFile == 1)
 8001dea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d129      	bne.n	8001e4a <SDCard_write+0x82>
	{
		fr = f_open(&file, filename, FA_WRITE | FA_CREATE_ALWAYS); // este modo crea un archivo y sobreescribe los anteriores
 8001df6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4b67      	ldr	r3, [pc, #412]	@ (8001f9c <SDCard_write+0x1d4>)
 8001dfe:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001e02:	f103 0308 	add.w	r3, r3, #8
 8001e06:	443b      	add	r3, r7
 8001e08:	220a      	movs	r2, #10
 8001e0a:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f011 fbd4 	bl	80135bc <f_open>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f241 0247 	movw	r2, #4167	@ 0x1047
 8001e1a:	443a      	add	r2, r7
 8001e1c:	7013      	strb	r3, [r2, #0]
		if (fr != FR_OK)
 8001e1e:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001e22:	443b      	add	r3, r7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d039      	beq.n	8001e9e <SDCard_write+0xd6>
		{
			sprintf(TxBuffer,
 8001e2a:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001e2e:	443b      	add	r3, r7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001e36:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001e3a:	4959      	ldr	r1, [pc, #356]	@ (8001fa0 <SDCard_write+0x1d8>)
 8001e3c:	4859      	ldr	r0, [pc, #356]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001e3e:	f012 f999 	bl	8014174 <siprintf>
					"Error opening/creating file: %s. Error Code: (%i)\r\n",
					filename, fr);
			print(TxBuffer);
 8001e42:	4858      	ldr	r0, [pc, #352]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001e44:	f7ff fb64 	bl	8001510 <print>
			return;
 8001e48:	e0a2      	b.n	8001f90 <SDCard_write+0x1c8>
		}
	}
	else
	{
		fr = f_open(&file, filename, FA_WRITE | FA_OPEN_APPEND); // este modo añade datos sin sobreescribir
 8001e4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4b52      	ldr	r3, [pc, #328]	@ (8001f9c <SDCard_write+0x1d4>)
 8001e52:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001e56:	f103 0308 	add.w	r3, r3, #8
 8001e5a:	443b      	add	r3, r7
 8001e5c:	2232      	movs	r2, #50	@ 0x32
 8001e5e:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f011 fbaa 	bl	80135bc <f_open>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f241 0247 	movw	r2, #4167	@ 0x1047
 8001e6e:	443a      	add	r2, r7
 8001e70:	7013      	strb	r3, [r2, #0]
		if (fr != FR_OK)
 8001e72:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001e76:	443b      	add	r3, r7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00f      	beq.n	8001e9e <SDCard_write+0xd6>
		{
			sprintf(TxBuffer,
 8001e7e:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001e82:	443b      	add	r3, r7
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001e8a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001e8e:	4946      	ldr	r1, [pc, #280]	@ (8001fa8 <SDCard_write+0x1e0>)
 8001e90:	4844      	ldr	r0, [pc, #272]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001e92:	f012 f96f 	bl	8014174 <siprintf>
					"Error opening file: %s. Error Code: (%i)\r\n",
					filename, fr);
			print(TxBuffer);
 8001e96:	4843      	ldr	r0, [pc, #268]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001e98:	f7ff fb3a 	bl	8001510 <print>
			return;
 8001e9c:	e078      	b.n	8001f90 <SDCard_write+0x1c8>
		}
	}

	//------------------[ Write Data to the File ]--------------------
	fr = f_write(&file, data, strlen(data), &bw);
 8001e9e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ea2:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001ea6:	f7fe fa33 	bl	8000310 <strlen>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <SDCard_write+0x1e4>)
 8001eae:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001eb2:	f103 0308 	add.w	r3, r3, #8
 8001eb6:	443b      	add	r3, r7
 8001eb8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001ebc:	4837      	ldr	r0, [pc, #220]	@ (8001f9c <SDCard_write+0x1d4>)
 8001ebe:	f500 5082 	add.w	r0, r0, #4160	@ 0x1040
 8001ec2:	f100 0008 	add.w	r0, r0, #8
 8001ec6:	4438      	add	r0, r7
 8001ec8:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8001ecc:	f011 fd3e 	bl	801394c <f_write>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f241 0247 	movw	r2, #4167	@ 0x1047
 8001ed6:	443a      	add	r2, r7
 8001ed8:	7013      	strb	r3, [r2, #0]
	if (fr != FR_OK || bw < strlen(data))
 8001eda:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001ede:	443b      	add	r3, r7
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <SDCard_write+0x138>
 8001ee6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001eea:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001eee:	f7fe fa0f 	bl	8000310 <strlen>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ef8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d918      	bls.n	8001f32 <SDCard_write+0x16a>
	{
		sprintf(TxBuffer, "Error writing to file: %s. Error Code: (%i)\r\n",
 8001f00:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001f04:	443b      	add	r3, r7
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001f0c:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001f10:	4927      	ldr	r1, [pc, #156]	@ (8001fb0 <SDCard_write+0x1e8>)
 8001f12:	4824      	ldr	r0, [pc, #144]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001f14:	f012 f92e 	bl	8014174 <siprintf>
				filename, fr);
		print(TxBuffer);
 8001f18:	4822      	ldr	r0, [pc, #136]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001f1a:	f7ff faf9 	bl	8001510 <print>
		f_close(&file);
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <SDCard_write+0x1d4>)
 8001f20:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001f24:	f103 0308 	add.w	r3, r3, #8
 8001f28:	443b      	add	r3, r7
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f011 ff20 	bl	8013d70 <f_close>
		return;
 8001f30:	e02e      	b.n	8001f90 <SDCard_write+0x1c8>
	}

	//------------------[ Close the File ]--------------------
	fr = f_close(&file);
 8001f32:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <SDCard_write+0x1d4>)
 8001f34:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001f38:	f103 0308 	add.w	r3, r3, #8
 8001f3c:	443b      	add	r3, r7
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f011 ff16 	bl	8013d70 <f_close>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f241 0247 	movw	r2, #4167	@ 0x1047
 8001f4a:	443a      	add	r2, r7
 8001f4c:	7013      	strb	r3, [r2, #0]
	if (fr != FR_OK)
 8001f4e:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001f52:	443b      	add	r3, r7
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00f      	beq.n	8001f7a <SDCard_write+0x1b2>
	{
		sprintf(TxBuffer, "Error closing file: %s. Error Code: (%i)\r\n",
 8001f5a:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001f5e:	443b      	add	r3, r7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001f66:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001f6a:	4912      	ldr	r1, [pc, #72]	@ (8001fb4 <SDCard_write+0x1ec>)
 8001f6c:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001f6e:	f012 f901 	bl	8014174 <siprintf>
				filename, fr);
		print(TxBuffer);
 8001f72:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001f74:	f7ff facc 	bl	8001510 <print>
		return;
 8001f78:	e00a      	b.n	8001f90 <SDCard_write+0x1c8>
	}

	//------------------[ Success Message ]--------------------
	sprintf(TxBuffer, "Data written successfully to file: %s\r\n", filename);
 8001f7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f7e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8001f82:	490d      	ldr	r1, [pc, #52]	@ (8001fb8 <SDCard_write+0x1f0>)
 8001f84:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001f86:	f012 f8f5 	bl	8014174 <siprintf>
	print(TxBuffer);
 8001f8a:	4806      	ldr	r0, [pc, #24]	@ (8001fa4 <SDCard_write+0x1dc>)
 8001f8c:	f7ff fac0 	bl	8001510 <print>
}
 8001f90:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	ffffefcc 	.word	0xffffefcc
 8001fa0:	08014dd4 	.word	0x08014dd4
 8001fa4:	24001714 	.word	0x24001714
 8001fa8:	08014e08 	.word	0x08014e08
 8001fac:	ffffefc8 	.word	0xffffefc8
 8001fb0:	08014e34 	.word	0x08014e34
 8001fb4:	08014e64 	.word	0x08014e64
 8001fb8:	08014e90 	.word	0x08014e90

08001fbc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <Error_Handler+0x8>

08001fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <HAL_MspInit+0x30>)
 8001fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd4:	4a08      	ldr	r2, [pc, #32]	@ (8001ff8 <HAL_MspInit+0x30>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_MspInit+0x30>)
 8001fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	58024400 	.word	0x58024400

08001ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b090      	sub	sp, #64	@ 0x40
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a90      	ldr	r2, [pc, #576]	@ (800225c <HAL_ADC_MspInit+0x260>)
 800201a:	4293      	cmp	r3, r2
 800201c:	f040 80a3 	bne.w	8002166 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002020:	4b8f      	ldr	r3, [pc, #572]	@ (8002260 <HAL_ADC_MspInit+0x264>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	4a8e      	ldr	r2, [pc, #568]	@ (8002260 <HAL_ADC_MspInit+0x264>)
 8002028:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800202a:	4b8d      	ldr	r3, [pc, #564]	@ (8002260 <HAL_ADC_MspInit+0x264>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10e      	bne.n	8002050 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002032:	4b8c      	ldr	r3, [pc, #560]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002038:	4a8a      	ldr	r2, [pc, #552]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002042:	4b88      	ldr	r3, [pc, #544]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800204e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002050:	4b84      	ldr	r3, [pc, #528]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002056:	4a83      	ldr	r2, [pc, #524]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002060:	4b80      	ldr	r3, [pc, #512]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	4b7d      	ldr	r3, [pc, #500]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002074:	4a7b      	ldr	r2, [pc, #492]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207e:	4b79      	ldr	r3, [pc, #484]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800208c:	4b75      	ldr	r3, [pc, #468]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002092:	4a74      	ldr	r2, [pc, #464]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002094:	f043 0320 	orr.w	r3, r3, #32
 8002098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800209c:	4b71      	ldr	r3, [pc, #452]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 80020aa:	2330      	movs	r3, #48	@ 0x30
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ae:	2303      	movs	r3, #3
 80020b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ba:	4619      	mov	r1, r3
 80020bc:	486a      	ldr	r0, [pc, #424]	@ (8002268 <HAL_ADC_MspInit+0x26c>)
 80020be:	f006 fa13 	bl	80084e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 80020c2:	2303      	movs	r3, #3
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c6:	2303      	movs	r3, #3
 80020c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d2:	4619      	mov	r1, r3
 80020d4:	4865      	ldr	r0, [pc, #404]	@ (800226c <HAL_ADC_MspInit+0x270>)
 80020d6:	f006 fa07 	bl	80084e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 80020da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e0:	2303      	movs	r3, #3
 80020e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ec:	4619      	mov	r1, r3
 80020ee:	4860      	ldr	r0, [pc, #384]	@ (8002270 <HAL_ADC_MspInit+0x274>)
 80020f0:	f006 f9fa 	bl	80084e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80020f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 80020f6:	4a60      	ldr	r2, [pc, #384]	@ (8002278 <HAL_ADC_MspInit+0x27c>)
 80020f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 80020fc:	2209      	movs	r2, #9
 80020fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002100:	4b5c      	ldr	r3, [pc, #368]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002106:	4b5b      	ldr	r3, [pc, #364]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800210c:	4b59      	ldr	r3, [pc, #356]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 800210e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002112:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002114:	4b57      	ldr	r3, [pc, #348]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 8002116:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800211a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800211c:	4b55      	ldr	r3, [pc, #340]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 800211e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002122:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002124:	4b53      	ldr	r3, [pc, #332]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 8002126:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800212a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800212c:	4b51      	ldr	r3, [pc, #324]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 800212e:	2200      	movs	r2, #0
 8002130:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002132:	4b50      	ldr	r3, [pc, #320]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 8002134:	2200      	movs	r2, #0
 8002136:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002138:	484e      	ldr	r0, [pc, #312]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 800213a:	f002 fef5 	bl	8004f28 <HAL_DMA_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8002144:	f7ff ff3a 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a4a      	ldr	r2, [pc, #296]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 800214c:	659a      	str	r2, [r3, #88]	@ 0x58
 800214e:	4a49      	ldr	r2, [pc, #292]	@ (8002274 <HAL_ADC_MspInit+0x278>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2012      	movs	r0, #18
 800215a:	f002 feb0 	bl	8004ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800215e:	2012      	movs	r0, #18
 8002160:	f002 fec7 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002164:	e076      	b.n	8002254 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a44      	ldr	r2, [pc, #272]	@ (800227c <HAL_ADC_MspInit+0x280>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d171      	bne.n	8002254 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002170:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_ADC_MspInit+0x264>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	4a3a      	ldr	r2, [pc, #232]	@ (8002260 <HAL_ADC_MspInit+0x264>)
 8002178:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800217a:	4b39      	ldr	r3, [pc, #228]	@ (8002260 <HAL_ADC_MspInit+0x264>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10e      	bne.n	80021a0 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002182:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002184:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002188:	4a36      	ldr	r2, [pc, #216]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 800218a:	f043 0320 	orr.w	r3, r3, #32
 800218e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002192:	4b34      	ldr	r3, [pc, #208]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 8002194:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a0:	4b30      	ldr	r3, [pc, #192]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 80021b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	4b29      	ldr	r3, [pc, #164]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c4:	4a27      	ldr	r2, [pc, #156]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ce:	4b25      	ldr	r3, [pc, #148]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 80021d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021dc:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e2:	4a20      	ldr	r2, [pc, #128]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 80021e4:	f043 0320 	orr.w	r3, r3, #32
 80021e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <HAL_ADC_MspInit+0x268>)
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 80021fa:	2320      	movs	r3, #32
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fe:	2303      	movs	r3, #3
 8002200:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800220a:	4619      	mov	r1, r3
 800220c:	4816      	ldr	r0, [pc, #88]	@ (8002268 <HAL_ADC_MspInit+0x26c>)
 800220e:	f006 f96b 	bl	80084e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8002212:	2301      	movs	r3, #1
 8002214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002216:	2303      	movs	r3, #3
 8002218:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002222:	4619      	mov	r1, r3
 8002224:	4811      	ldr	r0, [pc, #68]	@ (800226c <HAL_ADC_MspInit+0x270>)
 8002226:	f006 f95f 	bl	80084e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 800222a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002230:	2303      	movs	r3, #3
 8002232:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002238:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800223c:	4619      	mov	r1, r3
 800223e:	480c      	ldr	r0, [pc, #48]	@ (8002270 <HAL_ADC_MspInit+0x274>)
 8002240:	f006 f952 	bl	80084e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2012      	movs	r0, #18
 800224a:	f002 fe38 	bl	8004ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800224e:	2012      	movs	r0, #18
 8002250:	f002 fe4f 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 8002254:	bf00      	nop
 8002256:	3740      	adds	r7, #64	@ 0x40
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40022000 	.word	0x40022000
 8002260:	24001810 	.word	0x24001810
 8002264:	58024400 	.word	0x58024400
 8002268:	58020800 	.word	0x58020800
 800226c:	58020400 	.word	0x58020400
 8002270:	58021400 	.word	0x58021400
 8002274:	24000174 	.word	0x24000174
 8002278:	40020010 	.word	0x40020010
 800227c:	40022100 	.word	0x40022100

08002280 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0ba      	sub	sp, #232	@ 0xe8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	22b8      	movs	r2, #184	@ 0xb8
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f011 ff87 	bl	80141b4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002424 <HAL_FDCAN_MspInit+0x1a4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d157      	bne.n	8002360 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80022b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c2:	f107 0318 	add.w	r3, r7, #24
 80022c6:	4618      	mov	r0, r3
 80022c8:	f007 fa88 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80022d2:	f7ff fe73 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80022d6:	4b54      	ldr	r3, [pc, #336]	@ (8002428 <HAL_FDCAN_MspInit+0x1a8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a52      	ldr	r2, [pc, #328]	@ (8002428 <HAL_FDCAN_MspInit+0x1a8>)
 80022de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80022e0:	4b51      	ldr	r3, [pc, #324]	@ (8002428 <HAL_FDCAN_MspInit+0x1a8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d10e      	bne.n	8002306 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80022e8:	4b50      	ldr	r3, [pc, #320]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 80022ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022ee:	4a4f      	ldr	r2, [pc, #316]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80022f8:	4b4c      	ldr	r3, [pc, #304]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 80022fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	4b49      	ldr	r3, [pc, #292]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230c:	4a47      	ldr	r2, [pc, #284]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002316:	4b45      	ldr	r3, [pc, #276]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002324:	2303      	movs	r3, #3
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800233c:	2309      	movs	r3, #9
 800233e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002342:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002346:	4619      	mov	r1, r3
 8002348:	4839      	ldr	r0, [pc, #228]	@ (8002430 <HAL_FDCAN_MspInit+0x1b0>)
 800234a:	f006 f8cd 	bl	80084e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2101      	movs	r1, #1
 8002352:	2013      	movs	r0, #19
 8002354:	f002 fdb3 	bl	8004ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002358:	2013      	movs	r0, #19
 800235a:	f002 fdca 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800235e:	e05c      	b.n	800241a <HAL_FDCAN_MspInit+0x19a>
  else if(hfdcan->Instance==FDCAN2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a33      	ldr	r2, [pc, #204]	@ (8002434 <HAL_FDCAN_MspInit+0x1b4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d157      	bne.n	800241a <HAL_FDCAN_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800236a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	4618      	mov	r0, r3
 8002382:	f007 fa2b 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 800238c:	f7ff fe16 	bl	8001fbc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002390:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <HAL_FDCAN_MspInit+0x1a8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	4a24      	ldr	r2, [pc, #144]	@ (8002428 <HAL_FDCAN_MspInit+0x1a8>)
 8002398:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800239a:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <HAL_FDCAN_MspInit+0x1a8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d10e      	bne.n	80023c0 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80023a2:	4b22      	ldr	r3, [pc, #136]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 80023a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80023a8:	4a20      	ldr	r2, [pc, #128]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ae:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80023b2:	4b1e      	ldr	r3, [pc, #120]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 80023b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80023b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c0:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 80023c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c6:	4a19      	ldr	r2, [pc, #100]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d0:	4b16      	ldr	r3, [pc, #88]	@ (800242c <HAL_FDCAN_MspInit+0x1ac>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80023de:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80023e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80023f8:	2309      	movs	r3, #9
 80023fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002402:	4619      	mov	r1, r3
 8002404:	480c      	ldr	r0, [pc, #48]	@ (8002438 <HAL_FDCAN_MspInit+0x1b8>)
 8002406:	f006 f86f 	bl	80084e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2102      	movs	r1, #2
 800240e:	2014      	movs	r0, #20
 8002410:	f002 fd55 	bl	8004ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002414:	2014      	movs	r0, #20
 8002416:	f002 fd6c 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 800241a:	bf00      	nop
 800241c:	37e8      	adds	r7, #232	@ 0xe8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	4000a000 	.word	0x4000a000
 8002428:	24001814 	.word	0x24001814
 800242c:	58024400 	.word	0x58024400
 8002430:	58020c00 	.word	0x58020c00
 8002434:	4000a400 	.word	0x4000a400
 8002438:	58020400 	.word	0x58020400

0800243c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	@ 0x30
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a3e      	ldr	r2, [pc, #248]	@ (8002554 <HAL_SD_MspInit+0x118>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d175      	bne.n	800254a <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800245e:	4b3e      	ldr	r3, [pc, #248]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 8002460:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002464:	4a3c      	ldr	r2, [pc, #240]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800246e:	4b3a      	ldr	r3, [pc, #232]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 8002470:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247c:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002482:	4a35      	ldr	r2, [pc, #212]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800248c:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 800248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800249a:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b8:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024be:	4a26      	ldr	r2, [pc, #152]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024c8:	4b23      	ldr	r3, [pc, #140]	@ (8002558 <HAL_SD_MspInit+0x11c>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024d6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80024da:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024e8:	230c      	movs	r3, #12
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4619      	mov	r1, r3
 80024f2:	481a      	ldr	r0, [pc, #104]	@ (800255c <HAL_SD_MspInit+0x120>)
 80024f4:	f005 fff8 	bl	80084e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024f8:	2304      	movs	r3, #4
 80024fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002508:	230c      	movs	r3, #12
 800250a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	4619      	mov	r1, r3
 8002512:	4813      	ldr	r0, [pc, #76]	@ (8002560 <HAL_SD_MspInit+0x124>)
 8002514:	f005 ffe8 	bl	80084e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002518:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800251c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 800252a:	2307      	movs	r3, #7
 800252c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	f107 031c 	add.w	r3, r7, #28
 8002532:	4619      	mov	r1, r3
 8002534:	480b      	ldr	r0, [pc, #44]	@ (8002564 <HAL_SD_MspInit+0x128>)
 8002536:	f005 ffd7 	bl	80084e8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2031      	movs	r0, #49	@ 0x31
 8002540:	f002 fcbd 	bl	8004ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002544:	2031      	movs	r0, #49	@ 0x31
 8002546:	f002 fcd4 	bl	8004ef2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800254a:	bf00      	nop
 800254c:	3730      	adds	r7, #48	@ 0x30
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	52007000 	.word	0x52007000
 8002558:	58024400 	.word	0x58024400
 800255c:	58020800 	.word	0x58020800
 8002560:	58020c00 	.word	0x58020c00
 8002564:	58020400 	.word	0x58020400

08002568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	@ (80025dc <HAL_TIM_Base_MspInit+0x74>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10f      	bne.n	800259a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800257a:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_TIM_Base_MspInit+0x78>)
 800257c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002580:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <HAL_TIM_Base_MspInit+0x78>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800258a:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <HAL_TIM_Base_MspInit+0x78>)
 800258c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002598:	e01b      	b.n	80025d2 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a11      	ldr	r2, [pc, #68]	@ (80025e4 <HAL_TIM_Base_MspInit+0x7c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d116      	bne.n	80025d2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_TIM_Base_MspInit+0x78>)
 80025a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025aa:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <HAL_TIM_Base_MspInit+0x78>)
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_TIM_Base_MspInit+0x78>)
 80025b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2075      	movs	r0, #117	@ 0x75
 80025c8:	f002 fc79 	bl	8004ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80025cc:	2075      	movs	r0, #117	@ 0x75
 80025ce:	f002 fc90 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40010000 	.word	0x40010000
 80025e0:	58024400 	.word	0x58024400
 80025e4:	40014400 	.word	0x40014400

080025e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a13      	ldr	r2, [pc, #76]	@ (8002654 <HAL_TIM_MspPostInit+0x6c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d11f      	bne.n	800264a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800260a:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <HAL_TIM_MspPostInit+0x70>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002610:	4a11      	ldr	r2, [pc, #68]	@ (8002658 <HAL_TIM_MspPostInit+0x70>)
 8002612:	f043 0310 	orr.w	r3, r3, #16
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800261a:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <HAL_TIM_MspPostInit+0x70>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8002628:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800262c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800263a:	2301      	movs	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	4619      	mov	r1, r3
 8002644:	4805      	ldr	r0, [pc, #20]	@ (800265c <HAL_TIM_MspPostInit+0x74>)
 8002646:	f005 ff4f 	bl	80084e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800264a:	bf00      	nop
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40010000 	.word	0x40010000
 8002658:	58024400 	.word	0x58024400
 800265c:	58021000 	.word	0x58021000

08002660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0ba      	sub	sp, #232	@ 0xe8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	22b8      	movs	r2, #184	@ 0xb8
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f011 fd97 	bl	80141b4 <memset>
  if(huart->Instance==USART1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4d      	ldr	r2, [pc, #308]	@ (80027c0 <HAL_UART_MspInit+0x160>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d147      	bne.n	8002720 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002690:	f04f 0201 	mov.w	r2, #1
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a2:	f107 0318 	add.w	r3, r7, #24
 80026a6:	4618      	mov	r0, r3
 80026a8:	f007 f898 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80026b2:	f7ff fc83 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026b6:	4b43      	ldr	r3, [pc, #268]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 80026b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026bc:	4a41      	ldr	r2, [pc, #260]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 80026be:	f043 0310 	orr.w	r3, r3, #16
 80026c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026c6:	4b3f      	ldr	r3, [pc, #252]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 80026c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b3b      	ldr	r3, [pc, #236]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026da:	4a3a      	ldr	r2, [pc, #232]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026e4:	4b37      	ldr	r3, [pc, #220]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 80026e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 80026f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800270c:	2307      	movs	r3, #7
 800270e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002716:	4619      	mov	r1, r3
 8002718:	482b      	ldr	r0, [pc, #172]	@ (80027c8 <HAL_UART_MspInit+0x168>)
 800271a:	f005 fee5 	bl	80084e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800271e:	e04a      	b.n	80027b6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a29      	ldr	r2, [pc, #164]	@ (80027cc <HAL_UART_MspInit+0x16c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d145      	bne.n	80027b6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800272a:	f04f 0202 	mov.w	r2, #2
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273c:	f107 0318 	add.w	r3, r7, #24
 8002740:	4618      	mov	r0, r3
 8002742:	f007 f84b 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800274c:	f7ff fc36 	bl	8001fbc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002750:	4b1c      	ldr	r3, [pc, #112]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 8002752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002756:	4a1b      	ldr	r2, [pc, #108]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 8002758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800275c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 8002762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 8002770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002774:	4a13      	ldr	r2, [pc, #76]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <HAL_UART_MspInit+0x164>)
 8002780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800278c:	230c      	movs	r3, #12
 800278e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027a4:	2307      	movs	r3, #7
 80027a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <HAL_UART_MspInit+0x168>)
 80027b2:	f005 fe99 	bl	80084e8 <HAL_GPIO_Init>
}
 80027b6:	bf00      	nop
 80027b8:	37e8      	adds	r7, #232	@ 0xe8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40011000 	.word	0x40011000
 80027c4:	58024400 	.word	0x58024400
 80027c8:	58020000 	.word	0x58020000
 80027cc:	40004400 	.word	0x40004400

080027d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <NMI_Handler+0x4>

080027d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <HardFault_Handler+0x4>

080027e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <MemManage_Handler+0x4>

080027e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <BusFault_Handler+0x4>

080027f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <UsageFault_Handler+0x4>

080027f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002826:	f000 f98d 	bl	8002b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <DMA1_Stream0_IRQHandler+0x10>)
 8002836:	f003 f939 	bl	8005aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	24000174 	.word	0x24000174

08002844 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002848:	4803      	ldr	r0, [pc, #12]	@ (8002858 <ADC_IRQHandler+0x14>)
 800284a:	f000 ff8f 	bl	800376c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800284e:	4803      	ldr	r0, [pc, #12]	@ (800285c <ADC_IRQHandler+0x18>)
 8002850:	f000 ff8c 	bl	800376c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	24000094 	.word	0x24000094
 800285c:	24000104 	.word	0x24000104

08002860 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <FDCAN1_IT0_IRQHandler+0x10>)
 8002866:	f005 f943 	bl	8007af0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	240001ec 	.word	0x240001ec

08002874 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <FDCAN2_IT0_IRQHandler+0x10>)
 800287a:	f005 f939 	bl	8007af0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2400028c 	.word	0x2400028c

08002888 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <SDMMC1_IRQHandler+0x10>)
 800288e:	f009 fdfb 	bl	800c488 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2400032c 	.word	0x2400032c

0800289c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80028a0:	4802      	ldr	r0, [pc, #8]	@ (80028ac <TIM16_IRQHandler+0x10>)
 80028a2:	f00b f924 	bl	800daee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	240003f4 	.word	0x240003f4

080028b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b8:	4a14      	ldr	r2, [pc, #80]	@ (800290c <_sbrk+0x5c>)
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <_sbrk+0x60>)
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c4:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <_sbrk+0x64>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	@ (8002918 <_sbrk+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d207      	bcs.n	80028f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e0:	f011 fc70 	bl	80141c4 <__errno>
 80028e4:	4603      	mov	r3, r0
 80028e6:	220c      	movs	r2, #12
 80028e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e009      	b.n	8002904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f6:	4b07      	ldr	r3, [pc, #28]	@ (8002914 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <_sbrk+0x64>)
 8002900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002902:	68fb      	ldr	r3, [r7, #12]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	24050000 	.word	0x24050000
 8002910:	00000400 	.word	0x00000400
 8002914:	24001818 	.word	0x24001818
 8002918:	24001bb0 	.word	0x24001bb0

0800291c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002920:	4b32      	ldr	r3, [pc, #200]	@ (80029ec <SystemInit+0xd0>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	4a31      	ldr	r2, [pc, #196]	@ (80029ec <SystemInit+0xd0>)
 8002928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800292c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002930:	4b2f      	ldr	r3, [pc, #188]	@ (80029f0 <SystemInit+0xd4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	2b06      	cmp	r3, #6
 800293a:	d807      	bhi.n	800294c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800293c:	4b2c      	ldr	r3, [pc, #176]	@ (80029f0 <SystemInit+0xd4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 030f 	bic.w	r3, r3, #15
 8002944:	4a2a      	ldr	r2, [pc, #168]	@ (80029f0 <SystemInit+0xd4>)
 8002946:	f043 0307 	orr.w	r3, r3, #7
 800294a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800294c:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <SystemInit+0xd8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a28      	ldr	r2, [pc, #160]	@ (80029f4 <SystemInit+0xd8>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002958:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <SystemInit+0xd8>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800295e:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <SystemInit+0xd8>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4924      	ldr	r1, [pc, #144]	@ (80029f4 <SystemInit+0xd8>)
 8002964:	4b24      	ldr	r3, [pc, #144]	@ (80029f8 <SystemInit+0xdc>)
 8002966:	4013      	ands	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800296a:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <SystemInit+0xd4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002976:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <SystemInit+0xd4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 030f 	bic.w	r3, r3, #15
 800297e:	4a1c      	ldr	r2, [pc, #112]	@ (80029f0 <SystemInit+0xd4>)
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002986:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <SystemInit+0xd8>)
 8002988:	2200      	movs	r2, #0
 800298a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <SystemInit+0xd8>)
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002992:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <SystemInit+0xd8>)
 8002994:	2200      	movs	r2, #0
 8002996:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002998:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <SystemInit+0xd8>)
 800299a:	4a18      	ldr	r2, [pc, #96]	@ (80029fc <SystemInit+0xe0>)
 800299c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <SystemInit+0xd8>)
 80029a0:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <SystemInit+0xe4>)
 80029a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029a4:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <SystemInit+0xd8>)
 80029a6:	4a17      	ldr	r2, [pc, #92]	@ (8002a04 <SystemInit+0xe8>)
 80029a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029aa:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <SystemInit+0xd8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029b0:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <SystemInit+0xd8>)
 80029b2:	4a14      	ldr	r2, [pc, #80]	@ (8002a04 <SystemInit+0xe8>)
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029b6:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <SystemInit+0xd8>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029bc:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <SystemInit+0xd8>)
 80029be:	4a11      	ldr	r2, [pc, #68]	@ (8002a04 <SystemInit+0xe8>)
 80029c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <SystemInit+0xd8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <SystemInit+0xd8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a09      	ldr	r2, [pc, #36]	@ (80029f4 <SystemInit+0xd8>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029d4:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <SystemInit+0xd8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029da:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <SystemInit+0xec>)
 80029dc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80029e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00
 80029f0:	52002000 	.word	0x52002000
 80029f4:	58024400 	.word	0x58024400
 80029f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80029fc:	02020200 	.word	0x02020200
 8002a00:	01ff0000 	.word	0x01ff0000
 8002a04:	01010280 	.word	0x01010280
 8002a08:	52004000 	.word	0x52004000

08002a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a10:	f7ff ff84 	bl	800291c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a14:	480c      	ldr	r0, [pc, #48]	@ (8002a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a16:	490d      	ldr	r1, [pc, #52]	@ (8002a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a18:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a1c:	e002      	b.n	8002a24 <LoopCopyDataInit>

08002a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a22:	3304      	adds	r3, #4

08002a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a28:	d3f9      	bcc.n	8002a1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a30:	e001      	b.n	8002a36 <LoopFillZerobss>

08002a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a34:	3204      	adds	r2, #4

08002a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a38:	d3fb      	bcc.n	8002a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a3a:	f011 fbc9 	bl	80141d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3e:	f7fd fe99 	bl	8000774 <main>
  bx  lr
 8002a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a44:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a4c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002a50:	08015434 	.word	0x08015434
  ldr r2, =_sbss
 8002a54:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002a58:	24001bb0 	.word	0x24001bb0

08002a5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a5c:	e7fe      	b.n	8002a5c <ADC3_IRQHandler>
	...

08002a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a66:	2003      	movs	r0, #3
 8002a68:	f002 fa1e 	bl	8004ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a6c:	f006 fce0 	bl	8009430 <HAL_RCC_GetSysClockFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <HAL_Init+0x68>)
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	4913      	ldr	r1, [pc, #76]	@ (8002acc <HAL_Init+0x6c>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
 8002a88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <HAL_Init+0x68>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	4a0e      	ldr	r2, [pc, #56]	@ (8002acc <HAL_Init+0x6c>)
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad0 <HAL_Init+0x70>)
 8002aa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad4 <HAL_Init+0x74>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aaa:	200f      	movs	r0, #15
 8002aac:	f000 f814 	bl	8002ad8 <HAL_InitTick>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e002      	b.n	8002ac0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002aba:	f7ff fa85 	bl	8001fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	08014f4c 	.word	0x08014f4c
 8002ad0:	24000010 	.word	0x24000010
 8002ad4:	2400000c 	.word	0x2400000c

08002ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ae0:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <HAL_InitTick+0x60>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e021      	b.n	8002b30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <HAL_InitTick+0x64>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <HAL_InitTick+0x60>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fa03 	bl	8004f0e <HAL_SYSTICK_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00e      	b.n	8002b30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d80a      	bhi.n	8002b2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f002 f9cd 	bl	8004ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b24:	4a06      	ldr	r2, [pc, #24]	@ (8002b40 <HAL_InitTick+0x68>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	24000018 	.word	0x24000018
 8002b3c:	2400000c 	.word	0x2400000c
 8002b40:	24000014 	.word	0x24000014

08002b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_IncTick+0x20>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <HAL_IncTick+0x24>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <HAL_IncTick+0x24>)
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	24000018 	.word	0x24000018
 8002b68:	2400181c 	.word	0x2400181c

08002b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <HAL_GetTick+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2400181c 	.word	0x2400181c

08002b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff ffee 	bl	8002b6c <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d005      	beq.n	8002baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <HAL_Delay+0x44>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002baa:	bf00      	nop
 8002bac:	f7ff ffde 	bl	8002b6c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d8f7      	bhi.n	8002bac <HAL_Delay+0x28>
  {
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	24000018 	.word	0x24000018

08002bcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	609a      	str	r2, [r3, #8]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3360      	adds	r3, #96	@ 0x60
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a10      	ldr	r2, [pc, #64]	@ (8002c94 <LL_ADC_SetOffset+0x60>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10b      	bne.n	8002c70 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c6e:	e00b      	b.n	8002c88 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	431a      	orrs	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	58026000 	.word	0x58026000

08002c98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3360      	adds	r3, #96	@ 0x60
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	611a      	str	r2, [r3, #16]
}
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a0c      	ldr	r2, [pc, #48]	@ (8002d38 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00e      	beq.n	8002d2a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3360      	adds	r3, #96	@ 0x60
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	601a      	str	r2, [r3, #0]
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	58026000 	.word	0x58026000

08002d3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d7c <LL_ADC_SetOffsetSaturation+0x40>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10e      	bne.n	8002d6e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3360      	adds	r3, #96	@ 0x60
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	58026000 	.word	0x58026000

08002d80 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc0 <LL_ADC_SetOffsetSign+0x40>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10e      	bne.n	8002db2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3360      	adds	r3, #96	@ 0x60
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	58026000 	.word	0x58026000

08002dc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3360      	adds	r3, #96	@ 0x60
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e14 <LL_ADC_SetOffsetState+0x50>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d108      	bne.n	8002df8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002df6:	e007      	b.n	8002e08 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	601a      	str	r2, [r3, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	58026000 	.word	0x58026000

08002e18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3330      	adds	r3, #48	@ 0x30
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	4413      	add	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	211f      	movs	r1, #31
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	401a      	ands	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	0e9b      	lsrs	r3, r3, #26
 8002e76:	f003 011f 	and.w	r1, r3, #31
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f023 0203 	bic.w	r2, r3, #3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a08      	ldr	r2, [pc, #32]	@ (8002f0c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d107      	bne.n	8002efe <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60da      	str	r2, [r3, #12]
  }
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	58026000 	.word	0x58026000

08002f10 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3314      	adds	r3, #20
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	0e5b      	lsrs	r3, r3, #25
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	4413      	add	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	0d1b      	lsrs	r3, r3, #20
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2107      	movs	r1, #7
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	0d1b      	lsrs	r3, r3, #20
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003004 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d115      	bne.n	8002fcc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fac:	43db      	mvns	r3, r3
 8002fae:	401a      	ands	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0318 	and.w	r3, r3, #24
 8002fb6:	4914      	ldr	r1, [pc, #80]	@ (8003008 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002fb8:	40d9      	lsrs	r1, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002fca:	e014      	b.n	8002ff6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	401a      	ands	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0318 	and.w	r3, r3, #24
 8002fe2:	4909      	ldr	r1, [pc, #36]	@ (8003008 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002fe4:	40d9      	lsrs	r1, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	400b      	ands	r3, r1
 8002fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	58026000 	.word	0x58026000
 8003008:	000fffff 	.word	0x000fffff

0800300c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 031f 	and.w	r3, r3, #31
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003052:	4013      	ands	r3, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6093      	str	r3, [r2, #8]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	5fffffc0 	.word	0x5fffffc0

08003068 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800307c:	d101      	bne.n	8003082 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800309e:	4013      	ands	r3, r2
 80030a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	6fffffc0 	.word	0x6fffffc0

080030b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030cc:	d101      	bne.n	80030d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <LL_ADC_Enable+0x24>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	7fffffc0 	.word	0x7fffffc0

08003108 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <LL_ADC_IsEnabled+0x18>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <LL_ADC_IsEnabled+0x1a>
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <LL_ADC_REG_StartConversion+0x24>)
 800313e:	4013      	ands	r3, r2
 8003140:	f043 0204 	orr.w	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	7fffffc0 	.word	0x7fffffc0

08003158 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b04      	cmp	r3, #4
 800316a:	d101      	bne.n	8003170 <LL_ADC_REG_IsConversionOngoing+0x18>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b08      	cmp	r3, #8
 8003190:	d101      	bne.n	8003196 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b089      	sub	sp, #36	@ 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e1ee      	b.n	800359c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fe ff15 	bl	8001ffc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff3f 	bl	8003068 <LL_ADC_IsDeepPowerDownEnabled>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff25 	bl	8003044 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff5a 	bl	80030b8 <LL_ADC_IsInternalRegulatorEnabled>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d114      	bne.n	8003234 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff3e 	bl	8003090 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003214:	4b8e      	ldr	r3, [pc, #568]	@ (8003450 <HAL_ADC_Init+0x2ac>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	4a8e      	ldr	r2, [pc, #568]	@ (8003454 <HAL_ADC_Init+0x2b0>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	3301      	adds	r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003226:	e002      	b.n	800322e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	3b01      	subs	r3, #1
 800322c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f9      	bne.n	8003228 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff3d 	bl	80030b8 <LL_ADC_IsInternalRegulatorEnabled>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003248:	f043 0210 	orr.w	r2, r3, #16
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff77 	bl	8003158 <LL_ADC_REG_IsConversionOngoing>
 800326a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	f040 8188 	bne.w	800358a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f040 8184 	bne.w	800358a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003286:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800328a:	f043 0202 	orr.w	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ff36 	bl	8003108 <LL_ADC_IsEnabled>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d136      	bne.n	8003310 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003458 <HAL_ADC_Init+0x2b4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_ADC_Init+0x112>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a6a      	ldr	r2, [pc, #424]	@ (800345c <HAL_ADC_Init+0x2b8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10e      	bne.n	80032d4 <HAL_ADC_Init+0x130>
 80032b6:	4868      	ldr	r0, [pc, #416]	@ (8003458 <HAL_ADC_Init+0x2b4>)
 80032b8:	f7ff ff26 	bl	8003108 <LL_ADC_IsEnabled>
 80032bc:	4604      	mov	r4, r0
 80032be:	4867      	ldr	r0, [pc, #412]	@ (800345c <HAL_ADC_Init+0x2b8>)
 80032c0:	f7ff ff22 	bl	8003108 <LL_ADC_IsEnabled>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4323      	orrs	r3, r4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e008      	b.n	80032e6 <HAL_ADC_Init+0x142>
 80032d4:	4862      	ldr	r0, [pc, #392]	@ (8003460 <HAL_ADC_Init+0x2bc>)
 80032d6:	f7ff ff17 	bl	8003108 <LL_ADC_IsEnabled>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d012      	beq.n	8003310 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003458 <HAL_ADC_Init+0x2b4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_ADC_Init+0x15a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a58      	ldr	r2, [pc, #352]	@ (800345c <HAL_ADC_Init+0x2b8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_Init+0x15e>
 80032fe:	4a59      	ldr	r2, [pc, #356]	@ (8003464 <HAL_ADC_Init+0x2c0>)
 8003300:	e000      	b.n	8003304 <HAL_ADC_Init+0x160>
 8003302:	4a59      	ldr	r2, [pc, #356]	@ (8003468 <HAL_ADC_Init+0x2c4>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f7ff fc5e 	bl	8002bcc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a52      	ldr	r2, [pc, #328]	@ (8003460 <HAL_ADC_Init+0x2bc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d129      	bne.n	800336e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7e5b      	ldrb	r3, [r3, #25]
 800331e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003324:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800332a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d013      	beq.n	800335c <HAL_ADC_Init+0x1b8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d00d      	beq.n	8003358 <HAL_ADC_Init+0x1b4>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b1c      	cmp	r3, #28
 8003342:	d007      	beq.n	8003354 <HAL_ADC_Init+0x1b0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b18      	cmp	r3, #24
 800334a:	d101      	bne.n	8003350 <HAL_ADC_Init+0x1ac>
 800334c:	2318      	movs	r3, #24
 800334e:	e006      	b.n	800335e <HAL_ADC_Init+0x1ba>
 8003350:	2300      	movs	r3, #0
 8003352:	e004      	b.n	800335e <HAL_ADC_Init+0x1ba>
 8003354:	2310      	movs	r3, #16
 8003356:	e002      	b.n	800335e <HAL_ADC_Init+0x1ba>
 8003358:	2308      	movs	r3, #8
 800335a:	e000      	b.n	800335e <HAL_ADC_Init+0x1ba>
 800335c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800335e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003366:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e00e      	b.n	800338c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7e5b      	ldrb	r3, [r3, #25]
 8003372:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003378:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800337e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003386:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d106      	bne.n	80033a4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	3b01      	subs	r3, #1
 800339c:	045b      	lsls	r3, r3, #17
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d009      	beq.n	80033c0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a26      	ldr	r2, [pc, #152]	@ (8003460 <HAL_ADC_Init+0x2bc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d115      	bne.n	80033f6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4b26      	ldr	r3, [pc, #152]	@ (800346c <HAL_ADC_Init+0x2c8>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	430b      	orrs	r3, r1
 80033dc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	611a      	str	r2, [r3, #16]
 80033f4:	e009      	b.n	800340a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003470 <HAL_ADC_Init+0x2cc>)
 80033fe:	4013      	ands	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	430b      	orrs	r3, r1
 8003408:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fea2 	bl	8003158 <LL_ADC_REG_IsConversionOngoing>
 8003414:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff feaf 	bl	800317e <LL_ADC_INJ_IsConversionOngoing>
 8003420:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 808e 	bne.w	8003546 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f040 808a 	bne.w	8003546 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a0a      	ldr	r2, [pc, #40]	@ (8003460 <HAL_ADC_Init+0x2bc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d11b      	bne.n	8003474 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7e1b      	ldrb	r3, [r3, #24]
 8003440:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003448:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	e018      	b.n	8003482 <HAL_ADC_Init+0x2de>
 8003450:	2400000c 	.word	0x2400000c
 8003454:	053e2d63 	.word	0x053e2d63
 8003458:	40022000 	.word	0x40022000
 800345c:	40022100 	.word	0x40022100
 8003460:	58026000 	.word	0x58026000
 8003464:	40022300 	.word	0x40022300
 8003468:	58026300 	.word	0x58026300
 800346c:	fff04007 	.word	0xfff04007
 8003470:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7e1b      	ldrb	r3, [r3, #24]
 8003478:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	4b46      	ldr	r3, [pc, #280]	@ (80035a4 <HAL_ADC_Init+0x400>)
 800348a:	4013      	ands	r3, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	69b9      	ldr	r1, [r7, #24]
 8003492:	430b      	orrs	r3, r1
 8003494:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800349c:	2b01      	cmp	r3, #1
 800349e:	d137      	bne.n	8003510 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3f      	ldr	r2, [pc, #252]	@ (80035a8 <HAL_ADC_Init+0x404>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d116      	bne.n	80034de <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	4b3d      	ldr	r3, [pc, #244]	@ (80035ac <HAL_ADC_Init+0x408>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034c2:	4311      	orrs	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034c8:	4311      	orrs	r1, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034ce:	430a      	orrs	r2, r1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	611a      	str	r2, [r3, #16]
 80034dc:	e020      	b.n	8003520 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	4b32      	ldr	r3, [pc, #200]	@ (80035b0 <HAL_ADC_Init+0x40c>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034ec:	3a01      	subs	r2, #1
 80034ee:	0411      	lsls	r1, r2, #16
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034fa:	4311      	orrs	r1, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003500:	430a      	orrs	r2, r1
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	611a      	str	r2, [r3, #16]
 800350e:	e007      	b.n	8003520 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1b      	ldr	r2, [pc, #108]	@ (80035a8 <HAL_ADC_Init+0x404>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d002      	beq.n	8003546 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f001 f9b9 	bl	80048b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10c      	bne.n	8003568 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003554:	f023 010f 	bic.w	r1, r3, #15
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	1e5a      	subs	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30
 8003566:	e007      	b.n	8003578 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 020f 	bic.w	r2, r2, #15
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357c:	f023 0303 	bic.w	r3, r3, #3
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	661a      	str	r2, [r3, #96]	@ 0x60
 8003588:	e007      	b.n	800359a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800359a:	7ffb      	ldrb	r3, [r7, #31]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3724      	adds	r7, #36	@ 0x24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd90      	pop	{r4, r7, pc}
 80035a4:	ffffbffc 	.word	0xffffbffc
 80035a8:	58026000 	.word	0x58026000
 80035ac:	fc00f81f 	.word	0xfc00f81f
 80035b0:	fc00f81e 	.word	0xfc00f81e

080035b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a60      	ldr	r2, [pc, #384]	@ (8003748 <HAL_ADC_Start_DMA+0x194>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_ADC_Start_DMA+0x20>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a5f      	ldr	r2, [pc, #380]	@ (800374c <HAL_ADC_Start_DMA+0x198>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_Start_DMA+0x24>
 80035d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003750 <HAL_ADC_Start_DMA+0x19c>)
 80035d6:	e000      	b.n	80035da <HAL_ADC_Start_DMA+0x26>
 80035d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003754 <HAL_ADC_Start_DMA+0x1a0>)
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fd16 	bl	800300c <LL_ADC_GetMultimode>
 80035e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fdb6 	bl	8003158 <LL_ADC_REG_IsConversionOngoing>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 80a2 	bne.w	8003738 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_Start_DMA+0x4e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e09d      	b.n	800373e <HAL_ADC_Start_DMA+0x18a>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d003      	beq.n	800361e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b09      	cmp	r3, #9
 800361a:	f040 8086 	bne.w	800372a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f001 f82c 	bl	800467c <ADC_Enable>
 8003624:	4603      	mov	r3, r0
 8003626:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d178      	bne.n	8003720 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003632:	4b49      	ldr	r3, [pc, #292]	@ (8003758 <HAL_ADC_Start_DMA+0x1a4>)
 8003634:	4013      	ands	r3, r2
 8003636:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a42      	ldr	r2, [pc, #264]	@ (800374c <HAL_ADC_Start_DMA+0x198>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d002      	beq.n	800364e <HAL_ADC_Start_DMA+0x9a>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	e000      	b.n	8003650 <HAL_ADC_Start_DMA+0x9c>
 800364e:	4b3e      	ldr	r3, [pc, #248]	@ (8003748 <HAL_ADC_Start_DMA+0x194>)
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	4293      	cmp	r3, r2
 8003656:	d002      	beq.n	800365e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003662:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800367a:	f023 0206 	bic.w	r2, r3, #6
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	665a      	str	r2, [r3, #100]	@ 0x64
 8003682:	e002      	b.n	800368a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368e:	4a33      	ldr	r2, [pc, #204]	@ (800375c <HAL_ADC_Start_DMA+0x1a8>)
 8003690:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	4a32      	ldr	r2, [pc, #200]	@ (8003760 <HAL_ADC_Start_DMA+0x1ac>)
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369e:	4a31      	ldr	r2, [pc, #196]	@ (8003764 <HAL_ADC_Start_DMA+0x1b0>)
 80036a0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	221c      	movs	r2, #28
 80036a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0210 	orr.w	r2, r2, #16
 80036c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a28      	ldr	r2, [pc, #160]	@ (8003768 <HAL_ADC_Start_DMA+0x1b4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10f      	bne.n	80036ec <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f7ff fbfe 	bl	8002edc <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fbe9 	bl	8002ebc <LL_ADC_EnableDMAReq>
 80036ea:	e007      	b.n	80036fc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f7ff fbcd 	bl	8002e96 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3340      	adds	r3, #64	@ 0x40
 8003706:	4619      	mov	r1, r3
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f001 ff64 	bl	80055d8 <HAL_DMA_Start_IT>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fd09 	bl	8003130 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800371e:	e00d      	b.n	800373c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003728:	e008      	b.n	800373c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003736:	e001      	b.n	800373c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800373c:	7dfb      	ldrb	r3, [r7, #23]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40022000 	.word	0x40022000
 800374c:	40022100 	.word	0x40022100
 8003750:	40022300 	.word	0x40022300
 8003754:	58026300 	.word	0x58026300
 8003758:	fffff0fe 	.word	0xfffff0fe
 800375c:	08004791 	.word	0x08004791
 8003760:	08004869 	.word	0x08004869
 8003764:	08004885 	.word	0x08004885
 8003768:	58026000 	.word	0x58026000

0800376c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	@ 0x28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003774:	2300      	movs	r3, #0
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a87      	ldr	r2, [pc, #540]	@ (80039ac <HAL_ADC_IRQHandler+0x240>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_ADC_IRQHandler+0x30>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a86      	ldr	r2, [pc, #536]	@ (80039b0 <HAL_ADC_IRQHandler+0x244>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d101      	bne.n	80037a0 <HAL_ADC_IRQHandler+0x34>
 800379c:	4b85      	ldr	r3, [pc, #532]	@ (80039b4 <HAL_ADC_IRQHandler+0x248>)
 800379e:	e000      	b.n	80037a2 <HAL_ADC_IRQHandler+0x36>
 80037a0:	4b85      	ldr	r3, [pc, #532]	@ (80039b8 <HAL_ADC_IRQHandler+0x24c>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fc32 	bl	800300c <LL_ADC_GetMultimode>
 80037a8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <HAL_ADC_IRQHandler+0x78>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d012      	beq.n	80037e4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ce:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f001 f9aa 	bl	8004b30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2202      	movs	r2, #2
 80037e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <HAL_ADC_IRQHandler+0x8c>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8083 	beq.w	800390a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d07d      	beq.n	800390a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d105      	bne.n	8003826 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff faf4 	bl	8002e18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d062      	beq.n	80038fc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5d      	ldr	r2, [pc, #372]	@ (80039b0 <HAL_ADC_IRQHandler+0x244>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d002      	beq.n	8003846 <HAL_ADC_IRQHandler+0xda>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	e000      	b.n	8003848 <HAL_ADC_IRQHandler+0xdc>
 8003846:	4b59      	ldr	r3, [pc, #356]	@ (80039ac <HAL_ADC_IRQHandler+0x240>)
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	4293      	cmp	r3, r2
 800384e:	d008      	beq.n	8003862 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b05      	cmp	r3, #5
 800385a:	d002      	beq.n	8003862 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b09      	cmp	r3, #9
 8003860:	d104      	bne.n	800386c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	623b      	str	r3, [r7, #32]
 800386a:	e00c      	b.n	8003886 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a4f      	ldr	r2, [pc, #316]	@ (80039b0 <HAL_ADC_IRQHandler+0x244>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d002      	beq.n	800387c <HAL_ADC_IRQHandler+0x110>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	e000      	b.n	800387e <HAL_ADC_IRQHandler+0x112>
 800387c:	4b4b      	ldr	r3, [pc, #300]	@ (80039ac <HAL_ADC_IRQHandler+0x240>)
 800387e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d135      	bne.n	80038fc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b08      	cmp	r3, #8
 800389c:	d12e      	bne.n	80038fc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fc58 	bl	8003158 <LL_ADC_REG_IsConversionOngoing>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11a      	bne.n	80038e4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 020c 	bic.w	r2, r2, #12
 80038bc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d112      	bne.n	80038fc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80038e2:	e00b      	b.n	80038fc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	f043 0210 	orr.w	r2, r3, #16
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038f4:	f043 0201 	orr.w	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7fd fe43 	bl	8001588 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	220c      	movs	r2, #12
 8003908:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <HAL_ADC_IRQHandler+0x1b2>
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a0 	beq.w	8003a6a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 809a 	beq.w	8003a6a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fadc 	bl	8002f10 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003958:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fa5a 	bl	8002e18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003964:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <HAL_ADC_IRQHandler+0x244>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d002      	beq.n	8003976 <HAL_ADC_IRQHandler+0x20a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	e000      	b.n	8003978 <HAL_ADC_IRQHandler+0x20c>
 8003976:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <HAL_ADC_IRQHandler+0x240>)
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	4293      	cmp	r3, r2
 800397e:	d008      	beq.n	8003992 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b06      	cmp	r3, #6
 800398a:	d002      	beq.n	8003992 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b07      	cmp	r3, #7
 8003990:	d104      	bne.n	800399c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	623b      	str	r3, [r7, #32]
 800399a:	e014      	b.n	80039c6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a03      	ldr	r2, [pc, #12]	@ (80039b0 <HAL_ADC_IRQHandler+0x244>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00a      	beq.n	80039bc <HAL_ADC_IRQHandler+0x250>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	e008      	b.n	80039be <HAL_ADC_IRQHandler+0x252>
 80039ac:	40022000 	.word	0x40022000
 80039b0:	40022100 	.word	0x40022100
 80039b4:	40022300 	.word	0x40022300
 80039b8:	58026300 	.word	0x58026300
 80039bc:	4b84      	ldr	r3, [pc, #528]	@ (8003bd0 <HAL_ADC_IRQHandler+0x464>)
 80039be:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d047      	beq.n	8003a5c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <HAL_ADC_IRQHandler+0x27a>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d03f      	beq.n	8003a5c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d13a      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b40      	cmp	r3, #64	@ 0x40
 80039f2:	d133      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d12e      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fbbb 	bl	800317e <LL_ADC_INJ_IsConversionOngoing>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11a      	bne.n	8003a44 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a1c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d112      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a42:	e00b      	b.n	8003a5c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a48:	f043 0210 	orr.w	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f001 f83f 	bl	8004ae0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2260      	movs	r2, #96	@ 0x60
 8003a68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d011      	beq.n	8003a98 <HAL_ADC_IRQHandler+0x32c>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8b2 	bl	8003bf4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2280      	movs	r2, #128	@ 0x80
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x35c>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f001 f825 	bl	8004b08 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d012      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x38c>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f001 f817 	bl	8004b1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d043      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x41e>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d03e      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003b14:	2301      	movs	r3, #1
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b18:	e021      	b.n	8003b5e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d015      	beq.n	8003b4c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd0 <HAL_ADC_IRQHandler+0x464>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_ADC_IRQHandler+0x3c8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a29      	ldr	r2, [pc, #164]	@ (8003bd4 <HAL_ADC_IRQHandler+0x468>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d101      	bne.n	8003b38 <HAL_ADC_IRQHandler+0x3cc>
 8003b34:	4b28      	ldr	r3, [pc, #160]	@ (8003bd8 <HAL_ADC_IRQHandler+0x46c>)
 8003b36:	e000      	b.n	8003b3a <HAL_ADC_IRQHandler+0x3ce>
 8003b38:	4b28      	ldr	r3, [pc, #160]	@ (8003bdc <HAL_ADC_IRQHandler+0x470>)
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fa74 	bl	8003028 <LL_ADC_GetMultiDMATransfer>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b46:	2301      	movs	r3, #1
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b4a:	e008      	b.n	8003b5e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10e      	bne.n	8003b82 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b68:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b74:	f043 0202 	orr.w	r2, r3, #2
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f843 	bl	8003c08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2210      	movs	r2, #16
 8003b88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d018      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x45a>
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d013      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bae:	f043 0208 	orr.w	r2, r3, #8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bbe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 ff97 	bl	8004af4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003bc6:	bf00      	nop
 8003bc8:	3728      	adds	r7, #40	@ 0x28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40022000 	.word	0x40022000
 8003bd4:	40022100 	.word	0x40022100
 8003bd8:	40022300 	.word	0x40022300
 8003bdc:	58026300 	.word	0x58026300

08003be0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b0b9      	sub	sp, #228	@ 0xe4
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c36:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4aab      	ldr	r2, [pc, #684]	@ (8003eec <HAL_ADC_ConfigChannel+0x2d0>)
 8003c3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x34>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	f000 bcfe 	b.w	800464c <HAL_ADC_ConfigChannel+0xa30>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fa7b 	bl	8003158 <LL_ADC_REG_IsConversionOngoing>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f040 84e2 	bne.w	800462e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	db38      	blt.n	8003ce4 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a9e      	ldr	r2, [pc, #632]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x2d4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d033      	beq.n	8003ce4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d108      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x7e>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	0e9b      	lsrs	r3, r3, #26
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	2201      	movs	r2, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	e01d      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0xba>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	e004      	b.n	8003ccc <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cc6:	fab3 f383 	clz	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	69d1      	ldr	r1, [r2, #28]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f7ff f8a4 	bl	8002e3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fa2c 	bl	8003158 <LL_ADC_REG_IsConversionOngoing>
 8003d00:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fa38 	bl	800317e <LL_ADC_INJ_IsConversionOngoing>
 8003d0e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f040 8270 	bne.w	80041fc <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 826b 	bne.w	80041fc <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6819      	ldr	r1, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f7ff f8ff 	bl	8002f36 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6c      	ldr	r2, [pc, #432]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x2d4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10d      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	08db      	lsrs	r3, r3, #3
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d5c:	e032      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d5e:	4b65      	ldr	r3, [pc, #404]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x2d8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003d66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d6a:	d10b      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x168>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	e01d      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x1a4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x18e>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	e00a      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x1a4>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d048      	beq.n	8003e5e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6919      	ldr	r1, [r3, #16]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ddc:	f7fe ff2a 	bl	8002c34 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a42      	ldr	r2, [pc, #264]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x2d4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d119      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6919      	ldr	r1, [r3, #16]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f7fe ffc2 	bl	8002d80 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6919      	ldr	r1, [r3, #16]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d102      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x1f8>
 8003e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e12:	e000      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1fa>
 8003e14:	2300      	movs	r3, #0
 8003e16:	461a      	mov	r2, r3
 8003e18:	f7fe ff90 	bl	8002d3c <LL_ADC_SetOffsetSaturation>
 8003e1c:	e1ee      	b.n	80041fc <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6919      	ldr	r1, [r3, #16]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d102      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x21a>
 8003e30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e34:	e000      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x21c>
 8003e36:	2300      	movs	r3, #0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f7fe ff5d 	bl	8002cf8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6919      	ldr	r1, [r3, #16]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	7e1b      	ldrb	r3, [r3, #24]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x238>
 8003e4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e52:	e000      	b.n	8003e56 <HAL_ADC_ConfigChannel+0x23a>
 8003e54:	2300      	movs	r3, #0
 8003e56:	461a      	mov	r2, r3
 8003e58:	f7fe ff34 	bl	8002cc4 <LL_ADC_SetDataRightShift>
 8003e5c:	e1ce      	b.n	80041fc <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a23      	ldr	r2, [pc, #140]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x2d4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	f040 8181 	bne.w	800416c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe ff11 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x27a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe ff06 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	0e9b      	lsrs	r3, r3, #26
 8003e90:	f003 021f 	and.w	r2, r3, #31
 8003e94:	e01e      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x2b8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe fefb 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003ebc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	e004      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003ec8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x2dc>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0e9b      	lsrs	r3, r3, #26
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	e01e      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x30e>
 8003eec:	47ff0000 	.word	0x47ff0000
 8003ef0:	58026000 	.word	0x58026000
 8003ef4:	5c001000 	.word	0x5c001000
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f04:	fa93 f3a3 	rbit	r3, r3
 8003f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003f0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003f14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	e004      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f24:	fab3 f383 	clz	r3, r3
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d106      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe ff44 	bl	8002dc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fea8 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x34c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe fe9d 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	0e9b      	lsrs	r3, r3, #26
 8003f62:	f003 021f 	and.w	r2, r3, #31
 8003f66:	e01e      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x38a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fe92 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003f86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003f96:	2320      	movs	r3, #32
 8003f98:	e004      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x3a2>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	0e9b      	lsrs	r3, r3, #26
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	e018      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x3d4>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fd6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003fda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	e004      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003fe6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d106      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fee1 	bl	8002dc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fe45 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 800400e:	4603      	mov	r3, r0
 8004010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_ADC_ConfigChannel+0x412>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2102      	movs	r1, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe fe3a 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8004024:	4603      	mov	r3, r0
 8004026:	0e9b      	lsrs	r3, r3, #26
 8004028:	f003 021f 	and.w	r2, r3, #31
 800402c:	e01e      	b.n	800406c <HAL_ADC_ConfigChannel+0x450>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2102      	movs	r1, #2
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fe2f 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800404c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800405c:	2320      	movs	r3, #32
 800405e:	e004      	b.n	800406a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004060:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x468>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0e9b      	lsrs	r3, r3, #26
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	e014      	b.n	80040ae <HAL_ADC_ConfigChannel+0x492>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004094:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004098:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80040a0:	2320      	movs	r3, #32
 80040a2:	e004      	b.n	80040ae <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80040a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d106      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	2102      	movs	r1, #2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fe82 	bl	8002dc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2103      	movs	r1, #3
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fde6 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x4d0>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2103      	movs	r1, #3
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe fddb 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	0e9b      	lsrs	r3, r3, #26
 80040e6:	f003 021f 	and.w	r2, r3, #31
 80040ea:	e017      	b.n	800411c <HAL_ADC_ConfigChannel+0x500>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2103      	movs	r1, #3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fdd0 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040fe:	fa93 f3a3 	rbit	r3, r3
 8004102:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004106:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800410e:	2320      	movs	r3, #32
 8004110:	e003      	b.n	800411a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004114:	fab3 f383 	clz	r3, r3
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004124:	2b00      	cmp	r3, #0
 8004126:	d105      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x518>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	0e9b      	lsrs	r3, r3, #26
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	e011      	b.n	8004158 <HAL_ADC_ConfigChannel+0x53c>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004144:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800414c:	2320      	movs	r3, #32
 800414e:	e003      	b.n	8004158 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004150:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	429a      	cmp	r2, r3
 800415a:	d14f      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2200      	movs	r2, #0
 8004162:	2103      	movs	r1, #3
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fe2d 	bl	8002dc4 <LL_ADC_SetOffsetState>
 800416a:	e047      	b.n	80041fc <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004172:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	069b      	lsls	r3, r3, #26
 800417c:	429a      	cmp	r2, r3
 800417e:	d107      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800418e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004196:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	069b      	lsls	r3, r3, #26
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d107      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041b2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	069b      	lsls	r3, r3, #26
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d107      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041d6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	069b      	lsls	r3, r3, #26
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d107      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041fa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe ff81 	bl	8003108 <LL_ADC_IsEnabled>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 8219 	bne.w	8004640 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6819      	ldr	r1, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	461a      	mov	r2, r3
 800421c:	f7fe feb6 	bl	8002f8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4aa1      	ldr	r2, [pc, #644]	@ (80044ac <HAL_ADC_ConfigChannel+0x890>)
 8004226:	4293      	cmp	r3, r2
 8004228:	f040 812e 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x638>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	3301      	adds	r3, #1
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	2b09      	cmp	r3, #9
 800424a:	bf94      	ite	ls
 800424c:	2301      	movls	r3, #1
 800424e:	2300      	movhi	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e019      	b.n	8004288 <HAL_ADC_ConfigChannel+0x66c>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004264:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800426c:	2320      	movs	r3, #32
 800426e:	e003      	b.n	8004278 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2b09      	cmp	r3, #9
 8004280:	bf94      	ite	ls
 8004282:	2301      	movls	r3, #1
 8004284:	2300      	movhi	r3, #0
 8004286:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004288:	2b00      	cmp	r3, #0
 800428a:	d079      	beq.n	8004380 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x68c>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	069b      	lsls	r3, r3, #26
 80042a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a6:	e015      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x6b8>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80042b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80042ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80042c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x6d8>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	0e9b      	lsrs	r3, r3, #26
 80042e6:	3301      	adds	r3, #1
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	e017      	b.n	8004324 <HAL_ADC_ConfigChannel+0x708>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004304:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	ea42 0103 	orr.w	r1, r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <HAL_ADC_ConfigChannel+0x72e>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	f003 021f 	and.w	r2, r3, #31
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	051b      	lsls	r3, r3, #20
 8004348:	e018      	b.n	800437c <HAL_ADC_ConfigChannel+0x760>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004362:	2320      	movs	r3, #32
 8004364:	e003      	b.n	800436e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	3301      	adds	r3, #1
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800437c:	430b      	orrs	r3, r1
 800437e:	e07e      	b.n	800447e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_ADC_ConfigChannel+0x780>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	3301      	adds	r3, #1
 8004394:	069b      	lsls	r3, r3, #26
 8004396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800439a:	e015      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x7ac>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80043ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80043b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	069b      	lsls	r3, r3, #26
 80043c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x7cc>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	0e9b      	lsrs	r3, r3, #26
 80043da:	3301      	adds	r3, #1
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	e017      	b.n	8004418 <HAL_ADC_ConfigChannel+0x7fc>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	61bb      	str	r3, [r7, #24]
  return result;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004400:	2320      	movs	r3, #32
 8004402:	e003      	b.n	800440c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3301      	adds	r3, #1
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	ea42 0103 	orr.w	r1, r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10d      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x828>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0e9b      	lsrs	r3, r3, #26
 800442e:	3301      	adds	r3, #1
 8004430:	f003 021f 	and.w	r2, r3, #31
 8004434:	4613      	mov	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4413      	add	r3, r2
 800443a:	3b1e      	subs	r3, #30
 800443c:	051b      	lsls	r3, r3, #20
 800443e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004442:	e01b      	b.n	800447c <HAL_ADC_ConfigChannel+0x860>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	60fb      	str	r3, [r7, #12]
  return result;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800445c:	2320      	movs	r3, #32
 800445e:	e003      	b.n	8004468 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f003 021f 	and.w	r2, r3, #31
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	3b1e      	subs	r3, #30
 8004476:	051b      	lsls	r3, r3, #20
 8004478:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800447c:	430b      	orrs	r3, r1
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	6892      	ldr	r2, [r2, #8]
 8004482:	4619      	mov	r1, r3
 8004484:	f7fe fd57 	bl	8002f36 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f280 80d7 	bge.w	8004640 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a06      	ldr	r2, [pc, #24]	@ (80044b0 <HAL_ADC_ConfigChannel+0x894>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_ADC_ConfigChannel+0x88a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a04      	ldr	r2, [pc, #16]	@ (80044b4 <HAL_ADC_ConfigChannel+0x898>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d10a      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x8a0>
 80044a6:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <HAL_ADC_ConfigChannel+0x89c>)
 80044a8:	e009      	b.n	80044be <HAL_ADC_ConfigChannel+0x8a2>
 80044aa:	bf00      	nop
 80044ac:	47ff0000 	.word	0x47ff0000
 80044b0:	40022000 	.word	0x40022000
 80044b4:	40022100 	.word	0x40022100
 80044b8:	40022300 	.word	0x40022300
 80044bc:	4b65      	ldr	r3, [pc, #404]	@ (8004654 <HAL_ADC_ConfigChannel+0xa38>)
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fbaa 	bl	8002c18 <LL_ADC_GetCommonPathInternalCh>
 80044c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a62      	ldr	r2, [pc, #392]	@ (8004658 <HAL_ADC_ConfigChannel+0xa3c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_ADC_ConfigChannel+0x8c0>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a61      	ldr	r2, [pc, #388]	@ (800465c <HAL_ADC_ConfigChannel+0xa40>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10e      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x8de>
 80044dc:	485e      	ldr	r0, [pc, #376]	@ (8004658 <HAL_ADC_ConfigChannel+0xa3c>)
 80044de:	f7fe fe13 	bl	8003108 <LL_ADC_IsEnabled>
 80044e2:	4604      	mov	r4, r0
 80044e4:	485d      	ldr	r0, [pc, #372]	@ (800465c <HAL_ADC_ConfigChannel+0xa40>)
 80044e6:	f7fe fe0f 	bl	8003108 <LL_ADC_IsEnabled>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4323      	orrs	r3, r4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e008      	b.n	800450c <HAL_ADC_ConfigChannel+0x8f0>
 80044fa:	4859      	ldr	r0, [pc, #356]	@ (8004660 <HAL_ADC_ConfigChannel+0xa44>)
 80044fc:	f7fe fe04 	bl	8003108 <LL_ADC_IsEnabled>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8084 	beq.w	800461a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a53      	ldr	r2, [pc, #332]	@ (8004664 <HAL_ADC_ConfigChannel+0xa48>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d132      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x966>
 800451c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d12c      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a4c      	ldr	r2, [pc, #304]	@ (8004660 <HAL_ADC_ConfigChannel+0xa44>)
 800452e:	4293      	cmp	r3, r2
 8004530:	f040 8086 	bne.w	8004640 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a47      	ldr	r2, [pc, #284]	@ (8004658 <HAL_ADC_ConfigChannel+0xa3c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_ADC_ConfigChannel+0x92c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a46      	ldr	r2, [pc, #280]	@ (800465c <HAL_ADC_ConfigChannel+0xa40>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d101      	bne.n	800454c <HAL_ADC_ConfigChannel+0x930>
 8004548:	4a47      	ldr	r2, [pc, #284]	@ (8004668 <HAL_ADC_ConfigChannel+0xa4c>)
 800454a:	e000      	b.n	800454e <HAL_ADC_ConfigChannel+0x932>
 800454c:	4a41      	ldr	r2, [pc, #260]	@ (8004654 <HAL_ADC_ConfigChannel+0xa38>)
 800454e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004552:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f7fe fb4a 	bl	8002bf2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800455e:	4b43      	ldr	r3, [pc, #268]	@ (800466c <HAL_ADC_ConfigChannel+0xa50>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	4a42      	ldr	r2, [pc, #264]	@ (8004670 <HAL_ADC_ConfigChannel+0xa54>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	3301      	adds	r3, #1
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004572:	e002      	b.n	800457a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3b01      	subs	r3, #1
 8004578:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f9      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004580:	e05e      	b.n	8004640 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a3b      	ldr	r2, [pc, #236]	@ (8004674 <HAL_ADC_ConfigChannel+0xa58>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d120      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x9b2>
 800458c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d11a      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a30      	ldr	r2, [pc, #192]	@ (8004660 <HAL_ADC_ConfigChannel+0xa44>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d14e      	bne.n	8004640 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004658 <HAL_ADC_ConfigChannel+0xa3c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0x99a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2a      	ldr	r2, [pc, #168]	@ (800465c <HAL_ADC_ConfigChannel+0xa40>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x99e>
 80045b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004668 <HAL_ADC_ConfigChannel+0xa4c>)
 80045b8:	e000      	b.n	80045bc <HAL_ADC_ConfigChannel+0x9a0>
 80045ba:	4a26      	ldr	r2, [pc, #152]	@ (8004654 <HAL_ADC_ConfigChannel+0xa38>)
 80045bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f7fe fb13 	bl	8002bf2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045cc:	e038      	b.n	8004640 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a29      	ldr	r2, [pc, #164]	@ (8004678 <HAL_ADC_ConfigChannel+0xa5c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d133      	bne.n	8004640 <HAL_ADC_ConfigChannel+0xa24>
 80045d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d12d      	bne.n	8004640 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004660 <HAL_ADC_ConfigChannel+0xa44>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d128      	bne.n	8004640 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a19      	ldr	r2, [pc, #100]	@ (8004658 <HAL_ADC_ConfigChannel+0xa3c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_ADC_ConfigChannel+0x9e6>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a17      	ldr	r2, [pc, #92]	@ (800465c <HAL_ADC_ConfigChannel+0xa40>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x9ea>
 8004602:	4a19      	ldr	r2, [pc, #100]	@ (8004668 <HAL_ADC_ConfigChannel+0xa4c>)
 8004604:	e000      	b.n	8004608 <HAL_ADC_ConfigChannel+0x9ec>
 8004606:	4a13      	ldr	r2, [pc, #76]	@ (8004654 <HAL_ADC_ConfigChannel+0xa38>)
 8004608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800460c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f7fe faed 	bl	8002bf2 <LL_ADC_SetCommonPathInternalCh>
 8004618:	e012      	b.n	8004640 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461e:	f043 0220 	orr.w	r2, r3, #32
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800462c:	e008      	b.n	8004640 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004648:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800464c:	4618      	mov	r0, r3
 800464e:	37e4      	adds	r7, #228	@ 0xe4
 8004650:	46bd      	mov	sp, r7
 8004652:	bd90      	pop	{r4, r7, pc}
 8004654:	58026300 	.word	0x58026300
 8004658:	40022000 	.word	0x40022000
 800465c:	40022100 	.word	0x40022100
 8004660:	58026000 	.word	0x58026000
 8004664:	c7520000 	.word	0xc7520000
 8004668:	40022300 	.word	0x40022300
 800466c:	2400000c 	.word	0x2400000c
 8004670:	053e2d63 	.word	0x053e2d63
 8004674:	c3210000 	.word	0xc3210000
 8004678:	cb840000 	.word	0xcb840000

0800467c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7fe fd3d 	bl	8003108 <LL_ADC_IsEnabled>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d16e      	bne.n	8004772 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	4b38      	ldr	r3, [pc, #224]	@ (800477c <ADC_Enable+0x100>)
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a6:	f043 0210 	orr.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e05a      	b.n	8004774 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe fd0c 	bl	80030e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046c8:	f7fe fa50 	bl	8002b6c <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004780 <ADC_Enable+0x104>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <ADC_Enable+0x66>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a29      	ldr	r2, [pc, #164]	@ (8004784 <ADC_Enable+0x108>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <ADC_Enable+0x6a>
 80046e2:	4b29      	ldr	r3, [pc, #164]	@ (8004788 <ADC_Enable+0x10c>)
 80046e4:	e000      	b.n	80046e8 <ADC_Enable+0x6c>
 80046e6:	4b29      	ldr	r3, [pc, #164]	@ (800478c <ADC_Enable+0x110>)
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fc8f 	bl	800300c <LL_ADC_GetMultimode>
 80046ee:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a23      	ldr	r2, [pc, #140]	@ (8004784 <ADC_Enable+0x108>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d002      	beq.n	8004700 <ADC_Enable+0x84>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	e000      	b.n	8004702 <ADC_Enable+0x86>
 8004700:	4b1f      	ldr	r3, [pc, #124]	@ (8004780 <ADC_Enable+0x104>)
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	4293      	cmp	r3, r2
 8004708:	d02c      	beq.n	8004764 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d130      	bne.n	8004772 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004710:	e028      	b.n	8004764 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fcf6 	bl	8003108 <LL_ADC_IsEnabled>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fcda 	bl	80030e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800472c:	f7fe fa1e 	bl	8002b6c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d914      	bls.n	8004764 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d00d      	beq.n	8004764 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474c:	f043 0210 	orr.w	r2, r3, #16
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004758:	f043 0201 	orr.w	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e007      	b.n	8004774 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b01      	cmp	r3, #1
 8004770:	d1cf      	bne.n	8004712 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	8000003f 	.word	0x8000003f
 8004780:	40022000 	.word	0x40022000
 8004784:	40022100 	.word	0x40022100
 8004788:	40022300 	.word	0x40022300
 800478c:	58026300 	.word	0x58026300

08004790 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d14b      	bne.n	8004842 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d021      	beq.n	8004808 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fe fb25 	bl	8002e18 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d032      	beq.n	800483a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d12b      	bne.n	800483a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d11f      	bne.n	800483a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fe:	f043 0201 	orr.w	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	661a      	str	r2, [r3, #96]	@ 0x60
 8004806:	e018      	b.n	800483a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d111      	bne.n	800483a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d105      	bne.n	800483a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004832:	f043 0201 	orr.w	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7fc fea4 	bl	8001588 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004840:	e00e      	b.n	8004860 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff f9da 	bl	8003c08 <HAL_ADC_ErrorCallback>
}
 8004854:	e004      	b.n	8004860 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff f9b2 	bl	8003be0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004896:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048a2:	f043 0204 	orr.w	r2, r3, #4
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff f9ac 	bl	8003c08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a6c      	ldr	r2, [pc, #432]	@ (8004a78 <ADC_ConfigureBoostMode+0x1c0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <ADC_ConfigureBoostMode+0x1c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6b      	ldr	r2, [pc, #428]	@ (8004a7c <ADC_ConfigureBoostMode+0x1c4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d109      	bne.n	80048e8 <ADC_ConfigureBoostMode+0x30>
 80048d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a80 <ADC_ConfigureBoostMode+0x1c8>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e008      	b.n	80048fa <ADC_ConfigureBoostMode+0x42>
 80048e8:	4b66      	ldr	r3, [pc, #408]	@ (8004a84 <ADC_ConfigureBoostMode+0x1cc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01c      	beq.n	8004938 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80048fe:	f004 ff11 	bl	8009724 <HAL_RCC_GetHCLKFreq>
 8004902:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800490c:	d010      	beq.n	8004930 <ADC_ConfigureBoostMode+0x78>
 800490e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004912:	d873      	bhi.n	80049fc <ADC_ConfigureBoostMode+0x144>
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004918:	d002      	beq.n	8004920 <ADC_ConfigureBoostMode+0x68>
 800491a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800491e:	d16d      	bne.n	80049fc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	60fb      	str	r3, [r7, #12]
        break;
 800492e:	e068      	b.n	8004a02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	089b      	lsrs	r3, r3, #2
 8004934:	60fb      	str	r3, [r7, #12]
        break;
 8004936:	e064      	b.n	8004a02 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004938:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	f006 f8ec 	bl	800ab1c <HAL_RCCEx_GetPeriphCLKFreq>
 8004944:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800494e:	d051      	beq.n	80049f4 <ADC_ConfigureBoostMode+0x13c>
 8004950:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004954:	d854      	bhi.n	8004a00 <ADC_ConfigureBoostMode+0x148>
 8004956:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800495a:	d047      	beq.n	80049ec <ADC_ConfigureBoostMode+0x134>
 800495c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004960:	d84e      	bhi.n	8004a00 <ADC_ConfigureBoostMode+0x148>
 8004962:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004966:	d03d      	beq.n	80049e4 <ADC_ConfigureBoostMode+0x12c>
 8004968:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800496c:	d848      	bhi.n	8004a00 <ADC_ConfigureBoostMode+0x148>
 800496e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004972:	d033      	beq.n	80049dc <ADC_ConfigureBoostMode+0x124>
 8004974:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004978:	d842      	bhi.n	8004a00 <ADC_ConfigureBoostMode+0x148>
 800497a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800497e:	d029      	beq.n	80049d4 <ADC_ConfigureBoostMode+0x11c>
 8004980:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004984:	d83c      	bhi.n	8004a00 <ADC_ConfigureBoostMode+0x148>
 8004986:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800498a:	d01a      	beq.n	80049c2 <ADC_ConfigureBoostMode+0x10a>
 800498c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004990:	d836      	bhi.n	8004a00 <ADC_ConfigureBoostMode+0x148>
 8004992:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004996:	d014      	beq.n	80049c2 <ADC_ConfigureBoostMode+0x10a>
 8004998:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800499c:	d830      	bhi.n	8004a00 <ADC_ConfigureBoostMode+0x148>
 800499e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049a2:	d00e      	beq.n	80049c2 <ADC_ConfigureBoostMode+0x10a>
 80049a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049a8:	d82a      	bhi.n	8004a00 <ADC_ConfigureBoostMode+0x148>
 80049aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049ae:	d008      	beq.n	80049c2 <ADC_ConfigureBoostMode+0x10a>
 80049b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049b4:	d824      	bhi.n	8004a00 <ADC_ConfigureBoostMode+0x148>
 80049b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049ba:	d002      	beq.n	80049c2 <ADC_ConfigureBoostMode+0x10a>
 80049bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049c0:	d11e      	bne.n	8004a00 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	0c9b      	lsrs	r3, r3, #18
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	60fb      	str	r3, [r7, #12]
        break;
 80049d2:	e016      	b.n	8004a02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	60fb      	str	r3, [r7, #12]
        break;
 80049da:	e012      	b.n	8004a02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	60fb      	str	r3, [r7, #12]
        break;
 80049e2:	e00e      	b.n	8004a02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	60fb      	str	r3, [r7, #12]
        break;
 80049ea:	e00a      	b.n	8004a02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	09db      	lsrs	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
        break;
 80049f2:	e006      	b.n	8004a02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	60fb      	str	r3, [r7, #12]
        break;
 80049fa:	e002      	b.n	8004a02 <ADC_ConfigureBoostMode+0x14a>
        break;
 80049fc:	bf00      	nop
 80049fe:	e000      	b.n	8004a02 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a00:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a88 <ADC_ConfigureBoostMode+0x1d0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d808      	bhi.n	8004a22 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a1e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a20:	e025      	b.n	8004a6e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4a19      	ldr	r2, [pc, #100]	@ (8004a8c <ADC_ConfigureBoostMode+0x1d4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d80a      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a3c:	609a      	str	r2, [r3, #8]
}
 8004a3e:	e016      	b.n	8004a6e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a13      	ldr	r2, [pc, #76]	@ (8004a90 <ADC_ConfigureBoostMode+0x1d8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d80a      	bhi.n	8004a5e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a5a:	609a      	str	r2, [r3, #8]
}
 8004a5c:	e007      	b.n	8004a6e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40022000 	.word	0x40022000
 8004a7c:	40022100 	.word	0x40022100
 8004a80:	40022300 	.word	0x40022300
 8004a84:	58026300 	.word	0x58026300
 8004a88:	005f5e10 	.word	0x005f5e10
 8004a8c:	00bebc20 	.word	0x00bebc20
 8004a90:	017d7840 	.word	0x017d7840

08004a94 <LL_ADC_IsEnabled>:
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <LL_ADC_IsEnabled+0x18>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <LL_ADC_IsEnabled+0x1a>
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <LL_ADC_REG_IsConversionOngoing>:
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d101      	bne.n	8004ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b0a3      	sub	sp, #140	@ 0x8c
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0c1      	b.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a5e      	ldr	r2, [pc, #376]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d102      	bne.n	8004b82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e001      	b.n	8004b86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0a0      	b.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ff87 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 8004bac:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff80 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 8081 	bne.w	8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d17c      	bne.n	8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a48      	ldr	r2, [pc, #288]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a46      	ldr	r2, [pc, #280]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004bde:	4b46      	ldr	r3, [pc, #280]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004be0:	e000      	b.n	8004be4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004be2:	4b46      	ldr	r3, [pc, #280]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004be4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d039      	beq.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004bee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a3a      	ldr	r2, [pc, #232]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d004      	beq.n	8004c14 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a39      	ldr	r2, [pc, #228]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10e      	bne.n	8004c32 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c14:	4836      	ldr	r0, [pc, #216]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c16:	f7ff ff3d 	bl	8004a94 <LL_ADC_IsEnabled>
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	4835      	ldr	r0, [pc, #212]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c1e:	f7ff ff39 	bl	8004a94 <LL_ADC_IsEnabled>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4323      	orrs	r3, r4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bf0c      	ite	eq
 8004c2a:	2301      	moveq	r3, #1
 8004c2c:	2300      	movne	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	e008      	b.n	8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004c32:	4833      	ldr	r0, [pc, #204]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004c34:	f7ff ff2e 	bl	8004a94 <LL_ADC_IsEnabled>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d047      	beq.n	8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	6811      	ldr	r1, [r2, #0]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	6892      	ldr	r2, [r2, #8]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c5e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c60:	e03a      	b.n	8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004c62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c6c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10e      	bne.n	8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004c82:	481b      	ldr	r0, [pc, #108]	@ (8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c84:	f7ff ff06 	bl	8004a94 <LL_ADC_IsEnabled>
 8004c88:	4604      	mov	r4, r0
 8004c8a:	481a      	ldr	r0, [pc, #104]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c8c:	f7ff ff02 	bl	8004a94 <LL_ADC_IsEnabled>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4323      	orrs	r3, r4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e008      	b.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ca0:	4817      	ldr	r0, [pc, #92]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ca2:	f7ff fef7 	bl	8004a94 <LL_ADC_IsEnabled>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d010      	beq.n	8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004cc0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cc2:	e009      	b.n	8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004cd6:	e000      	b.n	8004cda <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ce2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	378c      	adds	r7, #140	@ 0x8c
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd90      	pop	{r4, r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40022100 	.word	0x40022100
 8004cf8:	40022300 	.word	0x40022300
 8004cfc:	58026300 	.word	0x58026300
 8004d00:	58026000 	.word	0x58026000
 8004d04:	fffff0e0 	.word	0xfffff0e0

08004d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d18:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <__NVIC_SetPriorityGrouping+0x40>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d24:	4013      	ands	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d30:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <__NVIC_SetPriorityGrouping+0x44>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d36:	4a04      	ldr	r2, [pc, #16]	@ (8004d48 <__NVIC_SetPriorityGrouping+0x40>)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	60d3      	str	r3, [r2, #12]
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	e000ed00 	.word	0xe000ed00
 8004d4c:	05fa0000 	.word	0x05fa0000

08004d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d54:	4b04      	ldr	r3, [pc, #16]	@ (8004d68 <__NVIC_GetPriorityGrouping+0x18>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	0a1b      	lsrs	r3, r3, #8
 8004d5a:	f003 0307 	and.w	r3, r3, #7
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000ed00 	.word	0xe000ed00

08004d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	db0b      	blt.n	8004d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	4907      	ldr	r1, [pc, #28]	@ (8004da4 <__NVIC_EnableIRQ+0x38>)
 8004d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	e000e100 	.word	0xe000e100

08004da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	6039      	str	r1, [r7, #0]
 8004db2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	db0a      	blt.n	8004dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	490c      	ldr	r1, [pc, #48]	@ (8004df4 <__NVIC_SetPriority+0x4c>)
 8004dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc6:	0112      	lsls	r2, r2, #4
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	440b      	add	r3, r1
 8004dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dd0:	e00a      	b.n	8004de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	4908      	ldr	r1, [pc, #32]	@ (8004df8 <__NVIC_SetPriority+0x50>)
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	3b04      	subs	r3, #4
 8004de0:	0112      	lsls	r2, r2, #4
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	440b      	add	r3, r1
 8004de6:	761a      	strb	r2, [r3, #24]
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	e000e100 	.word	0xe000e100
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	@ 0x24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f1c3 0307 	rsb	r3, r3, #7
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	bf28      	it	cs
 8004e1a:	2304      	movcs	r3, #4
 8004e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3304      	adds	r3, #4
 8004e22:	2b06      	cmp	r3, #6
 8004e24:	d902      	bls.n	8004e2c <NVIC_EncodePriority+0x30>
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3b03      	subs	r3, #3
 8004e2a:	e000      	b.n	8004e2e <NVIC_EncodePriority+0x32>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e30:	f04f 32ff 	mov.w	r2, #4294967295
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43da      	mvns	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	401a      	ands	r2, r3
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e44:	f04f 31ff 	mov.w	r1, #4294967295
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4e:	43d9      	mvns	r1, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e54:	4313      	orrs	r3, r2
         );
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3724      	adds	r7, #36	@ 0x24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e74:	d301      	bcc.n	8004e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e76:	2301      	movs	r3, #1
 8004e78:	e00f      	b.n	8004e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea4 <SysTick_Config+0x40>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e82:	210f      	movs	r1, #15
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	f7ff ff8e 	bl	8004da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <SysTick_Config+0x40>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e92:	4b04      	ldr	r3, [pc, #16]	@ (8004ea4 <SysTick_Config+0x40>)
 8004e94:	2207      	movs	r2, #7
 8004e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	e000e010 	.word	0xe000e010

08004ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff ff29 	bl	8004d08 <__NVIC_SetPriorityGrouping>
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
 8004eca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ecc:	f7ff ff40 	bl	8004d50 <__NVIC_GetPriorityGrouping>
 8004ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	6978      	ldr	r0, [r7, #20]
 8004ed8:	f7ff ff90 	bl	8004dfc <NVIC_EncodePriority>
 8004edc:	4602      	mov	r2, r0
 8004ede:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff ff5f 	bl	8004da8 <__NVIC_SetPriority>
}
 8004eea:	bf00      	nop
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	4603      	mov	r3, r0
 8004efa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff ff33 	bl	8004d6c <__NVIC_EnableIRQ>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff ffa4 	bl	8004e64 <SysTick_Config>
 8004f1c:	4603      	mov	r3, r0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004f30:	f7fd fe1c 	bl	8002b6c <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e312      	b.n	8005566 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a66      	ldr	r2, [pc, #408]	@ (80050e0 <HAL_DMA_Init+0x1b8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d04a      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a65      	ldr	r2, [pc, #404]	@ (80050e4 <HAL_DMA_Init+0x1bc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d045      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a63      	ldr	r2, [pc, #396]	@ (80050e8 <HAL_DMA_Init+0x1c0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d040      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a62      	ldr	r2, [pc, #392]	@ (80050ec <HAL_DMA_Init+0x1c4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d03b      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a60      	ldr	r2, [pc, #384]	@ (80050f0 <HAL_DMA_Init+0x1c8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d036      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a5f      	ldr	r2, [pc, #380]	@ (80050f4 <HAL_DMA_Init+0x1cc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d031      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a5d      	ldr	r2, [pc, #372]	@ (80050f8 <HAL_DMA_Init+0x1d0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d02c      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a5c      	ldr	r2, [pc, #368]	@ (80050fc <HAL_DMA_Init+0x1d4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d027      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a5a      	ldr	r2, [pc, #360]	@ (8005100 <HAL_DMA_Init+0x1d8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d022      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a59      	ldr	r2, [pc, #356]	@ (8005104 <HAL_DMA_Init+0x1dc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d01d      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a57      	ldr	r2, [pc, #348]	@ (8005108 <HAL_DMA_Init+0x1e0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d018      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a56      	ldr	r2, [pc, #344]	@ (800510c <HAL_DMA_Init+0x1e4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a54      	ldr	r2, [pc, #336]	@ (8005110 <HAL_DMA_Init+0x1e8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00e      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a53      	ldr	r2, [pc, #332]	@ (8005114 <HAL_DMA_Init+0x1ec>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d009      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a51      	ldr	r2, [pc, #324]	@ (8005118 <HAL_DMA_Init+0x1f0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <HAL_DMA_Init+0xb8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a50      	ldr	r2, [pc, #320]	@ (800511c <HAL_DMA_Init+0x1f4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d101      	bne.n	8004fe4 <HAL_DMA_Init+0xbc>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_DMA_Init+0xbe>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 813c 	beq.w	8005264 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a37      	ldr	r2, [pc, #220]	@ (80050e0 <HAL_DMA_Init+0x1b8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d04a      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a36      	ldr	r2, [pc, #216]	@ (80050e4 <HAL_DMA_Init+0x1bc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d045      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a34      	ldr	r2, [pc, #208]	@ (80050e8 <HAL_DMA_Init+0x1c0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d040      	beq.n	800509c <HAL_DMA_Init+0x174>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a33      	ldr	r2, [pc, #204]	@ (80050ec <HAL_DMA_Init+0x1c4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d03b      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a31      	ldr	r2, [pc, #196]	@ (80050f0 <HAL_DMA_Init+0x1c8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d036      	beq.n	800509c <HAL_DMA_Init+0x174>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a30      	ldr	r2, [pc, #192]	@ (80050f4 <HAL_DMA_Init+0x1cc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d031      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2e      	ldr	r2, [pc, #184]	@ (80050f8 <HAL_DMA_Init+0x1d0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02c      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a2d      	ldr	r2, [pc, #180]	@ (80050fc <HAL_DMA_Init+0x1d4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d027      	beq.n	800509c <HAL_DMA_Init+0x174>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a2b      	ldr	r2, [pc, #172]	@ (8005100 <HAL_DMA_Init+0x1d8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2a      	ldr	r2, [pc, #168]	@ (8005104 <HAL_DMA_Init+0x1dc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d01d      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a28      	ldr	r2, [pc, #160]	@ (8005108 <HAL_DMA_Init+0x1e0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_DMA_Init+0x174>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a27      	ldr	r2, [pc, #156]	@ (800510c <HAL_DMA_Init+0x1e4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a25      	ldr	r2, [pc, #148]	@ (8005110 <HAL_DMA_Init+0x1e8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_DMA_Init+0x174>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a24      	ldr	r2, [pc, #144]	@ (8005114 <HAL_DMA_Init+0x1ec>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a22      	ldr	r2, [pc, #136]	@ (8005118 <HAL_DMA_Init+0x1f0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_DMA_Init+0x174>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a21      	ldr	r2, [pc, #132]	@ (800511c <HAL_DMA_Init+0x1f4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d108      	bne.n	80050ae <HAL_DMA_Init+0x186>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e007      	b.n	80050be <HAL_DMA_Init+0x196>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0201 	bic.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050be:	e02f      	b.n	8005120 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050c0:	f7fd fd54 	bl	8002b6c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b05      	cmp	r3, #5
 80050cc:	d928      	bls.n	8005120 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2203      	movs	r2, #3
 80050d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e242      	b.n	8005566 <HAL_DMA_Init+0x63e>
 80050e0:	40020010 	.word	0x40020010
 80050e4:	40020028 	.word	0x40020028
 80050e8:	40020040 	.word	0x40020040
 80050ec:	40020058 	.word	0x40020058
 80050f0:	40020070 	.word	0x40020070
 80050f4:	40020088 	.word	0x40020088
 80050f8:	400200a0 	.word	0x400200a0
 80050fc:	400200b8 	.word	0x400200b8
 8005100:	40020410 	.word	0x40020410
 8005104:	40020428 	.word	0x40020428
 8005108:	40020440 	.word	0x40020440
 800510c:	40020458 	.word	0x40020458
 8005110:	40020470 	.word	0x40020470
 8005114:	40020488 	.word	0x40020488
 8005118:	400204a0 	.word	0x400204a0
 800511c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1c8      	bne.n	80050c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4b83      	ldr	r3, [pc, #524]	@ (8005348 <HAL_DMA_Init+0x420>)
 800513a:	4013      	ands	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005146:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005152:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800515e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	2b04      	cmp	r3, #4
 8005172:	d107      	bne.n	8005184 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517c:	4313      	orrs	r3, r2
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b28      	cmp	r3, #40	@ 0x28
 800518a:	d903      	bls.n	8005194 <HAL_DMA_Init+0x26c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b2e      	cmp	r3, #46	@ 0x2e
 8005192:	d91f      	bls.n	80051d4 <HAL_DMA_Init+0x2ac>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b3e      	cmp	r3, #62	@ 0x3e
 800519a:	d903      	bls.n	80051a4 <HAL_DMA_Init+0x27c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b42      	cmp	r3, #66	@ 0x42
 80051a2:	d917      	bls.n	80051d4 <HAL_DMA_Init+0x2ac>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b46      	cmp	r3, #70	@ 0x46
 80051aa:	d903      	bls.n	80051b4 <HAL_DMA_Init+0x28c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b48      	cmp	r3, #72	@ 0x48
 80051b2:	d90f      	bls.n	80051d4 <HAL_DMA_Init+0x2ac>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80051ba:	d903      	bls.n	80051c4 <HAL_DMA_Init+0x29c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b52      	cmp	r3, #82	@ 0x52
 80051c2:	d907      	bls.n	80051d4 <HAL_DMA_Init+0x2ac>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b73      	cmp	r3, #115	@ 0x73
 80051ca:	d905      	bls.n	80051d8 <HAL_DMA_Init+0x2b0>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b77      	cmp	r3, #119	@ 0x77
 80051d2:	d801      	bhi.n	80051d8 <HAL_DMA_Init+0x2b0>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_DMA_Init+0x2b2>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0307 	bic.w	r3, r3, #7
 80051fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	2b04      	cmp	r3, #4
 800520e:	d117      	bne.n	8005240 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f001 fdca 	bl	8006dbc <DMA_CheckFifoParam>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2240      	movs	r2, #64	@ 0x40
 8005232:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e192      	b.n	8005566 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f001 fd05 	bl	8006c58 <DMA_CalcBaseAndBitshift>
 800524e:	4603      	mov	r3, r0
 8005250:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	223f      	movs	r2, #63	@ 0x3f
 800525c:	409a      	lsls	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	609a      	str	r2, [r3, #8]
 8005262:	e0c8      	b.n	80053f6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a38      	ldr	r2, [pc, #224]	@ (800534c <HAL_DMA_Init+0x424>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d022      	beq.n	80052b4 <HAL_DMA_Init+0x38c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a37      	ldr	r2, [pc, #220]	@ (8005350 <HAL_DMA_Init+0x428>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d01d      	beq.n	80052b4 <HAL_DMA_Init+0x38c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a35      	ldr	r2, [pc, #212]	@ (8005354 <HAL_DMA_Init+0x42c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <HAL_DMA_Init+0x38c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a34      	ldr	r2, [pc, #208]	@ (8005358 <HAL_DMA_Init+0x430>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <HAL_DMA_Init+0x38c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a32      	ldr	r2, [pc, #200]	@ (800535c <HAL_DMA_Init+0x434>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_DMA_Init+0x38c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a31      	ldr	r2, [pc, #196]	@ (8005360 <HAL_DMA_Init+0x438>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_DMA_Init+0x38c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005364 <HAL_DMA_Init+0x43c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_DMA_Init+0x38c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005368 <HAL_DMA_Init+0x440>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d101      	bne.n	80052b8 <HAL_DMA_Init+0x390>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_DMA_Init+0x392>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 8092 	beq.w	80053e4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a21      	ldr	r2, [pc, #132]	@ (800534c <HAL_DMA_Init+0x424>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d021      	beq.n	800530e <HAL_DMA_Init+0x3e6>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a20      	ldr	r2, [pc, #128]	@ (8005350 <HAL_DMA_Init+0x428>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d01c      	beq.n	800530e <HAL_DMA_Init+0x3e6>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005354 <HAL_DMA_Init+0x42c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d017      	beq.n	800530e <HAL_DMA_Init+0x3e6>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005358 <HAL_DMA_Init+0x430>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d012      	beq.n	800530e <HAL_DMA_Init+0x3e6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1b      	ldr	r2, [pc, #108]	@ (800535c <HAL_DMA_Init+0x434>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00d      	beq.n	800530e <HAL_DMA_Init+0x3e6>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005360 <HAL_DMA_Init+0x438>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d008      	beq.n	800530e <HAL_DMA_Init+0x3e6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <HAL_DMA_Init+0x43c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <HAL_DMA_Init+0x3e6>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <HAL_DMA_Init+0x440>)
 800530c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4b10      	ldr	r3, [pc, #64]	@ (800536c <HAL_DMA_Init+0x444>)
 800532a:	4013      	ands	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b40      	cmp	r3, #64	@ 0x40
 8005334:	d01c      	beq.n	8005370 <HAL_DMA_Init+0x448>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b80      	cmp	r3, #128	@ 0x80
 800533c:	d102      	bne.n	8005344 <HAL_DMA_Init+0x41c>
 800533e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005342:	e016      	b.n	8005372 <HAL_DMA_Init+0x44a>
 8005344:	2300      	movs	r3, #0
 8005346:	e014      	b.n	8005372 <HAL_DMA_Init+0x44a>
 8005348:	fe10803f 	.word	0xfe10803f
 800534c:	58025408 	.word	0x58025408
 8005350:	5802541c 	.word	0x5802541c
 8005354:	58025430 	.word	0x58025430
 8005358:	58025444 	.word	0x58025444
 800535c:	58025458 	.word	0x58025458
 8005360:	5802546c 	.word	0x5802546c
 8005364:	58025480 	.word	0x58025480
 8005368:	58025494 	.word	0x58025494
 800536c:	fffe000f 	.word	0xfffe000f
 8005370:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68d2      	ldr	r2, [r2, #12]
 8005376:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005380:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005388:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005390:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005398:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80053a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005570 <HAL_DMA_Init+0x648>)
 80053b8:	4413      	add	r3, r2
 80053ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005574 <HAL_DMA_Init+0x64c>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	009a      	lsls	r2, r3, #2
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f001 fc45 	bl	8006c58 <DMA_CalcBaseAndBitshift>
 80053ce:	4603      	mov	r3, r0
 80053d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	2201      	movs	r2, #1
 80053dc:	409a      	lsls	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	e008      	b.n	80053f6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2240      	movs	r2, #64	@ 0x40
 80053e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2203      	movs	r2, #3
 80053ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e0b7      	b.n	8005566 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a5f      	ldr	r2, [pc, #380]	@ (8005578 <HAL_DMA_Init+0x650>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d072      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a5d      	ldr	r2, [pc, #372]	@ (800557c <HAL_DMA_Init+0x654>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d06d      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a5c      	ldr	r2, [pc, #368]	@ (8005580 <HAL_DMA_Init+0x658>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d068      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a5a      	ldr	r2, [pc, #360]	@ (8005584 <HAL_DMA_Init+0x65c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d063      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a59      	ldr	r2, [pc, #356]	@ (8005588 <HAL_DMA_Init+0x660>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d05e      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a57      	ldr	r2, [pc, #348]	@ (800558c <HAL_DMA_Init+0x664>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d059      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a56      	ldr	r2, [pc, #344]	@ (8005590 <HAL_DMA_Init+0x668>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d054      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a54      	ldr	r2, [pc, #336]	@ (8005594 <HAL_DMA_Init+0x66c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d04f      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a53      	ldr	r2, [pc, #332]	@ (8005598 <HAL_DMA_Init+0x670>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d04a      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a51      	ldr	r2, [pc, #324]	@ (800559c <HAL_DMA_Init+0x674>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d045      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a50      	ldr	r2, [pc, #320]	@ (80055a0 <HAL_DMA_Init+0x678>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d040      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a4e      	ldr	r2, [pc, #312]	@ (80055a4 <HAL_DMA_Init+0x67c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d03b      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a4d      	ldr	r2, [pc, #308]	@ (80055a8 <HAL_DMA_Init+0x680>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d036      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a4b      	ldr	r2, [pc, #300]	@ (80055ac <HAL_DMA_Init+0x684>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d031      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a4a      	ldr	r2, [pc, #296]	@ (80055b0 <HAL_DMA_Init+0x688>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d02c      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a48      	ldr	r2, [pc, #288]	@ (80055b4 <HAL_DMA_Init+0x68c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d027      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a47      	ldr	r2, [pc, #284]	@ (80055b8 <HAL_DMA_Init+0x690>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d022      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a45      	ldr	r2, [pc, #276]	@ (80055bc <HAL_DMA_Init+0x694>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01d      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a44      	ldr	r2, [pc, #272]	@ (80055c0 <HAL_DMA_Init+0x698>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d018      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a42      	ldr	r2, [pc, #264]	@ (80055c4 <HAL_DMA_Init+0x69c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a41      	ldr	r2, [pc, #260]	@ (80055c8 <HAL_DMA_Init+0x6a0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3f      	ldr	r2, [pc, #252]	@ (80055cc <HAL_DMA_Init+0x6a4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	@ (80055d0 <HAL_DMA_Init+0x6a8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_DMA_Init+0x5be>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a3c      	ldr	r2, [pc, #240]	@ (80055d4 <HAL_DMA_Init+0x6ac>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d101      	bne.n	80054ea <HAL_DMA_Init+0x5c2>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <HAL_DMA_Init+0x5c4>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d032      	beq.n	8005556 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 fcdf 	bl	8006eb4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b80      	cmp	r3, #128	@ 0x80
 80054fc:	d102      	bne.n	8005504 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005518:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d010      	beq.n	8005544 <HAL_DMA_Init+0x61c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b08      	cmp	r3, #8
 8005528:	d80c      	bhi.n	8005544 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 fd5c 	bl	8006fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005540:	605a      	str	r2, [r3, #4]
 8005542:	e008      	b.n	8005556 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	a7fdabf8 	.word	0xa7fdabf8
 8005574:	cccccccd 	.word	0xcccccccd
 8005578:	40020010 	.word	0x40020010
 800557c:	40020028 	.word	0x40020028
 8005580:	40020040 	.word	0x40020040
 8005584:	40020058 	.word	0x40020058
 8005588:	40020070 	.word	0x40020070
 800558c:	40020088 	.word	0x40020088
 8005590:	400200a0 	.word	0x400200a0
 8005594:	400200b8 	.word	0x400200b8
 8005598:	40020410 	.word	0x40020410
 800559c:	40020428 	.word	0x40020428
 80055a0:	40020440 	.word	0x40020440
 80055a4:	40020458 	.word	0x40020458
 80055a8:	40020470 	.word	0x40020470
 80055ac:	40020488 	.word	0x40020488
 80055b0:	400204a0 	.word	0x400204a0
 80055b4:	400204b8 	.word	0x400204b8
 80055b8:	58025408 	.word	0x58025408
 80055bc:	5802541c 	.word	0x5802541c
 80055c0:	58025430 	.word	0x58025430
 80055c4:	58025444 	.word	0x58025444
 80055c8:	58025458 	.word	0x58025458
 80055cc:	5802546c 	.word	0x5802546c
 80055d0:	58025480 	.word	0x58025480
 80055d4:	58025494 	.word	0x58025494

080055d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e226      	b.n	8005a42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_DMA_Start_IT+0x2a>
 80055fe:	2302      	movs	r3, #2
 8005600:	e21f      	b.n	8005a42 <HAL_DMA_Start_IT+0x46a>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	f040 820a 	bne.w	8005a2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a68      	ldr	r2, [pc, #416]	@ (80057cc <HAL_DMA_Start_IT+0x1f4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d04a      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a66      	ldr	r2, [pc, #408]	@ (80057d0 <HAL_DMA_Start_IT+0x1f8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d045      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a65      	ldr	r2, [pc, #404]	@ (80057d4 <HAL_DMA_Start_IT+0x1fc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d040      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a63      	ldr	r2, [pc, #396]	@ (80057d8 <HAL_DMA_Start_IT+0x200>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d03b      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a62      	ldr	r2, [pc, #392]	@ (80057dc <HAL_DMA_Start_IT+0x204>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d036      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a60      	ldr	r2, [pc, #384]	@ (80057e0 <HAL_DMA_Start_IT+0x208>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d031      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a5f      	ldr	r2, [pc, #380]	@ (80057e4 <HAL_DMA_Start_IT+0x20c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d02c      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a5d      	ldr	r2, [pc, #372]	@ (80057e8 <HAL_DMA_Start_IT+0x210>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d027      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a5c      	ldr	r2, [pc, #368]	@ (80057ec <HAL_DMA_Start_IT+0x214>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a5a      	ldr	r2, [pc, #360]	@ (80057f0 <HAL_DMA_Start_IT+0x218>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01d      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a59      	ldr	r2, [pc, #356]	@ (80057f4 <HAL_DMA_Start_IT+0x21c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a57      	ldr	r2, [pc, #348]	@ (80057f8 <HAL_DMA_Start_IT+0x220>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a56      	ldr	r2, [pc, #344]	@ (80057fc <HAL_DMA_Start_IT+0x224>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a54      	ldr	r2, [pc, #336]	@ (8005800 <HAL_DMA_Start_IT+0x228>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a53      	ldr	r2, [pc, #332]	@ (8005804 <HAL_DMA_Start_IT+0x22c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_DMA_Start_IT+0xee>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a51      	ldr	r2, [pc, #324]	@ (8005808 <HAL_DMA_Start_IT+0x230>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <HAL_DMA_Start_IT+0x100>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e007      	b.n	80056e8 <HAL_DMA_Start_IT+0x110>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f001 f906 	bl	8006900 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a34      	ldr	r2, [pc, #208]	@ (80057cc <HAL_DMA_Start_IT+0x1f4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d04a      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a33      	ldr	r2, [pc, #204]	@ (80057d0 <HAL_DMA_Start_IT+0x1f8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d045      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a31      	ldr	r2, [pc, #196]	@ (80057d4 <HAL_DMA_Start_IT+0x1fc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d040      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a30      	ldr	r2, [pc, #192]	@ (80057d8 <HAL_DMA_Start_IT+0x200>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d03b      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a2e      	ldr	r2, [pc, #184]	@ (80057dc <HAL_DMA_Start_IT+0x204>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d036      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a2d      	ldr	r2, [pc, #180]	@ (80057e0 <HAL_DMA_Start_IT+0x208>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d031      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2b      	ldr	r2, [pc, #172]	@ (80057e4 <HAL_DMA_Start_IT+0x20c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d02c      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2a      	ldr	r2, [pc, #168]	@ (80057e8 <HAL_DMA_Start_IT+0x210>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d027      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a28      	ldr	r2, [pc, #160]	@ (80057ec <HAL_DMA_Start_IT+0x214>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d022      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a27      	ldr	r2, [pc, #156]	@ (80057f0 <HAL_DMA_Start_IT+0x218>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d01d      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a25      	ldr	r2, [pc, #148]	@ (80057f4 <HAL_DMA_Start_IT+0x21c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d018      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a24      	ldr	r2, [pc, #144]	@ (80057f8 <HAL_DMA_Start_IT+0x220>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d013      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a22      	ldr	r2, [pc, #136]	@ (80057fc <HAL_DMA_Start_IT+0x224>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00e      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a21      	ldr	r2, [pc, #132]	@ (8005800 <HAL_DMA_Start_IT+0x228>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d009      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1f      	ldr	r2, [pc, #124]	@ (8005804 <HAL_DMA_Start_IT+0x22c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_DMA_Start_IT+0x1bc>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1e      	ldr	r2, [pc, #120]	@ (8005808 <HAL_DMA_Start_IT+0x230>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d101      	bne.n	8005798 <HAL_DMA_Start_IT+0x1c0>
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <HAL_DMA_Start_IT+0x1c2>
 8005798:	2300      	movs	r3, #0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d036      	beq.n	800580c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f023 021e 	bic.w	r2, r3, #30
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0216 	orr.w	r2, r2, #22
 80057b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d03e      	beq.n	8005838 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0208 	orr.w	r2, r2, #8
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e035      	b.n	8005838 <HAL_DMA_Start_IT+0x260>
 80057cc:	40020010 	.word	0x40020010
 80057d0:	40020028 	.word	0x40020028
 80057d4:	40020040 	.word	0x40020040
 80057d8:	40020058 	.word	0x40020058
 80057dc:	40020070 	.word	0x40020070
 80057e0:	40020088 	.word	0x40020088
 80057e4:	400200a0 	.word	0x400200a0
 80057e8:	400200b8 	.word	0x400200b8
 80057ec:	40020410 	.word	0x40020410
 80057f0:	40020428 	.word	0x40020428
 80057f4:	40020440 	.word	0x40020440
 80057f8:	40020458 	.word	0x40020458
 80057fc:	40020470 	.word	0x40020470
 8005800:	40020488 	.word	0x40020488
 8005804:	400204a0 	.word	0x400204a0
 8005808:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f023 020e 	bic.w	r2, r3, #14
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 020a 	orr.w	r2, r2, #10
 800581e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0204 	orr.w	r2, r2, #4
 8005836:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a83      	ldr	r2, [pc, #524]	@ (8005a4c <HAL_DMA_Start_IT+0x474>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d072      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a82      	ldr	r2, [pc, #520]	@ (8005a50 <HAL_DMA_Start_IT+0x478>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d06d      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a80      	ldr	r2, [pc, #512]	@ (8005a54 <HAL_DMA_Start_IT+0x47c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d068      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a7f      	ldr	r2, [pc, #508]	@ (8005a58 <HAL_DMA_Start_IT+0x480>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d063      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a7d      	ldr	r2, [pc, #500]	@ (8005a5c <HAL_DMA_Start_IT+0x484>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d05e      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a60 <HAL_DMA_Start_IT+0x488>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d059      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a7a      	ldr	r2, [pc, #488]	@ (8005a64 <HAL_DMA_Start_IT+0x48c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d054      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a79      	ldr	r2, [pc, #484]	@ (8005a68 <HAL_DMA_Start_IT+0x490>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d04f      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a77      	ldr	r2, [pc, #476]	@ (8005a6c <HAL_DMA_Start_IT+0x494>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d04a      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a76      	ldr	r2, [pc, #472]	@ (8005a70 <HAL_DMA_Start_IT+0x498>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d045      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a74      	ldr	r2, [pc, #464]	@ (8005a74 <HAL_DMA_Start_IT+0x49c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d040      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a73      	ldr	r2, [pc, #460]	@ (8005a78 <HAL_DMA_Start_IT+0x4a0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d03b      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a71      	ldr	r2, [pc, #452]	@ (8005a7c <HAL_DMA_Start_IT+0x4a4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d036      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a70      	ldr	r2, [pc, #448]	@ (8005a80 <HAL_DMA_Start_IT+0x4a8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d031      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a6e      	ldr	r2, [pc, #440]	@ (8005a84 <HAL_DMA_Start_IT+0x4ac>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d02c      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a6d      	ldr	r2, [pc, #436]	@ (8005a88 <HAL_DMA_Start_IT+0x4b0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d027      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a6b      	ldr	r2, [pc, #428]	@ (8005a8c <HAL_DMA_Start_IT+0x4b4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d022      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a6a      	ldr	r2, [pc, #424]	@ (8005a90 <HAL_DMA_Start_IT+0x4b8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d01d      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a68      	ldr	r2, [pc, #416]	@ (8005a94 <HAL_DMA_Start_IT+0x4bc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d018      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a67      	ldr	r2, [pc, #412]	@ (8005a98 <HAL_DMA_Start_IT+0x4c0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d013      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a65      	ldr	r2, [pc, #404]	@ (8005a9c <HAL_DMA_Start_IT+0x4c4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00e      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a64      	ldr	r2, [pc, #400]	@ (8005aa0 <HAL_DMA_Start_IT+0x4c8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d009      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a62      	ldr	r2, [pc, #392]	@ (8005aa4 <HAL_DMA_Start_IT+0x4cc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <HAL_DMA_Start_IT+0x350>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a61      	ldr	r2, [pc, #388]	@ (8005aa8 <HAL_DMA_Start_IT+0x4d0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d101      	bne.n	800592c <HAL_DMA_Start_IT+0x354>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_DMA_Start_IT+0x356>
 800592c:	2300      	movs	r3, #0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01a      	beq.n	8005968 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800594e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005962:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005966:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a37      	ldr	r2, [pc, #220]	@ (8005a4c <HAL_DMA_Start_IT+0x474>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d04a      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a36      	ldr	r2, [pc, #216]	@ (8005a50 <HAL_DMA_Start_IT+0x478>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d045      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a34      	ldr	r2, [pc, #208]	@ (8005a54 <HAL_DMA_Start_IT+0x47c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d040      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a33      	ldr	r2, [pc, #204]	@ (8005a58 <HAL_DMA_Start_IT+0x480>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d03b      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a31      	ldr	r2, [pc, #196]	@ (8005a5c <HAL_DMA_Start_IT+0x484>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d036      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a30      	ldr	r2, [pc, #192]	@ (8005a60 <HAL_DMA_Start_IT+0x488>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d031      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005a64 <HAL_DMA_Start_IT+0x48c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d02c      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005a68 <HAL_DMA_Start_IT+0x490>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d027      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a2b      	ldr	r2, [pc, #172]	@ (8005a6c <HAL_DMA_Start_IT+0x494>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d022      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005a70 <HAL_DMA_Start_IT+0x498>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d01d      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a28      	ldr	r2, [pc, #160]	@ (8005a74 <HAL_DMA_Start_IT+0x49c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a27      	ldr	r2, [pc, #156]	@ (8005a78 <HAL_DMA_Start_IT+0x4a0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a25      	ldr	r2, [pc, #148]	@ (8005a7c <HAL_DMA_Start_IT+0x4a4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a24      	ldr	r2, [pc, #144]	@ (8005a80 <HAL_DMA_Start_IT+0x4a8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a22      	ldr	r2, [pc, #136]	@ (8005a84 <HAL_DMA_Start_IT+0x4ac>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_DMA_Start_IT+0x430>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a21      	ldr	r2, [pc, #132]	@ (8005a88 <HAL_DMA_Start_IT+0x4b0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d108      	bne.n	8005a1a <HAL_DMA_Start_IT+0x442>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	e012      	b.n	8005a40 <HAL_DMA_Start_IT+0x468>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e009      	b.n	8005a40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40020010 	.word	0x40020010
 8005a50:	40020028 	.word	0x40020028
 8005a54:	40020040 	.word	0x40020040
 8005a58:	40020058 	.word	0x40020058
 8005a5c:	40020070 	.word	0x40020070
 8005a60:	40020088 	.word	0x40020088
 8005a64:	400200a0 	.word	0x400200a0
 8005a68:	400200b8 	.word	0x400200b8
 8005a6c:	40020410 	.word	0x40020410
 8005a70:	40020428 	.word	0x40020428
 8005a74:	40020440 	.word	0x40020440
 8005a78:	40020458 	.word	0x40020458
 8005a7c:	40020470 	.word	0x40020470
 8005a80:	40020488 	.word	0x40020488
 8005a84:	400204a0 	.word	0x400204a0
 8005a88:	400204b8 	.word	0x400204b8
 8005a8c:	58025408 	.word	0x58025408
 8005a90:	5802541c 	.word	0x5802541c
 8005a94:	58025430 	.word	0x58025430
 8005a98:	58025444 	.word	0x58025444
 8005a9c:	58025458 	.word	0x58025458
 8005aa0:	5802546c 	.word	0x5802546c
 8005aa4:	58025480 	.word	0x58025480
 8005aa8:	58025494 	.word	0x58025494

08005aac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	@ 0x28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ab8:	4b67      	ldr	r3, [pc, #412]	@ (8005c58 <HAL_DMA_IRQHandler+0x1ac>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a67      	ldr	r2, [pc, #412]	@ (8005c5c <HAL_DMA_IRQHandler+0x1b0>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	0a9b      	lsrs	r3, r3, #10
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a5f      	ldr	r2, [pc, #380]	@ (8005c60 <HAL_DMA_IRQHandler+0x1b4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d04a      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a5d      	ldr	r2, [pc, #372]	@ (8005c64 <HAL_DMA_IRQHandler+0x1b8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d045      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a5c      	ldr	r2, [pc, #368]	@ (8005c68 <HAL_DMA_IRQHandler+0x1bc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d040      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a5a      	ldr	r2, [pc, #360]	@ (8005c6c <HAL_DMA_IRQHandler+0x1c0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d03b      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a59      	ldr	r2, [pc, #356]	@ (8005c70 <HAL_DMA_IRQHandler+0x1c4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d036      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a57      	ldr	r2, [pc, #348]	@ (8005c74 <HAL_DMA_IRQHandler+0x1c8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d031      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a56      	ldr	r2, [pc, #344]	@ (8005c78 <HAL_DMA_IRQHandler+0x1cc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d02c      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a54      	ldr	r2, [pc, #336]	@ (8005c7c <HAL_DMA_IRQHandler+0x1d0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d027      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a53      	ldr	r2, [pc, #332]	@ (8005c80 <HAL_DMA_IRQHandler+0x1d4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d022      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a51      	ldr	r2, [pc, #324]	@ (8005c84 <HAL_DMA_IRQHandler+0x1d8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01d      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a50      	ldr	r2, [pc, #320]	@ (8005c88 <HAL_DMA_IRQHandler+0x1dc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d018      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a4e      	ldr	r2, [pc, #312]	@ (8005c8c <HAL_DMA_IRQHandler+0x1e0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8005c90 <HAL_DMA_IRQHandler+0x1e4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a4b      	ldr	r2, [pc, #300]	@ (8005c94 <HAL_DMA_IRQHandler+0x1e8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8005c98 <HAL_DMA_IRQHandler+0x1ec>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xd2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a48      	ldr	r2, [pc, #288]	@ (8005c9c <HAL_DMA_IRQHandler+0x1f0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d101      	bne.n	8005b82 <HAL_DMA_IRQHandler+0xd6>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <HAL_DMA_IRQHandler+0xd8>
 8005b82:	2300      	movs	r3, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 842b 	beq.w	80063e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2208      	movs	r2, #8
 8005b94:	409a      	lsls	r2, r3
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80a2 	beq.w	8005ce4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8005c60 <HAL_DMA_IRQHandler+0x1b4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d04a      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2d      	ldr	r2, [pc, #180]	@ (8005c64 <HAL_DMA_IRQHandler+0x1b8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d045      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005c68 <HAL_DMA_IRQHandler+0x1bc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d040      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c6c <HAL_DMA_IRQHandler+0x1c0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d03b      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a28      	ldr	r2, [pc, #160]	@ (8005c70 <HAL_DMA_IRQHandler+0x1c4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d036      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a27      	ldr	r2, [pc, #156]	@ (8005c74 <HAL_DMA_IRQHandler+0x1c8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d031      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a25      	ldr	r2, [pc, #148]	@ (8005c78 <HAL_DMA_IRQHandler+0x1cc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d02c      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a24      	ldr	r2, [pc, #144]	@ (8005c7c <HAL_DMA_IRQHandler+0x1d0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d027      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a22      	ldr	r2, [pc, #136]	@ (8005c80 <HAL_DMA_IRQHandler+0x1d4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d022      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a21      	ldr	r2, [pc, #132]	@ (8005c84 <HAL_DMA_IRQHandler+0x1d8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d01d      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1f      	ldr	r2, [pc, #124]	@ (8005c88 <HAL_DMA_IRQHandler+0x1dc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d018      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1e      	ldr	r2, [pc, #120]	@ (8005c8c <HAL_DMA_IRQHandler+0x1e0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005c90 <HAL_DMA_IRQHandler+0x1e4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00e      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1b      	ldr	r2, [pc, #108]	@ (8005c94 <HAL_DMA_IRQHandler+0x1e8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a19      	ldr	r2, [pc, #100]	@ (8005c98 <HAL_DMA_IRQHandler+0x1ec>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x194>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a18      	ldr	r2, [pc, #96]	@ (8005c9c <HAL_DMA_IRQHandler+0x1f0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d12f      	bne.n	8005ca0 <HAL_DMA_IRQHandler+0x1f4>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bf14      	ite	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	2300      	moveq	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	e02e      	b.n	8005cb4 <HAL_DMA_IRQHandler+0x208>
 8005c56:	bf00      	nop
 8005c58:	2400000c 	.word	0x2400000c
 8005c5c:	1b4e81b5 	.word	0x1b4e81b5
 8005c60:	40020010 	.word	0x40020010
 8005c64:	40020028 	.word	0x40020028
 8005c68:	40020040 	.word	0x40020040
 8005c6c:	40020058 	.word	0x40020058
 8005c70:	40020070 	.word	0x40020070
 8005c74:	40020088 	.word	0x40020088
 8005c78:	400200a0 	.word	0x400200a0
 8005c7c:	400200b8 	.word	0x400200b8
 8005c80:	40020410 	.word	0x40020410
 8005c84:	40020428 	.word	0x40020428
 8005c88:	40020440 	.word	0x40020440
 8005c8c:	40020458 	.word	0x40020458
 8005c90:	40020470 	.word	0x40020470
 8005c94:	40020488 	.word	0x40020488
 8005c98:	400204a0 	.word	0x400204a0
 8005c9c:	400204b8 	.word	0x400204b8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bf14      	ite	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	2300      	moveq	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d015      	beq.n	8005ce4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0204 	bic.w	r2, r2, #4
 8005cc6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ccc:	f003 031f 	and.w	r3, r3, #31
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cdc:	f043 0201 	orr.w	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d06e      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a69      	ldr	r2, [pc, #420]	@ (8005ea4 <HAL_DMA_IRQHandler+0x3f8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d04a      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a67      	ldr	r2, [pc, #412]	@ (8005ea8 <HAL_DMA_IRQHandler+0x3fc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d045      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a66      	ldr	r2, [pc, #408]	@ (8005eac <HAL_DMA_IRQHandler+0x400>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d040      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a64      	ldr	r2, [pc, #400]	@ (8005eb0 <HAL_DMA_IRQHandler+0x404>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d03b      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a63      	ldr	r2, [pc, #396]	@ (8005eb4 <HAL_DMA_IRQHandler+0x408>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d036      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a61      	ldr	r2, [pc, #388]	@ (8005eb8 <HAL_DMA_IRQHandler+0x40c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d031      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a60      	ldr	r2, [pc, #384]	@ (8005ebc <HAL_DMA_IRQHandler+0x410>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d02c      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec0 <HAL_DMA_IRQHandler+0x414>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d027      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a5d      	ldr	r2, [pc, #372]	@ (8005ec4 <HAL_DMA_IRQHandler+0x418>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d022      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5b      	ldr	r2, [pc, #364]	@ (8005ec8 <HAL_DMA_IRQHandler+0x41c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01d      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5a      	ldr	r2, [pc, #360]	@ (8005ecc <HAL_DMA_IRQHandler+0x420>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d018      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a58      	ldr	r2, [pc, #352]	@ (8005ed0 <HAL_DMA_IRQHandler+0x424>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a57      	ldr	r2, [pc, #348]	@ (8005ed4 <HAL_DMA_IRQHandler+0x428>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00e      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a55      	ldr	r2, [pc, #340]	@ (8005ed8 <HAL_DMA_IRQHandler+0x42c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d009      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a54      	ldr	r2, [pc, #336]	@ (8005edc <HAL_DMA_IRQHandler+0x430>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d004      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x2ee>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a52      	ldr	r2, [pc, #328]	@ (8005ee0 <HAL_DMA_IRQHandler+0x434>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d10a      	bne.n	8005db0 <HAL_DMA_IRQHandler+0x304>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bf14      	ite	ne
 8005da8:	2301      	movne	r3, #1
 8005daa:	2300      	moveq	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e003      	b.n	8005db8 <HAL_DMA_IRQHandler+0x30c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00d      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd0:	f043 0202 	orr.w	r2, r3, #2
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	2204      	movs	r2, #4
 8005de2:	409a      	lsls	r2, r3
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 808f 	beq.w	8005f0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a2c      	ldr	r2, [pc, #176]	@ (8005ea4 <HAL_DMA_IRQHandler+0x3f8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d04a      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8005ea8 <HAL_DMA_IRQHandler+0x3fc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d045      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a29      	ldr	r2, [pc, #164]	@ (8005eac <HAL_DMA_IRQHandler+0x400>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d040      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a27      	ldr	r2, [pc, #156]	@ (8005eb0 <HAL_DMA_IRQHandler+0x404>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d03b      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a26      	ldr	r2, [pc, #152]	@ (8005eb4 <HAL_DMA_IRQHandler+0x408>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d036      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a24      	ldr	r2, [pc, #144]	@ (8005eb8 <HAL_DMA_IRQHandler+0x40c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d031      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a23      	ldr	r2, [pc, #140]	@ (8005ebc <HAL_DMA_IRQHandler+0x410>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d02c      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a21      	ldr	r2, [pc, #132]	@ (8005ec0 <HAL_DMA_IRQHandler+0x414>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d027      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a20      	ldr	r2, [pc, #128]	@ (8005ec4 <HAL_DMA_IRQHandler+0x418>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d022      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ec8 <HAL_DMA_IRQHandler+0x41c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01d      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1d      	ldr	r2, [pc, #116]	@ (8005ecc <HAL_DMA_IRQHandler+0x420>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d018      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed0 <HAL_DMA_IRQHandler+0x424>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed4 <HAL_DMA_IRQHandler+0x428>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a18      	ldr	r2, [pc, #96]	@ (8005ed8 <HAL_DMA_IRQHandler+0x42c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a17      	ldr	r2, [pc, #92]	@ (8005edc <HAL_DMA_IRQHandler+0x430>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x3e2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a15      	ldr	r2, [pc, #84]	@ (8005ee0 <HAL_DMA_IRQHandler+0x434>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d12a      	bne.n	8005ee4 <HAL_DMA_IRQHandler+0x438>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bf14      	ite	ne
 8005e9c:	2301      	movne	r3, #1
 8005e9e:	2300      	moveq	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	e023      	b.n	8005eec <HAL_DMA_IRQHandler+0x440>
 8005ea4:	40020010 	.word	0x40020010
 8005ea8:	40020028 	.word	0x40020028
 8005eac:	40020040 	.word	0x40020040
 8005eb0:	40020058 	.word	0x40020058
 8005eb4:	40020070 	.word	0x40020070
 8005eb8:	40020088 	.word	0x40020088
 8005ebc:	400200a0 	.word	0x400200a0
 8005ec0:	400200b8 	.word	0x400200b8
 8005ec4:	40020410 	.word	0x40020410
 8005ec8:	40020428 	.word	0x40020428
 8005ecc:	40020440 	.word	0x40020440
 8005ed0:	40020458 	.word	0x40020458
 8005ed4:	40020470 	.word	0x40020470
 8005ed8:	40020488 	.word	0x40020488
 8005edc:	400204a0 	.word	0x400204a0
 8005ee0:	400204b8 	.word	0x400204b8
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00d      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2204      	movs	r2, #4
 8005efa:	409a      	lsls	r2, r3
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f04:	f043 0204 	orr.w	r2, r3, #4
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	2210      	movs	r2, #16
 8005f16:	409a      	lsls	r2, r3
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80a6 	beq.w	800606e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a85      	ldr	r2, [pc, #532]	@ (800613c <HAL_DMA_IRQHandler+0x690>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d04a      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a83      	ldr	r2, [pc, #524]	@ (8006140 <HAL_DMA_IRQHandler+0x694>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d045      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a82      	ldr	r2, [pc, #520]	@ (8006144 <HAL_DMA_IRQHandler+0x698>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d040      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a80      	ldr	r2, [pc, #512]	@ (8006148 <HAL_DMA_IRQHandler+0x69c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d03b      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a7f      	ldr	r2, [pc, #508]	@ (800614c <HAL_DMA_IRQHandler+0x6a0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d036      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a7d      	ldr	r2, [pc, #500]	@ (8006150 <HAL_DMA_IRQHandler+0x6a4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d031      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a7c      	ldr	r2, [pc, #496]	@ (8006154 <HAL_DMA_IRQHandler+0x6a8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d02c      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a7a      	ldr	r2, [pc, #488]	@ (8006158 <HAL_DMA_IRQHandler+0x6ac>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d027      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a79      	ldr	r2, [pc, #484]	@ (800615c <HAL_DMA_IRQHandler+0x6b0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d022      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a77      	ldr	r2, [pc, #476]	@ (8006160 <HAL_DMA_IRQHandler+0x6b4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d01d      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a76      	ldr	r2, [pc, #472]	@ (8006164 <HAL_DMA_IRQHandler+0x6b8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d018      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a74      	ldr	r2, [pc, #464]	@ (8006168 <HAL_DMA_IRQHandler+0x6bc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a73      	ldr	r2, [pc, #460]	@ (800616c <HAL_DMA_IRQHandler+0x6c0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00e      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a71      	ldr	r2, [pc, #452]	@ (8006170 <HAL_DMA_IRQHandler+0x6c4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d009      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a70      	ldr	r2, [pc, #448]	@ (8006174 <HAL_DMA_IRQHandler+0x6c8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d004      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x516>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a6e      	ldr	r2, [pc, #440]	@ (8006178 <HAL_DMA_IRQHandler+0x6cc>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d10a      	bne.n	8005fd8 <HAL_DMA_IRQHandler+0x52c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	e009      	b.n	8005fec <HAL_DMA_IRQHandler+0x540>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bf14      	ite	ne
 8005fe6:	2301      	movne	r3, #1
 8005fe8:	2300      	moveq	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d03e      	beq.n	800606e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	409a      	lsls	r2, r3
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d018      	beq.n	8006040 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d108      	bne.n	800602e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d024      	beq.n	800606e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
 800602c:	e01f      	b.n	800606e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01b      	beq.n	800606e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
 800603e:	e016      	b.n	800606e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d107      	bne.n	800605e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0208 	bic.w	r2, r2, #8
 800605c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	2220      	movs	r2, #32
 8006078:	409a      	lsls	r2, r3
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8110 	beq.w	80062a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a2c      	ldr	r2, [pc, #176]	@ (800613c <HAL_DMA_IRQHandler+0x690>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d04a      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2b      	ldr	r2, [pc, #172]	@ (8006140 <HAL_DMA_IRQHandler+0x694>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d045      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a29      	ldr	r2, [pc, #164]	@ (8006144 <HAL_DMA_IRQHandler+0x698>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d040      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a28      	ldr	r2, [pc, #160]	@ (8006148 <HAL_DMA_IRQHandler+0x69c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d03b      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a26      	ldr	r2, [pc, #152]	@ (800614c <HAL_DMA_IRQHandler+0x6a0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d036      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a25      	ldr	r2, [pc, #148]	@ (8006150 <HAL_DMA_IRQHandler+0x6a4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d031      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a23      	ldr	r2, [pc, #140]	@ (8006154 <HAL_DMA_IRQHandler+0x6a8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d02c      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a22      	ldr	r2, [pc, #136]	@ (8006158 <HAL_DMA_IRQHandler+0x6ac>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d027      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a20      	ldr	r2, [pc, #128]	@ (800615c <HAL_DMA_IRQHandler+0x6b0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d022      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006160 <HAL_DMA_IRQHandler+0x6b4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d01d      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006164 <HAL_DMA_IRQHandler+0x6b8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d018      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006168 <HAL_DMA_IRQHandler+0x6bc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d013      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1a      	ldr	r2, [pc, #104]	@ (800616c <HAL_DMA_IRQHandler+0x6c0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00e      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <HAL_DMA_IRQHandler+0x6c4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d009      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a17      	ldr	r2, [pc, #92]	@ (8006174 <HAL_DMA_IRQHandler+0x6c8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d004      	beq.n	8006124 <HAL_DMA_IRQHandler+0x678>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a16      	ldr	r2, [pc, #88]	@ (8006178 <HAL_DMA_IRQHandler+0x6cc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d12b      	bne.n	800617c <HAL_DMA_IRQHandler+0x6d0>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	2b00      	cmp	r3, #0
 8006130:	bf14      	ite	ne
 8006132:	2301      	movne	r3, #1
 8006134:	2300      	moveq	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	e02a      	b.n	8006190 <HAL_DMA_IRQHandler+0x6e4>
 800613a:	bf00      	nop
 800613c:	40020010 	.word	0x40020010
 8006140:	40020028 	.word	0x40020028
 8006144:	40020040 	.word	0x40020040
 8006148:	40020058 	.word	0x40020058
 800614c:	40020070 	.word	0x40020070
 8006150:	40020088 	.word	0x40020088
 8006154:	400200a0 	.word	0x400200a0
 8006158:	400200b8 	.word	0x400200b8
 800615c:	40020410 	.word	0x40020410
 8006160:	40020428 	.word	0x40020428
 8006164:	40020440 	.word	0x40020440
 8006168:	40020458 	.word	0x40020458
 800616c:	40020470 	.word	0x40020470
 8006170:	40020488 	.word	0x40020488
 8006174:	400204a0 	.word	0x400204a0
 8006178:	400204b8 	.word	0x400204b8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	bf14      	ite	ne
 800618a:	2301      	movne	r3, #1
 800618c:	2300      	moveq	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8087 	beq.w	80062a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2220      	movs	r2, #32
 80061a0:	409a      	lsls	r2, r3
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d139      	bne.n	8006226 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0216 	bic.w	r2, r2, #22
 80061c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d103      	bne.n	80061e2 <HAL_DMA_IRQHandler+0x736>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0208 	bic.w	r2, r2, #8
 80061f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	223f      	movs	r2, #63	@ 0x3f
 80061fc:	409a      	lsls	r2, r3
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 834a 	beq.w	80068b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
          }
          return;
 8006224:	e344      	b.n	80068b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d018      	beq.n	8006266 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d108      	bne.n	8006254 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	2b00      	cmp	r3, #0
 8006248:	d02c      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
 8006252:	e027      	b.n	80062a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d023      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
 8006264:	e01e      	b.n	80062a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10f      	bne.n	8006294 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0210 	bic.w	r2, r2, #16
 8006282:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8306 	beq.w	80068ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8088 	beq.w	80063cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2204      	movs	r2, #4
 80062c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a7a      	ldr	r2, [pc, #488]	@ (80064b4 <HAL_DMA_IRQHandler+0xa08>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d04a      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a79      	ldr	r2, [pc, #484]	@ (80064b8 <HAL_DMA_IRQHandler+0xa0c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d045      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a77      	ldr	r2, [pc, #476]	@ (80064bc <HAL_DMA_IRQHandler+0xa10>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d040      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a76      	ldr	r2, [pc, #472]	@ (80064c0 <HAL_DMA_IRQHandler+0xa14>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d03b      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a74      	ldr	r2, [pc, #464]	@ (80064c4 <HAL_DMA_IRQHandler+0xa18>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d036      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a73      	ldr	r2, [pc, #460]	@ (80064c8 <HAL_DMA_IRQHandler+0xa1c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d031      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a71      	ldr	r2, [pc, #452]	@ (80064cc <HAL_DMA_IRQHandler+0xa20>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d02c      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a70      	ldr	r2, [pc, #448]	@ (80064d0 <HAL_DMA_IRQHandler+0xa24>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d027      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a6e      	ldr	r2, [pc, #440]	@ (80064d4 <HAL_DMA_IRQHandler+0xa28>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d022      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a6d      	ldr	r2, [pc, #436]	@ (80064d8 <HAL_DMA_IRQHandler+0xa2c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d01d      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a6b      	ldr	r2, [pc, #428]	@ (80064dc <HAL_DMA_IRQHandler+0xa30>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d018      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a6a      	ldr	r2, [pc, #424]	@ (80064e0 <HAL_DMA_IRQHandler+0xa34>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a68      	ldr	r2, [pc, #416]	@ (80064e4 <HAL_DMA_IRQHandler+0xa38>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00e      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a67      	ldr	r2, [pc, #412]	@ (80064e8 <HAL_DMA_IRQHandler+0xa3c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d009      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a65      	ldr	r2, [pc, #404]	@ (80064ec <HAL_DMA_IRQHandler+0xa40>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_DMA_IRQHandler+0x8b8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a64      	ldr	r2, [pc, #400]	@ (80064f0 <HAL_DMA_IRQHandler+0xa44>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d108      	bne.n	8006376 <HAL_DMA_IRQHandler+0x8ca>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0201 	bic.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	e007      	b.n	8006386 <HAL_DMA_IRQHandler+0x8da>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0201 	bic.w	r2, r2, #1
 8006384:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3301      	adds	r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800638e:	429a      	cmp	r2, r3
 8006390:	d307      	bcc.n	80063a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f2      	bne.n	8006386 <HAL_DMA_IRQHandler+0x8da>
 80063a0:	e000      	b.n	80063a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80063a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2203      	movs	r2, #3
 80063b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80063ba:	e003      	b.n	80063c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8272 	beq.w	80068ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
 80063de:	e26c      	b.n	80068ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a43      	ldr	r2, [pc, #268]	@ (80064f4 <HAL_DMA_IRQHandler+0xa48>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d022      	beq.n	8006430 <HAL_DMA_IRQHandler+0x984>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a42      	ldr	r2, [pc, #264]	@ (80064f8 <HAL_DMA_IRQHandler+0xa4c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d01d      	beq.n	8006430 <HAL_DMA_IRQHandler+0x984>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a40      	ldr	r2, [pc, #256]	@ (80064fc <HAL_DMA_IRQHandler+0xa50>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d018      	beq.n	8006430 <HAL_DMA_IRQHandler+0x984>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a3f      	ldr	r2, [pc, #252]	@ (8006500 <HAL_DMA_IRQHandler+0xa54>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d013      	beq.n	8006430 <HAL_DMA_IRQHandler+0x984>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a3d      	ldr	r2, [pc, #244]	@ (8006504 <HAL_DMA_IRQHandler+0xa58>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00e      	beq.n	8006430 <HAL_DMA_IRQHandler+0x984>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a3c      	ldr	r2, [pc, #240]	@ (8006508 <HAL_DMA_IRQHandler+0xa5c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d009      	beq.n	8006430 <HAL_DMA_IRQHandler+0x984>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a3a      	ldr	r2, [pc, #232]	@ (800650c <HAL_DMA_IRQHandler+0xa60>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d004      	beq.n	8006430 <HAL_DMA_IRQHandler+0x984>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a39      	ldr	r2, [pc, #228]	@ (8006510 <HAL_DMA_IRQHandler+0xa64>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d101      	bne.n	8006434 <HAL_DMA_IRQHandler+0x988>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_DMA_IRQHandler+0x98a>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 823f 	beq.w	80068ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006448:	f003 031f 	and.w	r3, r3, #31
 800644c:	2204      	movs	r2, #4
 800644e:	409a      	lsls	r2, r3
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4013      	ands	r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 80cd 	beq.w	80065f4 <HAL_DMA_IRQHandler+0xb48>
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 80c7 	beq.w	80065f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	2204      	movs	r2, #4
 8006470:	409a      	lsls	r2, r3
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d049      	beq.n	8006514 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8210 	beq.w	80068b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800649c:	e20a      	b.n	80068b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8206 	beq.w	80068b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064b0:	e200      	b.n	80068b4 <HAL_DMA_IRQHandler+0xe08>
 80064b2:	bf00      	nop
 80064b4:	40020010 	.word	0x40020010
 80064b8:	40020028 	.word	0x40020028
 80064bc:	40020040 	.word	0x40020040
 80064c0:	40020058 	.word	0x40020058
 80064c4:	40020070 	.word	0x40020070
 80064c8:	40020088 	.word	0x40020088
 80064cc:	400200a0 	.word	0x400200a0
 80064d0:	400200b8 	.word	0x400200b8
 80064d4:	40020410 	.word	0x40020410
 80064d8:	40020428 	.word	0x40020428
 80064dc:	40020440 	.word	0x40020440
 80064e0:	40020458 	.word	0x40020458
 80064e4:	40020470 	.word	0x40020470
 80064e8:	40020488 	.word	0x40020488
 80064ec:	400204a0 	.word	0x400204a0
 80064f0:	400204b8 	.word	0x400204b8
 80064f4:	58025408 	.word	0x58025408
 80064f8:	5802541c 	.word	0x5802541c
 80064fc:	58025430 	.word	0x58025430
 8006500:	58025444 	.word	0x58025444
 8006504:	58025458 	.word	0x58025458
 8006508:	5802546c 	.word	0x5802546c
 800650c:	58025480 	.word	0x58025480
 8006510:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d160      	bne.n	80065e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a7f      	ldr	r2, [pc, #508]	@ (8006720 <HAL_DMA_IRQHandler+0xc74>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d04a      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a7d      	ldr	r2, [pc, #500]	@ (8006724 <HAL_DMA_IRQHandler+0xc78>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d045      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a7c      	ldr	r2, [pc, #496]	@ (8006728 <HAL_DMA_IRQHandler+0xc7c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d040      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a7a      	ldr	r2, [pc, #488]	@ (800672c <HAL_DMA_IRQHandler+0xc80>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d03b      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a79      	ldr	r2, [pc, #484]	@ (8006730 <HAL_DMA_IRQHandler+0xc84>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d036      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a77      	ldr	r2, [pc, #476]	@ (8006734 <HAL_DMA_IRQHandler+0xc88>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d031      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a76      	ldr	r2, [pc, #472]	@ (8006738 <HAL_DMA_IRQHandler+0xc8c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d02c      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a74      	ldr	r2, [pc, #464]	@ (800673c <HAL_DMA_IRQHandler+0xc90>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d027      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a73      	ldr	r2, [pc, #460]	@ (8006740 <HAL_DMA_IRQHandler+0xc94>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d022      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a71      	ldr	r2, [pc, #452]	@ (8006744 <HAL_DMA_IRQHandler+0xc98>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01d      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a70      	ldr	r2, [pc, #448]	@ (8006748 <HAL_DMA_IRQHandler+0xc9c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d018      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a6e      	ldr	r2, [pc, #440]	@ (800674c <HAL_DMA_IRQHandler+0xca0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a6d      	ldr	r2, [pc, #436]	@ (8006750 <HAL_DMA_IRQHandler+0xca4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00e      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a6b      	ldr	r2, [pc, #428]	@ (8006754 <HAL_DMA_IRQHandler+0xca8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a6a      	ldr	r2, [pc, #424]	@ (8006758 <HAL_DMA_IRQHandler+0xcac>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <HAL_DMA_IRQHandler+0xb12>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a68      	ldr	r2, [pc, #416]	@ (800675c <HAL_DMA_IRQHandler+0xcb0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d108      	bne.n	80065d0 <HAL_DMA_IRQHandler+0xb24>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0208 	bic.w	r2, r2, #8
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e007      	b.n	80065e0 <HAL_DMA_IRQHandler+0xb34>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0204 	bic.w	r2, r2, #4
 80065de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8165 	beq.w	80068b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065f2:	e15f      	b.n	80068b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	2202      	movs	r2, #2
 80065fe:	409a      	lsls	r2, r3
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	4013      	ands	r3, r2
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80c5 	beq.w	8006794 <HAL_DMA_IRQHandler+0xce8>
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80bf 	beq.w	8006794 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	2202      	movs	r2, #2
 8006620:	409a      	lsls	r2, r3
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d018      	beq.n	8006662 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 813a 	beq.w	80068b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800664c:	e134      	b.n	80068b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 8130 	beq.w	80068b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006660:	e12a      	b.n	80068b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 8089 	bne.w	8006780 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a2b      	ldr	r2, [pc, #172]	@ (8006720 <HAL_DMA_IRQHandler+0xc74>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d04a      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a29      	ldr	r2, [pc, #164]	@ (8006724 <HAL_DMA_IRQHandler+0xc78>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d045      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a28      	ldr	r2, [pc, #160]	@ (8006728 <HAL_DMA_IRQHandler+0xc7c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d040      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a26      	ldr	r2, [pc, #152]	@ (800672c <HAL_DMA_IRQHandler+0xc80>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d03b      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a25      	ldr	r2, [pc, #148]	@ (8006730 <HAL_DMA_IRQHandler+0xc84>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d036      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a23      	ldr	r2, [pc, #140]	@ (8006734 <HAL_DMA_IRQHandler+0xc88>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d031      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a22      	ldr	r2, [pc, #136]	@ (8006738 <HAL_DMA_IRQHandler+0xc8c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d02c      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a20      	ldr	r2, [pc, #128]	@ (800673c <HAL_DMA_IRQHandler+0xc90>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d027      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006740 <HAL_DMA_IRQHandler+0xc94>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d022      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006744 <HAL_DMA_IRQHandler+0xc98>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d01d      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006748 <HAL_DMA_IRQHandler+0xc9c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d018      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1a      	ldr	r2, [pc, #104]	@ (800674c <HAL_DMA_IRQHandler+0xca0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a19      	ldr	r2, [pc, #100]	@ (8006750 <HAL_DMA_IRQHandler+0xca4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00e      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a17      	ldr	r2, [pc, #92]	@ (8006754 <HAL_DMA_IRQHandler+0xca8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a16      	ldr	r2, [pc, #88]	@ (8006758 <HAL_DMA_IRQHandler+0xcac>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_DMA_IRQHandler+0xc62>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a14      	ldr	r2, [pc, #80]	@ (800675c <HAL_DMA_IRQHandler+0xcb0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d128      	bne.n	8006760 <HAL_DMA_IRQHandler+0xcb4>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0214 	bic.w	r2, r2, #20
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e027      	b.n	8006770 <HAL_DMA_IRQHandler+0xcc4>
 8006720:	40020010 	.word	0x40020010
 8006724:	40020028 	.word	0x40020028
 8006728:	40020040 	.word	0x40020040
 800672c:	40020058 	.word	0x40020058
 8006730:	40020070 	.word	0x40020070
 8006734:	40020088 	.word	0x40020088
 8006738:	400200a0 	.word	0x400200a0
 800673c:	400200b8 	.word	0x400200b8
 8006740:	40020410 	.word	0x40020410
 8006744:	40020428 	.word	0x40020428
 8006748:	40020440 	.word	0x40020440
 800674c:	40020458 	.word	0x40020458
 8006750:	40020470 	.word	0x40020470
 8006754:	40020488 	.word	0x40020488
 8006758:	400204a0 	.word	0x400204a0
 800675c:	400204b8 	.word	0x400204b8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 020a 	bic.w	r2, r2, #10
 800676e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8097 	beq.w	80068b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006792:	e091      	b.n	80068b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	2208      	movs	r2, #8
 800679e:	409a      	lsls	r2, r3
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	4013      	ands	r3, r2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8088 	beq.w	80068ba <HAL_DMA_IRQHandler+0xe0e>
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8082 	beq.w	80068ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a41      	ldr	r2, [pc, #260]	@ (80068c0 <HAL_DMA_IRQHandler+0xe14>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d04a      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a3f      	ldr	r2, [pc, #252]	@ (80068c4 <HAL_DMA_IRQHandler+0xe18>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d045      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a3e      	ldr	r2, [pc, #248]	@ (80068c8 <HAL_DMA_IRQHandler+0xe1c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d040      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a3c      	ldr	r2, [pc, #240]	@ (80068cc <HAL_DMA_IRQHandler+0xe20>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d03b      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a3b      	ldr	r2, [pc, #236]	@ (80068d0 <HAL_DMA_IRQHandler+0xe24>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d036      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a39      	ldr	r2, [pc, #228]	@ (80068d4 <HAL_DMA_IRQHandler+0xe28>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d031      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a38      	ldr	r2, [pc, #224]	@ (80068d8 <HAL_DMA_IRQHandler+0xe2c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d02c      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a36      	ldr	r2, [pc, #216]	@ (80068dc <HAL_DMA_IRQHandler+0xe30>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d027      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a35      	ldr	r2, [pc, #212]	@ (80068e0 <HAL_DMA_IRQHandler+0xe34>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d022      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a33      	ldr	r2, [pc, #204]	@ (80068e4 <HAL_DMA_IRQHandler+0xe38>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01d      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a32      	ldr	r2, [pc, #200]	@ (80068e8 <HAL_DMA_IRQHandler+0xe3c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d018      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a30      	ldr	r2, [pc, #192]	@ (80068ec <HAL_DMA_IRQHandler+0xe40>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2f      	ldr	r2, [pc, #188]	@ (80068f0 <HAL_DMA_IRQHandler+0xe44>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00e      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a2d      	ldr	r2, [pc, #180]	@ (80068f4 <HAL_DMA_IRQHandler+0xe48>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d009      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a2c      	ldr	r2, [pc, #176]	@ (80068f8 <HAL_DMA_IRQHandler+0xe4c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_DMA_IRQHandler+0xdaa>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a2a      	ldr	r2, [pc, #168]	@ (80068fc <HAL_DMA_IRQHandler+0xe50>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d108      	bne.n	8006868 <HAL_DMA_IRQHandler+0xdbc>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 021c 	bic.w	r2, r2, #28
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	e007      	b.n	8006878 <HAL_DMA_IRQHandler+0xdcc>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 020e 	bic.w	r2, r2, #14
 8006876:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2201      	movs	r2, #1
 8006882:	409a      	lsls	r2, r3
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
 80068ae:	e004      	b.n	80068ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80068b0:	bf00      	nop
 80068b2:	e002      	b.n	80068ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068b4:	bf00      	nop
 80068b6:	e000      	b.n	80068ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80068ba:	3728      	adds	r7, #40	@ 0x28
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40020010 	.word	0x40020010
 80068c4:	40020028 	.word	0x40020028
 80068c8:	40020040 	.word	0x40020040
 80068cc:	40020058 	.word	0x40020058
 80068d0:	40020070 	.word	0x40020070
 80068d4:	40020088 	.word	0x40020088
 80068d8:	400200a0 	.word	0x400200a0
 80068dc:	400200b8 	.word	0x400200b8
 80068e0:	40020410 	.word	0x40020410
 80068e4:	40020428 	.word	0x40020428
 80068e8:	40020440 	.word	0x40020440
 80068ec:	40020458 	.word	0x40020458
 80068f0:	40020470 	.word	0x40020470
 80068f4:	40020488 	.word	0x40020488
 80068f8:	400204a0 	.word	0x400204a0
 80068fc:	400204b8 	.word	0x400204b8

08006900 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006912:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006918:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a7f      	ldr	r2, [pc, #508]	@ (8006b1c <DMA_SetConfig+0x21c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d072      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a7d      	ldr	r2, [pc, #500]	@ (8006b20 <DMA_SetConfig+0x220>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d06d      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a7c      	ldr	r2, [pc, #496]	@ (8006b24 <DMA_SetConfig+0x224>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d068      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a7a      	ldr	r2, [pc, #488]	@ (8006b28 <DMA_SetConfig+0x228>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d063      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a79      	ldr	r2, [pc, #484]	@ (8006b2c <DMA_SetConfig+0x22c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d05e      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a77      	ldr	r2, [pc, #476]	@ (8006b30 <DMA_SetConfig+0x230>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d059      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a76      	ldr	r2, [pc, #472]	@ (8006b34 <DMA_SetConfig+0x234>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d054      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a74      	ldr	r2, [pc, #464]	@ (8006b38 <DMA_SetConfig+0x238>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d04f      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a73      	ldr	r2, [pc, #460]	@ (8006b3c <DMA_SetConfig+0x23c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d04a      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a71      	ldr	r2, [pc, #452]	@ (8006b40 <DMA_SetConfig+0x240>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d045      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a70      	ldr	r2, [pc, #448]	@ (8006b44 <DMA_SetConfig+0x244>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d040      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a6e      	ldr	r2, [pc, #440]	@ (8006b48 <DMA_SetConfig+0x248>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d03b      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a6d      	ldr	r2, [pc, #436]	@ (8006b4c <DMA_SetConfig+0x24c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d036      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a6b      	ldr	r2, [pc, #428]	@ (8006b50 <DMA_SetConfig+0x250>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d031      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a6a      	ldr	r2, [pc, #424]	@ (8006b54 <DMA_SetConfig+0x254>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d02c      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a68      	ldr	r2, [pc, #416]	@ (8006b58 <DMA_SetConfig+0x258>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d027      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a67      	ldr	r2, [pc, #412]	@ (8006b5c <DMA_SetConfig+0x25c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d022      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a65      	ldr	r2, [pc, #404]	@ (8006b60 <DMA_SetConfig+0x260>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d01d      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a64      	ldr	r2, [pc, #400]	@ (8006b64 <DMA_SetConfig+0x264>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d018      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a62      	ldr	r2, [pc, #392]	@ (8006b68 <DMA_SetConfig+0x268>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d013      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a61      	ldr	r2, [pc, #388]	@ (8006b6c <DMA_SetConfig+0x26c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00e      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a5f      	ldr	r2, [pc, #380]	@ (8006b70 <DMA_SetConfig+0x270>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d009      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a5e      	ldr	r2, [pc, #376]	@ (8006b74 <DMA_SetConfig+0x274>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d004      	beq.n	8006a0a <DMA_SetConfig+0x10a>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5c      	ldr	r2, [pc, #368]	@ (8006b78 <DMA_SetConfig+0x278>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d101      	bne.n	8006a0e <DMA_SetConfig+0x10e>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <DMA_SetConfig+0x110>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00d      	beq.n	8006a30 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a1c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d004      	beq.n	8006a30 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a2e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a39      	ldr	r2, [pc, #228]	@ (8006b1c <DMA_SetConfig+0x21c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d04a      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a38      	ldr	r2, [pc, #224]	@ (8006b20 <DMA_SetConfig+0x220>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d045      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a36      	ldr	r2, [pc, #216]	@ (8006b24 <DMA_SetConfig+0x224>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d040      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a35      	ldr	r2, [pc, #212]	@ (8006b28 <DMA_SetConfig+0x228>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d03b      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a33      	ldr	r2, [pc, #204]	@ (8006b2c <DMA_SetConfig+0x22c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d036      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a32      	ldr	r2, [pc, #200]	@ (8006b30 <DMA_SetConfig+0x230>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d031      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a30      	ldr	r2, [pc, #192]	@ (8006b34 <DMA_SetConfig+0x234>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d02c      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8006b38 <DMA_SetConfig+0x238>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d027      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2d      	ldr	r2, [pc, #180]	@ (8006b3c <DMA_SetConfig+0x23c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d022      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8006b40 <DMA_SetConfig+0x240>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d01d      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a2a      	ldr	r2, [pc, #168]	@ (8006b44 <DMA_SetConfig+0x244>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d018      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a29      	ldr	r2, [pc, #164]	@ (8006b48 <DMA_SetConfig+0x248>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a27      	ldr	r2, [pc, #156]	@ (8006b4c <DMA_SetConfig+0x24c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00e      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a26      	ldr	r2, [pc, #152]	@ (8006b50 <DMA_SetConfig+0x250>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d009      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a24      	ldr	r2, [pc, #144]	@ (8006b54 <DMA_SetConfig+0x254>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <DMA_SetConfig+0x1d0>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a23      	ldr	r2, [pc, #140]	@ (8006b58 <DMA_SetConfig+0x258>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <DMA_SetConfig+0x1d4>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <DMA_SetConfig+0x1d6>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d059      	beq.n	8006b8e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	223f      	movs	r2, #63	@ 0x3f
 8006ae4:	409a      	lsls	r2, r3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006af8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b40      	cmp	r3, #64	@ 0x40
 8006b08:	d138      	bne.n	8006b7c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b1a:	e086      	b.n	8006c2a <DMA_SetConfig+0x32a>
 8006b1c:	40020010 	.word	0x40020010
 8006b20:	40020028 	.word	0x40020028
 8006b24:	40020040 	.word	0x40020040
 8006b28:	40020058 	.word	0x40020058
 8006b2c:	40020070 	.word	0x40020070
 8006b30:	40020088 	.word	0x40020088
 8006b34:	400200a0 	.word	0x400200a0
 8006b38:	400200b8 	.word	0x400200b8
 8006b3c:	40020410 	.word	0x40020410
 8006b40:	40020428 	.word	0x40020428
 8006b44:	40020440 	.word	0x40020440
 8006b48:	40020458 	.word	0x40020458
 8006b4c:	40020470 	.word	0x40020470
 8006b50:	40020488 	.word	0x40020488
 8006b54:	400204a0 	.word	0x400204a0
 8006b58:	400204b8 	.word	0x400204b8
 8006b5c:	58025408 	.word	0x58025408
 8006b60:	5802541c 	.word	0x5802541c
 8006b64:	58025430 	.word	0x58025430
 8006b68:	58025444 	.word	0x58025444
 8006b6c:	58025458 	.word	0x58025458
 8006b70:	5802546c 	.word	0x5802546c
 8006b74:	58025480 	.word	0x58025480
 8006b78:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	60da      	str	r2, [r3, #12]
}
 8006b8c:	e04d      	b.n	8006c2a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a29      	ldr	r2, [pc, #164]	@ (8006c38 <DMA_SetConfig+0x338>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d022      	beq.n	8006bde <DMA_SetConfig+0x2de>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a27      	ldr	r2, [pc, #156]	@ (8006c3c <DMA_SetConfig+0x33c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d01d      	beq.n	8006bde <DMA_SetConfig+0x2de>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a26      	ldr	r2, [pc, #152]	@ (8006c40 <DMA_SetConfig+0x340>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d018      	beq.n	8006bde <DMA_SetConfig+0x2de>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a24      	ldr	r2, [pc, #144]	@ (8006c44 <DMA_SetConfig+0x344>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <DMA_SetConfig+0x2de>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a23      	ldr	r2, [pc, #140]	@ (8006c48 <DMA_SetConfig+0x348>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00e      	beq.n	8006bde <DMA_SetConfig+0x2de>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a21      	ldr	r2, [pc, #132]	@ (8006c4c <DMA_SetConfig+0x34c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d009      	beq.n	8006bde <DMA_SetConfig+0x2de>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a20      	ldr	r2, [pc, #128]	@ (8006c50 <DMA_SetConfig+0x350>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d004      	beq.n	8006bde <DMA_SetConfig+0x2de>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8006c54 <DMA_SetConfig+0x354>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d101      	bne.n	8006be2 <DMA_SetConfig+0x2e2>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <DMA_SetConfig+0x2e4>
 8006be2:	2300      	movs	r3, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d020      	beq.n	8006c2a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	409a      	lsls	r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2b40      	cmp	r3, #64	@ 0x40
 8006c06:	d108      	bne.n	8006c1a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	60da      	str	r2, [r3, #12]
}
 8006c18:	e007      	b.n	8006c2a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	60da      	str	r2, [r3, #12]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	58025408 	.word	0x58025408
 8006c3c:	5802541c 	.word	0x5802541c
 8006c40:	58025430 	.word	0x58025430
 8006c44:	58025444 	.word	0x58025444
 8006c48:	58025458 	.word	0x58025458
 8006c4c:	5802546c 	.word	0x5802546c
 8006c50:	58025480 	.word	0x58025480
 8006c54:	58025494 	.word	0x58025494

08006c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a42      	ldr	r2, [pc, #264]	@ (8006d70 <DMA_CalcBaseAndBitshift+0x118>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d04a      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a41      	ldr	r2, [pc, #260]	@ (8006d74 <DMA_CalcBaseAndBitshift+0x11c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d045      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a3f      	ldr	r2, [pc, #252]	@ (8006d78 <DMA_CalcBaseAndBitshift+0x120>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d040      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a3e      	ldr	r2, [pc, #248]	@ (8006d7c <DMA_CalcBaseAndBitshift+0x124>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d03b      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d80 <DMA_CalcBaseAndBitshift+0x128>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d036      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a3b      	ldr	r2, [pc, #236]	@ (8006d84 <DMA_CalcBaseAndBitshift+0x12c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d031      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a39      	ldr	r2, [pc, #228]	@ (8006d88 <DMA_CalcBaseAndBitshift+0x130>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d02c      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a38      	ldr	r2, [pc, #224]	@ (8006d8c <DMA_CalcBaseAndBitshift+0x134>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d027      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a36      	ldr	r2, [pc, #216]	@ (8006d90 <DMA_CalcBaseAndBitshift+0x138>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d022      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a35      	ldr	r2, [pc, #212]	@ (8006d94 <DMA_CalcBaseAndBitshift+0x13c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d01d      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a33      	ldr	r2, [pc, #204]	@ (8006d98 <DMA_CalcBaseAndBitshift+0x140>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a32      	ldr	r2, [pc, #200]	@ (8006d9c <DMA_CalcBaseAndBitshift+0x144>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a30      	ldr	r2, [pc, #192]	@ (8006da0 <DMA_CalcBaseAndBitshift+0x148>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8006da4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8006da8 <DMA_CalcBaseAndBitshift+0x150>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <DMA_CalcBaseAndBitshift+0xa8>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8006dac <DMA_CalcBaseAndBitshift+0x154>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d101      	bne.n	8006d04 <DMA_CalcBaseAndBitshift+0xac>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <DMA_CalcBaseAndBitshift+0xae>
 8006d04:	2300      	movs	r3, #0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d024      	beq.n	8006d54 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	3b10      	subs	r3, #16
 8006d12:	4a27      	ldr	r2, [pc, #156]	@ (8006db0 <DMA_CalcBaseAndBitshift+0x158>)
 8006d14:	fba2 2303 	umull	r2, r3, r2, r3
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	4a24      	ldr	r2, [pc, #144]	@ (8006db4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006d24:	5cd3      	ldrb	r3, [r2, r3]
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d908      	bls.n	8006d44 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	4b1f      	ldr	r3, [pc, #124]	@ (8006db8 <DMA_CalcBaseAndBitshift+0x160>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	1d1a      	adds	r2, r3, #4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d42:	e00d      	b.n	8006d60 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006db8 <DMA_CalcBaseAndBitshift+0x160>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d52:	e005      	b.n	8006d60 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40020010 	.word	0x40020010
 8006d74:	40020028 	.word	0x40020028
 8006d78:	40020040 	.word	0x40020040
 8006d7c:	40020058 	.word	0x40020058
 8006d80:	40020070 	.word	0x40020070
 8006d84:	40020088 	.word	0x40020088
 8006d88:	400200a0 	.word	0x400200a0
 8006d8c:	400200b8 	.word	0x400200b8
 8006d90:	40020410 	.word	0x40020410
 8006d94:	40020428 	.word	0x40020428
 8006d98:	40020440 	.word	0x40020440
 8006d9c:	40020458 	.word	0x40020458
 8006da0:	40020470 	.word	0x40020470
 8006da4:	40020488 	.word	0x40020488
 8006da8:	400204a0 	.word	0x400204a0
 8006dac:	400204b8 	.word	0x400204b8
 8006db0:	aaaaaaab 	.word	0xaaaaaaab
 8006db4:	08014f5c 	.word	0x08014f5c
 8006db8:	fffffc00 	.word	0xfffffc00

08006dbc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d120      	bne.n	8006e12 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d858      	bhi.n	8006e8a <DMA_CheckFifoParam+0xce>
 8006dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006de0 <DMA_CheckFifoParam+0x24>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006df1 	.word	0x08006df1
 8006de4:	08006e03 	.word	0x08006e03
 8006de8:	08006df1 	.word	0x08006df1
 8006dec:	08006e8b 	.word	0x08006e8b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d048      	beq.n	8006e8e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e00:	e045      	b.n	8006e8e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e0a:	d142      	bne.n	8006e92 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e10:	e03f      	b.n	8006e92 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1a:	d123      	bne.n	8006e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d838      	bhi.n	8006e96 <DMA_CheckFifoParam+0xda>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <DMA_CheckFifoParam+0x70>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e43 	.word	0x08006e43
 8006e34:	08006e3d 	.word	0x08006e3d
 8006e38:	08006e55 	.word	0x08006e55
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8006e40:	e030      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d025      	beq.n	8006e9a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e52:	e022      	b.n	8006e9a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e5c:	d11f      	bne.n	8006e9e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e62:	e01c      	b.n	8006e9e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d902      	bls.n	8006e72 <DMA_CheckFifoParam+0xb6>
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d003      	beq.n	8006e78 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006e70:	e018      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
        break;
 8006e76:	e015      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00e      	beq.n	8006ea2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
    break;
 8006e88:	e00b      	b.n	8006ea2 <DMA_CheckFifoParam+0xe6>
        break;
 8006e8a:	bf00      	nop
 8006e8c:	e00a      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8006e8e:	bf00      	nop
 8006e90:	e008      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8006e92:	bf00      	nop
 8006e94:	e006      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8006e96:	bf00      	nop
 8006e98:	e004      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8006e9a:	bf00      	nop
 8006e9c:	e002      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
    break;
 8006ea2:	bf00      	nop
    }
  }

  return status;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop

08006eb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a38      	ldr	r2, [pc, #224]	@ (8006fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d022      	beq.n	8006f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a36      	ldr	r2, [pc, #216]	@ (8006fac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d01d      	beq.n	8006f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a35      	ldr	r2, [pc, #212]	@ (8006fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d018      	beq.n	8006f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a33      	ldr	r2, [pc, #204]	@ (8006fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d013      	beq.n	8006f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a32      	ldr	r2, [pc, #200]	@ (8006fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00e      	beq.n	8006f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a30      	ldr	r2, [pc, #192]	@ (8006fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d009      	beq.n	8006f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a2f      	ldr	r2, [pc, #188]	@ (8006fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d004      	beq.n	8006f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8006fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d101      	bne.n	8006f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01a      	beq.n	8006f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	3b08      	subs	r3, #8
 8006f24:	4a28      	ldr	r2, [pc, #160]	@ (8006fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006f26:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2a:	091b      	lsrs	r3, r3, #4
 8006f2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4b26      	ldr	r3, [pc, #152]	@ (8006fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a24      	ldr	r2, [pc, #144]	@ (8006fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006f40:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	2201      	movs	r2, #1
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006f50:	e024      	b.n	8006f9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	3b10      	subs	r3, #16
 8006f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8006fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f60:	091b      	lsrs	r3, r3, #4
 8006f62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4a1c      	ldr	r2, [pc, #112]	@ (8006fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d806      	bhi.n	8006f7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d902      	bls.n	8006f7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3308      	adds	r3, #8
 8006f78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4b18      	ldr	r3, [pc, #96]	@ (8006fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	461a      	mov	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a16      	ldr	r2, [pc, #88]	@ (8006fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006f8c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	2201      	movs	r2, #1
 8006f96:	409a      	lsls	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	58025408 	.word	0x58025408
 8006fac:	5802541c 	.word	0x5802541c
 8006fb0:	58025430 	.word	0x58025430
 8006fb4:	58025444 	.word	0x58025444
 8006fb8:	58025458 	.word	0x58025458
 8006fbc:	5802546c 	.word	0x5802546c
 8006fc0:	58025480 	.word	0x58025480
 8006fc4:	58025494 	.word	0x58025494
 8006fc8:	cccccccd 	.word	0xcccccccd
 8006fcc:	16009600 	.word	0x16009600
 8006fd0:	58025880 	.word	0x58025880
 8006fd4:	aaaaaaab 	.word	0xaaaaaaab
 8006fd8:	400204b8 	.word	0x400204b8
 8006fdc:	4002040f 	.word	0x4002040f
 8006fe0:	10008200 	.word	0x10008200
 8006fe4:	40020880 	.word	0x40020880

08006fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d04a      	beq.n	8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b08      	cmp	r3, #8
 8007002:	d847      	bhi.n	8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a25      	ldr	r2, [pc, #148]	@ (80070a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d022      	beq.n	8007054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a24      	ldr	r2, [pc, #144]	@ (80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d01d      	beq.n	8007054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a22      	ldr	r2, [pc, #136]	@ (80070a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d018      	beq.n	8007054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a21      	ldr	r2, [pc, #132]	@ (80070ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1f      	ldr	r2, [pc, #124]	@ (80070b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00e      	beq.n	8007054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1e      	ldr	r2, [pc, #120]	@ (80070b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d009      	beq.n	8007054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1c      	ldr	r2, [pc, #112]	@ (80070b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1b      	ldr	r2, [pc, #108]	@ (80070bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d101      	bne.n	8007058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007058:	2300      	movs	r3, #0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4b17      	ldr	r3, [pc, #92]	@ (80070c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a15      	ldr	r2, [pc, #84]	@ (80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007070:	671a      	str	r2, [r3, #112]	@ 0x70
 8007072:	e009      	b.n	8007088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4b14      	ldr	r3, [pc, #80]	@ (80070c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	461a      	mov	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a11      	ldr	r2, [pc, #68]	@ (80070cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007086:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3b01      	subs	r3, #1
 800708c:	2201      	movs	r2, #1
 800708e:	409a      	lsls	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	58025408 	.word	0x58025408
 80070a4:	5802541c 	.word	0x5802541c
 80070a8:	58025430 	.word	0x58025430
 80070ac:	58025444 	.word	0x58025444
 80070b0:	58025458 	.word	0x58025458
 80070b4:	5802546c 	.word	0x5802546c
 80070b8:	58025480 	.word	0x58025480
 80070bc:	58025494 	.word	0x58025494
 80070c0:	1600963f 	.word	0x1600963f
 80070c4:	58025940 	.word	0x58025940
 80070c8:	1000823f 	.word	0x1000823f
 80070cc:	40020940 	.word	0x40020940

080070d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b098      	sub	sp, #96	@ 0x60
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80070d8:	4a84      	ldr	r2, [pc, #528]	@ (80072ec <HAL_FDCAN_Init+0x21c>)
 80070da:	f107 030c 	add.w	r3, r7, #12
 80070de:	4611      	mov	r1, r2
 80070e0:	224c      	movs	r2, #76	@ 0x4c
 80070e2:	4618      	mov	r0, r3
 80070e4:	f00d f89a 	bl	801421c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e1c6      	b.n	8007480 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a7e      	ldr	r2, [pc, #504]	@ (80072f0 <HAL_FDCAN_Init+0x220>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d106      	bne.n	800710a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fb f8ae 	bl	8002280 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0210 	bic.w	r2, r2, #16
 8007132:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007134:	f7fb fd1a 	bl	8002b6c <HAL_GetTick>
 8007138:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800713a:	e014      	b.n	8007166 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800713c:	f7fb fd16 	bl	8002b6c <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b0a      	cmp	r3, #10
 8007148:	d90d      	bls.n	8007166 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007150:	f043 0201 	orr.w	r2, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2203      	movs	r2, #3
 800715e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e18c      	b.n	8007480 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b08      	cmp	r3, #8
 8007172:	d0e3      	beq.n	800713c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007184:	f7fb fcf2 	bl	8002b6c <HAL_GetTick>
 8007188:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800718a:	e014      	b.n	80071b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800718c:	f7fb fcee 	bl	8002b6c <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b0a      	cmp	r3, #10
 8007198:	d90d      	bls.n	80071b6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071a0:	f043 0201 	orr.w	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2203      	movs	r2, #3
 80071ae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e164      	b.n	8007480 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0e3      	beq.n	800718c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0202 	orr.w	r2, r2, #2
 80071d2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	7c1b      	ldrb	r3, [r3, #16]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d108      	bne.n	80071ee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071ea:	619a      	str	r2, [r3, #24]
 80071ec:	e007      	b.n	80071fe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	7c5b      	ldrb	r3, [r3, #17]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d108      	bne.n	8007218 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007214:	619a      	str	r2, [r3, #24]
 8007216:	e007      	b.n	8007228 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007226:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7c9b      	ldrb	r3, [r3, #18]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d108      	bne.n	8007242 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800723e:	619a      	str	r2, [r3, #24]
 8007240:	e007      	b.n	8007252 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007250:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007276:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0210 	bic.w	r2, r2, #16
 8007286:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d108      	bne.n	80072a2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0204 	orr.w	r2, r2, #4
 800729e:	619a      	str	r2, [r3, #24]
 80072a0:	e030      	b.n	8007304 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d02c      	beq.n	8007304 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d020      	beq.n	80072f4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699a      	ldr	r2, [r3, #24]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80072c0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0210 	orr.w	r2, r2, #16
 80072d0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d114      	bne.n	8007304 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0220 	orr.w	r2, r2, #32
 80072e8:	619a      	str	r2, [r3, #24]
 80072ea:	e00b      	b.n	8007304 <HAL_FDCAN_Init+0x234>
 80072ec:	08014eb8 	.word	0x08014eb8
 80072f0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0220 	orr.w	r2, r2, #32
 8007302:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	3b01      	subs	r3, #1
 800730a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	3b01      	subs	r3, #1
 8007312:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007314:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800731c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	3b01      	subs	r3, #1
 8007326:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800732c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800732e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007338:	d115      	bne.n	8007366 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007344:	3b01      	subs	r3, #1
 8007346:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007348:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734e:	3b01      	subs	r3, #1
 8007350:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007352:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	3b01      	subs	r3, #1
 800735c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007362:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007364:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800738c:	4413      	add	r3, r2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d011      	beq.n	80073b6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800739a:	f023 0107 	bic.w	r1, r3, #7
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	3360      	adds	r3, #96	@ 0x60
 80073a6:	443b      	add	r3, r7
 80073a8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d011      	beq.n	80073e2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80073c6:	f023 0107 	bic.w	r1, r3, #7
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	3360      	adds	r3, #96	@ 0x60
 80073d2:	443b      	add	r3, r7
 80073d4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d012      	beq.n	8007410 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80073f2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	3360      	adds	r3, #96	@ 0x60
 80073fe:	443b      	add	r3, r7
 8007400:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007404:	011a      	lsls	r2, r3, #4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007414:	2b00      	cmp	r3, #0
 8007416:	d012      	beq.n	800743e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007420:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	3360      	adds	r3, #96	@ 0x60
 800742c:	443b      	add	r3, r7
 800742e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007432:	021a      	lsls	r2, r3, #8
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a11      	ldr	r2, [pc, #68]	@ (8007488 <HAL_FDCAN_Init+0x3b8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d107      	bne.n	8007458 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f022 0203 	bic.w	r2, r2, #3
 8007456:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fe35 	bl	80080e0 <FDCAN_CalcultateRamBlockAddresses>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800747c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007480:	4618      	mov	r0, r3
 8007482:	3760      	adds	r7, #96	@ 0x60
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	4000a000 	.word	0x4000a000

0800748c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800749c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d002      	beq.n	80074aa <HAL_FDCAN_ConfigFilter+0x1e>
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d157      	bne.n	800755a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d12b      	bne.n	800750a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	2b07      	cmp	r3, #7
 80074b8:	d10d      	bne.n	80074d6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80074c6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80074cc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80074ce:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e00e      	b.n	80074f4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80074e2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80074ea:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	e025      	b.n	8007556 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	075a      	lsls	r2, r3, #29
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b07      	cmp	r3, #7
 800751e:	d103      	bne.n	8007528 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	e006      	b.n	8007536 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	079a      	lsls	r2, r3, #30
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4413      	add	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	3304      	adds	r3, #4
 800754e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	e008      	b.n	800756c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007560:	f043 0202 	orr.w	r2, r3, #2
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
  }
}
 800756c:	4618      	mov	r0, r3
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	d111      	bne.n	80075b0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0201 	bic.w	r2, r2, #1
 80075a2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	e008      	b.n	80075c2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075b6:	f043 0204 	orr.w	r2, r3, #4
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b086      	sub	sp, #24
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d141      	bne.n	800766a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80075ee:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d109      	bne.n	800760a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075fc:	f043 0220 	orr.w	r2, r3, #32
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e038      	b.n	800767c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007620:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e026      	b.n	800767c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007636:	0c1b      	lsrs	r3, r3, #16
 8007638:	f003 031f 	and.w	r3, r3, #31
 800763c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	68b9      	ldr	r1, [r7, #8]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 fed1 	bl	80083ec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2101      	movs	r1, #1
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	fa01 f202 	lsl.w	r2, r1, r2
 8007656:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800765a:	2201      	movs	r2, #1
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	409a      	lsls	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	e008      	b.n	800767c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007670:	f043 0208 	orr.w	r2, r3, #8
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
  }
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007684:	b480      	push	{r7}
 8007686:	b08b      	sub	sp, #44	@ 0x2c
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800769c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800769e:	7efb      	ldrb	r3, [r7, #27]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	f040 8149 	bne.w	8007938 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b40      	cmp	r3, #64	@ 0x40
 80076aa:	d14c      	bne.n	8007746 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d109      	bne.n	80076d0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076c2:	f043 0220 	orr.w	r2, r3, #32
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e13c      	b.n	800794a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d109      	bne.n	80076f4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e12a      	b.n	800794a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076fc:	0e1b      	lsrs	r3, r3, #24
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b01      	cmp	r3, #1
 8007704:	d10a      	bne.n	800771c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800770e:	0fdb      	lsrs	r3, r3, #31
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007718:	2301      	movs	r3, #1
 800771a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007738:	69f9      	ldr	r1, [r7, #28]
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	627b      	str	r3, [r7, #36]	@ 0x24
 8007744:	e068      	b.n	8007818 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b41      	cmp	r3, #65	@ 0x41
 800774a:	d14c      	bne.n	80077e6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007754:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d109      	bne.n	8007770 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007762:	f043 0220 	orr.w	r2, r3, #32
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0ec      	b.n	800794a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007786:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e0da      	b.n	800794a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800779c:	0e1b      	lsrs	r3, r3, #24
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d10a      	bne.n	80077bc <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077ae:	0fdb      	lsrs	r3, r3, #31
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80077b8:	2301      	movs	r3, #1
 80077ba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077c4:	0a1b      	lsrs	r3, r3, #8
 80077c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	4413      	add	r3, r2
 80077ce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077d8:	69f9      	ldr	r1, [r7, #28]
 80077da:	fb01 f303 	mul.w	r3, r1, r3
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077e4:	e018      	b.n	8007818 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d309      	bcc.n	8007804 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077f6:	f043 0220 	orr.w	r2, r3, #32
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e0a2      	b.n	800794a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800780c:	68b9      	ldr	r1, [r7, #8]
 800780e:	fb01 f303 	mul.w	r3, r1, r3
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d107      	bne.n	800783c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	0c9b      	lsrs	r3, r3, #18
 8007832:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	e005      	b.n	8007848 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	3304      	adds	r3, #4
 8007864:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	b29a      	uxth	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	0c1b      	lsrs	r3, r3, #16
 8007876:	f003 020f 	and.w	r2, r3, #15
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800787e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	0e1b      	lsrs	r3, r3, #24
 800789c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	0fda      	lsrs	r2, r3, #31
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	3304      	adds	r3, #4
 80078b2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80078b8:	2300      	movs	r3, #0
 80078ba:	623b      	str	r3, [r7, #32]
 80078bc:	e00a      	b.n	80078d4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	441a      	add	r2, r3
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	440b      	add	r3, r1
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	3301      	adds	r3, #1
 80078d2:	623b      	str	r3, [r7, #32]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007958 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80078da:	5cd3      	ldrb	r3, [r2, r3]
 80078dc:	461a      	mov	r2, r3
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d3ec      	bcc.n	80078be <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b40      	cmp	r3, #64	@ 0x40
 80078e8:	d105      	bne.n	80078f6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80078f4:	e01e      	b.n	8007934 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b41      	cmp	r3, #65	@ 0x41
 80078fa:	d105      	bne.n	8007908 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007906:	e015      	b.n	8007934 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b1f      	cmp	r3, #31
 800790c:	d808      	bhi.n	8007920 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2101      	movs	r1, #1
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	fa01 f202 	lsl.w	r2, r1, r2
 800791a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800791e:	e009      	b.n	8007934 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f003 021f 	and.w	r2, r3, #31
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2101      	movs	r1, #1
 800792c:	fa01 f202 	lsl.w	r2, r1, r2
 8007930:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	e008      	b.n	800794a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800793e:	f043 0208 	orr.w	r2, r3, #8
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
  }
}
 800794a:	4618      	mov	r0, r3
 800794c:	372c      	adds	r7, #44	@ 0x2c
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	08014f64 	.word	0x08014f64

0800795c <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800796c:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f003 0207 	and.w	r2, r3, #7
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	f003 0207 	and.w	r2, r3, #7
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f003 0218 	and.w	r2, r3, #24
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	f003 0201 	and.w	r2, r3, #1
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	099b      	lsrs	r3, r3, #6
 800799e:	f003 0201 	and.w	r2, r3, #1
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	09db      	lsrs	r3, r3, #7
 80079aa:	f003 0201 	and.w	r2, r3, #1
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	0adb      	lsrs	r3, r3, #11
 80079b6:	f003 0201 	and.w	r2, r3, #1
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	0b1b      	lsrs	r3, r3, #12
 80079c2:	f003 0201 	and.w	r2, r3, #1
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	0b5b      	lsrs	r3, r3, #13
 80079ce:	f003 0201 	and.w	r2, r3, #1
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	0b9b      	lsrs	r3, r3, #14
 80079da:	f003 0201 	and.w	r2, r3, #1
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	0c1b      	lsrs	r3, r3, #16
 80079e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007a0e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d002      	beq.n	8007a1c <HAL_FDCAN_ActivateNotification+0x20>
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d155      	bne.n	8007ac8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d108      	bne.n	8007a3c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0201 	orr.w	r2, r2, #1
 8007a38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a3a:	e014      	b.n	8007a66 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	4013      	ands	r3, r2
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d108      	bne.n	8007a5e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0202 	orr.w	r2, r2, #2
 8007a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a5c:	e003      	b.n	8007a66 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2203      	movs	r2, #3
 8007a64:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae8 <HAL_FDCAN_ActivateNotification+0xec>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <HAL_FDCAN_ActivateNotification+0xf0>)
 8007ab8:	695a      	ldr	r2, [r3, #20]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	0f9b      	lsrs	r3, r3, #30
 8007abe:	490b      	ldr	r1, [pc, #44]	@ (8007aec <HAL_FDCAN_ActivateNotification+0xf0>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e008      	b.n	8007ada <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ace:	f043 0202 	orr.w	r2, r3, #2
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
  }
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	3fcfffff 	.word	0x3fcfffff
 8007aec:	4000a800 	.word	0x4000a800

08007af0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b096      	sub	sp, #88	@ 0x58
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007af8:	4b95      	ldr	r3, [pc, #596]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	079b      	lsls	r3, r3, #30
 8007afe:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007b00:	4b93      	ldr	r3, [pc, #588]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	079b      	lsls	r3, r3, #30
 8007b06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b08:	4013      	ands	r3, r2
 8007b0a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b12:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007b16:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b20:	4013      	ands	r3, r2
 8007b22:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b38:	4013      	ands	r3, r2
 8007b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b50:	4013      	ands	r3, r2
 8007b52:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b5a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8007b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b68:	4013      	ands	r3, r2
 8007b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b72:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8007b76:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b80:	4013      	ands	r3, r2
 8007b82:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bb0:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bb2:	4b67      	ldr	r3, [pc, #412]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fa44 	bl	8008046 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01c      	beq.n	8007c02 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d017      	beq.n	8007c02 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007bda:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007be4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007be6:	4013      	ands	r3, r2
 8007be8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007bf2:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bf4:	4b56      	ldr	r3, [pc, #344]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007bfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f9f9 	bl	8007ff4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00d      	beq.n	8007c24 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c0e:	4b51      	ldr	r3, [pc, #324]	@ (8007d54 <HAL_FDCAN_IRQHandler+0x264>)
 8007c10:	400b      	ands	r3, r1
 8007c12:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c14:	4a4e      	ldr	r2, [pc, #312]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c18:	0f9b      	lsrs	r3, r3, #30
 8007c1a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007c1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f9b2 	bl	8007f88 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00d      	beq.n	8007c46 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c30:	4b48      	ldr	r3, [pc, #288]	@ (8007d54 <HAL_FDCAN_IRQHandler+0x264>)
 8007c32:	400b      	ands	r3, r1
 8007c34:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c36:	4a46      	ldr	r2, [pc, #280]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c3a:	0f9b      	lsrs	r3, r3, #30
 8007c3c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007c3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9ac 	bl	8007f9e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00d      	beq.n	8007c68 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c52:	4b40      	ldr	r3, [pc, #256]	@ (8007d54 <HAL_FDCAN_IRQHandler+0x264>)
 8007c54:	400b      	ands	r3, r1
 8007c56:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c58:	4a3d      	ldr	r2, [pc, #244]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c5c:	0f9b      	lsrs	r3, r3, #30
 8007c5e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007c60:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7f9 fcb2 	bl	80015cc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00d      	beq.n	8007c8a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007c74:	4b37      	ldr	r3, [pc, #220]	@ (8007d54 <HAL_FDCAN_IRQHandler+0x264>)
 8007c76:	400b      	ands	r3, r1
 8007c78:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c7a:	4a35      	ldr	r2, [pc, #212]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7e:	0f9b      	lsrs	r3, r3, #30
 8007c80:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007c82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f995 	bl	8007fb4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00f      	beq.n	8007cb4 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ca6:	651a      	str	r2, [r3, #80]	@ 0x50
 8007ca8:	4b29      	ldr	r3, [pc, #164]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f98b 	bl	8007fca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01c      	beq.n	8007cf8 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d017      	beq.n	8007cf8 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cd0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cdc:	4013      	ands	r3, r2
 8007cde:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ce8:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cea:	4b19      	ldr	r3, [pc, #100]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007cf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f973 	bl	8007fde <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00f      	beq.n	8007d22 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007d14:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d16:	4b0e      	ldr	r3, [pc, #56]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f974 	bl	800800a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d015      	beq.n	8007d58 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d010      	beq.n	8007d58 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007d3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d40:	4b03      	ldr	r3, [pc, #12]	@ (8007d50 <HAL_FDCAN_IRQHandler+0x260>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f969 	bl	800801e <HAL_FDCAN_TimestampWraparoundCallback>
 8007d4c:	e004      	b.n	8007d58 <HAL_FDCAN_IRQHandler+0x268>
 8007d4e:	bf00      	nop
 8007d50:	4000a800 	.word	0x4000a800
 8007d54:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00f      	beq.n	8007d82 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007d74:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d76:	4b81      	ldr	r3, [pc, #516]	@ (8007f7c <HAL_FDCAN_IRQHandler+0x48c>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f958 	bl	8008032 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d014      	beq.n	8007db6 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00f      	beq.n	8007db6 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007d9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007da0:	4b76      	ldr	r3, [pc, #472]	@ (8007f7c <HAL_FDCAN_IRQHandler+0x48c>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00d      	beq.n	8007dd8 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8007f80 <HAL_FDCAN_IRQHandler+0x490>)
 8007dc4:	400b      	ands	r3, r1
 8007dc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007dc8:	4a6c      	ldr	r2, [pc, #432]	@ (8007f7c <HAL_FDCAN_IRQHandler+0x48c>)
 8007dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dcc:	0f9b      	lsrs	r3, r3, #30
 8007dce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007dd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f94b 	bl	800806e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d011      	beq.n	8007e02 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007de4:	4b66      	ldr	r3, [pc, #408]	@ (8007f80 <HAL_FDCAN_IRQHandler+0x490>)
 8007de6:	400b      	ands	r3, r1
 8007de8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007dea:	4a64      	ldr	r2, [pc, #400]	@ (8007f7c <HAL_FDCAN_IRQHandler+0x48c>)
 8007dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dee:	0f9b      	lsrs	r3, r3, #30
 8007df0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a5f      	ldr	r2, [pc, #380]	@ (8007f84 <HAL_FDCAN_IRQHandler+0x494>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	f040 80aa 	bne.w	8007f62 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 80a2 	beq.w	8007f62 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e32:	4013      	ands	r3, r2
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e40:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007e58:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e62:	4013      	ands	r3, r2
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007e70:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e78:	6a3a      	ldr	r2, [r7, #32]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007e88:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	4013      	ands	r3, r2
 8007e94:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eb2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007eb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8e4 	bl	8008084 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d007      	beq.n	8007ed2 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ec8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f8e4 	bl	800809a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d019      	beq.n	8007f10 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d014      	beq.n	8007f10 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eec:	0c1b      	lsrs	r3, r3, #16
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007efc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2240      	movs	r2, #64	@ 0x40
 8007f04:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	6939      	ldr	r1, [r7, #16]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f8d0 	bl	80080b0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f1c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007f1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f8d1 	bl	80080c8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	6a3a      	ldr	r2, [r7, #32]
 8007f32:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f874 	bl	800805a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007f72:	bf00      	nop
 8007f74:	3758      	adds	r7, #88	@ 0x58
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	4000a800 	.word	0x4000a800
 8007f80:	3fcfffff 	.word	0x3fcfffff
 8007f84:	4000a000 	.word	0x4000a000

08007f88 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
	...

080080e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80080f6:	4ba7      	ldr	r3, [pc, #668]	@ (8008394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	0091      	lsls	r1, r2, #2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6812      	ldr	r2, [r2, #0]
 8008102:	430b      	orrs	r3, r1
 8008104:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008110:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008118:	041a      	lsls	r2, r3, #16
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	4413      	add	r3, r2
 800812c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008136:	4b97      	ldr	r3, [pc, #604]	@ (8008394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008138:	4013      	ands	r3, r2
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	0091      	lsls	r1, r2, #2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	6812      	ldr	r2, [r2, #0]
 8008142:	430b      	orrs	r3, r1
 8008144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008150:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008158:	041a      	lsls	r2, r3, #16
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	4413      	add	r3, r2
 800816e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008178:	4b86      	ldr	r3, [pc, #536]	@ (8008394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800817a:	4013      	ands	r3, r2
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	0091      	lsls	r1, r2, #2
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	430b      	orrs	r3, r1
 8008186:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008192:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800819a:	041a      	lsls	r2, r3, #16
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80081ae:	fb02 f303 	mul.w	r3, r2, r3
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	4413      	add	r3, r2
 80081b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80081c0:	4b74      	ldr	r3, [pc, #464]	@ (8008394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081c2:	4013      	ands	r3, r2
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	0091      	lsls	r1, r2, #2
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	430b      	orrs	r3, r1
 80081ce:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081da:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081e2:	041a      	lsls	r2, r3, #16
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80081f6:	fb02 f303 	mul.w	r3, r2, r3
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008208:	4b62      	ldr	r3, [pc, #392]	@ (8008394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800820a:	4013      	ands	r3, r2
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	0091      	lsls	r1, r2, #2
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6812      	ldr	r2, [r2, #0]
 8008214:	430b      	orrs	r3, r1
 8008216:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008222:	fb02 f303 	mul.w	r3, r2, r3
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008234:	4b57      	ldr	r3, [pc, #348]	@ (8008394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008236:	4013      	ands	r3, r2
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	0091      	lsls	r1, r2, #2
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	430b      	orrs	r3, r1
 8008242:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800824e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008256:	041a      	lsls	r2, r3, #16
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	4413      	add	r3, r2
 800826c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008276:	4b47      	ldr	r3, [pc, #284]	@ (8008394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008278:	4013      	ands	r3, r2
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	0091      	lsls	r1, r2, #2
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	6812      	ldr	r2, [r2, #0]
 8008282:	430b      	orrs	r3, r1
 8008284:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008290:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008298:	041a      	lsls	r2, r3, #16
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80082ac:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082b4:	061a      	lsls	r2, r3, #24
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082c4:	4b34      	ldr	r3, [pc, #208]	@ (8008398 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80082c6:	4413      	add	r3, r2
 80082c8:	009a      	lsls	r2, r3, #2
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	441a      	add	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	441a      	add	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80082fa:	fb01 f303 	mul.w	r3, r1, r3
 80082fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008300:	441a      	add	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008312:	fb01 f303 	mul.w	r3, r1, r3
 8008316:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008318:	441a      	add	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800832a:	fb01 f303 	mul.w	r3, r1, r3
 800832e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008330:	441a      	add	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	441a      	add	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800835a:	fb01 f303 	mul.w	r3, r1, r3
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	441a      	add	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008376:	fb01 f303 	mul.w	r3, r1, r3
 800837a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800837c:	441a      	add	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800838a:	4a04      	ldr	r2, [pc, #16]	@ (800839c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d915      	bls.n	80083bc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008390:	e006      	b.n	80083a0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008392:	bf00      	nop
 8008394:	ffff0003 	.word	0xffff0003
 8008398:	10002b00 	.word	0x10002b00
 800839c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083a6:	f043 0220 	orr.w	r2, r3, #32
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2203      	movs	r2, #3
 80083b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e010      	b.n	80083de <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e005      	b.n	80083d0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3304      	adds	r3, #4
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d3f3      	bcc.n	80083c4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b089      	sub	sp, #36	@ 0x24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10a      	bne.n	8008418 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800840a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008412:	4313      	orrs	r3, r2
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	e00a      	b.n	800842e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008420:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008426:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008428:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800842c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008438:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800843e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008444:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	fb01 f303 	mul.w	r3, r1, r3
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	69fa      	ldr	r2, [r7, #28]
 800846a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	3304      	adds	r3, #4
 8008470:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	3304      	adds	r3, #4
 800847c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800847e:	2300      	movs	r3, #0
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e020      	b.n	80084c6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	3303      	adds	r3, #3
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	3302      	adds	r3, #2
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	440b      	add	r3, r1
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800849c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	3301      	adds	r3, #1
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	440b      	add	r3, r1
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80084aa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	440a      	add	r2, r1
 80084b2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80084b4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	3304      	adds	r3, #4
 80084be:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	3304      	adds	r3, #4
 80084c4:	617b      	str	r3, [r7, #20]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	4a06      	ldr	r2, [pc, #24]	@ (80084e4 <FDCAN_CopyMessageToRAM+0xf8>)
 80084cc:	5cd3      	ldrb	r3, [r2, r3]
 80084ce:	461a      	mov	r2, r3
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d3d6      	bcc.n	8008484 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	3724      	adds	r7, #36	@ 0x24
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	08014f64 	.word	0x08014f64

080084e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b089      	sub	sp, #36	@ 0x24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084f6:	4b86      	ldr	r3, [pc, #536]	@ (8008710 <HAL_GPIO_Init+0x228>)
 80084f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084fa:	e18c      	b.n	8008816 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	2101      	movs	r1, #1
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	fa01 f303 	lsl.w	r3, r1, r3
 8008508:	4013      	ands	r3, r2
 800850a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 817e 	beq.w	8008810 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	2b01      	cmp	r3, #1
 800851e:	d005      	beq.n	800852c <HAL_GPIO_Init+0x44>
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d130      	bne.n	800858e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	2203      	movs	r2, #3
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	43db      	mvns	r3, r3
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	4013      	ands	r3, r2
 8008542:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	fa02 f303 	lsl.w	r3, r2, r3
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	4313      	orrs	r3, r2
 8008554:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008562:	2201      	movs	r2, #1
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	fa02 f303 	lsl.w	r3, r2, r3
 800856a:	43db      	mvns	r3, r3
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	4013      	ands	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	091b      	lsrs	r3, r3, #4
 8008578:	f003 0201 	and.w	r2, r3, #1
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	fa02 f303 	lsl.w	r3, r2, r3
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	4313      	orrs	r3, r2
 8008586:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	2b03      	cmp	r3, #3
 8008598:	d017      	beq.n	80085ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	2203      	movs	r2, #3
 80085a6:	fa02 f303 	lsl.w	r3, r2, r3
 80085aa:	43db      	mvns	r3, r3
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	4013      	ands	r3, r2
 80085b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	fa02 f303 	lsl.w	r3, r2, r3
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d123      	bne.n	800861e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	08da      	lsrs	r2, r3, #3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3208      	adds	r2, #8
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	220f      	movs	r2, #15
 80085ee:	fa02 f303 	lsl.w	r3, r2, r3
 80085f2:	43db      	mvns	r3, r3
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	4013      	ands	r3, r2
 80085f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	691a      	ldr	r2, [r3, #16]
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	4313      	orrs	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	08da      	lsrs	r2, r3, #3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3208      	adds	r2, #8
 8008618:	69b9      	ldr	r1, [r7, #24]
 800861a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	2203      	movs	r2, #3
 800862a:	fa02 f303 	lsl.w	r3, r2, r3
 800862e:	43db      	mvns	r3, r3
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	4013      	ands	r3, r2
 8008634:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f003 0203 	and.w	r2, r3, #3
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	fa02 f303 	lsl.w	r3, r2, r3
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	4313      	orrs	r3, r2
 800864a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 80d8 	beq.w	8008810 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008660:	4b2c      	ldr	r3, [pc, #176]	@ (8008714 <HAL_GPIO_Init+0x22c>)
 8008662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008666:	4a2b      	ldr	r2, [pc, #172]	@ (8008714 <HAL_GPIO_Init+0x22c>)
 8008668:	f043 0302 	orr.w	r3, r3, #2
 800866c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008670:	4b28      	ldr	r3, [pc, #160]	@ (8008714 <HAL_GPIO_Init+0x22c>)
 8008672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800867e:	4a26      	ldr	r2, [pc, #152]	@ (8008718 <HAL_GPIO_Init+0x230>)
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	089b      	lsrs	r3, r3, #2
 8008684:	3302      	adds	r3, #2
 8008686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800868a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	220f      	movs	r2, #15
 8008696:	fa02 f303 	lsl.w	r3, r2, r3
 800869a:	43db      	mvns	r3, r3
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	4013      	ands	r3, r2
 80086a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a1d      	ldr	r2, [pc, #116]	@ (800871c <HAL_GPIO_Init+0x234>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d04a      	beq.n	8008740 <HAL_GPIO_Init+0x258>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008720 <HAL_GPIO_Init+0x238>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d02b      	beq.n	800870a <HAL_GPIO_Init+0x222>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008724 <HAL_GPIO_Init+0x23c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d025      	beq.n	8008706 <HAL_GPIO_Init+0x21e>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008728 <HAL_GPIO_Init+0x240>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d01f      	beq.n	8008702 <HAL_GPIO_Init+0x21a>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a19      	ldr	r2, [pc, #100]	@ (800872c <HAL_GPIO_Init+0x244>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d019      	beq.n	80086fe <HAL_GPIO_Init+0x216>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a18      	ldr	r2, [pc, #96]	@ (8008730 <HAL_GPIO_Init+0x248>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d013      	beq.n	80086fa <HAL_GPIO_Init+0x212>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a17      	ldr	r2, [pc, #92]	@ (8008734 <HAL_GPIO_Init+0x24c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00d      	beq.n	80086f6 <HAL_GPIO_Init+0x20e>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a16      	ldr	r2, [pc, #88]	@ (8008738 <HAL_GPIO_Init+0x250>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d007      	beq.n	80086f2 <HAL_GPIO_Init+0x20a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a15      	ldr	r2, [pc, #84]	@ (800873c <HAL_GPIO_Init+0x254>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d101      	bne.n	80086ee <HAL_GPIO_Init+0x206>
 80086ea:	2309      	movs	r3, #9
 80086ec:	e029      	b.n	8008742 <HAL_GPIO_Init+0x25a>
 80086ee:	230a      	movs	r3, #10
 80086f0:	e027      	b.n	8008742 <HAL_GPIO_Init+0x25a>
 80086f2:	2307      	movs	r3, #7
 80086f4:	e025      	b.n	8008742 <HAL_GPIO_Init+0x25a>
 80086f6:	2306      	movs	r3, #6
 80086f8:	e023      	b.n	8008742 <HAL_GPIO_Init+0x25a>
 80086fa:	2305      	movs	r3, #5
 80086fc:	e021      	b.n	8008742 <HAL_GPIO_Init+0x25a>
 80086fe:	2304      	movs	r3, #4
 8008700:	e01f      	b.n	8008742 <HAL_GPIO_Init+0x25a>
 8008702:	2303      	movs	r3, #3
 8008704:	e01d      	b.n	8008742 <HAL_GPIO_Init+0x25a>
 8008706:	2302      	movs	r3, #2
 8008708:	e01b      	b.n	8008742 <HAL_GPIO_Init+0x25a>
 800870a:	2301      	movs	r3, #1
 800870c:	e019      	b.n	8008742 <HAL_GPIO_Init+0x25a>
 800870e:	bf00      	nop
 8008710:	58000080 	.word	0x58000080
 8008714:	58024400 	.word	0x58024400
 8008718:	58000400 	.word	0x58000400
 800871c:	58020000 	.word	0x58020000
 8008720:	58020400 	.word	0x58020400
 8008724:	58020800 	.word	0x58020800
 8008728:	58020c00 	.word	0x58020c00
 800872c:	58021000 	.word	0x58021000
 8008730:	58021400 	.word	0x58021400
 8008734:	58021800 	.word	0x58021800
 8008738:	58021c00 	.word	0x58021c00
 800873c:	58022400 	.word	0x58022400
 8008740:	2300      	movs	r3, #0
 8008742:	69fa      	ldr	r2, [r7, #28]
 8008744:	f002 0203 	and.w	r2, r2, #3
 8008748:	0092      	lsls	r2, r2, #2
 800874a:	4093      	lsls	r3, r2
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	4313      	orrs	r3, r2
 8008750:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008752:	4938      	ldr	r1, [pc, #224]	@ (8008834 <HAL_GPIO_Init+0x34c>)
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	089b      	lsrs	r3, r3, #2
 8008758:	3302      	adds	r3, #2
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	43db      	mvns	r3, r3
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	4013      	ands	r3, r2
 8008770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	4313      	orrs	r3, r2
 8008784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800878e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	43db      	mvns	r3, r3
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	4013      	ands	r3, r2
 800879e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80087b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	43db      	mvns	r3, r3
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	4013      	ands	r3, r2
 80087ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	4313      	orrs	r3, r2
 80087de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	43db      	mvns	r3, r3
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	4013      	ands	r3, r2
 80087f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	4313      	orrs	r3, r2
 8008808:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3301      	adds	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	fa22 f303 	lsr.w	r3, r2, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	f47f ae6b 	bne.w	80084fc <HAL_GPIO_Init+0x14>
  }
}
 8008826:	bf00      	nop
 8008828:	bf00      	nop
 800882a:	3724      	adds	r7, #36	@ 0x24
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	58000400 	.word	0x58000400

08008838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691a      	ldr	r2, [r3, #16]
 8008848:	887b      	ldrh	r3, [r7, #2]
 800884a:	4013      	ands	r3, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008850:	2301      	movs	r3, #1
 8008852:	73fb      	strb	r3, [r7, #15]
 8008854:	e001      	b.n	800885a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	807b      	strh	r3, [r7, #2]
 8008874:	4613      	mov	r3, r2
 8008876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008878:	787b      	ldrb	r3, [r7, #1]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800887e:	887a      	ldrh	r2, [r7, #2]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008884:	e003      	b.n	800888e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008886:	887b      	ldrh	r3, [r7, #2]
 8008888:	041a      	lsls	r2, r3, #16
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	619a      	str	r2, [r3, #24]
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
	...

0800889c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80088a4:	4b19      	ldr	r3, [pc, #100]	@ (800890c <HAL_PWREx_ConfigSupply+0x70>)
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	d00a      	beq.n	80088c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80088b0:	4b16      	ldr	r3, [pc, #88]	@ (800890c <HAL_PWREx_ConfigSupply+0x70>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d001      	beq.n	80088c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e01f      	b.n	8008902 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	e01d      	b.n	8008902 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80088c6:	4b11      	ldr	r3, [pc, #68]	@ (800890c <HAL_PWREx_ConfigSupply+0x70>)
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f023 0207 	bic.w	r2, r3, #7
 80088ce:	490f      	ldr	r1, [pc, #60]	@ (800890c <HAL_PWREx_ConfigSupply+0x70>)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80088d6:	f7fa f949 	bl	8002b6c <HAL_GetTick>
 80088da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80088dc:	e009      	b.n	80088f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80088de:	f7fa f945 	bl	8002b6c <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088ec:	d901      	bls.n	80088f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e007      	b.n	8008902 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80088f2:	4b06      	ldr	r3, [pc, #24]	@ (800890c <HAL_PWREx_ConfigSupply+0x70>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088fe:	d1ee      	bne.n	80088de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	58024800 	.word	0x58024800

08008910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08c      	sub	sp, #48	@ 0x30
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e3c8      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 8087 	beq.w	8008a3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008930:	4b88      	ldr	r3, [pc, #544]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800893a:	4b86      	ldr	r3, [pc, #536]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 800893c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008942:	2b10      	cmp	r3, #16
 8008944:	d007      	beq.n	8008956 <HAL_RCC_OscConfig+0x46>
 8008946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008948:	2b18      	cmp	r3, #24
 800894a:	d110      	bne.n	800896e <HAL_RCC_OscConfig+0x5e>
 800894c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d10b      	bne.n	800896e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008956:	4b7f      	ldr	r3, [pc, #508]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d06c      	beq.n	8008a3c <HAL_RCC_OscConfig+0x12c>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d168      	bne.n	8008a3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e3a2      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008976:	d106      	bne.n	8008986 <HAL_RCC_OscConfig+0x76>
 8008978:	4b76      	ldr	r3, [pc, #472]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a75      	ldr	r2, [pc, #468]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 800897e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	e02e      	b.n	80089e4 <HAL_RCC_OscConfig+0xd4>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10c      	bne.n	80089a8 <HAL_RCC_OscConfig+0x98>
 800898e:	4b71      	ldr	r3, [pc, #452]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a70      	ldr	r2, [pc, #448]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	4b6e      	ldr	r3, [pc, #440]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a6d      	ldr	r2, [pc, #436]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 80089a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	e01d      	b.n	80089e4 <HAL_RCC_OscConfig+0xd4>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089b0:	d10c      	bne.n	80089cc <HAL_RCC_OscConfig+0xbc>
 80089b2:	4b68      	ldr	r3, [pc, #416]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a67      	ldr	r2, [pc, #412]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 80089b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	4b65      	ldr	r3, [pc, #404]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a64      	ldr	r2, [pc, #400]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 80089c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	e00b      	b.n	80089e4 <HAL_RCC_OscConfig+0xd4>
 80089cc:	4b61      	ldr	r3, [pc, #388]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a60      	ldr	r2, [pc, #384]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 80089d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	4b5e      	ldr	r3, [pc, #376]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a5d      	ldr	r2, [pc, #372]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 80089de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d013      	beq.n	8008a14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ec:	f7fa f8be 	bl	8002b6c <HAL_GetTick>
 80089f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089f2:	e008      	b.n	8008a06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089f4:	f7fa f8ba 	bl	8002b6c <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	2b64      	cmp	r3, #100	@ 0x64
 8008a00:	d901      	bls.n	8008a06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e356      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a06:	4b53      	ldr	r3, [pc, #332]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0f0      	beq.n	80089f4 <HAL_RCC_OscConfig+0xe4>
 8008a12:	e014      	b.n	8008a3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a14:	f7fa f8aa 	bl	8002b6c <HAL_GetTick>
 8008a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a1a:	e008      	b.n	8008a2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a1c:	f7fa f8a6 	bl	8002b6c <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b64      	cmp	r3, #100	@ 0x64
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e342      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a2e:	4b49      	ldr	r3, [pc, #292]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1f0      	bne.n	8008a1c <HAL_RCC_OscConfig+0x10c>
 8008a3a:	e000      	b.n	8008a3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f000 808c 	beq.w	8008b64 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a4c:	4b41      	ldr	r3, [pc, #260]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a56:	4b3f      	ldr	r3, [pc, #252]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a5a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d007      	beq.n	8008a72 <HAL_RCC_OscConfig+0x162>
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	2b18      	cmp	r3, #24
 8008a66:	d137      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x1c8>
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d132      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a72:	4b38      	ldr	r3, [pc, #224]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d005      	beq.n	8008a8a <HAL_RCC_OscConfig+0x17a>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e314      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a8a:	4b32      	ldr	r3, [pc, #200]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f023 0219 	bic.w	r2, r3, #25
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	492f      	ldr	r1, [pc, #188]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9c:	f7fa f866 	bl	8002b6c <HAL_GetTick>
 8008aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aa4:	f7fa f862 	bl	8002b6c <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e2fe      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ab6:	4b27      	ldr	r3, [pc, #156]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0f0      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ac2:	4b24      	ldr	r3, [pc, #144]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	061b      	lsls	r3, r3, #24
 8008ad0:	4920      	ldr	r1, [pc, #128]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ad6:	e045      	b.n	8008b64 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d026      	beq.n	8008b2e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f023 0219 	bic.w	r2, r3, #25
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	4919      	ldr	r1, [pc, #100]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af2:	f7fa f83b 	bl	8002b6c <HAL_GetTick>
 8008af6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008af8:	e008      	b.n	8008b0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008afa:	f7fa f837 	bl	8002b6c <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e2d3      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b0c:	4b11      	ldr	r3, [pc, #68]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0f0      	beq.n	8008afa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b18:	4b0e      	ldr	r3, [pc, #56]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	061b      	lsls	r3, r3, #24
 8008b26:	490b      	ldr	r1, [pc, #44]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	604b      	str	r3, [r1, #4]
 8008b2c:	e01a      	b.n	8008b64 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b2e:	4b09      	ldr	r3, [pc, #36]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a08      	ldr	r2, [pc, #32]	@ (8008b54 <HAL_RCC_OscConfig+0x244>)
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b3a:	f7fa f817 	bl	8002b6c <HAL_GetTick>
 8008b3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b40:	e00a      	b.n	8008b58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b42:	f7fa f813 	bl	8002b6c <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d903      	bls.n	8008b58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e2af      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
 8008b54:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b58:	4b96      	ldr	r3, [pc, #600]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0304 	and.w	r3, r3, #4
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1ee      	bne.n	8008b42 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0310 	and.w	r3, r3, #16
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d06a      	beq.n	8008c46 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b70:	4b90      	ldr	r3, [pc, #576]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b78:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b7a:	4b8e      	ldr	r3, [pc, #568]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	2b08      	cmp	r3, #8
 8008b84:	d007      	beq.n	8008b96 <HAL_RCC_OscConfig+0x286>
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b18      	cmp	r3, #24
 8008b8a:	d11b      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x2b4>
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d116      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b96:	4b87      	ldr	r3, [pc, #540]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <HAL_RCC_OscConfig+0x29e>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	2b80      	cmp	r3, #128	@ 0x80
 8008ba8:	d001      	beq.n	8008bae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e282      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bae:	4b81      	ldr	r3, [pc, #516]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	061b      	lsls	r3, r3, #24
 8008bbc:	497d      	ldr	r1, [pc, #500]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bc2:	e040      	b.n	8008c46 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d023      	beq.n	8008c14 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008bcc:	4b79      	ldr	r3, [pc, #484]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a78      	ldr	r2, [pc, #480]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd8:	f7f9 ffc8 	bl	8002b6c <HAL_GetTick>
 8008bdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bde:	e008      	b.n	8008bf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008be0:	f7f9 ffc4 	bl	8002b6c <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e260      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bf2:	4b70      	ldr	r3, [pc, #448]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0f0      	beq.n	8008be0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	061b      	lsls	r3, r3, #24
 8008c0c:	4969      	ldr	r1, [pc, #420]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60cb      	str	r3, [r1, #12]
 8008c12:	e018      	b.n	8008c46 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c14:	4b67      	ldr	r3, [pc, #412]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a66      	ldr	r2, [pc, #408]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c20:	f7f9 ffa4 	bl	8002b6c <HAL_GetTick>
 8008c24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c26:	e008      	b.n	8008c3a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c28:	f7f9 ffa0 	bl	8002b6c <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d901      	bls.n	8008c3a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e23c      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c3a:	4b5e      	ldr	r3, [pc, #376]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f0      	bne.n	8008c28 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d036      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d019      	beq.n	8008c8e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c5a:	4b56      	ldr	r3, [pc, #344]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c5e:	4a55      	ldr	r2, [pc, #340]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c60:	f043 0301 	orr.w	r3, r3, #1
 8008c64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c66:	f7f9 ff81 	bl	8002b6c <HAL_GetTick>
 8008c6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c6c:	e008      	b.n	8008c80 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c6e:	f7f9 ff7d 	bl	8002b6c <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d901      	bls.n	8008c80 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e219      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c80:	4b4c      	ldr	r3, [pc, #304]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0f0      	beq.n	8008c6e <HAL_RCC_OscConfig+0x35e>
 8008c8c:	e018      	b.n	8008cc0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c8e:	4b49      	ldr	r3, [pc, #292]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c92:	4a48      	ldr	r2, [pc, #288]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008c94:	f023 0301 	bic.w	r3, r3, #1
 8008c98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c9a:	f7f9 ff67 	bl	8002b6c <HAL_GetTick>
 8008c9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ca0:	e008      	b.n	8008cb4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ca2:	f7f9 ff63 	bl	8002b6c <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d901      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e1ff      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1f0      	bne.n	8008ca2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0320 	and.w	r3, r3, #32
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d036      	beq.n	8008d3a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d019      	beq.n	8008d08 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008cd4:	4b37      	ldr	r3, [pc, #220]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a36      	ldr	r2, [pc, #216]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008cda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008cde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ce0:	f7f9 ff44 	bl	8002b6c <HAL_GetTick>
 8008ce4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ce8:	f7f9 ff40 	bl	8002b6c <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e1dc      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f0      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x3d8>
 8008d06:	e018      	b.n	8008d3a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d08:	4b2a      	ldr	r3, [pc, #168]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a29      	ldr	r2, [pc, #164]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008d0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d14:	f7f9 ff2a 	bl	8002b6c <HAL_GetTick>
 8008d18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d1a:	e008      	b.n	8008d2e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d1c:	f7f9 ff26 	bl	8002b6c <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d901      	bls.n	8008d2e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e1c2      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d2e:	4b21      	ldr	r3, [pc, #132]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f0      	bne.n	8008d1c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0304 	and.w	r3, r3, #4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 8086 	beq.w	8008e54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d48:	4b1b      	ldr	r3, [pc, #108]	@ (8008db8 <HAL_RCC_OscConfig+0x4a8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8008db8 <HAL_RCC_OscConfig+0x4a8>)
 8008d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d54:	f7f9 ff0a 	bl	8002b6c <HAL_GetTick>
 8008d58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d5a:	e008      	b.n	8008d6e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d5c:	f7f9 ff06 	bl	8002b6c <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	2b64      	cmp	r3, #100	@ 0x64
 8008d68:	d901      	bls.n	8008d6e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e1a2      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d6e:	4b12      	ldr	r3, [pc, #72]	@ (8008db8 <HAL_RCC_OscConfig+0x4a8>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0f0      	beq.n	8008d5c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d106      	bne.n	8008d90 <HAL_RCC_OscConfig+0x480>
 8008d82:	4b0c      	ldr	r3, [pc, #48]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d86:	4a0b      	ldr	r2, [pc, #44]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008d88:	f043 0301 	orr.w	r3, r3, #1
 8008d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d8e:	e032      	b.n	8008df6 <HAL_RCC_OscConfig+0x4e6>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d111      	bne.n	8008dbc <HAL_RCC_OscConfig+0x4ac>
 8008d98:	4b06      	ldr	r3, [pc, #24]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d9c:	4a05      	ldr	r2, [pc, #20]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008d9e:	f023 0301 	bic.w	r3, r3, #1
 8008da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008da4:	4b03      	ldr	r3, [pc, #12]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da8:	4a02      	ldr	r2, [pc, #8]	@ (8008db4 <HAL_RCC_OscConfig+0x4a4>)
 8008daa:	f023 0304 	bic.w	r3, r3, #4
 8008dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8008db0:	e021      	b.n	8008df6 <HAL_RCC_OscConfig+0x4e6>
 8008db2:	bf00      	nop
 8008db4:	58024400 	.word	0x58024400
 8008db8:	58024800 	.word	0x58024800
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	2b05      	cmp	r3, #5
 8008dc2:	d10c      	bne.n	8008dde <HAL_RCC_OscConfig+0x4ce>
 8008dc4:	4b83      	ldr	r3, [pc, #524]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dc8:	4a82      	ldr	r2, [pc, #520]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008dca:	f043 0304 	orr.w	r3, r3, #4
 8008dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dd0:	4b80      	ldr	r3, [pc, #512]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dd4:	4a7f      	ldr	r2, [pc, #508]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008dd6:	f043 0301 	orr.w	r3, r3, #1
 8008dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ddc:	e00b      	b.n	8008df6 <HAL_RCC_OscConfig+0x4e6>
 8008dde:	4b7d      	ldr	r3, [pc, #500]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008de2:	4a7c      	ldr	r2, [pc, #496]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008de4:	f023 0301 	bic.w	r3, r3, #1
 8008de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dea:	4b7a      	ldr	r3, [pc, #488]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dee:	4a79      	ldr	r2, [pc, #484]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008df0:	f023 0304 	bic.w	r3, r3, #4
 8008df4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d015      	beq.n	8008e2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dfe:	f7f9 feb5 	bl	8002b6c <HAL_GetTick>
 8008e02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e04:	e00a      	b.n	8008e1c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e06:	f7f9 feb1 	bl	8002b6c <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e14b      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e1c:	4b6d      	ldr	r3, [pc, #436]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0ee      	beq.n	8008e06 <HAL_RCC_OscConfig+0x4f6>
 8008e28:	e014      	b.n	8008e54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e2a:	f7f9 fe9f 	bl	8002b6c <HAL_GetTick>
 8008e2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e30:	e00a      	b.n	8008e48 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e32:	f7f9 fe9b 	bl	8002b6c <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d901      	bls.n	8008e48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e135      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e48:	4b62      	ldr	r3, [pc, #392]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1ee      	bne.n	8008e32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 812a 	beq.w	80090b2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e66:	2b18      	cmp	r3, #24
 8008e68:	f000 80ba 	beq.w	8008fe0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	f040 8095 	bne.w	8008fa0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e76:	4b57      	ldr	r3, [pc, #348]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a56      	ldr	r2, [pc, #344]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008e7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e82:	f7f9 fe73 	bl	8002b6c <HAL_GetTick>
 8008e86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e88:	e008      	b.n	8008e9c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e8a:	f7f9 fe6f 	bl	8002b6c <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d901      	bls.n	8008e9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e10b      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1f0      	bne.n	8008e8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ea8:	4b4a      	ldr	r3, [pc, #296]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008eaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008eac:	4b4a      	ldr	r3, [pc, #296]	@ (8008fd8 <HAL_RCC_OscConfig+0x6c8>)
 8008eae:	4013      	ands	r3, r2
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008eb8:	0112      	lsls	r2, r2, #4
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	4945      	ldr	r1, [pc, #276]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	025b      	lsls	r3, r3, #9
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008edc:	3b01      	subs	r3, #1
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ee4:	431a      	orrs	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eea:	3b01      	subs	r3, #1
 8008eec:	061b      	lsls	r3, r3, #24
 8008eee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ef2:	4938      	ldr	r1, [pc, #224]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ef8:	4b36      	ldr	r3, [pc, #216]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efc:	4a35      	ldr	r2, [pc, #212]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008efe:	f023 0301 	bic.w	r3, r3, #1
 8008f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f04:	4b33      	ldr	r3, [pc, #204]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f08:	4b34      	ldr	r3, [pc, #208]	@ (8008fdc <HAL_RCC_OscConfig+0x6cc>)
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008f10:	00d2      	lsls	r2, r2, #3
 8008f12:	4930      	ldr	r1, [pc, #192]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f18:	4b2e      	ldr	r3, [pc, #184]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1c:	f023 020c 	bic.w	r2, r3, #12
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f24:	492b      	ldr	r1, [pc, #172]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2e:	f023 0202 	bic.w	r2, r3, #2
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f36:	4927      	ldr	r1, [pc, #156]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f3c:	4b25      	ldr	r3, [pc, #148]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f40:	4a24      	ldr	r2, [pc, #144]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f48:	4b22      	ldr	r3, [pc, #136]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	4a21      	ldr	r2, [pc, #132]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f54:	4b1f      	ldr	r3, [pc, #124]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f58:	4a1e      	ldr	r2, [pc, #120]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008f60:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	4a1b      	ldr	r2, [pc, #108]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f66:	f043 0301 	orr.w	r3, r3, #1
 8008f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f6c:	4b19      	ldr	r3, [pc, #100]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a18      	ldr	r2, [pc, #96]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f78:	f7f9 fdf8 	bl	8002b6c <HAL_GetTick>
 8008f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f7e:	e008      	b.n	8008f92 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f80:	f7f9 fdf4 	bl	8002b6c <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e090      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f92:	4b10      	ldr	r3, [pc, #64]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0f0      	beq.n	8008f80 <HAL_RCC_OscConfig+0x670>
 8008f9e:	e088      	b.n	80090b2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fac:	f7f9 fdde 	bl	8002b6c <HAL_GetTick>
 8008fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fb4:	f7f9 fdda 	bl	8002b6c <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e076      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fc6:	4b03      	ldr	r3, [pc, #12]	@ (8008fd4 <HAL_RCC_OscConfig+0x6c4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1f0      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x6a4>
 8008fd2:	e06e      	b.n	80090b2 <HAL_RCC_OscConfig+0x7a2>
 8008fd4:	58024400 	.word	0x58024400
 8008fd8:	fffffc0c 	.word	0xfffffc0c
 8008fdc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008fe0:	4b36      	ldr	r3, [pc, #216]	@ (80090bc <HAL_RCC_OscConfig+0x7ac>)
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008fe6:	4b35      	ldr	r3, [pc, #212]	@ (80090bc <HAL_RCC_OscConfig+0x7ac>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d031      	beq.n	8009058 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f003 0203 	and.w	r2, r3, #3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d12a      	bne.n	8009058 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	091b      	lsrs	r3, r3, #4
 8009006:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800900e:	429a      	cmp	r2, r3
 8009010:	d122      	bne.n	8009058 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800901e:	429a      	cmp	r2, r3
 8009020:	d11a      	bne.n	8009058 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	0a5b      	lsrs	r3, r3, #9
 8009026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800902e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009030:	429a      	cmp	r2, r3
 8009032:	d111      	bne.n	8009058 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	0c1b      	lsrs	r3, r3, #16
 8009038:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009040:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009042:	429a      	cmp	r2, r3
 8009044:	d108      	bne.n	8009058 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	0e1b      	lsrs	r3, r3, #24
 800904a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009052:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009054:	429a      	cmp	r2, r3
 8009056:	d001      	beq.n	800905c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e02b      	b.n	80090b4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800905c:	4b17      	ldr	r3, [pc, #92]	@ (80090bc <HAL_RCC_OscConfig+0x7ac>)
 800905e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009060:	08db      	lsrs	r3, r3, #3
 8009062:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009066:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	429a      	cmp	r2, r3
 8009070:	d01f      	beq.n	80090b2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009072:	4b12      	ldr	r3, [pc, #72]	@ (80090bc <HAL_RCC_OscConfig+0x7ac>)
 8009074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009076:	4a11      	ldr	r2, [pc, #68]	@ (80090bc <HAL_RCC_OscConfig+0x7ac>)
 8009078:	f023 0301 	bic.w	r3, r3, #1
 800907c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800907e:	f7f9 fd75 	bl	8002b6c <HAL_GetTick>
 8009082:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009084:	bf00      	nop
 8009086:	f7f9 fd71 	bl	8002b6c <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	4293      	cmp	r3, r2
 8009090:	d0f9      	beq.n	8009086 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009092:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <HAL_RCC_OscConfig+0x7ac>)
 8009094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009096:	4b0a      	ldr	r3, [pc, #40]	@ (80090c0 <HAL_RCC_OscConfig+0x7b0>)
 8009098:	4013      	ands	r3, r2
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800909e:	00d2      	lsls	r2, r2, #3
 80090a0:	4906      	ldr	r1, [pc, #24]	@ (80090bc <HAL_RCC_OscConfig+0x7ac>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80090a6:	4b05      	ldr	r3, [pc, #20]	@ (80090bc <HAL_RCC_OscConfig+0x7ac>)
 80090a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090aa:	4a04      	ldr	r2, [pc, #16]	@ (80090bc <HAL_RCC_OscConfig+0x7ac>)
 80090ac:	f043 0301 	orr.w	r3, r3, #1
 80090b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3730      	adds	r7, #48	@ 0x30
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	58024400 	.word	0x58024400
 80090c0:	ffff0007 	.word	0xffff0007

080090c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e19c      	b.n	8009412 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090d8:	4b8a      	ldr	r3, [pc, #552]	@ (8009304 <HAL_RCC_ClockConfig+0x240>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 030f 	and.w	r3, r3, #15
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d910      	bls.n	8009108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090e6:	4b87      	ldr	r3, [pc, #540]	@ (8009304 <HAL_RCC_ClockConfig+0x240>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f023 020f 	bic.w	r2, r3, #15
 80090ee:	4985      	ldr	r1, [pc, #532]	@ (8009304 <HAL_RCC_ClockConfig+0x240>)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090f6:	4b83      	ldr	r3, [pc, #524]	@ (8009304 <HAL_RCC_ClockConfig+0x240>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 030f 	and.w	r3, r3, #15
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	d001      	beq.n	8009108 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e184      	b.n	8009412 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d010      	beq.n	8009136 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	4b7b      	ldr	r3, [pc, #492]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009120:	429a      	cmp	r2, r3
 8009122:	d908      	bls.n	8009136 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009124:	4b78      	ldr	r3, [pc, #480]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	4975      	ldr	r1, [pc, #468]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009132:	4313      	orrs	r3, r2
 8009134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0308 	and.w	r3, r3, #8
 800913e:	2b00      	cmp	r3, #0
 8009140:	d010      	beq.n	8009164 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	695a      	ldr	r2, [r3, #20]
 8009146:	4b70      	ldr	r3, [pc, #448]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800914e:	429a      	cmp	r2, r3
 8009150:	d908      	bls.n	8009164 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009152:	4b6d      	ldr	r3, [pc, #436]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	496a      	ldr	r1, [pc, #424]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009160:	4313      	orrs	r3, r2
 8009162:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0310 	and.w	r3, r3, #16
 800916c:	2b00      	cmp	r3, #0
 800916e:	d010      	beq.n	8009192 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699a      	ldr	r2, [r3, #24]
 8009174:	4b64      	ldr	r3, [pc, #400]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800917c:	429a      	cmp	r2, r3
 800917e:	d908      	bls.n	8009192 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009180:	4b61      	ldr	r3, [pc, #388]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	495e      	ldr	r1, [pc, #376]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 800918e:	4313      	orrs	r3, r2
 8009190:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d010      	beq.n	80091c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69da      	ldr	r2, [r3, #28]
 80091a2:	4b59      	ldr	r3, [pc, #356]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d908      	bls.n	80091c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091ae:	4b56      	ldr	r3, [pc, #344]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	4953      	ldr	r1, [pc, #332]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80091bc:	4313      	orrs	r3, r2
 80091be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d010      	beq.n	80091ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68da      	ldr	r2, [r3, #12]
 80091d0:	4b4d      	ldr	r3, [pc, #308]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	f003 030f 	and.w	r3, r3, #15
 80091d8:	429a      	cmp	r2, r3
 80091da:	d908      	bls.n	80091ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091dc:	4b4a      	ldr	r3, [pc, #296]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f023 020f 	bic.w	r2, r3, #15
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	4947      	ldr	r1, [pc, #284]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d055      	beq.n	80092a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091fa:	4b43      	ldr	r3, [pc, #268]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	4940      	ldr	r1, [pc, #256]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009208:	4313      	orrs	r3, r2
 800920a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d107      	bne.n	8009224 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009214:	4b3c      	ldr	r3, [pc, #240]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d121      	bne.n	8009264 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e0f6      	b.n	8009412 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	2b03      	cmp	r3, #3
 800922a:	d107      	bne.n	800923c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800922c:	4b36      	ldr	r3, [pc, #216]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d115      	bne.n	8009264 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e0ea      	b.n	8009412 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d107      	bne.n	8009254 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009244:	4b30      	ldr	r3, [pc, #192]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800924c:	2b00      	cmp	r3, #0
 800924e:	d109      	bne.n	8009264 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e0de      	b.n	8009412 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009254:	4b2c      	ldr	r3, [pc, #176]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e0d6      	b.n	8009412 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009264:	4b28      	ldr	r3, [pc, #160]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f023 0207 	bic.w	r2, r3, #7
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	4925      	ldr	r1, [pc, #148]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009272:	4313      	orrs	r3, r2
 8009274:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009276:	f7f9 fc79 	bl	8002b6c <HAL_GetTick>
 800927a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800927c:	e00a      	b.n	8009294 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800927e:	f7f9 fc75 	bl	8002b6c <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800928c:	4293      	cmp	r3, r2
 800928e:	d901      	bls.n	8009294 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e0be      	b.n	8009412 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009294:	4b1c      	ldr	r3, [pc, #112]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d1eb      	bne.n	800927e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d010      	beq.n	80092d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68da      	ldr	r2, [r3, #12]
 80092b6:	4b14      	ldr	r3, [pc, #80]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f003 030f 	and.w	r3, r3, #15
 80092be:	429a      	cmp	r2, r3
 80092c0:	d208      	bcs.n	80092d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092c2:	4b11      	ldr	r3, [pc, #68]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f023 020f 	bic.w	r2, r3, #15
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	490e      	ldr	r1, [pc, #56]	@ (8009308 <HAL_RCC_ClockConfig+0x244>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009304 <HAL_RCC_ClockConfig+0x240>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d214      	bcs.n	800930c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092e2:	4b08      	ldr	r3, [pc, #32]	@ (8009304 <HAL_RCC_ClockConfig+0x240>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f023 020f 	bic.w	r2, r3, #15
 80092ea:	4906      	ldr	r1, [pc, #24]	@ (8009304 <HAL_RCC_ClockConfig+0x240>)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092f2:	4b04      	ldr	r3, [pc, #16]	@ (8009304 <HAL_RCC_ClockConfig+0x240>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d005      	beq.n	800930c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e086      	b.n	8009412 <HAL_RCC_ClockConfig+0x34e>
 8009304:	52002000 	.word	0x52002000
 8009308:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d010      	beq.n	800933a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	691a      	ldr	r2, [r3, #16]
 800931c:	4b3f      	ldr	r3, [pc, #252]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009324:	429a      	cmp	r2, r3
 8009326:	d208      	bcs.n	800933a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009328:	4b3c      	ldr	r3, [pc, #240]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	4939      	ldr	r1, [pc, #228]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 8009336:	4313      	orrs	r3, r2
 8009338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d010      	beq.n	8009368 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	695a      	ldr	r2, [r3, #20]
 800934a:	4b34      	ldr	r3, [pc, #208]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009352:	429a      	cmp	r2, r3
 8009354:	d208      	bcs.n	8009368 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009356:	4b31      	ldr	r3, [pc, #196]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	492e      	ldr	r1, [pc, #184]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 8009364:	4313      	orrs	r3, r2
 8009366:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0310 	and.w	r3, r3, #16
 8009370:	2b00      	cmp	r3, #0
 8009372:	d010      	beq.n	8009396 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699a      	ldr	r2, [r3, #24]
 8009378:	4b28      	ldr	r3, [pc, #160]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009380:	429a      	cmp	r2, r3
 8009382:	d208      	bcs.n	8009396 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009384:	4b25      	ldr	r3, [pc, #148]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	4922      	ldr	r1, [pc, #136]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 8009392:	4313      	orrs	r3, r2
 8009394:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d010      	beq.n	80093c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69da      	ldr	r2, [r3, #28]
 80093a6:	4b1d      	ldr	r3, [pc, #116]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d208      	bcs.n	80093c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80093b2:	4b1a      	ldr	r3, [pc, #104]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	4917      	ldr	r1, [pc, #92]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093c4:	f000 f834 	bl	8009430 <HAL_RCC_GetSysClockFreq>
 80093c8:	4602      	mov	r2, r0
 80093ca:	4b14      	ldr	r3, [pc, #80]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	0a1b      	lsrs	r3, r3, #8
 80093d0:	f003 030f 	and.w	r3, r3, #15
 80093d4:	4912      	ldr	r1, [pc, #72]	@ (8009420 <HAL_RCC_ClockConfig+0x35c>)
 80093d6:	5ccb      	ldrb	r3, [r1, r3]
 80093d8:	f003 031f 	and.w	r3, r3, #31
 80093dc:	fa22 f303 	lsr.w	r3, r2, r3
 80093e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093e2:	4b0e      	ldr	r3, [pc, #56]	@ (800941c <HAL_RCC_ClockConfig+0x358>)
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	4a0d      	ldr	r2, [pc, #52]	@ (8009420 <HAL_RCC_ClockConfig+0x35c>)
 80093ec:	5cd3      	ldrb	r3, [r2, r3]
 80093ee:	f003 031f 	and.w	r3, r3, #31
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	fa22 f303 	lsr.w	r3, r2, r3
 80093f8:	4a0a      	ldr	r2, [pc, #40]	@ (8009424 <HAL_RCC_ClockConfig+0x360>)
 80093fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009428 <HAL_RCC_ClockConfig+0x364>)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009402:	4b0a      	ldr	r3, [pc, #40]	@ (800942c <HAL_RCC_ClockConfig+0x368>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f7f9 fb66 	bl	8002ad8 <HAL_InitTick>
 800940c:	4603      	mov	r3, r0
 800940e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	58024400 	.word	0x58024400
 8009420:	08014f4c 	.word	0x08014f4c
 8009424:	24000010 	.word	0x24000010
 8009428:	2400000c 	.word	0x2400000c
 800942c:	24000014 	.word	0x24000014

08009430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009430:	b480      	push	{r7}
 8009432:	b089      	sub	sp, #36	@ 0x24
 8009434:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009436:	4bb3      	ldr	r3, [pc, #716]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800943e:	2b18      	cmp	r3, #24
 8009440:	f200 8155 	bhi.w	80096ee <HAL_RCC_GetSysClockFreq+0x2be>
 8009444:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	080094b1 	.word	0x080094b1
 8009450:	080096ef 	.word	0x080096ef
 8009454:	080096ef 	.word	0x080096ef
 8009458:	080096ef 	.word	0x080096ef
 800945c:	080096ef 	.word	0x080096ef
 8009460:	080096ef 	.word	0x080096ef
 8009464:	080096ef 	.word	0x080096ef
 8009468:	080096ef 	.word	0x080096ef
 800946c:	080094d7 	.word	0x080094d7
 8009470:	080096ef 	.word	0x080096ef
 8009474:	080096ef 	.word	0x080096ef
 8009478:	080096ef 	.word	0x080096ef
 800947c:	080096ef 	.word	0x080096ef
 8009480:	080096ef 	.word	0x080096ef
 8009484:	080096ef 	.word	0x080096ef
 8009488:	080096ef 	.word	0x080096ef
 800948c:	080094dd 	.word	0x080094dd
 8009490:	080096ef 	.word	0x080096ef
 8009494:	080096ef 	.word	0x080096ef
 8009498:	080096ef 	.word	0x080096ef
 800949c:	080096ef 	.word	0x080096ef
 80094a0:	080096ef 	.word	0x080096ef
 80094a4:	080096ef 	.word	0x080096ef
 80094a8:	080096ef 	.word	0x080096ef
 80094ac:	080094e3 	.word	0x080094e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094b0:	4b94      	ldr	r3, [pc, #592]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0320 	and.w	r3, r3, #32
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d009      	beq.n	80094d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094bc:	4b91      	ldr	r3, [pc, #580]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	08db      	lsrs	r3, r3, #3
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	4a90      	ldr	r2, [pc, #576]	@ (8009708 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094c8:	fa22 f303 	lsr.w	r3, r2, r3
 80094cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80094ce:	e111      	b.n	80096f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094d0:	4b8d      	ldr	r3, [pc, #564]	@ (8009708 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094d2:	61bb      	str	r3, [r7, #24]
      break;
 80094d4:	e10e      	b.n	80096f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094d6:	4b8d      	ldr	r3, [pc, #564]	@ (800970c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094d8:	61bb      	str	r3, [r7, #24]
      break;
 80094da:	e10b      	b.n	80096f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094dc:	4b8c      	ldr	r3, [pc, #560]	@ (8009710 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094de:	61bb      	str	r3, [r7, #24]
      break;
 80094e0:	e108      	b.n	80096f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094e2:	4b88      	ldr	r3, [pc, #544]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e6:	f003 0303 	and.w	r3, r3, #3
 80094ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80094ec:	4b85      	ldr	r3, [pc, #532]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f0:	091b      	lsrs	r3, r3, #4
 80094f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80094f8:	4b82      	ldr	r3, [pc, #520]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009502:	4b80      	ldr	r3, [pc, #512]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009506:	08db      	lsrs	r3, r3, #3
 8009508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	fb02 f303 	mul.w	r3, r2, r3
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 80e1 	beq.w	80096e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2b02      	cmp	r3, #2
 800952a:	f000 8083 	beq.w	8009634 <HAL_RCC_GetSysClockFreq+0x204>
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b02      	cmp	r3, #2
 8009532:	f200 80a1 	bhi.w	8009678 <HAL_RCC_GetSysClockFreq+0x248>
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <HAL_RCC_GetSysClockFreq+0x114>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d056      	beq.n	80095f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009542:	e099      	b.n	8009678 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009544:	4b6f      	ldr	r3, [pc, #444]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d02d      	beq.n	80095ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009550:	4b6c      	ldr	r3, [pc, #432]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	08db      	lsrs	r3, r3, #3
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	4a6b      	ldr	r2, [pc, #428]	@ (8009708 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800955c:	fa22 f303 	lsr.w	r3, r2, r3
 8009560:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	ee07 3a90 	vmov	s15, r3
 8009568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800957a:	4b62      	ldr	r3, [pc, #392]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800957c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958a:	ed97 6a02 	vldr	s12, [r7, #8]
 800958e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009714 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800959a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800959e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80095aa:	e087      	b.n	80096bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	ee07 3a90 	vmov	s15, r3
 80095b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009718 <HAL_RCC_GetSysClockFreq+0x2e8>
 80095ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095be:	4b51      	ldr	r3, [pc, #324]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80095d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009714 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095ee:	e065      	b.n	80096bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800971c <HAL_RCC_GetSysClockFreq+0x2ec>
 80095fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009602:	4b40      	ldr	r3, [pc, #256]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009612:	ed97 6a02 	vldr	s12, [r7, #8]
 8009616:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009714 <HAL_RCC_GetSysClockFreq+0x2e4>
 800961a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800962a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009632:	e043      	b.n	80096bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009720 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009646:	4b2f      	ldr	r3, [pc, #188]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800964a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009656:	ed97 6a02 	vldr	s12, [r7, #8]
 800965a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009714 <HAL_RCC_GetSysClockFreq+0x2e4>
 800965e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800966a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009676:	e021      	b.n	80096bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009682:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800971c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968a:	4b1e      	ldr	r3, [pc, #120]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800968c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800968e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969a:	ed97 6a02 	vldr	s12, [r7, #8]
 800969e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009714 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80096bc:	4b11      	ldr	r3, [pc, #68]	@ (8009704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c0:	0a5b      	lsrs	r3, r3, #9
 80096c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096c6:	3301      	adds	r3, #1
 80096c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80096d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096e0:	ee17 3a90 	vmov	r3, s15
 80096e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096e6:	e005      	b.n	80096f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61bb      	str	r3, [r7, #24]
      break;
 80096ec:	e002      	b.n	80096f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80096ee:	4b07      	ldr	r3, [pc, #28]	@ (800970c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80096f0:	61bb      	str	r3, [r7, #24]
      break;
 80096f2:	bf00      	nop
  }

  return sysclockfreq;
 80096f4:	69bb      	ldr	r3, [r7, #24]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3724      	adds	r7, #36	@ 0x24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	58024400 	.word	0x58024400
 8009708:	03d09000 	.word	0x03d09000
 800970c:	003d0900 	.word	0x003d0900
 8009710:	016e3600 	.word	0x016e3600
 8009714:	46000000 	.word	0x46000000
 8009718:	4c742400 	.word	0x4c742400
 800971c:	4a742400 	.word	0x4a742400
 8009720:	4bb71b00 	.word	0x4bb71b00

08009724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800972a:	f7ff fe81 	bl	8009430 <HAL_RCC_GetSysClockFreq>
 800972e:	4602      	mov	r2, r0
 8009730:	4b10      	ldr	r3, [pc, #64]	@ (8009774 <HAL_RCC_GetHCLKFreq+0x50>)
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	0a1b      	lsrs	r3, r3, #8
 8009736:	f003 030f 	and.w	r3, r3, #15
 800973a:	490f      	ldr	r1, [pc, #60]	@ (8009778 <HAL_RCC_GetHCLKFreq+0x54>)
 800973c:	5ccb      	ldrb	r3, [r1, r3]
 800973e:	f003 031f 	and.w	r3, r3, #31
 8009742:	fa22 f303 	lsr.w	r3, r2, r3
 8009746:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009748:	4b0a      	ldr	r3, [pc, #40]	@ (8009774 <HAL_RCC_GetHCLKFreq+0x50>)
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	f003 030f 	and.w	r3, r3, #15
 8009750:	4a09      	ldr	r2, [pc, #36]	@ (8009778 <HAL_RCC_GetHCLKFreq+0x54>)
 8009752:	5cd3      	ldrb	r3, [r2, r3]
 8009754:	f003 031f 	and.w	r3, r3, #31
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	fa22 f303 	lsr.w	r3, r2, r3
 800975e:	4a07      	ldr	r2, [pc, #28]	@ (800977c <HAL_RCC_GetHCLKFreq+0x58>)
 8009760:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009762:	4a07      	ldr	r2, [pc, #28]	@ (8009780 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009768:	4b04      	ldr	r3, [pc, #16]	@ (800977c <HAL_RCC_GetHCLKFreq+0x58>)
 800976a:	681b      	ldr	r3, [r3, #0]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	58024400 	.word	0x58024400
 8009778:	08014f4c 	.word	0x08014f4c
 800977c:	24000010 	.word	0x24000010
 8009780:	2400000c 	.word	0x2400000c

08009784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009788:	f7ff ffcc 	bl	8009724 <HAL_RCC_GetHCLKFreq>
 800978c:	4602      	mov	r2, r0
 800978e:	4b06      	ldr	r3, [pc, #24]	@ (80097a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	091b      	lsrs	r3, r3, #4
 8009794:	f003 0307 	and.w	r3, r3, #7
 8009798:	4904      	ldr	r1, [pc, #16]	@ (80097ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800979a:	5ccb      	ldrb	r3, [r1, r3]
 800979c:	f003 031f 	and.w	r3, r3, #31
 80097a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	58024400 	.word	0x58024400
 80097ac:	08014f4c 	.word	0x08014f4c

080097b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80097b4:	f7ff ffb6 	bl	8009724 <HAL_RCC_GetHCLKFreq>
 80097b8:	4602      	mov	r2, r0
 80097ba:	4b06      	ldr	r3, [pc, #24]	@ (80097d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	0a1b      	lsrs	r3, r3, #8
 80097c0:	f003 0307 	and.w	r3, r3, #7
 80097c4:	4904      	ldr	r1, [pc, #16]	@ (80097d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097c6:	5ccb      	ldrb	r3, [r1, r3]
 80097c8:	f003 031f 	and.w	r3, r3, #31
 80097cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	58024400 	.word	0x58024400
 80097d8:	08014f4c 	.word	0x08014f4c

080097dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097e0:	b0c6      	sub	sp, #280	@ 0x118
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80097e8:	2300      	movs	r3, #0
 80097ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097ee:	2300      	movs	r3, #0
 80097f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80097f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009800:	2500      	movs	r5, #0
 8009802:	ea54 0305 	orrs.w	r3, r4, r5
 8009806:	d049      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800980c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800980e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009812:	d02f      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009814:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009818:	d828      	bhi.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800981a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800981e:	d01a      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009820:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009824:	d822      	bhi.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800982a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800982e:	d007      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009830:	e01c      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009832:	4bab      	ldr	r3, [pc, #684]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009836:	4aaa      	ldr	r2, [pc, #680]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800983c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800983e:	e01a      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009844:	3308      	adds	r3, #8
 8009846:	2102      	movs	r1, #2
 8009848:	4618      	mov	r0, r3
 800984a:	f002 fa49 	bl	800bce0 <RCCEx_PLL2_Config>
 800984e:	4603      	mov	r3, r0
 8009850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009854:	e00f      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985a:	3328      	adds	r3, #40	@ 0x28
 800985c:	2102      	movs	r1, #2
 800985e:	4618      	mov	r0, r3
 8009860:	f002 faf0 	bl	800be44 <RCCEx_PLL3_Config>
 8009864:	4603      	mov	r3, r0
 8009866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800986a:	e004      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009872:	e000      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009876:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800987e:	4b98      	ldr	r3, [pc, #608]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009882:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800988a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800988c:	4a94      	ldr	r2, [pc, #592]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800988e:	430b      	orrs	r3, r1
 8009890:	6513      	str	r3, [r2, #80]	@ 0x50
 8009892:	e003      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009898:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800989c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80098a8:	f04f 0900 	mov.w	r9, #0
 80098ac:	ea58 0309 	orrs.w	r3, r8, r9
 80098b0:	d047      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80098b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d82a      	bhi.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80098bc:	a201      	add	r2, pc, #4	@ (adr r2, 80098c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80098be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	080098d9 	.word	0x080098d9
 80098c8:	080098e7 	.word	0x080098e7
 80098cc:	080098fd 	.word	0x080098fd
 80098d0:	0800991b 	.word	0x0800991b
 80098d4:	0800991b 	.word	0x0800991b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d8:	4b81      	ldr	r3, [pc, #516]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098dc:	4a80      	ldr	r2, [pc, #512]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098e4:	e01a      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ea:	3308      	adds	r3, #8
 80098ec:	2100      	movs	r1, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f002 f9f6 	bl	800bce0 <RCCEx_PLL2_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098fa:	e00f      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009900:	3328      	adds	r3, #40	@ 0x28
 8009902:	2100      	movs	r1, #0
 8009904:	4618      	mov	r0, r3
 8009906:	f002 fa9d 	bl	800be44 <RCCEx_PLL3_Config>
 800990a:	4603      	mov	r3, r0
 800990c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009910:	e004      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009918:	e000      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800991a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800991c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009924:	4b6e      	ldr	r3, [pc, #440]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009928:	f023 0107 	bic.w	r1, r3, #7
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009932:	4a6b      	ldr	r2, [pc, #428]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009934:	430b      	orrs	r3, r1
 8009936:	6513      	str	r3, [r2, #80]	@ 0x50
 8009938:	e003      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800993a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800993e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800994e:	f04f 0b00 	mov.w	fp, #0
 8009952:	ea5a 030b 	orrs.w	r3, sl, fp
 8009956:	d05b      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009960:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009964:	d03b      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009966:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800996a:	d834      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800996c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009970:	d037      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009972:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009976:	d82e      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009978:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800997c:	d033      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800997e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009982:	d828      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009988:	d01a      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800998a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800998e:	d822      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009994:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009998:	d007      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800999a:	e01c      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999c:	4b50      	ldr	r3, [pc, #320]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800999e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a0:	4a4f      	ldr	r2, [pc, #316]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099a8:	e01e      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	3308      	adds	r3, #8
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f002 f994 	bl	800bce0 <RCCEx_PLL2_Config>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80099be:	e013      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c4:	3328      	adds	r3, #40	@ 0x28
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f002 fa3b 	bl	800be44 <RCCEx_PLL3_Config>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099d4:	e008      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099dc:	e004      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099de:	bf00      	nop
 80099e0:	e002      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099e2:	bf00      	nop
 80099e4:	e000      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10b      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80099f0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099f4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80099f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a00:	4a37      	ldr	r2, [pc, #220]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a02:	430b      	orrs	r3, r1
 8009a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a06:	e003      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009a20:	2300      	movs	r3, #0
 8009a22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009a26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	d05d      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009a38:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009a3c:	d03b      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009a3e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009a42:	d834      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a48:	d037      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009a4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a4e:	d82e      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a54:	d033      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009a56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a5a:	d828      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a60:	d01a      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009a62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a66:	d822      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a70:	d007      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009a72:	e01c      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a74:	4b1a      	ldr	r3, [pc, #104]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	4a19      	ldr	r2, [pc, #100]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a80:	e01e      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a86:	3308      	adds	r3, #8
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f002 f928 	bl	800bce0 <RCCEx_PLL2_Config>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a96:	e013      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a9c:	3328      	adds	r3, #40	@ 0x28
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f002 f9cf 	bl	800be44 <RCCEx_PLL3_Config>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009aac:	e008      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ab4:	e004      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009ab6:	bf00      	nop
 8009ab8:	e002      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009aba:	bf00      	nop
 8009abc:	e000      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10d      	bne.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ac8:	4b05      	ldr	r3, [pc, #20]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009acc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009ad8:	4a01      	ldr	r2, [pc, #4]	@ (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ada:	430b      	orrs	r3, r1
 8009adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ade:	e005      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009af8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009afc:	2300      	movs	r3, #0
 8009afe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b02:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	d03a      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b12:	2b30      	cmp	r3, #48	@ 0x30
 8009b14:	d01f      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009b16:	2b30      	cmp	r3, #48	@ 0x30
 8009b18:	d819      	bhi.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d00c      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	d815      	bhi.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d019      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b26:	2b10      	cmp	r3, #16
 8009b28:	d111      	bne.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b2a:	4baa      	ldr	r3, [pc, #680]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2e:	4aa9      	ldr	r2, [pc, #676]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b36:	e011      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	2102      	movs	r1, #2
 8009b40:	4618      	mov	r0, r3
 8009b42:	f002 f8cd 	bl	800bce0 <RCCEx_PLL2_Config>
 8009b46:	4603      	mov	r3, r0
 8009b48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b4c:	e006      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b54:	e002      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009b56:	bf00      	nop
 8009b58:	e000      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10a      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009b64:	4b9b      	ldr	r3, [pc, #620]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b72:	4a98      	ldr	r2, [pc, #608]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b74:	430b      	orrs	r3, r1
 8009b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b78:	e003      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b92:	2300      	movs	r3, #0
 8009b94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009b98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	d051      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ba8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bac:	d035      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bb2:	d82e      	bhi.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009bb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009bb8:	d031      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009bba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009bbe:	d828      	bhi.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bc4:	d01a      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bca:	d822      	bhi.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bd4:	d007      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009bd6:	e01c      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bdc:	4a7d      	ldr	r2, [pc, #500]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009be4:	e01c      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bea:	3308      	adds	r3, #8
 8009bec:	2100      	movs	r1, #0
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f002 f876 	bl	800bce0 <RCCEx_PLL2_Config>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bfa:	e011      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c00:	3328      	adds	r3, #40	@ 0x28
 8009c02:	2100      	movs	r1, #0
 8009c04:	4618      	mov	r0, r3
 8009c06:	f002 f91d 	bl	800be44 <RCCEx_PLL3_Config>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c10:	e006      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c18:	e002      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009c1a:	bf00      	nop
 8009c1c:	e000      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c28:	4b6a      	ldr	r3, [pc, #424]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c36:	4a67      	ldr	r2, [pc, #412]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c3c:	e003      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009c52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c56:	2300      	movs	r3, #0
 8009c58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c5c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4313      	orrs	r3, r2
 8009c64:	d053      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c70:	d033      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009c72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c76:	d82c      	bhi.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c7c:	d02f      	beq.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009c7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c82:	d826      	bhi.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c88:	d02b      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009c8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c8e:	d820      	bhi.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c94:	d012      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c9a:	d81a      	bhi.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d022      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ca4:	d115      	bne.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009caa:	3308      	adds	r3, #8
 8009cac:	2101      	movs	r1, #1
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f002 f816 	bl	800bce0 <RCCEx_PLL2_Config>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009cba:	e015      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc0:	3328      	adds	r3, #40	@ 0x28
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f002 f8bd 	bl	800be44 <RCCEx_PLL3_Config>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009cd0:	e00a      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cd8:	e006      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cda:	bf00      	nop
 8009cdc:	e004      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cde:	bf00      	nop
 8009ce0:	e002      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009ce2:	bf00      	nop
 8009ce4:	e000      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10a      	bne.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009cf0:	4b38      	ldr	r3, [pc, #224]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cf4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cfe:	4a35      	ldr	r2, [pc, #212]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d00:	430b      	orrs	r3, r1
 8009d02:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d04:	e003      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009d24:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	d058      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d3a:	d033      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d40:	d82c      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d46:	d02f      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d4c:	d826      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d52:	d02b      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009d54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d58:	d820      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d5e:	d012      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d64:	d81a      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d022      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d6e:	d115      	bne.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d74:	3308      	adds	r3, #8
 8009d76:	2101      	movs	r1, #1
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f001 ffb1 	bl	800bce0 <RCCEx_PLL2_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d84:	e015      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8a:	3328      	adds	r3, #40	@ 0x28
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f002 f858 	bl	800be44 <RCCEx_PLL3_Config>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d9a:	e00a      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009da2:	e006      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009da4:	bf00      	nop
 8009da6:	e004      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009da8:	bf00      	nop
 8009daa:	e002      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009dac:	bf00      	nop
 8009dae:	e000      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10e      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009dba:	4b06      	ldr	r3, [pc, #24]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dbe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009dca:	4a02      	ldr	r2, [pc, #8]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dd0:	e006      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009dd2:	bf00      	nop
 8009dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ddc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009df0:	2300      	movs	r3, #0
 8009df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009df6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	d037      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e0a:	d00e      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e10:	d816      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d018      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009e16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e1a:	d111      	bne.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e1c:	4bc4      	ldr	r3, [pc, #784]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e20:	4ac3      	ldr	r2, [pc, #780]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e28:	e00f      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e2e:	3308      	adds	r3, #8
 8009e30:	2101      	movs	r1, #1
 8009e32:	4618      	mov	r0, r3
 8009e34:	f001 ff54 	bl	800bce0 <RCCEx_PLL2_Config>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e3e:	e004      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e46:	e000      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e52:	4bb7      	ldr	r3, [pc, #732]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e60:	4ab3      	ldr	r2, [pc, #716]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e62:	430b      	orrs	r3, r1
 8009e64:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e66:	e003      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e80:	2300      	movs	r3, #0
 8009e82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	d039      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d81c      	bhi.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009edd 	.word	0x08009edd
 8009ea4:	08009eb1 	.word	0x08009eb1
 8009ea8:	08009ebf 	.word	0x08009ebf
 8009eac:	08009edd 	.word	0x08009edd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eb0:	4b9f      	ldr	r3, [pc, #636]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb4:	4a9e      	ldr	r2, [pc, #632]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ebc:	e00f      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec2:	3308      	adds	r3, #8
 8009ec4:	2102      	movs	r1, #2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 ff0a 	bl	800bce0 <RCCEx_PLL2_Config>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ed2:	e004      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009eda:	e000      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ede:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10a      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ee6:	4b92      	ldr	r3, [pc, #584]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eea:	f023 0103 	bic.w	r1, r3, #3
 8009eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ef4:	4a8e      	ldr	r2, [pc, #568]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ef6:	430b      	orrs	r3, r1
 8009ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009efa:	e003      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009f10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f14:	2300      	movs	r3, #0
 8009f16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4313      	orrs	r3, r2
 8009f22:	f000 8099 	beq.w	800a058 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f26:	4b83      	ldr	r3, [pc, #524]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a82      	ldr	r2, [pc, #520]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f32:	f7f8 fe1b 	bl	8002b6c <HAL_GetTick>
 8009f36:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f3a:	e00b      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f3c:	f7f8 fe16 	bl	8002b6c <HAL_GetTick>
 8009f40:	4602      	mov	r2, r0
 8009f42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	2b64      	cmp	r3, #100	@ 0x64
 8009f4a:	d903      	bls.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f52:	e005      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f54:	4b77      	ldr	r3, [pc, #476]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d0ed      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d173      	bne.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f68:	4b71      	ldr	r3, [pc, #452]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009f74:	4053      	eors	r3, r2
 8009f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d015      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f7e:	4b6c      	ldr	r3, [pc, #432]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f8a:	4b69      	ldr	r3, [pc, #420]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f8e:	4a68      	ldr	r2, [pc, #416]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f96:	4b66      	ldr	r3, [pc, #408]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f9a:	4a65      	ldr	r2, [pc, #404]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fa0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009fa2:	4a63      	ldr	r2, [pc, #396]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fb6:	d118      	bne.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb8:	f7f8 fdd8 	bl	8002b6c <HAL_GetTick>
 8009fbc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fc0:	e00d      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fc2:	f7f8 fdd3 	bl	8002b6c <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009fcc:	1ad2      	subs	r2, r2, r3
 8009fce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d903      	bls.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009fdc:	e005      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fde:	4b54      	ldr	r3, [pc, #336]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fe2:	f003 0302 	and.w	r3, r3, #2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0eb      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d129      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a002:	d10e      	bne.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a004:	4b4a      	ldr	r3, [pc, #296]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a010:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a014:	091a      	lsrs	r2, r3, #4
 800a016:	4b48      	ldr	r3, [pc, #288]	@ (800a138 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a018:	4013      	ands	r3, r2
 800a01a:	4a45      	ldr	r2, [pc, #276]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a01c:	430b      	orrs	r3, r1
 800a01e:	6113      	str	r3, [r2, #16]
 800a020:	e005      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a022:	4b43      	ldr	r3, [pc, #268]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	4a42      	ldr	r2, [pc, #264]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a028:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a02c:	6113      	str	r3, [r2, #16]
 800a02e:	4b40      	ldr	r3, [pc, #256]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a030:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a036:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a03a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a03e:	4a3c      	ldr	r2, [pc, #240]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a040:	430b      	orrs	r3, r1
 800a042:	6713      	str	r3, [r2, #112]	@ 0x70
 800a044:	e008      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a046:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a04a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a04e:	e003      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f002 0301 	and.w	r3, r2, #1
 800a064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a068:	2300      	movs	r3, #0
 800a06a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a06e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a072:	460b      	mov	r3, r1
 800a074:	4313      	orrs	r3, r2
 800a076:	f000 808f 	beq.w	800a198 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a080:	2b28      	cmp	r3, #40	@ 0x28
 800a082:	d871      	bhi.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a084:	a201      	add	r2, pc, #4	@ (adr r2, 800a08c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08a:	bf00      	nop
 800a08c:	0800a171 	.word	0x0800a171
 800a090:	0800a169 	.word	0x0800a169
 800a094:	0800a169 	.word	0x0800a169
 800a098:	0800a169 	.word	0x0800a169
 800a09c:	0800a169 	.word	0x0800a169
 800a0a0:	0800a169 	.word	0x0800a169
 800a0a4:	0800a169 	.word	0x0800a169
 800a0a8:	0800a169 	.word	0x0800a169
 800a0ac:	0800a13d 	.word	0x0800a13d
 800a0b0:	0800a169 	.word	0x0800a169
 800a0b4:	0800a169 	.word	0x0800a169
 800a0b8:	0800a169 	.word	0x0800a169
 800a0bc:	0800a169 	.word	0x0800a169
 800a0c0:	0800a169 	.word	0x0800a169
 800a0c4:	0800a169 	.word	0x0800a169
 800a0c8:	0800a169 	.word	0x0800a169
 800a0cc:	0800a153 	.word	0x0800a153
 800a0d0:	0800a169 	.word	0x0800a169
 800a0d4:	0800a169 	.word	0x0800a169
 800a0d8:	0800a169 	.word	0x0800a169
 800a0dc:	0800a169 	.word	0x0800a169
 800a0e0:	0800a169 	.word	0x0800a169
 800a0e4:	0800a169 	.word	0x0800a169
 800a0e8:	0800a169 	.word	0x0800a169
 800a0ec:	0800a171 	.word	0x0800a171
 800a0f0:	0800a169 	.word	0x0800a169
 800a0f4:	0800a169 	.word	0x0800a169
 800a0f8:	0800a169 	.word	0x0800a169
 800a0fc:	0800a169 	.word	0x0800a169
 800a100:	0800a169 	.word	0x0800a169
 800a104:	0800a169 	.word	0x0800a169
 800a108:	0800a169 	.word	0x0800a169
 800a10c:	0800a171 	.word	0x0800a171
 800a110:	0800a169 	.word	0x0800a169
 800a114:	0800a169 	.word	0x0800a169
 800a118:	0800a169 	.word	0x0800a169
 800a11c:	0800a169 	.word	0x0800a169
 800a120:	0800a169 	.word	0x0800a169
 800a124:	0800a169 	.word	0x0800a169
 800a128:	0800a169 	.word	0x0800a169
 800a12c:	0800a171 	.word	0x0800a171
 800a130:	58024400 	.word	0x58024400
 800a134:	58024800 	.word	0x58024800
 800a138:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a140:	3308      	adds	r3, #8
 800a142:	2101      	movs	r1, #1
 800a144:	4618      	mov	r0, r3
 800a146:	f001 fdcb 	bl	800bce0 <RCCEx_PLL2_Config>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a150:	e00f      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a156:	3328      	adds	r3, #40	@ 0x28
 800a158:	2101      	movs	r1, #1
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 fe72 	bl	800be44 <RCCEx_PLL3_Config>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a166:	e004      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a16e:	e000      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a170:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10a      	bne.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a17a:	4bbf      	ldr	r3, [pc, #764]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a17c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a17e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a186:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a188:	4abb      	ldr	r2, [pc, #748]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a18a:	430b      	orrs	r3, r1
 800a18c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a18e:	e003      	b.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a190:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a194:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f002 0302 	and.w	r3, r2, #2
 800a1a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	d041      	beq.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1be:	2b05      	cmp	r3, #5
 800a1c0:	d824      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c8:	0800a215 	.word	0x0800a215
 800a1cc:	0800a1e1 	.word	0x0800a1e1
 800a1d0:	0800a1f7 	.word	0x0800a1f7
 800a1d4:	0800a215 	.word	0x0800a215
 800a1d8:	0800a215 	.word	0x0800a215
 800a1dc:	0800a215 	.word	0x0800a215
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f001 fd79 	bl	800bce0 <RCCEx_PLL2_Config>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1f4:	e00f      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fa:	3328      	adds	r3, #40	@ 0x28
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 fe20 	bl	800be44 <RCCEx_PLL3_Config>
 800a204:	4603      	mov	r3, r0
 800a206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a20a:	e004      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a212:	e000      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a214:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10a      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a21e:	4b96      	ldr	r3, [pc, #600]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a222:	f023 0107 	bic.w	r1, r3, #7
 800a226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a22a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a22c:	4a92      	ldr	r2, [pc, #584]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a22e:	430b      	orrs	r3, r1
 800a230:	6553      	str	r3, [r2, #84]	@ 0x54
 800a232:	e003      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a234:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a238:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f002 0304 	and.w	r3, r2, #4
 800a248:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a24c:	2300      	movs	r3, #0
 800a24e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a252:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a256:	460b      	mov	r3, r1
 800a258:	4313      	orrs	r3, r2
 800a25a:	d044      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a264:	2b05      	cmp	r3, #5
 800a266:	d825      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a268:	a201      	add	r2, pc, #4	@ (adr r2, 800a270 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26e:	bf00      	nop
 800a270:	0800a2bd 	.word	0x0800a2bd
 800a274:	0800a289 	.word	0x0800a289
 800a278:	0800a29f 	.word	0x0800a29f
 800a27c:	0800a2bd 	.word	0x0800a2bd
 800a280:	0800a2bd 	.word	0x0800a2bd
 800a284:	0800a2bd 	.word	0x0800a2bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a28c:	3308      	adds	r3, #8
 800a28e:	2101      	movs	r1, #1
 800a290:	4618      	mov	r0, r3
 800a292:	f001 fd25 	bl	800bce0 <RCCEx_PLL2_Config>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a29c:	e00f      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a2:	3328      	adds	r3, #40	@ 0x28
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 fdcc 	bl	800be44 <RCCEx_PLL3_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a2b2:	e004      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a2ba:	e000      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a2bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10b      	bne.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2c6:	4b6c      	ldr	r3, [pc, #432]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ca:	f023 0107 	bic.w	r1, r3, #7
 800a2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2d6:	4a68      	ldr	r2, [pc, #416]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2dc:	e003      	b.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f002 0320 	and.w	r3, r2, #32
 800a2f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a2fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a300:	460b      	mov	r3, r1
 800a302:	4313      	orrs	r3, r2
 800a304:	d055      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a30a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a30e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a312:	d033      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a318:	d82c      	bhi.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a31a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a31e:	d02f      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a324:	d826      	bhi.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a32a:	d02b      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a32c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a330:	d820      	bhi.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a336:	d012      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a33c:	d81a      	bhi.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d022      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a346:	d115      	bne.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a34c:	3308      	adds	r3, #8
 800a34e:	2100      	movs	r1, #0
 800a350:	4618      	mov	r0, r3
 800a352:	f001 fcc5 	bl	800bce0 <RCCEx_PLL2_Config>
 800a356:	4603      	mov	r3, r0
 800a358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a35c:	e015      	b.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a362:	3328      	adds	r3, #40	@ 0x28
 800a364:	2102      	movs	r1, #2
 800a366:	4618      	mov	r0, r3
 800a368:	f001 fd6c 	bl	800be44 <RCCEx_PLL3_Config>
 800a36c:	4603      	mov	r3, r0
 800a36e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a372:	e00a      	b.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a37a:	e006      	b.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a37c:	bf00      	nop
 800a37e:	e004      	b.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a380:	bf00      	nop
 800a382:	e002      	b.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a384:	bf00      	nop
 800a386:	e000      	b.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a38a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10b      	bne.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a392:	4b39      	ldr	r3, [pc, #228]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a396:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3a2:	4a35      	ldr	r2, [pc, #212]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a3a4:	430b      	orrs	r3, r1
 800a3a6:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3a8:	e003      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a3be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3c8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	d058      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a3de:	d033      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a3e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a3e4:	d82c      	bhi.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3ea:	d02f      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a3ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3f0:	d826      	bhi.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3f6:	d02b      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a3f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3fc:	d820      	bhi.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a402:	d012      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a408:	d81a      	bhi.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d022      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a40e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a412:	d115      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a418:	3308      	adds	r3, #8
 800a41a:	2100      	movs	r1, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f001 fc5f 	bl	800bce0 <RCCEx_PLL2_Config>
 800a422:	4603      	mov	r3, r0
 800a424:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a428:	e015      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42e:	3328      	adds	r3, #40	@ 0x28
 800a430:	2102      	movs	r1, #2
 800a432:	4618      	mov	r0, r3
 800a434:	f001 fd06 	bl	800be44 <RCCEx_PLL3_Config>
 800a438:	4603      	mov	r3, r0
 800a43a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a43e:	e00a      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a446:	e006      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a448:	bf00      	nop
 800a44a:	e004      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a44c:	bf00      	nop
 800a44e:	e002      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a450:	bf00      	nop
 800a452:	e000      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a454:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10e      	bne.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a45e:	4b06      	ldr	r3, [pc, #24]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a462:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a46a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a46e:	4a02      	ldr	r2, [pc, #8]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a470:	430b      	orrs	r3, r1
 800a472:	6593      	str	r3, [r2, #88]	@ 0x58
 800a474:	e006      	b.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a476:	bf00      	nop
 800a478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a47c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a490:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a494:	2300      	movs	r3, #0
 800a496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a49a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	d055      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a4ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a4b0:	d033      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a4b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a4b6:	d82c      	bhi.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4bc:	d02f      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a4be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4c2:	d826      	bhi.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4c8:	d02b      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a4ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4ce:	d820      	bhi.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4d4:	d012      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a4d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4da:	d81a      	bhi.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d022      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a4e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4e4:	d115      	bne.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f001 fbf6 	bl	800bce0 <RCCEx_PLL2_Config>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4fa:	e015      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a500:	3328      	adds	r3, #40	@ 0x28
 800a502:	2102      	movs	r1, #2
 800a504:	4618      	mov	r0, r3
 800a506:	f001 fc9d 	bl	800be44 <RCCEx_PLL3_Config>
 800a50a:	4603      	mov	r3, r0
 800a50c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a510:	e00a      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a518:	e006      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a51a:	bf00      	nop
 800a51c:	e004      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a51e:	bf00      	nop
 800a520:	e002      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a522:	bf00      	nop
 800a524:	e000      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a526:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10b      	bne.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a530:	4ba0      	ldr	r3, [pc, #640]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a534:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a53c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a540:	4a9c      	ldr	r2, [pc, #624]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a542:	430b      	orrs	r3, r1
 800a544:	6593      	str	r3, [r2, #88]	@ 0x58
 800a546:	e003      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a54c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f002 0308 	and.w	r3, r2, #8
 800a55c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a560:	2300      	movs	r3, #0
 800a562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a566:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a56a:	460b      	mov	r3, r1
 800a56c:	4313      	orrs	r3, r2
 800a56e:	d01e      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a57c:	d10c      	bne.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a582:	3328      	adds	r3, #40	@ 0x28
 800a584:	2102      	movs	r1, #2
 800a586:	4618      	mov	r0, r3
 800a588:	f001 fc5c 	bl	800be44 <RCCEx_PLL3_Config>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d002      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a598:	4b86      	ldr	r3, [pc, #536]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a59a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a59c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5a8:	4a82      	ldr	r2, [pc, #520]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5aa:	430b      	orrs	r3, r1
 800a5ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f002 0310 	and.w	r3, r2, #16
 800a5ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a5c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	d01e      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5da:	d10c      	bne.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e0:	3328      	adds	r3, #40	@ 0x28
 800a5e2:	2102      	movs	r1, #2
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f001 fc2d 	bl	800be44 <RCCEx_PLL3_Config>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a5f6:	4b6f      	ldr	r3, [pc, #444]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a606:	4a6b      	ldr	r2, [pc, #428]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a608:	430b      	orrs	r3, r1
 800a60a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a618:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a61a:	2300      	movs	r3, #0
 800a61c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a61e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a622:	460b      	mov	r3, r1
 800a624:	4313      	orrs	r3, r2
 800a626:	d03e      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a634:	d022      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a63a:	d81b      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a644:	d00b      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a646:	e015      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a64c:	3308      	adds	r3, #8
 800a64e:	2100      	movs	r1, #0
 800a650:	4618      	mov	r0, r3
 800a652:	f001 fb45 	bl	800bce0 <RCCEx_PLL2_Config>
 800a656:	4603      	mov	r3, r0
 800a658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a65c:	e00f      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a662:	3328      	adds	r3, #40	@ 0x28
 800a664:	2102      	movs	r1, #2
 800a666:	4618      	mov	r0, r3
 800a668:	f001 fbec 	bl	800be44 <RCCEx_PLL3_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a672:	e004      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a67a:	e000      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a67c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a67e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10b      	bne.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a686:	4b4b      	ldr	r3, [pc, #300]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a68a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a696:	4a47      	ldr	r2, [pc, #284]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a698:	430b      	orrs	r3, r1
 800a69a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a69c:	e003      	b.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a6b2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	677b      	str	r3, [r7, #116]	@ 0x74
 800a6b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	d03b      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6ce:	d01f      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a6d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6d4:	d818      	bhi.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a6d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6da:	d003      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a6dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6e0:	d007      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a6e2:	e011      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6e4:	4b33      	ldr	r3, [pc, #204]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e8:	4a32      	ldr	r2, [pc, #200]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6f0:	e00f      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f6:	3328      	adds	r3, #40	@ 0x28
 800a6f8:	2101      	movs	r1, #1
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f001 fba2 	bl	800be44 <RCCEx_PLL3_Config>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a706:	e004      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a70e:	e000      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a710:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10b      	bne.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a71a:	4b26      	ldr	r3, [pc, #152]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a71c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a71e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a72a:	4a22      	ldr	r2, [pc, #136]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a72c:	430b      	orrs	r3, r1
 800a72e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a730:	e003      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a732:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a736:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a746:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a748:	2300      	movs	r3, #0
 800a74a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a74c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a750:	460b      	mov	r3, r1
 800a752:	4313      	orrs	r3, r2
 800a754:	d034      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a75a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d003      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a764:	d007      	beq.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a766:	e011      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a768:	4b12      	ldr	r3, [pc, #72]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a76c:	4a11      	ldr	r2, [pc, #68]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a76e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a774:	e00e      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a77a:	3308      	adds	r3, #8
 800a77c:	2102      	movs	r1, #2
 800a77e:	4618      	mov	r0, r3
 800a780:	f001 faae 	bl	800bce0 <RCCEx_PLL2_Config>
 800a784:	4603      	mov	r3, r0
 800a786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a78a:	e003      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a792:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10d      	bne.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a79c:	4b05      	ldr	r3, [pc, #20]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a79e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7aa:	4a02      	ldr	r2, [pc, #8]	@ (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7ac:	430b      	orrs	r3, r1
 800a7ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a7b0:	e006      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a7b2:	bf00      	nop
 800a7b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a7cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7d2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	d00c      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e0:	3328      	adds	r3, #40	@ 0x28
 800a7e2:	2102      	movs	r1, #2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 fb2d 	bl	800be44 <RCCEx_PLL3_Config>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a802:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a804:	2300      	movs	r3, #0
 800a806:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a808:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a80c:	460b      	mov	r3, r1
 800a80e:	4313      	orrs	r3, r2
 800a810:	d036      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a81c:	d018      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a81e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a822:	d811      	bhi.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a828:	d014      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a82a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a82e:	d80b      	bhi.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a830:	2b00      	cmp	r3, #0
 800a832:	d011      	beq.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a838:	d106      	bne.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a83a:	4bb7      	ldr	r3, [pc, #732]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83e:	4ab6      	ldr	r2, [pc, #728]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a844:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a846:	e008      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a84e:	e004      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a850:	bf00      	nop
 800a852:	e002      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a854:	bf00      	nop
 800a856:	e000      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a85a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10a      	bne.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a862:	4bad      	ldr	r3, [pc, #692]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a866:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a86e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a870:	4aa9      	ldr	r2, [pc, #676]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a872:	430b      	orrs	r3, r1
 800a874:	6553      	str	r3, [r2, #84]	@ 0x54
 800a876:	e003      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a87c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a88c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a88e:	2300      	movs	r3, #0
 800a890:	657b      	str	r3, [r7, #84]	@ 0x54
 800a892:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a896:	460b      	mov	r3, r1
 800a898:	4313      	orrs	r3, r2
 800a89a:	d009      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a89c:	4b9e      	ldr	r3, [pc, #632]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a89e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8aa:	4a9b      	ldr	r2, [pc, #620]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8ac:	430b      	orrs	r3, r1
 800a8ae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a8bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8be:	2300      	movs	r3, #0
 800a8c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	d009      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8cc:	4b92      	ldr	r3, [pc, #584]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8d0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8da:	4a8f      	ldr	r2, [pc, #572]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a8ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	d00e      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8fc:	4b86      	ldr	r3, [pc, #536]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	4a85      	ldr	r2, [pc, #532]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a902:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a906:	6113      	str	r3, [r2, #16]
 800a908:	4b83      	ldr	r3, [pc, #524]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a90a:	6919      	ldr	r1, [r3, #16]
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a910:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a914:	4a80      	ldr	r2, [pc, #512]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a916:	430b      	orrs	r3, r1
 800a918:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a926:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a928:	2300      	movs	r3, #0
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a92c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a930:	460b      	mov	r3, r1
 800a932:	4313      	orrs	r3, r2
 800a934:	d009      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a936:	4b78      	ldr	r3, [pc, #480]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a93a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a944:	4a74      	ldr	r2, [pc, #464]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a946:	430b      	orrs	r3, r1
 800a948:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a956:	633b      	str	r3, [r7, #48]	@ 0x30
 800a958:	2300      	movs	r3, #0
 800a95a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a95c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a960:	460b      	mov	r3, r1
 800a962:	4313      	orrs	r3, r2
 800a964:	d00a      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a966:	4b6c      	ldr	r3, [pc, #432]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a96a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a976:	4a68      	ldr	r2, [pc, #416]	@ (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a978:	430b      	orrs	r3, r1
 800a97a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	2100      	movs	r1, #0
 800a986:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a98e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a992:	460b      	mov	r3, r1
 800a994:	4313      	orrs	r3, r2
 800a996:	d011      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a99c:	3308      	adds	r3, #8
 800a99e:	2100      	movs	r1, #0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f001 f99d 	bl	800bce0 <RCCEx_PLL2_Config>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a9ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	6239      	str	r1, [r7, #32]
 800a9c8:	f003 0302 	and.w	r3, r3, #2
 800a9cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	d011      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9dc:	3308      	adds	r3, #8
 800a9de:	2101      	movs	r1, #1
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f001 f97d 	bl	800bce0 <RCCEx_PLL2_Config>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a9ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	2100      	movs	r1, #0
 800aa06:	61b9      	str	r1, [r7, #24]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	61fb      	str	r3, [r7, #28]
 800aa0e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aa12:	460b      	mov	r3, r1
 800aa14:	4313      	orrs	r3, r2
 800aa16:	d011      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa1c:	3308      	adds	r3, #8
 800aa1e:	2102      	movs	r1, #2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f001 f95d 	bl	800bce0 <RCCEx_PLL2_Config>
 800aa26:	4603      	mov	r3, r0
 800aa28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aa2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	2100      	movs	r1, #0
 800aa46:	6139      	str	r1, [r7, #16]
 800aa48:	f003 0308 	and.w	r3, r3, #8
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aa52:	460b      	mov	r3, r1
 800aa54:	4313      	orrs	r3, r2
 800aa56:	d011      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa5c:	3328      	adds	r3, #40	@ 0x28
 800aa5e:	2100      	movs	r1, #0
 800aa60:	4618      	mov	r0, r3
 800aa62:	f001 f9ef 	bl	800be44 <RCCEx_PLL3_Config>
 800aa66:	4603      	mov	r3, r0
 800aa68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800aa6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	2100      	movs	r1, #0
 800aa86:	60b9      	str	r1, [r7, #8]
 800aa88:	f003 0310 	and.w	r3, r3, #16
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa92:	460b      	mov	r3, r1
 800aa94:	4313      	orrs	r3, r2
 800aa96:	d011      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa9c:	3328      	adds	r3, #40	@ 0x28
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f001 f9cf 	bl	800be44 <RCCEx_PLL3_Config>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aaac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d003      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aab8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	2100      	movs	r1, #0
 800aac6:	6039      	str	r1, [r7, #0]
 800aac8:	f003 0320 	and.w	r3, r3, #32
 800aacc:	607b      	str	r3, [r7, #4]
 800aace:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aad2:	460b      	mov	r3, r1
 800aad4:	4313      	orrs	r3, r2
 800aad6:	d011      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aadc:	3328      	adds	r3, #40	@ 0x28
 800aade:	2102      	movs	r1, #2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f001 f9af 	bl	800be44 <RCCEx_PLL3_Config>
 800aae6:	4603      	mov	r3, r0
 800aae8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aaec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aaf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800aafc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	e000      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ab10:	46bd      	mov	sp, r7
 800ab12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab16:	bf00      	nop
 800ab18:	58024400 	.word	0x58024400

0800ab1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b090      	sub	sp, #64	@ 0x40
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ab26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab2a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ab2e:	430b      	orrs	r3, r1
 800ab30:	f040 8094 	bne.w	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab34:	4b9b      	ldr	r3, [pc, #620]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab38:	f003 0307 	and.w	r3, r3, #7
 800ab3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	f200 8087 	bhi.w	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ab46:	a201      	add	r2, pc, #4	@ (adr r2, 800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ab48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4c:	0800ab61 	.word	0x0800ab61
 800ab50:	0800ab89 	.word	0x0800ab89
 800ab54:	0800abb1 	.word	0x0800abb1
 800ab58:	0800ac4d 	.word	0x0800ac4d
 800ab5c:	0800abd9 	.word	0x0800abd9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab60:	4b90      	ldr	r3, [pc, #576]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab6c:	d108      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 ff62 	bl	800ba3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab7c:	f000 bc93 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab84:	f000 bc8f 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab88:	4b86      	ldr	r3, [pc, #536]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab94:	d108      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab96:	f107 0318 	add.w	r3, r7, #24
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f000 fca6 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba4:	f000 bc7f 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abac:	f000 bc7b 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abb0:	4b7c      	ldr	r3, [pc, #496]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abbc:	d108      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abbe:	f107 030c 	add.w	r3, r7, #12
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 fde6 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abcc:	f000 bc6b 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd4:	f000 bc67 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abd8:	4b72      	ldr	r3, [pc, #456]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abe0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abe2:	4b70      	ldr	r3, [pc, #448]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 0304 	and.w	r3, r3, #4
 800abea:	2b04      	cmp	r3, #4
 800abec:	d10c      	bne.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800abee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d109      	bne.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abf4:	4b6b      	ldr	r3, [pc, #428]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	08db      	lsrs	r3, r3, #3
 800abfa:	f003 0303 	and.w	r3, r3, #3
 800abfe:	4a6a      	ldr	r2, [pc, #424]	@ (800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ac00:	fa22 f303 	lsr.w	r3, r2, r3
 800ac04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac06:	e01f      	b.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac08:	4b66      	ldr	r3, [pc, #408]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac14:	d106      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ac16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac1c:	d102      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac1e:	4b63      	ldr	r3, [pc, #396]	@ (800adac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ac20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac22:	e011      	b.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac24:	4b5f      	ldr	r3, [pc, #380]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac30:	d106      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac38:	d102      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac3a:	4b5d      	ldr	r3, [pc, #372]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac3e:	e003      	b.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac44:	f000 bc2f 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac48:	f000 bc2d 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac4c:	4b59      	ldr	r3, [pc, #356]	@ (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac50:	f000 bc29 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac58:	f000 bc25 	b.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ac5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac60:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ac64:	430b      	orrs	r3, r1
 800ac66:	f040 80a7 	bne.w	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ac6a:	4b4e      	ldr	r3, [pc, #312]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac6e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ac72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ac74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac7a:	d054      	beq.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac82:	f200 808b 	bhi.w	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac8c:	f000 8083 	beq.w	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ac90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac96:	f200 8081 	bhi.w	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aca0:	d02f      	beq.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800aca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aca8:	d878      	bhi.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800acaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acac:	2b00      	cmp	r3, #0
 800acae:	d004      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800acb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800acb6:	d012      	beq.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800acb8:	e070      	b.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acba:	4b3a      	ldr	r3, [pc, #232]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800acc6:	d107      	bne.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800accc:	4618      	mov	r0, r3
 800acce:	f000 feb5 	bl	800ba3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd6:	e3e6      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acdc:	e3e3      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acde:	4b31      	ldr	r3, [pc, #196]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ace6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acea:	d107      	bne.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acec:	f107 0318 	add.w	r3, r7, #24
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fbfb 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acfa:	e3d4      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad00:	e3d1      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad02:	4b28      	ldr	r3, [pc, #160]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad0e:	d107      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad10:	f107 030c 	add.w	r3, r7, #12
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 fd3d 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad1e:	e3c2      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad20:	2300      	movs	r3, #0
 800ad22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad24:	e3bf      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad26:	4b1f      	ldr	r3, [pc, #124]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad30:	4b1c      	ldr	r3, [pc, #112]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f003 0304 	and.w	r3, r3, #4
 800ad38:	2b04      	cmp	r3, #4
 800ad3a:	d10c      	bne.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ad3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d109      	bne.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad42:	4b18      	ldr	r3, [pc, #96]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	08db      	lsrs	r3, r3, #3
 800ad48:	f003 0303 	and.w	r3, r3, #3
 800ad4c:	4a16      	ldr	r2, [pc, #88]	@ (800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ad4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad54:	e01e      	b.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad56:	4b13      	ldr	r3, [pc, #76]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad62:	d106      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ad64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad6a:	d102      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad6c:	4b0f      	ldr	r3, [pc, #60]	@ (800adac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad70:	e010      	b.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad72:	4b0c      	ldr	r3, [pc, #48]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad7e:	d106      	bne.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ad80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad86:	d102      	bne.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad88:	4b09      	ldr	r3, [pc, #36]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad8c:	e002      	b.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad92:	e388      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad94:	e387      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad96:	4b07      	ldr	r3, [pc, #28]	@ (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad9a:	e384      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada0:	e381      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ada2:	bf00      	nop
 800ada4:	58024400 	.word	0x58024400
 800ada8:	03d09000 	.word	0x03d09000
 800adac:	003d0900 	.word	0x003d0900
 800adb0:	016e3600 	.word	0x016e3600
 800adb4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800adb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adbc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800adc0:	430b      	orrs	r3, r1
 800adc2:	f040 809c 	bne.w	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800adc6:	4b9e      	ldr	r3, [pc, #632]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adca:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800adce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800add0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800add6:	d054      	beq.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800add8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adde:	f200 808b 	bhi.w	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ade8:	f000 8083 	beq.w	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800adec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800adf2:	f200 8081 	bhi.w	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800adf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adfc:	d02f      	beq.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800adfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae04:	d878      	bhi.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ae06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d004      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae12:	d012      	beq.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ae14:	e070      	b.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae16:	4b8a      	ldr	r3, [pc, #552]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae22:	d107      	bne.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 fe07 	bl	800ba3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae32:	e338      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae38:	e335      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae3a:	4b81      	ldr	r3, [pc, #516]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae46:	d107      	bne.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae48:	f107 0318 	add.w	r3, r7, #24
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fb4d 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae56:	e326      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae5c:	e323      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae5e:	4b78      	ldr	r3, [pc, #480]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae6a:	d107      	bne.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae6c:	f107 030c 	add.w	r3, r7, #12
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 fc8f 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae7a:	e314      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae80:	e311      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae82:	4b6f      	ldr	r3, [pc, #444]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae8c:	4b6c      	ldr	r3, [pc, #432]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d10c      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ae98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d109      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae9e:	4b68      	ldr	r3, [pc, #416]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	08db      	lsrs	r3, r3, #3
 800aea4:	f003 0303 	and.w	r3, r3, #3
 800aea8:	4a66      	ldr	r2, [pc, #408]	@ (800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800aeaa:	fa22 f303 	lsr.w	r3, r2, r3
 800aeae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aeb0:	e01e      	b.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aeb2:	4b63      	ldr	r3, [pc, #396]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aebe:	d106      	bne.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800aec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aec6:	d102      	bne.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aec8:	4b5f      	ldr	r3, [pc, #380]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800aeca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aecc:	e010      	b.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aece:	4b5c      	ldr	r3, [pc, #368]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeda:	d106      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800aedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aee2:	d102      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aee4:	4b59      	ldr	r3, [pc, #356]	@ (800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aee8:	e002      	b.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aeee:	e2da      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aef0:	e2d9      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aef2:	4b57      	ldr	r3, [pc, #348]	@ (800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef6:	e2d6      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aefc:	e2d3      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aefe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af02:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800af06:	430b      	orrs	r3, r1
 800af08:	f040 80a7 	bne.w	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800af0c:	4b4c      	ldr	r3, [pc, #304]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af10:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800af14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af1c:	d055      	beq.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800af1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af24:	f200 8096 	bhi.w	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af2e:	f000 8084 	beq.w	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800af32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af38:	f200 808c 	bhi.w	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af42:	d030      	beq.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800af44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af4a:	f200 8083 	bhi.w	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af50:	2b00      	cmp	r3, #0
 800af52:	d004      	beq.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800af54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af5a:	d012      	beq.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800af5c:	e07a      	b.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af5e:	4b38      	ldr	r3, [pc, #224]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af6a:	d107      	bne.n	800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af70:	4618      	mov	r0, r3
 800af72:	f000 fd63 	bl	800ba3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7a:	e294      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af80:	e291      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af82:	4b2f      	ldr	r3, [pc, #188]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af8e:	d107      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af90:	f107 0318 	add.w	r3, r7, #24
 800af94:	4618      	mov	r0, r3
 800af96:	f000 faa9 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af9e:	e282      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa4:	e27f      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afa6:	4b26      	ldr	r3, [pc, #152]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afb2:	d107      	bne.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afb4:	f107 030c 	add.w	r3, r7, #12
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 fbeb 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afc2:	e270      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afc4:	2300      	movs	r3, #0
 800afc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afc8:	e26d      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afca:	4b1d      	ldr	r3, [pc, #116]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800afd2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afd4:	4b1a      	ldr	r3, [pc, #104]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d10c      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800afe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d109      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afe6:	4b16      	ldr	r3, [pc, #88]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	08db      	lsrs	r3, r3, #3
 800afec:	f003 0303 	and.w	r3, r3, #3
 800aff0:	4a14      	ldr	r2, [pc, #80]	@ (800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800aff2:	fa22 f303 	lsr.w	r3, r2, r3
 800aff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aff8:	e01e      	b.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800affa:	4b11      	ldr	r3, [pc, #68]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b006:	d106      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b00a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b00e:	d102      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b010:	4b0d      	ldr	r3, [pc, #52]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b014:	e010      	b.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b016:	4b0a      	ldr	r3, [pc, #40]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b01e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b022:	d106      	bne.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b02a:	d102      	bne.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b02c:	4b07      	ldr	r3, [pc, #28]	@ (800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b030:	e002      	b.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b036:	e236      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b038:	e235      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b03a:	4b05      	ldr	r3, [pc, #20]	@ (800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b03e:	e232      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b040:	58024400 	.word	0x58024400
 800b044:	03d09000 	.word	0x03d09000
 800b048:	003d0900 	.word	0x003d0900
 800b04c:	016e3600 	.word	0x016e3600
 800b050:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b058:	e225      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b05a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b062:	430b      	orrs	r3, r1
 800b064:	f040 8085 	bne.w	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b068:	4b9c      	ldr	r3, [pc, #624]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b06c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b070:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b078:	d06b      	beq.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b080:	d874      	bhi.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b084:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b088:	d056      	beq.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b090:	d86c      	bhi.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b094:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b098:	d03b      	beq.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b0a0:	d864      	bhi.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0a8:	d021      	beq.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0b0:	d85c      	bhi.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d004      	beq.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0be:	d004      	beq.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b0c0:	e054      	b.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b0c2:	f7fe fb5f 	bl	8009784 <HAL_RCC_GetPCLK1Freq>
 800b0c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0c8:	e1ed      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0ca:	4b84      	ldr	r3, [pc, #528]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0d6:	d107      	bne.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0d8:	f107 0318 	add.w	r3, r7, #24
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 fa05 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0e6:	e1de      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ec:	e1db      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0ee:	4b7b      	ldr	r3, [pc, #492]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0fa:	d107      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0fc:	f107 030c 	add.w	r3, r7, #12
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fb47 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b10a:	e1cc      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b110:	e1c9      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b112:	4b72      	ldr	r3, [pc, #456]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0304 	and.w	r3, r3, #4
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d109      	bne.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b11e:	4b6f      	ldr	r3, [pc, #444]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	08db      	lsrs	r3, r3, #3
 800b124:	f003 0303 	and.w	r3, r3, #3
 800b128:	4a6d      	ldr	r2, [pc, #436]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b12a:	fa22 f303 	lsr.w	r3, r2, r3
 800b12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b130:	e1b9      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b132:	2300      	movs	r3, #0
 800b134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b136:	e1b6      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b138:	4b68      	ldr	r3, [pc, #416]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b144:	d102      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b146:	4b67      	ldr	r3, [pc, #412]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b14a:	e1ac      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b150:	e1a9      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b152:	4b62      	ldr	r3, [pc, #392]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b15a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b15e:	d102      	bne.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b160:	4b61      	ldr	r3, [pc, #388]	@ (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b164:	e19f      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b16a:	e19c      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b170:	e199      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b172:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b176:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b17a:	430b      	orrs	r3, r1
 800b17c:	d173      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b17e:	4b57      	ldr	r3, [pc, #348]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b182:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b186:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b18e:	d02f      	beq.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b196:	d863      	bhi.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d004      	beq.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1a4:	d012      	beq.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b1a6:	e05b      	b.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1a8:	4b4c      	ldr	r3, [pc, #304]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1b4:	d107      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1b6:	f107 0318 	add.w	r3, r7, #24
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 f996 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1c4:	e16f      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ca:	e16c      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1cc:	4b43      	ldr	r3, [pc, #268]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1d8:	d107      	bne.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1da:	f107 030c 	add.w	r3, r7, #12
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 fad8 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e8:	e15d      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ee:	e15a      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1f0:	4b3a      	ldr	r3, [pc, #232]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1fa:	4b38      	ldr	r3, [pc, #224]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b04      	cmp	r3, #4
 800b204:	d10c      	bne.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d109      	bne.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b20c:	4b33      	ldr	r3, [pc, #204]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	08db      	lsrs	r3, r3, #3
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	4a32      	ldr	r2, [pc, #200]	@ (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b218:	fa22 f303 	lsr.w	r3, r2, r3
 800b21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b21e:	e01e      	b.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b220:	4b2e      	ldr	r3, [pc, #184]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b22c:	d106      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b230:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b234:	d102      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b236:	4b2b      	ldr	r3, [pc, #172]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b23a:	e010      	b.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b23c:	4b27      	ldr	r3, [pc, #156]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b248:	d106      	bne.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b24c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b250:	d102      	bne.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b252:	4b25      	ldr	r3, [pc, #148]	@ (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b256:	e002      	b.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b258:	2300      	movs	r3, #0
 800b25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b25c:	e123      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b25e:	e122      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b264:	e11f      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b26a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b26e:	430b      	orrs	r3, r1
 800b270:	d13c      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b272:	4b1a      	ldr	r3, [pc, #104]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b27a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d004      	beq.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b288:	d012      	beq.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b28a:	e023      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b28c:	4b13      	ldr	r3, [pc, #76]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b298:	d107      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b29a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fbcc 	bl	800ba3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a8:	e0fd      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ae:	e0fa      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2bc:	d107      	bne.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2be:	f107 0318 	add.w	r3, r7, #24
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 f912 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2cc:	e0eb      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d2:	e0e8      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d8:	e0e5      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2da:	bf00      	nop
 800b2dc:	58024400 	.word	0x58024400
 800b2e0:	03d09000 	.word	0x03d09000
 800b2e4:	003d0900 	.word	0x003d0900
 800b2e8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2f0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b2f4:	430b      	orrs	r3, r1
 800b2f6:	f040 8085 	bne.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b2fa:	4b6d      	ldr	r3, [pc, #436]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b302:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b30a:	d06b      	beq.n	800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b312:	d874      	bhi.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b31a:	d056      	beq.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b322:	d86c      	bhi.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b32a:	d03b      	beq.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b332:	d864      	bhi.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b336:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b33a:	d021      	beq.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b342:	d85c      	bhi.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	2b00      	cmp	r3, #0
 800b348:	d004      	beq.n	800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b350:	d004      	beq.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b352:	e054      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b354:	f000 f8b4 	bl	800b4c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b358:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b35a:	e0a4      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b35c:	4b54      	ldr	r3, [pc, #336]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b368:	d107      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b36a:	f107 0318 	add.w	r3, r7, #24
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 f8bc 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b378:	e095      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b37e:	e092      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b380:	4b4b      	ldr	r3, [pc, #300]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b38c:	d107      	bne.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b38e:	f107 030c 	add.w	r3, r7, #12
 800b392:	4618      	mov	r0, r3
 800b394:	f000 f9fe 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b39c:	e083      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3a2:	e080      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b3a4:	4b42      	ldr	r3, [pc, #264]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	d109      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3b0:	4b3f      	ldr	r3, [pc, #252]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	08db      	lsrs	r3, r3, #3
 800b3b6:	f003 0303 	and.w	r3, r3, #3
 800b3ba:	4a3e      	ldr	r2, [pc, #248]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3c2:	e070      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c8:	e06d      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b3ca:	4b39      	ldr	r3, [pc, #228]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3d6:	d102      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b3d8:	4b37      	ldr	r3, [pc, #220]	@ (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3dc:	e063      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3e2:	e060      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3e4:	4b32      	ldr	r3, [pc, #200]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3f0:	d102      	bne.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b3f2:	4b32      	ldr	r3, [pc, #200]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3f6:	e056      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3fc:	e053      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b402:	e050      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b404:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b408:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b40c:	430b      	orrs	r3, r1
 800b40e:	d148      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b410:	4b27      	ldr	r3, [pc, #156]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b414:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b418:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b420:	d02a      	beq.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b428:	d838      	bhi.n	800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d004      	beq.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b432:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b436:	d00d      	beq.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b438:	e030      	b.n	800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b43a:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b446:	d102      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b448:	4b1c      	ldr	r3, [pc, #112]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b44c:	e02b      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b452:	e028      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b454:	4b16      	ldr	r3, [pc, #88]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b45c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b460:	d107      	bne.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b466:	4618      	mov	r0, r3
 800b468:	f000 fae8 	bl	800ba3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b470:	e019      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b476:	e016      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b478:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b484:	d107      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b486:	f107 0318 	add.w	r3, r7, #24
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 f82e 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b494:	e007      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b49a:	e004      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a0:	e001      	b.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3740      	adds	r7, #64	@ 0x40
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	58024400 	.word	0x58024400
 800b4b4:	03d09000 	.word	0x03d09000
 800b4b8:	003d0900 	.word	0x003d0900
 800b4bc:	016e3600 	.word	0x016e3600

0800b4c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b4c4:	f7fe f92e 	bl	8009724 <HAL_RCC_GetHCLKFreq>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	4b06      	ldr	r3, [pc, #24]	@ (800b4e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	091b      	lsrs	r3, r3, #4
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	4904      	ldr	r1, [pc, #16]	@ (800b4e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b4d6:	5ccb      	ldrb	r3, [r1, r3]
 800b4d8:	f003 031f 	and.w	r3, r3, #31
 800b4dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	58024400 	.word	0x58024400
 800b4e8:	08014f4c 	.word	0x08014f4c

0800b4ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b089      	sub	sp, #36	@ 0x24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4f4:	4ba1      	ldr	r3, [pc, #644]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f8:	f003 0303 	and.w	r3, r3, #3
 800b4fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b4fe:	4b9f      	ldr	r3, [pc, #636]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b502:	0b1b      	lsrs	r3, r3, #12
 800b504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b508:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b50a:	4b9c      	ldr	r3, [pc, #624]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b50e:	091b      	lsrs	r3, r3, #4
 800b510:	f003 0301 	and.w	r3, r3, #1
 800b514:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b516:	4b99      	ldr	r3, [pc, #612]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b51a:	08db      	lsrs	r3, r3, #3
 800b51c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	fb02 f303 	mul.w	r3, r2, r3
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 8111 	beq.w	800b75c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	f000 8083 	beq.w	800b648 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	2b02      	cmp	r3, #2
 800b546:	f200 80a1 	bhi.w	800b68c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d056      	beq.n	800b604 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b556:	e099      	b.n	800b68c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b558:	4b88      	ldr	r3, [pc, #544]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0320 	and.w	r3, r3, #32
 800b560:	2b00      	cmp	r3, #0
 800b562:	d02d      	beq.n	800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b564:	4b85      	ldr	r3, [pc, #532]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	08db      	lsrs	r3, r3, #3
 800b56a:	f003 0303 	and.w	r3, r3, #3
 800b56e:	4a84      	ldr	r2, [pc, #528]	@ (800b780 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b570:	fa22 f303 	lsr.w	r3, r2, r3
 800b574:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	ee07 3a90 	vmov	s15, r3
 800b57c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	ee07 3a90 	vmov	s15, r3
 800b586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b58e:	4b7b      	ldr	r3, [pc, #492]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b596:	ee07 3a90 	vmov	s15, r3
 800b59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b59e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5be:	e087      	b.n	800b6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	ee07 3a90 	vmov	s15, r3
 800b5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b788 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5d2:	4b6a      	ldr	r3, [pc, #424]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5da:	ee07 3a90 	vmov	s15, r3
 800b5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b602:	e065      	b.n	800b6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	ee07 3a90 	vmov	s15, r3
 800b60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b60e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b78c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b616:	4b59      	ldr	r3, [pc, #356]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b61e:	ee07 3a90 	vmov	s15, r3
 800b622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b626:	ed97 6a03 	vldr	s12, [r7, #12]
 800b62a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b646:	e043      	b.n	800b6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	ee07 3a90 	vmov	s15, r3
 800b64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b652:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b790 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b65a:	4b48      	ldr	r3, [pc, #288]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b662:	ee07 3a90 	vmov	s15, r3
 800b666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b66a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b66e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b67a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b682:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b68a:	e021      	b.n	800b6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	ee07 3a90 	vmov	s15, r3
 800b692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b696:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b78c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b69a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b69e:	4b37      	ldr	r3, [pc, #220]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b6d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6d4:	0a5b      	lsrs	r3, r3, #9
 800b6d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6da:	ee07 3a90 	vmov	s15, r3
 800b6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6f6:	ee17 2a90 	vmov	r2, s15
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b6fe:	4b1f      	ldr	r3, [pc, #124]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b702:	0c1b      	lsrs	r3, r3, #16
 800b704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b708:	ee07 3a90 	vmov	s15, r3
 800b70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b714:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b718:	edd7 6a07 	vldr	s13, [r7, #28]
 800b71c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b724:	ee17 2a90 	vmov	r2, s15
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b72c:	4b13      	ldr	r3, [pc, #76]	@ (800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b730:	0e1b      	lsrs	r3, r3, #24
 800b732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b736:	ee07 3a90 	vmov	s15, r3
 800b73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b742:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b746:	edd7 6a07 	vldr	s13, [r7, #28]
 800b74a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b74e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b752:	ee17 2a90 	vmov	r2, s15
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b75a:	e008      	b.n	800b76e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	609a      	str	r2, [r3, #8]
}
 800b76e:	bf00      	nop
 800b770:	3724      	adds	r7, #36	@ 0x24
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	58024400 	.word	0x58024400
 800b780:	03d09000 	.word	0x03d09000
 800b784:	46000000 	.word	0x46000000
 800b788:	4c742400 	.word	0x4c742400
 800b78c:	4a742400 	.word	0x4a742400
 800b790:	4bb71b00 	.word	0x4bb71b00

0800b794 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b794:	b480      	push	{r7}
 800b796:	b089      	sub	sp, #36	@ 0x24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b79c:	4ba1      	ldr	r3, [pc, #644]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a0:	f003 0303 	and.w	r3, r3, #3
 800b7a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b7a6:	4b9f      	ldr	r3, [pc, #636]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7aa:	0d1b      	lsrs	r3, r3, #20
 800b7ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b7b2:	4b9c      	ldr	r3, [pc, #624]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b6:	0a1b      	lsrs	r3, r3, #8
 800b7b8:	f003 0301 	and.w	r3, r3, #1
 800b7bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b7be:	4b99      	ldr	r3, [pc, #612]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7c2:	08db      	lsrs	r3, r3, #3
 800b7c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	fb02 f303 	mul.w	r3, r2, r3
 800b7ce:	ee07 3a90 	vmov	s15, r3
 800b7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 8111 	beq.w	800ba04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	f000 8083 	beq.w	800b8f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	f200 80a1 	bhi.w	800b934 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d003      	beq.n	800b800 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d056      	beq.n	800b8ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b7fe:	e099      	b.n	800b934 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b800:	4b88      	ldr	r3, [pc, #544]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0320 	and.w	r3, r3, #32
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d02d      	beq.n	800b868 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b80c:	4b85      	ldr	r3, [pc, #532]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	08db      	lsrs	r3, r3, #3
 800b812:	f003 0303 	and.w	r3, r3, #3
 800b816:	4a84      	ldr	r2, [pc, #528]	@ (800ba28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b818:	fa22 f303 	lsr.w	r3, r2, r3
 800b81c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	ee07 3a90 	vmov	s15, r3
 800b824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	ee07 3a90 	vmov	s15, r3
 800b82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b836:	4b7b      	ldr	r3, [pc, #492]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83e:	ee07 3a90 	vmov	s15, r3
 800b842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b846:	ed97 6a03 	vldr	s12, [r7, #12]
 800b84a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b84e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b85a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b862:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b866:	e087      	b.n	800b978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	ee07 3a90 	vmov	s15, r3
 800b86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b872:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ba30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b87a:	4b6a      	ldr	r3, [pc, #424]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b87e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b882:	ee07 3a90 	vmov	s15, r3
 800b886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b88e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b89a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b89e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8aa:	e065      	b.n	800b978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	ee07 3a90 	vmov	s15, r3
 800b8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ba34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8be:	4b59      	ldr	r3, [pc, #356]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c6:	ee07 3a90 	vmov	s15, r3
 800b8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ee:	e043      	b.n	800b978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	ee07 3a90 	vmov	s15, r3
 800b8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ba38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b8fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b902:	4b48      	ldr	r3, [pc, #288]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90a:	ee07 3a90 	vmov	s15, r3
 800b90e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b912:	ed97 6a03 	vldr	s12, [r7, #12]
 800b916:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b91a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b91e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b92e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b932:	e021      	b.n	800b978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	ee07 3a90 	vmov	s15, r3
 800b93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b93e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ba34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b946:	4b37      	ldr	r3, [pc, #220]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b94e:	ee07 3a90 	vmov	s15, r3
 800b952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b956:	ed97 6a03 	vldr	s12, [r7, #12]
 800b95a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b976:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b978:	4b2a      	ldr	r3, [pc, #168]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b97c:	0a5b      	lsrs	r3, r3, #9
 800b97e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b982:	ee07 3a90 	vmov	s15, r3
 800b986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b98e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b992:	edd7 6a07 	vldr	s13, [r7, #28]
 800b996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b99a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b99e:	ee17 2a90 	vmov	r2, s15
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b9a6:	4b1f      	ldr	r3, [pc, #124]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9aa:	0c1b      	lsrs	r3, r3, #16
 800b9ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9b0:	ee07 3a90 	vmov	s15, r3
 800b9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9cc:	ee17 2a90 	vmov	r2, s15
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b9d4:	4b13      	ldr	r3, [pc, #76]	@ (800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d8:	0e1b      	lsrs	r3, r3, #24
 800b9da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9de:	ee07 3a90 	vmov	s15, r3
 800b9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9fa:	ee17 2a90 	vmov	r2, s15
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ba02:	e008      	b.n	800ba16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	609a      	str	r2, [r3, #8]
}
 800ba16:	bf00      	nop
 800ba18:	3724      	adds	r7, #36	@ 0x24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	58024400 	.word	0x58024400
 800ba28:	03d09000 	.word	0x03d09000
 800ba2c:	46000000 	.word	0x46000000
 800ba30:	4c742400 	.word	0x4c742400
 800ba34:	4a742400 	.word	0x4a742400
 800ba38:	4bb71b00 	.word	0x4bb71b00

0800ba3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b089      	sub	sp, #36	@ 0x24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba44:	4ba0      	ldr	r3, [pc, #640]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba48:	f003 0303 	and.w	r3, r3, #3
 800ba4c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ba4e:	4b9e      	ldr	r3, [pc, #632]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba52:	091b      	lsrs	r3, r3, #4
 800ba54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba58:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ba5a:	4b9b      	ldr	r3, [pc, #620]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ba64:	4b98      	ldr	r3, [pc, #608]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba68:	08db      	lsrs	r3, r3, #3
 800ba6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	fb02 f303 	mul.w	r3, r2, r3
 800ba74:	ee07 3a90 	vmov	s15, r3
 800ba78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 8111 	beq.w	800bcaa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	f000 8083 	beq.w	800bb96 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	f200 80a1 	bhi.w	800bbda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d056      	beq.n	800bb52 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800baa4:	e099      	b.n	800bbda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baa6:	4b88      	ldr	r3, [pc, #544]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d02d      	beq.n	800bb0e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bab2:	4b85      	ldr	r3, [pc, #532]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	08db      	lsrs	r3, r3, #3
 800bab8:	f003 0303 	and.w	r3, r3, #3
 800babc:	4a83      	ldr	r2, [pc, #524]	@ (800bccc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800babe:	fa22 f303 	lsr.w	r3, r2, r3
 800bac2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	ee07 3a90 	vmov	s15, r3
 800baca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	ee07 3a90 	vmov	s15, r3
 800bad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800badc:	4b7a      	ldr	r3, [pc, #488]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bae4:	ee07 3a90 	vmov	s15, r3
 800bae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baec:	ed97 6a03 	vldr	s12, [r7, #12]
 800baf0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800baf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bafc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb08:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb0c:	e087      	b.n	800bc1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	ee07 3a90 	vmov	s15, r3
 800bb14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb18:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800bcd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb20:	4b69      	ldr	r3, [pc, #420]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb28:	ee07 3a90 	vmov	s15, r3
 800bb2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb30:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb34:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb50:	e065      	b.n	800bc1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	ee07 3a90 	vmov	s15, r3
 800bb58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800bcd8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bb60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb64:	4b58      	ldr	r3, [pc, #352]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb6c:	ee07 3a90 	vmov	s15, r3
 800bb70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb74:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb78:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb94:	e043      	b.n	800bc1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	ee07 3a90 	vmov	s15, r3
 800bb9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800bcdc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba8:	4b47      	ldr	r3, [pc, #284]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbb0:	ee07 3a90 	vmov	s15, r3
 800bbb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbbc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbd8:	e021      	b.n	800bc1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	ee07 3a90 	vmov	s15, r3
 800bbe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bcd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbec:	4b36      	ldr	r3, [pc, #216]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbf4:	ee07 3a90 	vmov	s15, r3
 800bbf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbfc:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc00:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc1c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bc1e:	4b2a      	ldr	r3, [pc, #168]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc22:	0a5b      	lsrs	r3, r3, #9
 800bc24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc28:	ee07 3a90 	vmov	s15, r3
 800bc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc38:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc44:	ee17 2a90 	vmov	r2, s15
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bc4c:	4b1e      	ldr	r3, [pc, #120]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc50:	0c1b      	lsrs	r3, r3, #16
 800bc52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc56:	ee07 3a90 	vmov	s15, r3
 800bc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc66:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc72:	ee17 2a90 	vmov	r2, s15
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bc7a:	4b13      	ldr	r3, [pc, #76]	@ (800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7e:	0e1b      	lsrs	r3, r3, #24
 800bc80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc84:	ee07 3a90 	vmov	s15, r3
 800bc88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc94:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca0:	ee17 2a90 	vmov	r2, s15
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bca8:	e008      	b.n	800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	609a      	str	r2, [r3, #8]
}
 800bcbc:	bf00      	nop
 800bcbe:	3724      	adds	r7, #36	@ 0x24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	58024400 	.word	0x58024400
 800bccc:	03d09000 	.word	0x03d09000
 800bcd0:	46000000 	.word	0x46000000
 800bcd4:	4c742400 	.word	0x4c742400
 800bcd8:	4a742400 	.word	0x4a742400
 800bcdc:	4bb71b00 	.word	0x4bb71b00

0800bce0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcee:	4b53      	ldr	r3, [pc, #332]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf2:	f003 0303 	and.w	r3, r3, #3
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d101      	bne.n	800bcfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e099      	b.n	800be32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bcfe:	4b4f      	ldr	r3, [pc, #316]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a4e      	ldr	r2, [pc, #312]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd04:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd0a:	f7f6 ff2f 	bl	8002b6c <HAL_GetTick>
 800bd0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd10:	e008      	b.n	800bd24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd12:	f7f6 ff2b 	bl	8002b6c <HAL_GetTick>
 800bd16:	4602      	mov	r2, r0
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d901      	bls.n	800bd24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	e086      	b.n	800be32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd24:	4b45      	ldr	r3, [pc, #276]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1f0      	bne.n	800bd12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bd30:	4b42      	ldr	r3, [pc, #264]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd34:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	031b      	lsls	r3, r3, #12
 800bd3e:	493f      	ldr	r1, [pc, #252]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	628b      	str	r3, [r1, #40]	@ 0x28
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	025b      	lsls	r3, r3, #9
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	431a      	orrs	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	041b      	lsls	r3, r3, #16
 800bd62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd66:	431a      	orrs	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	061b      	lsls	r3, r3, #24
 800bd70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd74:	4931      	ldr	r1, [pc, #196]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd76:	4313      	orrs	r3, r2
 800bd78:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd7a:	4b30      	ldr	r3, [pc, #192]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	492d      	ldr	r1, [pc, #180]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd8c:	4b2b      	ldr	r3, [pc, #172]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd90:	f023 0220 	bic.w	r2, r3, #32
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	4928      	ldr	r1, [pc, #160]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd9e:	4b27      	ldr	r3, [pc, #156]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda2:	4a26      	ldr	r2, [pc, #152]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bda4:	f023 0310 	bic.w	r3, r3, #16
 800bda8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bdaa:	4b24      	ldr	r3, [pc, #144]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdae:	4b24      	ldr	r3, [pc, #144]	@ (800be40 <RCCEx_PLL2_Config+0x160>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	69d2      	ldr	r2, [r2, #28]
 800bdb6:	00d2      	lsls	r2, r2, #3
 800bdb8:	4920      	ldr	r1, [pc, #128]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bdbe:	4b1f      	ldr	r3, [pc, #124]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc2:	4a1e      	ldr	r2, [pc, #120]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdc4:	f043 0310 	orr.w	r3, r3, #16
 800bdc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d106      	bne.n	800bdde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bdd0:	4b1a      	ldr	r3, [pc, #104]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd4:	4a19      	ldr	r2, [pc, #100]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bdda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bddc:	e00f      	b.n	800bdfe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d106      	bne.n	800bdf2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bde4:	4b15      	ldr	r3, [pc, #84]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde8:	4a14      	ldr	r2, [pc, #80]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bdee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bdf0:	e005      	b.n	800bdfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bdf2:	4b12      	ldr	r3, [pc, #72]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf6:	4a11      	ldr	r2, [pc, #68]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bdfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bdfe:	4b0f      	ldr	r3, [pc, #60]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a0e      	ldr	r2, [pc, #56]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800be04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be0a:	f7f6 feaf 	bl	8002b6c <HAL_GetTick>
 800be0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be10:	e008      	b.n	800be24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be12:	f7f6 feab 	bl	8002b6c <HAL_GetTick>
 800be16:	4602      	mov	r2, r0
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	d901      	bls.n	800be24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be20:	2303      	movs	r3, #3
 800be22:	e006      	b.n	800be32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be24:	4b05      	ldr	r3, [pc, #20]	@ (800be3c <RCCEx_PLL2_Config+0x15c>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0f0      	beq.n	800be12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800be30:	7bfb      	ldrb	r3, [r7, #15]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	58024400 	.word	0x58024400
 800be40:	ffff0007 	.word	0xffff0007

0800be44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be52:	4b53      	ldr	r3, [pc, #332]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be56:	f003 0303 	and.w	r3, r3, #3
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d101      	bne.n	800be62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e099      	b.n	800bf96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800be62:	4b4f      	ldr	r3, [pc, #316]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a4e      	ldr	r2, [pc, #312]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be6e:	f7f6 fe7d 	bl	8002b6c <HAL_GetTick>
 800be72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be74:	e008      	b.n	800be88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be76:	f7f6 fe79 	bl	8002b6c <HAL_GetTick>
 800be7a:	4602      	mov	r2, r0
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	2b02      	cmp	r3, #2
 800be82:	d901      	bls.n	800be88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e086      	b.n	800bf96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be88:	4b45      	ldr	r3, [pc, #276]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1f0      	bne.n	800be76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be94:	4b42      	ldr	r3, [pc, #264]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be98:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	051b      	lsls	r3, r3, #20
 800bea2:	493f      	ldr	r1, [pc, #252]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bea4:	4313      	orrs	r3, r2
 800bea6:	628b      	str	r3, [r1, #40]	@ 0x28
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	3b01      	subs	r3, #1
 800beae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	3b01      	subs	r3, #1
 800beb8:	025b      	lsls	r3, r3, #9
 800beba:	b29b      	uxth	r3, r3
 800bebc:	431a      	orrs	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	3b01      	subs	r3, #1
 800bec4:	041b      	lsls	r3, r3, #16
 800bec6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800beca:	431a      	orrs	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	061b      	lsls	r3, r3, #24
 800bed4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bed8:	4931      	ldr	r1, [pc, #196]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800beda:	4313      	orrs	r3, r2
 800bedc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bede:	4b30      	ldr	r3, [pc, #192]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	492d      	ldr	r1, [pc, #180]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800beec:	4313      	orrs	r3, r2
 800beee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bef0:	4b2b      	ldr	r3, [pc, #172]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	4928      	ldr	r1, [pc, #160]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800befe:	4313      	orrs	r3, r2
 800bf00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bf02:	4b27      	ldr	r3, [pc, #156]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf06:	4a26      	ldr	r2, [pc, #152]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bf0e:	4b24      	ldr	r3, [pc, #144]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf12:	4b24      	ldr	r3, [pc, #144]	@ (800bfa4 <RCCEx_PLL3_Config+0x160>)
 800bf14:	4013      	ands	r3, r2
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	69d2      	ldr	r2, [r2, #28]
 800bf1a:	00d2      	lsls	r2, r2, #3
 800bf1c:	4920      	ldr	r1, [pc, #128]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bf22:	4b1f      	ldr	r3, [pc, #124]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf26:	4a1e      	ldr	r2, [pc, #120]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bf34:	4b1a      	ldr	r3, [pc, #104]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf38:	4a19      	ldr	r2, [pc, #100]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bf3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf40:	e00f      	b.n	800bf62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d106      	bne.n	800bf56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bf48:	4b15      	ldr	r3, [pc, #84]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf4c:	4a14      	ldr	r2, [pc, #80]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bf52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf54:	e005      	b.n	800bf62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bf56:	4b12      	ldr	r3, [pc, #72]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5a:	4a11      	ldr	r2, [pc, #68]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bf62:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a0e      	ldr	r2, [pc, #56]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf6e:	f7f6 fdfd 	bl	8002b6c <HAL_GetTick>
 800bf72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf74:	e008      	b.n	800bf88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf76:	f7f6 fdf9 	bl	8002b6c <HAL_GetTick>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d901      	bls.n	800bf88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e006      	b.n	800bf96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf88:	4b05      	ldr	r3, [pc, #20]	@ (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d0f0      	beq.n	800bf76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	58024400 	.word	0x58024400
 800bfa4:	ffff0007 	.word	0xffff0007

0800bfa8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08a      	sub	sp, #40	@ 0x28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d101      	bne.n	800bfba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e075      	b.n	800c0a6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d105      	bne.n	800bfd2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7f6 fa35 	bl	800243c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2204      	movs	r2, #4
 800bfd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f868 	bl	800c0b0 <HAL_SD_InitCard>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e05d      	b.n	800c0a6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bfea:	f107 0308 	add.w	r3, r7, #8
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fdaf 	bl	800cb54 <HAL_SD_GetCardStatus>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d001      	beq.n	800c000 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e052      	b.n	800c0a6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c000:	7e3b      	ldrb	r3, [r7, #24]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c006:	7e7b      	ldrb	r3, [r7, #25]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c010:	2b01      	cmp	r3, #1
 800c012:	d10a      	bne.n	800c02a <HAL_SD_Init+0x82>
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	2b00      	cmp	r3, #0
 800c018:	d102      	bne.n	800c020 <HAL_SD_Init+0x78>
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d004      	beq.n	800c02a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c026:	659a      	str	r2, [r3, #88]	@ 0x58
 800c028:	e00b      	b.n	800c042 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d104      	bne.n	800c03c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c038:	659a      	str	r2, [r3, #88]	@ 0x58
 800c03a:	e002      	b.n	800c042 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fe6d 	bl	800cd28 <HAL_SD_ConfigWideBusOperation>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e026      	b.n	800c0a6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c058:	f7f6 fd88 	bl	8002b6c <HAL_GetTick>
 800c05c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c05e:	e011      	b.n	800c084 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c060:	f7f6 fd84 	bl	8002b6c <HAL_GetTick>
 800c064:	4602      	mov	r2, r0
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	d109      	bne.n	800c084 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c076:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c080:	2303      	movs	r3, #3
 800c082:	e010      	b.n	800c0a6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 ff61 	bl	800cf4c <HAL_SD_GetCardState>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	d1e7      	bne.n	800c060 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3728      	adds	r7, #40	@ 0x28
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
	...

0800c0b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c0b0:	b590      	push	{r4, r7, lr}
 800c0b2:	b08d      	sub	sp, #52	@ 0x34
 800c0b4:	af02      	add	r7, sp, #8
 800c0b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c0c8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c0cc:	f04f 0100 	mov.w	r1, #0
 800c0d0:	f7fe fd24 	bl	800ab1c <HAL_RCCEx_GetPeriphCLKFreq>
 800c0d4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d109      	bne.n	800c0f0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c0ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e070      	b.n	800c1d2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f2:	0a1b      	lsrs	r3, r3, #8
 800c0f4:	4a39      	ldr	r2, [pc, #228]	@ (800c1dc <HAL_SD_InitCard+0x12c>)
 800c0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fa:	091b      	lsrs	r3, r3, #4
 800c0fc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681c      	ldr	r4, [r3, #0]
 800c102:	466a      	mov	r2, sp
 800c104:	f107 0318 	add.w	r3, r7, #24
 800c108:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c10c:	e882 0003 	stmia.w	r2, {r0, r1}
 800c110:	f107 030c 	add.w	r3, r7, #12
 800c114:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c116:	4620      	mov	r0, r4
 800c118:	f003 fffe 	bl	8010118 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4618      	mov	r0, r3
 800c122:	f004 f841 	bl	80101a8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d005      	beq.n	800c138 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c132:	fbb2 f3f3 	udiv	r3, r2, r3
 800c136:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d007      	beq.n	800c14e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c13e:	4a28      	ldr	r2, [pc, #160]	@ (800c1e0 <HAL_SD_InitCard+0x130>)
 800c140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c142:	fbb2 f3f3 	udiv	r3, r2, r3
 800c146:	3301      	adds	r3, #1
 800c148:	4618      	mov	r0, r3
 800c14a:	f7f6 fd1b 	bl	8002b84 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 ffea 	bl	800d128 <SD_PowerON>
 800c154:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c156:	6a3b      	ldr	r3, [r7, #32]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00b      	beq.n	800c174 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	431a      	orrs	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	e02e      	b.n	800c1d2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 ff09 	bl	800cf8c <SD_InitCard>
 800c17a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00b      	beq.n	800c19a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	431a      	orrs	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e01b      	b.n	800c1d2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f004 f896 	bl	80102d4 <SDMMC_CmdBlockLength>
 800c1a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00f      	beq.n	800c1d0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a0b      	ldr	r2, [pc, #44]	@ (800c1e4 <HAL_SD_InitCard+0x134>)
 800c1b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	431a      	orrs	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e000      	b.n	800c1d2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	372c      	adds	r7, #44	@ 0x2c
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd90      	pop	{r4, r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	014f8b59 	.word	0x014f8b59
 800c1e0:	00012110 	.word	0x00012110
 800c1e4:	1fe00fff 	.word	0x1fe00fff

0800c1e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b08c      	sub	sp, #48	@ 0x30
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d107      	bne.n	800c210 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c204:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	e08d      	b.n	800c32c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b01      	cmp	r3, #1
 800c21a:	f040 8086 	bne.w	800c32a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	441a      	add	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c22e:	429a      	cmp	r2, r3
 800c230:	d907      	bls.n	800c242 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c236:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e074      	b.n	800c32c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2203      	movs	r2, #3
 800c246:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2200      	movs	r2, #0
 800c250:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	025a      	lsls	r2, r3, #9
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c264:	2b01      	cmp	r3, #1
 800c266:	d002      	beq.n	800c26e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c26a:	025b      	lsls	r3, r3, #9
 800c26c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c26e:	f04f 33ff 	mov.w	r3, #4294967295
 800c272:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	025b      	lsls	r3, r3, #9
 800c278:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c27a:	2390      	movs	r3, #144	@ 0x90
 800c27c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c27e:	2302      	movs	r3, #2
 800c280:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c282:	2300      	movs	r3, #0
 800c284:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c286:	2300      	movs	r3, #0
 800c288:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f107 0210 	add.w	r2, r7, #16
 800c292:	4611      	mov	r1, r2
 800c294:	4618      	mov	r0, r3
 800c296:	f003 fff1 	bl	801027c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68da      	ldr	r2, [r3, #12]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2a8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d90a      	bls.n	800c2d6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2282      	movs	r2, #130	@ 0x82
 800c2c4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f004 f847 	bl	8010360 <SDMMC_CmdReadMultiBlock>
 800c2d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c2d4:	e009      	b.n	800c2ea <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2281      	movs	r2, #129	@ 0x81
 800c2da:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f004 f819 	bl	801031a <SDMMC_CmdReadSingleBlock>
 800c2e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d012      	beq.n	800c316 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a0f      	ldr	r2, [pc, #60]	@ (800c334 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c2f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2fe:	431a      	orrs	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	e00a      	b.n	800c32c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c324:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c326:	2300      	movs	r3, #0
 800c328:	e000      	b.n	800c32c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c32a:	2302      	movs	r3, #2
  }
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3730      	adds	r7, #48	@ 0x30
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	1fe00fff 	.word	0x1fe00fff

0800c338 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08c      	sub	sp, #48	@ 0x30
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d107      	bne.n	800c360 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c354:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e08d      	b.n	800c47c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b01      	cmp	r3, #1
 800c36a:	f040 8086 	bne.w	800c47a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	441a      	add	r2, r3
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c37e:	429a      	cmp	r2, r3
 800c380:	d907      	bls.n	800c392 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c386:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	e074      	b.n	800c47c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2203      	movs	r2, #3
 800c396:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	025a      	lsls	r2, r3, #9
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d002      	beq.n	800c3be <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ba:	025b      	lsls	r3, r3, #9
 800c3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3be:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	025b      	lsls	r3, r3, #9
 800c3c8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c3ca:	2390      	movs	r3, #144	@ 0x90
 800c3cc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f107 0210 	add.w	r2, r7, #16
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f003 ff49 	bl	801027c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68da      	ldr	r2, [r3, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3f8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2201      	movs	r2, #1
 800c408:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d90a      	bls.n	800c426 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	22a0      	movs	r2, #160	@ 0xa0
 800c414:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c41c:	4618      	mov	r0, r3
 800c41e:	f003 ffe5 	bl	80103ec <SDMMC_CmdWriteMultiBlock>
 800c422:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c424:	e009      	b.n	800c43a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2290      	movs	r2, #144	@ 0x90
 800c42a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c432:	4618      	mov	r0, r3
 800c434:	f003 ffb7 	bl	80103a6 <SDMMC_CmdWriteSingleBlock>
 800c438:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d012      	beq.n	800c466 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a0f      	ldr	r2, [pc, #60]	@ (800c484 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c446:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c44e:	431a      	orrs	r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	e00a      	b.n	800c47c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c474:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	e000      	b.n	800c47c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c47a:	2302      	movs	r3, #2
  }
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3730      	adds	r7, #48	@ 0x30
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	1fe00fff 	.word	0x1fe00fff

0800c488 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c494:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c49c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d008      	beq.n	800c4b6 <HAL_SD_IRQHandler+0x2e>
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f003 0308 	and.w	r3, r3, #8
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f001 f926 	bl	800d700 <SD_Read_IT>
 800c4b4:	e19a      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 80ac 	beq.w	800c61e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c4ce:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	4b59      	ldr	r3, [pc, #356]	@ (800c640 <HAL_SD_IRQHandler+0x1b8>)
 800c4dc:	400b      	ands	r3, r1
 800c4de:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c4ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68da      	ldr	r2, [r3, #12]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c4fe:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f003 0308 	and.w	r3, r3, #8
 800c506:	2b00      	cmp	r3, #0
 800c508:	d038      	beq.n	800c57c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f003 0302 	and.w	r3, r3, #2
 800c510:	2b00      	cmp	r3, #0
 800c512:	d104      	bne.n	800c51e <HAL_SD_IRQHandler+0x96>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f003 0320 	and.w	r3, r3, #32
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d011      	beq.n	800c542 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4618      	mov	r0, r3
 800c524:	f003 ff86 	bl	8010434 <SDMMC_CmdStopTransfer>
 800c528:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d008      	beq.n	800c542 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	431a      	orrs	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f95b 	bl	800c7f8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a3f      	ldr	r2, [pc, #252]	@ (800c644 <HAL_SD_IRQHandler+0x1bc>)
 800c548:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d104      	bne.n	800c56c <HAL_SD_IRQHandler+0xe4>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f003 0302 	and.w	r3, r3, #2
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f004 fc39 	bl	8010de4 <HAL_SD_RxCpltCallback>
 800c572:	e13b      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f004 fc2b 	bl	8010dd0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c57a:	e137      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 8132 	beq.w	800c7ec <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2200      	movs	r2, #0
 800c58e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2200      	movs	r2, #0
 800c596:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2200      	movs	r2, #0
 800c59e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f003 0302 	and.w	r3, r3, #2
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d104      	bne.n	800c5b4 <HAL_SD_IRQHandler+0x12c>
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f003 0320 	and.w	r3, r3, #32
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d011      	beq.n	800c5d8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f003 ff3b 	bl	8010434 <SDMMC_CmdStopTransfer>
 800c5be:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d008      	beq.n	800c5d8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	431a      	orrs	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f910 	bl	800c7f8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f003 0310 	and.w	r3, r3, #16
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d104      	bne.n	800c5fa <HAL_SD_IRQHandler+0x172>
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f003 0320 	and.w	r3, r3, #32
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d002      	beq.n	800c600 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f004 fbe8 	bl	8010dd0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d105      	bne.n	800c616 <HAL_SD_IRQHandler+0x18e>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f003 0302 	and.w	r3, r3, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	f000 80eb 	beq.w	800c7ec <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f004 fbe4 	bl	8010de4 <HAL_SD_RxCpltCallback>
}
 800c61c:	e0e6      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00d      	beq.n	800c648 <HAL_SD_IRQHandler+0x1c0>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f003 0308 	and.w	r3, r3, #8
 800c632:	2b00      	cmp	r3, #0
 800c634:	d008      	beq.n	800c648 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f001 f8a8 	bl	800d78c <SD_Write_IT>
 800c63c:	e0d6      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
 800c63e:	bf00      	nop
 800c640:	ffff3ec5 	.word	0xffff3ec5
 800c644:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c64e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c652:	2b00      	cmp	r3, #0
 800c654:	f000 809d 	beq.w	800c792 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c65e:	f003 0302 	and.w	r3, r3, #2
 800c662:	2b00      	cmp	r3, #0
 800c664:	d005      	beq.n	800c672 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c66a:	f043 0202 	orr.w	r2, r3, #2
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c678:	f003 0308 	and.w	r3, r3, #8
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d005      	beq.n	800c68c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c684:	f043 0208 	orr.w	r2, r3, #8
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c692:	f003 0320 	and.w	r3, r3, #32
 800c696:	2b00      	cmp	r3, #0
 800c698:	d005      	beq.n	800c6a6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c69e:	f043 0220 	orr.w	r2, r3, #32
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ac:	f003 0310 	and.w	r3, r3, #16
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d005      	beq.n	800c6c0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6b8:	f043 0210 	orr.w	r2, r3, #16
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a4b      	ldr	r2, [pc, #300]	@ (800c7f4 <HAL_SD_IRQHandler+0x36c>)
 800c6c6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c6d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	68da      	ldr	r2, [r3, #12]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c6e6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c6f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68da      	ldr	r2, [r3, #12]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c706:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f003 fe91 	bl	8010434 <SDMMC_CmdStopTransfer>
 800c712:	4602      	mov	r2, r0
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c718:	431a      	orrs	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c72c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c736:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f003 0308 	and.w	r3, r3, #8
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00a      	beq.n	800c758 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f851 	bl	800c7f8 <HAL_SD_ErrorCallback>
}
 800c756:	e049      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d044      	beq.n	800c7ec <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c766:	2b00      	cmp	r3, #0
 800c768:	d040      	beq.n	800c7ec <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c778:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2200      	movs	r2, #0
 800c780:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f834 	bl	800c7f8 <HAL_SD_ErrorCallback>
}
 800c790:	e02c      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d025      	beq.n	800c7ec <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7a8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10c      	bne.n	800c7d2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f003 0320 	and.w	r3, r3, #32
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d003      	beq.n	800c7ca <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f001 f84a 	bl	800d85c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c7c8:	e010      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 f832 	bl	800d834 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c7d0:	e00c      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f003 0320 	and.w	r3, r3, #32
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d003      	beq.n	800c7e4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f001 f833 	bl	800d848 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c7e2:	e003      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f001 f81b 	bl	800d820 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c7ea:	e7ff      	b.n	800c7ec <HAL_SD_IRQHandler+0x364>
 800c7ec:	bf00      	nop
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	18000f3a 	.word	0x18000f3a

0800c7f8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c800:	bf00      	nop
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c81a:	0f9b      	lsrs	r3, r3, #30
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c826:	0e9b      	lsrs	r3, r3, #26
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	f003 030f 	and.w	r3, r3, #15
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c838:	0e1b      	lsrs	r3, r3, #24
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	f003 0303 	and.w	r3, r3, #3
 800c840:	b2da      	uxtb	r2, r3
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c84a:	0c1b      	lsrs	r3, r3, #16
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c856:	0a1b      	lsrs	r3, r3, #8
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c862:	b2da      	uxtb	r2, r3
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c86c:	0d1b      	lsrs	r3, r3, #20
 800c86e:	b29a      	uxth	r2, r3
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c878:	0c1b      	lsrs	r3, r3, #16
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	f003 030f 	and.w	r3, r3, #15
 800c880:	b2da      	uxtb	r2, r3
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c88a:	0bdb      	lsrs	r3, r3, #15
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	b2da      	uxtb	r2, r3
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c89c:	0b9b      	lsrs	r3, r3, #14
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8ae:	0b5b      	lsrs	r3, r3, #13
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8c0:	0b1b      	lsrs	r3, r3, #12
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	f003 0301 	and.w	r3, r3, #1
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d163      	bne.n	800c9a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8e0:	009a      	lsls	r2, r3, #2
 800c8e2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c8ec:	0f92      	lsrs	r2, r2, #30
 800c8ee:	431a      	orrs	r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8f8:	0edb      	lsrs	r3, r3, #27
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	f003 0307 	and.w	r3, r3, #7
 800c900:	b2da      	uxtb	r2, r3
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c90a:	0e1b      	lsrs	r3, r3, #24
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	f003 0307 	and.w	r3, r3, #7
 800c912:	b2da      	uxtb	r2, r3
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c91c:	0d5b      	lsrs	r3, r3, #21
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	f003 0307 	and.w	r3, r3, #7
 800c924:	b2da      	uxtb	r2, r3
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c92e:	0c9b      	lsrs	r3, r3, #18
 800c930:	b2db      	uxtb	r3, r3
 800c932:	f003 0307 	and.w	r3, r3, #7
 800c936:	b2da      	uxtb	r2, r3
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c940:	0bdb      	lsrs	r3, r3, #15
 800c942:	b2db      	uxtb	r3, r3
 800c944:	f003 0307 	and.w	r3, r3, #7
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	691b      	ldr	r3, [r3, #16]
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	7e1b      	ldrb	r3, [r3, #24]
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	f003 0307 	and.w	r3, r3, #7
 800c962:	3302      	adds	r3, #2
 800c964:	2201      	movs	r2, #1
 800c966:	fa02 f303 	lsl.w	r3, r2, r3
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c96e:	fb03 f202 	mul.w	r2, r3, r2
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	7a1b      	ldrb	r3, [r3, #8]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f003 030f 	and.w	r3, r3, #15
 800c980:	2201      	movs	r2, #1
 800c982:	409a      	lsls	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c990:	0a52      	lsrs	r2, r2, #9
 800c992:	fb03 f202 	mul.w	r2, r3, r2
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9a0:	655a      	str	r2, [r3, #84]	@ 0x54
 800c9a2:	e031      	b.n	800ca08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d11d      	bne.n	800c9e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c9b0:	041b      	lsls	r3, r3, #16
 800c9b2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9ba:	0c1b      	lsrs	r3, r3, #16
 800c9bc:	431a      	orrs	r2, r3
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	029a      	lsls	r2, r3, #10
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	655a      	str	r2, [r3, #84]	@ 0x54
 800c9e6:	e00f      	b.n	800ca08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a58      	ldr	r2, [pc, #352]	@ (800cb50 <HAL_SD_GetCardCSD+0x344>)
 800c9ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	e09d      	b.n	800cb44 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca0c:	0b9b      	lsrs	r3, r3, #14
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	f003 0301 	and.w	r3, r3, #1
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca1e:	09db      	lsrs	r3, r3, #7
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca40:	0fdb      	lsrs	r3, r3, #31
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca4c:	0f5b      	lsrs	r3, r3, #29
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	f003 0303 	and.w	r3, r3, #3
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca5e:	0e9b      	lsrs	r3, r3, #26
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	f003 0307 	and.w	r3, r3, #7
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca70:	0d9b      	lsrs	r3, r3, #22
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	f003 030f 	and.w	r3, r3, #15
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca82:	0d5b      	lsrs	r3, r3, #21
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca9e:	0c1b      	lsrs	r3, r3, #16
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	f003 0301 	and.w	r3, r3, #1
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cab2:	0bdb      	lsrs	r3, r3, #15
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	f003 0301 	and.w	r3, r3, #1
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cac6:	0b9b      	lsrs	r3, r3, #14
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cada:	0b5b      	lsrs	r3, r3, #13
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caee:	0b1b      	lsrs	r3, r3, #12
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	f003 0301 	and.w	r3, r3, #1
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb02:	0a9b      	lsrs	r3, r3, #10
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	f003 0303 	and.w	r3, r3, #3
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	f003 0303 	and.w	r3, r3, #3
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb2a:	085b      	lsrs	r3, r3, #1
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	1fe00fff 	.word	0x1fe00fff

0800cb54 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b094      	sub	sp, #80	@ 0x50
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	2b03      	cmp	r3, #3
 800cb6e:	d101      	bne.n	800cb74 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e0a7      	b.n	800ccc4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cb74:	f107 0308 	add.w	r3, r7, #8
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fb62 	bl	800d244 <SD_SendSDStatus>
 800cb80:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d011      	beq.n	800cbac <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a4f      	ldr	r2, [pc, #316]	@ (800cccc <HAL_SD_GetCardStatus+0x178>)
 800cb8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb96:	431a      	orrs	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800cbaa:	e070      	b.n	800cc8e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	099b      	lsrs	r3, r3, #6
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	f003 0303 	and.w	r3, r3, #3
 800cbb6:	b2da      	uxtb	r2, r3
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	095b      	lsrs	r3, r3, #5
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	f003 0301 	and.w	r3, r3, #1
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	0a1b      	lsrs	r3, r3, #8
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	0e1b      	lsrs	r3, r3, #24
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	061a      	lsls	r2, r3, #24
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cbf2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	0a1b      	lsrs	r3, r3, #8
 800cbf8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbfc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	0e1b      	lsrs	r3, r3, #24
 800cc02:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	0a1b      	lsrs	r3, r3, #8
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	0d1b      	lsrs	r3, r3, #20
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	f003 030f 	and.w	r3, r3, #15
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	0c1b      	lsrs	r3, r3, #16
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	0a9b      	lsrs	r3, r3, #10
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	0a1b      	lsrs	r3, r3, #8
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	f003 0303 	and.w	r3, r3, #3
 800cc60:	b2da      	uxtb	r2, r3
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	091b      	lsrs	r3, r3, #4
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	f003 030f 	and.w	r3, r3, #15
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	f003 030f 	and.w	r3, r3, #15
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	0e1b      	lsrs	r3, r3, #24
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cc96:	4618      	mov	r0, r3
 800cc98:	f003 fb1c 	bl	80102d4 <SDMMC_CmdBlockLength>
 800cc9c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00d      	beq.n	800ccc0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a08      	ldr	r2, [pc, #32]	@ (800cccc <HAL_SD_GetCardStatus+0x178>)
 800ccaa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccb0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800ccc0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3750      	adds	r7, #80	@ 0x50
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	1fe00fff 	.word	0x1fe00fff

0800ccd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	370c      	adds	r7, #12
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cd28:	b590      	push	{r4, r7, lr}
 800cd2a:	b08d      	sub	sp, #52	@ 0x34
 800cd2c:	af02      	add	r7, sp, #8
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2203      	movs	r2, #3
 800cd3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	d02e      	beq.n	800cda6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd4e:	d106      	bne.n	800cd5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd5c:	e029      	b.n	800cdb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd64:	d10a      	bne.n	800cd7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fb64 	bl	800d434 <SD_WideBus_Enable>
 800cd6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd72:	6a3b      	ldr	r3, [r7, #32]
 800cd74:	431a      	orrs	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd7a:	e01a      	b.n	800cdb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10a      	bne.n	800cd98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fba1 	bl	800d4ca <SD_WideBus_Disable>
 800cd88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd8e:	6a3b      	ldr	r3, [r7, #32]
 800cd90:	431a      	orrs	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd96:	e00c      	b.n	800cdb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd9c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	635a      	str	r2, [r3, #52]	@ 0x34
 800cda4:	e005      	b.n	800cdb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdaa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d007      	beq.n	800cdca <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a5f      	ldr	r2, [pc, #380]	@ (800cf3c <HAL_SD_ConfigWideBusOperation+0x214>)
 800cdc0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cdc8:	e096      	b.n	800cef8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cdca:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800cdce:	f04f 0100 	mov.w	r1, #0
 800cdd2:	f7fd fea3 	bl	800ab1c <HAL_RCCEx_GetPeriphCLKFreq>
 800cdd6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 8083 	beq.w	800cee6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	695a      	ldr	r2, [r3, #20]
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	4950      	ldr	r1, [pc, #320]	@ (800cf40 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cdfe:	fba1 1303 	umull	r1, r3, r1, r3
 800ce02:	0e1b      	lsrs	r3, r3, #24
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d303      	bcc.n	800ce10 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	61bb      	str	r3, [r7, #24]
 800ce0e:	e05a      	b.n	800cec6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce18:	d103      	bne.n	800ce22 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	61bb      	str	r3, [r7, #24]
 800ce20:	e051      	b.n	800cec6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce2a:	d126      	bne.n	800ce7a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	695b      	ldr	r3, [r3, #20]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10e      	bne.n	800ce52 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	4a43      	ldr	r2, [pc, #268]	@ (800cf44 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d906      	bls.n	800ce4a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	4a40      	ldr	r2, [pc, #256]	@ (800cf40 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce40:	fba2 2303 	umull	r2, r3, r2, r3
 800ce44:	0e5b      	lsrs	r3, r3, #25
 800ce46:	61bb      	str	r3, [r7, #24]
 800ce48:	e03d      	b.n	800cec6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	695b      	ldr	r3, [r3, #20]
 800ce4e:	61bb      	str	r3, [r7, #24]
 800ce50:	e039      	b.n	800cec6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	695b      	ldr	r3, [r3, #20]
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	69fa      	ldr	r2, [r7, #28]
 800ce5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce5e:	4a39      	ldr	r2, [pc, #228]	@ (800cf44 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d906      	bls.n	800ce72 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	4a36      	ldr	r2, [pc, #216]	@ (800cf40 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce68:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6c:	0e5b      	lsrs	r3, r3, #25
 800ce6e:	61bb      	str	r3, [r7, #24]
 800ce70:	e029      	b.n	800cec6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	61bb      	str	r3, [r7, #24]
 800ce78:	e025      	b.n	800cec6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	695b      	ldr	r3, [r3, #20]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10e      	bne.n	800cea0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	4a30      	ldr	r2, [pc, #192]	@ (800cf48 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d906      	bls.n	800ce98 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	4a2c      	ldr	r2, [pc, #176]	@ (800cf40 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce92:	0e1b      	lsrs	r3, r3, #24
 800ce94:	61bb      	str	r3, [r7, #24]
 800ce96:	e016      	b.n	800cec6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	61bb      	str	r3, [r7, #24]
 800ce9e:	e012      	b.n	800cec6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	695b      	ldr	r3, [r3, #20]
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	69fa      	ldr	r2, [r7, #28]
 800cea8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceac:	4a26      	ldr	r2, [pc, #152]	@ (800cf48 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d906      	bls.n	800cec0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	4a22      	ldr	r2, [pc, #136]	@ (800cf40 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ceb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceba:	0e1b      	lsrs	r3, r3, #24
 800cebc:	61bb      	str	r3, [r7, #24]
 800cebe:	e002      	b.n	800cec6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	695b      	ldr	r3, [r3, #20]
 800cec4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681c      	ldr	r4, [r3, #0]
 800ceca:	466a      	mov	r2, sp
 800cecc:	f107 0314 	add.w	r3, r7, #20
 800ced0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ced4:	e882 0003 	stmia.w	r2, {r0, r1}
 800ced8:	f107 0308 	add.w	r3, r7, #8
 800cedc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cede:	4620      	mov	r0, r4
 800cee0:	f003 f91a 	bl	8010118 <SDMMC_Init>
 800cee4:	e008      	b.n	800cef8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cf00:	4618      	mov	r0, r3
 800cf02:	f003 f9e7 	bl	80102d4 <SDMMC_CmdBlockLength>
 800cf06:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00c      	beq.n	800cf28 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a0a      	ldr	r2, [pc, #40]	@ (800cf3c <HAL_SD_ConfigWideBusOperation+0x214>)
 800cf14:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	431a      	orrs	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cf30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	372c      	adds	r7, #44	@ 0x2c
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd90      	pop	{r4, r7, pc}
 800cf3c:	1fe00fff 	.word	0x1fe00fff
 800cf40:	55e63b89 	.word	0x55e63b89
 800cf44:	02faf080 	.word	0x02faf080
 800cf48:	017d7840 	.word	0x017d7840

0800cf4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cf54:	2300      	movs	r3, #0
 800cf56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cf58:	f107 030c 	add.w	r3, r7, #12
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fa40 	bl	800d3e4 <SD_SendStatus>
 800cf64:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d005      	beq.n	800cf78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	431a      	orrs	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	0a5b      	lsrs	r3, r3, #9
 800cf7c:	f003 030f 	and.w	r3, r3, #15
 800cf80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cf82:	693b      	ldr	r3, [r7, #16]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3718      	adds	r7, #24
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b090      	sub	sp, #64	@ 0x40
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cf94:	2300      	movs	r3, #0
 800cf96:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cf98:	f7f5 fde8 	bl	8002b6c <HAL_GetTick>
 800cf9c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f003 f911 	bl	80101ca <SDMMC_GetPowerState>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d102      	bne.n	800cfb4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cfae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cfb2:	e0b5      	b.n	800d120 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d02e      	beq.n	800d01a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f003 fb5c 	bl	801067e <SDMMC_CmdSendCID>
 800cfc6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <SD_InitCard+0x46>
    {
      return errorstate;
 800cfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd0:	e0a6      	b.n	800d120 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f003 f93c 	bl	8010256 <SDMMC_GetResponse>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2104      	movs	r1, #4
 800cfea:	4618      	mov	r0, r3
 800cfec:	f003 f933 	bl	8010256 <SDMMC_GetResponse>
 800cff0:	4602      	mov	r2, r0
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2108      	movs	r1, #8
 800cffc:	4618      	mov	r0, r3
 800cffe:	f003 f92a 	bl	8010256 <SDMMC_GetResponse>
 800d002:	4602      	mov	r2, r0
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	210c      	movs	r1, #12
 800d00e:	4618      	mov	r0, r3
 800d010:	f003 f921 	bl	8010256 <SDMMC_GetResponse>
 800d014:	4602      	mov	r2, r0
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d01e:	2b03      	cmp	r3, #3
 800d020:	d01d      	beq.n	800d05e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d022:	e019      	b.n	800d058 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f107 020a 	add.w	r2, r7, #10
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f003 fb64 	bl	80106fc <SDMMC_CmdSetRelAdd>
 800d034:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03e:	e06f      	b.n	800d120 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d040:	f7f5 fd94 	bl	8002b6c <HAL_GetTick>
 800d044:	4602      	mov	r2, r0
 800d046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d04e:	4293      	cmp	r3, r2
 800d050:	d902      	bls.n	800d058 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d052:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d056:	e063      	b.n	800d120 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d058:	897b      	ldrh	r3, [r7, #10]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0e2      	beq.n	800d024 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d062:	2b03      	cmp	r3, #3
 800d064:	d036      	beq.n	800d0d4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d066:	897b      	ldrh	r3, [r7, #10]
 800d068:	461a      	mov	r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d076:	041b      	lsls	r3, r3, #16
 800d078:	4619      	mov	r1, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	f003 fb1e 	bl	80106bc <SDMMC_CmdSendCSD>
 800d080:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d084:	2b00      	cmp	r3, #0
 800d086:	d001      	beq.n	800d08c <SD_InitCard+0x100>
    {
      return errorstate;
 800d088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08a:	e049      	b.n	800d120 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2100      	movs	r1, #0
 800d092:	4618      	mov	r0, r3
 800d094:	f003 f8df 	bl	8010256 <SDMMC_GetResponse>
 800d098:	4602      	mov	r2, r0
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2104      	movs	r1, #4
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f003 f8d6 	bl	8010256 <SDMMC_GetResponse>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2108      	movs	r1, #8
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f003 f8cd 	bl	8010256 <SDMMC_GetResponse>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	210c      	movs	r1, #12
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f003 f8c4 	bl	8010256 <SDMMC_GetResponse>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2104      	movs	r1, #4
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f003 f8bb 	bl	8010256 <SDMMC_GetResponse>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	0d1a      	lsrs	r2, r3, #20
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d0e8:	f107 030c 	add.w	r3, r7, #12
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f7ff fb8c 	bl	800c80c <HAL_SD_GetCardCSD>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d002      	beq.n	800d100 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d0fe:	e00f      	b.n	800d120 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d108:	041b      	lsls	r3, r3, #16
 800d10a:	4619      	mov	r1, r3
 800d10c:	4610      	mov	r0, r2
 800d10e:	f003 f9cd 	bl	80104ac <SDMMC_CmdSelDesel>
 800d112:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d116:	2b00      	cmp	r3, #0
 800d118:	d001      	beq.n	800d11e <SD_InitCard+0x192>
  {
    return errorstate;
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	e000      	b.n	800d120 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3740      	adds	r7, #64	@ 0x40
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d130:	2300      	movs	r3, #0
 800d132:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d134:	2300      	movs	r3, #0
 800d136:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d138:	2300      	movs	r3, #0
 800d13a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4618      	mov	r0, r3
 800d142:	f003 f9d6 	bl	80104f2 <SDMMC_CmdGoIdleState>
 800d146:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	e072      	b.n	800d238 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4618      	mov	r0, r3
 800d158:	f003 f9e9 	bl	801052e <SDMMC_CmdOperCond>
 800d15c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d164:	d10d      	bne.n	800d182 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4618      	mov	r0, r3
 800d172:	f003 f9be 	bl	80104f2 <SDMMC_CmdGoIdleState>
 800d176:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d004      	beq.n	800d188 <SD_PowerON+0x60>
    {
      return errorstate;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	e05a      	b.n	800d238 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d137      	bne.n	800d200 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2100      	movs	r1, #0
 800d196:	4618      	mov	r0, r3
 800d198:	f003 f9e9 	bl	801056e <SDMMC_CmdAppCommand>
 800d19c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d02d      	beq.n	800d200 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d1a8:	e046      	b.n	800d238 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f003 f9dc 	bl	801056e <SDMMC_CmdAppCommand>
 800d1b6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	e03a      	b.n	800d238 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	491e      	ldr	r1, [pc, #120]	@ (800d240 <SD_PowerON+0x118>)
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f003 f9f3 	bl	80105b4 <SDMMC_CmdAppOperCommand>
 800d1ce:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d1da:	e02d      	b.n	800d238 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f003 f837 	bl	8010256 <SDMMC_GetResponse>
 800d1e8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	0fdb      	lsrs	r3, r3, #31
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d101      	bne.n	800d1f6 <SD_PowerON+0xce>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e000      	b.n	800d1f8 <SD_PowerON+0xd0>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	613b      	str	r3, [r7, #16]

    count++;
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d206:	4293      	cmp	r3, r2
 800d208:	d802      	bhi.n	800d210 <SD_PowerON+0xe8>
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d0cc      	beq.n	800d1aa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d216:	4293      	cmp	r3, r2
 800d218:	d902      	bls.n	800d220 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d21a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d21e:	e00b      	b.n	800d238 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3718      	adds	r7, #24
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	c1100000 	.word	0xc1100000

0800d244 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b08c      	sub	sp, #48	@ 0x30
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d24e:	f7f5 fc8d 	bl	8002b6c <HAL_GetTick>
 800d252:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2100      	movs	r1, #0
 800d25e:	4618      	mov	r0, r3
 800d260:	f002 fff9 	bl	8010256 <SDMMC_GetResponse>
 800d264:	4603      	mov	r3, r0
 800d266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d26a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d26e:	d102      	bne.n	800d276 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d270:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d274:	e0b0      	b.n	800d3d8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2140      	movs	r1, #64	@ 0x40
 800d27c:	4618      	mov	r0, r3
 800d27e:	f003 f829 	bl	80102d4 <SDMMC_CmdBlockLength>
 800d282:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d284:	6a3b      	ldr	r3, [r7, #32]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d005      	beq.n	800d296 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	e0a0      	b.n	800d3d8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d29e:	041b      	lsls	r3, r3, #16
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	4610      	mov	r0, r2
 800d2a4:	f003 f963 	bl	801056e <SDMMC_CmdAppCommand>
 800d2a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d005      	beq.n	800d2bc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	e08d      	b.n	800d3d8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d2c2:	2340      	movs	r3, #64	@ 0x40
 800d2c4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d2c6:	2360      	movs	r3, #96	@ 0x60
 800d2c8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f107 0208 	add.w	r2, r7, #8
 800d2de:	4611      	mov	r1, r2
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f002 ffcb 	bl	801027c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f003 fa4b 	bl	8010786 <SDMMC_CmdStatusRegister>
 800d2f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2f2:	6a3b      	ldr	r3, [r7, #32]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d02b      	beq.n	800d350 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d300:	6a3b      	ldr	r3, [r7, #32]
 800d302:	e069      	b.n	800d3d8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d30a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d013      	beq.n	800d33a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d312:	2300      	movs	r3, #0
 800d314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d316:	e00d      	b.n	800d334 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f002 ff25 	bl	801016c <SDMMC_ReadFIFO>
 800d322:	4602      	mov	r2, r0
 800d324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d326:	601a      	str	r2, [r3, #0]
        pData++;
 800d328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32a:	3304      	adds	r3, #4
 800d32c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d330:	3301      	adds	r3, #1
 800d332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d336:	2b07      	cmp	r3, #7
 800d338:	d9ee      	bls.n	800d318 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d33a:	f7f5 fc17 	bl	8002b6c <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d348:	d102      	bne.n	800d350 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d34a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d34e:	e043      	b.n	800d3d8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d356:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d0d2      	beq.n	800d304 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d364:	f003 0308 	and.w	r3, r3, #8
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d36c:	2308      	movs	r3, #8
 800d36e:	e033      	b.n	800d3d8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d376:	f003 0302 	and.w	r3, r3, #2
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d37e:	2302      	movs	r3, #2
 800d380:	e02a      	b.n	800d3d8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d388:	f003 0320 	and.w	r3, r3, #32
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d017      	beq.n	800d3c0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d390:	2320      	movs	r3, #32
 800d392:	e021      	b.n	800d3d8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4618      	mov	r0, r3
 800d39a:	f002 fee7 	bl	801016c <SDMMC_ReadFIFO>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a2:	601a      	str	r2, [r3, #0]
    pData++;
 800d3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d3aa:	f7f5 fbdf 	bl	8002b6c <HAL_GetTick>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b2:	1ad3      	subs	r3, r2, r3
 800d3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b8:	d102      	bne.n	800d3c0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d3ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3be:	e00b      	b.n	800d3d8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1e2      	bne.n	800d394 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a03      	ldr	r2, [pc, #12]	@ (800d3e0 <SD_SendSDStatus+0x19c>)
 800d3d4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3730      	adds	r7, #48	@ 0x30
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	18000f3a 	.word	0x18000f3a

0800d3e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d102      	bne.n	800d3fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d3f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d3f8:	e018      	b.n	800d42c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d402:	041b      	lsls	r3, r3, #16
 800d404:	4619      	mov	r1, r3
 800d406:	4610      	mov	r0, r2
 800d408:	f003 f99a 	bl	8010740 <SDMMC_CmdSendStatus>
 800d40c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	e009      	b.n	800d42c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2100      	movs	r1, #0
 800d41e:	4618      	mov	r0, r3
 800d420:	f002 ff19 	bl	8010256 <SDMMC_GetResponse>
 800d424:	4602      	mov	r2, r0
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d43c:	2300      	movs	r3, #0
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	2300      	movs	r3, #0
 800d442:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2100      	movs	r1, #0
 800d44a:	4618      	mov	r0, r3
 800d44c:	f002 ff03 	bl	8010256 <SDMMC_GetResponse>
 800d450:	4603      	mov	r3, r0
 800d452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d456:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d45a:	d102      	bne.n	800d462 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d45c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d460:	e02f      	b.n	800d4c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d462:	f107 030c 	add.w	r3, r7, #12
 800d466:	4619      	mov	r1, r3
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 f879 	bl	800d560 <SD_FindSCR>
 800d46e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d001      	beq.n	800d47a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	e023      	b.n	800d4c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d01c      	beq.n	800d4be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d48c:	041b      	lsls	r3, r3, #16
 800d48e:	4619      	mov	r1, r3
 800d490:	4610      	mov	r0, r2
 800d492:	f003 f86c 	bl	801056e <SDMMC_CmdAppCommand>
 800d496:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d001      	beq.n	800d4a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	e00f      	b.n	800d4c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2102      	movs	r1, #2
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f003 f8a3 	bl	80105f4 <SDMMC_CmdBusWidth>
 800d4ae:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d001      	beq.n	800d4ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	e003      	b.n	800d4c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	e001      	b.n	800d4c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d4be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3718      	adds	r7, #24
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b086      	sub	sp, #24
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2100      	movs	r1, #0
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f002 feb8 	bl	8010256 <SDMMC_GetResponse>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4f0:	d102      	bne.n	800d4f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d4f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4f6:	e02f      	b.n	800d558 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d4f8:	f107 030c 	add.w	r3, r7, #12
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f82e 	bl	800d560 <SD_FindSCR>
 800d504:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d001      	beq.n	800d510 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	e023      	b.n	800d558 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d516:	2b00      	cmp	r3, #0
 800d518:	d01c      	beq.n	800d554 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d522:	041b      	lsls	r3, r3, #16
 800d524:	4619      	mov	r1, r3
 800d526:	4610      	mov	r0, r2
 800d528:	f003 f821 	bl	801056e <SDMMC_CmdAppCommand>
 800d52c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d001      	beq.n	800d538 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	e00f      	b.n	800d558 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2100      	movs	r1, #0
 800d53e:	4618      	mov	r0, r3
 800d540:	f003 f858 	bl	80105f4 <SDMMC_CmdBusWidth>
 800d544:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d001      	beq.n	800d550 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	e003      	b.n	800d558 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d550:	2300      	movs	r3, #0
 800d552:	e001      	b.n	800d558 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d554:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b08e      	sub	sp, #56	@ 0x38
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d56a:	f7f5 faff 	bl	8002b6c <HAL_GetTick>
 800d56e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d570:	2300      	movs	r3, #0
 800d572:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d574:	2300      	movs	r3, #0
 800d576:	60bb      	str	r3, [r7, #8]
 800d578:	2300      	movs	r3, #0
 800d57a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2108      	movs	r1, #8
 800d586:	4618      	mov	r0, r3
 800d588:	f002 fea4 	bl	80102d4 <SDMMC_CmdBlockLength>
 800d58c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d596:	e0ad      	b.n	800d6f4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5a0:	041b      	lsls	r3, r3, #16
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	f002 ffe2 	bl	801056e <SDMMC_CmdAppCommand>
 800d5aa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b4:	e09e      	b.n	800d6f4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d5bc:	2308      	movs	r3, #8
 800d5be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d5c0:	2330      	movs	r3, #48	@ 0x30
 800d5c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f107 0210 	add.w	r2, r7, #16
 800d5d8:	4611      	mov	r1, r2
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f002 fe4e 	bl	801027c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f003 f828 	bl	801063a <SDMMC_CmdSendSCR>
 800d5ea:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d027      	beq.n	800d642 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f4:	e07e      	b.n	800d6f4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d600:	2b00      	cmp	r3, #0
 800d602:	d113      	bne.n	800d62c <SD_FindSCR+0xcc>
 800d604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d606:	2b00      	cmp	r3, #0
 800d608:	d110      	bne.n	800d62c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4618      	mov	r0, r3
 800d610:	f002 fdac 	bl	801016c <SDMMC_ReadFIFO>
 800d614:	4603      	mov	r3, r0
 800d616:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f002 fda5 	bl	801016c <SDMMC_ReadFIFO>
 800d622:	4603      	mov	r3, r0
 800d624:	60fb      	str	r3, [r7, #12]
      index++;
 800d626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d628:	3301      	adds	r3, #1
 800d62a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d62c:	f7f5 fa9e 	bl	8002b6c <HAL_GetTick>
 800d630:	4602      	mov	r2, r0
 800d632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63a:	d102      	bne.n	800d642 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d63c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d640:	e058      	b.n	800d6f4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d648:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d64c:	4013      	ands	r3, r2
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d0d1      	beq.n	800d5f6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d658:	f003 0308 	and.w	r3, r3, #8
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d005      	beq.n	800d66c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2208      	movs	r2, #8
 800d666:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d668:	2308      	movs	r3, #8
 800d66a:	e043      	b.n	800d6f4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d672:	f003 0302 	and.w	r3, r3, #2
 800d676:	2b00      	cmp	r3, #0
 800d678:	d005      	beq.n	800d686 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2202      	movs	r2, #2
 800d680:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d682:	2302      	movs	r3, #2
 800d684:	e036      	b.n	800d6f4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d68c:	f003 0320 	and.w	r3, r3, #32
 800d690:	2b00      	cmp	r3, #0
 800d692:	d005      	beq.n	800d6a0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2220      	movs	r2, #32
 800d69a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d69c:	2320      	movs	r3, #32
 800d69e:	e029      	b.n	800d6f4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a15      	ldr	r2, [pc, #84]	@ (800d6fc <SD_FindSCR+0x19c>)
 800d6a6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	061a      	lsls	r2, r3, #24
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	021b      	lsls	r3, r3, #8
 800d6b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d6b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	0a1b      	lsrs	r3, r3, #8
 800d6ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d6be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	0e1b      	lsrs	r3, r3, #24
 800d6c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c8:	601a      	str	r2, [r3, #0]
    scr++;
 800d6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6cc:	3304      	adds	r3, #4
 800d6ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	061a      	lsls	r2, r3, #24
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	021b      	lsls	r3, r3, #8
 800d6d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d6dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	0a1b      	lsrs	r3, r3, #8
 800d6e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	0e1b      	lsrs	r3, r3, #24
 800d6ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3738      	adds	r7, #56	@ 0x38
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	18000f3a 	.word	0x18000f3a

0800d700 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d70c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d712:	2b1f      	cmp	r3, #31
 800d714:	d936      	bls.n	800d784 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d716:	2300      	movs	r3, #0
 800d718:	617b      	str	r3, [r7, #20]
 800d71a:	e027      	b.n	800d76c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4618      	mov	r0, r3
 800d722:	f002 fd23 	bl	801016c <SDMMC_ReadFIFO>
 800d726:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	b2da      	uxtb	r2, r3
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	3301      	adds	r3, #1
 800d734:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	0a1b      	lsrs	r3, r3, #8
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	3301      	adds	r3, #1
 800d744:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	0c1b      	lsrs	r3, r3, #16
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	3301      	adds	r3, #1
 800d754:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	0e1b      	lsrs	r3, r3, #24
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	3301      	adds	r3, #1
 800d764:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	3301      	adds	r3, #1
 800d76a:	617b      	str	r3, [r7, #20]
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	2b07      	cmp	r3, #7
 800d770:	d9d4      	bls.n	800d71c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d77c:	f1a3 0220 	sub.w	r2, r3, #32
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d784:	bf00      	nop
 800d786:	3718      	adds	r7, #24
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b086      	sub	sp, #24
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	69db      	ldr	r3, [r3, #28]
 800d798:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	2b1f      	cmp	r3, #31
 800d7a0:	d93a      	bls.n	800d818 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	617b      	str	r3, [r7, #20]
 800d7a6:	e02b      	b.n	800d800 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	021a      	lsls	r2, r3, #8
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	041a      	lsls	r2, r3, #16
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	061a      	lsls	r2, r3, #24
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f107 020c 	add.w	r2, r7, #12
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f002 fcc6 	bl	8010186 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	617b      	str	r3, [r7, #20]
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	2b07      	cmp	r3, #7
 800d804:	d9d0      	bls.n	800d7a8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	693a      	ldr	r2, [r7, #16]
 800d80a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a1b      	ldr	r3, [r3, #32]
 800d810:	f1a3 0220 	sub.w	r2, r3, #32
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	621a      	str	r2, [r3, #32]
  }
}
 800d818:	bf00      	nop
 800d81a:	3718      	adds	r7, #24
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d828:	bf00      	nop
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d83c:	bf00      	nop
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d850:	bf00      	nop
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d864:	bf00      	nop
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e049      	b.n	800d916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7f4 fe66 	bl	8002568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	f000 fc58 	bl	800e164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
	...

0800d920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b01      	cmp	r3, #1
 800d932:	d001      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d934:	2301      	movs	r3, #1
 800d936:	e05e      	b.n	800d9f6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2202      	movs	r2, #2
 800d93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68da      	ldr	r2, [r3, #12]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f042 0201 	orr.w	r2, r2, #1
 800d94e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a2b      	ldr	r2, [pc, #172]	@ (800da04 <HAL_TIM_Base_Start_IT+0xe4>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d02c      	beq.n	800d9b4 <HAL_TIM_Base_Start_IT+0x94>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d962:	d027      	beq.n	800d9b4 <HAL_TIM_Base_Start_IT+0x94>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a27      	ldr	r2, [pc, #156]	@ (800da08 <HAL_TIM_Base_Start_IT+0xe8>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d022      	beq.n	800d9b4 <HAL_TIM_Base_Start_IT+0x94>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a26      	ldr	r2, [pc, #152]	@ (800da0c <HAL_TIM_Base_Start_IT+0xec>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d01d      	beq.n	800d9b4 <HAL_TIM_Base_Start_IT+0x94>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a24      	ldr	r2, [pc, #144]	@ (800da10 <HAL_TIM_Base_Start_IT+0xf0>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d018      	beq.n	800d9b4 <HAL_TIM_Base_Start_IT+0x94>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a23      	ldr	r2, [pc, #140]	@ (800da14 <HAL_TIM_Base_Start_IT+0xf4>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d013      	beq.n	800d9b4 <HAL_TIM_Base_Start_IT+0x94>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a21      	ldr	r2, [pc, #132]	@ (800da18 <HAL_TIM_Base_Start_IT+0xf8>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d00e      	beq.n	800d9b4 <HAL_TIM_Base_Start_IT+0x94>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a20      	ldr	r2, [pc, #128]	@ (800da1c <HAL_TIM_Base_Start_IT+0xfc>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d009      	beq.n	800d9b4 <HAL_TIM_Base_Start_IT+0x94>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a1e      	ldr	r2, [pc, #120]	@ (800da20 <HAL_TIM_Base_Start_IT+0x100>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d004      	beq.n	800d9b4 <HAL_TIM_Base_Start_IT+0x94>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a1d      	ldr	r2, [pc, #116]	@ (800da24 <HAL_TIM_Base_Start_IT+0x104>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d115      	bne.n	800d9e0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	689a      	ldr	r2, [r3, #8]
 800d9ba:	4b1b      	ldr	r3, [pc, #108]	@ (800da28 <HAL_TIM_Base_Start_IT+0x108>)
 800d9bc:	4013      	ands	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2b06      	cmp	r3, #6
 800d9c4:	d015      	beq.n	800d9f2 <HAL_TIM_Base_Start_IT+0xd2>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9cc:	d011      	beq.n	800d9f2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f042 0201 	orr.w	r2, r2, #1
 800d9dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9de:	e008      	b.n	800d9f2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f042 0201 	orr.w	r2, r2, #1
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	e000      	b.n	800d9f4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3714      	adds	r7, #20
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	40010000 	.word	0x40010000
 800da08:	40000400 	.word	0x40000400
 800da0c:	40000800 	.word	0x40000800
 800da10:	40000c00 	.word	0x40000c00
 800da14:	40010400 	.word	0x40010400
 800da18:	40001800 	.word	0x40001800
 800da1c:	40014000 	.word	0x40014000
 800da20:	4000e000 	.word	0x4000e000
 800da24:	4000e400 	.word	0x4000e400
 800da28:	00010007 	.word	0x00010007

0800da2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d101      	bne.n	800da3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e049      	b.n	800dad2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b00      	cmp	r3, #0
 800da48:	d106      	bne.n	800da58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f841 	bl	800dada <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2202      	movs	r2, #2
 800da5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	3304      	adds	r3, #4
 800da68:	4619      	mov	r1, r3
 800da6a:	4610      	mov	r0, r2
 800da6c:	f000 fb7a 	bl	800e164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2201      	movs	r2, #1
 800da74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2201      	movs	r2, #1
 800dacc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dada:	b480      	push	{r7}
 800dadc:	b083      	sub	sp, #12
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dae2:	bf00      	nop
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b084      	sub	sp, #16
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	691b      	ldr	r3, [r3, #16]
 800db04:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	f003 0302 	and.w	r3, r3, #2
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d020      	beq.n	800db52 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f003 0302 	and.w	r3, r3, #2
 800db16:	2b00      	cmp	r3, #0
 800db18:	d01b      	beq.n	800db52 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f06f 0202 	mvn.w	r2, #2
 800db22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	699b      	ldr	r3, [r3, #24]
 800db30:	f003 0303 	and.w	r3, r3, #3
 800db34:	2b00      	cmp	r3, #0
 800db36:	d003      	beq.n	800db40 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 faf5 	bl	800e128 <HAL_TIM_IC_CaptureCallback>
 800db3e:	e005      	b.n	800db4c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fae7 	bl	800e114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 faf8 	bl	800e13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	f003 0304 	and.w	r3, r3, #4
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d020      	beq.n	800db9e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f003 0304 	and.w	r3, r3, #4
 800db62:	2b00      	cmp	r3, #0
 800db64:	d01b      	beq.n	800db9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f06f 0204 	mvn.w	r2, #4
 800db6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2202      	movs	r2, #2
 800db74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	699b      	ldr	r3, [r3, #24]
 800db7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db80:	2b00      	cmp	r3, #0
 800db82:	d003      	beq.n	800db8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 facf 	bl	800e128 <HAL_TIM_IC_CaptureCallback>
 800db8a:	e005      	b.n	800db98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 fac1 	bl	800e114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fad2 	bl	800e13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	f003 0308 	and.w	r3, r3, #8
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d020      	beq.n	800dbea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f003 0308 	and.w	r3, r3, #8
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d01b      	beq.n	800dbea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f06f 0208 	mvn.w	r2, #8
 800dbba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2204      	movs	r2, #4
 800dbc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	69db      	ldr	r3, [r3, #28]
 800dbc8:	f003 0303 	and.w	r3, r3, #3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d003      	beq.n	800dbd8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 faa9 	bl	800e128 <HAL_TIM_IC_CaptureCallback>
 800dbd6:	e005      	b.n	800dbe4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 fa9b 	bl	800e114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 faac 	bl	800e13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	f003 0310 	and.w	r3, r3, #16
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d020      	beq.n	800dc36 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f003 0310 	and.w	r3, r3, #16
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d01b      	beq.n	800dc36 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f06f 0210 	mvn.w	r2, #16
 800dc06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2208      	movs	r2, #8
 800dc0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	69db      	ldr	r3, [r3, #28]
 800dc14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d003      	beq.n	800dc24 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fa83 	bl	800e128 <HAL_TIM_IC_CaptureCallback>
 800dc22:	e005      	b.n	800dc30 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fa75 	bl	800e114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fa86 	bl	800e13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00c      	beq.n	800dc5a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f003 0301 	and.w	r3, r3, #1
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d007      	beq.n	800dc5a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f06f 0201 	mvn.w	r2, #1
 800dc52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f7f3 ff17 	bl	8001a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d104      	bne.n	800dc6e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d00c      	beq.n	800dc88 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d007      	beq.n	800dc88 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dc80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 ffc6 	bl	800ec14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00c      	beq.n	800dcac <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d007      	beq.n	800dcac <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 ffbe 	bl	800ec28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00c      	beq.n	800dcd0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d007      	beq.n	800dcd0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dcc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 fa40 	bl	800e150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	f003 0320 	and.w	r3, r3, #32
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00c      	beq.n	800dcf4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f003 0320 	and.w	r3, r3, #32
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d007      	beq.n	800dcf4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f06f 0220 	mvn.w	r2, #32
 800dcec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 ff86 	bl	800ec00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcf4:	bf00      	nop
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d101      	bne.n	800dd1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd16:	2302      	movs	r3, #2
 800dd18:	e0ff      	b.n	800df1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b14      	cmp	r3, #20
 800dd26:	f200 80f0 	bhi.w	800df0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dd2a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd30:	0800dd85 	.word	0x0800dd85
 800dd34:	0800df0b 	.word	0x0800df0b
 800dd38:	0800df0b 	.word	0x0800df0b
 800dd3c:	0800df0b 	.word	0x0800df0b
 800dd40:	0800ddc5 	.word	0x0800ddc5
 800dd44:	0800df0b 	.word	0x0800df0b
 800dd48:	0800df0b 	.word	0x0800df0b
 800dd4c:	0800df0b 	.word	0x0800df0b
 800dd50:	0800de07 	.word	0x0800de07
 800dd54:	0800df0b 	.word	0x0800df0b
 800dd58:	0800df0b 	.word	0x0800df0b
 800dd5c:	0800df0b 	.word	0x0800df0b
 800dd60:	0800de47 	.word	0x0800de47
 800dd64:	0800df0b 	.word	0x0800df0b
 800dd68:	0800df0b 	.word	0x0800df0b
 800dd6c:	0800df0b 	.word	0x0800df0b
 800dd70:	0800de89 	.word	0x0800de89
 800dd74:	0800df0b 	.word	0x0800df0b
 800dd78:	0800df0b 	.word	0x0800df0b
 800dd7c:	0800df0b 	.word	0x0800df0b
 800dd80:	0800dec9 	.word	0x0800dec9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68b9      	ldr	r1, [r7, #8]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 fa9c 	bl	800e2c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	699a      	ldr	r2, [r3, #24]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f042 0208 	orr.w	r2, r2, #8
 800dd9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	699a      	ldr	r2, [r3, #24]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f022 0204 	bic.w	r2, r2, #4
 800ddae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	6999      	ldr	r1, [r3, #24]
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	691a      	ldr	r2, [r3, #16]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	430a      	orrs	r2, r1
 800ddc0:	619a      	str	r2, [r3, #24]
      break;
 800ddc2:	e0a5      	b.n	800df10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	68b9      	ldr	r1, [r7, #8]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 fb0c 	bl	800e3e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	699a      	ldr	r2, [r3, #24]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ddde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	699a      	ldr	r2, [r3, #24]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	6999      	ldr	r1, [r3, #24]
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	021a      	lsls	r2, r3, #8
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	430a      	orrs	r2, r1
 800de02:	619a      	str	r2, [r3, #24]
      break;
 800de04:	e084      	b.n	800df10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68b9      	ldr	r1, [r7, #8]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f000 fb75 	bl	800e4fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	69da      	ldr	r2, [r3, #28]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f042 0208 	orr.w	r2, r2, #8
 800de20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	69da      	ldr	r2, [r3, #28]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f022 0204 	bic.w	r2, r2, #4
 800de30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	69d9      	ldr	r1, [r3, #28]
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	691a      	ldr	r2, [r3, #16]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	430a      	orrs	r2, r1
 800de42:	61da      	str	r2, [r3, #28]
      break;
 800de44:	e064      	b.n	800df10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 fbdd 	bl	800e60c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	69da      	ldr	r2, [r3, #28]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	69da      	ldr	r2, [r3, #28]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	69d9      	ldr	r1, [r3, #28]
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	021a      	lsls	r2, r3, #8
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	430a      	orrs	r2, r1
 800de84:	61da      	str	r2, [r3, #28]
      break;
 800de86:	e043      	b.n	800df10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68b9      	ldr	r1, [r7, #8]
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 fc26 	bl	800e6e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f042 0208 	orr.w	r2, r2, #8
 800dea2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f022 0204 	bic.w	r2, r2, #4
 800deb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	691a      	ldr	r2, [r3, #16]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	430a      	orrs	r2, r1
 800dec4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dec6:	e023      	b.n	800df10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	68b9      	ldr	r1, [r7, #8]
 800dece:	4618      	mov	r0, r3
 800ded0:	f000 fc6a 	bl	800e7a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dee2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800def2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	021a      	lsls	r2, r3, #8
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	430a      	orrs	r2, r1
 800df06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800df08:	e002      	b.n	800df10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800df0a:	2301      	movs	r3, #1
 800df0c:	75fb      	strb	r3, [r7, #23]
      break;
 800df0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2200      	movs	r2, #0
 800df14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df18:	7dfb      	ldrb	r3, [r7, #23]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3718      	adds	r7, #24
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop

0800df24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df2e:	2300      	movs	r3, #0
 800df30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d101      	bne.n	800df40 <HAL_TIM_ConfigClockSource+0x1c>
 800df3c:	2302      	movs	r3, #2
 800df3e:	e0dc      	b.n	800e0fa <HAL_TIM_ConfigClockSource+0x1d6>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2202      	movs	r2, #2
 800df4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	4b6a      	ldr	r3, [pc, #424]	@ (800e104 <HAL_TIM_ConfigClockSource+0x1e0>)
 800df5c:	4013      	ands	r3, r2
 800df5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a64      	ldr	r2, [pc, #400]	@ (800e108 <HAL_TIM_ConfigClockSource+0x1e4>)
 800df76:	4293      	cmp	r3, r2
 800df78:	f000 80a9 	beq.w	800e0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800df7c:	4a62      	ldr	r2, [pc, #392]	@ (800e108 <HAL_TIM_ConfigClockSource+0x1e4>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	f200 80ae 	bhi.w	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800df84:	4a61      	ldr	r2, [pc, #388]	@ (800e10c <HAL_TIM_ConfigClockSource+0x1e8>)
 800df86:	4293      	cmp	r3, r2
 800df88:	f000 80a1 	beq.w	800e0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800df8c:	4a5f      	ldr	r2, [pc, #380]	@ (800e10c <HAL_TIM_ConfigClockSource+0x1e8>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	f200 80a6 	bhi.w	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800df94:	4a5e      	ldr	r2, [pc, #376]	@ (800e110 <HAL_TIM_ConfigClockSource+0x1ec>)
 800df96:	4293      	cmp	r3, r2
 800df98:	f000 8099 	beq.w	800e0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800df9c:	4a5c      	ldr	r2, [pc, #368]	@ (800e110 <HAL_TIM_ConfigClockSource+0x1ec>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	f200 809e 	bhi.w	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfa4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dfa8:	f000 8091 	beq.w	800e0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800dfac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dfb0:	f200 8096 	bhi.w	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfb8:	f000 8089 	beq.w	800e0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800dfbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfc0:	f200 808e 	bhi.w	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfc8:	d03e      	beq.n	800e048 <HAL_TIM_ConfigClockSource+0x124>
 800dfca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfce:	f200 8087 	bhi.w	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfd6:	f000 8086 	beq.w	800e0e6 <HAL_TIM_ConfigClockSource+0x1c2>
 800dfda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfde:	d87f      	bhi.n	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfe0:	2b70      	cmp	r3, #112	@ 0x70
 800dfe2:	d01a      	beq.n	800e01a <HAL_TIM_ConfigClockSource+0xf6>
 800dfe4:	2b70      	cmp	r3, #112	@ 0x70
 800dfe6:	d87b      	bhi.n	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfe8:	2b60      	cmp	r3, #96	@ 0x60
 800dfea:	d050      	beq.n	800e08e <HAL_TIM_ConfigClockSource+0x16a>
 800dfec:	2b60      	cmp	r3, #96	@ 0x60
 800dfee:	d877      	bhi.n	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dff0:	2b50      	cmp	r3, #80	@ 0x50
 800dff2:	d03c      	beq.n	800e06e <HAL_TIM_ConfigClockSource+0x14a>
 800dff4:	2b50      	cmp	r3, #80	@ 0x50
 800dff6:	d873      	bhi.n	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dff8:	2b40      	cmp	r3, #64	@ 0x40
 800dffa:	d058      	beq.n	800e0ae <HAL_TIM_ConfigClockSource+0x18a>
 800dffc:	2b40      	cmp	r3, #64	@ 0x40
 800dffe:	d86f      	bhi.n	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e000:	2b30      	cmp	r3, #48	@ 0x30
 800e002:	d064      	beq.n	800e0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800e004:	2b30      	cmp	r3, #48	@ 0x30
 800e006:	d86b      	bhi.n	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e008:	2b20      	cmp	r3, #32
 800e00a:	d060      	beq.n	800e0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800e00c:	2b20      	cmp	r3, #32
 800e00e:	d867      	bhi.n	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e010:	2b00      	cmp	r3, #0
 800e012:	d05c      	beq.n	800e0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800e014:	2b10      	cmp	r3, #16
 800e016:	d05a      	beq.n	800e0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800e018:	e062      	b.n	800e0e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e02a:	f000 fca1 	bl	800e970 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e03c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	68ba      	ldr	r2, [r7, #8]
 800e044:	609a      	str	r2, [r3, #8]
      break;
 800e046:	e04f      	b.n	800e0e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e058:	f000 fc8a 	bl	800e970 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	689a      	ldr	r2, [r3, #8]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e06a:	609a      	str	r2, [r3, #8]
      break;
 800e06c:	e03c      	b.n	800e0e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e07a:	461a      	mov	r2, r3
 800e07c:	f000 fbfa 	bl	800e874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2150      	movs	r1, #80	@ 0x50
 800e086:	4618      	mov	r0, r3
 800e088:	f000 fc54 	bl	800e934 <TIM_ITRx_SetConfig>
      break;
 800e08c:	e02c      	b.n	800e0e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e09a:	461a      	mov	r2, r3
 800e09c:	f000 fc19 	bl	800e8d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2160      	movs	r1, #96	@ 0x60
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f000 fc44 	bl	800e934 <TIM_ITRx_SetConfig>
      break;
 800e0ac:	e01c      	b.n	800e0e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	f000 fbda 	bl	800e874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2140      	movs	r1, #64	@ 0x40
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f000 fc34 	bl	800e934 <TIM_ITRx_SetConfig>
      break;
 800e0cc:	e00c      	b.n	800e0e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	4610      	mov	r0, r2
 800e0da:	f000 fc2b 	bl	800e934 <TIM_ITRx_SetConfig>
      break;
 800e0de:	e003      	b.n	800e0e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e0e4:	e000      	b.n	800e0e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e0e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	ffceff88 	.word	0xffceff88
 800e108:	00100040 	.word	0x00100040
 800e10c:	00100030 	.word	0x00100030
 800e110:	00100020 	.word	0x00100020

0800e114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e11c:	bf00      	nop
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e158:	bf00      	nop
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a4a      	ldr	r2, [pc, #296]	@ (800e2a0 <TIM_Base_SetConfig+0x13c>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d013      	beq.n	800e1a4 <TIM_Base_SetConfig+0x40>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e182:	d00f      	beq.n	800e1a4 <TIM_Base_SetConfig+0x40>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4a47      	ldr	r2, [pc, #284]	@ (800e2a4 <TIM_Base_SetConfig+0x140>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d00b      	beq.n	800e1a4 <TIM_Base_SetConfig+0x40>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	4a46      	ldr	r2, [pc, #280]	@ (800e2a8 <TIM_Base_SetConfig+0x144>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d007      	beq.n	800e1a4 <TIM_Base_SetConfig+0x40>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4a45      	ldr	r2, [pc, #276]	@ (800e2ac <TIM_Base_SetConfig+0x148>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d003      	beq.n	800e1a4 <TIM_Base_SetConfig+0x40>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a44      	ldr	r2, [pc, #272]	@ (800e2b0 <TIM_Base_SetConfig+0x14c>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d108      	bne.n	800e1b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4a39      	ldr	r2, [pc, #228]	@ (800e2a0 <TIM_Base_SetConfig+0x13c>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d027      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1c4:	d023      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4a36      	ldr	r2, [pc, #216]	@ (800e2a4 <TIM_Base_SetConfig+0x140>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d01f      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4a35      	ldr	r2, [pc, #212]	@ (800e2a8 <TIM_Base_SetConfig+0x144>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d01b      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4a34      	ldr	r2, [pc, #208]	@ (800e2ac <TIM_Base_SetConfig+0x148>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d017      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a33      	ldr	r2, [pc, #204]	@ (800e2b0 <TIM_Base_SetConfig+0x14c>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d013      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a32      	ldr	r2, [pc, #200]	@ (800e2b4 <TIM_Base_SetConfig+0x150>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d00f      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a31      	ldr	r2, [pc, #196]	@ (800e2b8 <TIM_Base_SetConfig+0x154>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d00b      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a30      	ldr	r2, [pc, #192]	@ (800e2bc <TIM_Base_SetConfig+0x158>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d007      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a2f      	ldr	r2, [pc, #188]	@ (800e2c0 <TIM_Base_SetConfig+0x15c>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d003      	beq.n	800e20e <TIM_Base_SetConfig+0xaa>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a2e      	ldr	r2, [pc, #184]	@ (800e2c4 <TIM_Base_SetConfig+0x160>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d108      	bne.n	800e220 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	4313      	orrs	r3, r2
 800e22c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	689a      	ldr	r2, [r3, #8]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a16      	ldr	r2, [pc, #88]	@ (800e2a0 <TIM_Base_SetConfig+0x13c>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d00f      	beq.n	800e26c <TIM_Base_SetConfig+0x108>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4a18      	ldr	r2, [pc, #96]	@ (800e2b0 <TIM_Base_SetConfig+0x14c>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d00b      	beq.n	800e26c <TIM_Base_SetConfig+0x108>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	4a17      	ldr	r2, [pc, #92]	@ (800e2b4 <TIM_Base_SetConfig+0x150>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d007      	beq.n	800e26c <TIM_Base_SetConfig+0x108>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4a16      	ldr	r2, [pc, #88]	@ (800e2b8 <TIM_Base_SetConfig+0x154>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d003      	beq.n	800e26c <TIM_Base_SetConfig+0x108>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a15      	ldr	r2, [pc, #84]	@ (800e2bc <TIM_Base_SetConfig+0x158>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d103      	bne.n	800e274 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	691a      	ldr	r2, [r3, #16]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	f003 0301 	and.w	r3, r3, #1
 800e282:	2b01      	cmp	r3, #1
 800e284:	d105      	bne.n	800e292 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	f023 0201 	bic.w	r2, r3, #1
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	611a      	str	r2, [r3, #16]
  }
}
 800e292:	bf00      	nop
 800e294:	3714      	adds	r7, #20
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	40010000 	.word	0x40010000
 800e2a4:	40000400 	.word	0x40000400
 800e2a8:	40000800 	.word	0x40000800
 800e2ac:	40000c00 	.word	0x40000c00
 800e2b0:	40010400 	.word	0x40010400
 800e2b4:	40014000 	.word	0x40014000
 800e2b8:	40014400 	.word	0x40014400
 800e2bc:	40014800 	.word	0x40014800
 800e2c0:	4000e000 	.word	0x4000e000
 800e2c4:	4000e400 	.word	0x4000e400

0800e2c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b087      	sub	sp, #28
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6a1b      	ldr	r3, [r3, #32]
 800e2d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6a1b      	ldr	r3, [r3, #32]
 800e2dc:	f023 0201 	bic.w	r2, r3, #1
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	699b      	ldr	r3, [r3, #24]
 800e2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e2f0:	68fa      	ldr	r2, [r7, #12]
 800e2f2:	4b37      	ldr	r3, [pc, #220]	@ (800e3d0 <TIM_OC1_SetConfig+0x108>)
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f023 0303 	bic.w	r3, r3, #3
 800e2fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	4313      	orrs	r3, r2
 800e308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f023 0302 	bic.w	r3, r3, #2
 800e310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	689b      	ldr	r3, [r3, #8]
 800e316:	697a      	ldr	r2, [r7, #20]
 800e318:	4313      	orrs	r3, r2
 800e31a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a2d      	ldr	r2, [pc, #180]	@ (800e3d4 <TIM_OC1_SetConfig+0x10c>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d00f      	beq.n	800e344 <TIM_OC1_SetConfig+0x7c>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4a2c      	ldr	r2, [pc, #176]	@ (800e3d8 <TIM_OC1_SetConfig+0x110>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d00b      	beq.n	800e344 <TIM_OC1_SetConfig+0x7c>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a2b      	ldr	r2, [pc, #172]	@ (800e3dc <TIM_OC1_SetConfig+0x114>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d007      	beq.n	800e344 <TIM_OC1_SetConfig+0x7c>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	4a2a      	ldr	r2, [pc, #168]	@ (800e3e0 <TIM_OC1_SetConfig+0x118>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d003      	beq.n	800e344 <TIM_OC1_SetConfig+0x7c>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a29      	ldr	r2, [pc, #164]	@ (800e3e4 <TIM_OC1_SetConfig+0x11c>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d10c      	bne.n	800e35e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	f023 0308 	bic.w	r3, r3, #8
 800e34a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	697a      	ldr	r2, [r7, #20]
 800e352:	4313      	orrs	r3, r2
 800e354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	f023 0304 	bic.w	r3, r3, #4
 800e35c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4a1c      	ldr	r2, [pc, #112]	@ (800e3d4 <TIM_OC1_SetConfig+0x10c>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d00f      	beq.n	800e386 <TIM_OC1_SetConfig+0xbe>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4a1b      	ldr	r2, [pc, #108]	@ (800e3d8 <TIM_OC1_SetConfig+0x110>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d00b      	beq.n	800e386 <TIM_OC1_SetConfig+0xbe>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4a1a      	ldr	r2, [pc, #104]	@ (800e3dc <TIM_OC1_SetConfig+0x114>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d007      	beq.n	800e386 <TIM_OC1_SetConfig+0xbe>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a19      	ldr	r2, [pc, #100]	@ (800e3e0 <TIM_OC1_SetConfig+0x118>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d003      	beq.n	800e386 <TIM_OC1_SetConfig+0xbe>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	4a18      	ldr	r2, [pc, #96]	@ (800e3e4 <TIM_OC1_SetConfig+0x11c>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d111      	bne.n	800e3aa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e38c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	695b      	ldr	r3, [r3, #20]
 800e39a:	693a      	ldr	r2, [r7, #16]
 800e39c:	4313      	orrs	r3, r2
 800e39e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	699b      	ldr	r3, [r3, #24]
 800e3a4:	693a      	ldr	r2, [r7, #16]
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	693a      	ldr	r2, [r7, #16]
 800e3ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	685a      	ldr	r2, [r3, #4]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	697a      	ldr	r2, [r7, #20]
 800e3c2:	621a      	str	r2, [r3, #32]
}
 800e3c4:	bf00      	nop
 800e3c6:	371c      	adds	r7, #28
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr
 800e3d0:	fffeff8f 	.word	0xfffeff8f
 800e3d4:	40010000 	.word	0x40010000
 800e3d8:	40010400 	.word	0x40010400
 800e3dc:	40014000 	.word	0x40014000
 800e3e0:	40014400 	.word	0x40014400
 800e3e4:	40014800 	.word	0x40014800

0800e3e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b087      	sub	sp, #28
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6a1b      	ldr	r3, [r3, #32]
 800e3f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a1b      	ldr	r3, [r3, #32]
 800e3fc:	f023 0210 	bic.w	r2, r3, #16
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	699b      	ldr	r3, [r3, #24]
 800e40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	4b34      	ldr	r3, [pc, #208]	@ (800e4e4 <TIM_OC2_SetConfig+0xfc>)
 800e414:	4013      	ands	r3, r2
 800e416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e41e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	021b      	lsls	r3, r3, #8
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	4313      	orrs	r3, r2
 800e42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f023 0320 	bic.w	r3, r3, #32
 800e432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	011b      	lsls	r3, r3, #4
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	4313      	orrs	r3, r2
 800e43e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4a29      	ldr	r2, [pc, #164]	@ (800e4e8 <TIM_OC2_SetConfig+0x100>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d003      	beq.n	800e450 <TIM_OC2_SetConfig+0x68>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4a28      	ldr	r2, [pc, #160]	@ (800e4ec <TIM_OC2_SetConfig+0x104>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d10d      	bne.n	800e46c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	011b      	lsls	r3, r3, #4
 800e45e:	697a      	ldr	r2, [r7, #20]
 800e460:	4313      	orrs	r3, r2
 800e462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e46a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	4a1e      	ldr	r2, [pc, #120]	@ (800e4e8 <TIM_OC2_SetConfig+0x100>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d00f      	beq.n	800e494 <TIM_OC2_SetConfig+0xac>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4a1d      	ldr	r2, [pc, #116]	@ (800e4ec <TIM_OC2_SetConfig+0x104>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d00b      	beq.n	800e494 <TIM_OC2_SetConfig+0xac>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4a1c      	ldr	r2, [pc, #112]	@ (800e4f0 <TIM_OC2_SetConfig+0x108>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d007      	beq.n	800e494 <TIM_OC2_SetConfig+0xac>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4a1b      	ldr	r2, [pc, #108]	@ (800e4f4 <TIM_OC2_SetConfig+0x10c>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d003      	beq.n	800e494 <TIM_OC2_SetConfig+0xac>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	4a1a      	ldr	r2, [pc, #104]	@ (800e4f8 <TIM_OC2_SetConfig+0x110>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d113      	bne.n	800e4bc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e49a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e4a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	693a      	ldr	r2, [r7, #16]
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	699b      	ldr	r3, [r3, #24]
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	693a      	ldr	r2, [r7, #16]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	693a      	ldr	r2, [r7, #16]
 800e4c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	621a      	str	r2, [r3, #32]
}
 800e4d6:	bf00      	nop
 800e4d8:	371c      	adds	r7, #28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	feff8fff 	.word	0xfeff8fff
 800e4e8:	40010000 	.word	0x40010000
 800e4ec:	40010400 	.word	0x40010400
 800e4f0:	40014000 	.word	0x40014000
 800e4f4:	40014400 	.word	0x40014400
 800e4f8:	40014800 	.word	0x40014800

0800e4fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b087      	sub	sp, #28
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a1b      	ldr	r3, [r3, #32]
 800e50a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6a1b      	ldr	r3, [r3, #32]
 800e510:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	69db      	ldr	r3, [r3, #28]
 800e522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	4b33      	ldr	r3, [pc, #204]	@ (800e5f4 <TIM_OC3_SetConfig+0xf8>)
 800e528:	4013      	ands	r3, r2
 800e52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f023 0303 	bic.w	r3, r3, #3
 800e532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	4313      	orrs	r3, r2
 800e53c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	021b      	lsls	r3, r3, #8
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	4313      	orrs	r3, r2
 800e550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4a28      	ldr	r2, [pc, #160]	@ (800e5f8 <TIM_OC3_SetConfig+0xfc>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d003      	beq.n	800e562 <TIM_OC3_SetConfig+0x66>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a27      	ldr	r2, [pc, #156]	@ (800e5fc <TIM_OC3_SetConfig+0x100>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d10d      	bne.n	800e57e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	021b      	lsls	r3, r3, #8
 800e570:	697a      	ldr	r2, [r7, #20]
 800e572:	4313      	orrs	r3, r2
 800e574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e57c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a1d      	ldr	r2, [pc, #116]	@ (800e5f8 <TIM_OC3_SetConfig+0xfc>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d00f      	beq.n	800e5a6 <TIM_OC3_SetConfig+0xaa>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a1c      	ldr	r2, [pc, #112]	@ (800e5fc <TIM_OC3_SetConfig+0x100>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d00b      	beq.n	800e5a6 <TIM_OC3_SetConfig+0xaa>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a1b      	ldr	r2, [pc, #108]	@ (800e600 <TIM_OC3_SetConfig+0x104>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d007      	beq.n	800e5a6 <TIM_OC3_SetConfig+0xaa>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a1a      	ldr	r2, [pc, #104]	@ (800e604 <TIM_OC3_SetConfig+0x108>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d003      	beq.n	800e5a6 <TIM_OC3_SetConfig+0xaa>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a19      	ldr	r2, [pc, #100]	@ (800e608 <TIM_OC3_SetConfig+0x10c>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d113      	bne.n	800e5ce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e5ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e5b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	695b      	ldr	r3, [r3, #20]
 800e5ba:	011b      	lsls	r3, r3, #4
 800e5bc:	693a      	ldr	r2, [r7, #16]
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	699b      	ldr	r3, [r3, #24]
 800e5c6:	011b      	lsls	r3, r3, #4
 800e5c8:	693a      	ldr	r2, [r7, #16]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	685a      	ldr	r2, [r3, #4]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	621a      	str	r2, [r3, #32]
}
 800e5e8:	bf00      	nop
 800e5ea:	371c      	adds	r7, #28
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr
 800e5f4:	fffeff8f 	.word	0xfffeff8f
 800e5f8:	40010000 	.word	0x40010000
 800e5fc:	40010400 	.word	0x40010400
 800e600:	40014000 	.word	0x40014000
 800e604:	40014400 	.word	0x40014400
 800e608:	40014800 	.word	0x40014800

0800e60c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b087      	sub	sp, #28
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a1b      	ldr	r3, [r3, #32]
 800e61a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6a1b      	ldr	r3, [r3, #32]
 800e620:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	69db      	ldr	r3, [r3, #28]
 800e632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	4b24      	ldr	r3, [pc, #144]	@ (800e6c8 <TIM_OC4_SetConfig+0xbc>)
 800e638:	4013      	ands	r3, r2
 800e63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	021b      	lsls	r3, r3, #8
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	4313      	orrs	r3, r2
 800e64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	031b      	lsls	r3, r3, #12
 800e65e:	693a      	ldr	r2, [r7, #16]
 800e660:	4313      	orrs	r3, r2
 800e662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4a19      	ldr	r2, [pc, #100]	@ (800e6cc <TIM_OC4_SetConfig+0xc0>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d00f      	beq.n	800e68c <TIM_OC4_SetConfig+0x80>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a18      	ldr	r2, [pc, #96]	@ (800e6d0 <TIM_OC4_SetConfig+0xc4>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d00b      	beq.n	800e68c <TIM_OC4_SetConfig+0x80>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4a17      	ldr	r2, [pc, #92]	@ (800e6d4 <TIM_OC4_SetConfig+0xc8>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d007      	beq.n	800e68c <TIM_OC4_SetConfig+0x80>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	4a16      	ldr	r2, [pc, #88]	@ (800e6d8 <TIM_OC4_SetConfig+0xcc>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d003      	beq.n	800e68c <TIM_OC4_SetConfig+0x80>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	4a15      	ldr	r2, [pc, #84]	@ (800e6dc <TIM_OC4_SetConfig+0xd0>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d109      	bne.n	800e6a0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	695b      	ldr	r3, [r3, #20]
 800e698:	019b      	lsls	r3, r3, #6
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	4313      	orrs	r3, r2
 800e69e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	697a      	ldr	r2, [r7, #20]
 800e6a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	693a      	ldr	r2, [r7, #16]
 800e6b8:	621a      	str	r2, [r3, #32]
}
 800e6ba:	bf00      	nop
 800e6bc:	371c      	adds	r7, #28
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr
 800e6c6:	bf00      	nop
 800e6c8:	feff8fff 	.word	0xfeff8fff
 800e6cc:	40010000 	.word	0x40010000
 800e6d0:	40010400 	.word	0x40010400
 800e6d4:	40014000 	.word	0x40014000
 800e6d8:	40014400 	.word	0x40014400
 800e6dc:	40014800 	.word	0x40014800

0800e6e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b087      	sub	sp, #28
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a1b      	ldr	r3, [r3, #32]
 800e6ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a1b      	ldr	r3, [r3, #32]
 800e6f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	4b21      	ldr	r3, [pc, #132]	@ (800e790 <TIM_OC5_SetConfig+0xb0>)
 800e70c:	4013      	ands	r3, r2
 800e70e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	4313      	orrs	r3, r2
 800e718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e720:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	041b      	lsls	r3, r3, #16
 800e728:	693a      	ldr	r2, [r7, #16]
 800e72a:	4313      	orrs	r3, r2
 800e72c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4a18      	ldr	r2, [pc, #96]	@ (800e794 <TIM_OC5_SetConfig+0xb4>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d00f      	beq.n	800e756 <TIM_OC5_SetConfig+0x76>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a17      	ldr	r2, [pc, #92]	@ (800e798 <TIM_OC5_SetConfig+0xb8>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d00b      	beq.n	800e756 <TIM_OC5_SetConfig+0x76>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a16      	ldr	r2, [pc, #88]	@ (800e79c <TIM_OC5_SetConfig+0xbc>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d007      	beq.n	800e756 <TIM_OC5_SetConfig+0x76>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a15      	ldr	r2, [pc, #84]	@ (800e7a0 <TIM_OC5_SetConfig+0xc0>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d003      	beq.n	800e756 <TIM_OC5_SetConfig+0x76>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a14      	ldr	r2, [pc, #80]	@ (800e7a4 <TIM_OC5_SetConfig+0xc4>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d109      	bne.n	800e76a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e75c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	695b      	ldr	r3, [r3, #20]
 800e762:	021b      	lsls	r3, r3, #8
 800e764:	697a      	ldr	r2, [r7, #20]
 800e766:	4313      	orrs	r3, r2
 800e768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	685a      	ldr	r2, [r3, #4]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	621a      	str	r2, [r3, #32]
}
 800e784:	bf00      	nop
 800e786:	371c      	adds	r7, #28
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	fffeff8f 	.word	0xfffeff8f
 800e794:	40010000 	.word	0x40010000
 800e798:	40010400 	.word	0x40010400
 800e79c:	40014000 	.word	0x40014000
 800e7a0:	40014400 	.word	0x40014400
 800e7a4:	40014800 	.word	0x40014800

0800e7a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b087      	sub	sp, #28
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6a1b      	ldr	r3, [r3, #32]
 800e7b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6a1b      	ldr	r3, [r3, #32]
 800e7bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e7d0:	68fa      	ldr	r2, [r7, #12]
 800e7d2:	4b22      	ldr	r3, [pc, #136]	@ (800e85c <TIM_OC6_SetConfig+0xb4>)
 800e7d4:	4013      	ands	r3, r2
 800e7d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	021b      	lsls	r3, r3, #8
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e7ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	051b      	lsls	r3, r3, #20
 800e7f2:	693a      	ldr	r2, [r7, #16]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a19      	ldr	r2, [pc, #100]	@ (800e860 <TIM_OC6_SetConfig+0xb8>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d00f      	beq.n	800e820 <TIM_OC6_SetConfig+0x78>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	4a18      	ldr	r2, [pc, #96]	@ (800e864 <TIM_OC6_SetConfig+0xbc>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d00b      	beq.n	800e820 <TIM_OC6_SetConfig+0x78>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a17      	ldr	r2, [pc, #92]	@ (800e868 <TIM_OC6_SetConfig+0xc0>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d007      	beq.n	800e820 <TIM_OC6_SetConfig+0x78>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	4a16      	ldr	r2, [pc, #88]	@ (800e86c <TIM_OC6_SetConfig+0xc4>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d003      	beq.n	800e820 <TIM_OC6_SetConfig+0x78>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4a15      	ldr	r2, [pc, #84]	@ (800e870 <TIM_OC6_SetConfig+0xc8>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d109      	bne.n	800e834 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e826:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	695b      	ldr	r3, [r3, #20]
 800e82c:	029b      	lsls	r3, r3, #10
 800e82e:	697a      	ldr	r2, [r7, #20]
 800e830:	4313      	orrs	r3, r2
 800e832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	685a      	ldr	r2, [r3, #4]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	693a      	ldr	r2, [r7, #16]
 800e84c:	621a      	str	r2, [r3, #32]
}
 800e84e:	bf00      	nop
 800e850:	371c      	adds	r7, #28
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	feff8fff 	.word	0xfeff8fff
 800e860:	40010000 	.word	0x40010000
 800e864:	40010400 	.word	0x40010400
 800e868:	40014000 	.word	0x40014000
 800e86c:	40014400 	.word	0x40014400
 800e870:	40014800 	.word	0x40014800

0800e874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e874:	b480      	push	{r7}
 800e876:	b087      	sub	sp, #28
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6a1b      	ldr	r3, [r3, #32]
 800e884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6a1b      	ldr	r3, [r3, #32]
 800e88a:	f023 0201 	bic.w	r2, r3, #1
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e89e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	011b      	lsls	r3, r3, #4
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	f023 030a 	bic.w	r3, r3, #10
 800e8b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	693a      	ldr	r2, [r7, #16]
 800e8be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	697a      	ldr	r2, [r7, #20]
 800e8c4:	621a      	str	r2, [r3, #32]
}
 800e8c6:	bf00      	nop
 800e8c8:	371c      	adds	r7, #28
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr

0800e8d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8d2:	b480      	push	{r7}
 800e8d4:	b087      	sub	sp, #28
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6a1b      	ldr	r3, [r3, #32]
 800e8e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6a1b      	ldr	r3, [r3, #32]
 800e8e8:	f023 0210 	bic.w	r2, r3, #16
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	699b      	ldr	r3, [r3, #24]
 800e8f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e8fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	031b      	lsls	r3, r3, #12
 800e902:	693a      	ldr	r2, [r7, #16]
 800e904:	4313      	orrs	r3, r2
 800e906:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e90e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	011b      	lsls	r3, r3, #4
 800e914:	697a      	ldr	r2, [r7, #20]
 800e916:	4313      	orrs	r3, r2
 800e918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	693a      	ldr	r2, [r7, #16]
 800e91e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	697a      	ldr	r2, [r7, #20]
 800e924:	621a      	str	r2, [r3, #32]
}
 800e926:	bf00      	nop
 800e928:	371c      	adds	r7, #28
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr
	...

0800e934 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e934:	b480      	push	{r7}
 800e936:	b085      	sub	sp, #20
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	4b09      	ldr	r3, [pc, #36]	@ (800e96c <TIM_ITRx_SetConfig+0x38>)
 800e948:	4013      	ands	r3, r2
 800e94a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	4313      	orrs	r3, r2
 800e952:	f043 0307 	orr.w	r3, r3, #7
 800e956:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	609a      	str	r2, [r3, #8]
}
 800e95e:	bf00      	nop
 800e960:	3714      	adds	r7, #20
 800e962:	46bd      	mov	sp, r7
 800e964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e968:	4770      	bx	lr
 800e96a:	bf00      	nop
 800e96c:	ffcfff8f 	.word	0xffcfff8f

0800e970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e970:	b480      	push	{r7}
 800e972:	b087      	sub	sp, #28
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
 800e97c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e98a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	021a      	lsls	r2, r3, #8
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	431a      	orrs	r2, r3
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	4313      	orrs	r3, r2
 800e998:	697a      	ldr	r2, [r7, #20]
 800e99a:	4313      	orrs	r3, r2
 800e99c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	609a      	str	r2, [r3, #8]
}
 800e9a4:	bf00      	nop
 800e9a6:	371c      	adds	r7, #28
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d101      	bne.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	e077      	b.n	800eab8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2202      	movs	r2, #2
 800e9d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a35      	ldr	r2, [pc, #212]	@ (800eac4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d004      	beq.n	800e9fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a34      	ldr	r2, [pc, #208]	@ (800eac8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d108      	bne.n	800ea0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ea02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	68fa      	ldr	r2, [r7, #12]
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a25      	ldr	r2, [pc, #148]	@ (800eac4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d02c      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea3a:	d027      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a22      	ldr	r2, [pc, #136]	@ (800eacc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d022      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a21      	ldr	r2, [pc, #132]	@ (800ead0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d01d      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a1f      	ldr	r2, [pc, #124]	@ (800ead4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d018      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a1a      	ldr	r2, [pc, #104]	@ (800eac8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d013      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a1b      	ldr	r2, [pc, #108]	@ (800ead8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d00e      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a1a      	ldr	r2, [pc, #104]	@ (800eadc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d009      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a18      	ldr	r2, [pc, #96]	@ (800eae0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d004      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a17      	ldr	r2, [pc, #92]	@ (800eae4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d10c      	bne.n	800eaa6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	68ba      	ldr	r2, [r7, #8]
 800eaa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eab6:	2300      	movs	r3, #0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3714      	adds	r7, #20
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr
 800eac4:	40010000 	.word	0x40010000
 800eac8:	40010400 	.word	0x40010400
 800eacc:	40000400 	.word	0x40000400
 800ead0:	40000800 	.word	0x40000800
 800ead4:	40000c00 	.word	0x40000c00
 800ead8:	40001800 	.word	0x40001800
 800eadc:	40014000 	.word	0x40014000
 800eae0:	4000e000 	.word	0x4000e000
 800eae4:	4000e400 	.word	0x4000e400

0800eae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d101      	bne.n	800eb04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eb00:	2302      	movs	r3, #2
 800eb02:	e073      	b.n	800ebec <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	4313      	orrs	r3, r2
 800eb18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	4313      	orrs	r3, r2
 800eb26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4313      	orrs	r3, r2
 800eb42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	691b      	ldr	r3, [r3, #16]
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	695b      	ldr	r3, [r3, #20]
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	699b      	ldr	r3, [r3, #24]
 800eb78:	041b      	lsls	r3, r3, #16
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	69db      	ldr	r3, [r3, #28]
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a19      	ldr	r2, [pc, #100]	@ (800ebf8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d004      	beq.n	800eba0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a18      	ldr	r2, [pc, #96]	@ (800ebfc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d11c      	bne.n	800ebda <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebaa:	051b      	lsls	r3, r3, #20
 800ebac:	4313      	orrs	r3, r2
 800ebae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	6a1b      	ldr	r3, [r3, #32]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ebea:	2300      	movs	r3, #0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	40010000 	.word	0x40010000
 800ebfc:	40010400 	.word	0x40010400

0800ec00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec08:	bf00      	nop
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec1c:	bf00      	nop
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec30:	bf00      	nop
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d101      	bne.n	800ec4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e042      	b.n	800ecd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d106      	bne.n	800ec66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7f3 fcfd 	bl	8002660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2224      	movs	r2, #36	@ 0x24
 800ec6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f022 0201 	bic.w	r2, r2, #1
 800ec7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d002      	beq.n	800ec8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 ff22 	bl	800fad0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 f8b3 	bl	800edf8 <UART_SetConfig>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d101      	bne.n	800ec9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e01b      	b.n	800ecd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	685a      	ldr	r2, [r3, #4]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ecaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	689a      	ldr	r2, [r3, #8]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ecba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f042 0201 	orr.w	r2, r2, #1
 800ecca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 ffa1 	bl	800fc14 <UART_CheckIdleState>
 800ecd2:	4603      	mov	r3, r0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08a      	sub	sp, #40	@ 0x28
 800ece0:	af02      	add	r7, sp, #8
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	603b      	str	r3, [r7, #0]
 800ece8:	4613      	mov	r3, r2
 800ecea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecf2:	2b20      	cmp	r3, #32
 800ecf4:	d17b      	bne.n	800edee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <HAL_UART_Transmit+0x26>
 800ecfc:	88fb      	ldrh	r3, [r7, #6]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d101      	bne.n	800ed06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ed02:	2301      	movs	r3, #1
 800ed04:	e074      	b.n	800edf0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2221      	movs	r2, #33	@ 0x21
 800ed12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ed16:	f7f3 ff29 	bl	8002b6c <HAL_GetTick>
 800ed1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	88fa      	ldrh	r2, [r7, #6]
 800ed20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	88fa      	ldrh	r2, [r7, #6]
 800ed28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed34:	d108      	bne.n	800ed48 <HAL_UART_Transmit+0x6c>
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	691b      	ldr	r3, [r3, #16]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d104      	bne.n	800ed48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	61bb      	str	r3, [r7, #24]
 800ed46:	e003      	b.n	800ed50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ed50:	e030      	b.n	800edb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	2180      	movs	r1, #128	@ 0x80
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f001 f803 	bl	800fd68 <UART_WaitOnFlagUntilTimeout>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d005      	beq.n	800ed74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2220      	movs	r2, #32
 800ed6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ed70:	2303      	movs	r3, #3
 800ed72:	e03d      	b.n	800edf0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10b      	bne.n	800ed92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	461a      	mov	r2, r3
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	3302      	adds	r3, #2
 800ed8e:	61bb      	str	r3, [r7, #24]
 800ed90:	e007      	b.n	800eda2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	781a      	ldrb	r2, [r3, #0]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	3b01      	subs	r3, #1
 800edac:	b29a      	uxth	r2, r3
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800edba:	b29b      	uxth	r3, r3
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d1c8      	bne.n	800ed52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	2200      	movs	r2, #0
 800edc8:	2140      	movs	r1, #64	@ 0x40
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f000 ffcc 	bl	800fd68 <UART_WaitOnFlagUntilTimeout>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d005      	beq.n	800ede2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2220      	movs	r2, #32
 800edda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800edde:	2303      	movs	r3, #3
 800ede0:	e006      	b.n	800edf0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2220      	movs	r2, #32
 800ede6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	e000      	b.n	800edf0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800edee:	2302      	movs	r3, #2
  }
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3720      	adds	r7, #32
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800edfc:	b092      	sub	sp, #72	@ 0x48
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ee02:	2300      	movs	r3, #0
 800ee04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	689a      	ldr	r2, [r3, #8]
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	691b      	ldr	r3, [r3, #16]
 800ee10:	431a      	orrs	r2, r3
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	431a      	orrs	r2, r3
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	69db      	ldr	r3, [r3, #28]
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	4bbe      	ldr	r3, [pc, #760]	@ (800f120 <UART_SetConfig+0x328>)
 800ee28:	4013      	ands	r3, r2
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	6812      	ldr	r2, [r2, #0]
 800ee2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ee30:	430b      	orrs	r3, r1
 800ee32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	68da      	ldr	r2, [r3, #12]
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	430a      	orrs	r2, r1
 800ee48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4ab3      	ldr	r2, [pc, #716]	@ (800f124 <UART_SetConfig+0x32c>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d004      	beq.n	800ee64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee60:	4313      	orrs	r3, r2
 800ee62:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	689a      	ldr	r2, [r3, #8]
 800ee6a:	4baf      	ldr	r3, [pc, #700]	@ (800f128 <UART_SetConfig+0x330>)
 800ee6c:	4013      	ands	r3, r2
 800ee6e:	697a      	ldr	r2, [r7, #20]
 800ee70:	6812      	ldr	r2, [r2, #0]
 800ee72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ee74:	430b      	orrs	r3, r1
 800ee76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee7e:	f023 010f 	bic.w	r1, r3, #15
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	430a      	orrs	r2, r1
 800ee8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4aa6      	ldr	r2, [pc, #664]	@ (800f12c <UART_SetConfig+0x334>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d177      	bne.n	800ef88 <UART_SetConfig+0x190>
 800ee98:	4ba5      	ldr	r3, [pc, #660]	@ (800f130 <UART_SetConfig+0x338>)
 800ee9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eea0:	2b28      	cmp	r3, #40	@ 0x28
 800eea2:	d86d      	bhi.n	800ef80 <UART_SetConfig+0x188>
 800eea4:	a201      	add	r2, pc, #4	@ (adr r2, 800eeac <UART_SetConfig+0xb4>)
 800eea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeaa:	bf00      	nop
 800eeac:	0800ef51 	.word	0x0800ef51
 800eeb0:	0800ef81 	.word	0x0800ef81
 800eeb4:	0800ef81 	.word	0x0800ef81
 800eeb8:	0800ef81 	.word	0x0800ef81
 800eebc:	0800ef81 	.word	0x0800ef81
 800eec0:	0800ef81 	.word	0x0800ef81
 800eec4:	0800ef81 	.word	0x0800ef81
 800eec8:	0800ef81 	.word	0x0800ef81
 800eecc:	0800ef59 	.word	0x0800ef59
 800eed0:	0800ef81 	.word	0x0800ef81
 800eed4:	0800ef81 	.word	0x0800ef81
 800eed8:	0800ef81 	.word	0x0800ef81
 800eedc:	0800ef81 	.word	0x0800ef81
 800eee0:	0800ef81 	.word	0x0800ef81
 800eee4:	0800ef81 	.word	0x0800ef81
 800eee8:	0800ef81 	.word	0x0800ef81
 800eeec:	0800ef61 	.word	0x0800ef61
 800eef0:	0800ef81 	.word	0x0800ef81
 800eef4:	0800ef81 	.word	0x0800ef81
 800eef8:	0800ef81 	.word	0x0800ef81
 800eefc:	0800ef81 	.word	0x0800ef81
 800ef00:	0800ef81 	.word	0x0800ef81
 800ef04:	0800ef81 	.word	0x0800ef81
 800ef08:	0800ef81 	.word	0x0800ef81
 800ef0c:	0800ef69 	.word	0x0800ef69
 800ef10:	0800ef81 	.word	0x0800ef81
 800ef14:	0800ef81 	.word	0x0800ef81
 800ef18:	0800ef81 	.word	0x0800ef81
 800ef1c:	0800ef81 	.word	0x0800ef81
 800ef20:	0800ef81 	.word	0x0800ef81
 800ef24:	0800ef81 	.word	0x0800ef81
 800ef28:	0800ef81 	.word	0x0800ef81
 800ef2c:	0800ef71 	.word	0x0800ef71
 800ef30:	0800ef81 	.word	0x0800ef81
 800ef34:	0800ef81 	.word	0x0800ef81
 800ef38:	0800ef81 	.word	0x0800ef81
 800ef3c:	0800ef81 	.word	0x0800ef81
 800ef40:	0800ef81 	.word	0x0800ef81
 800ef44:	0800ef81 	.word	0x0800ef81
 800ef48:	0800ef81 	.word	0x0800ef81
 800ef4c:	0800ef79 	.word	0x0800ef79
 800ef50:	2301      	movs	r3, #1
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef56:	e326      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800ef58:	2304      	movs	r3, #4
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5e:	e322      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800ef60:	2308      	movs	r3, #8
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef66:	e31e      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800ef68:	2310      	movs	r3, #16
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6e:	e31a      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800ef70:	2320      	movs	r3, #32
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef76:	e316      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800ef78:	2340      	movs	r3, #64	@ 0x40
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e312      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800ef80:	2380      	movs	r3, #128	@ 0x80
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e30e      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a69      	ldr	r2, [pc, #420]	@ (800f134 <UART_SetConfig+0x33c>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d130      	bne.n	800eff4 <UART_SetConfig+0x1fc>
 800ef92:	4b67      	ldr	r3, [pc, #412]	@ (800f130 <UART_SetConfig+0x338>)
 800ef94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef96:	f003 0307 	and.w	r3, r3, #7
 800ef9a:	2b05      	cmp	r3, #5
 800ef9c:	d826      	bhi.n	800efec <UART_SetConfig+0x1f4>
 800ef9e:	a201      	add	r2, pc, #4	@ (adr r2, 800efa4 <UART_SetConfig+0x1ac>)
 800efa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa4:	0800efbd 	.word	0x0800efbd
 800efa8:	0800efc5 	.word	0x0800efc5
 800efac:	0800efcd 	.word	0x0800efcd
 800efb0:	0800efd5 	.word	0x0800efd5
 800efb4:	0800efdd 	.word	0x0800efdd
 800efb8:	0800efe5 	.word	0x0800efe5
 800efbc:	2300      	movs	r3, #0
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc2:	e2f0      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800efc4:	2304      	movs	r3, #4
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efca:	e2ec      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800efcc:	2308      	movs	r3, #8
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd2:	e2e8      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800efd4:	2310      	movs	r3, #16
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efda:	e2e4      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800efdc:	2320      	movs	r3, #32
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efe2:	e2e0      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800efe4:	2340      	movs	r3, #64	@ 0x40
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efea:	e2dc      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800efec:	2380      	movs	r3, #128	@ 0x80
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eff2:	e2d8      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a4f      	ldr	r2, [pc, #316]	@ (800f138 <UART_SetConfig+0x340>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d130      	bne.n	800f060 <UART_SetConfig+0x268>
 800effe:	4b4c      	ldr	r3, [pc, #304]	@ (800f130 <UART_SetConfig+0x338>)
 800f000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f002:	f003 0307 	and.w	r3, r3, #7
 800f006:	2b05      	cmp	r3, #5
 800f008:	d826      	bhi.n	800f058 <UART_SetConfig+0x260>
 800f00a:	a201      	add	r2, pc, #4	@ (adr r2, 800f010 <UART_SetConfig+0x218>)
 800f00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f010:	0800f029 	.word	0x0800f029
 800f014:	0800f031 	.word	0x0800f031
 800f018:	0800f039 	.word	0x0800f039
 800f01c:	0800f041 	.word	0x0800f041
 800f020:	0800f049 	.word	0x0800f049
 800f024:	0800f051 	.word	0x0800f051
 800f028:	2300      	movs	r3, #0
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f02e:	e2ba      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f030:	2304      	movs	r3, #4
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f036:	e2b6      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f038:	2308      	movs	r3, #8
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f03e:	e2b2      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f040:	2310      	movs	r3, #16
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f046:	e2ae      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f048:	2320      	movs	r3, #32
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f04e:	e2aa      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f050:	2340      	movs	r3, #64	@ 0x40
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f056:	e2a6      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f058:	2380      	movs	r3, #128	@ 0x80
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f05e:	e2a2      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a35      	ldr	r2, [pc, #212]	@ (800f13c <UART_SetConfig+0x344>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d130      	bne.n	800f0cc <UART_SetConfig+0x2d4>
 800f06a:	4b31      	ldr	r3, [pc, #196]	@ (800f130 <UART_SetConfig+0x338>)
 800f06c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f06e:	f003 0307 	and.w	r3, r3, #7
 800f072:	2b05      	cmp	r3, #5
 800f074:	d826      	bhi.n	800f0c4 <UART_SetConfig+0x2cc>
 800f076:	a201      	add	r2, pc, #4	@ (adr r2, 800f07c <UART_SetConfig+0x284>)
 800f078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07c:	0800f095 	.word	0x0800f095
 800f080:	0800f09d 	.word	0x0800f09d
 800f084:	0800f0a5 	.word	0x0800f0a5
 800f088:	0800f0ad 	.word	0x0800f0ad
 800f08c:	0800f0b5 	.word	0x0800f0b5
 800f090:	0800f0bd 	.word	0x0800f0bd
 800f094:	2300      	movs	r3, #0
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f09a:	e284      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f09c:	2304      	movs	r3, #4
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0a2:	e280      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f0a4:	2308      	movs	r3, #8
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0aa:	e27c      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f0ac:	2310      	movs	r3, #16
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0b2:	e278      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f0b4:	2320      	movs	r3, #32
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ba:	e274      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f0bc:	2340      	movs	r3, #64	@ 0x40
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0c2:	e270      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f0c4:	2380      	movs	r3, #128	@ 0x80
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ca:	e26c      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4a1b      	ldr	r2, [pc, #108]	@ (800f140 <UART_SetConfig+0x348>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d142      	bne.n	800f15c <UART_SetConfig+0x364>
 800f0d6:	4b16      	ldr	r3, [pc, #88]	@ (800f130 <UART_SetConfig+0x338>)
 800f0d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0da:	f003 0307 	and.w	r3, r3, #7
 800f0de:	2b05      	cmp	r3, #5
 800f0e0:	d838      	bhi.n	800f154 <UART_SetConfig+0x35c>
 800f0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f0e8 <UART_SetConfig+0x2f0>)
 800f0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e8:	0800f101 	.word	0x0800f101
 800f0ec:	0800f109 	.word	0x0800f109
 800f0f0:	0800f111 	.word	0x0800f111
 800f0f4:	0800f119 	.word	0x0800f119
 800f0f8:	0800f145 	.word	0x0800f145
 800f0fc:	0800f14d 	.word	0x0800f14d
 800f100:	2300      	movs	r3, #0
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f106:	e24e      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f108:	2304      	movs	r3, #4
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f10e:	e24a      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f110:	2308      	movs	r3, #8
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f116:	e246      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f118:	2310      	movs	r3, #16
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f11e:	e242      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f120:	cfff69f3 	.word	0xcfff69f3
 800f124:	58000c00 	.word	0x58000c00
 800f128:	11fff4ff 	.word	0x11fff4ff
 800f12c:	40011000 	.word	0x40011000
 800f130:	58024400 	.word	0x58024400
 800f134:	40004400 	.word	0x40004400
 800f138:	40004800 	.word	0x40004800
 800f13c:	40004c00 	.word	0x40004c00
 800f140:	40005000 	.word	0x40005000
 800f144:	2320      	movs	r3, #32
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f14a:	e22c      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f14c:	2340      	movs	r3, #64	@ 0x40
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f152:	e228      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f154:	2380      	movs	r3, #128	@ 0x80
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f15a:	e224      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4ab1      	ldr	r2, [pc, #708]	@ (800f428 <UART_SetConfig+0x630>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d176      	bne.n	800f254 <UART_SetConfig+0x45c>
 800f166:	4bb1      	ldr	r3, [pc, #708]	@ (800f42c <UART_SetConfig+0x634>)
 800f168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f16a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f16e:	2b28      	cmp	r3, #40	@ 0x28
 800f170:	d86c      	bhi.n	800f24c <UART_SetConfig+0x454>
 800f172:	a201      	add	r2, pc, #4	@ (adr r2, 800f178 <UART_SetConfig+0x380>)
 800f174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f178:	0800f21d 	.word	0x0800f21d
 800f17c:	0800f24d 	.word	0x0800f24d
 800f180:	0800f24d 	.word	0x0800f24d
 800f184:	0800f24d 	.word	0x0800f24d
 800f188:	0800f24d 	.word	0x0800f24d
 800f18c:	0800f24d 	.word	0x0800f24d
 800f190:	0800f24d 	.word	0x0800f24d
 800f194:	0800f24d 	.word	0x0800f24d
 800f198:	0800f225 	.word	0x0800f225
 800f19c:	0800f24d 	.word	0x0800f24d
 800f1a0:	0800f24d 	.word	0x0800f24d
 800f1a4:	0800f24d 	.word	0x0800f24d
 800f1a8:	0800f24d 	.word	0x0800f24d
 800f1ac:	0800f24d 	.word	0x0800f24d
 800f1b0:	0800f24d 	.word	0x0800f24d
 800f1b4:	0800f24d 	.word	0x0800f24d
 800f1b8:	0800f22d 	.word	0x0800f22d
 800f1bc:	0800f24d 	.word	0x0800f24d
 800f1c0:	0800f24d 	.word	0x0800f24d
 800f1c4:	0800f24d 	.word	0x0800f24d
 800f1c8:	0800f24d 	.word	0x0800f24d
 800f1cc:	0800f24d 	.word	0x0800f24d
 800f1d0:	0800f24d 	.word	0x0800f24d
 800f1d4:	0800f24d 	.word	0x0800f24d
 800f1d8:	0800f235 	.word	0x0800f235
 800f1dc:	0800f24d 	.word	0x0800f24d
 800f1e0:	0800f24d 	.word	0x0800f24d
 800f1e4:	0800f24d 	.word	0x0800f24d
 800f1e8:	0800f24d 	.word	0x0800f24d
 800f1ec:	0800f24d 	.word	0x0800f24d
 800f1f0:	0800f24d 	.word	0x0800f24d
 800f1f4:	0800f24d 	.word	0x0800f24d
 800f1f8:	0800f23d 	.word	0x0800f23d
 800f1fc:	0800f24d 	.word	0x0800f24d
 800f200:	0800f24d 	.word	0x0800f24d
 800f204:	0800f24d 	.word	0x0800f24d
 800f208:	0800f24d 	.word	0x0800f24d
 800f20c:	0800f24d 	.word	0x0800f24d
 800f210:	0800f24d 	.word	0x0800f24d
 800f214:	0800f24d 	.word	0x0800f24d
 800f218:	0800f245 	.word	0x0800f245
 800f21c:	2301      	movs	r3, #1
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f222:	e1c0      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f224:	2304      	movs	r3, #4
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22a:	e1bc      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f22c:	2308      	movs	r3, #8
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f232:	e1b8      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f234:	2310      	movs	r3, #16
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f23a:	e1b4      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f23c:	2320      	movs	r3, #32
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f242:	e1b0      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f244:	2340      	movs	r3, #64	@ 0x40
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f24a:	e1ac      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f24c:	2380      	movs	r3, #128	@ 0x80
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f252:	e1a8      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a75      	ldr	r2, [pc, #468]	@ (800f430 <UART_SetConfig+0x638>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d130      	bne.n	800f2c0 <UART_SetConfig+0x4c8>
 800f25e:	4b73      	ldr	r3, [pc, #460]	@ (800f42c <UART_SetConfig+0x634>)
 800f260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f262:	f003 0307 	and.w	r3, r3, #7
 800f266:	2b05      	cmp	r3, #5
 800f268:	d826      	bhi.n	800f2b8 <UART_SetConfig+0x4c0>
 800f26a:	a201      	add	r2, pc, #4	@ (adr r2, 800f270 <UART_SetConfig+0x478>)
 800f26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f270:	0800f289 	.word	0x0800f289
 800f274:	0800f291 	.word	0x0800f291
 800f278:	0800f299 	.word	0x0800f299
 800f27c:	0800f2a1 	.word	0x0800f2a1
 800f280:	0800f2a9 	.word	0x0800f2a9
 800f284:	0800f2b1 	.word	0x0800f2b1
 800f288:	2300      	movs	r3, #0
 800f28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f28e:	e18a      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f290:	2304      	movs	r3, #4
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f296:	e186      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f298:	2308      	movs	r3, #8
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f29e:	e182      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f2a0:	2310      	movs	r3, #16
 800f2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2a6:	e17e      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f2a8:	2320      	movs	r3, #32
 800f2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ae:	e17a      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f2b0:	2340      	movs	r3, #64	@ 0x40
 800f2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2b6:	e176      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f2b8:	2380      	movs	r3, #128	@ 0x80
 800f2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2be:	e172      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4a5b      	ldr	r2, [pc, #364]	@ (800f434 <UART_SetConfig+0x63c>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d130      	bne.n	800f32c <UART_SetConfig+0x534>
 800f2ca:	4b58      	ldr	r3, [pc, #352]	@ (800f42c <UART_SetConfig+0x634>)
 800f2cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2ce:	f003 0307 	and.w	r3, r3, #7
 800f2d2:	2b05      	cmp	r3, #5
 800f2d4:	d826      	bhi.n	800f324 <UART_SetConfig+0x52c>
 800f2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f2dc <UART_SetConfig+0x4e4>)
 800f2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2dc:	0800f2f5 	.word	0x0800f2f5
 800f2e0:	0800f2fd 	.word	0x0800f2fd
 800f2e4:	0800f305 	.word	0x0800f305
 800f2e8:	0800f30d 	.word	0x0800f30d
 800f2ec:	0800f315 	.word	0x0800f315
 800f2f0:	0800f31d 	.word	0x0800f31d
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2fa:	e154      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f2fc:	2304      	movs	r3, #4
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f302:	e150      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f304:	2308      	movs	r3, #8
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f30a:	e14c      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f30c:	2310      	movs	r3, #16
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f312:	e148      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f314:	2320      	movs	r3, #32
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f31a:	e144      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f31c:	2340      	movs	r3, #64	@ 0x40
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f322:	e140      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f324:	2380      	movs	r3, #128	@ 0x80
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f32a:	e13c      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a41      	ldr	r2, [pc, #260]	@ (800f438 <UART_SetConfig+0x640>)
 800f332:	4293      	cmp	r3, r2
 800f334:	f040 8082 	bne.w	800f43c <UART_SetConfig+0x644>
 800f338:	4b3c      	ldr	r3, [pc, #240]	@ (800f42c <UART_SetConfig+0x634>)
 800f33a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f33c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f340:	2b28      	cmp	r3, #40	@ 0x28
 800f342:	d86d      	bhi.n	800f420 <UART_SetConfig+0x628>
 800f344:	a201      	add	r2, pc, #4	@ (adr r2, 800f34c <UART_SetConfig+0x554>)
 800f346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34a:	bf00      	nop
 800f34c:	0800f3f1 	.word	0x0800f3f1
 800f350:	0800f421 	.word	0x0800f421
 800f354:	0800f421 	.word	0x0800f421
 800f358:	0800f421 	.word	0x0800f421
 800f35c:	0800f421 	.word	0x0800f421
 800f360:	0800f421 	.word	0x0800f421
 800f364:	0800f421 	.word	0x0800f421
 800f368:	0800f421 	.word	0x0800f421
 800f36c:	0800f3f9 	.word	0x0800f3f9
 800f370:	0800f421 	.word	0x0800f421
 800f374:	0800f421 	.word	0x0800f421
 800f378:	0800f421 	.word	0x0800f421
 800f37c:	0800f421 	.word	0x0800f421
 800f380:	0800f421 	.word	0x0800f421
 800f384:	0800f421 	.word	0x0800f421
 800f388:	0800f421 	.word	0x0800f421
 800f38c:	0800f401 	.word	0x0800f401
 800f390:	0800f421 	.word	0x0800f421
 800f394:	0800f421 	.word	0x0800f421
 800f398:	0800f421 	.word	0x0800f421
 800f39c:	0800f421 	.word	0x0800f421
 800f3a0:	0800f421 	.word	0x0800f421
 800f3a4:	0800f421 	.word	0x0800f421
 800f3a8:	0800f421 	.word	0x0800f421
 800f3ac:	0800f409 	.word	0x0800f409
 800f3b0:	0800f421 	.word	0x0800f421
 800f3b4:	0800f421 	.word	0x0800f421
 800f3b8:	0800f421 	.word	0x0800f421
 800f3bc:	0800f421 	.word	0x0800f421
 800f3c0:	0800f421 	.word	0x0800f421
 800f3c4:	0800f421 	.word	0x0800f421
 800f3c8:	0800f421 	.word	0x0800f421
 800f3cc:	0800f411 	.word	0x0800f411
 800f3d0:	0800f421 	.word	0x0800f421
 800f3d4:	0800f421 	.word	0x0800f421
 800f3d8:	0800f421 	.word	0x0800f421
 800f3dc:	0800f421 	.word	0x0800f421
 800f3e0:	0800f421 	.word	0x0800f421
 800f3e4:	0800f421 	.word	0x0800f421
 800f3e8:	0800f421 	.word	0x0800f421
 800f3ec:	0800f419 	.word	0x0800f419
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f6:	e0d6      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f3f8:	2304      	movs	r3, #4
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fe:	e0d2      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f400:	2308      	movs	r3, #8
 800f402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f406:	e0ce      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f408:	2310      	movs	r3, #16
 800f40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f40e:	e0ca      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f410:	2320      	movs	r3, #32
 800f412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f416:	e0c6      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f418:	2340      	movs	r3, #64	@ 0x40
 800f41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f41e:	e0c2      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f420:	2380      	movs	r3, #128	@ 0x80
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f426:	e0be      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f428:	40011400 	.word	0x40011400
 800f42c:	58024400 	.word	0x58024400
 800f430:	40007800 	.word	0x40007800
 800f434:	40007c00 	.word	0x40007c00
 800f438:	40011800 	.word	0x40011800
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4aad      	ldr	r2, [pc, #692]	@ (800f6f8 <UART_SetConfig+0x900>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d176      	bne.n	800f534 <UART_SetConfig+0x73c>
 800f446:	4bad      	ldr	r3, [pc, #692]	@ (800f6fc <UART_SetConfig+0x904>)
 800f448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f44a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f44e:	2b28      	cmp	r3, #40	@ 0x28
 800f450:	d86c      	bhi.n	800f52c <UART_SetConfig+0x734>
 800f452:	a201      	add	r2, pc, #4	@ (adr r2, 800f458 <UART_SetConfig+0x660>)
 800f454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f458:	0800f4fd 	.word	0x0800f4fd
 800f45c:	0800f52d 	.word	0x0800f52d
 800f460:	0800f52d 	.word	0x0800f52d
 800f464:	0800f52d 	.word	0x0800f52d
 800f468:	0800f52d 	.word	0x0800f52d
 800f46c:	0800f52d 	.word	0x0800f52d
 800f470:	0800f52d 	.word	0x0800f52d
 800f474:	0800f52d 	.word	0x0800f52d
 800f478:	0800f505 	.word	0x0800f505
 800f47c:	0800f52d 	.word	0x0800f52d
 800f480:	0800f52d 	.word	0x0800f52d
 800f484:	0800f52d 	.word	0x0800f52d
 800f488:	0800f52d 	.word	0x0800f52d
 800f48c:	0800f52d 	.word	0x0800f52d
 800f490:	0800f52d 	.word	0x0800f52d
 800f494:	0800f52d 	.word	0x0800f52d
 800f498:	0800f50d 	.word	0x0800f50d
 800f49c:	0800f52d 	.word	0x0800f52d
 800f4a0:	0800f52d 	.word	0x0800f52d
 800f4a4:	0800f52d 	.word	0x0800f52d
 800f4a8:	0800f52d 	.word	0x0800f52d
 800f4ac:	0800f52d 	.word	0x0800f52d
 800f4b0:	0800f52d 	.word	0x0800f52d
 800f4b4:	0800f52d 	.word	0x0800f52d
 800f4b8:	0800f515 	.word	0x0800f515
 800f4bc:	0800f52d 	.word	0x0800f52d
 800f4c0:	0800f52d 	.word	0x0800f52d
 800f4c4:	0800f52d 	.word	0x0800f52d
 800f4c8:	0800f52d 	.word	0x0800f52d
 800f4cc:	0800f52d 	.word	0x0800f52d
 800f4d0:	0800f52d 	.word	0x0800f52d
 800f4d4:	0800f52d 	.word	0x0800f52d
 800f4d8:	0800f51d 	.word	0x0800f51d
 800f4dc:	0800f52d 	.word	0x0800f52d
 800f4e0:	0800f52d 	.word	0x0800f52d
 800f4e4:	0800f52d 	.word	0x0800f52d
 800f4e8:	0800f52d 	.word	0x0800f52d
 800f4ec:	0800f52d 	.word	0x0800f52d
 800f4f0:	0800f52d 	.word	0x0800f52d
 800f4f4:	0800f52d 	.word	0x0800f52d
 800f4f8:	0800f525 	.word	0x0800f525
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f502:	e050      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f504:	2304      	movs	r3, #4
 800f506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50a:	e04c      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f50c:	2308      	movs	r3, #8
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f512:	e048      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f514:	2310      	movs	r3, #16
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e044      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f51c:	2320      	movs	r3, #32
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f522:	e040      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f524:	2340      	movs	r3, #64	@ 0x40
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f52a:	e03c      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f52c:	2380      	movs	r3, #128	@ 0x80
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f532:	e038      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4a71      	ldr	r2, [pc, #452]	@ (800f700 <UART_SetConfig+0x908>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d130      	bne.n	800f5a0 <UART_SetConfig+0x7a8>
 800f53e:	4b6f      	ldr	r3, [pc, #444]	@ (800f6fc <UART_SetConfig+0x904>)
 800f540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f542:	f003 0307 	and.w	r3, r3, #7
 800f546:	2b05      	cmp	r3, #5
 800f548:	d826      	bhi.n	800f598 <UART_SetConfig+0x7a0>
 800f54a:	a201      	add	r2, pc, #4	@ (adr r2, 800f550 <UART_SetConfig+0x758>)
 800f54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f550:	0800f569 	.word	0x0800f569
 800f554:	0800f571 	.word	0x0800f571
 800f558:	0800f579 	.word	0x0800f579
 800f55c:	0800f581 	.word	0x0800f581
 800f560:	0800f589 	.word	0x0800f589
 800f564:	0800f591 	.word	0x0800f591
 800f568:	2302      	movs	r3, #2
 800f56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f56e:	e01a      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f570:	2304      	movs	r3, #4
 800f572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f576:	e016      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f578:	2308      	movs	r3, #8
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57e:	e012      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f580:	2310      	movs	r3, #16
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e00e      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f588:	2320      	movs	r3, #32
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58e:	e00a      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f590:	2340      	movs	r3, #64	@ 0x40
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f596:	e006      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f598:	2380      	movs	r3, #128	@ 0x80
 800f59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f59e:	e002      	b.n	800f5a6 <UART_SetConfig+0x7ae>
 800f5a0:	2380      	movs	r3, #128	@ 0x80
 800f5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a55      	ldr	r2, [pc, #340]	@ (800f700 <UART_SetConfig+0x908>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	f040 80f8 	bne.w	800f7a2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f5b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f5b6:	2b20      	cmp	r3, #32
 800f5b8:	dc46      	bgt.n	800f648 <UART_SetConfig+0x850>
 800f5ba:	2b02      	cmp	r3, #2
 800f5bc:	db75      	blt.n	800f6aa <UART_SetConfig+0x8b2>
 800f5be:	3b02      	subs	r3, #2
 800f5c0:	2b1e      	cmp	r3, #30
 800f5c2:	d872      	bhi.n	800f6aa <UART_SetConfig+0x8b2>
 800f5c4:	a201      	add	r2, pc, #4	@ (adr r2, 800f5cc <UART_SetConfig+0x7d4>)
 800f5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ca:	bf00      	nop
 800f5cc:	0800f64f 	.word	0x0800f64f
 800f5d0:	0800f6ab 	.word	0x0800f6ab
 800f5d4:	0800f657 	.word	0x0800f657
 800f5d8:	0800f6ab 	.word	0x0800f6ab
 800f5dc:	0800f6ab 	.word	0x0800f6ab
 800f5e0:	0800f6ab 	.word	0x0800f6ab
 800f5e4:	0800f667 	.word	0x0800f667
 800f5e8:	0800f6ab 	.word	0x0800f6ab
 800f5ec:	0800f6ab 	.word	0x0800f6ab
 800f5f0:	0800f6ab 	.word	0x0800f6ab
 800f5f4:	0800f6ab 	.word	0x0800f6ab
 800f5f8:	0800f6ab 	.word	0x0800f6ab
 800f5fc:	0800f6ab 	.word	0x0800f6ab
 800f600:	0800f6ab 	.word	0x0800f6ab
 800f604:	0800f677 	.word	0x0800f677
 800f608:	0800f6ab 	.word	0x0800f6ab
 800f60c:	0800f6ab 	.word	0x0800f6ab
 800f610:	0800f6ab 	.word	0x0800f6ab
 800f614:	0800f6ab 	.word	0x0800f6ab
 800f618:	0800f6ab 	.word	0x0800f6ab
 800f61c:	0800f6ab 	.word	0x0800f6ab
 800f620:	0800f6ab 	.word	0x0800f6ab
 800f624:	0800f6ab 	.word	0x0800f6ab
 800f628:	0800f6ab 	.word	0x0800f6ab
 800f62c:	0800f6ab 	.word	0x0800f6ab
 800f630:	0800f6ab 	.word	0x0800f6ab
 800f634:	0800f6ab 	.word	0x0800f6ab
 800f638:	0800f6ab 	.word	0x0800f6ab
 800f63c:	0800f6ab 	.word	0x0800f6ab
 800f640:	0800f6ab 	.word	0x0800f6ab
 800f644:	0800f69d 	.word	0x0800f69d
 800f648:	2b40      	cmp	r3, #64	@ 0x40
 800f64a:	d02a      	beq.n	800f6a2 <UART_SetConfig+0x8aa>
 800f64c:	e02d      	b.n	800f6aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f64e:	f7fb ff37 	bl	800b4c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f652:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f654:	e02f      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fb ff46 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f664:	e027      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f666:	f107 0318 	add.w	r3, r7, #24
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fc f892 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f674:	e01f      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f676:	4b21      	ldr	r3, [pc, #132]	@ (800f6fc <UART_SetConfig+0x904>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f003 0320 	and.w	r3, r3, #32
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d009      	beq.n	800f696 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f682:	4b1e      	ldr	r3, [pc, #120]	@ (800f6fc <UART_SetConfig+0x904>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	08db      	lsrs	r3, r3, #3
 800f688:	f003 0303 	and.w	r3, r3, #3
 800f68c:	4a1d      	ldr	r2, [pc, #116]	@ (800f704 <UART_SetConfig+0x90c>)
 800f68e:	fa22 f303 	lsr.w	r3, r2, r3
 800f692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f694:	e00f      	b.n	800f6b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f696:	4b1b      	ldr	r3, [pc, #108]	@ (800f704 <UART_SetConfig+0x90c>)
 800f698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f69a:	e00c      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f69c:	4b1a      	ldr	r3, [pc, #104]	@ (800f708 <UART_SetConfig+0x910>)
 800f69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6a0:	e009      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6a8:	e005      	b.n	800f6b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f6b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 81ee 	beq.w	800fa9a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6c2:	4a12      	ldr	r2, [pc, #72]	@ (800f70c <UART_SetConfig+0x914>)
 800f6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6d0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	685a      	ldr	r2, [r3, #4]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	005b      	lsls	r3, r3, #1
 800f6da:	4413      	add	r3, r2
 800f6dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d305      	bcc.n	800f6ee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d910      	bls.n	800f710 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f6f4:	e1d1      	b.n	800fa9a <UART_SetConfig+0xca2>
 800f6f6:	bf00      	nop
 800f6f8:	40011c00 	.word	0x40011c00
 800f6fc:	58024400 	.word	0x58024400
 800f700:	58000c00 	.word	0x58000c00
 800f704:	03d09000 	.word	0x03d09000
 800f708:	003d0900 	.word	0x003d0900
 800f70c:	08014f74 	.word	0x08014f74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f712:	2200      	movs	r2, #0
 800f714:	60bb      	str	r3, [r7, #8]
 800f716:	60fa      	str	r2, [r7, #12]
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f71c:	4ac0      	ldr	r2, [pc, #768]	@ (800fa20 <UART_SetConfig+0xc28>)
 800f71e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f722:	b29b      	uxth	r3, r3
 800f724:	2200      	movs	r2, #0
 800f726:	603b      	str	r3, [r7, #0]
 800f728:	607a      	str	r2, [r7, #4]
 800f72a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f72e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f732:	f7f0 fe45 	bl	80003c0 <__aeabi_uldivmod>
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	4610      	mov	r0, r2
 800f73c:	4619      	mov	r1, r3
 800f73e:	f04f 0200 	mov.w	r2, #0
 800f742:	f04f 0300 	mov.w	r3, #0
 800f746:	020b      	lsls	r3, r1, #8
 800f748:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f74c:	0202      	lsls	r2, r0, #8
 800f74e:	6979      	ldr	r1, [r7, #20]
 800f750:	6849      	ldr	r1, [r1, #4]
 800f752:	0849      	lsrs	r1, r1, #1
 800f754:	2000      	movs	r0, #0
 800f756:	460c      	mov	r4, r1
 800f758:	4605      	mov	r5, r0
 800f75a:	eb12 0804 	adds.w	r8, r2, r4
 800f75e:	eb43 0905 	adc.w	r9, r3, r5
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	469a      	mov	sl, r3
 800f76a:	4693      	mov	fp, r2
 800f76c:	4652      	mov	r2, sl
 800f76e:	465b      	mov	r3, fp
 800f770:	4640      	mov	r0, r8
 800f772:	4649      	mov	r1, r9
 800f774:	f7f0 fe24 	bl	80003c0 <__aeabi_uldivmod>
 800f778:	4602      	mov	r2, r0
 800f77a:	460b      	mov	r3, r1
 800f77c:	4613      	mov	r3, r2
 800f77e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f782:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f786:	d308      	bcc.n	800f79a <UART_SetConfig+0x9a2>
 800f788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f78e:	d204      	bcs.n	800f79a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f796:	60da      	str	r2, [r3, #12]
 800f798:	e17f      	b.n	800fa9a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f79a:	2301      	movs	r3, #1
 800f79c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f7a0:	e17b      	b.n	800fa9a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	69db      	ldr	r3, [r3, #28]
 800f7a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f7aa:	f040 80bd 	bne.w	800f928 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f7ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f7b2:	2b20      	cmp	r3, #32
 800f7b4:	dc48      	bgt.n	800f848 <UART_SetConfig+0xa50>
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	db7b      	blt.n	800f8b2 <UART_SetConfig+0xaba>
 800f7ba:	2b20      	cmp	r3, #32
 800f7bc:	d879      	bhi.n	800f8b2 <UART_SetConfig+0xaba>
 800f7be:	a201      	add	r2, pc, #4	@ (adr r2, 800f7c4 <UART_SetConfig+0x9cc>)
 800f7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c4:	0800f84f 	.word	0x0800f84f
 800f7c8:	0800f857 	.word	0x0800f857
 800f7cc:	0800f8b3 	.word	0x0800f8b3
 800f7d0:	0800f8b3 	.word	0x0800f8b3
 800f7d4:	0800f85f 	.word	0x0800f85f
 800f7d8:	0800f8b3 	.word	0x0800f8b3
 800f7dc:	0800f8b3 	.word	0x0800f8b3
 800f7e0:	0800f8b3 	.word	0x0800f8b3
 800f7e4:	0800f86f 	.word	0x0800f86f
 800f7e8:	0800f8b3 	.word	0x0800f8b3
 800f7ec:	0800f8b3 	.word	0x0800f8b3
 800f7f0:	0800f8b3 	.word	0x0800f8b3
 800f7f4:	0800f8b3 	.word	0x0800f8b3
 800f7f8:	0800f8b3 	.word	0x0800f8b3
 800f7fc:	0800f8b3 	.word	0x0800f8b3
 800f800:	0800f8b3 	.word	0x0800f8b3
 800f804:	0800f87f 	.word	0x0800f87f
 800f808:	0800f8b3 	.word	0x0800f8b3
 800f80c:	0800f8b3 	.word	0x0800f8b3
 800f810:	0800f8b3 	.word	0x0800f8b3
 800f814:	0800f8b3 	.word	0x0800f8b3
 800f818:	0800f8b3 	.word	0x0800f8b3
 800f81c:	0800f8b3 	.word	0x0800f8b3
 800f820:	0800f8b3 	.word	0x0800f8b3
 800f824:	0800f8b3 	.word	0x0800f8b3
 800f828:	0800f8b3 	.word	0x0800f8b3
 800f82c:	0800f8b3 	.word	0x0800f8b3
 800f830:	0800f8b3 	.word	0x0800f8b3
 800f834:	0800f8b3 	.word	0x0800f8b3
 800f838:	0800f8b3 	.word	0x0800f8b3
 800f83c:	0800f8b3 	.word	0x0800f8b3
 800f840:	0800f8b3 	.word	0x0800f8b3
 800f844:	0800f8a5 	.word	0x0800f8a5
 800f848:	2b40      	cmp	r3, #64	@ 0x40
 800f84a:	d02e      	beq.n	800f8aa <UART_SetConfig+0xab2>
 800f84c:	e031      	b.n	800f8b2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f84e:	f7f9 ff99 	bl	8009784 <HAL_RCC_GetPCLK1Freq>
 800f852:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f854:	e033      	b.n	800f8be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f856:	f7f9 ffab 	bl	80097b0 <HAL_RCC_GetPCLK2Freq>
 800f85a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f85c:	e02f      	b.n	800f8be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f85e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f862:	4618      	mov	r0, r3
 800f864:	f7fb fe42 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f86c:	e027      	b.n	800f8be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f86e:	f107 0318 	add.w	r3, r7, #24
 800f872:	4618      	mov	r0, r3
 800f874:	f7fb ff8e 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f87c:	e01f      	b.n	800f8be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f87e:	4b69      	ldr	r3, [pc, #420]	@ (800fa24 <UART_SetConfig+0xc2c>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f003 0320 	and.w	r3, r3, #32
 800f886:	2b00      	cmp	r3, #0
 800f888:	d009      	beq.n	800f89e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f88a:	4b66      	ldr	r3, [pc, #408]	@ (800fa24 <UART_SetConfig+0xc2c>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	08db      	lsrs	r3, r3, #3
 800f890:	f003 0303 	and.w	r3, r3, #3
 800f894:	4a64      	ldr	r2, [pc, #400]	@ (800fa28 <UART_SetConfig+0xc30>)
 800f896:	fa22 f303 	lsr.w	r3, r2, r3
 800f89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f89c:	e00f      	b.n	800f8be <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f89e:	4b62      	ldr	r3, [pc, #392]	@ (800fa28 <UART_SetConfig+0xc30>)
 800f8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8a2:	e00c      	b.n	800f8be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f8a4:	4b61      	ldr	r3, [pc, #388]	@ (800fa2c <UART_SetConfig+0xc34>)
 800f8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8a8:	e009      	b.n	800f8be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8b0:	e005      	b.n	800f8be <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f8bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f8be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f000 80ea 	beq.w	800fa9a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8ca:	4a55      	ldr	r2, [pc, #340]	@ (800fa20 <UART_SetConfig+0xc28>)
 800f8cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8d8:	005a      	lsls	r2, r3, #1
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	085b      	lsrs	r3, r3, #1
 800f8e0:	441a      	add	r2, r3
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ee:	2b0f      	cmp	r3, #15
 800f8f0:	d916      	bls.n	800f920 <UART_SetConfig+0xb28>
 800f8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8f8:	d212      	bcs.n	800f920 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	f023 030f 	bic.w	r3, r3, #15
 800f902:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f906:	085b      	lsrs	r3, r3, #1
 800f908:	b29b      	uxth	r3, r3
 800f90a:	f003 0307 	and.w	r3, r3, #7
 800f90e:	b29a      	uxth	r2, r3
 800f910:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f912:	4313      	orrs	r3, r2
 800f914:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f91c:	60da      	str	r2, [r3, #12]
 800f91e:	e0bc      	b.n	800fa9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f920:	2301      	movs	r3, #1
 800f922:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f926:	e0b8      	b.n	800fa9a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f928:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f92c:	2b20      	cmp	r3, #32
 800f92e:	dc4b      	bgt.n	800f9c8 <UART_SetConfig+0xbd0>
 800f930:	2b00      	cmp	r3, #0
 800f932:	f2c0 8087 	blt.w	800fa44 <UART_SetConfig+0xc4c>
 800f936:	2b20      	cmp	r3, #32
 800f938:	f200 8084 	bhi.w	800fa44 <UART_SetConfig+0xc4c>
 800f93c:	a201      	add	r2, pc, #4	@ (adr r2, 800f944 <UART_SetConfig+0xb4c>)
 800f93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f942:	bf00      	nop
 800f944:	0800f9cf 	.word	0x0800f9cf
 800f948:	0800f9d7 	.word	0x0800f9d7
 800f94c:	0800fa45 	.word	0x0800fa45
 800f950:	0800fa45 	.word	0x0800fa45
 800f954:	0800f9df 	.word	0x0800f9df
 800f958:	0800fa45 	.word	0x0800fa45
 800f95c:	0800fa45 	.word	0x0800fa45
 800f960:	0800fa45 	.word	0x0800fa45
 800f964:	0800f9ef 	.word	0x0800f9ef
 800f968:	0800fa45 	.word	0x0800fa45
 800f96c:	0800fa45 	.word	0x0800fa45
 800f970:	0800fa45 	.word	0x0800fa45
 800f974:	0800fa45 	.word	0x0800fa45
 800f978:	0800fa45 	.word	0x0800fa45
 800f97c:	0800fa45 	.word	0x0800fa45
 800f980:	0800fa45 	.word	0x0800fa45
 800f984:	0800f9ff 	.word	0x0800f9ff
 800f988:	0800fa45 	.word	0x0800fa45
 800f98c:	0800fa45 	.word	0x0800fa45
 800f990:	0800fa45 	.word	0x0800fa45
 800f994:	0800fa45 	.word	0x0800fa45
 800f998:	0800fa45 	.word	0x0800fa45
 800f99c:	0800fa45 	.word	0x0800fa45
 800f9a0:	0800fa45 	.word	0x0800fa45
 800f9a4:	0800fa45 	.word	0x0800fa45
 800f9a8:	0800fa45 	.word	0x0800fa45
 800f9ac:	0800fa45 	.word	0x0800fa45
 800f9b0:	0800fa45 	.word	0x0800fa45
 800f9b4:	0800fa45 	.word	0x0800fa45
 800f9b8:	0800fa45 	.word	0x0800fa45
 800f9bc:	0800fa45 	.word	0x0800fa45
 800f9c0:	0800fa45 	.word	0x0800fa45
 800f9c4:	0800fa37 	.word	0x0800fa37
 800f9c8:	2b40      	cmp	r3, #64	@ 0x40
 800f9ca:	d037      	beq.n	800fa3c <UART_SetConfig+0xc44>
 800f9cc:	e03a      	b.n	800fa44 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9ce:	f7f9 fed9 	bl	8009784 <HAL_RCC_GetPCLK1Freq>
 800f9d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f9d4:	e03c      	b.n	800fa50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9d6:	f7f9 feeb 	bl	80097b0 <HAL_RCC_GetPCLK2Freq>
 800f9da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f9dc:	e038      	b.n	800fa50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fb fd82 	bl	800b4ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9ec:	e030      	b.n	800fa50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9ee:	f107 0318 	add.w	r3, r7, #24
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7fb fece 	bl	800b794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9fc:	e028      	b.n	800fa50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9fe:	4b09      	ldr	r3, [pc, #36]	@ (800fa24 <UART_SetConfig+0xc2c>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f003 0320 	and.w	r3, r3, #32
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d012      	beq.n	800fa30 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa0a:	4b06      	ldr	r3, [pc, #24]	@ (800fa24 <UART_SetConfig+0xc2c>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	08db      	lsrs	r3, r3, #3
 800fa10:	f003 0303 	and.w	r3, r3, #3
 800fa14:	4a04      	ldr	r2, [pc, #16]	@ (800fa28 <UART_SetConfig+0xc30>)
 800fa16:	fa22 f303 	lsr.w	r3, r2, r3
 800fa1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa1c:	e018      	b.n	800fa50 <UART_SetConfig+0xc58>
 800fa1e:	bf00      	nop
 800fa20:	08014f74 	.word	0x08014f74
 800fa24:	58024400 	.word	0x58024400
 800fa28:	03d09000 	.word	0x03d09000
 800fa2c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fa30:	4b24      	ldr	r3, [pc, #144]	@ (800fac4 <UART_SetConfig+0xccc>)
 800fa32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa34:	e00c      	b.n	800fa50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa36:	4b24      	ldr	r3, [pc, #144]	@ (800fac8 <UART_SetConfig+0xcd0>)
 800fa38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa3a:	e009      	b.n	800fa50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa42:	e005      	b.n	800fa50 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fa44:	2300      	movs	r3, #0
 800fa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fa4e:	bf00      	nop
    }

    if (pclk != 0U)
 800fa50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d021      	beq.n	800fa9a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa5a:	4a1c      	ldr	r2, [pc, #112]	@ (800facc <UART_SetConfig+0xcd4>)
 800fa5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa60:	461a      	mov	r2, r3
 800fa62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa64:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	085b      	lsrs	r3, r3, #1
 800fa6e:	441a      	add	r2, r3
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa78:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7c:	2b0f      	cmp	r3, #15
 800fa7e:	d909      	bls.n	800fa94 <UART_SetConfig+0xc9c>
 800fa80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa86:	d205      	bcs.n	800fa94 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	60da      	str	r2, [r3, #12]
 800fa92:	e002      	b.n	800fa9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fa94:	2301      	movs	r3, #1
 800fa96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	2201      	movs	r2, #1
 800faa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	2200      	movs	r2, #0
 800faae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	2200      	movs	r2, #0
 800fab4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fab6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3748      	adds	r7, #72	@ 0x48
 800fabe:	46bd      	mov	sp, r7
 800fac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fac4:	03d09000 	.word	0x03d09000
 800fac8:	003d0900 	.word	0x003d0900
 800facc:	08014f74 	.word	0x08014f74

0800fad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fadc:	f003 0308 	and.w	r3, r3, #8
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00a      	beq.n	800fafa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	430a      	orrs	r2, r1
 800faf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fafe:	f003 0301 	and.w	r3, r3, #1
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00a      	beq.n	800fb1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	430a      	orrs	r2, r1
 800fb1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb20:	f003 0302 	and.w	r3, r3, #2
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00a      	beq.n	800fb3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	430a      	orrs	r2, r1
 800fb3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb42:	f003 0304 	and.w	r3, r3, #4
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00a      	beq.n	800fb60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	430a      	orrs	r2, r1
 800fb5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb64:	f003 0310 	and.w	r3, r3, #16
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00a      	beq.n	800fb82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	689b      	ldr	r3, [r3, #8]
 800fb72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	430a      	orrs	r2, r1
 800fb80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb86:	f003 0320 	and.w	r3, r3, #32
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00a      	beq.n	800fba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	430a      	orrs	r2, r1
 800fba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d01a      	beq.n	800fbe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	430a      	orrs	r2, r1
 800fbc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fbce:	d10a      	bne.n	800fbe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	430a      	orrs	r2, r1
 800fbe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d00a      	beq.n	800fc08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	430a      	orrs	r2, r1
 800fc06:	605a      	str	r2, [r3, #4]
  }
}
 800fc08:	bf00      	nop
 800fc0a:	370c      	adds	r7, #12
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b098      	sub	sp, #96	@ 0x60
 800fc18:	af02      	add	r7, sp, #8
 800fc1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc24:	f7f2 ffa2 	bl	8002b6c <HAL_GetTick>
 800fc28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	f003 0308 	and.w	r3, r3, #8
 800fc34:	2b08      	cmp	r3, #8
 800fc36:	d12f      	bne.n	800fc98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc40:	2200      	movs	r2, #0
 800fc42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 f88e 	bl	800fd68 <UART_WaitOnFlagUntilTimeout>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d022      	beq.n	800fc98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5a:	e853 3f00 	ldrex	r3, [r3]
 800fc5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc66:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc70:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc78:	e841 2300 	strex	r3, r2, [r1]
 800fc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d1e6      	bne.n	800fc52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2220      	movs	r2, #32
 800fc88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc94:	2303      	movs	r3, #3
 800fc96:	e063      	b.n	800fd60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f003 0304 	and.w	r3, r3, #4
 800fca2:	2b04      	cmp	r3, #4
 800fca4:	d149      	bne.n	800fd3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fca6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 f857 	bl	800fd68 <UART_WaitOnFlagUntilTimeout>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d03c      	beq.n	800fd3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc8:	e853 3f00 	ldrex	r3, [r3]
 800fccc:	623b      	str	r3, [r7, #32]
   return(result);
 800fcce:	6a3b      	ldr	r3, [r7, #32]
 800fcd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	461a      	mov	r2, r3
 800fcdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcde:	633b      	str	r3, [r7, #48]	@ 0x30
 800fce0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fce6:	e841 2300 	strex	r3, r2, [r1]
 800fcea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fcec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1e6      	bne.n	800fcc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	3308      	adds	r3, #8
 800fcf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	e853 3f00 	ldrex	r3, [r3]
 800fd00:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f023 0301 	bic.w	r3, r3, #1
 800fd08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3308      	adds	r3, #8
 800fd10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd12:	61fa      	str	r2, [r7, #28]
 800fd14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd16:	69b9      	ldr	r1, [r7, #24]
 800fd18:	69fa      	ldr	r2, [r7, #28]
 800fd1a:	e841 2300 	strex	r3, r2, [r1]
 800fd1e:	617b      	str	r3, [r7, #20]
   return(result);
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d1e5      	bne.n	800fcf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2220      	movs	r2, #32
 800fd2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd36:	2303      	movs	r3, #3
 800fd38:	e012      	b.n	800fd60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2220      	movs	r2, #32
 800fd3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2220      	movs	r2, #32
 800fd46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3758      	adds	r7, #88	@ 0x58
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	603b      	str	r3, [r7, #0]
 800fd74:	4613      	mov	r3, r2
 800fd76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd78:	e04f      	b.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd80:	d04b      	beq.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd82:	f7f2 fef3 	bl	8002b6c <HAL_GetTick>
 800fd86:	4602      	mov	r2, r0
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	1ad3      	subs	r3, r2, r3
 800fd8c:	69ba      	ldr	r2, [r7, #24]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d302      	bcc.n	800fd98 <UART_WaitOnFlagUntilTimeout+0x30>
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d101      	bne.n	800fd9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fd98:	2303      	movs	r3, #3
 800fd9a:	e04e      	b.n	800fe3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f003 0304 	and.w	r3, r3, #4
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d037      	beq.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	2b80      	cmp	r3, #128	@ 0x80
 800fdae:	d034      	beq.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	2b40      	cmp	r3, #64	@ 0x40
 800fdb4:	d031      	beq.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	69db      	ldr	r3, [r3, #28]
 800fdbc:	f003 0308 	and.w	r3, r3, #8
 800fdc0:	2b08      	cmp	r3, #8
 800fdc2:	d110      	bne.n	800fde6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2208      	movs	r2, #8
 800fdca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f000 f839 	bl	800fe44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2208      	movs	r2, #8
 800fdd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	e029      	b.n	800fe3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	69db      	ldr	r3, [r3, #28]
 800fdec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fdf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fdf4:	d111      	bne.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fdfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f000 f81f 	bl	800fe44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2220      	movs	r2, #32
 800fe0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2200      	movs	r2, #0
 800fe12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fe16:	2303      	movs	r3, #3
 800fe18:	e00f      	b.n	800fe3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	69da      	ldr	r2, [r3, #28]
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	4013      	ands	r3, r2
 800fe24:	68ba      	ldr	r2, [r7, #8]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	bf0c      	ite	eq
 800fe2a:	2301      	moveq	r3, #1
 800fe2c:	2300      	movne	r3, #0
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	461a      	mov	r2, r3
 800fe32:	79fb      	ldrb	r3, [r7, #7]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d0a0      	beq.n	800fd7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe38:	2300      	movs	r3, #0
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3710      	adds	r7, #16
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
	...

0800fe44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b095      	sub	sp, #84	@ 0x54
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe54:	e853 3f00 	ldrex	r3, [r3]
 800fe58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fe5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	461a      	mov	r2, r3
 800fe68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe6a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fe70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fe72:	e841 2300 	strex	r3, r2, [r1]
 800fe76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fe78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1e6      	bne.n	800fe4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	3308      	adds	r3, #8
 800fe84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe86:	6a3b      	ldr	r3, [r7, #32]
 800fe88:	e853 3f00 	ldrex	r3, [r3]
 800fe8c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe8e:	69fa      	ldr	r2, [r7, #28]
 800fe90:	4b1e      	ldr	r3, [pc, #120]	@ (800ff0c <UART_EndRxTransfer+0xc8>)
 800fe92:	4013      	ands	r3, r2
 800fe94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	3308      	adds	r3, #8
 800fe9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fea6:	e841 2300 	strex	r3, r2, [r1]
 800feaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800feac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d1e5      	bne.n	800fe7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d118      	bne.n	800feec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	e853 3f00 	ldrex	r3, [r3]
 800fec6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	f023 0310 	bic.w	r3, r3, #16
 800fece:	647b      	str	r3, [r7, #68]	@ 0x44
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	461a      	mov	r2, r3
 800fed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fed8:	61bb      	str	r3, [r7, #24]
 800feda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fedc:	6979      	ldr	r1, [r7, #20]
 800fede:	69ba      	ldr	r2, [r7, #24]
 800fee0:	e841 2300 	strex	r3, r2, [r1]
 800fee4:	613b      	str	r3, [r7, #16]
   return(result);
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d1e6      	bne.n	800feba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2220      	movs	r2, #32
 800fef0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ff00:	bf00      	nop
 800ff02:	3754      	adds	r7, #84	@ 0x54
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr
 800ff0c:	effffffe 	.word	0xeffffffe

0800ff10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b085      	sub	sp, #20
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d101      	bne.n	800ff26 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff22:	2302      	movs	r3, #2
 800ff24:	e027      	b.n	800ff76 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2201      	movs	r2, #1
 800ff2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2224      	movs	r2, #36	@ 0x24
 800ff32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f022 0201 	bic.w	r2, r2, #1
 800ff4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ff54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	68fa      	ldr	r2, [r7, #12]
 800ff62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2220      	movs	r2, #32
 800ff68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3714      	adds	r7, #20
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr

0800ff82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b084      	sub	sp, #16
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
 800ff8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d101      	bne.n	800ff9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff96:	2302      	movs	r3, #2
 800ff98:	e02d      	b.n	800fff6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2224      	movs	r2, #36	@ 0x24
 800ffa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f022 0201 	bic.w	r2, r2, #1
 800ffc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	430a      	orrs	r2, r1
 800ffd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 f850 	bl	801007c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	68fa      	ldr	r2, [r7, #12]
 800ffe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2220      	movs	r2, #32
 800ffe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2200      	movs	r2, #0
 800fff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b084      	sub	sp, #16
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
 8010006:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801000e:	2b01      	cmp	r3, #1
 8010010:	d101      	bne.n	8010016 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010012:	2302      	movs	r3, #2
 8010014:	e02d      	b.n	8010072 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2201      	movs	r2, #1
 801001a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2224      	movs	r2, #36	@ 0x24
 8010022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f022 0201 	bic.w	r2, r2, #1
 801003c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	683a      	ldr	r2, [r7, #0]
 801004e:	430a      	orrs	r2, r1
 8010050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 f812 	bl	801007c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2220      	movs	r2, #32
 8010064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	3710      	adds	r7, #16
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
	...

0801007c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801007c:	b480      	push	{r7}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010088:	2b00      	cmp	r3, #0
 801008a:	d108      	bne.n	801009e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2201      	movs	r2, #1
 8010090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2201      	movs	r2, #1
 8010098:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801009c:	e031      	b.n	8010102 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801009e:	2310      	movs	r3, #16
 80100a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100a2:	2310      	movs	r3, #16
 80100a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	0e5b      	lsrs	r3, r3, #25
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	f003 0307 	and.w	r3, r3, #7
 80100b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	689b      	ldr	r3, [r3, #8]
 80100bc:	0f5b      	lsrs	r3, r3, #29
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	f003 0307 	and.w	r3, r3, #7
 80100c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100c6:	7bbb      	ldrb	r3, [r7, #14]
 80100c8:	7b3a      	ldrb	r2, [r7, #12]
 80100ca:	4911      	ldr	r1, [pc, #68]	@ (8010110 <UARTEx_SetNbDataToProcess+0x94>)
 80100cc:	5c8a      	ldrb	r2, [r1, r2]
 80100ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80100d2:	7b3a      	ldrb	r2, [r7, #12]
 80100d4:	490f      	ldr	r1, [pc, #60]	@ (8010114 <UARTEx_SetNbDataToProcess+0x98>)
 80100d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80100dc:	b29a      	uxth	r2, r3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
 80100e6:	7b7a      	ldrb	r2, [r7, #13]
 80100e8:	4909      	ldr	r1, [pc, #36]	@ (8010110 <UARTEx_SetNbDataToProcess+0x94>)
 80100ea:	5c8a      	ldrb	r2, [r1, r2]
 80100ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100f0:	7b7a      	ldrb	r2, [r7, #13]
 80100f2:	4908      	ldr	r1, [pc, #32]	@ (8010114 <UARTEx_SetNbDataToProcess+0x98>)
 80100f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010102:	bf00      	nop
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	08014f8c 	.word	0x08014f8c
 8010114:	08014f94 	.word	0x08014f94

08010118 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010118:	b084      	sub	sp, #16
 801011a:	b480      	push	{r7}
 801011c:	b085      	sub	sp, #20
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
 8010122:	f107 001c 	add.w	r0, r7, #28
 8010126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801012a:	2300      	movs	r3, #0
 801012c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801012e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010130:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010132:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8010136:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 801013a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801013c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801013e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	4313      	orrs	r3, r2
 8010144:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	685a      	ldr	r2, [r3, #4]
 801014a:	4b07      	ldr	r3, [pc, #28]	@ (8010168 <SDMMC_Init+0x50>)
 801014c:	4013      	ands	r3, r2
 801014e:	68fa      	ldr	r2, [r7, #12]
 8010150:	431a      	orrs	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010156:	2300      	movs	r3, #0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3714      	adds	r7, #20
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	b004      	add	sp, #16
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	ffc02c00 	.word	0xffc02c00

0801016c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 801017a:	4618      	mov	r0, r3
 801017c:	370c      	adds	r7, #12
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr

08010186 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010186:	b480      	push	{r7}
 8010188:	b083      	sub	sp, #12
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
 801018e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801019a:	2300      	movs	r3, #0
}
 801019c:	4618      	mov	r0, r3
 801019e:	370c      	adds	r7, #12
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f043 0203 	orr.w	r2, r3, #3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80101ca:	b480      	push	{r7}
 80101cc:	b083      	sub	sp, #12
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f003 0303 	and.w	r3, r3, #3
}
 80101da:	4618      	mov	r0, r3
 80101dc:	370c      	adds	r7, #12
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
	...

080101e8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80101f2:	2300      	movs	r3, #0
 80101f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010206:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801020c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010212:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	4313      	orrs	r3, r2
 8010218:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	68da      	ldr	r2, [r3, #12]
 801021e:	4b06      	ldr	r3, [pc, #24]	@ (8010238 <SDMMC_SendCommand+0x50>)
 8010220:	4013      	ands	r3, r2
 8010222:	68fa      	ldr	r2, [r7, #12]
 8010224:	431a      	orrs	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801022a:	2300      	movs	r3, #0
}
 801022c:	4618      	mov	r0, r3
 801022e:	3714      	adds	r7, #20
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr
 8010238:	fffee0c0 	.word	0xfffee0c0

0801023c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	691b      	ldr	r3, [r3, #16]
 8010248:	b2db      	uxtb	r3, r3
}
 801024a:	4618      	mov	r0, r3
 801024c:	370c      	adds	r7, #12
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr

08010256 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010256:	b480      	push	{r7}
 8010258:	b085      	sub	sp, #20
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
 801025e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	3314      	adds	r3, #20
 8010264:	461a      	mov	r2, r3
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	4413      	add	r3, r2
 801026a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
}
 8010270:	4618      	mov	r0, r3
 8010272:	3714      	adds	r7, #20
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102a2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80102a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80102ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102b0:	68fa      	ldr	r2, [r7, #12]
 80102b2:	4313      	orrs	r3, r2
 80102b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	431a      	orrs	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80102c6:	2300      	movs	r3, #0

}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3714      	adds	r7, #20
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b088      	sub	sp, #32
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102e2:	2310      	movs	r3, #16
 80102e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102ec:	2300      	movs	r3, #0
 80102ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102f6:	f107 0308 	add.w	r3, r7, #8
 80102fa:	4619      	mov	r1, r3
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f7ff ff73 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010306:	2110      	movs	r1, #16
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f000 fa5f 	bl	80107cc <SDMMC_GetCmdResp1>
 801030e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010310:	69fb      	ldr	r3, [r7, #28]
}
 8010312:	4618      	mov	r0, r3
 8010314:	3720      	adds	r7, #32
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b088      	sub	sp, #32
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010328:	2311      	movs	r3, #17
 801032a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801032c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010332:	2300      	movs	r3, #0
 8010334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010336:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801033a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801033c:	f107 0308 	add.w	r3, r7, #8
 8010340:	4619      	mov	r1, r3
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7ff ff50 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010348:	f241 3288 	movw	r2, #5000	@ 0x1388
 801034c:	2111      	movs	r1, #17
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f000 fa3c 	bl	80107cc <SDMMC_GetCmdResp1>
 8010354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010356:	69fb      	ldr	r3, [r7, #28]
}
 8010358:	4618      	mov	r0, r3
 801035a:	3720      	adds	r7, #32
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b088      	sub	sp, #32
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801036e:	2312      	movs	r3, #18
 8010370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010378:	2300      	movs	r3, #0
 801037a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801037c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010382:	f107 0308 	add.w	r3, r7, #8
 8010386:	4619      	mov	r1, r3
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f7ff ff2d 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801038e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010392:	2112      	movs	r1, #18
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f000 fa19 	bl	80107cc <SDMMC_GetCmdResp1>
 801039a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801039c:	69fb      	ldr	r3, [r7, #28]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3720      	adds	r7, #32
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103a6:	b580      	push	{r7, lr}
 80103a8:	b088      	sub	sp, #32
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
 80103ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80103b4:	2318      	movs	r3, #24
 80103b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103be:	2300      	movs	r3, #0
 80103c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103c8:	f107 0308 	add.w	r3, r7, #8
 80103cc:	4619      	mov	r1, r3
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f7ff ff0a 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103d8:	2118      	movs	r1, #24
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 f9f6 	bl	80107cc <SDMMC_GetCmdResp1>
 80103e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103e2:	69fb      	ldr	r3, [r7, #28]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3720      	adds	r7, #32
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b088      	sub	sp, #32
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80103fa:	2319      	movs	r3, #25
 80103fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010404:	2300      	movs	r3, #0
 8010406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801040c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801040e:	f107 0308 	add.w	r3, r7, #8
 8010412:	4619      	mov	r1, r3
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7ff fee7 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801041a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801041e:	2119      	movs	r1, #25
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 f9d3 	bl	80107cc <SDMMC_GetCmdResp1>
 8010426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010428:	69fb      	ldr	r3, [r7, #28]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3720      	adds	r7, #32
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
	...

08010434 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b088      	sub	sp, #32
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801043c:	2300      	movs	r3, #0
 801043e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010440:	230c      	movs	r3, #12
 8010442:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010444:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801044a:	2300      	movs	r3, #0
 801044c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801044e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010452:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801046c:	f107 0308 	add.w	r3, r7, #8
 8010470:	4619      	mov	r1, r3
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7ff feb8 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010478:	4a0b      	ldr	r2, [pc, #44]	@ (80104a8 <SDMMC_CmdStopTransfer+0x74>)
 801047a:	210c      	movs	r1, #12
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f000 f9a5 	bl	80107cc <SDMMC_GetCmdResp1>
 8010482:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010496:	d101      	bne.n	801049c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010498:	2300      	movs	r3, #0
 801049a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801049c:	69fb      	ldr	r3, [r7, #28]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3720      	adds	r7, #32
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	05f5e100 	.word	0x05f5e100

080104ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b088      	sub	sp, #32
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80104ba:	2307      	movs	r3, #7
 80104bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80104c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104c4:	2300      	movs	r3, #0
 80104c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104ce:	f107 0308 	add.w	r3, r7, #8
 80104d2:	4619      	mov	r1, r3
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7ff fe87 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80104da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104de:	2107      	movs	r1, #7
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f973 	bl	80107cc <SDMMC_GetCmdResp1>
 80104e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104e8:	69fb      	ldr	r3, [r7, #28]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3720      	adds	r7, #32
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b088      	sub	sp, #32
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80104fa:	2300      	movs	r3, #0
 80104fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80104fe:	2300      	movs	r3, #0
 8010500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010502:	2300      	movs	r3, #0
 8010504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010506:	2300      	movs	r3, #0
 8010508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801050a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801050e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010510:	f107 0308 	add.w	r3, r7, #8
 8010514:	4619      	mov	r1, r3
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff fe66 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f000 fb97 	bl	8010c50 <SDMMC_GetCmdError>
 8010522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010524:	69fb      	ldr	r3, [r7, #28]
}
 8010526:	4618      	mov	r0, r3
 8010528:	3720      	adds	r7, #32
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b088      	sub	sp, #32
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010536:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801053a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801053c:	2308      	movs	r3, #8
 801053e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010546:	2300      	movs	r3, #0
 8010548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801054a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801054e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010550:	f107 0308 	add.w	r3, r7, #8
 8010554:	4619      	mov	r1, r3
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f7ff fe46 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 fb29 	bl	8010bb4 <SDMMC_GetCmdResp7>
 8010562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010564:	69fb      	ldr	r3, [r7, #28]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3720      	adds	r7, #32
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}

0801056e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b088      	sub	sp, #32
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
 8010576:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801057c:	2337      	movs	r3, #55	@ 0x37
 801057e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010586:	2300      	movs	r3, #0
 8010588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801058a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801058e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010590:	f107 0308 	add.w	r3, r7, #8
 8010594:	4619      	mov	r1, r3
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7ff fe26 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801059c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105a0:	2137      	movs	r1, #55	@ 0x37
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 f912 	bl	80107cc <SDMMC_GetCmdResp1>
 80105a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105aa:	69fb      	ldr	r3, [r7, #28]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3720      	adds	r7, #32
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b088      	sub	sp, #32
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105c2:	2329      	movs	r3, #41	@ 0x29
 80105c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105cc:	2300      	movs	r3, #0
 80105ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105d6:	f107 0308 	add.w	r3, r7, #8
 80105da:	4619      	mov	r1, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7ff fe03 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f000 fa2e 	bl	8010a44 <SDMMC_GetCmdResp3>
 80105e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ea:	69fb      	ldr	r3, [r7, #28]
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3720      	adds	r7, #32
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b088      	sub	sp, #32
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010602:	2306      	movs	r3, #6
 8010604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010606:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801060a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801060c:	2300      	movs	r3, #0
 801060e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010616:	f107 0308 	add.w	r3, r7, #8
 801061a:	4619      	mov	r1, r3
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7ff fde3 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010626:	2106      	movs	r1, #6
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f000 f8cf 	bl	80107cc <SDMMC_GetCmdResp1>
 801062e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010630:	69fb      	ldr	r3, [r7, #28]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3720      	adds	r7, #32
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b088      	sub	sp, #32
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010642:	2300      	movs	r3, #0
 8010644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010646:	2333      	movs	r3, #51	@ 0x33
 8010648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801064a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801064e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010650:	2300      	movs	r3, #0
 8010652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010658:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801065a:	f107 0308 	add.w	r3, r7, #8
 801065e:	4619      	mov	r1, r3
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f7ff fdc1 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010666:	f241 3288 	movw	r2, #5000	@ 0x1388
 801066a:	2133      	movs	r1, #51	@ 0x33
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 f8ad 	bl	80107cc <SDMMC_GetCmdResp1>
 8010672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010674:	69fb      	ldr	r3, [r7, #28]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3720      	adds	r7, #32
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b088      	sub	sp, #32
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010686:	2300      	movs	r3, #0
 8010688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801068a:	2302      	movs	r3, #2
 801068c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801068e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010694:	2300      	movs	r3, #0
 8010696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801069c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801069e:	f107 0308 	add.w	r3, r7, #8
 80106a2:	4619      	mov	r1, r3
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7ff fd9f 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 f980 	bl	80109b0 <SDMMC_GetCmdResp2>
 80106b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106b2:	69fb      	ldr	r3, [r7, #28]
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3720      	adds	r7, #32
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}

080106bc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b088      	sub	sp, #32
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106ca:	2309      	movs	r3, #9
 80106cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80106d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106d4:	2300      	movs	r3, #0
 80106d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80106dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106de:	f107 0308 	add.w	r3, r7, #8
 80106e2:	4619      	mov	r1, r3
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7ff fd7f 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f000 f960 	bl	80109b0 <SDMMC_GetCmdResp2>
 80106f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106f2:	69fb      	ldr	r3, [r7, #28]
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3720      	adds	r7, #32
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b088      	sub	sp, #32
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010706:	2300      	movs	r3, #0
 8010708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801070a:	2303      	movs	r3, #3
 801070c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801070e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010714:	2300      	movs	r3, #0
 8010716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801071c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801071e:	f107 0308 	add.w	r3, r7, #8
 8010722:	4619      	mov	r1, r3
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f7ff fd5f 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801072a:	683a      	ldr	r2, [r7, #0]
 801072c:	2103      	movs	r1, #3
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f000 f9c8 	bl	8010ac4 <SDMMC_GetCmdResp6>
 8010734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010736:	69fb      	ldr	r3, [r7, #28]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3720      	adds	r7, #32
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b088      	sub	sp, #32
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801074e:	230d      	movs	r3, #13
 8010750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010752:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010758:	2300      	movs	r3, #0
 801075a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801075c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010760:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010762:	f107 0308 	add.w	r3, r7, #8
 8010766:	4619      	mov	r1, r3
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f7ff fd3d 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801076e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010772:	210d      	movs	r1, #13
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 f829 	bl	80107cc <SDMMC_GetCmdResp1>
 801077a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801077c:	69fb      	ldr	r3, [r7, #28]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3720      	adds	r7, #32
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b088      	sub	sp, #32
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801078e:	2300      	movs	r3, #0
 8010790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010792:	230d      	movs	r3, #13
 8010794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801079a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801079c:	2300      	movs	r3, #0
 801079e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80107a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107a6:	f107 0308 	add.w	r3, r7, #8
 80107aa:	4619      	mov	r1, r3
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f7ff fd1b 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80107b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107b6:	210d      	movs	r1, #13
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 f807 	bl	80107cc <SDMMC_GetCmdResp1>
 80107be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107c0:	69fb      	ldr	r3, [r7, #28]
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3720      	adds	r7, #32
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
	...

080107cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b088      	sub	sp, #32
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	460b      	mov	r3, r1
 80107d6:	607a      	str	r2, [r7, #4]
 80107d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80107da:	4b70      	ldr	r3, [pc, #448]	@ (801099c <SDMMC_GetCmdResp1+0x1d0>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a70      	ldr	r2, [pc, #448]	@ (80109a0 <SDMMC_GetCmdResp1+0x1d4>)
 80107e0:	fba2 2303 	umull	r2, r3, r2, r3
 80107e4:	0a5a      	lsrs	r2, r3, #9
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	fb02 f303 	mul.w	r3, r2, r3
 80107ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	1e5a      	subs	r2, r3, #1
 80107f2:	61fa      	str	r2, [r7, #28]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d102      	bne.n	80107fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107fc:	e0c9      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010802:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010804:	69ba      	ldr	r2, [r7, #24]
 8010806:	4b67      	ldr	r3, [pc, #412]	@ (80109a4 <SDMMC_GetCmdResp1+0x1d8>)
 8010808:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801080a:	2b00      	cmp	r3, #0
 801080c:	d0ef      	beq.n	80107ee <SDMMC_GetCmdResp1+0x22>
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1ea      	bne.n	80107ee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801081c:	f003 0304 	and.w	r3, r3, #4
 8010820:	2b00      	cmp	r3, #0
 8010822:	d004      	beq.n	801082e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2204      	movs	r2, #4
 8010828:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801082a:	2304      	movs	r3, #4
 801082c:	e0b1      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	d004      	beq.n	8010844 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2201      	movs	r2, #1
 801083e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010840:	2301      	movs	r3, #1
 8010842:	e0a6      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	4a58      	ldr	r2, [pc, #352]	@ (80109a8 <SDMMC_GetCmdResp1+0x1dc>)
 8010848:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	f7ff fcf6 	bl	801023c <SDMMC_GetCommandResponse>
 8010850:	4603      	mov	r3, r0
 8010852:	461a      	mov	r2, r3
 8010854:	7afb      	ldrb	r3, [r7, #11]
 8010856:	4293      	cmp	r3, r2
 8010858:	d001      	beq.n	801085e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801085a:	2301      	movs	r3, #1
 801085c:	e099      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801085e:	2100      	movs	r1, #0
 8010860:	68f8      	ldr	r0, [r7, #12]
 8010862:	f7ff fcf8 	bl	8010256 <SDMMC_GetResponse>
 8010866:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	4b50      	ldr	r3, [pc, #320]	@ (80109ac <SDMMC_GetCmdResp1+0x1e0>)
 801086c:	4013      	ands	r3, r2
 801086e:	2b00      	cmp	r3, #0
 8010870:	d101      	bne.n	8010876 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010872:	2300      	movs	r3, #0
 8010874:	e08d      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	2b00      	cmp	r3, #0
 801087a:	da02      	bge.n	8010882 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801087c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010880:	e087      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010888:	2b00      	cmp	r3, #0
 801088a:	d001      	beq.n	8010890 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801088c:	2340      	movs	r3, #64	@ 0x40
 801088e:	e080      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010896:	2b00      	cmp	r3, #0
 8010898:	d001      	beq.n	801089e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801089a:	2380      	movs	r3, #128	@ 0x80
 801089c:	e079      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d002      	beq.n	80108ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80108a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80108ac:	e071      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80108b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80108bc:	e069      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d002      	beq.n	80108ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108cc:	e061      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80108dc:	e059      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80108ec:	e051      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d002      	beq.n	80108fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80108fc:	e049      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010904:	2b00      	cmp	r3, #0
 8010906:	d002      	beq.n	801090e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010908:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801090c:	e041      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010914:	2b00      	cmp	r3, #0
 8010916:	d002      	beq.n	801091e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010918:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801091c:	e039      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010928:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801092c:	e031      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010934:	2b00      	cmp	r3, #0
 8010936:	d002      	beq.n	801093e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010938:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801093c:	e029      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010944:	2b00      	cmp	r3, #0
 8010946:	d002      	beq.n	801094e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010948:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801094c:	e021      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010954:	2b00      	cmp	r3, #0
 8010956:	d002      	beq.n	801095e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010958:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801095c:	e019      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010968:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801096c:	e011      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010974:	2b00      	cmp	r3, #0
 8010976:	d002      	beq.n	801097e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010978:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801097c:	e009      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	f003 0308 	and.w	r3, r3, #8
 8010984:	2b00      	cmp	r3, #0
 8010986:	d002      	beq.n	801098e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010988:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801098c:	e001      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801098e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010992:	4618      	mov	r0, r3
 8010994:	3720      	adds	r7, #32
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	2400000c 	.word	0x2400000c
 80109a0:	10624dd3 	.word	0x10624dd3
 80109a4:	00200045 	.word	0x00200045
 80109a8:	002000c5 	.word	0x002000c5
 80109ac:	fdffe008 	.word	0xfdffe008

080109b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b085      	sub	sp, #20
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109b8:	4b1f      	ldr	r3, [pc, #124]	@ (8010a38 <SDMMC_GetCmdResp2+0x88>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a1f      	ldr	r2, [pc, #124]	@ (8010a3c <SDMMC_GetCmdResp2+0x8c>)
 80109be:	fba2 2303 	umull	r2, r3, r2, r3
 80109c2:	0a5b      	lsrs	r3, r3, #9
 80109c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109c8:	fb02 f303 	mul.w	r3, r2, r3
 80109cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	1e5a      	subs	r2, r3, #1
 80109d2:	60fa      	str	r2, [r7, #12]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d102      	bne.n	80109de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80109dc:	e026      	b.n	8010a2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d0ef      	beq.n	80109ce <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1ea      	bne.n	80109ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109fc:	f003 0304 	and.w	r3, r3, #4
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d004      	beq.n	8010a0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2204      	movs	r2, #4
 8010a08:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a0a:	2304      	movs	r3, #4
 8010a0c:	e00e      	b.n	8010a2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a12:	f003 0301 	and.w	r3, r3, #1
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d004      	beq.n	8010a24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a20:	2301      	movs	r3, #1
 8010a22:	e003      	b.n	8010a2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4a06      	ldr	r2, [pc, #24]	@ (8010a40 <SDMMC_GetCmdResp2+0x90>)
 8010a28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3714      	adds	r7, #20
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr
 8010a38:	2400000c 	.word	0x2400000c
 8010a3c:	10624dd3 	.word	0x10624dd3
 8010a40:	002000c5 	.word	0x002000c5

08010a44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b085      	sub	sp, #20
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ab8 <SDMMC_GetCmdResp3+0x74>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a1a      	ldr	r2, [pc, #104]	@ (8010abc <SDMMC_GetCmdResp3+0x78>)
 8010a52:	fba2 2303 	umull	r2, r3, r2, r3
 8010a56:	0a5b      	lsrs	r3, r3, #9
 8010a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a5c:	fb02 f303 	mul.w	r3, r2, r3
 8010a60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	1e5a      	subs	r2, r3, #1
 8010a66:	60fa      	str	r2, [r7, #12]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d102      	bne.n	8010a72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010a70:	e01b      	b.n	8010aaa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d0ef      	beq.n	8010a62 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1ea      	bne.n	8010a62 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a90:	f003 0304 	and.w	r3, r3, #4
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d004      	beq.n	8010aa2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2204      	movs	r2, #4
 8010a9c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a9e:	2304      	movs	r3, #4
 8010aa0:	e003      	b.n	8010aaa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4a06      	ldr	r2, [pc, #24]	@ (8010ac0 <SDMMC_GetCmdResp3+0x7c>)
 8010aa6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010aa8:	2300      	movs	r3, #0
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3714      	adds	r7, #20
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop
 8010ab8:	2400000c 	.word	0x2400000c
 8010abc:	10624dd3 	.word	0x10624dd3
 8010ac0:	002000c5 	.word	0x002000c5

08010ac4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b088      	sub	sp, #32
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	460b      	mov	r3, r1
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ad2:	4b35      	ldr	r3, [pc, #212]	@ (8010ba8 <SDMMC_GetCmdResp6+0xe4>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4a35      	ldr	r2, [pc, #212]	@ (8010bac <SDMMC_GetCmdResp6+0xe8>)
 8010ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8010adc:	0a5b      	lsrs	r3, r3, #9
 8010ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ae2:	fb02 f303 	mul.w	r3, r2, r3
 8010ae6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	1e5a      	subs	r2, r3, #1
 8010aec:	61fa      	str	r2, [r7, #28]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d102      	bne.n	8010af8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010af2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010af6:	e052      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010afc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d0ef      	beq.n	8010ae8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010b08:	69bb      	ldr	r3, [r7, #24]
 8010b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1ea      	bne.n	8010ae8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b16:	f003 0304 	and.w	r3, r3, #4
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d004      	beq.n	8010b28 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2204      	movs	r2, #4
 8010b22:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b24:	2304      	movs	r3, #4
 8010b26:	e03a      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b2c:	f003 0301 	and.w	r3, r3, #1
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d004      	beq.n	8010b3e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2201      	movs	r2, #1
 8010b38:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e02f      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f7ff fb7c 	bl	801023c <SDMMC_GetCommandResponse>
 8010b44:	4603      	mov	r3, r0
 8010b46:	461a      	mov	r2, r3
 8010b48:	7afb      	ldrb	r3, [r7, #11]
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d001      	beq.n	8010b52 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e025      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	4a16      	ldr	r2, [pc, #88]	@ (8010bb0 <SDMMC_GetCmdResp6+0xec>)
 8010b56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010b58:	2100      	movs	r1, #0
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f7ff fb7b 	bl	8010256 <SDMMC_GetResponse>
 8010b60:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d106      	bne.n	8010b7a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	0c1b      	lsrs	r3, r3, #16
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010b76:	2300      	movs	r3, #0
 8010b78:	e011      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010b88:	e009      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d002      	beq.n	8010b9a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b98:	e001      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3720      	adds	r7, #32
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	2400000c 	.word	0x2400000c
 8010bac:	10624dd3 	.word	0x10624dd3
 8010bb0:	002000c5 	.word	0x002000c5

08010bb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bbc:	4b22      	ldr	r3, [pc, #136]	@ (8010c48 <SDMMC_GetCmdResp7+0x94>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4a22      	ldr	r2, [pc, #136]	@ (8010c4c <SDMMC_GetCmdResp7+0x98>)
 8010bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010bc6:	0a5b      	lsrs	r3, r3, #9
 8010bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bcc:	fb02 f303 	mul.w	r3, r2, r3
 8010bd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	1e5a      	subs	r2, r3, #1
 8010bd6:	60fa      	str	r2, [r7, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d102      	bne.n	8010be2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010be0:	e02c      	b.n	8010c3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010be6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d0ef      	beq.n	8010bd2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d1ea      	bne.n	8010bd2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c00:	f003 0304 	and.w	r3, r3, #4
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d004      	beq.n	8010c12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2204      	movs	r2, #4
 8010c0c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c0e:	2304      	movs	r3, #4
 8010c10:	e014      	b.n	8010c3c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c16:	f003 0301 	and.w	r3, r3, #1
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d004      	beq.n	8010c28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2201      	movs	r2, #1
 8010c22:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c24:	2301      	movs	r3, #1
 8010c26:	e009      	b.n	8010c3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d002      	beq.n	8010c3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2240      	movs	r2, #64	@ 0x40
 8010c38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c3a:	2300      	movs	r3, #0

}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr
 8010c48:	2400000c 	.word	0x2400000c
 8010c4c:	10624dd3 	.word	0x10624dd3

08010c50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c58:	4b11      	ldr	r3, [pc, #68]	@ (8010ca0 <SDMMC_GetCmdError+0x50>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a11      	ldr	r2, [pc, #68]	@ (8010ca4 <SDMMC_GetCmdError+0x54>)
 8010c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c62:	0a5b      	lsrs	r3, r3, #9
 8010c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c68:	fb02 f303 	mul.w	r3, r2, r3
 8010c6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	1e5a      	subs	r2, r3, #1
 8010c72:	60fa      	str	r2, [r7, #12]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d102      	bne.n	8010c7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010c7c:	e009      	b.n	8010c92 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d0f1      	beq.n	8010c6e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4a06      	ldr	r2, [pc, #24]	@ (8010ca8 <SDMMC_GetCmdError+0x58>)
 8010c8e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010c90:	2300      	movs	r3, #0
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3714      	adds	r7, #20
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr
 8010c9e:	bf00      	nop
 8010ca0:	2400000c 	.word	0x2400000c
 8010ca4:	10624dd3 	.word	0x10624dd3
 8010ca8:	002000c5 	.word	0x002000c5

08010cac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010cb0:	4904      	ldr	r1, [pc, #16]	@ (8010cc4 <MX_FATFS_Init+0x18>)
 8010cb2:	4805      	ldr	r0, [pc, #20]	@ (8010cc8 <MX_FATFS_Init+0x1c>)
 8010cb4:	f003 f988 	bl	8013fc8 <FATFS_LinkDriver>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	461a      	mov	r2, r3
 8010cbc:	4b03      	ldr	r3, [pc, #12]	@ (8010ccc <MX_FATFS_Init+0x20>)
 8010cbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010cc0:	bf00      	nop
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	24001824 	.word	0x24001824
 8010cc8:	08014f9c 	.word	0x08014f9c
 8010ccc:	24001820 	.word	0x24001820

08010cd0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010cd4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010cea:	f000 f885 	bl	8010df8 <BSP_SD_IsDetected>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d001      	beq.n	8010cf8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010cf4:	2302      	movs	r3, #2
 8010cf6:	e012      	b.n	8010d1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010cf8:	480b      	ldr	r0, [pc, #44]	@ (8010d28 <BSP_SD_Init+0x48>)
 8010cfa:	f7fb f955 	bl	800bfa8 <HAL_SD_Init>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010d02:	79fb      	ldrb	r3, [r7, #7]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d109      	bne.n	8010d1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010d08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010d0c:	4806      	ldr	r0, [pc, #24]	@ (8010d28 <BSP_SD_Init+0x48>)
 8010d0e:	f7fc f80b 	bl	800cd28 <HAL_SD_ConfigWideBusOperation>
 8010d12:	4603      	mov	r3, r0
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d001      	beq.n	8010d1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010d18:	2301      	movs	r3, #1
 8010d1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	2400032c 	.word	0x2400032c

08010d2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b086      	sub	sp, #24
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	60b9      	str	r1, [r7, #8]
 8010d36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	68ba      	ldr	r2, [r7, #8]
 8010d40:	68f9      	ldr	r1, [r7, #12]
 8010d42:	4806      	ldr	r0, [pc, #24]	@ (8010d5c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010d44:	f7fb fa50 	bl	800c1e8 <HAL_SD_ReadBlocks_DMA>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d4e:	2301      	movs	r3, #1
 8010d50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3718      	adds	r7, #24
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	2400032c 	.word	0x2400032c

08010d60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b086      	sub	sp, #24
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	60f8      	str	r0, [r7, #12]
 8010d68:	60b9      	str	r1, [r7, #8]
 8010d6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	68ba      	ldr	r2, [r7, #8]
 8010d74:	68f9      	ldr	r1, [r7, #12]
 8010d76:	4806      	ldr	r0, [pc, #24]	@ (8010d90 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010d78:	f7fb fade 	bl	800c338 <HAL_SD_WriteBlocks_DMA>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d001      	beq.n	8010d86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d82:	2301      	movs	r3, #1
 8010d84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3718      	adds	r7, #24
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	2400032c 	.word	0x2400032c

08010d94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010d98:	4805      	ldr	r0, [pc, #20]	@ (8010db0 <BSP_SD_GetCardState+0x1c>)
 8010d9a:	f7fc f8d7 	bl	800cf4c <HAL_SD_GetCardState>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b04      	cmp	r3, #4
 8010da2:	bf14      	ite	ne
 8010da4:	2301      	movne	r3, #1
 8010da6:	2300      	moveq	r3, #0
 8010da8:	b2db      	uxtb	r3, r3
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	2400032c 	.word	0x2400032c

08010db4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010dbc:	6879      	ldr	r1, [r7, #4]
 8010dbe:	4803      	ldr	r0, [pc, #12]	@ (8010dcc <BSP_SD_GetCardInfo+0x18>)
 8010dc0:	f7fb ff86 	bl	800ccd0 <HAL_SD_GetCardInfo>
}
 8010dc4:	bf00      	nop
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	2400032c 	.word	0x2400032c

08010dd0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010dd8:	f000 f9a0 	bl	801111c <BSP_SD_WriteCpltCallback>
}
 8010ddc:	bf00      	nop
 8010dde:	3708      	adds	r7, #8
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}

08010de4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010dec:	f000 f9a2 	bl	8011134 <BSP_SD_ReadCpltCallback>
}
 8010df0:	bf00      	nop
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010e02:	f000 f80b 	bl	8010e1c <BSP_PlatformIsDetected>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d101      	bne.n	8010e10 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010e10:	79fb      	ldrb	r3, [r7, #7]
 8010e12:	b2db      	uxtb	r3, r3
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010e22:	2301      	movs	r3, #1
 8010e24:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010e2a:	4806      	ldr	r0, [pc, #24]	@ (8010e44 <BSP_PlatformIsDetected+0x28>)
 8010e2c:	f7f7 fd04 	bl	8008838 <HAL_GPIO_ReadPin>
 8010e30:	4603      	mov	r3, r0
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d001      	beq.n	8010e3a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010e36:	2300      	movs	r3, #0
 8010e38:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	58021400 	.word	0x58021400

08010e48 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010e50:	f7f1 fe8c 	bl	8002b6c <HAL_GetTick>
 8010e54:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010e56:	e006      	b.n	8010e66 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e58:	f7ff ff9c 	bl	8010d94 <BSP_SD_GetCardState>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d101      	bne.n	8010e66 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010e62:	2300      	movs	r3, #0
 8010e64:	e009      	b.n	8010e7a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010e66:	f7f1 fe81 	bl	8002b6c <HAL_GetTick>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	1ad3      	subs	r3, r2, r3
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d8f0      	bhi.n	8010e58 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3710      	adds	r7, #16
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
	...

08010e84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8010ebc <SD_CheckStatus+0x38>)
 8010e90:	2201      	movs	r2, #1
 8010e92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e94:	f7ff ff7e 	bl	8010d94 <BSP_SD_GetCardState>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d107      	bne.n	8010eae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e9e:	4b07      	ldr	r3, [pc, #28]	@ (8010ebc <SD_CheckStatus+0x38>)
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	b2db      	uxtb	r3, r3
 8010ea4:	f023 0301 	bic.w	r3, r3, #1
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	4b04      	ldr	r3, [pc, #16]	@ (8010ebc <SD_CheckStatus+0x38>)
 8010eac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010eae:	4b03      	ldr	r3, [pc, #12]	@ (8010ebc <SD_CheckStatus+0x38>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	b2db      	uxtb	r3, r3
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3708      	adds	r7, #8
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	24000019 	.word	0x24000019

08010ec0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010eca:	f7ff ff09 	bl	8010ce0 <BSP_SD_Init>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d107      	bne.n	8010ee4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010ed4:	79fb      	ldrb	r3, [r7, #7]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff ffd4 	bl	8010e84 <SD_CheckStatus>
 8010edc:	4603      	mov	r3, r0
 8010ede:	461a      	mov	r2, r3
 8010ee0:	4b04      	ldr	r3, [pc, #16]	@ (8010ef4 <SD_initialize+0x34>)
 8010ee2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010ee4:	4b03      	ldr	r3, [pc, #12]	@ (8010ef4 <SD_initialize+0x34>)
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	b2db      	uxtb	r3, r3
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	24000019 	.word	0x24000019

08010ef8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	4603      	mov	r3, r0
 8010f00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010f02:	79fb      	ldrb	r3, [r7, #7]
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7ff ffbd 	bl	8010e84 <SD_CheckStatus>
 8010f0a:	4603      	mov	r3, r0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3708      	adds	r7, #8
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b086      	sub	sp, #24
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60b9      	str	r1, [r7, #8]
 8010f1c:	607a      	str	r2, [r7, #4]
 8010f1e:	603b      	str	r3, [r7, #0]
 8010f20:	4603      	mov	r3, r0
 8010f22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f24:	2301      	movs	r3, #1
 8010f26:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f28:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010f2c:	f7ff ff8c 	bl	8010e48 <SD_CheckStatusWithTimeout>
 8010f30:	4603      	mov	r3, r0
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	da01      	bge.n	8010f3a <SD_read+0x26>
  {
    return res;
 8010f36:	7dfb      	ldrb	r3, [r7, #23]
 8010f38:	e03b      	b.n	8010fb2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010f3a:	683a      	ldr	r2, [r7, #0]
 8010f3c:	6879      	ldr	r1, [r7, #4]
 8010f3e:	68b8      	ldr	r0, [r7, #8]
 8010f40:	f7ff fef4 	bl	8010d2c <BSP_SD_ReadBlocks_DMA>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d132      	bne.n	8010fb0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8010fbc <SD_read+0xa8>)
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010f50:	f7f1 fe0c 	bl	8002b6c <HAL_GetTick>
 8010f54:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f56:	bf00      	nop
 8010f58:	4b18      	ldr	r3, [pc, #96]	@ (8010fbc <SD_read+0xa8>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d108      	bne.n	8010f72 <SD_read+0x5e>
 8010f60:	f7f1 fe04 	bl	8002b6c <HAL_GetTick>
 8010f64:	4602      	mov	r2, r0
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	1ad3      	subs	r3, r2, r3
 8010f6a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d9f2      	bls.n	8010f58 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010f72:	4b12      	ldr	r3, [pc, #72]	@ (8010fbc <SD_read+0xa8>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d102      	bne.n	8010f80 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	75fb      	strb	r3, [r7, #23]
 8010f7e:	e017      	b.n	8010fb0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010f80:	4b0e      	ldr	r3, [pc, #56]	@ (8010fbc <SD_read+0xa8>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f86:	f7f1 fdf1 	bl	8002b6c <HAL_GetTick>
 8010f8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f8c:	e007      	b.n	8010f9e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f8e:	f7ff ff01 	bl	8010d94 <BSP_SD_GetCardState>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d102      	bne.n	8010f9e <SD_read+0x8a>
          {
            res = RES_OK;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010f9c:	e008      	b.n	8010fb0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f9e:	f7f1 fde5 	bl	8002b6c <HAL_GetTick>
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	1ad3      	subs	r3, r2, r3
 8010fa8:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d9ee      	bls.n	8010f8e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3718      	adds	r7, #24
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	24001830 	.word	0x24001830

08010fc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b086      	sub	sp, #24
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	60b9      	str	r1, [r7, #8]
 8010fc8:	607a      	str	r2, [r7, #4]
 8010fca:	603b      	str	r3, [r7, #0]
 8010fcc:	4603      	mov	r3, r0
 8010fce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010fd4:	4b24      	ldr	r3, [pc, #144]	@ (8011068 <SD_write+0xa8>)
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010fda:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010fde:	f7ff ff33 	bl	8010e48 <SD_CheckStatusWithTimeout>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	da01      	bge.n	8010fec <SD_write+0x2c>
  {
    return res;
 8010fe8:	7dfb      	ldrb	r3, [r7, #23]
 8010fea:	e038      	b.n	801105e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	6879      	ldr	r1, [r7, #4]
 8010ff0:	68b8      	ldr	r0, [r7, #8]
 8010ff2:	f7ff feb5 	bl	8010d60 <BSP_SD_WriteBlocks_DMA>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d12f      	bne.n	801105c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010ffc:	f7f1 fdb6 	bl	8002b6c <HAL_GetTick>
 8011000:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011002:	bf00      	nop
 8011004:	4b18      	ldr	r3, [pc, #96]	@ (8011068 <SD_write+0xa8>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d108      	bne.n	801101e <SD_write+0x5e>
 801100c:	f7f1 fdae 	bl	8002b6c <HAL_GetTick>
 8011010:	4602      	mov	r2, r0
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	f247 522f 	movw	r2, #29999	@ 0x752f
 801101a:	4293      	cmp	r3, r2
 801101c:	d9f2      	bls.n	8011004 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801101e:	4b12      	ldr	r3, [pc, #72]	@ (8011068 <SD_write+0xa8>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d102      	bne.n	801102c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011026:	2301      	movs	r3, #1
 8011028:	75fb      	strb	r3, [r7, #23]
 801102a:	e017      	b.n	801105c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801102c:	4b0e      	ldr	r3, [pc, #56]	@ (8011068 <SD_write+0xa8>)
 801102e:	2200      	movs	r2, #0
 8011030:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011032:	f7f1 fd9b 	bl	8002b6c <HAL_GetTick>
 8011036:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011038:	e007      	b.n	801104a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801103a:	f7ff feab 	bl	8010d94 <BSP_SD_GetCardState>
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	d102      	bne.n	801104a <SD_write+0x8a>
          {
            res = RES_OK;
 8011044:	2300      	movs	r3, #0
 8011046:	75fb      	strb	r3, [r7, #23]
            break;
 8011048:	e008      	b.n	801105c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801104a:	f7f1 fd8f 	bl	8002b6c <HAL_GetTick>
 801104e:	4602      	mov	r2, r0
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011058:	4293      	cmp	r3, r2
 801105a:	d9ee      	bls.n	801103a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801105c:	7dfb      	ldrb	r3, [r7, #23]
}
 801105e:	4618      	mov	r0, r3
 8011060:	3718      	adds	r7, #24
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	2400182c 	.word	0x2400182c

0801106c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b08c      	sub	sp, #48	@ 0x30
 8011070:	af00      	add	r7, sp, #0
 8011072:	4603      	mov	r3, r0
 8011074:	603a      	str	r2, [r7, #0]
 8011076:	71fb      	strb	r3, [r7, #7]
 8011078:	460b      	mov	r3, r1
 801107a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801107c:	2301      	movs	r3, #1
 801107e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011082:	4b25      	ldr	r3, [pc, #148]	@ (8011118 <SD_ioctl+0xac>)
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	b2db      	uxtb	r3, r3
 8011088:	f003 0301 	and.w	r3, r3, #1
 801108c:	2b00      	cmp	r3, #0
 801108e:	d001      	beq.n	8011094 <SD_ioctl+0x28>
 8011090:	2303      	movs	r3, #3
 8011092:	e03c      	b.n	801110e <SD_ioctl+0xa2>

  switch (cmd)
 8011094:	79bb      	ldrb	r3, [r7, #6]
 8011096:	2b03      	cmp	r3, #3
 8011098:	d834      	bhi.n	8011104 <SD_ioctl+0x98>
 801109a:	a201      	add	r2, pc, #4	@ (adr r2, 80110a0 <SD_ioctl+0x34>)
 801109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a0:	080110b1 	.word	0x080110b1
 80110a4:	080110b9 	.word	0x080110b9
 80110a8:	080110d1 	.word	0x080110d1
 80110ac:	080110eb 	.word	0x080110eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80110b0:	2300      	movs	r3, #0
 80110b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80110b6:	e028      	b.n	801110a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80110b8:	f107 0308 	add.w	r3, r7, #8
 80110bc:	4618      	mov	r0, r3
 80110be:	f7ff fe79 	bl	8010db4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80110c2:	6a3a      	ldr	r2, [r7, #32]
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110c8:	2300      	movs	r3, #0
 80110ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80110ce:	e01c      	b.n	801110a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110d0:	f107 0308 	add.w	r3, r7, #8
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7ff fe6d 	bl	8010db4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80110da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110dc:	b29a      	uxth	r2, r3
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80110e2:	2300      	movs	r3, #0
 80110e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80110e8:	e00f      	b.n	801110a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110ea:	f107 0308 	add.w	r3, r7, #8
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7ff fe60 	bl	8010db4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80110f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f6:	0a5a      	lsrs	r2, r3, #9
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110fc:	2300      	movs	r3, #0
 80110fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011102:	e002      	b.n	801110a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011104:	2304      	movs	r3, #4
 8011106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801110a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801110e:	4618      	mov	r0, r3
 8011110:	3730      	adds	r7, #48	@ 0x30
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	24000019 	.word	0x24000019

0801111c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801111c:	b480      	push	{r7}
 801111e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011120:	4b03      	ldr	r3, [pc, #12]	@ (8011130 <BSP_SD_WriteCpltCallback+0x14>)
 8011122:	2201      	movs	r2, #1
 8011124:	601a      	str	r2, [r3, #0]
}
 8011126:	bf00      	nop
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr
 8011130:	2400182c 	.word	0x2400182c

08011134 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011134:	b480      	push	{r7}
 8011136:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011138:	4b03      	ldr	r3, [pc, #12]	@ (8011148 <BSP_SD_ReadCpltCallback+0x14>)
 801113a:	2201      	movs	r2, #1
 801113c:	601a      	str	r2, [r3, #0]
}
 801113e:	bf00      	nop
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr
 8011148:	24001830 	.word	0x24001830

0801114c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	4603      	mov	r3, r0
 8011154:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011156:	79fb      	ldrb	r3, [r7, #7]
 8011158:	4a08      	ldr	r2, [pc, #32]	@ (801117c <disk_status+0x30>)
 801115a:	009b      	lsls	r3, r3, #2
 801115c:	4413      	add	r3, r2
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	79fa      	ldrb	r2, [r7, #7]
 8011164:	4905      	ldr	r1, [pc, #20]	@ (801117c <disk_status+0x30>)
 8011166:	440a      	add	r2, r1
 8011168:	7a12      	ldrb	r2, [r2, #8]
 801116a:	4610      	mov	r0, r2
 801116c:	4798      	blx	r3
 801116e:	4603      	mov	r3, r0
 8011170:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011172:	7bfb      	ldrb	r3, [r7, #15]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	24001a5c 	.word	0x24001a5c

08011180 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	4603      	mov	r3, r0
 8011188:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801118a:	2300      	movs	r3, #0
 801118c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801118e:	79fb      	ldrb	r3, [r7, #7]
 8011190:	4a0e      	ldr	r2, [pc, #56]	@ (80111cc <disk_initialize+0x4c>)
 8011192:	5cd3      	ldrb	r3, [r2, r3]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d114      	bne.n	80111c2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011198:	79fb      	ldrb	r3, [r7, #7]
 801119a:	4a0c      	ldr	r2, [pc, #48]	@ (80111cc <disk_initialize+0x4c>)
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	4413      	add	r3, r2
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	79fa      	ldrb	r2, [r7, #7]
 80111a6:	4909      	ldr	r1, [pc, #36]	@ (80111cc <disk_initialize+0x4c>)
 80111a8:	440a      	add	r2, r1
 80111aa:	7a12      	ldrb	r2, [r2, #8]
 80111ac:	4610      	mov	r0, r2
 80111ae:	4798      	blx	r3
 80111b0:	4603      	mov	r3, r0
 80111b2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80111b4:	7bfb      	ldrb	r3, [r7, #15]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d103      	bne.n	80111c2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80111ba:	79fb      	ldrb	r3, [r7, #7]
 80111bc:	4a03      	ldr	r2, [pc, #12]	@ (80111cc <disk_initialize+0x4c>)
 80111be:	2101      	movs	r1, #1
 80111c0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80111c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3710      	adds	r7, #16
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	24001a5c 	.word	0x24001a5c

080111d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80111d0:	b590      	push	{r4, r7, lr}
 80111d2:	b087      	sub	sp, #28
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60b9      	str	r1, [r7, #8]
 80111d8:	607a      	str	r2, [r7, #4]
 80111da:	603b      	str	r3, [r7, #0]
 80111dc:	4603      	mov	r3, r0
 80111de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80111e0:	7bfb      	ldrb	r3, [r7, #15]
 80111e2:	4a0a      	ldr	r2, [pc, #40]	@ (801120c <disk_read+0x3c>)
 80111e4:	009b      	lsls	r3, r3, #2
 80111e6:	4413      	add	r3, r2
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	689c      	ldr	r4, [r3, #8]
 80111ec:	7bfb      	ldrb	r3, [r7, #15]
 80111ee:	4a07      	ldr	r2, [pc, #28]	@ (801120c <disk_read+0x3c>)
 80111f0:	4413      	add	r3, r2
 80111f2:	7a18      	ldrb	r0, [r3, #8]
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	687a      	ldr	r2, [r7, #4]
 80111f8:	68b9      	ldr	r1, [r7, #8]
 80111fa:	47a0      	blx	r4
 80111fc:	4603      	mov	r3, r0
 80111fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8011200:	7dfb      	ldrb	r3, [r7, #23]
}
 8011202:	4618      	mov	r0, r3
 8011204:	371c      	adds	r7, #28
 8011206:	46bd      	mov	sp, r7
 8011208:	bd90      	pop	{r4, r7, pc}
 801120a:	bf00      	nop
 801120c:	24001a5c 	.word	0x24001a5c

08011210 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011210:	b590      	push	{r4, r7, lr}
 8011212:	b087      	sub	sp, #28
 8011214:	af00      	add	r7, sp, #0
 8011216:	60b9      	str	r1, [r7, #8]
 8011218:	607a      	str	r2, [r7, #4]
 801121a:	603b      	str	r3, [r7, #0]
 801121c:	4603      	mov	r3, r0
 801121e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011220:	7bfb      	ldrb	r3, [r7, #15]
 8011222:	4a0a      	ldr	r2, [pc, #40]	@ (801124c <disk_write+0x3c>)
 8011224:	009b      	lsls	r3, r3, #2
 8011226:	4413      	add	r3, r2
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	68dc      	ldr	r4, [r3, #12]
 801122c:	7bfb      	ldrb	r3, [r7, #15]
 801122e:	4a07      	ldr	r2, [pc, #28]	@ (801124c <disk_write+0x3c>)
 8011230:	4413      	add	r3, r2
 8011232:	7a18      	ldrb	r0, [r3, #8]
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	68b9      	ldr	r1, [r7, #8]
 801123a:	47a0      	blx	r4
 801123c:	4603      	mov	r3, r0
 801123e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011240:	7dfb      	ldrb	r3, [r7, #23]
}
 8011242:	4618      	mov	r0, r3
 8011244:	371c      	adds	r7, #28
 8011246:	46bd      	mov	sp, r7
 8011248:	bd90      	pop	{r4, r7, pc}
 801124a:	bf00      	nop
 801124c:	24001a5c 	.word	0x24001a5c

08011250 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b084      	sub	sp, #16
 8011254:	af00      	add	r7, sp, #0
 8011256:	4603      	mov	r3, r0
 8011258:	603a      	str	r2, [r7, #0]
 801125a:	71fb      	strb	r3, [r7, #7]
 801125c:	460b      	mov	r3, r1
 801125e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011260:	79fb      	ldrb	r3, [r7, #7]
 8011262:	4a09      	ldr	r2, [pc, #36]	@ (8011288 <disk_ioctl+0x38>)
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	4413      	add	r3, r2
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	691b      	ldr	r3, [r3, #16]
 801126c:	79fa      	ldrb	r2, [r7, #7]
 801126e:	4906      	ldr	r1, [pc, #24]	@ (8011288 <disk_ioctl+0x38>)
 8011270:	440a      	add	r2, r1
 8011272:	7a10      	ldrb	r0, [r2, #8]
 8011274:	79b9      	ldrb	r1, [r7, #6]
 8011276:	683a      	ldr	r2, [r7, #0]
 8011278:	4798      	blx	r3
 801127a:	4603      	mov	r3, r0
 801127c:	73fb      	strb	r3, [r7, #15]
  return res;
 801127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011280:	4618      	mov	r0, r3
 8011282:	3710      	adds	r7, #16
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	24001a5c 	.word	0x24001a5c

0801128c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801128c:	b480      	push	{r7}
 801128e:	b085      	sub	sp, #20
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	3301      	adds	r3, #1
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801129c:	89fb      	ldrh	r3, [r7, #14]
 801129e:	021b      	lsls	r3, r3, #8
 80112a0:	b21a      	sxth	r2, r3
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	b21b      	sxth	r3, r3
 80112a8:	4313      	orrs	r3, r2
 80112aa:	b21b      	sxth	r3, r3
 80112ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80112ae:	89fb      	ldrh	r3, [r7, #14]
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3714      	adds	r7, #20
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr

080112bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80112bc:	b480      	push	{r7}
 80112be:	b085      	sub	sp, #20
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	3303      	adds	r3, #3
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	021b      	lsls	r3, r3, #8
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	3202      	adds	r2, #2
 80112d4:	7812      	ldrb	r2, [r2, #0]
 80112d6:	4313      	orrs	r3, r2
 80112d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	021b      	lsls	r3, r3, #8
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	3201      	adds	r2, #1
 80112e2:	7812      	ldrb	r2, [r2, #0]
 80112e4:	4313      	orrs	r3, r2
 80112e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	021b      	lsls	r3, r3, #8
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	7812      	ldrb	r2, [r2, #0]
 80112f0:	4313      	orrs	r3, r2
 80112f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80112f4:	68fb      	ldr	r3, [r7, #12]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3714      	adds	r7, #20
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr

08011302 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011302:	b480      	push	{r7}
 8011304:	b083      	sub	sp, #12
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
 801130a:	460b      	mov	r3, r1
 801130c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	1c5a      	adds	r2, r3, #1
 8011312:	607a      	str	r2, [r7, #4]
 8011314:	887a      	ldrh	r2, [r7, #2]
 8011316:	b2d2      	uxtb	r2, r2
 8011318:	701a      	strb	r2, [r3, #0]
 801131a:	887b      	ldrh	r3, [r7, #2]
 801131c:	0a1b      	lsrs	r3, r3, #8
 801131e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	1c5a      	adds	r2, r3, #1
 8011324:	607a      	str	r2, [r7, #4]
 8011326:	887a      	ldrh	r2, [r7, #2]
 8011328:	b2d2      	uxtb	r2, r2
 801132a:	701a      	strb	r2, [r3, #0]
}
 801132c:	bf00      	nop
 801132e:	370c      	adds	r7, #12
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr

08011338 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	1c5a      	adds	r2, r3, #1
 8011346:	607a      	str	r2, [r7, #4]
 8011348:	683a      	ldr	r2, [r7, #0]
 801134a:	b2d2      	uxtb	r2, r2
 801134c:	701a      	strb	r2, [r3, #0]
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	0a1b      	lsrs	r3, r3, #8
 8011352:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	1c5a      	adds	r2, r3, #1
 8011358:	607a      	str	r2, [r7, #4]
 801135a:	683a      	ldr	r2, [r7, #0]
 801135c:	b2d2      	uxtb	r2, r2
 801135e:	701a      	strb	r2, [r3, #0]
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	0a1b      	lsrs	r3, r3, #8
 8011364:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	1c5a      	adds	r2, r3, #1
 801136a:	607a      	str	r2, [r7, #4]
 801136c:	683a      	ldr	r2, [r7, #0]
 801136e:	b2d2      	uxtb	r2, r2
 8011370:	701a      	strb	r2, [r3, #0]
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	0a1b      	lsrs	r3, r3, #8
 8011376:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	1c5a      	adds	r2, r3, #1
 801137c:	607a      	str	r2, [r7, #4]
 801137e:	683a      	ldr	r2, [r7, #0]
 8011380:	b2d2      	uxtb	r2, r2
 8011382:	701a      	strb	r2, [r3, #0]
}
 8011384:	bf00      	nop
 8011386:	370c      	adds	r7, #12
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011390:	b480      	push	{r7}
 8011392:	b087      	sub	sp, #28
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00d      	beq.n	80113c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80113aa:	693a      	ldr	r2, [r7, #16]
 80113ac:	1c53      	adds	r3, r2, #1
 80113ae:	613b      	str	r3, [r7, #16]
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	1c59      	adds	r1, r3, #1
 80113b4:	6179      	str	r1, [r7, #20]
 80113b6:	7812      	ldrb	r2, [r2, #0]
 80113b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	3b01      	subs	r3, #1
 80113be:	607b      	str	r3, [r7, #4]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d1f1      	bne.n	80113aa <mem_cpy+0x1a>
	}
}
 80113c6:	bf00      	nop
 80113c8:	371c      	adds	r7, #28
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr

080113d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80113d2:	b480      	push	{r7}
 80113d4:	b087      	sub	sp, #28
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	60f8      	str	r0, [r7, #12]
 80113da:	60b9      	str	r1, [r7, #8]
 80113dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	1c5a      	adds	r2, r3, #1
 80113e6:	617a      	str	r2, [r7, #20]
 80113e8:	68ba      	ldr	r2, [r7, #8]
 80113ea:	b2d2      	uxtb	r2, r2
 80113ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	607b      	str	r3, [r7, #4]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d1f3      	bne.n	80113e2 <mem_set+0x10>
}
 80113fa:	bf00      	nop
 80113fc:	bf00      	nop
 80113fe:	371c      	adds	r7, #28
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011408:	b480      	push	{r7}
 801140a:	b089      	sub	sp, #36	@ 0x24
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	61fb      	str	r3, [r7, #28]
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801141c:	2300      	movs	r3, #0
 801141e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	1c5a      	adds	r2, r3, #1
 8011424:	61fa      	str	r2, [r7, #28]
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	4619      	mov	r1, r3
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	1c5a      	adds	r2, r3, #1
 801142e:	61ba      	str	r2, [r7, #24]
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	1acb      	subs	r3, r1, r3
 8011434:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	3b01      	subs	r3, #1
 801143a:	607b      	str	r3, [r7, #4]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d002      	beq.n	8011448 <mem_cmp+0x40>
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d0eb      	beq.n	8011420 <mem_cmp+0x18>

	return r;
 8011448:	697b      	ldr	r3, [r7, #20]
}
 801144a:	4618      	mov	r0, r3
 801144c:	3724      	adds	r7, #36	@ 0x24
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr

08011456 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011456:	b480      	push	{r7}
 8011458:	b083      	sub	sp, #12
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
 801145e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011460:	e002      	b.n	8011468 <chk_chr+0x12>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	3301      	adds	r3, #1
 8011466:	607b      	str	r3, [r7, #4]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d005      	beq.n	801147c <chk_chr+0x26>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	461a      	mov	r2, r3
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	4293      	cmp	r3, r2
 801147a:	d1f2      	bne.n	8011462 <chk_chr+0xc>
	return *str;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	781b      	ldrb	r3, [r3, #0]
}
 8011480:	4618      	mov	r0, r3
 8011482:	370c      	adds	r7, #12
 8011484:	46bd      	mov	sp, r7
 8011486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148a:	4770      	bx	lr

0801148c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801148c:	b480      	push	{r7}
 801148e:	b085      	sub	sp, #20
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011496:	2300      	movs	r3, #0
 8011498:	60bb      	str	r3, [r7, #8]
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	60fb      	str	r3, [r7, #12]
 801149e:	e029      	b.n	80114f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80114a0:	4a27      	ldr	r2, [pc, #156]	@ (8011540 <chk_lock+0xb4>)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	011b      	lsls	r3, r3, #4
 80114a6:	4413      	add	r3, r2
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d01d      	beq.n	80114ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80114ae:	4a24      	ldr	r2, [pc, #144]	@ (8011540 <chk_lock+0xb4>)
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	011b      	lsls	r3, r3, #4
 80114b4:	4413      	add	r3, r2
 80114b6:	681a      	ldr	r2, [r3, #0]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d116      	bne.n	80114ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80114c0:	4a1f      	ldr	r2, [pc, #124]	@ (8011540 <chk_lock+0xb4>)
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	011b      	lsls	r3, r3, #4
 80114c6:	4413      	add	r3, r2
 80114c8:	3304      	adds	r3, #4
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d10c      	bne.n	80114ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80114d4:	4a1a      	ldr	r2, [pc, #104]	@ (8011540 <chk_lock+0xb4>)
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	011b      	lsls	r3, r3, #4
 80114da:	4413      	add	r3, r2
 80114dc:	3308      	adds	r3, #8
 80114de:	681a      	ldr	r2, [r3, #0]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d102      	bne.n	80114ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80114e8:	e007      	b.n	80114fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80114ea:	2301      	movs	r3, #1
 80114ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	3301      	adds	r3, #1
 80114f2:	60fb      	str	r3, [r7, #12]
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d9d2      	bls.n	80114a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	d109      	bne.n	8011514 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d102      	bne.n	801150c <chk_lock+0x80>
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	2b02      	cmp	r3, #2
 801150a:	d101      	bne.n	8011510 <chk_lock+0x84>
 801150c:	2300      	movs	r3, #0
 801150e:	e010      	b.n	8011532 <chk_lock+0xa6>
 8011510:	2312      	movs	r3, #18
 8011512:	e00e      	b.n	8011532 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d108      	bne.n	801152c <chk_lock+0xa0>
 801151a:	4a09      	ldr	r2, [pc, #36]	@ (8011540 <chk_lock+0xb4>)
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	011b      	lsls	r3, r3, #4
 8011520:	4413      	add	r3, r2
 8011522:	330c      	adds	r3, #12
 8011524:	881b      	ldrh	r3, [r3, #0]
 8011526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801152a:	d101      	bne.n	8011530 <chk_lock+0xa4>
 801152c:	2310      	movs	r3, #16
 801152e:	e000      	b.n	8011532 <chk_lock+0xa6>
 8011530:	2300      	movs	r3, #0
}
 8011532:	4618      	mov	r0, r3
 8011534:	3714      	adds	r7, #20
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr
 801153e:	bf00      	nop
 8011540:	2400183c 	.word	0x2400183c

08011544 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011544:	b480      	push	{r7}
 8011546:	b083      	sub	sp, #12
 8011548:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801154a:	2300      	movs	r3, #0
 801154c:	607b      	str	r3, [r7, #4]
 801154e:	e002      	b.n	8011556 <enq_lock+0x12>
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	3301      	adds	r3, #1
 8011554:	607b      	str	r3, [r7, #4]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2b01      	cmp	r3, #1
 801155a:	d806      	bhi.n	801156a <enq_lock+0x26>
 801155c:	4a09      	ldr	r2, [pc, #36]	@ (8011584 <enq_lock+0x40>)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	011b      	lsls	r3, r3, #4
 8011562:	4413      	add	r3, r2
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1f2      	bne.n	8011550 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2b02      	cmp	r3, #2
 801156e:	bf14      	ite	ne
 8011570:	2301      	movne	r3, #1
 8011572:	2300      	moveq	r3, #0
 8011574:	b2db      	uxtb	r3, r3
}
 8011576:	4618      	mov	r0, r3
 8011578:	370c      	adds	r7, #12
 801157a:	46bd      	mov	sp, r7
 801157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011580:	4770      	bx	lr
 8011582:	bf00      	nop
 8011584:	2400183c 	.word	0x2400183c

08011588 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011588:	b480      	push	{r7}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011592:	2300      	movs	r3, #0
 8011594:	60fb      	str	r3, [r7, #12]
 8011596:	e01f      	b.n	80115d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011598:	4a41      	ldr	r2, [pc, #260]	@ (80116a0 <inc_lock+0x118>)
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	011b      	lsls	r3, r3, #4
 801159e:	4413      	add	r3, r2
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d113      	bne.n	80115d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80115aa:	4a3d      	ldr	r2, [pc, #244]	@ (80116a0 <inc_lock+0x118>)
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	011b      	lsls	r3, r3, #4
 80115b0:	4413      	add	r3, r2
 80115b2:	3304      	adds	r3, #4
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d109      	bne.n	80115d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80115be:	4a38      	ldr	r2, [pc, #224]	@ (80116a0 <inc_lock+0x118>)
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	011b      	lsls	r3, r3, #4
 80115c4:	4413      	add	r3, r2
 80115c6:	3308      	adds	r3, #8
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d006      	beq.n	80115e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	3301      	adds	r3, #1
 80115d6:	60fb      	str	r3, [r7, #12]
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d9dc      	bls.n	8011598 <inc_lock+0x10>
 80115de:	e000      	b.n	80115e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80115e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2b02      	cmp	r3, #2
 80115e6:	d132      	bne.n	801164e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80115e8:	2300      	movs	r3, #0
 80115ea:	60fb      	str	r3, [r7, #12]
 80115ec:	e002      	b.n	80115f4 <inc_lock+0x6c>
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	3301      	adds	r3, #1
 80115f2:	60fb      	str	r3, [r7, #12]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d806      	bhi.n	8011608 <inc_lock+0x80>
 80115fa:	4a29      	ldr	r2, [pc, #164]	@ (80116a0 <inc_lock+0x118>)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	011b      	lsls	r3, r3, #4
 8011600:	4413      	add	r3, r2
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d1f2      	bne.n	80115ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2b02      	cmp	r3, #2
 801160c:	d101      	bne.n	8011612 <inc_lock+0x8a>
 801160e:	2300      	movs	r3, #0
 8011610:	e040      	b.n	8011694 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681a      	ldr	r2, [r3, #0]
 8011616:	4922      	ldr	r1, [pc, #136]	@ (80116a0 <inc_lock+0x118>)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	011b      	lsls	r3, r3, #4
 801161c:	440b      	add	r3, r1
 801161e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	689a      	ldr	r2, [r3, #8]
 8011624:	491e      	ldr	r1, [pc, #120]	@ (80116a0 <inc_lock+0x118>)
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	011b      	lsls	r3, r3, #4
 801162a:	440b      	add	r3, r1
 801162c:	3304      	adds	r3, #4
 801162e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	695a      	ldr	r2, [r3, #20]
 8011634:	491a      	ldr	r1, [pc, #104]	@ (80116a0 <inc_lock+0x118>)
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	011b      	lsls	r3, r3, #4
 801163a:	440b      	add	r3, r1
 801163c:	3308      	adds	r3, #8
 801163e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011640:	4a17      	ldr	r2, [pc, #92]	@ (80116a0 <inc_lock+0x118>)
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	011b      	lsls	r3, r3, #4
 8011646:	4413      	add	r3, r2
 8011648:	330c      	adds	r3, #12
 801164a:	2200      	movs	r2, #0
 801164c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d009      	beq.n	8011668 <inc_lock+0xe0>
 8011654:	4a12      	ldr	r2, [pc, #72]	@ (80116a0 <inc_lock+0x118>)
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	011b      	lsls	r3, r3, #4
 801165a:	4413      	add	r3, r2
 801165c:	330c      	adds	r3, #12
 801165e:	881b      	ldrh	r3, [r3, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d001      	beq.n	8011668 <inc_lock+0xe0>
 8011664:	2300      	movs	r3, #0
 8011666:	e015      	b.n	8011694 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d108      	bne.n	8011680 <inc_lock+0xf8>
 801166e:	4a0c      	ldr	r2, [pc, #48]	@ (80116a0 <inc_lock+0x118>)
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	011b      	lsls	r3, r3, #4
 8011674:	4413      	add	r3, r2
 8011676:	330c      	adds	r3, #12
 8011678:	881b      	ldrh	r3, [r3, #0]
 801167a:	3301      	adds	r3, #1
 801167c:	b29a      	uxth	r2, r3
 801167e:	e001      	b.n	8011684 <inc_lock+0xfc>
 8011680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011684:	4906      	ldr	r1, [pc, #24]	@ (80116a0 <inc_lock+0x118>)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	011b      	lsls	r3, r3, #4
 801168a:	440b      	add	r3, r1
 801168c:	330c      	adds	r3, #12
 801168e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	3301      	adds	r3, #1
}
 8011694:	4618      	mov	r0, r3
 8011696:	3714      	adds	r7, #20
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr
 80116a0:	2400183c 	.word	0x2400183c

080116a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b085      	sub	sp, #20
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	3b01      	subs	r3, #1
 80116b0:	607b      	str	r3, [r7, #4]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	d825      	bhi.n	8011704 <dec_lock+0x60>
		n = Files[i].ctr;
 80116b8:	4a17      	ldr	r2, [pc, #92]	@ (8011718 <dec_lock+0x74>)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	011b      	lsls	r3, r3, #4
 80116be:	4413      	add	r3, r2
 80116c0:	330c      	adds	r3, #12
 80116c2:	881b      	ldrh	r3, [r3, #0]
 80116c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80116c6:	89fb      	ldrh	r3, [r7, #14]
 80116c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80116cc:	d101      	bne.n	80116d2 <dec_lock+0x2e>
 80116ce:	2300      	movs	r3, #0
 80116d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80116d2:	89fb      	ldrh	r3, [r7, #14]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d002      	beq.n	80116de <dec_lock+0x3a>
 80116d8:	89fb      	ldrh	r3, [r7, #14]
 80116da:	3b01      	subs	r3, #1
 80116dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80116de:	4a0e      	ldr	r2, [pc, #56]	@ (8011718 <dec_lock+0x74>)
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	011b      	lsls	r3, r3, #4
 80116e4:	4413      	add	r3, r2
 80116e6:	330c      	adds	r3, #12
 80116e8:	89fa      	ldrh	r2, [r7, #14]
 80116ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80116ec:	89fb      	ldrh	r3, [r7, #14]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d105      	bne.n	80116fe <dec_lock+0x5a>
 80116f2:	4a09      	ldr	r2, [pc, #36]	@ (8011718 <dec_lock+0x74>)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	011b      	lsls	r3, r3, #4
 80116f8:	4413      	add	r3, r2
 80116fa:	2200      	movs	r2, #0
 80116fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80116fe:	2300      	movs	r3, #0
 8011700:	737b      	strb	r3, [r7, #13]
 8011702:	e001      	b.n	8011708 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011704:	2302      	movs	r3, #2
 8011706:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011708:	7b7b      	ldrb	r3, [r7, #13]
}
 801170a:	4618      	mov	r0, r3
 801170c:	3714      	adds	r7, #20
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr
 8011716:	bf00      	nop
 8011718:	2400183c 	.word	0x2400183c

0801171c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011724:	2300      	movs	r3, #0
 8011726:	60fb      	str	r3, [r7, #12]
 8011728:	e010      	b.n	801174c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801172a:	4a0d      	ldr	r2, [pc, #52]	@ (8011760 <clear_lock+0x44>)
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	011b      	lsls	r3, r3, #4
 8011730:	4413      	add	r3, r2
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	687a      	ldr	r2, [r7, #4]
 8011736:	429a      	cmp	r2, r3
 8011738:	d105      	bne.n	8011746 <clear_lock+0x2a>
 801173a:	4a09      	ldr	r2, [pc, #36]	@ (8011760 <clear_lock+0x44>)
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	011b      	lsls	r3, r3, #4
 8011740:	4413      	add	r3, r2
 8011742:	2200      	movs	r2, #0
 8011744:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	3301      	adds	r3, #1
 801174a:	60fb      	str	r3, [r7, #12]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2b01      	cmp	r3, #1
 8011750:	d9eb      	bls.n	801172a <clear_lock+0xe>
	}
}
 8011752:	bf00      	nop
 8011754:	bf00      	nop
 8011756:	3714      	adds	r7, #20
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr
 8011760:	2400183c 	.word	0x2400183c

08011764 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b086      	sub	sp, #24
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801176c:	2300      	movs	r3, #0
 801176e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	78db      	ldrb	r3, [r3, #3]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d034      	beq.n	80117e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801177c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	7858      	ldrb	r0, [r3, #1]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011788:	2301      	movs	r3, #1
 801178a:	697a      	ldr	r2, [r7, #20]
 801178c:	f7ff fd40 	bl	8011210 <disk_write>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d002      	beq.n	801179c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011796:	2301      	movs	r3, #1
 8011798:	73fb      	strb	r3, [r7, #15]
 801179a:	e022      	b.n	80117e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2200      	movs	r2, #0
 80117a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117a6:	697a      	ldr	r2, [r7, #20]
 80117a8:	1ad2      	subs	r2, r2, r3
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6a1b      	ldr	r3, [r3, #32]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d217      	bcs.n	80117e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	789b      	ldrb	r3, [r3, #2]
 80117b6:	613b      	str	r3, [r7, #16]
 80117b8:	e010      	b.n	80117dc <sync_window+0x78>
					wsect += fs->fsize;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6a1b      	ldr	r3, [r3, #32]
 80117be:	697a      	ldr	r2, [r7, #20]
 80117c0:	4413      	add	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	7858      	ldrb	r0, [r3, #1]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80117ce:	2301      	movs	r3, #1
 80117d0:	697a      	ldr	r2, [r7, #20]
 80117d2:	f7ff fd1d 	bl	8011210 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	3b01      	subs	r3, #1
 80117da:	613b      	str	r3, [r7, #16]
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d8eb      	bhi.n	80117ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80117e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3718      	adds	r7, #24
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}

080117ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80117f6:	2300      	movs	r3, #0
 80117f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117fe:	683a      	ldr	r2, [r7, #0]
 8011800:	429a      	cmp	r2, r3
 8011802:	d01b      	beq.n	801183c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f7ff ffad 	bl	8011764 <sync_window>
 801180a:	4603      	mov	r3, r0
 801180c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801180e:	7bfb      	ldrb	r3, [r7, #15]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d113      	bne.n	801183c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	7858      	ldrb	r0, [r3, #1]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801181e:	2301      	movs	r3, #1
 8011820:	683a      	ldr	r2, [r7, #0]
 8011822:	f7ff fcd5 	bl	80111d0 <disk_read>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d004      	beq.n	8011836 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801182c:	f04f 33ff 	mov.w	r3, #4294967295
 8011830:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011832:	2301      	movs	r3, #1
 8011834:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	683a      	ldr	r2, [r7, #0]
 801183a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801183c:	7bfb      	ldrb	r3, [r7, #15]
}
 801183e:	4618      	mov	r0, r3
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
	...

08011848 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff ff87 	bl	8011764 <sync_window>
 8011856:	4603      	mov	r3, r0
 8011858:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801185a:	7bfb      	ldrb	r3, [r7, #15]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d159      	bne.n	8011914 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	2b03      	cmp	r3, #3
 8011866:	d149      	bne.n	80118fc <sync_fs+0xb4>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	791b      	ldrb	r3, [r3, #4]
 801186c:	2b01      	cmp	r3, #1
 801186e:	d145      	bne.n	80118fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	899b      	ldrh	r3, [r3, #12]
 801187a:	461a      	mov	r2, r3
 801187c:	2100      	movs	r1, #0
 801187e:	f7ff fda8 	bl	80113d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	3338      	adds	r3, #56	@ 0x38
 8011886:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801188a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801188e:	4618      	mov	r0, r3
 8011890:	f7ff fd37 	bl	8011302 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	3338      	adds	r3, #56	@ 0x38
 8011898:	4921      	ldr	r1, [pc, #132]	@ (8011920 <sync_fs+0xd8>)
 801189a:	4618      	mov	r0, r3
 801189c:	f7ff fd4c 	bl	8011338 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	3338      	adds	r3, #56	@ 0x38
 80118a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80118a8:	491e      	ldr	r1, [pc, #120]	@ (8011924 <sync_fs+0xdc>)
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7ff fd44 	bl	8011338 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	3338      	adds	r3, #56	@ 0x38
 80118b4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	699b      	ldr	r3, [r3, #24]
 80118bc:	4619      	mov	r1, r3
 80118be:	4610      	mov	r0, r2
 80118c0:	f7ff fd3a 	bl	8011338 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	3338      	adds	r3, #56	@ 0x38
 80118c8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	695b      	ldr	r3, [r3, #20]
 80118d0:	4619      	mov	r1, r3
 80118d2:	4610      	mov	r0, r2
 80118d4:	f7ff fd30 	bl	8011338 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118dc:	1c5a      	adds	r2, r3, #1
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	7858      	ldrb	r0, [r3, #1]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80118f0:	2301      	movs	r3, #1
 80118f2:	f7ff fc8d 	bl	8011210 <disk_write>
			fs->fsi_flag = 0;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	785b      	ldrb	r3, [r3, #1]
 8011900:	2200      	movs	r2, #0
 8011902:	2100      	movs	r1, #0
 8011904:	4618      	mov	r0, r3
 8011906:	f7ff fca3 	bl	8011250 <disk_ioctl>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d001      	beq.n	8011914 <sync_fs+0xcc>
 8011910:	2301      	movs	r3, #1
 8011912:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011914:	7bfb      	ldrb	r3, [r7, #15]
}
 8011916:	4618      	mov	r0, r3
 8011918:	3710      	adds	r7, #16
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	41615252 	.word	0x41615252
 8011924:	61417272 	.word	0x61417272

08011928 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	3b02      	subs	r3, #2
 8011936:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	69db      	ldr	r3, [r3, #28]
 801193c:	3b02      	subs	r3, #2
 801193e:	683a      	ldr	r2, [r7, #0]
 8011940:	429a      	cmp	r2, r3
 8011942:	d301      	bcc.n	8011948 <clust2sect+0x20>
 8011944:	2300      	movs	r3, #0
 8011946:	e008      	b.n	801195a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	895b      	ldrh	r3, [r3, #10]
 801194c:	461a      	mov	r2, r3
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	fb03 f202 	mul.w	r2, r3, r2
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011958:	4413      	add	r3, r2
}
 801195a:	4618      	mov	r0, r3
 801195c:	370c      	adds	r7, #12
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr

08011966 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011966:	b580      	push	{r7, lr}
 8011968:	b086      	sub	sp, #24
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
 801196e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	2b01      	cmp	r3, #1
 801197a:	d904      	bls.n	8011986 <get_fat+0x20>
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	69db      	ldr	r3, [r3, #28]
 8011980:	683a      	ldr	r2, [r7, #0]
 8011982:	429a      	cmp	r2, r3
 8011984:	d302      	bcc.n	801198c <get_fat+0x26>
		val = 1;	/* Internal error */
 8011986:	2301      	movs	r3, #1
 8011988:	617b      	str	r3, [r7, #20]
 801198a:	e0ba      	b.n	8011b02 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801198c:	f04f 33ff 	mov.w	r3, #4294967295
 8011990:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	2b03      	cmp	r3, #3
 8011998:	f000 8082 	beq.w	8011aa0 <get_fat+0x13a>
 801199c:	2b03      	cmp	r3, #3
 801199e:	f300 80a6 	bgt.w	8011aee <get_fat+0x188>
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d002      	beq.n	80119ac <get_fat+0x46>
 80119a6:	2b02      	cmp	r3, #2
 80119a8:	d055      	beq.n	8011a56 <get_fat+0xf0>
 80119aa:	e0a0      	b.n	8011aee <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	60fb      	str	r3, [r7, #12]
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	085b      	lsrs	r3, r3, #1
 80119b4:	68fa      	ldr	r2, [r7, #12]
 80119b6:	4413      	add	r3, r2
 80119b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	899b      	ldrh	r3, [r3, #12]
 80119c2:	4619      	mov	r1, r3
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80119ca:	4413      	add	r3, r2
 80119cc:	4619      	mov	r1, r3
 80119ce:	6938      	ldr	r0, [r7, #16]
 80119d0:	f7ff ff0c 	bl	80117ec <move_window>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	f040 808c 	bne.w	8011af4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	1c5a      	adds	r2, r3, #1
 80119e0:	60fa      	str	r2, [r7, #12]
 80119e2:	693a      	ldr	r2, [r7, #16]
 80119e4:	8992      	ldrh	r2, [r2, #12]
 80119e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80119ea:	fb01 f202 	mul.w	r2, r1, r2
 80119ee:	1a9b      	subs	r3, r3, r2
 80119f0:	693a      	ldr	r2, [r7, #16]
 80119f2:	4413      	add	r3, r2
 80119f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80119f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	899b      	ldrh	r3, [r3, #12]
 8011a02:	4619      	mov	r1, r3
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a0a:	4413      	add	r3, r2
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	6938      	ldr	r0, [r7, #16]
 8011a10:	f7ff feec 	bl	80117ec <move_window>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d16e      	bne.n	8011af8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	899b      	ldrh	r3, [r3, #12]
 8011a1e:	461a      	mov	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a26:	fb01 f202 	mul.w	r2, r1, r2
 8011a2a:	1a9b      	subs	r3, r3, r2
 8011a2c:	693a      	ldr	r2, [r7, #16]
 8011a2e:	4413      	add	r3, r2
 8011a30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011a34:	021b      	lsls	r3, r3, #8
 8011a36:	68ba      	ldr	r2, [r7, #8]
 8011a38:	4313      	orrs	r3, r2
 8011a3a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	f003 0301 	and.w	r3, r3, #1
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d002      	beq.n	8011a4c <get_fat+0xe6>
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	091b      	lsrs	r3, r3, #4
 8011a4a:	e002      	b.n	8011a52 <get_fat+0xec>
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011a52:	617b      	str	r3, [r7, #20]
			break;
 8011a54:	e055      	b.n	8011b02 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	899b      	ldrh	r3, [r3, #12]
 8011a5e:	085b      	lsrs	r3, r3, #1
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	4619      	mov	r1, r3
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a6a:	4413      	add	r3, r2
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	6938      	ldr	r0, [r7, #16]
 8011a70:	f7ff febc 	bl	80117ec <move_window>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d140      	bne.n	8011afc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	005b      	lsls	r3, r3, #1
 8011a84:	693a      	ldr	r2, [r7, #16]
 8011a86:	8992      	ldrh	r2, [r2, #12]
 8011a88:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a8c:	fb00 f202 	mul.w	r2, r0, r2
 8011a90:	1a9b      	subs	r3, r3, r2
 8011a92:	440b      	add	r3, r1
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff fbf9 	bl	801128c <ld_word>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	617b      	str	r3, [r7, #20]
			break;
 8011a9e:	e030      	b.n	8011b02 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	899b      	ldrh	r3, [r3, #12]
 8011aa8:	089b      	lsrs	r3, r3, #2
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	4619      	mov	r1, r3
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ab4:	4413      	add	r3, r2
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	6938      	ldr	r0, [r7, #16]
 8011aba:	f7ff fe97 	bl	80117ec <move_window>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d11d      	bne.n	8011b00 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	693a      	ldr	r2, [r7, #16]
 8011ad0:	8992      	ldrh	r2, [r2, #12]
 8011ad2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ad6:	fb00 f202 	mul.w	r2, r0, r2
 8011ada:	1a9b      	subs	r3, r3, r2
 8011adc:	440b      	add	r3, r1
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7ff fbec 	bl	80112bc <ld_dword>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011aea:	617b      	str	r3, [r7, #20]
			break;
 8011aec:	e009      	b.n	8011b02 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011aee:	2301      	movs	r3, #1
 8011af0:	617b      	str	r3, [r7, #20]
 8011af2:	e006      	b.n	8011b02 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011af4:	bf00      	nop
 8011af6:	e004      	b.n	8011b02 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011af8:	bf00      	nop
 8011afa:	e002      	b.n	8011b02 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011afc:	bf00      	nop
 8011afe:	e000      	b.n	8011b02 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011b00:	bf00      	nop
		}
	}

	return val;
 8011b02:	697b      	ldr	r3, [r7, #20]
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3718      	adds	r7, #24
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011b0c:	b590      	push	{r4, r7, lr}
 8011b0e:	b089      	sub	sp, #36	@ 0x24
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011b18:	2302      	movs	r3, #2
 8011b1a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	f240 8109 	bls.w	8011d36 <put_fat+0x22a>
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	69db      	ldr	r3, [r3, #28]
 8011b28:	68ba      	ldr	r2, [r7, #8]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	f080 8103 	bcs.w	8011d36 <put_fat+0x22a>
		switch (fs->fs_type) {
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	2b03      	cmp	r3, #3
 8011b36:	f000 80b6 	beq.w	8011ca6 <put_fat+0x19a>
 8011b3a:	2b03      	cmp	r3, #3
 8011b3c:	f300 80fb 	bgt.w	8011d36 <put_fat+0x22a>
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d003      	beq.n	8011b4c <put_fat+0x40>
 8011b44:	2b02      	cmp	r3, #2
 8011b46:	f000 8083 	beq.w	8011c50 <put_fat+0x144>
 8011b4a:	e0f4      	b.n	8011d36 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	61bb      	str	r3, [r7, #24]
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	085b      	lsrs	r3, r3, #1
 8011b54:	69ba      	ldr	r2, [r7, #24]
 8011b56:	4413      	add	r3, r2
 8011b58:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	899b      	ldrh	r3, [r3, #12]
 8011b62:	4619      	mov	r1, r3
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b6a:	4413      	add	r3, r2
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	68f8      	ldr	r0, [r7, #12]
 8011b70:	f7ff fe3c 	bl	80117ec <move_window>
 8011b74:	4603      	mov	r3, r0
 8011b76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011b78:	7ffb      	ldrb	r3, [r7, #31]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	f040 80d4 	bne.w	8011d28 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	1c5a      	adds	r2, r3, #1
 8011b8a:	61ba      	str	r2, [r7, #24]
 8011b8c:	68fa      	ldr	r2, [r7, #12]
 8011b8e:	8992      	ldrh	r2, [r2, #12]
 8011b90:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b94:	fb00 f202 	mul.w	r2, r0, r2
 8011b98:	1a9b      	subs	r3, r3, r2
 8011b9a:	440b      	add	r3, r1
 8011b9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	f003 0301 	and.w	r3, r3, #1
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00d      	beq.n	8011bc4 <put_fat+0xb8>
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	b25b      	sxtb	r3, r3
 8011bae:	f003 030f 	and.w	r3, r3, #15
 8011bb2:	b25a      	sxtb	r2, r3
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	b2db      	uxtb	r3, r3
 8011bb8:	011b      	lsls	r3, r3, #4
 8011bba:	b25b      	sxtb	r3, r3
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	b25b      	sxtb	r3, r3
 8011bc0:	b2db      	uxtb	r3, r3
 8011bc2:	e001      	b.n	8011bc8 <put_fat+0xbc>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	697a      	ldr	r2, [r7, #20]
 8011bca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2201      	movs	r2, #1
 8011bd0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	899b      	ldrh	r3, [r3, #12]
 8011bda:	4619      	mov	r1, r3
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8011be2:	4413      	add	r3, r2
 8011be4:	4619      	mov	r1, r3
 8011be6:	68f8      	ldr	r0, [r7, #12]
 8011be8:	f7ff fe00 	bl	80117ec <move_window>
 8011bec:	4603      	mov	r3, r0
 8011bee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011bf0:	7ffb      	ldrb	r3, [r7, #31]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f040 809a 	bne.w	8011d2c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	899b      	ldrh	r3, [r3, #12]
 8011c02:	461a      	mov	r2, r3
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c0a:	fb00 f202 	mul.w	r2, r0, r2
 8011c0e:	1a9b      	subs	r3, r3, r2
 8011c10:	440b      	add	r3, r1
 8011c12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	f003 0301 	and.w	r3, r3, #1
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d003      	beq.n	8011c26 <put_fat+0x11a>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	091b      	lsrs	r3, r3, #4
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	e00e      	b.n	8011c44 <put_fat+0x138>
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	b25b      	sxtb	r3, r3
 8011c2c:	f023 030f 	bic.w	r3, r3, #15
 8011c30:	b25a      	sxtb	r2, r3
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	0a1b      	lsrs	r3, r3, #8
 8011c36:	b25b      	sxtb	r3, r3
 8011c38:	f003 030f 	and.w	r3, r3, #15
 8011c3c:	b25b      	sxtb	r3, r3
 8011c3e:	4313      	orrs	r3, r2
 8011c40:	b25b      	sxtb	r3, r3
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	697a      	ldr	r2, [r7, #20]
 8011c46:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	70da      	strb	r2, [r3, #3]
			break;
 8011c4e:	e072      	b.n	8011d36 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	899b      	ldrh	r3, [r3, #12]
 8011c58:	085b      	lsrs	r3, r3, #1
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c64:	4413      	add	r3, r2
 8011c66:	4619      	mov	r1, r3
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f7ff fdbf 	bl	80117ec <move_window>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c72:	7ffb      	ldrb	r3, [r7, #31]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d15b      	bne.n	8011d30 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	68fa      	ldr	r2, [r7, #12]
 8011c84:	8992      	ldrh	r2, [r2, #12]
 8011c86:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c8a:	fb00 f202 	mul.w	r2, r0, r2
 8011c8e:	1a9b      	subs	r3, r3, r2
 8011c90:	440b      	add	r3, r1
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	b292      	uxth	r2, r2
 8011c96:	4611      	mov	r1, r2
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7ff fb32 	bl	8011302 <st_word>
			fs->wflag = 1;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	2201      	movs	r2, #1
 8011ca2:	70da      	strb	r2, [r3, #3]
			break;
 8011ca4:	e047      	b.n	8011d36 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	899b      	ldrh	r3, [r3, #12]
 8011cae:	089b      	lsrs	r3, r3, #2
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cba:	4413      	add	r3, r2
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	f7ff fd94 	bl	80117ec <move_window>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011cc8:	7ffb      	ldrb	r3, [r7, #31]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d132      	bne.n	8011d34 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	68fa      	ldr	r2, [r7, #12]
 8011ce0:	8992      	ldrh	r2, [r2, #12]
 8011ce2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ce6:	fb00 f202 	mul.w	r2, r0, r2
 8011cea:	1a9b      	subs	r3, r3, r2
 8011cec:	440b      	add	r3, r1
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7ff fae4 	bl	80112bc <ld_dword>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011cfa:	4323      	orrs	r3, r4
 8011cfc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	009b      	lsls	r3, r3, #2
 8011d08:	68fa      	ldr	r2, [r7, #12]
 8011d0a:	8992      	ldrh	r2, [r2, #12]
 8011d0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d10:	fb00 f202 	mul.w	r2, r0, r2
 8011d14:	1a9b      	subs	r3, r3, r2
 8011d16:	440b      	add	r3, r1
 8011d18:	6879      	ldr	r1, [r7, #4]
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7ff fb0c 	bl	8011338 <st_dword>
			fs->wflag = 1;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2201      	movs	r2, #1
 8011d24:	70da      	strb	r2, [r3, #3]
			break;
 8011d26:	e006      	b.n	8011d36 <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d28:	bf00      	nop
 8011d2a:	e004      	b.n	8011d36 <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d2c:	bf00      	nop
 8011d2e:	e002      	b.n	8011d36 <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d30:	bf00      	nop
 8011d32:	e000      	b.n	8011d36 <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d34:	bf00      	nop
		}
	}
	return res;
 8011d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3724      	adds	r7, #36	@ 0x24
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd90      	pop	{r4, r7, pc}

08011d40 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b088      	sub	sp, #32
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	2b01      	cmp	r3, #1
 8011d5a:	d904      	bls.n	8011d66 <remove_chain+0x26>
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	69db      	ldr	r3, [r3, #28]
 8011d60:	68ba      	ldr	r2, [r7, #8]
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d301      	bcc.n	8011d6a <remove_chain+0x2a>
 8011d66:	2302      	movs	r3, #2
 8011d68:	e04b      	b.n	8011e02 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d00c      	beq.n	8011d8a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011d70:	f04f 32ff 	mov.w	r2, #4294967295
 8011d74:	6879      	ldr	r1, [r7, #4]
 8011d76:	69b8      	ldr	r0, [r7, #24]
 8011d78:	f7ff fec8 	bl	8011b0c <put_fat>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011d80:	7ffb      	ldrb	r3, [r7, #31]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d001      	beq.n	8011d8a <remove_chain+0x4a>
 8011d86:	7ffb      	ldrb	r3, [r7, #31]
 8011d88:	e03b      	b.n	8011e02 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011d8a:	68b9      	ldr	r1, [r7, #8]
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f7ff fdea 	bl	8011966 <get_fat>
 8011d92:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d031      	beq.n	8011dfe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d101      	bne.n	8011da4 <remove_chain+0x64>
 8011da0:	2302      	movs	r3, #2
 8011da2:	e02e      	b.n	8011e02 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011daa:	d101      	bne.n	8011db0 <remove_chain+0x70>
 8011dac:	2301      	movs	r3, #1
 8011dae:	e028      	b.n	8011e02 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011db0:	2200      	movs	r2, #0
 8011db2:	68b9      	ldr	r1, [r7, #8]
 8011db4:	69b8      	ldr	r0, [r7, #24]
 8011db6:	f7ff fea9 	bl	8011b0c <put_fat>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011dbe:	7ffb      	ldrb	r3, [r7, #31]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d001      	beq.n	8011dc8 <remove_chain+0x88>
 8011dc4:	7ffb      	ldrb	r3, [r7, #31]
 8011dc6:	e01c      	b.n	8011e02 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	699a      	ldr	r2, [r3, #24]
 8011dcc:	69bb      	ldr	r3, [r7, #24]
 8011dce:	69db      	ldr	r3, [r3, #28]
 8011dd0:	3b02      	subs	r3, #2
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d20b      	bcs.n	8011dee <remove_chain+0xae>
			fs->free_clst++;
 8011dd6:	69bb      	ldr	r3, [r7, #24]
 8011dd8:	699b      	ldr	r3, [r3, #24]
 8011dda:	1c5a      	adds	r2, r3, #1
 8011ddc:	69bb      	ldr	r3, [r7, #24]
 8011dde:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	791b      	ldrb	r3, [r3, #4]
 8011de4:	f043 0301 	orr.w	r3, r3, #1
 8011de8:	b2da      	uxtb	r2, r3
 8011dea:	69bb      	ldr	r3, [r7, #24]
 8011dec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	69db      	ldr	r3, [r3, #28]
 8011df6:	68ba      	ldr	r2, [r7, #8]
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d3c6      	bcc.n	8011d8a <remove_chain+0x4a>
 8011dfc:	e000      	b.n	8011e00 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011dfe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3720      	adds	r7, #32
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b088      	sub	sp, #32
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
 8011e12:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d10d      	bne.n	8011e3c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	695b      	ldr	r3, [r3, #20]
 8011e24:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d004      	beq.n	8011e36 <create_chain+0x2c>
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	69db      	ldr	r3, [r3, #28]
 8011e30:	69ba      	ldr	r2, [r7, #24]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d31b      	bcc.n	8011e6e <create_chain+0x64>
 8011e36:	2301      	movs	r3, #1
 8011e38:	61bb      	str	r3, [r7, #24]
 8011e3a:	e018      	b.n	8011e6e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011e3c:	6839      	ldr	r1, [r7, #0]
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f7ff fd91 	bl	8011966 <get_fat>
 8011e44:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2b01      	cmp	r3, #1
 8011e4a:	d801      	bhi.n	8011e50 <create_chain+0x46>
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e070      	b.n	8011f32 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e56:	d101      	bne.n	8011e5c <create_chain+0x52>
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	e06a      	b.n	8011f32 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	69db      	ldr	r3, [r3, #28]
 8011e60:	68fa      	ldr	r2, [r7, #12]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d201      	bcs.n	8011e6a <create_chain+0x60>
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	e063      	b.n	8011f32 <create_chain+0x128>
		scl = clst;
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011e6e:	69bb      	ldr	r3, [r7, #24]
 8011e70:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	3301      	adds	r3, #1
 8011e76:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	69db      	ldr	r3, [r3, #28]
 8011e7c:	69fa      	ldr	r2, [r7, #28]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d307      	bcc.n	8011e92 <create_chain+0x88>
				ncl = 2;
 8011e82:	2302      	movs	r3, #2
 8011e84:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011e86:	69fa      	ldr	r2, [r7, #28]
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d901      	bls.n	8011e92 <create_chain+0x88>
 8011e8e:	2300      	movs	r3, #0
 8011e90:	e04f      	b.n	8011f32 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011e92:	69f9      	ldr	r1, [r7, #28]
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f7ff fd66 	bl	8011966 <get_fat>
 8011e9a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d00e      	beq.n	8011ec0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d003      	beq.n	8011eb0 <create_chain+0xa6>
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eae:	d101      	bne.n	8011eb4 <create_chain+0xaa>
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	e03e      	b.n	8011f32 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011eb4:	69fa      	ldr	r2, [r7, #28]
 8011eb6:	69bb      	ldr	r3, [r7, #24]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d1da      	bne.n	8011e72 <create_chain+0x68>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	e038      	b.n	8011f32 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011ec0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ec6:	69f9      	ldr	r1, [r7, #28]
 8011ec8:	6938      	ldr	r0, [r7, #16]
 8011eca:	f7ff fe1f 	bl	8011b0c <put_fat>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011ed2:	7dfb      	ldrb	r3, [r7, #23]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d109      	bne.n	8011eec <create_chain+0xe2>
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d006      	beq.n	8011eec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011ede:	69fa      	ldr	r2, [r7, #28]
 8011ee0:	6839      	ldr	r1, [r7, #0]
 8011ee2:	6938      	ldr	r0, [r7, #16]
 8011ee4:	f7ff fe12 	bl	8011b0c <put_fat>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011eec:	7dfb      	ldrb	r3, [r7, #23]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d116      	bne.n	8011f20 <create_chain+0x116>
		fs->last_clst = ncl;
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	69fa      	ldr	r2, [r7, #28]
 8011ef6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	699a      	ldr	r2, [r3, #24]
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	69db      	ldr	r3, [r3, #28]
 8011f00:	3b02      	subs	r3, #2
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d804      	bhi.n	8011f10 <create_chain+0x106>
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	699b      	ldr	r3, [r3, #24]
 8011f0a:	1e5a      	subs	r2, r3, #1
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	791b      	ldrb	r3, [r3, #4]
 8011f14:	f043 0301 	orr.w	r3, r3, #1
 8011f18:	b2da      	uxtb	r2, r3
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	711a      	strb	r2, [r3, #4]
 8011f1e:	e007      	b.n	8011f30 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011f20:	7dfb      	ldrb	r3, [r7, #23]
 8011f22:	2b01      	cmp	r3, #1
 8011f24:	d102      	bne.n	8011f2c <create_chain+0x122>
 8011f26:	f04f 33ff 	mov.w	r3, #4294967295
 8011f2a:	e000      	b.n	8011f2e <create_chain+0x124>
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011f30:	69fb      	ldr	r3, [r7, #28]
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3720      	adds	r7, #32
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}

08011f3a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011f3a:	b480      	push	{r7}
 8011f3c:	b087      	sub	sp, #28
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
 8011f42:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f4e:	3304      	adds	r3, #4
 8011f50:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	899b      	ldrh	r3, [r3, #12]
 8011f56:	461a      	mov	r2, r3
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f5e:	68fa      	ldr	r2, [r7, #12]
 8011f60:	8952      	ldrh	r2, [r2, #10]
 8011f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f66:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	1d1a      	adds	r2, r3, #4
 8011f6c:	613a      	str	r2, [r7, #16]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d101      	bne.n	8011f7c <clmt_clust+0x42>
 8011f78:	2300      	movs	r3, #0
 8011f7a:	e010      	b.n	8011f9e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011f7c:	697a      	ldr	r2, [r7, #20]
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d307      	bcc.n	8011f94 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011f84:	697a      	ldr	r2, [r7, #20]
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	1ad3      	subs	r3, r2, r3
 8011f8a:	617b      	str	r3, [r7, #20]
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	3304      	adds	r3, #4
 8011f90:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f92:	e7e9      	b.n	8011f68 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011f94:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011f96:	693b      	ldr	r3, [r7, #16]
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	697b      	ldr	r3, [r7, #20]
 8011f9c:	4413      	add	r3, r2
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	371c      	adds	r7, #28
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b086      	sub	sp, #24
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011fc0:	d204      	bcs.n	8011fcc <dir_sdi+0x22>
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	f003 031f 	and.w	r3, r3, #31
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d001      	beq.n	8011fd0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011fcc:	2302      	movs	r3, #2
 8011fce:	e071      	b.n	80120b4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	683a      	ldr	r2, [r7, #0]
 8011fd4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	689b      	ldr	r3, [r3, #8]
 8011fda:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <dir_sdi+0x46>
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	781b      	ldrb	r3, [r3, #0]
 8011fe6:	2b02      	cmp	r3, #2
 8011fe8:	d902      	bls.n	8011ff0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d10c      	bne.n	8012010 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	095b      	lsrs	r3, r3, #5
 8011ffa:	693a      	ldr	r2, [r7, #16]
 8011ffc:	8912      	ldrh	r2, [r2, #8]
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d301      	bcc.n	8012006 <dir_sdi+0x5c>
 8012002:	2302      	movs	r3, #2
 8012004:	e056      	b.n	80120b4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	61da      	str	r2, [r3, #28]
 801200e:	e02d      	b.n	801206c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	895b      	ldrh	r3, [r3, #10]
 8012014:	461a      	mov	r2, r3
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	899b      	ldrh	r3, [r3, #12]
 801201a:	fb02 f303 	mul.w	r3, r2, r3
 801201e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012020:	e019      	b.n	8012056 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6979      	ldr	r1, [r7, #20]
 8012026:	4618      	mov	r0, r3
 8012028:	f7ff fc9d 	bl	8011966 <get_fat>
 801202c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012034:	d101      	bne.n	801203a <dir_sdi+0x90>
 8012036:	2301      	movs	r3, #1
 8012038:	e03c      	b.n	80120b4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	2b01      	cmp	r3, #1
 801203e:	d904      	bls.n	801204a <dir_sdi+0xa0>
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	69db      	ldr	r3, [r3, #28]
 8012044:	697a      	ldr	r2, [r7, #20]
 8012046:	429a      	cmp	r2, r3
 8012048:	d301      	bcc.n	801204e <dir_sdi+0xa4>
 801204a:	2302      	movs	r3, #2
 801204c:	e032      	b.n	80120b4 <dir_sdi+0x10a>
			ofs -= csz;
 801204e:	683a      	ldr	r2, [r7, #0]
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012056:	683a      	ldr	r2, [r7, #0]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	429a      	cmp	r2, r3
 801205c:	d2e1      	bcs.n	8012022 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801205e:	6979      	ldr	r1, [r7, #20]
 8012060:	6938      	ldr	r0, [r7, #16]
 8012062:	f7ff fc61 	bl	8011928 <clust2sect>
 8012066:	4602      	mov	r2, r0
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	697a      	ldr	r2, [r7, #20]
 8012070:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	69db      	ldr	r3, [r3, #28]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d101      	bne.n	801207e <dir_sdi+0xd4>
 801207a:	2302      	movs	r3, #2
 801207c:	e01a      	b.n	80120b4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	69da      	ldr	r2, [r3, #28]
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	899b      	ldrh	r3, [r3, #12]
 8012086:	4619      	mov	r1, r3
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	fbb3 f3f1 	udiv	r3, r3, r1
 801208e:	441a      	add	r2, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	899b      	ldrh	r3, [r3, #12]
 801209e:	461a      	mov	r2, r3
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80120a6:	fb00 f202 	mul.w	r2, r0, r2
 80120aa:	1a9b      	subs	r3, r3, r2
 80120ac:	18ca      	adds	r2, r1, r3
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80120b2:	2300      	movs	r3, #0
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3718      	adds	r7, #24
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b086      	sub	sp, #24
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	695b      	ldr	r3, [r3, #20]
 80120d0:	3320      	adds	r3, #32
 80120d2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	69db      	ldr	r3, [r3, #28]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d003      	beq.n	80120e4 <dir_next+0x28>
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80120e2:	d301      	bcc.n	80120e8 <dir_next+0x2c>
 80120e4:	2304      	movs	r3, #4
 80120e6:	e0bb      	b.n	8012260 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	899b      	ldrh	r3, [r3, #12]
 80120ec:	461a      	mov	r2, r3
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80120f4:	fb01 f202 	mul.w	r2, r1, r2
 80120f8:	1a9b      	subs	r3, r3, r2
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f040 809d 	bne.w	801223a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	69db      	ldr	r3, [r3, #28]
 8012104:	1c5a      	adds	r2, r3, #1
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	699b      	ldr	r3, [r3, #24]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d10b      	bne.n	801212a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	095b      	lsrs	r3, r3, #5
 8012116:	68fa      	ldr	r2, [r7, #12]
 8012118:	8912      	ldrh	r2, [r2, #8]
 801211a:	4293      	cmp	r3, r2
 801211c:	f0c0 808d 	bcc.w	801223a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	61da      	str	r2, [r3, #28]
 8012126:	2304      	movs	r3, #4
 8012128:	e09a      	b.n	8012260 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	899b      	ldrh	r3, [r3, #12]
 801212e:	461a      	mov	r2, r3
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	fbb3 f3f2 	udiv	r3, r3, r2
 8012136:	68fa      	ldr	r2, [r7, #12]
 8012138:	8952      	ldrh	r2, [r2, #10]
 801213a:	3a01      	subs	r2, #1
 801213c:	4013      	ands	r3, r2
 801213e:	2b00      	cmp	r3, #0
 8012140:	d17b      	bne.n	801223a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012142:	687a      	ldr	r2, [r7, #4]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	699b      	ldr	r3, [r3, #24]
 8012148:	4619      	mov	r1, r3
 801214a:	4610      	mov	r0, r2
 801214c:	f7ff fc0b 	bl	8011966 <get_fat>
 8012150:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	2b01      	cmp	r3, #1
 8012156:	d801      	bhi.n	801215c <dir_next+0xa0>
 8012158:	2302      	movs	r3, #2
 801215a:	e081      	b.n	8012260 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012162:	d101      	bne.n	8012168 <dir_next+0xac>
 8012164:	2301      	movs	r3, #1
 8012166:	e07b      	b.n	8012260 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	69db      	ldr	r3, [r3, #28]
 801216c:	697a      	ldr	r2, [r7, #20]
 801216e:	429a      	cmp	r2, r3
 8012170:	d359      	bcc.n	8012226 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d104      	bne.n	8012182 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	61da      	str	r2, [r3, #28]
 801217e:	2304      	movs	r3, #4
 8012180:	e06e      	b.n	8012260 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	699b      	ldr	r3, [r3, #24]
 8012188:	4619      	mov	r1, r3
 801218a:	4610      	mov	r0, r2
 801218c:	f7ff fe3d 	bl	8011e0a <create_chain>
 8012190:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d101      	bne.n	801219c <dir_next+0xe0>
 8012198:	2307      	movs	r3, #7
 801219a:	e061      	b.n	8012260 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d101      	bne.n	80121a6 <dir_next+0xea>
 80121a2:	2302      	movs	r3, #2
 80121a4:	e05c      	b.n	8012260 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ac:	d101      	bne.n	80121b2 <dir_next+0xf6>
 80121ae:	2301      	movs	r3, #1
 80121b0:	e056      	b.n	8012260 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80121b2:	68f8      	ldr	r0, [r7, #12]
 80121b4:	f7ff fad6 	bl	8011764 <sync_window>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d001      	beq.n	80121c2 <dir_next+0x106>
 80121be:	2301      	movs	r3, #1
 80121c0:	e04e      	b.n	8012260 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	899b      	ldrh	r3, [r3, #12]
 80121cc:	461a      	mov	r2, r3
 80121ce:	2100      	movs	r1, #0
 80121d0:	f7ff f8ff 	bl	80113d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80121d4:	2300      	movs	r3, #0
 80121d6:	613b      	str	r3, [r7, #16]
 80121d8:	6979      	ldr	r1, [r7, #20]
 80121da:	68f8      	ldr	r0, [r7, #12]
 80121dc:	f7ff fba4 	bl	8011928 <clust2sect>
 80121e0:	4602      	mov	r2, r0
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80121e6:	e012      	b.n	801220e <dir_next+0x152>
						fs->wflag = 1;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2201      	movs	r2, #1
 80121ec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80121ee:	68f8      	ldr	r0, [r7, #12]
 80121f0:	f7ff fab8 	bl	8011764 <sync_window>
 80121f4:	4603      	mov	r3, r0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d001      	beq.n	80121fe <dir_next+0x142>
 80121fa:	2301      	movs	r3, #1
 80121fc:	e030      	b.n	8012260 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	3301      	adds	r3, #1
 8012202:	613b      	str	r3, [r7, #16]
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012208:	1c5a      	adds	r2, r3, #1
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	635a      	str	r2, [r3, #52]	@ 0x34
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	895b      	ldrh	r3, [r3, #10]
 8012212:	461a      	mov	r2, r3
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	4293      	cmp	r3, r2
 8012218:	d3e6      	bcc.n	80121e8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	1ad2      	subs	r2, r2, r3
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	697a      	ldr	r2, [r7, #20]
 801222a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801222c:	6979      	ldr	r1, [r7, #20]
 801222e:	68f8      	ldr	r0, [r7, #12]
 8012230:	f7ff fb7a 	bl	8011928 <clust2sect>
 8012234:	4602      	mov	r2, r0
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	68ba      	ldr	r2, [r7, #8]
 801223e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	899b      	ldrh	r3, [r3, #12]
 801224a:	461a      	mov	r2, r3
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012252:	fb00 f202 	mul.w	r2, r0, r2
 8012256:	1a9b      	subs	r3, r3, r2
 8012258:	18ca      	adds	r2, r1, r3
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801225e:	2300      	movs	r3, #0
}
 8012260:	4618      	mov	r0, r3
 8012262:	3718      	adds	r7, #24
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b086      	sub	sp, #24
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012278:	2100      	movs	r1, #0
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7ff fe95 	bl	8011faa <dir_sdi>
 8012280:	4603      	mov	r3, r0
 8012282:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012284:	7dfb      	ldrb	r3, [r7, #23]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d12b      	bne.n	80122e2 <dir_alloc+0x7a>
		n = 0;
 801228a:	2300      	movs	r3, #0
 801228c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	69db      	ldr	r3, [r3, #28]
 8012292:	4619      	mov	r1, r3
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	f7ff faa9 	bl	80117ec <move_window>
 801229a:	4603      	mov	r3, r0
 801229c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801229e:	7dfb      	ldrb	r3, [r7, #23]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d11d      	bne.n	80122e0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6a1b      	ldr	r3, [r3, #32]
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	2be5      	cmp	r3, #229	@ 0xe5
 80122ac:	d004      	beq.n	80122b8 <dir_alloc+0x50>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6a1b      	ldr	r3, [r3, #32]
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d107      	bne.n	80122c8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80122b8:	693b      	ldr	r3, [r7, #16]
 80122ba:	3301      	adds	r3, #1
 80122bc:	613b      	str	r3, [r7, #16]
 80122be:	693a      	ldr	r2, [r7, #16]
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d102      	bne.n	80122cc <dir_alloc+0x64>
 80122c6:	e00c      	b.n	80122e2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80122c8:	2300      	movs	r3, #0
 80122ca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80122cc:	2101      	movs	r1, #1
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f7ff fef4 	bl	80120bc <dir_next>
 80122d4:	4603      	mov	r3, r0
 80122d6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80122d8:	7dfb      	ldrb	r3, [r7, #23]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d0d7      	beq.n	801228e <dir_alloc+0x26>
 80122de:	e000      	b.n	80122e2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80122e0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80122e2:	7dfb      	ldrb	r3, [r7, #23]
 80122e4:	2b04      	cmp	r3, #4
 80122e6:	d101      	bne.n	80122ec <dir_alloc+0x84>
 80122e8:	2307      	movs	r3, #7
 80122ea:	75fb      	strb	r3, [r7, #23]
	return res;
 80122ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3718      	adds	r7, #24
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b084      	sub	sp, #16
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
 80122fe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	331a      	adds	r3, #26
 8012304:	4618      	mov	r0, r3
 8012306:	f7fe ffc1 	bl	801128c <ld_word>
 801230a:	4603      	mov	r3, r0
 801230c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	2b03      	cmp	r3, #3
 8012314:	d109      	bne.n	801232a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	3314      	adds	r3, #20
 801231a:	4618      	mov	r0, r3
 801231c:	f7fe ffb6 	bl	801128c <ld_word>
 8012320:	4603      	mov	r3, r0
 8012322:	041b      	lsls	r3, r3, #16
 8012324:	68fa      	ldr	r2, [r7, #12]
 8012326:	4313      	orrs	r3, r2
 8012328:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801232a:	68fb      	ldr	r3, [r7, #12]
}
 801232c:	4618      	mov	r0, r3
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	60b9      	str	r1, [r7, #8]
 801233e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	331a      	adds	r3, #26
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	b292      	uxth	r2, r2
 8012348:	4611      	mov	r1, r2
 801234a:	4618      	mov	r0, r3
 801234c:	f7fe ffd9 	bl	8011302 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	2b03      	cmp	r3, #3
 8012356:	d109      	bne.n	801236c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	f103 0214 	add.w	r2, r3, #20
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	0c1b      	lsrs	r3, r3, #16
 8012362:	b29b      	uxth	r3, r3
 8012364:	4619      	mov	r1, r3
 8012366:	4610      	mov	r0, r2
 8012368:	f7fe ffcb 	bl	8011302 <st_word>
	}
}
 801236c:	bf00      	nop
 801236e:	3710      	adds	r7, #16
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}

08012374 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012374:	b590      	push	{r4, r7, lr}
 8012376:	b087      	sub	sp, #28
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	331a      	adds	r3, #26
 8012382:	4618      	mov	r0, r3
 8012384:	f7fe ff82 	bl	801128c <ld_word>
 8012388:	4603      	mov	r3, r0
 801238a:	2b00      	cmp	r3, #0
 801238c:	d001      	beq.n	8012392 <cmp_lfn+0x1e>
 801238e:	2300      	movs	r3, #0
 8012390:	e059      	b.n	8012446 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801239a:	1e5a      	subs	r2, r3, #1
 801239c:	4613      	mov	r3, r2
 801239e:	005b      	lsls	r3, r3, #1
 80123a0:	4413      	add	r3, r2
 80123a2:	009b      	lsls	r3, r3, #2
 80123a4:	4413      	add	r3, r2
 80123a6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80123a8:	2301      	movs	r3, #1
 80123aa:	81fb      	strh	r3, [r7, #14]
 80123ac:	2300      	movs	r3, #0
 80123ae:	613b      	str	r3, [r7, #16]
 80123b0:	e033      	b.n	801241a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80123b2:	4a27      	ldr	r2, [pc, #156]	@ (8012450 <cmp_lfn+0xdc>)
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	4413      	add	r3, r2
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	461a      	mov	r2, r3
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	4413      	add	r3, r2
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7fe ff63 	bl	801128c <ld_word>
 80123c6:	4603      	mov	r3, r0
 80123c8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80123ca:	89fb      	ldrh	r3, [r7, #14]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d01a      	beq.n	8012406 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80123d4:	d812      	bhi.n	80123fc <cmp_lfn+0x88>
 80123d6:	89bb      	ldrh	r3, [r7, #12]
 80123d8:	4618      	mov	r0, r3
 80123da:	f001 fe41 	bl	8014060 <ff_wtoupper>
 80123de:	4603      	mov	r3, r0
 80123e0:	461c      	mov	r4, r3
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	1c5a      	adds	r2, r3, #1
 80123e6:	617a      	str	r2, [r7, #20]
 80123e8:	005b      	lsls	r3, r3, #1
 80123ea:	687a      	ldr	r2, [r7, #4]
 80123ec:	4413      	add	r3, r2
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	4618      	mov	r0, r3
 80123f2:	f001 fe35 	bl	8014060 <ff_wtoupper>
 80123f6:	4603      	mov	r3, r0
 80123f8:	429c      	cmp	r4, r3
 80123fa:	d001      	beq.n	8012400 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80123fc:	2300      	movs	r3, #0
 80123fe:	e022      	b.n	8012446 <cmp_lfn+0xd2>
			}
			wc = uc;
 8012400:	89bb      	ldrh	r3, [r7, #12]
 8012402:	81fb      	strh	r3, [r7, #14]
 8012404:	e006      	b.n	8012414 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012406:	89bb      	ldrh	r3, [r7, #12]
 8012408:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801240c:	4293      	cmp	r3, r2
 801240e:	d001      	beq.n	8012414 <cmp_lfn+0xa0>
 8012410:	2300      	movs	r3, #0
 8012412:	e018      	b.n	8012446 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	3301      	adds	r3, #1
 8012418:	613b      	str	r3, [r7, #16]
 801241a:	693b      	ldr	r3, [r7, #16]
 801241c:	2b0c      	cmp	r3, #12
 801241e:	d9c8      	bls.n	80123b2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00b      	beq.n	8012444 <cmp_lfn+0xd0>
 801242c:	89fb      	ldrh	r3, [r7, #14]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d008      	beq.n	8012444 <cmp_lfn+0xd0>
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	005b      	lsls	r3, r3, #1
 8012436:	687a      	ldr	r2, [r7, #4]
 8012438:	4413      	add	r3, r2
 801243a:	881b      	ldrh	r3, [r3, #0]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d001      	beq.n	8012444 <cmp_lfn+0xd0>
 8012440:	2300      	movs	r3, #0
 8012442:	e000      	b.n	8012446 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012444:	2301      	movs	r3, #1
}
 8012446:	4618      	mov	r0, r3
 8012448:	371c      	adds	r7, #28
 801244a:	46bd      	mov	sp, r7
 801244c:	bd90      	pop	{r4, r7, pc}
 801244e:	bf00      	nop
 8012450:	08015030 	.word	0x08015030

08012454 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b088      	sub	sp, #32
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	4611      	mov	r1, r2
 8012460:	461a      	mov	r2, r3
 8012462:	460b      	mov	r3, r1
 8012464:	71fb      	strb	r3, [r7, #7]
 8012466:	4613      	mov	r3, r2
 8012468:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	330d      	adds	r3, #13
 801246e:	79ba      	ldrb	r2, [r7, #6]
 8012470:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	330b      	adds	r3, #11
 8012476:	220f      	movs	r2, #15
 8012478:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	330c      	adds	r3, #12
 801247e:	2200      	movs	r2, #0
 8012480:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	331a      	adds	r3, #26
 8012486:	2100      	movs	r1, #0
 8012488:	4618      	mov	r0, r3
 801248a:	f7fe ff3a 	bl	8011302 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801248e:	79fb      	ldrb	r3, [r7, #7]
 8012490:	1e5a      	subs	r2, r3, #1
 8012492:	4613      	mov	r3, r2
 8012494:	005b      	lsls	r3, r3, #1
 8012496:	4413      	add	r3, r2
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	4413      	add	r3, r2
 801249c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801249e:	2300      	movs	r3, #0
 80124a0:	82fb      	strh	r3, [r7, #22]
 80124a2:	2300      	movs	r3, #0
 80124a4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80124a6:	8afb      	ldrh	r3, [r7, #22]
 80124a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124ac:	4293      	cmp	r3, r2
 80124ae:	d007      	beq.n	80124c0 <put_lfn+0x6c>
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	1c5a      	adds	r2, r3, #1
 80124b4:	61fa      	str	r2, [r7, #28]
 80124b6:	005b      	lsls	r3, r3, #1
 80124b8:	68fa      	ldr	r2, [r7, #12]
 80124ba:	4413      	add	r3, r2
 80124bc:	881b      	ldrh	r3, [r3, #0]
 80124be:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80124c0:	4a17      	ldr	r2, [pc, #92]	@ (8012520 <put_lfn+0xcc>)
 80124c2:	69bb      	ldr	r3, [r7, #24]
 80124c4:	4413      	add	r3, r2
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	461a      	mov	r2, r3
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	4413      	add	r3, r2
 80124ce:	8afa      	ldrh	r2, [r7, #22]
 80124d0:	4611      	mov	r1, r2
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7fe ff15 	bl	8011302 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80124d8:	8afb      	ldrh	r3, [r7, #22]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d102      	bne.n	80124e4 <put_lfn+0x90>
 80124de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80124e2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	3301      	adds	r3, #1
 80124e8:	61bb      	str	r3, [r7, #24]
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	2b0c      	cmp	r3, #12
 80124ee:	d9da      	bls.n	80124a6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80124f0:	8afb      	ldrh	r3, [r7, #22]
 80124f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d006      	beq.n	8012508 <put_lfn+0xb4>
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	005b      	lsls	r3, r3, #1
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	4413      	add	r3, r2
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d103      	bne.n	8012510 <put_lfn+0xbc>
 8012508:	79fb      	ldrb	r3, [r7, #7]
 801250a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801250e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	79fa      	ldrb	r2, [r7, #7]
 8012514:	701a      	strb	r2, [r3, #0]
}
 8012516:	bf00      	nop
 8012518:	3720      	adds	r7, #32
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	08015030 	.word	0x08015030

08012524 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b08c      	sub	sp, #48	@ 0x30
 8012528:	af00      	add	r7, sp, #0
 801252a:	60f8      	str	r0, [r7, #12]
 801252c:	60b9      	str	r1, [r7, #8]
 801252e:	607a      	str	r2, [r7, #4]
 8012530:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012532:	220b      	movs	r2, #11
 8012534:	68b9      	ldr	r1, [r7, #8]
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	f7fe ff2a 	bl	8011390 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	2b05      	cmp	r3, #5
 8012540:	d929      	bls.n	8012596 <gen_numname+0x72>
		sr = seq;
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012546:	e020      	b.n	801258a <gen_numname+0x66>
			wc = *lfn++;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	1c9a      	adds	r2, r3, #2
 801254c:	607a      	str	r2, [r7, #4]
 801254e:	881b      	ldrh	r3, [r3, #0]
 8012550:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8012552:	2300      	movs	r3, #0
 8012554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012556:	e015      	b.n	8012584 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012558:	69fb      	ldr	r3, [r7, #28]
 801255a:	005a      	lsls	r2, r3, #1
 801255c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801255e:	f003 0301 	and.w	r3, r3, #1
 8012562:	4413      	add	r3, r2
 8012564:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012566:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012568:	085b      	lsrs	r3, r3, #1
 801256a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012572:	2b00      	cmp	r3, #0
 8012574:	d003      	beq.n	801257e <gen_numname+0x5a>
 8012576:	69fa      	ldr	r2, [r7, #28]
 8012578:	4b30      	ldr	r3, [pc, #192]	@ (801263c <gen_numname+0x118>)
 801257a:	4053      	eors	r3, r2
 801257c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012580:	3301      	adds	r3, #1
 8012582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012586:	2b0f      	cmp	r3, #15
 8012588:	d9e6      	bls.n	8012558 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	881b      	ldrh	r3, [r3, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1da      	bne.n	8012548 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012596:	2307      	movs	r3, #7
 8012598:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	b2db      	uxtb	r3, r3
 801259e:	f003 030f 	and.w	r3, r3, #15
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	3330      	adds	r3, #48	@ 0x30
 80125a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80125aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80125ae:	2b39      	cmp	r3, #57	@ 0x39
 80125b0:	d904      	bls.n	80125bc <gen_numname+0x98>
 80125b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80125b6:	3307      	adds	r3, #7
 80125b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80125bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125be:	1e5a      	subs	r2, r3, #1
 80125c0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80125c2:	3330      	adds	r3, #48	@ 0x30
 80125c4:	443b      	add	r3, r7
 80125c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80125ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	091b      	lsrs	r3, r3, #4
 80125d2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1df      	bne.n	801259a <gen_numname+0x76>
	ns[i] = '~';
 80125da:	f107 0214 	add.w	r2, r7, #20
 80125de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125e0:	4413      	add	r3, r2
 80125e2:	227e      	movs	r2, #126	@ 0x7e
 80125e4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80125e6:	2300      	movs	r3, #0
 80125e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80125ea:	e002      	b.n	80125f2 <gen_numname+0xce>
 80125ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ee:	3301      	adds	r3, #1
 80125f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80125f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d205      	bcs.n	8012606 <gen_numname+0xe2>
 80125fa:	68fa      	ldr	r2, [r7, #12]
 80125fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125fe:	4413      	add	r3, r2
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	2b20      	cmp	r3, #32
 8012604:	d1f2      	bne.n	80125ec <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012608:	2b07      	cmp	r3, #7
 801260a:	d807      	bhi.n	801261c <gen_numname+0xf8>
 801260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801260e:	1c5a      	adds	r2, r3, #1
 8012610:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012612:	3330      	adds	r3, #48	@ 0x30
 8012614:	443b      	add	r3, r7
 8012616:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801261a:	e000      	b.n	801261e <gen_numname+0xfa>
 801261c:	2120      	movs	r1, #32
 801261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012620:	1c5a      	adds	r2, r3, #1
 8012622:	627a      	str	r2, [r7, #36]	@ 0x24
 8012624:	68fa      	ldr	r2, [r7, #12]
 8012626:	4413      	add	r3, r2
 8012628:	460a      	mov	r2, r1
 801262a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801262e:	2b07      	cmp	r3, #7
 8012630:	d9e9      	bls.n	8012606 <gen_numname+0xe2>
}
 8012632:	bf00      	nop
 8012634:	bf00      	nop
 8012636:	3730      	adds	r7, #48	@ 0x30
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	00011021 	.word	0x00011021

08012640 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012640:	b480      	push	{r7}
 8012642:	b085      	sub	sp, #20
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012648:	2300      	movs	r3, #0
 801264a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801264c:	230b      	movs	r3, #11
 801264e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012650:	7bfb      	ldrb	r3, [r7, #15]
 8012652:	b2da      	uxtb	r2, r3
 8012654:	0852      	lsrs	r2, r2, #1
 8012656:	01db      	lsls	r3, r3, #7
 8012658:	4313      	orrs	r3, r2
 801265a:	b2da      	uxtb	r2, r3
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	1c59      	adds	r1, r3, #1
 8012660:	6079      	str	r1, [r7, #4]
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	4413      	add	r3, r2
 8012666:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	3b01      	subs	r3, #1
 801266c:	60bb      	str	r3, [r7, #8]
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d1ed      	bne.n	8012650 <sum_sfn+0x10>
	return sum;
 8012674:	7bfb      	ldrb	r3, [r7, #15]
}
 8012676:	4618      	mov	r0, r3
 8012678:	3714      	adds	r7, #20
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr

08012682 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b086      	sub	sp, #24
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012690:	2100      	movs	r1, #0
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f7ff fc89 	bl	8011faa <dir_sdi>
 8012698:	4603      	mov	r3, r0
 801269a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801269c:	7dfb      	ldrb	r3, [r7, #23]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d001      	beq.n	80126a6 <dir_find+0x24>
 80126a2:	7dfb      	ldrb	r3, [r7, #23]
 80126a4:	e0a9      	b.n	80127fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80126a6:	23ff      	movs	r3, #255	@ 0xff
 80126a8:	753b      	strb	r3, [r7, #20]
 80126aa:	7d3b      	ldrb	r3, [r7, #20]
 80126ac:	757b      	strb	r3, [r7, #21]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f04f 32ff 	mov.w	r2, #4294967295
 80126b4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	69db      	ldr	r3, [r3, #28]
 80126ba:	4619      	mov	r1, r3
 80126bc:	6938      	ldr	r0, [r7, #16]
 80126be:	f7ff f895 	bl	80117ec <move_window>
 80126c2:	4603      	mov	r3, r0
 80126c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126c6:	7dfb      	ldrb	r3, [r7, #23]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	f040 8090 	bne.w	80127ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6a1b      	ldr	r3, [r3, #32]
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80126d6:	7dbb      	ldrb	r3, [r7, #22]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d102      	bne.n	80126e2 <dir_find+0x60>
 80126dc:	2304      	movs	r3, #4
 80126de:	75fb      	strb	r3, [r7, #23]
 80126e0:	e08a      	b.n	80127f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	330b      	adds	r3, #11
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80126ee:	73fb      	strb	r3, [r7, #15]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	7bfa      	ldrb	r2, [r7, #15]
 80126f4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80126f6:	7dbb      	ldrb	r3, [r7, #22]
 80126f8:	2be5      	cmp	r3, #229	@ 0xe5
 80126fa:	d007      	beq.n	801270c <dir_find+0x8a>
 80126fc:	7bfb      	ldrb	r3, [r7, #15]
 80126fe:	f003 0308 	and.w	r3, r3, #8
 8012702:	2b00      	cmp	r3, #0
 8012704:	d009      	beq.n	801271a <dir_find+0x98>
 8012706:	7bfb      	ldrb	r3, [r7, #15]
 8012708:	2b0f      	cmp	r3, #15
 801270a:	d006      	beq.n	801271a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801270c:	23ff      	movs	r3, #255	@ 0xff
 801270e:	757b      	strb	r3, [r7, #21]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f04f 32ff 	mov.w	r2, #4294967295
 8012716:	631a      	str	r2, [r3, #48]	@ 0x30
 8012718:	e05e      	b.n	80127d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801271a:	7bfb      	ldrb	r3, [r7, #15]
 801271c:	2b0f      	cmp	r3, #15
 801271e:	d136      	bne.n	801278e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801272a:	2b00      	cmp	r3, #0
 801272c:	d154      	bne.n	80127d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801272e:	7dbb      	ldrb	r3, [r7, #22]
 8012730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012734:	2b00      	cmp	r3, #0
 8012736:	d00d      	beq.n	8012754 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6a1b      	ldr	r3, [r3, #32]
 801273c:	7b5b      	ldrb	r3, [r3, #13]
 801273e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012740:	7dbb      	ldrb	r3, [r7, #22]
 8012742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012746:	75bb      	strb	r3, [r7, #22]
 8012748:	7dbb      	ldrb	r3, [r7, #22]
 801274a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	695a      	ldr	r2, [r3, #20]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012754:	7dba      	ldrb	r2, [r7, #22]
 8012756:	7d7b      	ldrb	r3, [r7, #21]
 8012758:	429a      	cmp	r2, r3
 801275a:	d115      	bne.n	8012788 <dir_find+0x106>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6a1b      	ldr	r3, [r3, #32]
 8012760:	330d      	adds	r3, #13
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	7d3a      	ldrb	r2, [r7, #20]
 8012766:	429a      	cmp	r2, r3
 8012768:	d10e      	bne.n	8012788 <dir_find+0x106>
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	691a      	ldr	r2, [r3, #16]
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6a1b      	ldr	r3, [r3, #32]
 8012772:	4619      	mov	r1, r3
 8012774:	4610      	mov	r0, r2
 8012776:	f7ff fdfd 	bl	8012374 <cmp_lfn>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d003      	beq.n	8012788 <dir_find+0x106>
 8012780:	7d7b      	ldrb	r3, [r7, #21]
 8012782:	3b01      	subs	r3, #1
 8012784:	b2db      	uxtb	r3, r3
 8012786:	e000      	b.n	801278a <dir_find+0x108>
 8012788:	23ff      	movs	r3, #255	@ 0xff
 801278a:	757b      	strb	r3, [r7, #21]
 801278c:	e024      	b.n	80127d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801278e:	7d7b      	ldrb	r3, [r7, #21]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d109      	bne.n	80127a8 <dir_find+0x126>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6a1b      	ldr	r3, [r3, #32]
 8012798:	4618      	mov	r0, r3
 801279a:	f7ff ff51 	bl	8012640 <sum_sfn>
 801279e:	4603      	mov	r3, r0
 80127a0:	461a      	mov	r2, r3
 80127a2:	7d3b      	ldrb	r3, [r7, #20]
 80127a4:	4293      	cmp	r3, r2
 80127a6:	d024      	beq.n	80127f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80127ae:	f003 0301 	and.w	r3, r3, #1
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d10a      	bne.n	80127cc <dir_find+0x14a>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6a18      	ldr	r0, [r3, #32]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	3324      	adds	r3, #36	@ 0x24
 80127be:	220b      	movs	r2, #11
 80127c0:	4619      	mov	r1, r3
 80127c2:	f7fe fe21 	bl	8011408 <mem_cmp>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d014      	beq.n	80127f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80127cc:	23ff      	movs	r3, #255	@ 0xff
 80127ce:	757b      	strb	r3, [r7, #21]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f04f 32ff 	mov.w	r2, #4294967295
 80127d6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80127d8:	2100      	movs	r1, #0
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7ff fc6e 	bl	80120bc <dir_next>
 80127e0:	4603      	mov	r3, r0
 80127e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80127e4:	7dfb      	ldrb	r3, [r7, #23]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	f43f af65 	beq.w	80126b6 <dir_find+0x34>
 80127ec:	e004      	b.n	80127f8 <dir_find+0x176>
		if (res != FR_OK) break;
 80127ee:	bf00      	nop
 80127f0:	e002      	b.n	80127f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80127f2:	bf00      	nop
 80127f4:	e000      	b.n	80127f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80127f6:	bf00      	nop

	return res;
 80127f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3718      	adds	r7, #24
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
	...

08012804 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b08c      	sub	sp, #48	@ 0x30
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012818:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801281c:	2b00      	cmp	r3, #0
 801281e:	d001      	beq.n	8012824 <dir_register+0x20>
 8012820:	2306      	movs	r3, #6
 8012822:	e0e0      	b.n	80129e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012824:	2300      	movs	r3, #0
 8012826:	627b      	str	r3, [r7, #36]	@ 0x24
 8012828:	e002      	b.n	8012830 <dir_register+0x2c>
 801282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801282c:	3301      	adds	r3, #1
 801282e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	691a      	ldr	r2, [r3, #16]
 8012834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012836:	005b      	lsls	r3, r3, #1
 8012838:	4413      	add	r3, r2
 801283a:	881b      	ldrh	r3, [r3, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d1f4      	bne.n	801282a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012846:	f107 030c 	add.w	r3, r7, #12
 801284a:	220c      	movs	r2, #12
 801284c:	4618      	mov	r0, r3
 801284e:	f7fe fd9f 	bl	8011390 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012852:	7dfb      	ldrb	r3, [r7, #23]
 8012854:	f003 0301 	and.w	r3, r3, #1
 8012858:	2b00      	cmp	r3, #0
 801285a:	d032      	beq.n	80128c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2240      	movs	r2, #64	@ 0x40
 8012860:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8012864:	2301      	movs	r3, #1
 8012866:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012868:	e016      	b.n	8012898 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012870:	69fb      	ldr	r3, [r7, #28]
 8012872:	691a      	ldr	r2, [r3, #16]
 8012874:	f107 010c 	add.w	r1, r7, #12
 8012878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801287a:	f7ff fe53 	bl	8012524 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7ff feff 	bl	8012682 <dir_find>
 8012884:	4603      	mov	r3, r0
 8012886:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801288a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801288e:	2b00      	cmp	r3, #0
 8012890:	d106      	bne.n	80128a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012894:	3301      	adds	r3, #1
 8012896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801289a:	2b63      	cmp	r3, #99	@ 0x63
 801289c:	d9e5      	bls.n	801286a <dir_register+0x66>
 801289e:	e000      	b.n	80128a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80128a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80128a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128a4:	2b64      	cmp	r3, #100	@ 0x64
 80128a6:	d101      	bne.n	80128ac <dir_register+0xa8>
 80128a8:	2307      	movs	r3, #7
 80128aa:	e09c      	b.n	80129e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80128ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128b0:	2b04      	cmp	r3, #4
 80128b2:	d002      	beq.n	80128ba <dir_register+0xb6>
 80128b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128b8:	e095      	b.n	80129e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80128ba:	7dfa      	ldrb	r2, [r7, #23]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80128c2:	7dfb      	ldrb	r3, [r7, #23]
 80128c4:	f003 0302 	and.w	r3, r3, #2
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d007      	beq.n	80128dc <dir_register+0xd8>
 80128cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ce:	330c      	adds	r3, #12
 80128d0:	4a47      	ldr	r2, [pc, #284]	@ (80129f0 <dir_register+0x1ec>)
 80128d2:	fba2 2303 	umull	r2, r3, r2, r3
 80128d6:	089b      	lsrs	r3, r3, #2
 80128d8:	3301      	adds	r3, #1
 80128da:	e000      	b.n	80128de <dir_register+0xda>
 80128dc:	2301      	movs	r3, #1
 80128de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80128e0:	6a39      	ldr	r1, [r7, #32]
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff fcc0 	bl	8012268 <dir_alloc>
 80128e8:	4603      	mov	r3, r0
 80128ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80128ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d148      	bne.n	8012988 <dir_register+0x184>
 80128f6:	6a3b      	ldr	r3, [r7, #32]
 80128f8:	3b01      	subs	r3, #1
 80128fa:	623b      	str	r3, [r7, #32]
 80128fc:	6a3b      	ldr	r3, [r7, #32]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d042      	beq.n	8012988 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	695a      	ldr	r2, [r3, #20]
 8012906:	6a3b      	ldr	r3, [r7, #32]
 8012908:	015b      	lsls	r3, r3, #5
 801290a:	1ad3      	subs	r3, r2, r3
 801290c:	4619      	mov	r1, r3
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f7ff fb4b 	bl	8011faa <dir_sdi>
 8012914:	4603      	mov	r3, r0
 8012916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801291a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801291e:	2b00      	cmp	r3, #0
 8012920:	d132      	bne.n	8012988 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	3324      	adds	r3, #36	@ 0x24
 8012926:	4618      	mov	r0, r3
 8012928:	f7ff fe8a 	bl	8012640 <sum_sfn>
 801292c:	4603      	mov	r3, r0
 801292e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	69db      	ldr	r3, [r3, #28]
 8012934:	4619      	mov	r1, r3
 8012936:	69f8      	ldr	r0, [r7, #28]
 8012938:	f7fe ff58 	bl	80117ec <move_window>
 801293c:	4603      	mov	r3, r0
 801293e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8012942:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012946:	2b00      	cmp	r3, #0
 8012948:	d11d      	bne.n	8012986 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801294a:	69fb      	ldr	r3, [r7, #28]
 801294c:	6918      	ldr	r0, [r3, #16]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6a19      	ldr	r1, [r3, #32]
 8012952:	6a3b      	ldr	r3, [r7, #32]
 8012954:	b2da      	uxtb	r2, r3
 8012956:	7efb      	ldrb	r3, [r7, #27]
 8012958:	f7ff fd7c 	bl	8012454 <put_lfn>
				fs->wflag = 1;
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	2201      	movs	r2, #1
 8012960:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012962:	2100      	movs	r1, #0
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f7ff fba9 	bl	80120bc <dir_next>
 801296a:	4603      	mov	r3, r0
 801296c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8012970:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012974:	2b00      	cmp	r3, #0
 8012976:	d107      	bne.n	8012988 <dir_register+0x184>
 8012978:	6a3b      	ldr	r3, [r7, #32]
 801297a:	3b01      	subs	r3, #1
 801297c:	623b      	str	r3, [r7, #32]
 801297e:	6a3b      	ldr	r3, [r7, #32]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d1d5      	bne.n	8012930 <dir_register+0x12c>
 8012984:	e000      	b.n	8012988 <dir_register+0x184>
				if (res != FR_OK) break;
 8012986:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012988:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801298c:	2b00      	cmp	r3, #0
 801298e:	d128      	bne.n	80129e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	69db      	ldr	r3, [r3, #28]
 8012994:	4619      	mov	r1, r3
 8012996:	69f8      	ldr	r0, [r7, #28]
 8012998:	f7fe ff28 	bl	80117ec <move_window>
 801299c:	4603      	mov	r3, r0
 801299e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80129a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d11b      	bne.n	80129e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6a1b      	ldr	r3, [r3, #32]
 80129ae:	2220      	movs	r2, #32
 80129b0:	2100      	movs	r1, #0
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fe fd0d 	bl	80113d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6a18      	ldr	r0, [r3, #32]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	3324      	adds	r3, #36	@ 0x24
 80129c0:	220b      	movs	r2, #11
 80129c2:	4619      	mov	r1, r3
 80129c4:	f7fe fce4 	bl	8011390 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6a1b      	ldr	r3, [r3, #32]
 80129d2:	330c      	adds	r3, #12
 80129d4:	f002 0218 	and.w	r2, r2, #24
 80129d8:	b2d2      	uxtb	r2, r2
 80129da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80129dc:	69fb      	ldr	r3, [r7, #28]
 80129de:	2201      	movs	r2, #1
 80129e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80129e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3730      	adds	r7, #48	@ 0x30
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	4ec4ec4f 	.word	0x4ec4ec4f

080129f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b08a      	sub	sp, #40	@ 0x28
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	613b      	str	r3, [r7, #16]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	691b      	ldr	r3, [r3, #16]
 8012a0a:	60fb      	str	r3, [r7, #12]
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	617b      	str	r3, [r7, #20]
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012a14:	69bb      	ldr	r3, [r7, #24]
 8012a16:	1c5a      	adds	r2, r3, #1
 8012a18:	61ba      	str	r2, [r7, #24]
 8012a1a:	693a      	ldr	r2, [r7, #16]
 8012a1c:	4413      	add	r3, r2
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012a22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a24:	2b1f      	cmp	r3, #31
 8012a26:	d940      	bls.n	8012aaa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012a28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a2c:	d006      	beq.n	8012a3c <create_name+0x48>
 8012a2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a30:	2b5c      	cmp	r3, #92	@ 0x5c
 8012a32:	d110      	bne.n	8012a56 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012a34:	e002      	b.n	8012a3c <create_name+0x48>
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	61bb      	str	r3, [r7, #24]
 8012a3c:	693a      	ldr	r2, [r7, #16]
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	4413      	add	r3, r2
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a46:	d0f6      	beq.n	8012a36 <create_name+0x42>
 8012a48:	693a      	ldr	r2, [r7, #16]
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	2b5c      	cmp	r3, #92	@ 0x5c
 8012a52:	d0f0      	beq.n	8012a36 <create_name+0x42>
			break;
 8012a54:	e02a      	b.n	8012aac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	2bfe      	cmp	r3, #254	@ 0xfe
 8012a5a:	d901      	bls.n	8012a60 <create_name+0x6c>
 8012a5c:	2306      	movs	r3, #6
 8012a5e:	e17d      	b.n	8012d5c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012a60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012a66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a68:	2101      	movs	r1, #1
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f001 fabc 	bl	8013fe8 <ff_convert>
 8012a70:	4603      	mov	r3, r0
 8012a72:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012a74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d101      	bne.n	8012a7e <create_name+0x8a>
 8012a7a:	2306      	movs	r3, #6
 8012a7c:	e16e      	b.n	8012d5c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012a7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a80:	2b7f      	cmp	r3, #127	@ 0x7f
 8012a82:	d809      	bhi.n	8012a98 <create_name+0xa4>
 8012a84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a86:	4619      	mov	r1, r3
 8012a88:	488d      	ldr	r0, [pc, #564]	@ (8012cc0 <create_name+0x2cc>)
 8012a8a:	f7fe fce4 	bl	8011456 <chk_chr>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d001      	beq.n	8012a98 <create_name+0xa4>
 8012a94:	2306      	movs	r3, #6
 8012a96:	e161      	b.n	8012d5c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	1c5a      	adds	r2, r3, #1
 8012a9c:	617a      	str	r2, [r7, #20]
 8012a9e:	005b      	lsls	r3, r3, #1
 8012aa0:	68fa      	ldr	r2, [r7, #12]
 8012aa2:	4413      	add	r3, r2
 8012aa4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012aa6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012aa8:	e7b4      	b.n	8012a14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012aaa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012aac:	693a      	ldr	r2, [r7, #16]
 8012aae:	69bb      	ldr	r3, [r7, #24]
 8012ab0:	441a      	add	r2, r3
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012ab6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ab8:	2b1f      	cmp	r3, #31
 8012aba:	d801      	bhi.n	8012ac0 <create_name+0xcc>
 8012abc:	2304      	movs	r3, #4
 8012abe:	e000      	b.n	8012ac2 <create_name+0xce>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012ac6:	e011      	b.n	8012aec <create_name+0xf8>
		w = lfn[di - 1];
 8012ac8:	697a      	ldr	r2, [r7, #20]
 8012aca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012ace:	4413      	add	r3, r2
 8012ad0:	005b      	lsls	r3, r3, #1
 8012ad2:	68fa      	ldr	r2, [r7, #12]
 8012ad4:	4413      	add	r3, r2
 8012ad6:	881b      	ldrh	r3, [r3, #0]
 8012ad8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8012ada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012adc:	2b20      	cmp	r3, #32
 8012ade:	d002      	beq.n	8012ae6 <create_name+0xf2>
 8012ae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ae4:	d106      	bne.n	8012af4 <create_name+0x100>
		di--;
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	3b01      	subs	r3, #1
 8012aea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d1ea      	bne.n	8012ac8 <create_name+0xd4>
 8012af2:	e000      	b.n	8012af6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012af4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	005b      	lsls	r3, r3, #1
 8012afa:	68fa      	ldr	r2, [r7, #12]
 8012afc:	4413      	add	r3, r2
 8012afe:	2200      	movs	r2, #0
 8012b00:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d101      	bne.n	8012b0c <create_name+0x118>
 8012b08:	2306      	movs	r3, #6
 8012b0a:	e127      	b.n	8012d5c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	3324      	adds	r3, #36	@ 0x24
 8012b10:	220b      	movs	r2, #11
 8012b12:	2120      	movs	r1, #32
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fe fc5c 	bl	80113d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	61bb      	str	r3, [r7, #24]
 8012b1e:	e002      	b.n	8012b26 <create_name+0x132>
 8012b20:	69bb      	ldr	r3, [r7, #24]
 8012b22:	3301      	adds	r3, #1
 8012b24:	61bb      	str	r3, [r7, #24]
 8012b26:	69bb      	ldr	r3, [r7, #24]
 8012b28:	005b      	lsls	r3, r3, #1
 8012b2a:	68fa      	ldr	r2, [r7, #12]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	881b      	ldrh	r3, [r3, #0]
 8012b30:	2b20      	cmp	r3, #32
 8012b32:	d0f5      	beq.n	8012b20 <create_name+0x12c>
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	005b      	lsls	r3, r3, #1
 8012b38:	68fa      	ldr	r2, [r7, #12]
 8012b3a:	4413      	add	r3, r2
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b40:	d0ee      	beq.n	8012b20 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012b42:	69bb      	ldr	r3, [r7, #24]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d009      	beq.n	8012b5c <create_name+0x168>
 8012b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b4c:	f043 0303 	orr.w	r3, r3, #3
 8012b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012b54:	e002      	b.n	8012b5c <create_name+0x168>
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	3b01      	subs	r3, #1
 8012b5a:	617b      	str	r3, [r7, #20]
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d009      	beq.n	8012b76 <create_name+0x182>
 8012b62:	697a      	ldr	r2, [r7, #20]
 8012b64:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012b68:	4413      	add	r3, r2
 8012b6a:	005b      	lsls	r3, r3, #1
 8012b6c:	68fa      	ldr	r2, [r7, #12]
 8012b6e:	4413      	add	r3, r2
 8012b70:	881b      	ldrh	r3, [r3, #0]
 8012b72:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b74:	d1ef      	bne.n	8012b56 <create_name+0x162>

	i = b = 0; ni = 8;
 8012b76:	2300      	movs	r3, #0
 8012b78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	623b      	str	r3, [r7, #32]
 8012b80:	2308      	movs	r3, #8
 8012b82:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	1c5a      	adds	r2, r3, #1
 8012b88:	61ba      	str	r2, [r7, #24]
 8012b8a:	005b      	lsls	r3, r3, #1
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	4413      	add	r3, r2
 8012b90:	881b      	ldrh	r3, [r3, #0]
 8012b92:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012b94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f000 8090 	beq.w	8012cbc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012b9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b9e:	2b20      	cmp	r3, #32
 8012ba0:	d006      	beq.n	8012bb0 <create_name+0x1bc>
 8012ba2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ba4:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ba6:	d10a      	bne.n	8012bbe <create_name+0x1ca>
 8012ba8:	69ba      	ldr	r2, [r7, #24]
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d006      	beq.n	8012bbe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012bb4:	f043 0303 	orr.w	r3, r3, #3
 8012bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012bbc:	e07d      	b.n	8012cba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012bbe:	6a3a      	ldr	r2, [r7, #32]
 8012bc0:	69fb      	ldr	r3, [r7, #28]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d203      	bcs.n	8012bce <create_name+0x1da>
 8012bc6:	69ba      	ldr	r2, [r7, #24]
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d123      	bne.n	8012c16 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012bce:	69fb      	ldr	r3, [r7, #28]
 8012bd0:	2b0b      	cmp	r3, #11
 8012bd2:	d106      	bne.n	8012be2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012bd8:	f043 0303 	orr.w	r3, r3, #3
 8012bdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012be0:	e075      	b.n	8012cce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012be2:	69ba      	ldr	r2, [r7, #24]
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d005      	beq.n	8012bf6 <create_name+0x202>
 8012bea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012bee:	f043 0303 	orr.w	r3, r3, #3
 8012bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8012bf6:	69ba      	ldr	r2, [r7, #24]
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d866      	bhi.n	8012ccc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	61bb      	str	r3, [r7, #24]
 8012c02:	2308      	movs	r3, #8
 8012c04:	623b      	str	r3, [r7, #32]
 8012c06:	230b      	movs	r3, #11
 8012c08:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012c0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012c0e:	009b      	lsls	r3, r3, #2
 8012c10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012c14:	e051      	b.n	8012cba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c18:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c1a:	d914      	bls.n	8012c46 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c1e:	2100      	movs	r1, #0
 8012c20:	4618      	mov	r0, r3
 8012c22:	f001 f9e1 	bl	8013fe8 <ff_convert>
 8012c26:	4603      	mov	r3, r0
 8012c28:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d004      	beq.n	8012c3a <create_name+0x246>
 8012c30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c32:	3b80      	subs	r3, #128	@ 0x80
 8012c34:	4a23      	ldr	r2, [pc, #140]	@ (8012cc4 <create_name+0x2d0>)
 8012c36:	5cd3      	ldrb	r3, [r2, r3]
 8012c38:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c3e:	f043 0302 	orr.w	r3, r3, #2
 8012c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012c46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d007      	beq.n	8012c5c <create_name+0x268>
 8012c4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c4e:	4619      	mov	r1, r3
 8012c50:	481d      	ldr	r0, [pc, #116]	@ (8012cc8 <create_name+0x2d4>)
 8012c52:	f7fe fc00 	bl	8011456 <chk_chr>
 8012c56:	4603      	mov	r3, r0
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d008      	beq.n	8012c6e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012c5c:	235f      	movs	r3, #95	@ 0x5f
 8012c5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c64:	f043 0303 	orr.w	r3, r3, #3
 8012c68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c6c:	e01b      	b.n	8012ca6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012c6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c70:	2b40      	cmp	r3, #64	@ 0x40
 8012c72:	d909      	bls.n	8012c88 <create_name+0x294>
 8012c74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c76:	2b5a      	cmp	r3, #90	@ 0x5a
 8012c78:	d806      	bhi.n	8012c88 <create_name+0x294>
					b |= 2;
 8012c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012c7e:	f043 0302 	orr.w	r3, r3, #2
 8012c82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012c86:	e00e      	b.n	8012ca6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012c88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c8a:	2b60      	cmp	r3, #96	@ 0x60
 8012c8c:	d90b      	bls.n	8012ca6 <create_name+0x2b2>
 8012c8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c90:	2b7a      	cmp	r3, #122	@ 0x7a
 8012c92:	d808      	bhi.n	8012ca6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012c94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012c98:	f043 0301 	orr.w	r3, r3, #1
 8012c9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012ca0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ca2:	3b20      	subs	r3, #32
 8012ca4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012ca6:	6a3b      	ldr	r3, [r7, #32]
 8012ca8:	1c5a      	adds	r2, r3, #1
 8012caa:	623a      	str	r2, [r7, #32]
 8012cac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012cae:	b2d1      	uxtb	r1, r2
 8012cb0:	687a      	ldr	r2, [r7, #4]
 8012cb2:	4413      	add	r3, r2
 8012cb4:	460a      	mov	r2, r1
 8012cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012cba:	e763      	b.n	8012b84 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012cbc:	bf00      	nop
 8012cbe:	e006      	b.n	8012cce <create_name+0x2da>
 8012cc0:	08014f04 	.word	0x08014f04
 8012cc4:	08014fb0 	.word	0x08014fb0
 8012cc8:	08014f10 	.word	0x08014f10
			if (si > di) break;			/* No extension */
 8012ccc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012cd4:	2be5      	cmp	r3, #229	@ 0xe5
 8012cd6:	d103      	bne.n	8012ce0 <create_name+0x2ec>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2205      	movs	r2, #5
 8012cdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	2b08      	cmp	r3, #8
 8012ce4:	d104      	bne.n	8012cf0 <create_name+0x2fc>
 8012ce6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012cea:	009b      	lsls	r3, r3, #2
 8012cec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012cf4:	f003 030c 	and.w	r3, r3, #12
 8012cf8:	2b0c      	cmp	r3, #12
 8012cfa:	d005      	beq.n	8012d08 <create_name+0x314>
 8012cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d00:	f003 0303 	and.w	r3, r3, #3
 8012d04:	2b03      	cmp	r3, #3
 8012d06:	d105      	bne.n	8012d14 <create_name+0x320>
 8012d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d0c:	f043 0302 	orr.w	r3, r3, #2
 8012d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d18:	f003 0302 	and.w	r3, r3, #2
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d117      	bne.n	8012d50 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012d20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d24:	f003 0303 	and.w	r3, r3, #3
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d105      	bne.n	8012d38 <create_name+0x344>
 8012d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d30:	f043 0310 	orr.w	r3, r3, #16
 8012d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012d38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d3c:	f003 030c 	and.w	r3, r3, #12
 8012d40:	2b04      	cmp	r3, #4
 8012d42:	d105      	bne.n	8012d50 <create_name+0x35c>
 8012d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d48:	f043 0308 	orr.w	r3, r3, #8
 8012d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012d56:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8012d5a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3728      	adds	r7, #40	@ 0x28
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b086      	sub	sp, #24
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012d78:	e002      	b.n	8012d80 <follow_path+0x1c>
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	603b      	str	r3, [r7, #0]
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	2b2f      	cmp	r3, #47	@ 0x2f
 8012d86:	d0f8      	beq.n	8012d7a <follow_path+0x16>
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8012d8e:	d0f4      	beq.n	8012d7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	2200      	movs	r2, #0
 8012d94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	2b1f      	cmp	r3, #31
 8012d9c:	d80a      	bhi.n	8012db4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2280      	movs	r2, #128	@ 0x80
 8012da2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012da6:	2100      	movs	r1, #0
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f7ff f8fe 	bl	8011faa <dir_sdi>
 8012dae:	4603      	mov	r3, r0
 8012db0:	75fb      	strb	r3, [r7, #23]
 8012db2:	e048      	b.n	8012e46 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012db4:	463b      	mov	r3, r7
 8012db6:	4619      	mov	r1, r3
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7ff fe1b 	bl	80129f4 <create_name>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012dc2:	7dfb      	ldrb	r3, [r7, #23]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d139      	bne.n	8012e3c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f7ff fc5a 	bl	8012682 <dir_find>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012dd8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012dda:	7dfb      	ldrb	r3, [r7, #23]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d00a      	beq.n	8012df6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012de0:	7dfb      	ldrb	r3, [r7, #23]
 8012de2:	2b04      	cmp	r3, #4
 8012de4:	d12c      	bne.n	8012e40 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012de6:	7afb      	ldrb	r3, [r7, #11]
 8012de8:	f003 0304 	and.w	r3, r3, #4
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d127      	bne.n	8012e40 <follow_path+0xdc>
 8012df0:	2305      	movs	r3, #5
 8012df2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012df4:	e024      	b.n	8012e40 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012df6:	7afb      	ldrb	r3, [r7, #11]
 8012df8:	f003 0304 	and.w	r3, r3, #4
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d121      	bne.n	8012e44 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	799b      	ldrb	r3, [r3, #6]
 8012e04:	f003 0310 	and.w	r3, r3, #16
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d102      	bne.n	8012e12 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012e0c:	2305      	movs	r3, #5
 8012e0e:	75fb      	strb	r3, [r7, #23]
 8012e10:	e019      	b.n	8012e46 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	695b      	ldr	r3, [r3, #20]
 8012e1c:	68fa      	ldr	r2, [r7, #12]
 8012e1e:	8992      	ldrh	r2, [r2, #12]
 8012e20:	fbb3 f0f2 	udiv	r0, r3, r2
 8012e24:	fb00 f202 	mul.w	r2, r0, r2
 8012e28:	1a9b      	subs	r3, r3, r2
 8012e2a:	440b      	add	r3, r1
 8012e2c:	4619      	mov	r1, r3
 8012e2e:	68f8      	ldr	r0, [r7, #12]
 8012e30:	f7ff fa61 	bl	80122f6 <ld_clust>
 8012e34:	4602      	mov	r2, r0
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012e3a:	e7bb      	b.n	8012db4 <follow_path+0x50>
			if (res != FR_OK) break;
 8012e3c:	bf00      	nop
 8012e3e:	e002      	b.n	8012e46 <follow_path+0xe2>
				break;
 8012e40:	bf00      	nop
 8012e42:	e000      	b.n	8012e46 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012e44:	bf00      	nop
			}
		}
	}

	return res;
 8012e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3718      	adds	r7, #24
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}

08012e50 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012e50:	b480      	push	{r7}
 8012e52:	b087      	sub	sp, #28
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012e58:	f04f 33ff 	mov.w	r3, #4294967295
 8012e5c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d031      	beq.n	8012eca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	617b      	str	r3, [r7, #20]
 8012e6c:	e002      	b.n	8012e74 <get_ldnumber+0x24>
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	3301      	adds	r3, #1
 8012e72:	617b      	str	r3, [r7, #20]
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	2b1f      	cmp	r3, #31
 8012e7a:	d903      	bls.n	8012e84 <get_ldnumber+0x34>
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	2b3a      	cmp	r3, #58	@ 0x3a
 8012e82:	d1f4      	bne.n	8012e6e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	2b3a      	cmp	r3, #58	@ 0x3a
 8012e8a:	d11c      	bne.n	8012ec6 <get_ldnumber+0x76>
			tp = *path;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	1c5a      	adds	r2, r3, #1
 8012e96:	60fa      	str	r2, [r7, #12]
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	3b30      	subs	r3, #48	@ 0x30
 8012e9c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	2b09      	cmp	r3, #9
 8012ea2:	d80e      	bhi.n	8012ec2 <get_ldnumber+0x72>
 8012ea4:	68fa      	ldr	r2, [r7, #12]
 8012ea6:	697b      	ldr	r3, [r7, #20]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d10a      	bne.n	8012ec2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d107      	bne.n	8012ec2 <get_ldnumber+0x72>
					vol = (int)i;
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	3301      	adds	r3, #1
 8012eba:	617b      	str	r3, [r7, #20]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	697a      	ldr	r2, [r7, #20]
 8012ec0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	e002      	b.n	8012ecc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012eca:	693b      	ldr	r3, [r7, #16]
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	371c      	adds	r7, #28
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr

08012ed8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
 8012ee0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	70da      	strb	r2, [r3, #3]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f04f 32ff 	mov.w	r2, #4294967295
 8012eee:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012ef0:	6839      	ldr	r1, [r7, #0]
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f7fe fc7a 	bl	80117ec <move_window>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d001      	beq.n	8012f02 <check_fs+0x2a>
 8012efe:	2304      	movs	r3, #4
 8012f00:	e038      	b.n	8012f74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	3338      	adds	r3, #56	@ 0x38
 8012f06:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fe f9be 	bl	801128c <ld_word>
 8012f10:	4603      	mov	r3, r0
 8012f12:	461a      	mov	r2, r3
 8012f14:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d001      	beq.n	8012f20 <check_fs+0x48>
 8012f1c:	2303      	movs	r3, #3
 8012f1e:	e029      	b.n	8012f74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f26:	2be9      	cmp	r3, #233	@ 0xe9
 8012f28:	d009      	beq.n	8012f3e <check_fs+0x66>
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f30:	2beb      	cmp	r3, #235	@ 0xeb
 8012f32:	d11e      	bne.n	8012f72 <check_fs+0x9a>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8012f3a:	2b90      	cmp	r3, #144	@ 0x90
 8012f3c:	d119      	bne.n	8012f72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	3338      	adds	r3, #56	@ 0x38
 8012f42:	3336      	adds	r3, #54	@ 0x36
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7fe f9b9 	bl	80112bc <ld_dword>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012f50:	4a0a      	ldr	r2, [pc, #40]	@ (8012f7c <check_fs+0xa4>)
 8012f52:	4293      	cmp	r3, r2
 8012f54:	d101      	bne.n	8012f5a <check_fs+0x82>
 8012f56:	2300      	movs	r3, #0
 8012f58:	e00c      	b.n	8012f74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	3338      	adds	r3, #56	@ 0x38
 8012f5e:	3352      	adds	r3, #82	@ 0x52
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7fe f9ab 	bl	80112bc <ld_dword>
 8012f66:	4603      	mov	r3, r0
 8012f68:	4a05      	ldr	r2, [pc, #20]	@ (8012f80 <check_fs+0xa8>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d101      	bne.n	8012f72 <check_fs+0x9a>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	e000      	b.n	8012f74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012f72:	2302      	movs	r3, #2
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	00544146 	.word	0x00544146
 8012f80:	33544146 	.word	0x33544146

08012f84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b096      	sub	sp, #88	@ 0x58
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	60f8      	str	r0, [r7, #12]
 8012f8c:	60b9      	str	r1, [r7, #8]
 8012f8e:	4613      	mov	r3, r2
 8012f90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	2200      	movs	r2, #0
 8012f96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012f98:	68f8      	ldr	r0, [r7, #12]
 8012f9a:	f7ff ff59 	bl	8012e50 <get_ldnumber>
 8012f9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	da01      	bge.n	8012faa <find_volume+0x26>
 8012fa6:	230b      	movs	r3, #11
 8012fa8:	e27f      	b.n	80134aa <find_volume+0x526>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012faa:	4a9e      	ldr	r2, [pc, #632]	@ (8013224 <find_volume+0x2a0>)
 8012fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d101      	bne.n	8012fbe <find_volume+0x3a>
 8012fba:	230c      	movs	r3, #12
 8012fbc:	e275      	b.n	80134aa <find_volume+0x526>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012fc2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012fc4:	79fb      	ldrb	r3, [r7, #7]
 8012fc6:	f023 0301 	bic.w	r3, r3, #1
 8012fca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d01a      	beq.n	801300a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fd6:	785b      	ldrb	r3, [r3, #1]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7fe f8b7 	bl	801114c <disk_status>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012fe8:	f003 0301 	and.w	r3, r3, #1
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10c      	bne.n	801300a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012ff0:	79fb      	ldrb	r3, [r7, #7]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d007      	beq.n	8013006 <find_volume+0x82>
 8012ff6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012ffa:	f003 0304 	and.w	r3, r3, #4
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d001      	beq.n	8013006 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013002:	230a      	movs	r3, #10
 8013004:	e251      	b.n	80134aa <find_volume+0x526>
			}
			return FR_OK;				/* The file system object is valid */
 8013006:	2300      	movs	r3, #0
 8013008:	e24f      	b.n	80134aa <find_volume+0x526>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801300c:	2200      	movs	r2, #0
 801300e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013010:	4a85      	ldr	r2, [pc, #532]	@ (8013228 <find_volume+0x2a4>)
 8013012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013014:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801301a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801301c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801301e:	785b      	ldrb	r3, [r3, #1]
 8013020:	4618      	mov	r0, r3
 8013022:	f7fe f8ad 	bl	8011180 <disk_initialize>
 8013026:	4603      	mov	r3, r0
 8013028:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801302c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013030:	f003 0301 	and.w	r3, r3, #1
 8013034:	2b00      	cmp	r3, #0
 8013036:	d001      	beq.n	801303c <find_volume+0xb8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013038:	2303      	movs	r3, #3
 801303a:	e236      	b.n	80134aa <find_volume+0x526>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801303c:	79fb      	ldrb	r3, [r7, #7]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d007      	beq.n	8013052 <find_volume+0xce>
 8013042:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013046:	f003 0304 	and.w	r3, r3, #4
 801304a:	2b00      	cmp	r3, #0
 801304c:	d001      	beq.n	8013052 <find_volume+0xce>
		return FR_WRITE_PROTECTED;
 801304e:	230a      	movs	r3, #10
 8013050:	e22b      	b.n	80134aa <find_volume+0x526>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8013052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013054:	7858      	ldrb	r0, [r3, #1]
 8013056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013058:	330c      	adds	r3, #12
 801305a:	461a      	mov	r2, r3
 801305c:	2102      	movs	r1, #2
 801305e:	f7fe f8f7 	bl	8011250 <disk_ioctl>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d001      	beq.n	801306c <find_volume+0xe8>
 8013068:	2301      	movs	r3, #1
 801306a:	e21e      	b.n	80134aa <find_volume+0x526>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801306c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801306e:	899b      	ldrh	r3, [r3, #12]
 8013070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013074:	d80d      	bhi.n	8013092 <find_volume+0x10e>
 8013076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013078:	899b      	ldrh	r3, [r3, #12]
 801307a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801307e:	d308      	bcc.n	8013092 <find_volume+0x10e>
 8013080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013082:	899b      	ldrh	r3, [r3, #12]
 8013084:	461a      	mov	r2, r3
 8013086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013088:	899b      	ldrh	r3, [r3, #12]
 801308a:	3b01      	subs	r3, #1
 801308c:	4013      	ands	r3, r2
 801308e:	2b00      	cmp	r3, #0
 8013090:	d001      	beq.n	8013096 <find_volume+0x112>
 8013092:	2301      	movs	r3, #1
 8013094:	e209      	b.n	80134aa <find_volume+0x526>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013096:	2300      	movs	r3, #0
 8013098:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801309a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801309c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801309e:	f7ff ff1b 	bl	8012ed8 <check_fs>
 80130a2:	4603      	mov	r3, r0
 80130a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80130a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80130ac:	2b02      	cmp	r3, #2
 80130ae:	d00a      	beq.n	80130c6 <find_volume+0x142>
 80130b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d85b      	bhi.n	8013170 <find_volume+0x1ec>
 80130b8:	4a5b      	ldr	r2, [pc, #364]	@ (8013228 <find_volume+0x2a4>)
 80130ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130bc:	005b      	lsls	r3, r3, #1
 80130be:	4413      	add	r3, r2
 80130c0:	785b      	ldrb	r3, [r3, #1]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d054      	beq.n	8013170 <find_volume+0x1ec>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80130c6:	2300      	movs	r3, #0
 80130c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80130ca:	e01e      	b.n	801310a <find_volume+0x186>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80130cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ce:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80130d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130d4:	011b      	lsls	r3, r3, #4
 80130d6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80130da:	4413      	add	r3, r2
 80130dc:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80130de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130e0:	3304      	adds	r3, #4
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d006      	beq.n	80130f6 <find_volume+0x172>
 80130e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130ea:	3308      	adds	r3, #8
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7fe f8e5 	bl	80112bc <ld_dword>
 80130f2:	4602      	mov	r2, r0
 80130f4:	e000      	b.n	80130f8 <find_volume+0x174>
 80130f6:	2200      	movs	r2, #0
 80130f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	3358      	adds	r3, #88	@ 0x58
 80130fe:	443b      	add	r3, r7
 8013100:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013106:	3301      	adds	r3, #1
 8013108:	643b      	str	r3, [r7, #64]	@ 0x40
 801310a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801310c:	2b03      	cmp	r3, #3
 801310e:	d9dd      	bls.n	80130cc <find_volume+0x148>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013110:	4a45      	ldr	r2, [pc, #276]	@ (8013228 <find_volume+0x2a4>)
 8013112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013114:	005b      	lsls	r3, r3, #1
 8013116:	4413      	add	r3, r2
 8013118:	785b      	ldrb	r3, [r3, #1]
 801311a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801311c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801311e:	2b00      	cmp	r3, #0
 8013120:	d002      	beq.n	8013128 <find_volume+0x1a4>
 8013122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013124:	3b01      	subs	r3, #1
 8013126:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	3358      	adds	r3, #88	@ 0x58
 801312e:	443b      	add	r3, r7
 8013130:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013134:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013138:	2b00      	cmp	r3, #0
 801313a:	d005      	beq.n	8013148 <find_volume+0x1c4>
 801313c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801313e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013140:	f7ff feca 	bl	8012ed8 <check_fs>
 8013144:	4603      	mov	r3, r0
 8013146:	e000      	b.n	801314a <find_volume+0x1c6>
 8013148:	2303      	movs	r3, #3
 801314a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801314e:	4a36      	ldr	r2, [pc, #216]	@ (8013228 <find_volume+0x2a4>)
 8013150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013152:	005b      	lsls	r3, r3, #1
 8013154:	4413      	add	r3, r2
 8013156:	785b      	ldrb	r3, [r3, #1]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d109      	bne.n	8013170 <find_volume+0x1ec>
 801315c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013160:	2b01      	cmp	r3, #1
 8013162:	d905      	bls.n	8013170 <find_volume+0x1ec>
 8013164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013166:	3301      	adds	r3, #1
 8013168:	643b      	str	r3, [r7, #64]	@ 0x40
 801316a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801316c:	2b03      	cmp	r3, #3
 801316e:	d9db      	bls.n	8013128 <find_volume+0x1a4>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013170:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013174:	2b04      	cmp	r3, #4
 8013176:	d101      	bne.n	801317c <find_volume+0x1f8>
 8013178:	2301      	movs	r3, #1
 801317a:	e196      	b.n	80134aa <find_volume+0x526>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801317c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013180:	2b01      	cmp	r3, #1
 8013182:	d901      	bls.n	8013188 <find_volume+0x204>
 8013184:	230d      	movs	r3, #13
 8013186:	e190      	b.n	80134aa <find_volume+0x526>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801318a:	3338      	adds	r3, #56	@ 0x38
 801318c:	330b      	adds	r3, #11
 801318e:	4618      	mov	r0, r3
 8013190:	f7fe f87c 	bl	801128c <ld_word>
 8013194:	4603      	mov	r3, r0
 8013196:	461a      	mov	r2, r3
 8013198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801319a:	899b      	ldrh	r3, [r3, #12]
 801319c:	429a      	cmp	r2, r3
 801319e:	d001      	beq.n	80131a4 <find_volume+0x220>
 80131a0:	230d      	movs	r3, #13
 80131a2:	e182      	b.n	80134aa <find_volume+0x526>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80131a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a6:	3338      	adds	r3, #56	@ 0x38
 80131a8:	3316      	adds	r3, #22
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fe f86e 	bl	801128c <ld_word>
 80131b0:	4603      	mov	r3, r0
 80131b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80131b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d106      	bne.n	80131c8 <find_volume+0x244>
 80131ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131bc:	3338      	adds	r3, #56	@ 0x38
 80131be:	3324      	adds	r3, #36	@ 0x24
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fe f87b 	bl	80112bc <ld_dword>
 80131c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80131c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80131cc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80131ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80131d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80131d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131da:	789b      	ldrb	r3, [r3, #2]
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d005      	beq.n	80131ec <find_volume+0x268>
 80131e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131e2:	789b      	ldrb	r3, [r3, #2]
 80131e4:	2b02      	cmp	r3, #2
 80131e6:	d001      	beq.n	80131ec <find_volume+0x268>
 80131e8:	230d      	movs	r3, #13
 80131ea:	e15e      	b.n	80134aa <find_volume+0x526>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80131ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ee:	789b      	ldrb	r3, [r3, #2]
 80131f0:	461a      	mov	r2, r3
 80131f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131f4:	fb02 f303 	mul.w	r3, r2, r3
 80131f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80131fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013200:	461a      	mov	r2, r3
 8013202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013204:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013208:	895b      	ldrh	r3, [r3, #10]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d008      	beq.n	8013220 <find_volume+0x29c>
 801320e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013210:	895b      	ldrh	r3, [r3, #10]
 8013212:	461a      	mov	r2, r3
 8013214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013216:	895b      	ldrh	r3, [r3, #10]
 8013218:	3b01      	subs	r3, #1
 801321a:	4013      	ands	r3, r2
 801321c:	2b00      	cmp	r3, #0
 801321e:	d005      	beq.n	801322c <find_volume+0x2a8>
 8013220:	230d      	movs	r3, #13
 8013222:	e142      	b.n	80134aa <find_volume+0x526>
 8013224:	24001834 	.word	0x24001834
 8013228:	24001828 	.word	0x24001828

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801322c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801322e:	3338      	adds	r3, #56	@ 0x38
 8013230:	3311      	adds	r3, #17
 8013232:	4618      	mov	r0, r3
 8013234:	f7fe f82a 	bl	801128c <ld_word>
 8013238:	4603      	mov	r3, r0
 801323a:	461a      	mov	r2, r3
 801323c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801323e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013242:	891b      	ldrh	r3, [r3, #8]
 8013244:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013246:	8992      	ldrh	r2, [r2, #12]
 8013248:	0952      	lsrs	r2, r2, #5
 801324a:	b292      	uxth	r2, r2
 801324c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013250:	fb01 f202 	mul.w	r2, r1, r2
 8013254:	1a9b      	subs	r3, r3, r2
 8013256:	b29b      	uxth	r3, r3
 8013258:	2b00      	cmp	r3, #0
 801325a:	d001      	beq.n	8013260 <find_volume+0x2dc>
 801325c:	230d      	movs	r3, #13
 801325e:	e124      	b.n	80134aa <find_volume+0x526>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013262:	3338      	adds	r3, #56	@ 0x38
 8013264:	3313      	adds	r3, #19
 8013266:	4618      	mov	r0, r3
 8013268:	f7fe f810 	bl	801128c <ld_word>
 801326c:	4603      	mov	r3, r0
 801326e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013270:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013272:	2b00      	cmp	r3, #0
 8013274:	d106      	bne.n	8013284 <find_volume+0x300>
 8013276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013278:	3338      	adds	r3, #56	@ 0x38
 801327a:	3320      	adds	r3, #32
 801327c:	4618      	mov	r0, r3
 801327e:	f7fe f81d 	bl	80112bc <ld_dword>
 8013282:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013286:	3338      	adds	r3, #56	@ 0x38
 8013288:	330e      	adds	r3, #14
 801328a:	4618      	mov	r0, r3
 801328c:	f7fd fffe 	bl	801128c <ld_word>
 8013290:	4603      	mov	r3, r0
 8013292:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013294:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013296:	2b00      	cmp	r3, #0
 8013298:	d101      	bne.n	801329e <find_volume+0x31a>
 801329a:	230d      	movs	r3, #13
 801329c:	e105      	b.n	80134aa <find_volume+0x526>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801329e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80132a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80132a2:	4413      	add	r3, r2
 80132a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80132a6:	8911      	ldrh	r1, [r2, #8]
 80132a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80132aa:	8992      	ldrh	r2, [r2, #12]
 80132ac:	0952      	lsrs	r2, r2, #5
 80132ae:	b292      	uxth	r2, r2
 80132b0:	fbb1 f2f2 	udiv	r2, r1, r2
 80132b4:	b292      	uxth	r2, r2
 80132b6:	4413      	add	r3, r2
 80132b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80132ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80132bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132be:	429a      	cmp	r2, r3
 80132c0:	d201      	bcs.n	80132c6 <find_volume+0x342>
 80132c2:	230d      	movs	r3, #13
 80132c4:	e0f1      	b.n	80134aa <find_volume+0x526>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80132c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80132c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ca:	1ad3      	subs	r3, r2, r3
 80132cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80132ce:	8952      	ldrh	r2, [r2, #10]
 80132d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80132d4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80132d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d101      	bne.n	80132e0 <find_volume+0x35c>
 80132dc:	230d      	movs	r3, #13
 80132de:	e0e4      	b.n	80134aa <find_volume+0x526>
		fmt = FS_FAT32;
 80132e0:	2303      	movs	r3, #3
 80132e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80132e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132e8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80132ec:	4293      	cmp	r3, r2
 80132ee:	d802      	bhi.n	80132f6 <find_volume+0x372>
 80132f0:	2302      	movs	r3, #2
 80132f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80132f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80132fc:	4293      	cmp	r3, r2
 80132fe:	d802      	bhi.n	8013306 <find_volume+0x382>
 8013300:	2301      	movs	r3, #1
 8013302:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013308:	1c9a      	adds	r2, r3, #2
 801330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801330c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801330e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013310:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013312:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013314:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013318:	441a      	add	r2, r3
 801331a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801331c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801331e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013322:	441a      	add	r2, r3
 8013324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013326:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8013328:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801332c:	2b03      	cmp	r3, #3
 801332e:	d11e      	bne.n	801336e <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013332:	3338      	adds	r3, #56	@ 0x38
 8013334:	332a      	adds	r3, #42	@ 0x2a
 8013336:	4618      	mov	r0, r3
 8013338:	f7fd ffa8 	bl	801128c <ld_word>
 801333c:	4603      	mov	r3, r0
 801333e:	2b00      	cmp	r3, #0
 8013340:	d001      	beq.n	8013346 <find_volume+0x3c2>
 8013342:	230d      	movs	r3, #13
 8013344:	e0b1      	b.n	80134aa <find_volume+0x526>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013348:	891b      	ldrh	r3, [r3, #8]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d001      	beq.n	8013352 <find_volume+0x3ce>
 801334e:	230d      	movs	r3, #13
 8013350:	e0ab      	b.n	80134aa <find_volume+0x526>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013354:	3338      	adds	r3, #56	@ 0x38
 8013356:	332c      	adds	r3, #44	@ 0x2c
 8013358:	4618      	mov	r0, r3
 801335a:	f7fd ffaf 	bl	80112bc <ld_dword>
 801335e:	4602      	mov	r2, r0
 8013360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013362:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013366:	69db      	ldr	r3, [r3, #28]
 8013368:	009b      	lsls	r3, r3, #2
 801336a:	647b      	str	r3, [r7, #68]	@ 0x44
 801336c:	e01f      	b.n	80133ae <find_volume+0x42a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801336e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013370:	891b      	ldrh	r3, [r3, #8]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d101      	bne.n	801337a <find_volume+0x3f6>
 8013376:	230d      	movs	r3, #13
 8013378:	e097      	b.n	80134aa <find_volume+0x526>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801337c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801337e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013380:	441a      	add	r2, r3
 8013382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013384:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013386:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801338a:	2b02      	cmp	r3, #2
 801338c:	d103      	bne.n	8013396 <find_volume+0x412>
 801338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013390:	69db      	ldr	r3, [r3, #28]
 8013392:	005b      	lsls	r3, r3, #1
 8013394:	e00a      	b.n	80133ac <find_volume+0x428>
 8013396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013398:	69da      	ldr	r2, [r3, #28]
 801339a:	4613      	mov	r3, r2
 801339c:	005b      	lsls	r3, r3, #1
 801339e:	4413      	add	r3, r2
 80133a0:	085a      	lsrs	r2, r3, #1
 80133a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a4:	69db      	ldr	r3, [r3, #28]
 80133a6:	f003 0301 	and.w	r3, r3, #1
 80133aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80133ac:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80133ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b0:	6a1a      	ldr	r2, [r3, #32]
 80133b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b4:	899b      	ldrh	r3, [r3, #12]
 80133b6:	4619      	mov	r1, r3
 80133b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133ba:	440b      	add	r3, r1
 80133bc:	3b01      	subs	r3, #1
 80133be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80133c0:	8989      	ldrh	r1, [r1, #12]
 80133c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d201      	bcs.n	80133ce <find_volume+0x44a>
 80133ca:	230d      	movs	r3, #13
 80133cc:	e06d      	b.n	80134aa <find_volume+0x526>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80133ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d0:	f04f 32ff 	mov.w	r2, #4294967295
 80133d4:	619a      	str	r2, [r3, #24]
 80133d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d8:	699a      	ldr	r2, [r3, #24]
 80133da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133dc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80133de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e0:	2280      	movs	r2, #128	@ 0x80
 80133e2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80133e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80133e8:	2b03      	cmp	r3, #3
 80133ea:	d149      	bne.n	8013480 <find_volume+0x4fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80133ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ee:	3338      	adds	r3, #56	@ 0x38
 80133f0:	3330      	adds	r3, #48	@ 0x30
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fd ff4a 	bl	801128c <ld_word>
 80133f8:	4603      	mov	r3, r0
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d140      	bne.n	8013480 <find_volume+0x4fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80133fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013400:	3301      	adds	r3, #1
 8013402:	4619      	mov	r1, r3
 8013404:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013406:	f7fe f9f1 	bl	80117ec <move_window>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d137      	bne.n	8013480 <find_volume+0x4fc>
		{
			fs->fsi_flag = 0;
 8013410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013412:	2200      	movs	r2, #0
 8013414:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013418:	3338      	adds	r3, #56	@ 0x38
 801341a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801341e:	4618      	mov	r0, r3
 8013420:	f7fd ff34 	bl	801128c <ld_word>
 8013424:	4603      	mov	r3, r0
 8013426:	461a      	mov	r2, r3
 8013428:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801342c:	429a      	cmp	r2, r3
 801342e:	d127      	bne.n	8013480 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013432:	3338      	adds	r3, #56	@ 0x38
 8013434:	4618      	mov	r0, r3
 8013436:	f7fd ff41 	bl	80112bc <ld_dword>
 801343a:	4603      	mov	r3, r0
 801343c:	4a1d      	ldr	r2, [pc, #116]	@ (80134b4 <find_volume+0x530>)
 801343e:	4293      	cmp	r3, r2
 8013440:	d11e      	bne.n	8013480 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013444:	3338      	adds	r3, #56	@ 0x38
 8013446:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801344a:	4618      	mov	r0, r3
 801344c:	f7fd ff36 	bl	80112bc <ld_dword>
 8013450:	4603      	mov	r3, r0
 8013452:	4a19      	ldr	r2, [pc, #100]	@ (80134b8 <find_volume+0x534>)
 8013454:	4293      	cmp	r3, r2
 8013456:	d113      	bne.n	8013480 <find_volume+0x4fc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801345a:	3338      	adds	r3, #56	@ 0x38
 801345c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013460:	4618      	mov	r0, r3
 8013462:	f7fd ff2b 	bl	80112bc <ld_dword>
 8013466:	4602      	mov	r2, r0
 8013468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801346a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801346c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801346e:	3338      	adds	r3, #56	@ 0x38
 8013470:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013474:	4618      	mov	r0, r3
 8013476:	f7fd ff21 	bl	80112bc <ld_dword>
 801347a:	4602      	mov	r2, r0
 801347c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801347e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013482:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013486:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013488:	4b0c      	ldr	r3, [pc, #48]	@ (80134bc <find_volume+0x538>)
 801348a:	881b      	ldrh	r3, [r3, #0]
 801348c:	3301      	adds	r3, #1
 801348e:	b29a      	uxth	r2, r3
 8013490:	4b0a      	ldr	r3, [pc, #40]	@ (80134bc <find_volume+0x538>)
 8013492:	801a      	strh	r2, [r3, #0]
 8013494:	4b09      	ldr	r3, [pc, #36]	@ (80134bc <find_volume+0x538>)
 8013496:	881a      	ldrh	r2, [r3, #0]
 8013498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801349a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801349c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801349e:	4a08      	ldr	r2, [pc, #32]	@ (80134c0 <find_volume+0x53c>)
 80134a0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80134a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80134a4:	f7fe f93a 	bl	801171c <clear_lock>
#endif
	return FR_OK;
 80134a8:	2300      	movs	r3, #0
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3758      	adds	r7, #88	@ 0x58
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	41615252 	.word	0x41615252
 80134b8:	61417272 	.word	0x61417272
 80134bc:	24001838 	.word	0x24001838
 80134c0:	2400185c 	.word	0x2400185c

080134c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b084      	sub	sp, #16
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80134ce:	2309      	movs	r3, #9
 80134d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d01c      	beq.n	8013512 <validate+0x4e>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d018      	beq.n	8013512 <validate+0x4e>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d013      	beq.n	8013512 <validate+0x4e>
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	889a      	ldrh	r2, [r3, #4]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	88db      	ldrh	r3, [r3, #6]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d10c      	bne.n	8013512 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	785b      	ldrb	r3, [r3, #1]
 80134fe:	4618      	mov	r0, r3
 8013500:	f7fd fe24 	bl	801114c <disk_status>
 8013504:	4603      	mov	r3, r0
 8013506:	f003 0301 	and.w	r3, r3, #1
 801350a:	2b00      	cmp	r3, #0
 801350c:	d101      	bne.n	8013512 <validate+0x4e>
			res = FR_OK;
 801350e:	2300      	movs	r3, #0
 8013510:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013512:	7bfb      	ldrb	r3, [r7, #15]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d102      	bne.n	801351e <validate+0x5a>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	e000      	b.n	8013520 <validate+0x5c>
 801351e:	2300      	movs	r3, #0
 8013520:	683a      	ldr	r2, [r7, #0]
 8013522:	6013      	str	r3, [r2, #0]
	return res;
 8013524:	7bfb      	ldrb	r3, [r7, #15]
}
 8013526:	4618      	mov	r0, r3
 8013528:	3710      	adds	r7, #16
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}
	...

08013530 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b088      	sub	sp, #32
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	4613      	mov	r3, r2
 801353c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013542:	f107 0310 	add.w	r3, r7, #16
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff fc82 	bl	8012e50 <get_ldnumber>
 801354c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	2b00      	cmp	r3, #0
 8013552:	da01      	bge.n	8013558 <f_mount+0x28>
 8013554:	230b      	movs	r3, #11
 8013556:	e02b      	b.n	80135b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013558:	4a17      	ldr	r2, [pc, #92]	@ (80135b8 <f_mount+0x88>)
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013560:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013562:	69bb      	ldr	r3, [r7, #24]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d005      	beq.n	8013574 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013568:	69b8      	ldr	r0, [r7, #24]
 801356a:	f7fe f8d7 	bl	801171c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	2200      	movs	r2, #0
 8013572:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d002      	beq.n	8013580 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2200      	movs	r2, #0
 801357e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013580:	68fa      	ldr	r2, [r7, #12]
 8013582:	490d      	ldr	r1, [pc, #52]	@ (80135b8 <f_mount+0x88>)
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d002      	beq.n	8013596 <f_mount+0x66>
 8013590:	79fb      	ldrb	r3, [r7, #7]
 8013592:	2b01      	cmp	r3, #1
 8013594:	d001      	beq.n	801359a <f_mount+0x6a>
 8013596:	2300      	movs	r3, #0
 8013598:	e00a      	b.n	80135b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801359a:	f107 010c 	add.w	r1, r7, #12
 801359e:	f107 0308 	add.w	r3, r7, #8
 80135a2:	2200      	movs	r2, #0
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7ff fced 	bl	8012f84 <find_volume>
 80135aa:	4603      	mov	r3, r0
 80135ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80135ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3720      	adds	r7, #32
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	24001834 	.word	0x24001834

080135bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b09a      	sub	sp, #104	@ 0x68
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	4613      	mov	r3, r2
 80135c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d101      	bne.n	80135d4 <f_open+0x18>
 80135d0:	2309      	movs	r3, #9
 80135d2:	e1b7      	b.n	8013944 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80135d4:	79fb      	ldrb	r3, [r7, #7]
 80135d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80135da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80135dc:	79fa      	ldrb	r2, [r7, #7]
 80135de:	f107 0114 	add.w	r1, r7, #20
 80135e2:	f107 0308 	add.w	r3, r7, #8
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7ff fccc 	bl	8012f84 <find_volume>
 80135ec:	4603      	mov	r3, r0
 80135ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80135f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	f040 819b 	bne.w	8013932 <f_open+0x376>
		dj.obj.fs = fs;
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013600:	68ba      	ldr	r2, [r7, #8]
 8013602:	f107 0318 	add.w	r3, r7, #24
 8013606:	4611      	mov	r1, r2
 8013608:	4618      	mov	r0, r3
 801360a:	f7ff fbab 	bl	8012d64 <follow_path>
 801360e:	4603      	mov	r3, r0
 8013610:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013614:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013618:	2b00      	cmp	r3, #0
 801361a:	d118      	bne.n	801364e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801361c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013620:	b25b      	sxtb	r3, r3
 8013622:	2b00      	cmp	r3, #0
 8013624:	da03      	bge.n	801362e <f_open+0x72>
				res = FR_INVALID_NAME;
 8013626:	2306      	movs	r3, #6
 8013628:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801362c:	e00f      	b.n	801364e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801362e:	79fb      	ldrb	r3, [r7, #7]
 8013630:	2b01      	cmp	r3, #1
 8013632:	bf8c      	ite	hi
 8013634:	2301      	movhi	r3, #1
 8013636:	2300      	movls	r3, #0
 8013638:	b2db      	uxtb	r3, r3
 801363a:	461a      	mov	r2, r3
 801363c:	f107 0318 	add.w	r3, r7, #24
 8013640:	4611      	mov	r1, r2
 8013642:	4618      	mov	r0, r3
 8013644:	f7fd ff22 	bl	801148c <chk_lock>
 8013648:	4603      	mov	r3, r0
 801364a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801364e:	79fb      	ldrb	r3, [r7, #7]
 8013650:	f003 031c 	and.w	r3, r3, #28
 8013654:	2b00      	cmp	r3, #0
 8013656:	d07f      	beq.n	8013758 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8013658:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801365c:	2b00      	cmp	r3, #0
 801365e:	d017      	beq.n	8013690 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013660:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013664:	2b04      	cmp	r3, #4
 8013666:	d10e      	bne.n	8013686 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013668:	f7fd ff6c 	bl	8011544 <enq_lock>
 801366c:	4603      	mov	r3, r0
 801366e:	2b00      	cmp	r3, #0
 8013670:	d006      	beq.n	8013680 <f_open+0xc4>
 8013672:	f107 0318 	add.w	r3, r7, #24
 8013676:	4618      	mov	r0, r3
 8013678:	f7ff f8c4 	bl	8012804 <dir_register>
 801367c:	4603      	mov	r3, r0
 801367e:	e000      	b.n	8013682 <f_open+0xc6>
 8013680:	2312      	movs	r3, #18
 8013682:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013686:	79fb      	ldrb	r3, [r7, #7]
 8013688:	f043 0308 	orr.w	r3, r3, #8
 801368c:	71fb      	strb	r3, [r7, #7]
 801368e:	e010      	b.n	80136b2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013690:	7fbb      	ldrb	r3, [r7, #30]
 8013692:	f003 0311 	and.w	r3, r3, #17
 8013696:	2b00      	cmp	r3, #0
 8013698:	d003      	beq.n	80136a2 <f_open+0xe6>
					res = FR_DENIED;
 801369a:	2307      	movs	r3, #7
 801369c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80136a0:	e007      	b.n	80136b2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80136a2:	79fb      	ldrb	r3, [r7, #7]
 80136a4:	f003 0304 	and.w	r3, r3, #4
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d002      	beq.n	80136b2 <f_open+0xf6>
 80136ac:	2308      	movs	r3, #8
 80136ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80136b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d168      	bne.n	801378c <f_open+0x1d0>
 80136ba:	79fb      	ldrb	r3, [r7, #7]
 80136bc:	f003 0308 	and.w	r3, r3, #8
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d063      	beq.n	801378c <f_open+0x1d0>
				dw = GET_FATTIME();
 80136c4:	f7fd fb04 	bl	8010cd0 <get_fattime>
 80136c8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80136ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136cc:	330e      	adds	r3, #14
 80136ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fd fe31 	bl	8011338 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80136d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136d8:	3316      	adds	r3, #22
 80136da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80136dc:	4618      	mov	r0, r3
 80136de:	f7fd fe2b 	bl	8011338 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80136e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136e4:	330b      	adds	r3, #11
 80136e6:	2220      	movs	r2, #32
 80136e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80136ee:	4611      	mov	r1, r2
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7fe fe00 	bl	80122f6 <ld_clust>
 80136f6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80136fc:	2200      	movs	r2, #0
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fe fe18 	bl	8012334 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013706:	331c      	adds	r3, #28
 8013708:	2100      	movs	r1, #0
 801370a:	4618      	mov	r0, r3
 801370c:	f7fd fe14 	bl	8011338 <st_dword>
					fs->wflag = 1;
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	2201      	movs	r2, #1
 8013714:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013718:	2b00      	cmp	r3, #0
 801371a:	d037      	beq.n	801378c <f_open+0x1d0>
						dw = fs->winsect;
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013720:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8013722:	f107 0318 	add.w	r3, r7, #24
 8013726:	2200      	movs	r2, #0
 8013728:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801372a:	4618      	mov	r0, r3
 801372c:	f7fe fb08 	bl	8011d40 <remove_chain>
 8013730:	4603      	mov	r3, r0
 8013732:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8013736:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801373a:	2b00      	cmp	r3, #0
 801373c:	d126      	bne.n	801378c <f_open+0x1d0>
							res = move_window(fs, dw);
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013742:	4618      	mov	r0, r3
 8013744:	f7fe f852 	bl	80117ec <move_window>
 8013748:	4603      	mov	r3, r0
 801374a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013752:	3a01      	subs	r2, #1
 8013754:	615a      	str	r2, [r3, #20]
 8013756:	e019      	b.n	801378c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013758:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801375c:	2b00      	cmp	r3, #0
 801375e:	d115      	bne.n	801378c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013760:	7fbb      	ldrb	r3, [r7, #30]
 8013762:	f003 0310 	and.w	r3, r3, #16
 8013766:	2b00      	cmp	r3, #0
 8013768:	d003      	beq.n	8013772 <f_open+0x1b6>
					res = FR_NO_FILE;
 801376a:	2304      	movs	r3, #4
 801376c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013770:	e00c      	b.n	801378c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013772:	79fb      	ldrb	r3, [r7, #7]
 8013774:	f003 0302 	and.w	r3, r3, #2
 8013778:	2b00      	cmp	r3, #0
 801377a:	d007      	beq.n	801378c <f_open+0x1d0>
 801377c:	7fbb      	ldrb	r3, [r7, #30]
 801377e:	f003 0301 	and.w	r3, r3, #1
 8013782:	2b00      	cmp	r3, #0
 8013784:	d002      	beq.n	801378c <f_open+0x1d0>
						res = FR_DENIED;
 8013786:	2307      	movs	r3, #7
 8013788:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801378c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013790:	2b00      	cmp	r3, #0
 8013792:	d126      	bne.n	80137e2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013794:	79fb      	ldrb	r3, [r7, #7]
 8013796:	f003 0308 	and.w	r3, r3, #8
 801379a:	2b00      	cmp	r3, #0
 801379c:	d003      	beq.n	80137a6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801379e:	79fb      	ldrb	r3, [r7, #7]
 80137a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80137ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80137b4:	79fb      	ldrb	r3, [r7, #7]
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	bf8c      	ite	hi
 80137ba:	2301      	movhi	r3, #1
 80137bc:	2300      	movls	r3, #0
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	461a      	mov	r2, r3
 80137c2:	f107 0318 	add.w	r3, r7, #24
 80137c6:	4611      	mov	r1, r2
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7fd fedd 	bl	8011588 <inc_lock>
 80137ce:	4602      	mov	r2, r0
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	691b      	ldr	r3, [r3, #16]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d102      	bne.n	80137e2 <f_open+0x226>
 80137dc:	2302      	movs	r3, #2
 80137de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80137e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	f040 80a3 	bne.w	8013932 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137f0:	4611      	mov	r1, r2
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fe fd7f 	bl	80122f6 <ld_clust>
 80137f8:	4602      	mov	r2, r0
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80137fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013800:	331c      	adds	r3, #28
 8013802:	4618      	mov	r0, r3
 8013804:	f7fd fd5a 	bl	80112bc <ld_dword>
 8013808:	4602      	mov	r2, r0
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	2200      	movs	r2, #0
 8013812:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013814:	697a      	ldr	r2, [r7, #20]
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	88da      	ldrh	r2, [r3, #6]
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	79fa      	ldrb	r2, [r7, #7]
 8013826:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2200      	movs	r2, #0
 801382c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	2200      	movs	r2, #0
 8013832:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2200      	movs	r2, #0
 8013838:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	3330      	adds	r3, #48	@ 0x30
 801383e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013842:	2100      	movs	r1, #0
 8013844:	4618      	mov	r0, r3
 8013846:	f7fd fdc4 	bl	80113d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801384a:	79fb      	ldrb	r3, [r7, #7]
 801384c:	f003 0320 	and.w	r3, r3, #32
 8013850:	2b00      	cmp	r3, #0
 8013852:	d06e      	beq.n	8013932 <f_open+0x376>
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	68db      	ldr	r3, [r3, #12]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d06a      	beq.n	8013932 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	68da      	ldr	r2, [r3, #12]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	895b      	ldrh	r3, [r3, #10]
 8013868:	461a      	mov	r2, r3
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	899b      	ldrh	r3, [r3, #12]
 801386e:	fb02 f303 	mul.w	r3, r2, r3
 8013872:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	689b      	ldr	r3, [r3, #8]
 8013878:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	68db      	ldr	r3, [r3, #12]
 801387e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013880:	e016      	b.n	80138b0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013886:	4618      	mov	r0, r3
 8013888:	f7fe f86d 	bl	8011966 <get_fat>
 801388c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801388e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013890:	2b01      	cmp	r3, #1
 8013892:	d802      	bhi.n	801389a <f_open+0x2de>
 8013894:	2302      	movs	r3, #2
 8013896:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801389a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a0:	d102      	bne.n	80138a8 <f_open+0x2ec>
 80138a2:	2301      	movs	r3, #1
 80138a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80138a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80138aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138ac:	1ad3      	subs	r3, r2, r3
 80138ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80138b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d103      	bne.n	80138c0 <f_open+0x304>
 80138b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80138ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138bc:	429a      	cmp	r2, r3
 80138be:	d8e0      	bhi.n	8013882 <f_open+0x2c6>
				}
				fp->clust = clst;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80138c4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80138c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d131      	bne.n	8013932 <f_open+0x376>
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	899b      	ldrh	r3, [r3, #12]
 80138d2:	461a      	mov	r2, r3
 80138d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80138d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80138da:	fb01 f202 	mul.w	r2, r1, r2
 80138de:	1a9b      	subs	r3, r3, r2
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d026      	beq.n	8013932 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fe f81d 	bl	8011928 <clust2sect>
 80138ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80138f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d103      	bne.n	80138fe <f_open+0x342>
						res = FR_INT_ERR;
 80138f6:	2302      	movs	r3, #2
 80138f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80138fc:	e019      	b.n	8013932 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	899b      	ldrh	r3, [r3, #12]
 8013902:	461a      	mov	r2, r3
 8013904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013906:	fbb3 f2f2 	udiv	r2, r3, r2
 801390a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801390c:	441a      	add	r2, r3
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	7858      	ldrb	r0, [r3, #1]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	6a1a      	ldr	r2, [r3, #32]
 8013920:	2301      	movs	r3, #1
 8013922:	f7fd fc55 	bl	80111d0 <disk_read>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d002      	beq.n	8013932 <f_open+0x376>
 801392c:	2301      	movs	r3, #1
 801392e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013932:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013936:	2b00      	cmp	r3, #0
 8013938:	d002      	beq.n	8013940 <f_open+0x384>
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2200      	movs	r2, #0
 801393e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013940:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8013944:	4618      	mov	r0, r3
 8013946:	3768      	adds	r7, #104	@ 0x68
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b08c      	sub	sp, #48	@ 0x30
 8013950:	af00      	add	r7, sp, #0
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	607a      	str	r2, [r7, #4]
 8013958:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	2200      	movs	r2, #0
 8013962:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f107 0210 	add.w	r2, r7, #16
 801396a:	4611      	mov	r1, r2
 801396c:	4618      	mov	r0, r3
 801396e:	f7ff fda9 	bl	80134c4 <validate>
 8013972:	4603      	mov	r3, r0
 8013974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801397c:	2b00      	cmp	r3, #0
 801397e:	d107      	bne.n	8013990 <f_write+0x44>
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	7d5b      	ldrb	r3, [r3, #21]
 8013984:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013988:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801398c:	2b00      	cmp	r3, #0
 801398e:	d002      	beq.n	8013996 <f_write+0x4a>
 8013990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013994:	e16a      	b.n	8013c6c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	7d1b      	ldrb	r3, [r3, #20]
 801399a:	f003 0302 	and.w	r3, r3, #2
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d101      	bne.n	80139a6 <f_write+0x5a>
 80139a2:	2307      	movs	r3, #7
 80139a4:	e162      	b.n	8013c6c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	699a      	ldr	r2, [r3, #24]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	441a      	add	r2, r3
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	699b      	ldr	r3, [r3, #24]
 80139b2:	429a      	cmp	r2, r3
 80139b4:	f080 814c 	bcs.w	8013c50 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	699b      	ldr	r3, [r3, #24]
 80139bc:	43db      	mvns	r3, r3
 80139be:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80139c0:	e146      	b.n	8013c50 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	699b      	ldr	r3, [r3, #24]
 80139c6:	693a      	ldr	r2, [r7, #16]
 80139c8:	8992      	ldrh	r2, [r2, #12]
 80139ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80139ce:	fb01 f202 	mul.w	r2, r1, r2
 80139d2:	1a9b      	subs	r3, r3, r2
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	f040 80f1 	bne.w	8013bbc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	699b      	ldr	r3, [r3, #24]
 80139de:	693a      	ldr	r2, [r7, #16]
 80139e0:	8992      	ldrh	r2, [r2, #12]
 80139e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80139e6:	693a      	ldr	r2, [r7, #16]
 80139e8:	8952      	ldrh	r2, [r2, #10]
 80139ea:	3a01      	subs	r2, #1
 80139ec:	4013      	ands	r3, r2
 80139ee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80139f0:	69bb      	ldr	r3, [r7, #24]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d143      	bne.n	8013a7e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	699b      	ldr	r3, [r3, #24]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d10c      	bne.n	8013a18 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	689b      	ldr	r3, [r3, #8]
 8013a02:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d11a      	bne.n	8013a40 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	2100      	movs	r1, #0
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7fe f9fb 	bl	8011e0a <create_chain>
 8013a14:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013a16:	e013      	b.n	8013a40 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d007      	beq.n	8013a30 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	699b      	ldr	r3, [r3, #24]
 8013a24:	4619      	mov	r1, r3
 8013a26:	68f8      	ldr	r0, [r7, #12]
 8013a28:	f7fe fa87 	bl	8011f3a <clmt_clust>
 8013a2c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013a2e:	e007      	b.n	8013a40 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013a30:	68fa      	ldr	r2, [r7, #12]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	69db      	ldr	r3, [r3, #28]
 8013a36:	4619      	mov	r1, r3
 8013a38:	4610      	mov	r0, r2
 8013a3a:	f7fe f9e6 	bl	8011e0a <create_chain>
 8013a3e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	f000 8109 	beq.w	8013c5a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d104      	bne.n	8013a58 <f_write+0x10c>
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2202      	movs	r2, #2
 8013a52:	755a      	strb	r2, [r3, #21]
 8013a54:	2302      	movs	r3, #2
 8013a56:	e109      	b.n	8013c6c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a5e:	d104      	bne.n	8013a6a <f_write+0x11e>
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	2201      	movs	r2, #1
 8013a64:	755a      	strb	r2, [r3, #21]
 8013a66:	2301      	movs	r3, #1
 8013a68:	e100      	b.n	8013c6c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a6e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	689b      	ldr	r3, [r3, #8]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d102      	bne.n	8013a7e <f_write+0x132>
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a7c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	7d1b      	ldrb	r3, [r3, #20]
 8013a82:	b25b      	sxtb	r3, r3
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	da18      	bge.n	8013aba <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	7858      	ldrb	r0, [r3, #1]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	6a1a      	ldr	r2, [r3, #32]
 8013a96:	2301      	movs	r3, #1
 8013a98:	f7fd fbba 	bl	8011210 <disk_write>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d004      	beq.n	8013aac <f_write+0x160>
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2201      	movs	r2, #1
 8013aa6:	755a      	strb	r2, [r3, #21]
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	e0df      	b.n	8013c6c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	7d1b      	ldrb	r3, [r3, #20]
 8013ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ab4:	b2da      	uxtb	r2, r3
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013aba:	693a      	ldr	r2, [r7, #16]
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	69db      	ldr	r3, [r3, #28]
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	4610      	mov	r0, r2
 8013ac4:	f7fd ff30 	bl	8011928 <clust2sect>
 8013ac8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d104      	bne.n	8013ada <f_write+0x18e>
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2202      	movs	r2, #2
 8013ad4:	755a      	strb	r2, [r3, #21]
 8013ad6:	2302      	movs	r3, #2
 8013ad8:	e0c8      	b.n	8013c6c <f_write+0x320>
			sect += csect;
 8013ada:	697a      	ldr	r2, [r7, #20]
 8013adc:	69bb      	ldr	r3, [r7, #24]
 8013ade:	4413      	add	r3, r2
 8013ae0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013ae2:	693b      	ldr	r3, [r7, #16]
 8013ae4:	899b      	ldrh	r3, [r3, #12]
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8013aee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013af0:	6a3b      	ldr	r3, [r7, #32]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d043      	beq.n	8013b7e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013af6:	69ba      	ldr	r2, [r7, #24]
 8013af8:	6a3b      	ldr	r3, [r7, #32]
 8013afa:	4413      	add	r3, r2
 8013afc:	693a      	ldr	r2, [r7, #16]
 8013afe:	8952      	ldrh	r2, [r2, #10]
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d905      	bls.n	8013b10 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013b04:	693b      	ldr	r3, [r7, #16]
 8013b06:	895b      	ldrh	r3, [r3, #10]
 8013b08:	461a      	mov	r2, r3
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	1ad3      	subs	r3, r2, r3
 8013b0e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	7858      	ldrb	r0, [r3, #1]
 8013b14:	6a3b      	ldr	r3, [r7, #32]
 8013b16:	697a      	ldr	r2, [r7, #20]
 8013b18:	69f9      	ldr	r1, [r7, #28]
 8013b1a:	f7fd fb79 	bl	8011210 <disk_write>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d004      	beq.n	8013b2e <f_write+0x1e2>
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	2201      	movs	r2, #1
 8013b28:	755a      	strb	r2, [r3, #21]
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	e09e      	b.n	8013c6c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	6a1a      	ldr	r2, [r3, #32]
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	1ad3      	subs	r3, r2, r3
 8013b36:	6a3a      	ldr	r2, [r7, #32]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d918      	bls.n	8013b6e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	6a1a      	ldr	r2, [r3, #32]
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	1ad3      	subs	r3, r2, r3
 8013b4a:	693a      	ldr	r2, [r7, #16]
 8013b4c:	8992      	ldrh	r2, [r2, #12]
 8013b4e:	fb02 f303 	mul.w	r3, r2, r3
 8013b52:	69fa      	ldr	r2, [r7, #28]
 8013b54:	18d1      	adds	r1, r2, r3
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	899b      	ldrh	r3, [r3, #12]
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	f7fd fc18 	bl	8011390 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	7d1b      	ldrb	r3, [r3, #20]
 8013b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b68:	b2da      	uxtb	r2, r3
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013b6e:	693b      	ldr	r3, [r7, #16]
 8013b70:	899b      	ldrh	r3, [r3, #12]
 8013b72:	461a      	mov	r2, r3
 8013b74:	6a3b      	ldr	r3, [r7, #32]
 8013b76:	fb02 f303 	mul.w	r3, r2, r3
 8013b7a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013b7c:	e04b      	b.n	8013c16 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6a1b      	ldr	r3, [r3, #32]
 8013b82:	697a      	ldr	r2, [r7, #20]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d016      	beq.n	8013bb6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	699a      	ldr	r2, [r3, #24]
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d210      	bcs.n	8013bb6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	7858      	ldrb	r0, [r3, #1]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	697a      	ldr	r2, [r7, #20]
 8013ba2:	f7fd fb15 	bl	80111d0 <disk_read>
 8013ba6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d004      	beq.n	8013bb6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2201      	movs	r2, #1
 8013bb0:	755a      	strb	r2, [r3, #21]
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e05a      	b.n	8013c6c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	697a      	ldr	r2, [r7, #20]
 8013bba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	899b      	ldrh	r3, [r3, #12]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	699b      	ldr	r3, [r3, #24]
 8013bc6:	693a      	ldr	r2, [r7, #16]
 8013bc8:	8992      	ldrh	r2, [r2, #12]
 8013bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bce:	fb01 f202 	mul.w	r2, r1, r2
 8013bd2:	1a9b      	subs	r3, r3, r2
 8013bd4:	1ac3      	subs	r3, r0, r3
 8013bd6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d901      	bls.n	8013be4 <f_write+0x298>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	699b      	ldr	r3, [r3, #24]
 8013bee:	693a      	ldr	r2, [r7, #16]
 8013bf0:	8992      	ldrh	r2, [r2, #12]
 8013bf2:	fbb3 f0f2 	udiv	r0, r3, r2
 8013bf6:	fb00 f202 	mul.w	r2, r0, r2
 8013bfa:	1a9b      	subs	r3, r3, r2
 8013bfc:	440b      	add	r3, r1
 8013bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c00:	69f9      	ldr	r1, [r7, #28]
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7fd fbc4 	bl	8011390 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	7d1b      	ldrb	r3, [r3, #20]
 8013c0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013c10:	b2da      	uxtb	r2, r3
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c16:	69fa      	ldr	r2, [r7, #28]
 8013c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c1a:	4413      	add	r3, r2
 8013c1c:	61fb      	str	r3, [r7, #28]
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	699a      	ldr	r2, [r3, #24]
 8013c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c24:	441a      	add	r2, r3
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	619a      	str	r2, [r3, #24]
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	68da      	ldr	r2, [r3, #12]
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	699b      	ldr	r3, [r3, #24]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	bf38      	it	cc
 8013c36:	461a      	movcc	r2, r3
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	60da      	str	r2, [r3, #12]
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c42:	441a      	add	r2, r3
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	601a      	str	r2, [r3, #0]
 8013c48:	687a      	ldr	r2, [r7, #4]
 8013c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4c:	1ad3      	subs	r3, r2, r3
 8013c4e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	f47f aeb5 	bne.w	80139c2 <f_write+0x76>
 8013c58:	e000      	b.n	8013c5c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c5a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	7d1b      	ldrb	r3, [r3, #20]
 8013c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c64:	b2da      	uxtb	r2, r3
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013c6a:	2300      	movs	r3, #0
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3730      	adds	r7, #48	@ 0x30
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b086      	sub	sp, #24
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f107 0208 	add.w	r2, r7, #8
 8013c82:	4611      	mov	r1, r2
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7ff fc1d 	bl	80134c4 <validate>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c8e:	7dfb      	ldrb	r3, [r7, #23]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d168      	bne.n	8013d66 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	7d1b      	ldrb	r3, [r3, #20]
 8013c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d062      	beq.n	8013d66 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	7d1b      	ldrb	r3, [r3, #20]
 8013ca4:	b25b      	sxtb	r3, r3
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	da15      	bge.n	8013cd6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	7858      	ldrb	r0, [r3, #1]
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6a1a      	ldr	r2, [r3, #32]
 8013cb8:	2301      	movs	r3, #1
 8013cba:	f7fd faa9 	bl	8011210 <disk_write>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d001      	beq.n	8013cc8 <f_sync+0x54>
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	e04f      	b.n	8013d68 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	7d1b      	ldrb	r3, [r3, #20]
 8013ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013cd0:	b2da      	uxtb	r2, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013cd6:	f7fc fffb 	bl	8010cd0 <get_fattime>
 8013cda:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013cdc:	68ba      	ldr	r2, [r7, #8]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	4610      	mov	r0, r2
 8013ce6:	f7fd fd81 	bl	80117ec <move_window>
 8013cea:	4603      	mov	r3, r0
 8013cec:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013cee:	7dfb      	ldrb	r3, [r7, #23]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d138      	bne.n	8013d66 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cf8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	330b      	adds	r3, #11
 8013cfe:	781a      	ldrb	r2, [r3, #0]
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	330b      	adds	r3, #11
 8013d04:	f042 0220 	orr.w	r2, r2, #32
 8013d08:	b2d2      	uxtb	r2, r2
 8013d0a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6818      	ldr	r0, [r3, #0]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	689b      	ldr	r3, [r3, #8]
 8013d14:	461a      	mov	r2, r3
 8013d16:	68f9      	ldr	r1, [r7, #12]
 8013d18:	f7fe fb0c 	bl	8012334 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f103 021c 	add.w	r2, r3, #28
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	68db      	ldr	r3, [r3, #12]
 8013d26:	4619      	mov	r1, r3
 8013d28:	4610      	mov	r0, r2
 8013d2a:	f7fd fb05 	bl	8011338 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	3316      	adds	r3, #22
 8013d32:	6939      	ldr	r1, [r7, #16]
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7fd faff 	bl	8011338 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	3312      	adds	r3, #18
 8013d3e:	2100      	movs	r1, #0
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fd fade 	bl	8011302 <st_word>
					fs->wflag = 1;
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	2201      	movs	r2, #1
 8013d4a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fd fd7a 	bl	8011848 <sync_fs>
 8013d54:	4603      	mov	r3, r0
 8013d56:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	7d1b      	ldrb	r3, [r3, #20]
 8013d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013d60:	b2da      	uxtb	r2, r3
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3718      	adds	r7, #24
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f7ff ff7b 	bl	8013c74 <f_sync>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013d82:	7bfb      	ldrb	r3, [r7, #15]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d118      	bne.n	8013dba <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f107 0208 	add.w	r2, r7, #8
 8013d8e:	4611      	mov	r1, r2
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7ff fb97 	bl	80134c4 <validate>
 8013d96:	4603      	mov	r3, r0
 8013d98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013d9a:	7bfb      	ldrb	r3, [r7, #15]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d10c      	bne.n	8013dba <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	691b      	ldr	r3, [r3, #16]
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7fd fc7d 	bl	80116a4 <dec_lock>
 8013daa:	4603      	mov	r3, r0
 8013dac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013dae:	7bfb      	ldrb	r3, [r7, #15]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d102      	bne.n	8013dba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2200      	movs	r2, #0
 8013db8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3710      	adds	r7, #16
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b092      	sub	sp, #72	@ 0x48
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013dd0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8013dd4:	f107 030c 	add.w	r3, r7, #12
 8013dd8:	2200      	movs	r2, #0
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7ff f8d2 	bl	8012f84 <find_volume>
 8013de0:	4603      	mov	r3, r0
 8013de2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8013de6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	f040 8099 	bne.w	8013f22 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8013df0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8013df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013df8:	699a      	ldr	r2, [r3, #24]
 8013dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dfc:	69db      	ldr	r3, [r3, #28]
 8013dfe:	3b02      	subs	r3, #2
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d804      	bhi.n	8013e0e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8013e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e06:	699a      	ldr	r2, [r3, #24]
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	601a      	str	r2, [r3, #0]
 8013e0c:	e089      	b.n	8013f22 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8013e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d128      	bne.n	8013e6c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8013e1a:	2302      	movs	r3, #2
 8013e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e20:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8013e22:	f107 0314 	add.w	r3, r7, #20
 8013e26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7fd fd9c 	bl	8011966 <get_fat>
 8013e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8013e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e36:	d103      	bne.n	8013e40 <f_getfree+0x7c>
 8013e38:	2301      	movs	r3, #1
 8013e3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013e3e:	e063      	b.n	8013f08 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8013e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e42:	2b01      	cmp	r3, #1
 8013e44:	d103      	bne.n	8013e4e <f_getfree+0x8a>
 8013e46:	2302      	movs	r3, #2
 8013e48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013e4c:	e05c      	b.n	8013f08 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8013e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d102      	bne.n	8013e5a <f_getfree+0x96>
 8013e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e56:	3301      	adds	r3, #1
 8013e58:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8013e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e62:	69db      	ldr	r3, [r3, #28]
 8013e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d3db      	bcc.n	8013e22 <f_getfree+0x5e>
 8013e6a:	e04d      	b.n	8013f08 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8013e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e6e:	69db      	ldr	r3, [r3, #28]
 8013e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e76:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8013e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d113      	bne.n	8013eae <f_getfree+0xea>
							res = move_window(fs, sect++);
 8013e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e8a:	1c5a      	adds	r2, r3, #1
 8013e8c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8013e8e:	4619      	mov	r1, r3
 8013e90:	f7fd fcac 	bl	80117ec <move_window>
 8013e94:	4603      	mov	r3, r0
 8013e96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8013e9a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d131      	bne.n	8013f06 <f_getfree+0x142>
							p = fs->win;
 8013ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ea4:	3338      	adds	r3, #56	@ 0x38
 8013ea6:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8013ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eaa:	899b      	ldrh	r3, [r3, #12]
 8013eac:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8013eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	2b02      	cmp	r3, #2
 8013eb4:	d10f      	bne.n	8013ed6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8013eb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013eb8:	f7fd f9e8 	bl	801128c <ld_word>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d102      	bne.n	8013ec8 <f_getfree+0x104>
 8013ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ec4:	3301      	adds	r3, #1
 8013ec6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8013ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eca:	3302      	adds	r3, #2
 8013ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ed0:	3b02      	subs	r3, #2
 8013ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ed4:	e010      	b.n	8013ef8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8013ed6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ed8:	f7fd f9f0 	bl	80112bc <ld_dword>
 8013edc:	4603      	mov	r3, r0
 8013ede:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d102      	bne.n	8013eec <f_getfree+0x128>
 8013ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ee8:	3301      	adds	r3, #1
 8013eea:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8013eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eee:	3304      	adds	r3, #4
 8013ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ef4:	3b04      	subs	r3, #4
 8013ef6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8013ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013efa:	3b01      	subs	r3, #1
 8013efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d1bd      	bne.n	8013e80 <f_getfree+0xbc>
 8013f04:	e000      	b.n	8013f08 <f_getfree+0x144>
							if (res != FR_OK) break;
 8013f06:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013f0c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8013f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013f12:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8013f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f16:	791a      	ldrb	r2, [r3, #4]
 8013f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f1a:	f042 0201 	orr.w	r2, r2, #1
 8013f1e:	b2d2      	uxtb	r2, r2
 8013f20:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8013f22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3748      	adds	r7, #72	@ 0x48
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}
	...

08013f30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b087      	sub	sp, #28
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	60b9      	str	r1, [r7, #8]
 8013f3a:	4613      	mov	r3, r2
 8013f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013f3e:	2301      	movs	r3, #1
 8013f40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013f46:	4b1f      	ldr	r3, [pc, #124]	@ (8013fc4 <FATFS_LinkDriverEx+0x94>)
 8013f48:	7a5b      	ldrb	r3, [r3, #9]
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d131      	bne.n	8013fb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013f50:	4b1c      	ldr	r3, [pc, #112]	@ (8013fc4 <FATFS_LinkDriverEx+0x94>)
 8013f52:	7a5b      	ldrb	r3, [r3, #9]
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	461a      	mov	r2, r3
 8013f58:	4b1a      	ldr	r3, [pc, #104]	@ (8013fc4 <FATFS_LinkDriverEx+0x94>)
 8013f5a:	2100      	movs	r1, #0
 8013f5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013f5e:	4b19      	ldr	r3, [pc, #100]	@ (8013fc4 <FATFS_LinkDriverEx+0x94>)
 8013f60:	7a5b      	ldrb	r3, [r3, #9]
 8013f62:	b2db      	uxtb	r3, r3
 8013f64:	4a17      	ldr	r2, [pc, #92]	@ (8013fc4 <FATFS_LinkDriverEx+0x94>)
 8013f66:	009b      	lsls	r3, r3, #2
 8013f68:	4413      	add	r3, r2
 8013f6a:	68fa      	ldr	r2, [r7, #12]
 8013f6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013f6e:	4b15      	ldr	r3, [pc, #84]	@ (8013fc4 <FATFS_LinkDriverEx+0x94>)
 8013f70:	7a5b      	ldrb	r3, [r3, #9]
 8013f72:	b2db      	uxtb	r3, r3
 8013f74:	461a      	mov	r2, r3
 8013f76:	4b13      	ldr	r3, [pc, #76]	@ (8013fc4 <FATFS_LinkDriverEx+0x94>)
 8013f78:	4413      	add	r3, r2
 8013f7a:	79fa      	ldrb	r2, [r7, #7]
 8013f7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013f7e:	4b11      	ldr	r3, [pc, #68]	@ (8013fc4 <FATFS_LinkDriverEx+0x94>)
 8013f80:	7a5b      	ldrb	r3, [r3, #9]
 8013f82:	b2db      	uxtb	r3, r3
 8013f84:	1c5a      	adds	r2, r3, #1
 8013f86:	b2d1      	uxtb	r1, r2
 8013f88:	4a0e      	ldr	r2, [pc, #56]	@ (8013fc4 <FATFS_LinkDriverEx+0x94>)
 8013f8a:	7251      	strb	r1, [r2, #9]
 8013f8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013f8e:	7dbb      	ldrb	r3, [r7, #22]
 8013f90:	3330      	adds	r3, #48	@ 0x30
 8013f92:	b2da      	uxtb	r2, r3
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	223a      	movs	r2, #58	@ 0x3a
 8013f9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	3302      	adds	r3, #2
 8013fa4:	222f      	movs	r2, #47	@ 0x2f
 8013fa6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	3303      	adds	r3, #3
 8013fac:	2200      	movs	r2, #0
 8013fae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	371c      	adds	r7, #28
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	24001a5c 	.word	0x24001a5c

08013fc8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	6839      	ldr	r1, [r7, #0]
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f7ff ffaa 	bl	8013f30 <FATFS_LinkDriverEx>
 8013fdc:	4603      	mov	r3, r0
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3708      	adds	r7, #8
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
	...

08013fe8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8013fe8:	b480      	push	{r7}
 8013fea:	b085      	sub	sp, #20
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	4603      	mov	r3, r0
 8013ff0:	6039      	str	r1, [r7, #0]
 8013ff2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013ff4:	88fb      	ldrh	r3, [r7, #6]
 8013ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ff8:	d802      	bhi.n	8014000 <ff_convert+0x18>
		c = chr;
 8013ffa:	88fb      	ldrh	r3, [r7, #6]
 8013ffc:	81fb      	strh	r3, [r7, #14]
 8013ffe:	e025      	b.n	801404c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d00b      	beq.n	801401e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014006:	88fb      	ldrh	r3, [r7, #6]
 8014008:	2bff      	cmp	r3, #255	@ 0xff
 801400a:	d805      	bhi.n	8014018 <ff_convert+0x30>
 801400c:	88fb      	ldrh	r3, [r7, #6]
 801400e:	3b80      	subs	r3, #128	@ 0x80
 8014010:	4a12      	ldr	r2, [pc, #72]	@ (801405c <ff_convert+0x74>)
 8014012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014016:	e000      	b.n	801401a <ff_convert+0x32>
 8014018:	2300      	movs	r3, #0
 801401a:	81fb      	strh	r3, [r7, #14]
 801401c:	e016      	b.n	801404c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801401e:	2300      	movs	r3, #0
 8014020:	81fb      	strh	r3, [r7, #14]
 8014022:	e009      	b.n	8014038 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014024:	89fb      	ldrh	r3, [r7, #14]
 8014026:	4a0d      	ldr	r2, [pc, #52]	@ (801405c <ff_convert+0x74>)
 8014028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801402c:	88fa      	ldrh	r2, [r7, #6]
 801402e:	429a      	cmp	r2, r3
 8014030:	d006      	beq.n	8014040 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014032:	89fb      	ldrh	r3, [r7, #14]
 8014034:	3301      	adds	r3, #1
 8014036:	81fb      	strh	r3, [r7, #14]
 8014038:	89fb      	ldrh	r3, [r7, #14]
 801403a:	2b7f      	cmp	r3, #127	@ 0x7f
 801403c:	d9f2      	bls.n	8014024 <ff_convert+0x3c>
 801403e:	e000      	b.n	8014042 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014040:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014042:	89fb      	ldrh	r3, [r7, #14]
 8014044:	3380      	adds	r3, #128	@ 0x80
 8014046:	b29b      	uxth	r3, r3
 8014048:	b2db      	uxtb	r3, r3
 801404a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801404c:	89fb      	ldrh	r3, [r7, #14]
}
 801404e:	4618      	mov	r0, r3
 8014050:	3714      	adds	r7, #20
 8014052:	46bd      	mov	sp, r7
 8014054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014058:	4770      	bx	lr
 801405a:	bf00      	nop
 801405c:	08015040 	.word	0x08015040

08014060 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014060:	b480      	push	{r7}
 8014062:	b087      	sub	sp, #28
 8014064:	af00      	add	r7, sp, #0
 8014066:	4603      	mov	r3, r0
 8014068:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801406a:	88fb      	ldrh	r3, [r7, #6]
 801406c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014070:	d201      	bcs.n	8014076 <ff_wtoupper+0x16>
 8014072:	4b3e      	ldr	r3, [pc, #248]	@ (801416c <ff_wtoupper+0x10c>)
 8014074:	e000      	b.n	8014078 <ff_wtoupper+0x18>
 8014076:	4b3e      	ldr	r3, [pc, #248]	@ (8014170 <ff_wtoupper+0x110>)
 8014078:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	1c9a      	adds	r2, r3, #2
 801407e:	617a      	str	r2, [r7, #20]
 8014080:	881b      	ldrh	r3, [r3, #0]
 8014082:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014084:	8a7b      	ldrh	r3, [r7, #18]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d068      	beq.n	801415c <ff_wtoupper+0xfc>
 801408a:	88fa      	ldrh	r2, [r7, #6]
 801408c:	8a7b      	ldrh	r3, [r7, #18]
 801408e:	429a      	cmp	r2, r3
 8014090:	d364      	bcc.n	801415c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	1c9a      	adds	r2, r3, #2
 8014096:	617a      	str	r2, [r7, #20]
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	823b      	strh	r3, [r7, #16]
 801409c:	8a3b      	ldrh	r3, [r7, #16]
 801409e:	0a1b      	lsrs	r3, r3, #8
 80140a0:	81fb      	strh	r3, [r7, #14]
 80140a2:	8a3b      	ldrh	r3, [r7, #16]
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80140a8:	88fa      	ldrh	r2, [r7, #6]
 80140aa:	8a79      	ldrh	r1, [r7, #18]
 80140ac:	8a3b      	ldrh	r3, [r7, #16]
 80140ae:	440b      	add	r3, r1
 80140b0:	429a      	cmp	r2, r3
 80140b2:	da49      	bge.n	8014148 <ff_wtoupper+0xe8>
			switch (cmd) {
 80140b4:	89fb      	ldrh	r3, [r7, #14]
 80140b6:	2b08      	cmp	r3, #8
 80140b8:	d84f      	bhi.n	801415a <ff_wtoupper+0xfa>
 80140ba:	a201      	add	r2, pc, #4	@ (adr r2, 80140c0 <ff_wtoupper+0x60>)
 80140bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140c0:	080140e5 	.word	0x080140e5
 80140c4:	080140f7 	.word	0x080140f7
 80140c8:	0801410d 	.word	0x0801410d
 80140cc:	08014115 	.word	0x08014115
 80140d0:	0801411d 	.word	0x0801411d
 80140d4:	08014125 	.word	0x08014125
 80140d8:	0801412d 	.word	0x0801412d
 80140dc:	08014135 	.word	0x08014135
 80140e0:	0801413d 	.word	0x0801413d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80140e4:	88fa      	ldrh	r2, [r7, #6]
 80140e6:	8a7b      	ldrh	r3, [r7, #18]
 80140e8:	1ad3      	subs	r3, r2, r3
 80140ea:	005b      	lsls	r3, r3, #1
 80140ec:	697a      	ldr	r2, [r7, #20]
 80140ee:	4413      	add	r3, r2
 80140f0:	881b      	ldrh	r3, [r3, #0]
 80140f2:	80fb      	strh	r3, [r7, #6]
 80140f4:	e027      	b.n	8014146 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80140f6:	88fa      	ldrh	r2, [r7, #6]
 80140f8:	8a7b      	ldrh	r3, [r7, #18]
 80140fa:	1ad3      	subs	r3, r2, r3
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	f003 0301 	and.w	r3, r3, #1
 8014102:	b29b      	uxth	r3, r3
 8014104:	88fa      	ldrh	r2, [r7, #6]
 8014106:	1ad3      	subs	r3, r2, r3
 8014108:	80fb      	strh	r3, [r7, #6]
 801410a:	e01c      	b.n	8014146 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801410c:	88fb      	ldrh	r3, [r7, #6]
 801410e:	3b10      	subs	r3, #16
 8014110:	80fb      	strh	r3, [r7, #6]
 8014112:	e018      	b.n	8014146 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014114:	88fb      	ldrh	r3, [r7, #6]
 8014116:	3b20      	subs	r3, #32
 8014118:	80fb      	strh	r3, [r7, #6]
 801411a:	e014      	b.n	8014146 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801411c:	88fb      	ldrh	r3, [r7, #6]
 801411e:	3b30      	subs	r3, #48	@ 0x30
 8014120:	80fb      	strh	r3, [r7, #6]
 8014122:	e010      	b.n	8014146 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014124:	88fb      	ldrh	r3, [r7, #6]
 8014126:	3b1a      	subs	r3, #26
 8014128:	80fb      	strh	r3, [r7, #6]
 801412a:	e00c      	b.n	8014146 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801412c:	88fb      	ldrh	r3, [r7, #6]
 801412e:	3308      	adds	r3, #8
 8014130:	80fb      	strh	r3, [r7, #6]
 8014132:	e008      	b.n	8014146 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014134:	88fb      	ldrh	r3, [r7, #6]
 8014136:	3b50      	subs	r3, #80	@ 0x50
 8014138:	80fb      	strh	r3, [r7, #6]
 801413a:	e004      	b.n	8014146 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801413c:	88fb      	ldrh	r3, [r7, #6]
 801413e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8014142:	80fb      	strh	r3, [r7, #6]
 8014144:	bf00      	nop
			}
			break;
 8014146:	e008      	b.n	801415a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014148:	89fb      	ldrh	r3, [r7, #14]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d195      	bne.n	801407a <ff_wtoupper+0x1a>
 801414e:	8a3b      	ldrh	r3, [r7, #16]
 8014150:	005b      	lsls	r3, r3, #1
 8014152:	697a      	ldr	r2, [r7, #20]
 8014154:	4413      	add	r3, r2
 8014156:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014158:	e78f      	b.n	801407a <ff_wtoupper+0x1a>
			break;
 801415a:	bf00      	nop
	}

	return chr;
 801415c:	88fb      	ldrh	r3, [r7, #6]
}
 801415e:	4618      	mov	r0, r3
 8014160:	371c      	adds	r7, #28
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop
 801416c:	08015140 	.word	0x08015140
 8014170:	08015334 	.word	0x08015334

08014174 <siprintf>:
 8014174:	b40e      	push	{r1, r2, r3}
 8014176:	b500      	push	{lr}
 8014178:	b09c      	sub	sp, #112	@ 0x70
 801417a:	ab1d      	add	r3, sp, #116	@ 0x74
 801417c:	9002      	str	r0, [sp, #8]
 801417e:	9006      	str	r0, [sp, #24]
 8014180:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014184:	4809      	ldr	r0, [pc, #36]	@ (80141ac <siprintf+0x38>)
 8014186:	9107      	str	r1, [sp, #28]
 8014188:	9104      	str	r1, [sp, #16]
 801418a:	4909      	ldr	r1, [pc, #36]	@ (80141b0 <siprintf+0x3c>)
 801418c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014190:	9105      	str	r1, [sp, #20]
 8014192:	6800      	ldr	r0, [r0, #0]
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	a902      	add	r1, sp, #8
 8014198:	f000 f9a2 	bl	80144e0 <_svfiprintf_r>
 801419c:	9b02      	ldr	r3, [sp, #8]
 801419e:	2200      	movs	r2, #0
 80141a0:	701a      	strb	r2, [r3, #0]
 80141a2:	b01c      	add	sp, #112	@ 0x70
 80141a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80141a8:	b003      	add	sp, #12
 80141aa:	4770      	bx	lr
 80141ac:	2400001c 	.word	0x2400001c
 80141b0:	ffff0208 	.word	0xffff0208

080141b4 <memset>:
 80141b4:	4402      	add	r2, r0
 80141b6:	4603      	mov	r3, r0
 80141b8:	4293      	cmp	r3, r2
 80141ba:	d100      	bne.n	80141be <memset+0xa>
 80141bc:	4770      	bx	lr
 80141be:	f803 1b01 	strb.w	r1, [r3], #1
 80141c2:	e7f9      	b.n	80141b8 <memset+0x4>

080141c4 <__errno>:
 80141c4:	4b01      	ldr	r3, [pc, #4]	@ (80141cc <__errno+0x8>)
 80141c6:	6818      	ldr	r0, [r3, #0]
 80141c8:	4770      	bx	lr
 80141ca:	bf00      	nop
 80141cc:	2400001c 	.word	0x2400001c

080141d0 <__libc_init_array>:
 80141d0:	b570      	push	{r4, r5, r6, lr}
 80141d2:	4d0d      	ldr	r5, [pc, #52]	@ (8014208 <__libc_init_array+0x38>)
 80141d4:	4c0d      	ldr	r4, [pc, #52]	@ (801420c <__libc_init_array+0x3c>)
 80141d6:	1b64      	subs	r4, r4, r5
 80141d8:	10a4      	asrs	r4, r4, #2
 80141da:	2600      	movs	r6, #0
 80141dc:	42a6      	cmp	r6, r4
 80141de:	d109      	bne.n	80141f4 <__libc_init_array+0x24>
 80141e0:	4d0b      	ldr	r5, [pc, #44]	@ (8014210 <__libc_init_array+0x40>)
 80141e2:	4c0c      	ldr	r4, [pc, #48]	@ (8014214 <__libc_init_array+0x44>)
 80141e4:	f000 fc66 	bl	8014ab4 <_init>
 80141e8:	1b64      	subs	r4, r4, r5
 80141ea:	10a4      	asrs	r4, r4, #2
 80141ec:	2600      	movs	r6, #0
 80141ee:	42a6      	cmp	r6, r4
 80141f0:	d105      	bne.n	80141fe <__libc_init_array+0x2e>
 80141f2:	bd70      	pop	{r4, r5, r6, pc}
 80141f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80141f8:	4798      	blx	r3
 80141fa:	3601      	adds	r6, #1
 80141fc:	e7ee      	b.n	80141dc <__libc_init_array+0xc>
 80141fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8014202:	4798      	blx	r3
 8014204:	3601      	adds	r6, #1
 8014206:	e7f2      	b.n	80141ee <__libc_init_array+0x1e>
 8014208:	0801542c 	.word	0x0801542c
 801420c:	0801542c 	.word	0x0801542c
 8014210:	0801542c 	.word	0x0801542c
 8014214:	08015430 	.word	0x08015430

08014218 <__retarget_lock_acquire_recursive>:
 8014218:	4770      	bx	lr

0801421a <__retarget_lock_release_recursive>:
 801421a:	4770      	bx	lr

0801421c <memcpy>:
 801421c:	440a      	add	r2, r1
 801421e:	4291      	cmp	r1, r2
 8014220:	f100 33ff 	add.w	r3, r0, #4294967295
 8014224:	d100      	bne.n	8014228 <memcpy+0xc>
 8014226:	4770      	bx	lr
 8014228:	b510      	push	{r4, lr}
 801422a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801422e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014232:	4291      	cmp	r1, r2
 8014234:	d1f9      	bne.n	801422a <memcpy+0xe>
 8014236:	bd10      	pop	{r4, pc}

08014238 <_free_r>:
 8014238:	b538      	push	{r3, r4, r5, lr}
 801423a:	4605      	mov	r5, r0
 801423c:	2900      	cmp	r1, #0
 801423e:	d041      	beq.n	80142c4 <_free_r+0x8c>
 8014240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014244:	1f0c      	subs	r4, r1, #4
 8014246:	2b00      	cmp	r3, #0
 8014248:	bfb8      	it	lt
 801424a:	18e4      	addlt	r4, r4, r3
 801424c:	f000 f8e0 	bl	8014410 <__malloc_lock>
 8014250:	4a1d      	ldr	r2, [pc, #116]	@ (80142c8 <_free_r+0x90>)
 8014252:	6813      	ldr	r3, [r2, #0]
 8014254:	b933      	cbnz	r3, 8014264 <_free_r+0x2c>
 8014256:	6063      	str	r3, [r4, #4]
 8014258:	6014      	str	r4, [r2, #0]
 801425a:	4628      	mov	r0, r5
 801425c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014260:	f000 b8dc 	b.w	801441c <__malloc_unlock>
 8014264:	42a3      	cmp	r3, r4
 8014266:	d908      	bls.n	801427a <_free_r+0x42>
 8014268:	6820      	ldr	r0, [r4, #0]
 801426a:	1821      	adds	r1, r4, r0
 801426c:	428b      	cmp	r3, r1
 801426e:	bf01      	itttt	eq
 8014270:	6819      	ldreq	r1, [r3, #0]
 8014272:	685b      	ldreq	r3, [r3, #4]
 8014274:	1809      	addeq	r1, r1, r0
 8014276:	6021      	streq	r1, [r4, #0]
 8014278:	e7ed      	b.n	8014256 <_free_r+0x1e>
 801427a:	461a      	mov	r2, r3
 801427c:	685b      	ldr	r3, [r3, #4]
 801427e:	b10b      	cbz	r3, 8014284 <_free_r+0x4c>
 8014280:	42a3      	cmp	r3, r4
 8014282:	d9fa      	bls.n	801427a <_free_r+0x42>
 8014284:	6811      	ldr	r1, [r2, #0]
 8014286:	1850      	adds	r0, r2, r1
 8014288:	42a0      	cmp	r0, r4
 801428a:	d10b      	bne.n	80142a4 <_free_r+0x6c>
 801428c:	6820      	ldr	r0, [r4, #0]
 801428e:	4401      	add	r1, r0
 8014290:	1850      	adds	r0, r2, r1
 8014292:	4283      	cmp	r3, r0
 8014294:	6011      	str	r1, [r2, #0]
 8014296:	d1e0      	bne.n	801425a <_free_r+0x22>
 8014298:	6818      	ldr	r0, [r3, #0]
 801429a:	685b      	ldr	r3, [r3, #4]
 801429c:	6053      	str	r3, [r2, #4]
 801429e:	4408      	add	r0, r1
 80142a0:	6010      	str	r0, [r2, #0]
 80142a2:	e7da      	b.n	801425a <_free_r+0x22>
 80142a4:	d902      	bls.n	80142ac <_free_r+0x74>
 80142a6:	230c      	movs	r3, #12
 80142a8:	602b      	str	r3, [r5, #0]
 80142aa:	e7d6      	b.n	801425a <_free_r+0x22>
 80142ac:	6820      	ldr	r0, [r4, #0]
 80142ae:	1821      	adds	r1, r4, r0
 80142b0:	428b      	cmp	r3, r1
 80142b2:	bf04      	itt	eq
 80142b4:	6819      	ldreq	r1, [r3, #0]
 80142b6:	685b      	ldreq	r3, [r3, #4]
 80142b8:	6063      	str	r3, [r4, #4]
 80142ba:	bf04      	itt	eq
 80142bc:	1809      	addeq	r1, r1, r0
 80142be:	6021      	streq	r1, [r4, #0]
 80142c0:	6054      	str	r4, [r2, #4]
 80142c2:	e7ca      	b.n	801425a <_free_r+0x22>
 80142c4:	bd38      	pop	{r3, r4, r5, pc}
 80142c6:	bf00      	nop
 80142c8:	24001bac 	.word	0x24001bac

080142cc <sbrk_aligned>:
 80142cc:	b570      	push	{r4, r5, r6, lr}
 80142ce:	4e0f      	ldr	r6, [pc, #60]	@ (801430c <sbrk_aligned+0x40>)
 80142d0:	460c      	mov	r4, r1
 80142d2:	6831      	ldr	r1, [r6, #0]
 80142d4:	4605      	mov	r5, r0
 80142d6:	b911      	cbnz	r1, 80142de <sbrk_aligned+0x12>
 80142d8:	f000 fba6 	bl	8014a28 <_sbrk_r>
 80142dc:	6030      	str	r0, [r6, #0]
 80142de:	4621      	mov	r1, r4
 80142e0:	4628      	mov	r0, r5
 80142e2:	f000 fba1 	bl	8014a28 <_sbrk_r>
 80142e6:	1c43      	adds	r3, r0, #1
 80142e8:	d103      	bne.n	80142f2 <sbrk_aligned+0x26>
 80142ea:	f04f 34ff 	mov.w	r4, #4294967295
 80142ee:	4620      	mov	r0, r4
 80142f0:	bd70      	pop	{r4, r5, r6, pc}
 80142f2:	1cc4      	adds	r4, r0, #3
 80142f4:	f024 0403 	bic.w	r4, r4, #3
 80142f8:	42a0      	cmp	r0, r4
 80142fa:	d0f8      	beq.n	80142ee <sbrk_aligned+0x22>
 80142fc:	1a21      	subs	r1, r4, r0
 80142fe:	4628      	mov	r0, r5
 8014300:	f000 fb92 	bl	8014a28 <_sbrk_r>
 8014304:	3001      	adds	r0, #1
 8014306:	d1f2      	bne.n	80142ee <sbrk_aligned+0x22>
 8014308:	e7ef      	b.n	80142ea <sbrk_aligned+0x1e>
 801430a:	bf00      	nop
 801430c:	24001ba8 	.word	0x24001ba8

08014310 <_malloc_r>:
 8014310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014314:	1ccd      	adds	r5, r1, #3
 8014316:	f025 0503 	bic.w	r5, r5, #3
 801431a:	3508      	adds	r5, #8
 801431c:	2d0c      	cmp	r5, #12
 801431e:	bf38      	it	cc
 8014320:	250c      	movcc	r5, #12
 8014322:	2d00      	cmp	r5, #0
 8014324:	4606      	mov	r6, r0
 8014326:	db01      	blt.n	801432c <_malloc_r+0x1c>
 8014328:	42a9      	cmp	r1, r5
 801432a:	d904      	bls.n	8014336 <_malloc_r+0x26>
 801432c:	230c      	movs	r3, #12
 801432e:	6033      	str	r3, [r6, #0]
 8014330:	2000      	movs	r0, #0
 8014332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801440c <_malloc_r+0xfc>
 801433a:	f000 f869 	bl	8014410 <__malloc_lock>
 801433e:	f8d8 3000 	ldr.w	r3, [r8]
 8014342:	461c      	mov	r4, r3
 8014344:	bb44      	cbnz	r4, 8014398 <_malloc_r+0x88>
 8014346:	4629      	mov	r1, r5
 8014348:	4630      	mov	r0, r6
 801434a:	f7ff ffbf 	bl	80142cc <sbrk_aligned>
 801434e:	1c43      	adds	r3, r0, #1
 8014350:	4604      	mov	r4, r0
 8014352:	d158      	bne.n	8014406 <_malloc_r+0xf6>
 8014354:	f8d8 4000 	ldr.w	r4, [r8]
 8014358:	4627      	mov	r7, r4
 801435a:	2f00      	cmp	r7, #0
 801435c:	d143      	bne.n	80143e6 <_malloc_r+0xd6>
 801435e:	2c00      	cmp	r4, #0
 8014360:	d04b      	beq.n	80143fa <_malloc_r+0xea>
 8014362:	6823      	ldr	r3, [r4, #0]
 8014364:	4639      	mov	r1, r7
 8014366:	4630      	mov	r0, r6
 8014368:	eb04 0903 	add.w	r9, r4, r3
 801436c:	f000 fb5c 	bl	8014a28 <_sbrk_r>
 8014370:	4581      	cmp	r9, r0
 8014372:	d142      	bne.n	80143fa <_malloc_r+0xea>
 8014374:	6821      	ldr	r1, [r4, #0]
 8014376:	1a6d      	subs	r5, r5, r1
 8014378:	4629      	mov	r1, r5
 801437a:	4630      	mov	r0, r6
 801437c:	f7ff ffa6 	bl	80142cc <sbrk_aligned>
 8014380:	3001      	adds	r0, #1
 8014382:	d03a      	beq.n	80143fa <_malloc_r+0xea>
 8014384:	6823      	ldr	r3, [r4, #0]
 8014386:	442b      	add	r3, r5
 8014388:	6023      	str	r3, [r4, #0]
 801438a:	f8d8 3000 	ldr.w	r3, [r8]
 801438e:	685a      	ldr	r2, [r3, #4]
 8014390:	bb62      	cbnz	r2, 80143ec <_malloc_r+0xdc>
 8014392:	f8c8 7000 	str.w	r7, [r8]
 8014396:	e00f      	b.n	80143b8 <_malloc_r+0xa8>
 8014398:	6822      	ldr	r2, [r4, #0]
 801439a:	1b52      	subs	r2, r2, r5
 801439c:	d420      	bmi.n	80143e0 <_malloc_r+0xd0>
 801439e:	2a0b      	cmp	r2, #11
 80143a0:	d917      	bls.n	80143d2 <_malloc_r+0xc2>
 80143a2:	1961      	adds	r1, r4, r5
 80143a4:	42a3      	cmp	r3, r4
 80143a6:	6025      	str	r5, [r4, #0]
 80143a8:	bf18      	it	ne
 80143aa:	6059      	strne	r1, [r3, #4]
 80143ac:	6863      	ldr	r3, [r4, #4]
 80143ae:	bf08      	it	eq
 80143b0:	f8c8 1000 	streq.w	r1, [r8]
 80143b4:	5162      	str	r2, [r4, r5]
 80143b6:	604b      	str	r3, [r1, #4]
 80143b8:	4630      	mov	r0, r6
 80143ba:	f000 f82f 	bl	801441c <__malloc_unlock>
 80143be:	f104 000b 	add.w	r0, r4, #11
 80143c2:	1d23      	adds	r3, r4, #4
 80143c4:	f020 0007 	bic.w	r0, r0, #7
 80143c8:	1ac2      	subs	r2, r0, r3
 80143ca:	bf1c      	itt	ne
 80143cc:	1a1b      	subne	r3, r3, r0
 80143ce:	50a3      	strne	r3, [r4, r2]
 80143d0:	e7af      	b.n	8014332 <_malloc_r+0x22>
 80143d2:	6862      	ldr	r2, [r4, #4]
 80143d4:	42a3      	cmp	r3, r4
 80143d6:	bf0c      	ite	eq
 80143d8:	f8c8 2000 	streq.w	r2, [r8]
 80143dc:	605a      	strne	r2, [r3, #4]
 80143de:	e7eb      	b.n	80143b8 <_malloc_r+0xa8>
 80143e0:	4623      	mov	r3, r4
 80143e2:	6864      	ldr	r4, [r4, #4]
 80143e4:	e7ae      	b.n	8014344 <_malloc_r+0x34>
 80143e6:	463c      	mov	r4, r7
 80143e8:	687f      	ldr	r7, [r7, #4]
 80143ea:	e7b6      	b.n	801435a <_malloc_r+0x4a>
 80143ec:	461a      	mov	r2, r3
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	42a3      	cmp	r3, r4
 80143f2:	d1fb      	bne.n	80143ec <_malloc_r+0xdc>
 80143f4:	2300      	movs	r3, #0
 80143f6:	6053      	str	r3, [r2, #4]
 80143f8:	e7de      	b.n	80143b8 <_malloc_r+0xa8>
 80143fa:	230c      	movs	r3, #12
 80143fc:	6033      	str	r3, [r6, #0]
 80143fe:	4630      	mov	r0, r6
 8014400:	f000 f80c 	bl	801441c <__malloc_unlock>
 8014404:	e794      	b.n	8014330 <_malloc_r+0x20>
 8014406:	6005      	str	r5, [r0, #0]
 8014408:	e7d6      	b.n	80143b8 <_malloc_r+0xa8>
 801440a:	bf00      	nop
 801440c:	24001bac 	.word	0x24001bac

08014410 <__malloc_lock>:
 8014410:	4801      	ldr	r0, [pc, #4]	@ (8014418 <__malloc_lock+0x8>)
 8014412:	f7ff bf01 	b.w	8014218 <__retarget_lock_acquire_recursive>
 8014416:	bf00      	nop
 8014418:	24001ba4 	.word	0x24001ba4

0801441c <__malloc_unlock>:
 801441c:	4801      	ldr	r0, [pc, #4]	@ (8014424 <__malloc_unlock+0x8>)
 801441e:	f7ff befc 	b.w	801421a <__retarget_lock_release_recursive>
 8014422:	bf00      	nop
 8014424:	24001ba4 	.word	0x24001ba4

08014428 <__ssputs_r>:
 8014428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801442c:	688e      	ldr	r6, [r1, #8]
 801442e:	461f      	mov	r7, r3
 8014430:	42be      	cmp	r6, r7
 8014432:	680b      	ldr	r3, [r1, #0]
 8014434:	4682      	mov	sl, r0
 8014436:	460c      	mov	r4, r1
 8014438:	4690      	mov	r8, r2
 801443a:	d82d      	bhi.n	8014498 <__ssputs_r+0x70>
 801443c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014440:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014444:	d026      	beq.n	8014494 <__ssputs_r+0x6c>
 8014446:	6965      	ldr	r5, [r4, #20]
 8014448:	6909      	ldr	r1, [r1, #16]
 801444a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801444e:	eba3 0901 	sub.w	r9, r3, r1
 8014452:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014456:	1c7b      	adds	r3, r7, #1
 8014458:	444b      	add	r3, r9
 801445a:	106d      	asrs	r5, r5, #1
 801445c:	429d      	cmp	r5, r3
 801445e:	bf38      	it	cc
 8014460:	461d      	movcc	r5, r3
 8014462:	0553      	lsls	r3, r2, #21
 8014464:	d527      	bpl.n	80144b6 <__ssputs_r+0x8e>
 8014466:	4629      	mov	r1, r5
 8014468:	f7ff ff52 	bl	8014310 <_malloc_r>
 801446c:	4606      	mov	r6, r0
 801446e:	b360      	cbz	r0, 80144ca <__ssputs_r+0xa2>
 8014470:	6921      	ldr	r1, [r4, #16]
 8014472:	464a      	mov	r2, r9
 8014474:	f7ff fed2 	bl	801421c <memcpy>
 8014478:	89a3      	ldrh	r3, [r4, #12]
 801447a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801447e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014482:	81a3      	strh	r3, [r4, #12]
 8014484:	6126      	str	r6, [r4, #16]
 8014486:	6165      	str	r5, [r4, #20]
 8014488:	444e      	add	r6, r9
 801448a:	eba5 0509 	sub.w	r5, r5, r9
 801448e:	6026      	str	r6, [r4, #0]
 8014490:	60a5      	str	r5, [r4, #8]
 8014492:	463e      	mov	r6, r7
 8014494:	42be      	cmp	r6, r7
 8014496:	d900      	bls.n	801449a <__ssputs_r+0x72>
 8014498:	463e      	mov	r6, r7
 801449a:	6820      	ldr	r0, [r4, #0]
 801449c:	4632      	mov	r2, r6
 801449e:	4641      	mov	r1, r8
 80144a0:	f000 faa8 	bl	80149f4 <memmove>
 80144a4:	68a3      	ldr	r3, [r4, #8]
 80144a6:	1b9b      	subs	r3, r3, r6
 80144a8:	60a3      	str	r3, [r4, #8]
 80144aa:	6823      	ldr	r3, [r4, #0]
 80144ac:	4433      	add	r3, r6
 80144ae:	6023      	str	r3, [r4, #0]
 80144b0:	2000      	movs	r0, #0
 80144b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144b6:	462a      	mov	r2, r5
 80144b8:	f000 fac6 	bl	8014a48 <_realloc_r>
 80144bc:	4606      	mov	r6, r0
 80144be:	2800      	cmp	r0, #0
 80144c0:	d1e0      	bne.n	8014484 <__ssputs_r+0x5c>
 80144c2:	6921      	ldr	r1, [r4, #16]
 80144c4:	4650      	mov	r0, sl
 80144c6:	f7ff feb7 	bl	8014238 <_free_r>
 80144ca:	230c      	movs	r3, #12
 80144cc:	f8ca 3000 	str.w	r3, [sl]
 80144d0:	89a3      	ldrh	r3, [r4, #12]
 80144d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144d6:	81a3      	strh	r3, [r4, #12]
 80144d8:	f04f 30ff 	mov.w	r0, #4294967295
 80144dc:	e7e9      	b.n	80144b2 <__ssputs_r+0x8a>
	...

080144e0 <_svfiprintf_r>:
 80144e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e4:	4698      	mov	r8, r3
 80144e6:	898b      	ldrh	r3, [r1, #12]
 80144e8:	061b      	lsls	r3, r3, #24
 80144ea:	b09d      	sub	sp, #116	@ 0x74
 80144ec:	4607      	mov	r7, r0
 80144ee:	460d      	mov	r5, r1
 80144f0:	4614      	mov	r4, r2
 80144f2:	d510      	bpl.n	8014516 <_svfiprintf_r+0x36>
 80144f4:	690b      	ldr	r3, [r1, #16]
 80144f6:	b973      	cbnz	r3, 8014516 <_svfiprintf_r+0x36>
 80144f8:	2140      	movs	r1, #64	@ 0x40
 80144fa:	f7ff ff09 	bl	8014310 <_malloc_r>
 80144fe:	6028      	str	r0, [r5, #0]
 8014500:	6128      	str	r0, [r5, #16]
 8014502:	b930      	cbnz	r0, 8014512 <_svfiprintf_r+0x32>
 8014504:	230c      	movs	r3, #12
 8014506:	603b      	str	r3, [r7, #0]
 8014508:	f04f 30ff 	mov.w	r0, #4294967295
 801450c:	b01d      	add	sp, #116	@ 0x74
 801450e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014512:	2340      	movs	r3, #64	@ 0x40
 8014514:	616b      	str	r3, [r5, #20]
 8014516:	2300      	movs	r3, #0
 8014518:	9309      	str	r3, [sp, #36]	@ 0x24
 801451a:	2320      	movs	r3, #32
 801451c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014520:	f8cd 800c 	str.w	r8, [sp, #12]
 8014524:	2330      	movs	r3, #48	@ 0x30
 8014526:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80146c4 <_svfiprintf_r+0x1e4>
 801452a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801452e:	f04f 0901 	mov.w	r9, #1
 8014532:	4623      	mov	r3, r4
 8014534:	469a      	mov	sl, r3
 8014536:	f813 2b01 	ldrb.w	r2, [r3], #1
 801453a:	b10a      	cbz	r2, 8014540 <_svfiprintf_r+0x60>
 801453c:	2a25      	cmp	r2, #37	@ 0x25
 801453e:	d1f9      	bne.n	8014534 <_svfiprintf_r+0x54>
 8014540:	ebba 0b04 	subs.w	fp, sl, r4
 8014544:	d00b      	beq.n	801455e <_svfiprintf_r+0x7e>
 8014546:	465b      	mov	r3, fp
 8014548:	4622      	mov	r2, r4
 801454a:	4629      	mov	r1, r5
 801454c:	4638      	mov	r0, r7
 801454e:	f7ff ff6b 	bl	8014428 <__ssputs_r>
 8014552:	3001      	adds	r0, #1
 8014554:	f000 80a7 	beq.w	80146a6 <_svfiprintf_r+0x1c6>
 8014558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801455a:	445a      	add	r2, fp
 801455c:	9209      	str	r2, [sp, #36]	@ 0x24
 801455e:	f89a 3000 	ldrb.w	r3, [sl]
 8014562:	2b00      	cmp	r3, #0
 8014564:	f000 809f 	beq.w	80146a6 <_svfiprintf_r+0x1c6>
 8014568:	2300      	movs	r3, #0
 801456a:	f04f 32ff 	mov.w	r2, #4294967295
 801456e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014572:	f10a 0a01 	add.w	sl, sl, #1
 8014576:	9304      	str	r3, [sp, #16]
 8014578:	9307      	str	r3, [sp, #28]
 801457a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801457e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014580:	4654      	mov	r4, sl
 8014582:	2205      	movs	r2, #5
 8014584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014588:	484e      	ldr	r0, [pc, #312]	@ (80146c4 <_svfiprintf_r+0x1e4>)
 801458a:	f7eb fec9 	bl	8000320 <memchr>
 801458e:	9a04      	ldr	r2, [sp, #16]
 8014590:	b9d8      	cbnz	r0, 80145ca <_svfiprintf_r+0xea>
 8014592:	06d0      	lsls	r0, r2, #27
 8014594:	bf44      	itt	mi
 8014596:	2320      	movmi	r3, #32
 8014598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801459c:	0711      	lsls	r1, r2, #28
 801459e:	bf44      	itt	mi
 80145a0:	232b      	movmi	r3, #43	@ 0x2b
 80145a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145a6:	f89a 3000 	ldrb.w	r3, [sl]
 80145aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80145ac:	d015      	beq.n	80145da <_svfiprintf_r+0xfa>
 80145ae:	9a07      	ldr	r2, [sp, #28]
 80145b0:	4654      	mov	r4, sl
 80145b2:	2000      	movs	r0, #0
 80145b4:	f04f 0c0a 	mov.w	ip, #10
 80145b8:	4621      	mov	r1, r4
 80145ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145be:	3b30      	subs	r3, #48	@ 0x30
 80145c0:	2b09      	cmp	r3, #9
 80145c2:	d94b      	bls.n	801465c <_svfiprintf_r+0x17c>
 80145c4:	b1b0      	cbz	r0, 80145f4 <_svfiprintf_r+0x114>
 80145c6:	9207      	str	r2, [sp, #28]
 80145c8:	e014      	b.n	80145f4 <_svfiprintf_r+0x114>
 80145ca:	eba0 0308 	sub.w	r3, r0, r8
 80145ce:	fa09 f303 	lsl.w	r3, r9, r3
 80145d2:	4313      	orrs	r3, r2
 80145d4:	9304      	str	r3, [sp, #16]
 80145d6:	46a2      	mov	sl, r4
 80145d8:	e7d2      	b.n	8014580 <_svfiprintf_r+0xa0>
 80145da:	9b03      	ldr	r3, [sp, #12]
 80145dc:	1d19      	adds	r1, r3, #4
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	9103      	str	r1, [sp, #12]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	bfbb      	ittet	lt
 80145e6:	425b      	neglt	r3, r3
 80145e8:	f042 0202 	orrlt.w	r2, r2, #2
 80145ec:	9307      	strge	r3, [sp, #28]
 80145ee:	9307      	strlt	r3, [sp, #28]
 80145f0:	bfb8      	it	lt
 80145f2:	9204      	strlt	r2, [sp, #16]
 80145f4:	7823      	ldrb	r3, [r4, #0]
 80145f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80145f8:	d10a      	bne.n	8014610 <_svfiprintf_r+0x130>
 80145fa:	7863      	ldrb	r3, [r4, #1]
 80145fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80145fe:	d132      	bne.n	8014666 <_svfiprintf_r+0x186>
 8014600:	9b03      	ldr	r3, [sp, #12]
 8014602:	1d1a      	adds	r2, r3, #4
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	9203      	str	r2, [sp, #12]
 8014608:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801460c:	3402      	adds	r4, #2
 801460e:	9305      	str	r3, [sp, #20]
 8014610:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80146d4 <_svfiprintf_r+0x1f4>
 8014614:	7821      	ldrb	r1, [r4, #0]
 8014616:	2203      	movs	r2, #3
 8014618:	4650      	mov	r0, sl
 801461a:	f7eb fe81 	bl	8000320 <memchr>
 801461e:	b138      	cbz	r0, 8014630 <_svfiprintf_r+0x150>
 8014620:	9b04      	ldr	r3, [sp, #16]
 8014622:	eba0 000a 	sub.w	r0, r0, sl
 8014626:	2240      	movs	r2, #64	@ 0x40
 8014628:	4082      	lsls	r2, r0
 801462a:	4313      	orrs	r3, r2
 801462c:	3401      	adds	r4, #1
 801462e:	9304      	str	r3, [sp, #16]
 8014630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014634:	4824      	ldr	r0, [pc, #144]	@ (80146c8 <_svfiprintf_r+0x1e8>)
 8014636:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801463a:	2206      	movs	r2, #6
 801463c:	f7eb fe70 	bl	8000320 <memchr>
 8014640:	2800      	cmp	r0, #0
 8014642:	d036      	beq.n	80146b2 <_svfiprintf_r+0x1d2>
 8014644:	4b21      	ldr	r3, [pc, #132]	@ (80146cc <_svfiprintf_r+0x1ec>)
 8014646:	bb1b      	cbnz	r3, 8014690 <_svfiprintf_r+0x1b0>
 8014648:	9b03      	ldr	r3, [sp, #12]
 801464a:	3307      	adds	r3, #7
 801464c:	f023 0307 	bic.w	r3, r3, #7
 8014650:	3308      	adds	r3, #8
 8014652:	9303      	str	r3, [sp, #12]
 8014654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014656:	4433      	add	r3, r6
 8014658:	9309      	str	r3, [sp, #36]	@ 0x24
 801465a:	e76a      	b.n	8014532 <_svfiprintf_r+0x52>
 801465c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014660:	460c      	mov	r4, r1
 8014662:	2001      	movs	r0, #1
 8014664:	e7a8      	b.n	80145b8 <_svfiprintf_r+0xd8>
 8014666:	2300      	movs	r3, #0
 8014668:	3401      	adds	r4, #1
 801466a:	9305      	str	r3, [sp, #20]
 801466c:	4619      	mov	r1, r3
 801466e:	f04f 0c0a 	mov.w	ip, #10
 8014672:	4620      	mov	r0, r4
 8014674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014678:	3a30      	subs	r2, #48	@ 0x30
 801467a:	2a09      	cmp	r2, #9
 801467c:	d903      	bls.n	8014686 <_svfiprintf_r+0x1a6>
 801467e:	2b00      	cmp	r3, #0
 8014680:	d0c6      	beq.n	8014610 <_svfiprintf_r+0x130>
 8014682:	9105      	str	r1, [sp, #20]
 8014684:	e7c4      	b.n	8014610 <_svfiprintf_r+0x130>
 8014686:	fb0c 2101 	mla	r1, ip, r1, r2
 801468a:	4604      	mov	r4, r0
 801468c:	2301      	movs	r3, #1
 801468e:	e7f0      	b.n	8014672 <_svfiprintf_r+0x192>
 8014690:	ab03      	add	r3, sp, #12
 8014692:	9300      	str	r3, [sp, #0]
 8014694:	462a      	mov	r2, r5
 8014696:	4b0e      	ldr	r3, [pc, #56]	@ (80146d0 <_svfiprintf_r+0x1f0>)
 8014698:	a904      	add	r1, sp, #16
 801469a:	4638      	mov	r0, r7
 801469c:	f3af 8000 	nop.w
 80146a0:	1c42      	adds	r2, r0, #1
 80146a2:	4606      	mov	r6, r0
 80146a4:	d1d6      	bne.n	8014654 <_svfiprintf_r+0x174>
 80146a6:	89ab      	ldrh	r3, [r5, #12]
 80146a8:	065b      	lsls	r3, r3, #25
 80146aa:	f53f af2d 	bmi.w	8014508 <_svfiprintf_r+0x28>
 80146ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80146b0:	e72c      	b.n	801450c <_svfiprintf_r+0x2c>
 80146b2:	ab03      	add	r3, sp, #12
 80146b4:	9300      	str	r3, [sp, #0]
 80146b6:	462a      	mov	r2, r5
 80146b8:	4b05      	ldr	r3, [pc, #20]	@ (80146d0 <_svfiprintf_r+0x1f0>)
 80146ba:	a904      	add	r1, sp, #16
 80146bc:	4638      	mov	r0, r7
 80146be:	f000 f879 	bl	80147b4 <_printf_i>
 80146c2:	e7ed      	b.n	80146a0 <_svfiprintf_r+0x1c0>
 80146c4:	080153f0 	.word	0x080153f0
 80146c8:	080153fa 	.word	0x080153fa
 80146cc:	00000000 	.word	0x00000000
 80146d0:	08014429 	.word	0x08014429
 80146d4:	080153f6 	.word	0x080153f6

080146d8 <_printf_common>:
 80146d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146dc:	4616      	mov	r6, r2
 80146de:	4698      	mov	r8, r3
 80146e0:	688a      	ldr	r2, [r1, #8]
 80146e2:	690b      	ldr	r3, [r1, #16]
 80146e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80146e8:	4293      	cmp	r3, r2
 80146ea:	bfb8      	it	lt
 80146ec:	4613      	movlt	r3, r2
 80146ee:	6033      	str	r3, [r6, #0]
 80146f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80146f4:	4607      	mov	r7, r0
 80146f6:	460c      	mov	r4, r1
 80146f8:	b10a      	cbz	r2, 80146fe <_printf_common+0x26>
 80146fa:	3301      	adds	r3, #1
 80146fc:	6033      	str	r3, [r6, #0]
 80146fe:	6823      	ldr	r3, [r4, #0]
 8014700:	0699      	lsls	r1, r3, #26
 8014702:	bf42      	ittt	mi
 8014704:	6833      	ldrmi	r3, [r6, #0]
 8014706:	3302      	addmi	r3, #2
 8014708:	6033      	strmi	r3, [r6, #0]
 801470a:	6825      	ldr	r5, [r4, #0]
 801470c:	f015 0506 	ands.w	r5, r5, #6
 8014710:	d106      	bne.n	8014720 <_printf_common+0x48>
 8014712:	f104 0a19 	add.w	sl, r4, #25
 8014716:	68e3      	ldr	r3, [r4, #12]
 8014718:	6832      	ldr	r2, [r6, #0]
 801471a:	1a9b      	subs	r3, r3, r2
 801471c:	42ab      	cmp	r3, r5
 801471e:	dc26      	bgt.n	801476e <_printf_common+0x96>
 8014720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014724:	6822      	ldr	r2, [r4, #0]
 8014726:	3b00      	subs	r3, #0
 8014728:	bf18      	it	ne
 801472a:	2301      	movne	r3, #1
 801472c:	0692      	lsls	r2, r2, #26
 801472e:	d42b      	bmi.n	8014788 <_printf_common+0xb0>
 8014730:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014734:	4641      	mov	r1, r8
 8014736:	4638      	mov	r0, r7
 8014738:	47c8      	blx	r9
 801473a:	3001      	adds	r0, #1
 801473c:	d01e      	beq.n	801477c <_printf_common+0xa4>
 801473e:	6823      	ldr	r3, [r4, #0]
 8014740:	6922      	ldr	r2, [r4, #16]
 8014742:	f003 0306 	and.w	r3, r3, #6
 8014746:	2b04      	cmp	r3, #4
 8014748:	bf02      	ittt	eq
 801474a:	68e5      	ldreq	r5, [r4, #12]
 801474c:	6833      	ldreq	r3, [r6, #0]
 801474e:	1aed      	subeq	r5, r5, r3
 8014750:	68a3      	ldr	r3, [r4, #8]
 8014752:	bf0c      	ite	eq
 8014754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014758:	2500      	movne	r5, #0
 801475a:	4293      	cmp	r3, r2
 801475c:	bfc4      	itt	gt
 801475e:	1a9b      	subgt	r3, r3, r2
 8014760:	18ed      	addgt	r5, r5, r3
 8014762:	2600      	movs	r6, #0
 8014764:	341a      	adds	r4, #26
 8014766:	42b5      	cmp	r5, r6
 8014768:	d11a      	bne.n	80147a0 <_printf_common+0xc8>
 801476a:	2000      	movs	r0, #0
 801476c:	e008      	b.n	8014780 <_printf_common+0xa8>
 801476e:	2301      	movs	r3, #1
 8014770:	4652      	mov	r2, sl
 8014772:	4641      	mov	r1, r8
 8014774:	4638      	mov	r0, r7
 8014776:	47c8      	blx	r9
 8014778:	3001      	adds	r0, #1
 801477a:	d103      	bne.n	8014784 <_printf_common+0xac>
 801477c:	f04f 30ff 	mov.w	r0, #4294967295
 8014780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014784:	3501      	adds	r5, #1
 8014786:	e7c6      	b.n	8014716 <_printf_common+0x3e>
 8014788:	18e1      	adds	r1, r4, r3
 801478a:	1c5a      	adds	r2, r3, #1
 801478c:	2030      	movs	r0, #48	@ 0x30
 801478e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014792:	4422      	add	r2, r4
 8014794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014798:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801479c:	3302      	adds	r3, #2
 801479e:	e7c7      	b.n	8014730 <_printf_common+0x58>
 80147a0:	2301      	movs	r3, #1
 80147a2:	4622      	mov	r2, r4
 80147a4:	4641      	mov	r1, r8
 80147a6:	4638      	mov	r0, r7
 80147a8:	47c8      	blx	r9
 80147aa:	3001      	adds	r0, #1
 80147ac:	d0e6      	beq.n	801477c <_printf_common+0xa4>
 80147ae:	3601      	adds	r6, #1
 80147b0:	e7d9      	b.n	8014766 <_printf_common+0x8e>
	...

080147b4 <_printf_i>:
 80147b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80147b8:	7e0f      	ldrb	r7, [r1, #24]
 80147ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80147bc:	2f78      	cmp	r7, #120	@ 0x78
 80147be:	4691      	mov	r9, r2
 80147c0:	4680      	mov	r8, r0
 80147c2:	460c      	mov	r4, r1
 80147c4:	469a      	mov	sl, r3
 80147c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80147ca:	d807      	bhi.n	80147dc <_printf_i+0x28>
 80147cc:	2f62      	cmp	r7, #98	@ 0x62
 80147ce:	d80a      	bhi.n	80147e6 <_printf_i+0x32>
 80147d0:	2f00      	cmp	r7, #0
 80147d2:	f000 80d2 	beq.w	801497a <_printf_i+0x1c6>
 80147d6:	2f58      	cmp	r7, #88	@ 0x58
 80147d8:	f000 80b9 	beq.w	801494e <_printf_i+0x19a>
 80147dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80147e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80147e4:	e03a      	b.n	801485c <_printf_i+0xa8>
 80147e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80147ea:	2b15      	cmp	r3, #21
 80147ec:	d8f6      	bhi.n	80147dc <_printf_i+0x28>
 80147ee:	a101      	add	r1, pc, #4	@ (adr r1, 80147f4 <_printf_i+0x40>)
 80147f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80147f4:	0801484d 	.word	0x0801484d
 80147f8:	08014861 	.word	0x08014861
 80147fc:	080147dd 	.word	0x080147dd
 8014800:	080147dd 	.word	0x080147dd
 8014804:	080147dd 	.word	0x080147dd
 8014808:	080147dd 	.word	0x080147dd
 801480c:	08014861 	.word	0x08014861
 8014810:	080147dd 	.word	0x080147dd
 8014814:	080147dd 	.word	0x080147dd
 8014818:	080147dd 	.word	0x080147dd
 801481c:	080147dd 	.word	0x080147dd
 8014820:	08014961 	.word	0x08014961
 8014824:	0801488b 	.word	0x0801488b
 8014828:	0801491b 	.word	0x0801491b
 801482c:	080147dd 	.word	0x080147dd
 8014830:	080147dd 	.word	0x080147dd
 8014834:	08014983 	.word	0x08014983
 8014838:	080147dd 	.word	0x080147dd
 801483c:	0801488b 	.word	0x0801488b
 8014840:	080147dd 	.word	0x080147dd
 8014844:	080147dd 	.word	0x080147dd
 8014848:	08014923 	.word	0x08014923
 801484c:	6833      	ldr	r3, [r6, #0]
 801484e:	1d1a      	adds	r2, r3, #4
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	6032      	str	r2, [r6, #0]
 8014854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801485c:	2301      	movs	r3, #1
 801485e:	e09d      	b.n	801499c <_printf_i+0x1e8>
 8014860:	6833      	ldr	r3, [r6, #0]
 8014862:	6820      	ldr	r0, [r4, #0]
 8014864:	1d19      	adds	r1, r3, #4
 8014866:	6031      	str	r1, [r6, #0]
 8014868:	0606      	lsls	r6, r0, #24
 801486a:	d501      	bpl.n	8014870 <_printf_i+0xbc>
 801486c:	681d      	ldr	r5, [r3, #0]
 801486e:	e003      	b.n	8014878 <_printf_i+0xc4>
 8014870:	0645      	lsls	r5, r0, #25
 8014872:	d5fb      	bpl.n	801486c <_printf_i+0xb8>
 8014874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014878:	2d00      	cmp	r5, #0
 801487a:	da03      	bge.n	8014884 <_printf_i+0xd0>
 801487c:	232d      	movs	r3, #45	@ 0x2d
 801487e:	426d      	negs	r5, r5
 8014880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014884:	4859      	ldr	r0, [pc, #356]	@ (80149ec <_printf_i+0x238>)
 8014886:	230a      	movs	r3, #10
 8014888:	e011      	b.n	80148ae <_printf_i+0xfa>
 801488a:	6821      	ldr	r1, [r4, #0]
 801488c:	6833      	ldr	r3, [r6, #0]
 801488e:	0608      	lsls	r0, r1, #24
 8014890:	f853 5b04 	ldr.w	r5, [r3], #4
 8014894:	d402      	bmi.n	801489c <_printf_i+0xe8>
 8014896:	0649      	lsls	r1, r1, #25
 8014898:	bf48      	it	mi
 801489a:	b2ad      	uxthmi	r5, r5
 801489c:	2f6f      	cmp	r7, #111	@ 0x6f
 801489e:	4853      	ldr	r0, [pc, #332]	@ (80149ec <_printf_i+0x238>)
 80148a0:	6033      	str	r3, [r6, #0]
 80148a2:	bf14      	ite	ne
 80148a4:	230a      	movne	r3, #10
 80148a6:	2308      	moveq	r3, #8
 80148a8:	2100      	movs	r1, #0
 80148aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80148ae:	6866      	ldr	r6, [r4, #4]
 80148b0:	60a6      	str	r6, [r4, #8]
 80148b2:	2e00      	cmp	r6, #0
 80148b4:	bfa2      	ittt	ge
 80148b6:	6821      	ldrge	r1, [r4, #0]
 80148b8:	f021 0104 	bicge.w	r1, r1, #4
 80148bc:	6021      	strge	r1, [r4, #0]
 80148be:	b90d      	cbnz	r5, 80148c4 <_printf_i+0x110>
 80148c0:	2e00      	cmp	r6, #0
 80148c2:	d04b      	beq.n	801495c <_printf_i+0x1a8>
 80148c4:	4616      	mov	r6, r2
 80148c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80148ca:	fb03 5711 	mls	r7, r3, r1, r5
 80148ce:	5dc7      	ldrb	r7, [r0, r7]
 80148d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80148d4:	462f      	mov	r7, r5
 80148d6:	42bb      	cmp	r3, r7
 80148d8:	460d      	mov	r5, r1
 80148da:	d9f4      	bls.n	80148c6 <_printf_i+0x112>
 80148dc:	2b08      	cmp	r3, #8
 80148de:	d10b      	bne.n	80148f8 <_printf_i+0x144>
 80148e0:	6823      	ldr	r3, [r4, #0]
 80148e2:	07df      	lsls	r7, r3, #31
 80148e4:	d508      	bpl.n	80148f8 <_printf_i+0x144>
 80148e6:	6923      	ldr	r3, [r4, #16]
 80148e8:	6861      	ldr	r1, [r4, #4]
 80148ea:	4299      	cmp	r1, r3
 80148ec:	bfde      	ittt	le
 80148ee:	2330      	movle	r3, #48	@ 0x30
 80148f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80148f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80148f8:	1b92      	subs	r2, r2, r6
 80148fa:	6122      	str	r2, [r4, #16]
 80148fc:	f8cd a000 	str.w	sl, [sp]
 8014900:	464b      	mov	r3, r9
 8014902:	aa03      	add	r2, sp, #12
 8014904:	4621      	mov	r1, r4
 8014906:	4640      	mov	r0, r8
 8014908:	f7ff fee6 	bl	80146d8 <_printf_common>
 801490c:	3001      	adds	r0, #1
 801490e:	d14a      	bne.n	80149a6 <_printf_i+0x1f2>
 8014910:	f04f 30ff 	mov.w	r0, #4294967295
 8014914:	b004      	add	sp, #16
 8014916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801491a:	6823      	ldr	r3, [r4, #0]
 801491c:	f043 0320 	orr.w	r3, r3, #32
 8014920:	6023      	str	r3, [r4, #0]
 8014922:	4833      	ldr	r0, [pc, #204]	@ (80149f0 <_printf_i+0x23c>)
 8014924:	2778      	movs	r7, #120	@ 0x78
 8014926:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801492a:	6823      	ldr	r3, [r4, #0]
 801492c:	6831      	ldr	r1, [r6, #0]
 801492e:	061f      	lsls	r7, r3, #24
 8014930:	f851 5b04 	ldr.w	r5, [r1], #4
 8014934:	d402      	bmi.n	801493c <_printf_i+0x188>
 8014936:	065f      	lsls	r7, r3, #25
 8014938:	bf48      	it	mi
 801493a:	b2ad      	uxthmi	r5, r5
 801493c:	6031      	str	r1, [r6, #0]
 801493e:	07d9      	lsls	r1, r3, #31
 8014940:	bf44      	itt	mi
 8014942:	f043 0320 	orrmi.w	r3, r3, #32
 8014946:	6023      	strmi	r3, [r4, #0]
 8014948:	b11d      	cbz	r5, 8014952 <_printf_i+0x19e>
 801494a:	2310      	movs	r3, #16
 801494c:	e7ac      	b.n	80148a8 <_printf_i+0xf4>
 801494e:	4827      	ldr	r0, [pc, #156]	@ (80149ec <_printf_i+0x238>)
 8014950:	e7e9      	b.n	8014926 <_printf_i+0x172>
 8014952:	6823      	ldr	r3, [r4, #0]
 8014954:	f023 0320 	bic.w	r3, r3, #32
 8014958:	6023      	str	r3, [r4, #0]
 801495a:	e7f6      	b.n	801494a <_printf_i+0x196>
 801495c:	4616      	mov	r6, r2
 801495e:	e7bd      	b.n	80148dc <_printf_i+0x128>
 8014960:	6833      	ldr	r3, [r6, #0]
 8014962:	6825      	ldr	r5, [r4, #0]
 8014964:	6961      	ldr	r1, [r4, #20]
 8014966:	1d18      	adds	r0, r3, #4
 8014968:	6030      	str	r0, [r6, #0]
 801496a:	062e      	lsls	r6, r5, #24
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	d501      	bpl.n	8014974 <_printf_i+0x1c0>
 8014970:	6019      	str	r1, [r3, #0]
 8014972:	e002      	b.n	801497a <_printf_i+0x1c6>
 8014974:	0668      	lsls	r0, r5, #25
 8014976:	d5fb      	bpl.n	8014970 <_printf_i+0x1bc>
 8014978:	8019      	strh	r1, [r3, #0]
 801497a:	2300      	movs	r3, #0
 801497c:	6123      	str	r3, [r4, #16]
 801497e:	4616      	mov	r6, r2
 8014980:	e7bc      	b.n	80148fc <_printf_i+0x148>
 8014982:	6833      	ldr	r3, [r6, #0]
 8014984:	1d1a      	adds	r2, r3, #4
 8014986:	6032      	str	r2, [r6, #0]
 8014988:	681e      	ldr	r6, [r3, #0]
 801498a:	6862      	ldr	r2, [r4, #4]
 801498c:	2100      	movs	r1, #0
 801498e:	4630      	mov	r0, r6
 8014990:	f7eb fcc6 	bl	8000320 <memchr>
 8014994:	b108      	cbz	r0, 801499a <_printf_i+0x1e6>
 8014996:	1b80      	subs	r0, r0, r6
 8014998:	6060      	str	r0, [r4, #4]
 801499a:	6863      	ldr	r3, [r4, #4]
 801499c:	6123      	str	r3, [r4, #16]
 801499e:	2300      	movs	r3, #0
 80149a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80149a4:	e7aa      	b.n	80148fc <_printf_i+0x148>
 80149a6:	6923      	ldr	r3, [r4, #16]
 80149a8:	4632      	mov	r2, r6
 80149aa:	4649      	mov	r1, r9
 80149ac:	4640      	mov	r0, r8
 80149ae:	47d0      	blx	sl
 80149b0:	3001      	adds	r0, #1
 80149b2:	d0ad      	beq.n	8014910 <_printf_i+0x15c>
 80149b4:	6823      	ldr	r3, [r4, #0]
 80149b6:	079b      	lsls	r3, r3, #30
 80149b8:	d413      	bmi.n	80149e2 <_printf_i+0x22e>
 80149ba:	68e0      	ldr	r0, [r4, #12]
 80149bc:	9b03      	ldr	r3, [sp, #12]
 80149be:	4298      	cmp	r0, r3
 80149c0:	bfb8      	it	lt
 80149c2:	4618      	movlt	r0, r3
 80149c4:	e7a6      	b.n	8014914 <_printf_i+0x160>
 80149c6:	2301      	movs	r3, #1
 80149c8:	4632      	mov	r2, r6
 80149ca:	4649      	mov	r1, r9
 80149cc:	4640      	mov	r0, r8
 80149ce:	47d0      	blx	sl
 80149d0:	3001      	adds	r0, #1
 80149d2:	d09d      	beq.n	8014910 <_printf_i+0x15c>
 80149d4:	3501      	adds	r5, #1
 80149d6:	68e3      	ldr	r3, [r4, #12]
 80149d8:	9903      	ldr	r1, [sp, #12]
 80149da:	1a5b      	subs	r3, r3, r1
 80149dc:	42ab      	cmp	r3, r5
 80149de:	dcf2      	bgt.n	80149c6 <_printf_i+0x212>
 80149e0:	e7eb      	b.n	80149ba <_printf_i+0x206>
 80149e2:	2500      	movs	r5, #0
 80149e4:	f104 0619 	add.w	r6, r4, #25
 80149e8:	e7f5      	b.n	80149d6 <_printf_i+0x222>
 80149ea:	bf00      	nop
 80149ec:	08015401 	.word	0x08015401
 80149f0:	08015412 	.word	0x08015412

080149f4 <memmove>:
 80149f4:	4288      	cmp	r0, r1
 80149f6:	b510      	push	{r4, lr}
 80149f8:	eb01 0402 	add.w	r4, r1, r2
 80149fc:	d902      	bls.n	8014a04 <memmove+0x10>
 80149fe:	4284      	cmp	r4, r0
 8014a00:	4623      	mov	r3, r4
 8014a02:	d807      	bhi.n	8014a14 <memmove+0x20>
 8014a04:	1e43      	subs	r3, r0, #1
 8014a06:	42a1      	cmp	r1, r4
 8014a08:	d008      	beq.n	8014a1c <memmove+0x28>
 8014a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a12:	e7f8      	b.n	8014a06 <memmove+0x12>
 8014a14:	4402      	add	r2, r0
 8014a16:	4601      	mov	r1, r0
 8014a18:	428a      	cmp	r2, r1
 8014a1a:	d100      	bne.n	8014a1e <memmove+0x2a>
 8014a1c:	bd10      	pop	{r4, pc}
 8014a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a26:	e7f7      	b.n	8014a18 <memmove+0x24>

08014a28 <_sbrk_r>:
 8014a28:	b538      	push	{r3, r4, r5, lr}
 8014a2a:	4d06      	ldr	r5, [pc, #24]	@ (8014a44 <_sbrk_r+0x1c>)
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	4604      	mov	r4, r0
 8014a30:	4608      	mov	r0, r1
 8014a32:	602b      	str	r3, [r5, #0]
 8014a34:	f7ed ff3c 	bl	80028b0 <_sbrk>
 8014a38:	1c43      	adds	r3, r0, #1
 8014a3a:	d102      	bne.n	8014a42 <_sbrk_r+0x1a>
 8014a3c:	682b      	ldr	r3, [r5, #0]
 8014a3e:	b103      	cbz	r3, 8014a42 <_sbrk_r+0x1a>
 8014a40:	6023      	str	r3, [r4, #0]
 8014a42:	bd38      	pop	{r3, r4, r5, pc}
 8014a44:	24001ba0 	.word	0x24001ba0

08014a48 <_realloc_r>:
 8014a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a4c:	4680      	mov	r8, r0
 8014a4e:	4615      	mov	r5, r2
 8014a50:	460c      	mov	r4, r1
 8014a52:	b921      	cbnz	r1, 8014a5e <_realloc_r+0x16>
 8014a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a58:	4611      	mov	r1, r2
 8014a5a:	f7ff bc59 	b.w	8014310 <_malloc_r>
 8014a5e:	b92a      	cbnz	r2, 8014a6c <_realloc_r+0x24>
 8014a60:	f7ff fbea 	bl	8014238 <_free_r>
 8014a64:	2400      	movs	r4, #0
 8014a66:	4620      	mov	r0, r4
 8014a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a6c:	f000 f81a 	bl	8014aa4 <_malloc_usable_size_r>
 8014a70:	4285      	cmp	r5, r0
 8014a72:	4606      	mov	r6, r0
 8014a74:	d802      	bhi.n	8014a7c <_realloc_r+0x34>
 8014a76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014a7a:	d8f4      	bhi.n	8014a66 <_realloc_r+0x1e>
 8014a7c:	4629      	mov	r1, r5
 8014a7e:	4640      	mov	r0, r8
 8014a80:	f7ff fc46 	bl	8014310 <_malloc_r>
 8014a84:	4607      	mov	r7, r0
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d0ec      	beq.n	8014a64 <_realloc_r+0x1c>
 8014a8a:	42b5      	cmp	r5, r6
 8014a8c:	462a      	mov	r2, r5
 8014a8e:	4621      	mov	r1, r4
 8014a90:	bf28      	it	cs
 8014a92:	4632      	movcs	r2, r6
 8014a94:	f7ff fbc2 	bl	801421c <memcpy>
 8014a98:	4621      	mov	r1, r4
 8014a9a:	4640      	mov	r0, r8
 8014a9c:	f7ff fbcc 	bl	8014238 <_free_r>
 8014aa0:	463c      	mov	r4, r7
 8014aa2:	e7e0      	b.n	8014a66 <_realloc_r+0x1e>

08014aa4 <_malloc_usable_size_r>:
 8014aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014aa8:	1f18      	subs	r0, r3, #4
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	bfbc      	itt	lt
 8014aae:	580b      	ldrlt	r3, [r1, r0]
 8014ab0:	18c0      	addlt	r0, r0, r3
 8014ab2:	4770      	bx	lr

08014ab4 <_init>:
 8014ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ab6:	bf00      	nop
 8014ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014aba:	bc08      	pop	{r3}
 8014abc:	469e      	mov	lr, r3
 8014abe:	4770      	bx	lr

08014ac0 <_fini>:
 8014ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ac2:	bf00      	nop
 8014ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ac6:	bc08      	pop	{r3}
 8014ac8:	469e      	mov	lr, r3
 8014aca:	4770      	bx	lr
