
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e18  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080120e8  080120e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012484  08012484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801248c  0801248c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012490  08012490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08012494  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000994  2400006c  08012500  0001406c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a00  08012500  00014a00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025801  00000000  00000000  0001409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9a  00000000  00000000  0003989b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003d538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  0003f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392df  00000000  00000000  00040a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002670a  00000000  00000000  00079cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001792a3  00000000  00000000  000a0400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002196a3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086bc  00000000  00000000  002196e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00221da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080120d0 	.word	0x080120d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	080120d0 	.word	0x080120d0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f002 f962 	bl	80029b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f9dc 	bl	8000ab0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 fa48 	bl	8000b8c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 feac 	bl	8001458 <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 fe8a 	bl	8001418 <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f000 fa74 	bl	8000bf0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000708:	f000 fb0e 	bl	8000d28 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070c:	f000 fb74 	bl	8000df8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000710:	f000 fbf0 	bl	8000ef4 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000714:	f000 fd08 	bl	8001128 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000718:	f000 fe32 	bl	8001380 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071c:	f000 fdbc 	bl	8001298 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000720:	f000 fde2 	bl	80012e8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000724:	f000 fce2 	bl	80010ec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000728:	f010 fd8e 	bl	8011248 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072c:	f000 fc60 	bl	8000ff0 <MX_FDCAN3_Init>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000730:	2203      	movs	r2, #3
 8000732:	49a2      	ldr	r1, [pc, #648]	@ (80009bc <main+0x2d0>)
 8000734:	48a2      	ldr	r0, [pc, #648]	@ (80009c0 <main+0x2d4>)
 8000736:	f003 f92b 	bl	8003990 <HAL_ADC_Start_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <main+0x5e>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000740:	48a0      	ldr	r0, [pc, #640]	@ (80009c4 <main+0x2d8>)
 8000742:	f000 ff5b 	bl	80015fc <print>
#endif
		Error_Handler();
 8000746:	f001 fb79 	bl	8001e3c <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800074a:	489f      	ldr	r0, [pc, #636]	@ (80009c8 <main+0x2dc>)
 800074c:	f007 fa2c 	bl	8007ba8 <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x74>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000756:	489d      	ldr	r0, [pc, #628]	@ (80009cc <main+0x2e0>)
 8000758:	f000 ff50 	bl	80015fc <print>
#endif
		Error_Handler();
 800075c:	f001 fb6e 	bl	8001e3c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	4898      	ldr	r0, [pc, #608]	@ (80009c8 <main+0x2dc>)
 8000766:	f007 fc11 	bl	8007f8c <HAL_FDCAN_ActivateNotification>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <main+0x8e>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000770:	4897      	ldr	r0, [pc, #604]	@ (80009d0 <main+0x2e4>)
 8000772:	f000 ff43 	bl	80015fc <print>
#endif
		Error_Handler();
 8000776:	f001 fb61 	bl	8001e3c <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800077a:	4896      	ldr	r0, [pc, #600]	@ (80009d4 <main+0x2e8>)
 800077c:	f007 fa14 	bl	8007ba8 <HAL_FDCAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0xa4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000786:	4894      	ldr	r0, [pc, #592]	@ (80009d8 <main+0x2ec>)
 8000788:	f000 ff38 	bl	80015fc <print>

#endif
		Error_Handler();
 800078c:	f001 fb56 	bl	8001e3c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	488f      	ldr	r0, [pc, #572]	@ (80009d4 <main+0x2e8>)
 8000796:	f007 fbf9 	bl	8007f8c <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80007a0:	488e      	ldr	r0, [pc, #568]	@ (80009dc <main+0x2f0>)
 80007a2:	f000 ff2b 	bl	80015fc <print>
#endif
		Error_Handler();
 80007a6:	f001 fb49 	bl	8001e3c <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80007aa:	488d      	ldr	r0, [pc, #564]	@ (80009e0 <main+0x2f4>)
 80007ac:	f007 f9fc 	bl	8007ba8 <HAL_FDCAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007b6:	488b      	ldr	r0, [pc, #556]	@ (80009e4 <main+0x2f8>)
 80007b8:	f000 ff20 	bl	80015fc <print>

#endif
		Error_Handler();
 80007bc:	f001 fb3e 	bl	8001e3c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4886      	ldr	r0, [pc, #536]	@ (80009e0 <main+0x2f4>)
 80007c6:	f007 fbe1 	bl	8007f8c <HAL_FDCAN_ActivateNotification>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007d0:	4885      	ldr	r0, [pc, #532]	@ (80009e8 <main+0x2fc>)
 80007d2:	f000 ff13 	bl	80015fc <print>
#endif
		Error_Handler();
 80007d6:	f001 fb31 	bl	8001e3c <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007da:	4884      	ldr	r0, [pc, #528]	@ (80009ec <main+0x300>)
 80007dc:	f000 ff0e 	bl	80015fc <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80007e0:	4883      	ldr	r0, [pc, #524]	@ (80009f0 <main+0x304>)
 80007e2:	f00d fb6b 	bl	800debc <HAL_TIM_Base_Start_IT>


	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007e6:	e006      	b.n	80007f6 <main+0x10a>
	{
		//print("Solicitar tensión inversor");
		if (config_inv_lectura_v == 1)
 80007e8:	4b82      	ldr	r3, [pc, #520]	@ (80009f4 <main+0x308>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x10a>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007f0:	4881      	ldr	r0, [pc, #516]	@ (80009f8 <main+0x30c>)
 80007f2:	f000 ff03 	bl	80015fc <print>
	while (config_inv_lectura_v == 0)
 80007f6:	4b7f      	ldr	r3, [pc, #508]	@ (80009f4 <main+0x308>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f4      	beq.n	80007e8 <main+0xfc>
	}

#if !CALIBRATION

	// Estado STAND BY inversor
	while (state != 3)
 80007fe:	e006      	b.n	800080e <main+0x122>
	{
		if (state == 3)
 8000800:	4b7e      	ldr	r3, [pc, #504]	@ (80009fc <main+0x310>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d102      	bne.n	800080e <main+0x122>
		{
#if DEBUG
			print("Precarga");
 8000808:	487d      	ldr	r0, [pc, #500]	@ (8000a00 <main+0x314>)
 800080a:	f000 fef7 	bl	80015fc <print>
	while (state != 3)
 800080e:	4b7b      	ldr	r3, [pc, #492]	@ (80009fc <main+0x310>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d1f4      	bne.n	8000800 <main+0x114>
#endif
		}
	}
	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 8000816:	e031      	b.n	800087c <main+0x190>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000818:	4b7a      	ldr	r3, [pc, #488]	@ (8000a04 <main+0x318>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	497a      	ldr	r1, [pc, #488]	@ (8000a08 <main+0x31c>)
 8000820:	487a      	ldr	r0, [pc, #488]	@ (8000a0c <main+0x320>)
 8000822:	f010 ffb5 	bl	8011790 <siprintf>
		print(TxBuffer);
 8000826:	4879      	ldr	r0, [pc, #484]	@ (8000a0c <main+0x320>)
 8000828:	f000 fee8 	bl	80015fc <print>
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800082c:	4b78      	ldr	r3, [pc, #480]	@ (8000a10 <main+0x324>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a78      	ldr	r2, [pc, #480]	@ (8000a14 <main+0x328>)
 8000832:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000834:	4b77      	ldr	r3, [pc, #476]	@ (8000a14 <main+0x328>)
 8000836:	2202      	movs	r2, #2
 8000838:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800083a:	4b76      	ldr	r3, [pc, #472]	@ (8000a14 <main+0x328>)
 800083c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000840:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000842:	4b74      	ldr	r3, [pc, #464]	@ (8000a14 <main+0x328>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000848:	4b72      	ldr	r3, [pc, #456]	@ (8000a14 <main+0x328>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 800084e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a04 <main+0x318>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b70      	ldr	r3, [pc, #448]	@ (8000a18 <main+0x32c>)
 8000856:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000858:	4b6a      	ldr	r3, [pc, #424]	@ (8000a04 <main+0x318>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	121b      	asrs	r3, r3, #8
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b6d      	ldr	r3, [pc, #436]	@ (8000a18 <main+0x32c>)
 8000862:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000864:	4a6c      	ldr	r2, [pc, #432]	@ (8000a18 <main+0x32c>)
 8000866:	496b      	ldr	r1, [pc, #428]	@ (8000a14 <main+0x328>)
 8000868:	485a      	ldr	r0, [pc, #360]	@ (80009d4 <main+0x2e8>)
 800086a:	f007 f9c8 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		if (precarga_inv == 1)
 800086e:	4b6b      	ldr	r3, [pc, #428]	@ (8000a1c <main+0x330>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d102      	bne.n	800087c <main+0x190>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 8000876:	486a      	ldr	r0, [pc, #424]	@ (8000a20 <main+0x334>)
 8000878:	f000 fec0 	bl	80015fc <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 800087c:	4b67      	ldr	r3, [pc, #412]	@ (8000a1c <main+0x330>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d104      	bne.n	800088e <main+0x1a2>
 8000884:	4b5f      	ldr	r3, [pc, #380]	@ (8000a04 <main+0x318>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800088c:	dbc4      	blt.n	8000818 <main+0x12c>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800088e:	4b60      	ldr	r3, [pc, #384]	@ (8000a10 <main+0x324>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a60      	ldr	r2, [pc, #384]	@ (8000a14 <main+0x328>)
 8000894:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 8000896:	4b5f      	ldr	r3, [pc, #380]	@ (8000a14 <main+0x328>)
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800089c:	4b5d      	ldr	r3, [pc, #372]	@ (8000a14 <main+0x328>)
 800089e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a2:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a14 <main+0x328>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000a14 <main+0x328>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008b0:	4b54      	ldr	r3, [pc, #336]	@ (8000a04 <main+0x318>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b58      	ldr	r3, [pc, #352]	@ (8000a18 <main+0x32c>)
 80008b8:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008ba:	4b52      	ldr	r3, [pc, #328]	@ (8000a04 <main+0x318>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	121b      	asrs	r3, r3, #8
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b55      	ldr	r3, [pc, #340]	@ (8000a18 <main+0x32c>)
 80008c4:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80008c6:	4a54      	ldr	r2, [pc, #336]	@ (8000a18 <main+0x32c>)
 80008c8:	4952      	ldr	r1, [pc, #328]	@ (8000a14 <main+0x328>)
 80008ca:	4842      	ldr	r0, [pc, #264]	@ (80009d4 <main+0x2e8>)
 80008cc:	f007 f997 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>
		//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
	}

#if DEBUG
	print("state : stand by");
 80008d0:	4854      	ldr	r0, [pc, #336]	@ (8000a24 <main+0x338>)
 80008d2:	f000 fe93 	bl	80015fc <print>
#endif

	while (state != 4)
 80008d6:	e037      	b.n	8000948 <main+0x25c>
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 80008d8:	4b53      	ldr	r3, [pc, #332]	@ (8000a28 <main+0x33c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a53      	ldr	r2, [pc, #332]	@ (8000a2c <main+0x340>)
 80008de:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 80008e0:	4b52      	ldr	r3, [pc, #328]	@ (8000a2c <main+0x340>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80008e6:	4b51      	ldr	r3, [pc, #324]	@ (8000a2c <main+0x340>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 80008ec:	4b50      	ldr	r3, [pc, #320]	@ (8000a30 <main+0x344>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 80008f2:	4b4f      	ldr	r3, [pc, #316]	@ (8000a30 <main+0x344>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 80008f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000a30 <main+0x344>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80008fe:	4a4c      	ldr	r2, [pc, #304]	@ (8000a30 <main+0x344>)
 8000900:	494a      	ldr	r1, [pc, #296]	@ (8000a2c <main+0x340>)
 8000902:	4831      	ldr	r0, [pc, #196]	@ (80009c8 <main+0x2dc>)
 8000904:	f007 f97b 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000908:	4b48      	ldr	r3, [pc, #288]	@ (8000a2c <main+0x340>)
 800090a:	f240 3262 	movw	r2, #866	@ 0x362
 800090e:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000910:	4b46      	ldr	r3, [pc, #280]	@ (8000a2c <main+0x340>)
 8000912:	2204      	movs	r2, #4
 8000914:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000916:	4b47      	ldr	r3, [pc, #284]	@ (8000a34 <main+0x348>)
 8000918:	2200      	movs	r2, #0
 800091a:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 800091c:	4b44      	ldr	r3, [pc, #272]	@ (8000a30 <main+0x344>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000922:	4b43      	ldr	r3, [pc, #268]	@ (8000a30 <main+0x344>)
 8000924:	2200      	movs	r2, #0
 8000926:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000928:	4b42      	ldr	r3, [pc, #264]	@ (8000a34 <main+0x348>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b40      	ldr	r3, [pc, #256]	@ (8000a30 <main+0x344>)
 8000930:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000932:	4b3f      	ldr	r3, [pc, #252]	@ (8000a30 <main+0x344>)
 8000934:	2200      	movs	r2, #0
 8000936:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000938:	4a3d      	ldr	r2, [pc, #244]	@ (8000a30 <main+0x344>)
 800093a:	493c      	ldr	r1, [pc, #240]	@ (8000a2c <main+0x340>)
 800093c:	4822      	ldr	r0, [pc, #136]	@ (80009c8 <main+0x2dc>)
 800093e:	f007 f95e 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000942:	200a      	movs	r0, #10
 8000944:	f002 f8ca 	bl	8002adc <HAL_Delay>
	while (state != 4)
 8000948:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <main+0x310>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d1c3      	bne.n	80008d8 <main+0x1ec>

	}

#if DEBUG
	print("state: ready");
 8000950:	4839      	ldr	r0, [pc, #228]	@ (8000a38 <main+0x34c>)
 8000952:	f000 fe53 	bl	80015fc <print>

#endif

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000956:	e080      	b.n	8000a5a <main+0x36e>
	{
		HAL_ADC_Start(&hadc1);
 8000958:	4819      	ldr	r0, [pc, #100]	@ (80009c0 <main+0x2d4>)
 800095a:	f002 fe27 	bl	80035ac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800095e:	f04f 31ff 	mov.w	r1, #4294967295
 8000962:	4817      	ldr	r0, [pc, #92]	@ (80009c0 <main+0x2d4>)
 8000964:	f002 ff20 	bl	80037a8 <HAL_ADC_PollForConversion>

		s_freno = HAL_ADC_GetValue(&hadc1);
 8000968:	4815      	ldr	r0, [pc, #84]	@ (80009c0 <main+0x2d4>)
 800096a:	f003 f8ed 	bl	8003b48 <HAL_ADC_GetValue>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b32      	ldr	r3, [pc, #200]	@ (8000a3c <main+0x350>)
 8000974:	601a      	str	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 8000976:	4812      	ldr	r0, [pc, #72]	@ (80009c0 <main+0x2d4>)
 8000978:	f002 fee2 	bl	8003740 <HAL_ADC_Stop>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	4830      	ldr	r0, [pc, #192]	@ (8000a40 <main+0x354>)
 8000980:	f008 fa28 	bl	8008dd4 <HAL_GPIO_ReadPin>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <main+0x358>)
 800098a:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (start_button_act == 1)
 800098c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a44 <main+0x358>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d162      	bne.n	8000a5a <main+0x36e>
		{

#if DEBUG
			print("Botón Start + Freno:");
 8000994:	482c      	ldr	r0, [pc, #176]	@ (8000a48 <main+0x35c>)
 8000996:	f000 fe31 	bl	80015fc <print>
			printValue(s_freno);
 800099a:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <main+0x350>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fe4a 	bl	8001638 <printValue>
#endif
			if (s_freno > UMBRAL_FRENO)
 80009a4:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <main+0x350>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009ac:	dd52      	ble.n	8000a54 <main+0x368>
			{
				boton_arranque = 1;
 80009ae:	4b27      	ldr	r3, [pc, #156]	@ (8000a4c <main+0x360>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 80009b4:	4826      	ldr	r0, [pc, #152]	@ (8000a50 <main+0x364>)
 80009b6:	f000 fe21 	bl	80015fc <print>
 80009ba:	e04e      	b.n	8000a5a <main+0x36e>
 80009bc:	240006fc 	.word	0x240006fc
 80009c0:	24000094 	.word	0x24000094
 80009c4:	080120e8 	.word	0x080120e8
 80009c8:	240001ec 	.word	0x240001ec
 80009cc:	08012108 	.word	0x08012108
 80009d0:	08012128 	.word	0x08012128
 80009d4:	2400028c 	.word	0x2400028c
 80009d8:	08012150 	.word	0x08012150
 80009dc:	08012170 	.word	0x08012170
 80009e0:	2400032c 	.word	0x2400032c
 80009e4:	08012198 	.word	0x08012198
 80009e8:	080121b8 	.word	0x080121b8
 80009ec:	080121e0 	.word	0x080121e0
 80009f0:	24000494 	.word	0x24000494
 80009f4:	2400008c 	.word	0x2400008c
 80009f8:	080121fc 	.word	0x080121fc
 80009fc:	2400071a 	.word	0x2400071a
 8000a00:	08012230 	.word	0x08012230
 8000a04:	240006f4 	.word	0x240006f4
 8000a08:	0801223c 	.word	0x0801223c
 8000a0c:	2400078c 	.word	0x2400078c
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000654 	.word	0x24000654
 8000a18:	240006d8 	.word	0x240006d8
 8000a1c:	24000088 	.word	0x24000088
 8000a20:	08012254 	.word	0x08012254
 8000a24:	08012270 	.word	0x08012270
 8000a28:	24000000 	.word	0x24000000
 8000a2c:	24000608 	.word	0x24000608
 8000a30:	240006c8 	.word	0x240006c8
 8000a34:	24000718 	.word	0x24000718
 8000a38:	08012284 	.word	0x08012284
 8000a3c:	2400070c 	.word	0x2400070c
 8000a40:	58021800 	.word	0x58021800
 8000a44:	240006f0 	.word	0x240006f0
 8000a48:	08012294 	.word	0x08012294
 8000a4c:	24000090 	.word	0x24000090
 8000a50:	080122ac 	.word	0x080122ac
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 8000a54:	4810      	ldr	r0, [pc, #64]	@ (8000a98 <main+0x3ac>)
 8000a56:	f000 fdd1 	bl	80015fc <print>
	while (boton_arranque == 0)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <main+0x3b0>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f43f af7a 	beq.w	8000958 <main+0x26c>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8000a64:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <main+0x3b4>)
 8000a66:	f000 fdc9 	bl	80015fc <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <main+0x3b8>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 8000a70:	2201      	movs	r2, #1
 8000a72:	2102      	movs	r1, #2
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <main+0x3bc>)
 8000a76:	f008 f9c5 	bl	8008e04 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000a7a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a7e:	f002 f82d 	bl	8002adc <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <main+0x3bc>)
 8000a88:	f008 f9bc 	bl	8008e04 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 8000a8c:	4807      	ldr	r0, [pc, #28]	@ (8000aac <main+0x3c0>)
 8000a8e:	f000 fdb5 	bl	80015fc <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a92:	bf00      	nop
 8000a94:	e7fd      	b.n	8000a92 <main+0x3a6>
 8000a96:	bf00      	nop
 8000a98:	080122cc 	.word	0x080122cc
 8000a9c:	24000090 	.word	0x24000090
 8000aa0:	080122e8 	.word	0x080122e8
 8000aa4:	24000888 	.word	0x24000888
 8000aa8:	58020800 	.word	0x58020800
 8000aac:	080122f8 	.word	0x080122f8

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b09c      	sub	sp, #112	@ 0x70
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aba:	224c      	movs	r2, #76	@ 0x4c
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f010 fe88 	bl	80117d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f010 fe82 	bl	80117d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f008 f9b1 	bl	8008e38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b2b      	ldr	r3, [pc, #172]	@ (8000b88 <SystemClock_Config+0xd8>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a2a      	ldr	r2, [pc, #168]	@ (8000b88 <SystemClock_Config+0xd8>)
 8000ae0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <SystemClock_Config+0xd8>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af2:	bf00      	nop
 8000af4:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <SystemClock_Config+0xd8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b00:	d1f8      	bne.n	8000af4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b18:	232c      	movs	r3, #44	@ 0x2c
 8000b1a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 f9b7 	bl	8008eac <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b44:	f001 f97a 	bl	8001e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	233f      	movs	r3, #63	@ 0x3f
 8000b4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b54:	2308      	movs	r3, #8
 8000b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b58:	2340      	movs	r3, #64	@ 0x40
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b5c:	2340      	movs	r3, #64	@ 0x40
 8000b5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b66:	2340      	movs	r3, #64	@ 0x40
 8000b68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2103      	movs	r1, #3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f008 fd76 	bl	8009660 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b7a:	f001 f95f 	bl	8001e3c <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3770      	adds	r7, #112	@ 0x70
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	58024800 	.word	0x58024800

08000b8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0ae      	sub	sp, #184	@ 0xb8
 8000b90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	22b8      	movs	r2, #184	@ 0xb8
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f010 fe1b 	bl	80117d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000b9e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000ba2:	f04f 0300 	mov.w	r3, #0
 8000ba6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bbe:	23c0      	movs	r3, #192	@ 0xc0
 8000bc0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000bca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bce:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f009 f8cd 	bl	8009d78 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000be4:	f001 f92a 	bl	8001e3c <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	37b8      	adds	r7, #184	@ 0xb8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	@ 0x30
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	463b      	mov	r3, r7
 8000c04:	2224      	movs	r2, #36	@ 0x24
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f010 fde3 	bl	80117d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c10:	4a41      	ldr	r2, [pc, #260]	@ (8000d18 <MX_ADC1_Init+0x128>)
 8000c12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c14:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c16:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c1e:	2208      	movs	r2, #8
 8000c20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c22:	4b3c      	ldr	r3, [pc, #240]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c28:	4b3a      	ldr	r3, [pc, #232]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c2e:	4b39      	ldr	r3, [pc, #228]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c34:	4b37      	ldr	r3, [pc, #220]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c3a:	4b36      	ldr	r3, [pc, #216]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c40:	4b34      	ldr	r3, [pc, #208]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c48:	4b32      	ldr	r3, [pc, #200]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4e:	4b31      	ldr	r3, [pc, #196]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c54:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c60:	4b2c      	ldr	r3, [pc, #176]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c66:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c74:	4827      	ldr	r0, [pc, #156]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c76:	f002 fa91 	bl	800319c <HAL_ADC_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c80:	f001 f8dc 	bl	8001e3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4821      	ldr	r0, [pc, #132]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000c90:	f004 fa70 	bl	8005174 <HAL_ADCEx_MultiModeConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c9a:	f001 f8cf 	bl	8001e3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_ADC1_Init+0x12c>)
 8000ca0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca2:	2306      	movs	r3, #6
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000caa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4814      	ldr	r0, [pc, #80]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000cc4:	f003 f9a6 	bl	8004014 <HAL_ADC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000cce:	f001 f8b5 	bl	8001e3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_ADC1_Init+0x130>)
 8000cd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000ce0:	f003 f998 	bl	8004014 <HAL_ADC_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000cea:	f001 f8a7 	bl	8001e3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <MX_ADC1_Init+0x134>)
 8000cf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cf2:	2312      	movs	r3, #18
 8000cf4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <MX_ADC1_Init+0x124>)
 8000cfc:	f003 f98a 	bl	8004014 <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000d06:	f001 f899 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3730      	adds	r7, #48	@ 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	24000094 	.word	0x24000094
 8000d18:	40022000 	.word	0x40022000
 8000d1c:	10c00010 	.word	0x10c00010
 8000d20:	14f00020 	.word	0x14f00020
 8000d24:	08600004 	.word	0x08600004

08000d28 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2224      	movs	r2, #36	@ 0x24
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f010 fd4d 	bl	80117d4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8000df0 <MX_ADC2_Init+0xc8>)
 8000d3e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d42:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d46:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d4e:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d54:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d56:	2204      	movs	r2, #4
 8000d58:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d5a:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d60:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000da0:	4812      	ldr	r0, [pc, #72]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000da2:	f002 f9fb 	bl	800319c <HAL_ADC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000dac:	f001 f846 	bl	8001e3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000db0:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <MX_ADC2_Init+0xcc>)
 8000db2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db4:	2306      	movs	r3, #6
 8000db6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dbc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000dc0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000dd6:	f003 f91d 	bl	8004014 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000de0:	f001 f82c 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	@ 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	24000104 	.word	0x24000104
 8000df0:	40022100 	.word	0x40022100
 8000df4:	25b00200 	.word	0x25b00200

08000df8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e00:	4a3b      	ldr	r2, [pc, #236]	@ (8000ef0 <MX_FDCAN1_Init+0xf8>)
 8000e02:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e04:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e0a:	4b38      	ldr	r3, [pc, #224]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e10:	4b36      	ldr	r3, [pc, #216]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e16:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e1c:	4b33      	ldr	r3, [pc, #204]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000e22:	4b32      	ldr	r3, [pc, #200]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e24:	2206      	movs	r2, #6
 8000e26:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e28:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e34:	4b2d      	ldr	r3, [pc, #180]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e36:	2205      	movs	r2, #5
 8000e38:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e40:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e46:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e4c:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e52:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e58:	4b24      	ldr	r3, [pc, #144]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e5e:	4b23      	ldr	r3, [pc, #140]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e64:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e66:	2220      	movs	r2, #32
 8000e68:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e6a:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e88:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e94:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e96:	2220      	movs	r2, #32
 8000e98:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ea6:	4811      	ldr	r0, [pc, #68]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000ea8:	f006 fc2a 	bl	8007700 <HAL_FDCAN_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000eb2:	f000 ffc3 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	@ (8000eec <MX_FDCAN1_Init+0xf4>)
 8000ed4:	f006 fdf2 	bl	8007abc <HAL_FDCAN_ConfigFilter>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000ede:	f000 ffad 	bl	8001e3c <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	240001ec 	.word	0x240001ec
 8000ef0:	4000a000 	.word	0x4000a000

08000ef4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000efa:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000efc:	4a3b      	ldr	r2, [pc, #236]	@ (8000fec <MX_FDCAN2_Init+0xf8>)
 8000efe:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f00:	4b39      	ldr	r3, [pc, #228]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f06:	4b38      	ldr	r3, [pc, #224]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f0c:	4b36      	ldr	r3, [pc, #216]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f12:	4b35      	ldr	r3, [pc, #212]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f18:	4b33      	ldr	r3, [pc, #204]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000f1e:	4b32      	ldr	r3, [pc, #200]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f20:	2206      	movs	r2, #6
 8000f22:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f24:	4b30      	ldr	r3, [pc, #192]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f30:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f32:	2205      	movs	r2, #5
 8000f34:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f36:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f42:	4b29      	ldr	r3, [pc, #164]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f48:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f54:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f5a:	4b23      	ldr	r3, [pc, #140]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f62:	2210      	movs	r2, #16
 8000f64:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f66:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f68:	2204      	movs	r2, #4
 8000f6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f6e:	2210      	movs	r2, #16
 8000f70:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f74:	2204      	movs	r2, #4
 8000f76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fa2:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000fa4:	f006 fbac 	bl	8007700 <HAL_FDCAN_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000fae:	f000 ff45 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000fb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fb6:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_FDCAN2_Init+0xf4>)
 8000fd2:	f006 fd73 	bl	8007abc <HAL_FDCAN_ConfigFilter>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8000fdc:	f000 ff2e 	bl	8001e3c <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2400028c 	.word	0x2400028c
 8000fec:	4000a400 	.word	0x4000a400

08000ff0 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8000ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80010e8 <MX_FDCAN3_Init+0xf8>)
 8000ffa:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ffc:	4b39      	ldr	r3, [pc, #228]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001002:	4b38      	ldr	r3, [pc, #224]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001008:	4b36      	ldr	r3, [pc, #216]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800100a:	2200      	movs	r2, #0
 800100c:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800100e:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001010:	2200      	movs	r2, #0
 8001012:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001014:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001016:	2200      	movs	r2, #0
 8001018:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 800101a:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800101c:	2206      	movs	r2, #6
 800101e:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001020:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001022:	2201      	movs	r2, #1
 8001024:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001026:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001028:	2202      	movs	r2, #2
 800102a:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800102e:	2205      	movs	r2, #5
 8001030:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001034:	2201      	movs	r2, #1
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800103a:	2201      	movs	r2, #1
 800103c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800103e:	4b29      	ldr	r3, [pc, #164]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001040:	2201      	movs	r2, #1
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001046:	2201      	movs	r2, #1
 8001048:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800104c:	2200      	movs	r2, #0
 800104e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001052:	2201      	movs	r2, #1
 8001054:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001058:	2201      	movs	r2, #1
 800105a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800105e:	2210      	movs	r2, #16
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001062:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001064:	2204      	movs	r2, #4
 8001066:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800106a:	2210      	movs	r2, #16
 800106c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800106e:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001070:	2204      	movs	r2, #4
 8001072:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001074:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001076:	2200      	movs	r2, #0
 8001078:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800107c:	2204      	movs	r2, #4
 800107e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001082:	2200      	movs	r2, #0
 8001084:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001088:	2200      	movs	r2, #0
 800108a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800108e:	2210      	movs	r2, #16
 8001090:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 8001094:	2200      	movs	r2, #0
 8001096:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 800109a:	2204      	movs	r2, #4
 800109c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 800109e:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 80010a0:	f006 fb2e 	bl	8007700 <HAL_FDCAN_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 80010aa:	f000 fec7 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80010ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b2:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_FDCAN3_Init+0xf4>)
 80010ce:	f006 fcf5 	bl	8007abc <HAL_FDCAN_ConfigFilter>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 80010d8:	f000 feb0 	bl	8001e3c <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3720      	adds	r7, #32
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2400032c 	.word	0x2400032c
 80010e8:	4000d400 	.word	0x4000d400

080010ec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <MX_SDMMC1_SD_Init+0x34>)
 80010f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <MX_SDMMC1_SD_Init+0x38>)
 80010f4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_SDMMC1_SD_Init+0x34>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <MX_SDMMC1_SD_Init+0x34>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <MX_SDMMC1_SD_Init+0x34>)
 8001104:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001108:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800110a:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <MX_SDMMC1_SD_Init+0x34>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <MX_SDMMC1_SD_Init+0x34>)
 8001112:	2202      	movs	r2, #2
 8001114:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	240003cc 	.word	0x240003cc
 8001124:	52007000 	.word	0x52007000

08001128 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09c      	sub	sp, #112	@ 0x70
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2234      	movs	r2, #52	@ 0x34
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f010 fb36 	bl	80117d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001168:	4b49      	ldr	r3, [pc, #292]	@ (8001290 <MX_TIM1_Init+0x168>)
 800116a:	4a4a      	ldr	r2, [pc, #296]	@ (8001294 <MX_TIM1_Init+0x16c>)
 800116c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800116e:	4b48      	ldr	r3, [pc, #288]	@ (8001290 <MX_TIM1_Init+0x168>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b46      	ldr	r3, [pc, #280]	@ (8001290 <MX_TIM1_Init+0x168>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800117a:	4b45      	ldr	r3, [pc, #276]	@ (8001290 <MX_TIM1_Init+0x168>)
 800117c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001180:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b43      	ldr	r3, [pc, #268]	@ (8001290 <MX_TIM1_Init+0x168>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001188:	4b41      	ldr	r3, [pc, #260]	@ (8001290 <MX_TIM1_Init+0x168>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118e:	4b40      	ldr	r3, [pc, #256]	@ (8001290 <MX_TIM1_Init+0x168>)
 8001190:	2280      	movs	r2, #128	@ 0x80
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001194:	483e      	ldr	r0, [pc, #248]	@ (8001290 <MX_TIM1_Init+0x168>)
 8001196:	f00c fe39 	bl	800de0c <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011a0:	f000 fe4c 	bl	8001e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011ae:	4619      	mov	r1, r3
 80011b0:	4837      	ldr	r0, [pc, #220]	@ (8001290 <MX_TIM1_Init+0x168>)
 80011b2:	f00d f985 	bl	800e4c0 <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011bc:	f000 fe3e 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c0:	4833      	ldr	r0, [pc, #204]	@ (8001290 <MX_TIM1_Init+0x168>)
 80011c2:	f00c ff01 	bl	800dfc8 <HAL_TIM_PWM_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011cc:	f000 fe36 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e0:	4619      	mov	r1, r3
 80011e2:	482b      	ldr	r0, [pc, #172]	@ (8001290 <MX_TIM1_Init+0x168>)
 80011e4:	f00d feb2 	bl	800ef4c <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011ee:	f000 fe25 	bl	8001e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f2:	2360      	movs	r3, #96	@ 0x60
 80011f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	481e      	ldr	r0, [pc, #120]	@ (8001290 <MX_TIM1_Init+0x168>)
 8001218:	f00d f83e 	bl	800e298 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001222:	f000 fe0b 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001226:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800122a:	2204      	movs	r2, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4818      	ldr	r0, [pc, #96]	@ (8001290 <MX_TIM1_Init+0x168>)
 8001230:	f00d f832 	bl	800e298 <HAL_TIM_PWM_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800123a:	f000 fdff 	bl	8001e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001252:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001256:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001260:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4619      	mov	r1, r3
 8001272:	4807      	ldr	r0, [pc, #28]	@ (8001290 <MX_TIM1_Init+0x168>)
 8001274:	f00d ff06 	bl	800f084 <HAL_TIMEx_ConfigBreakDeadTime>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800127e:	f000 fddd 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001282:	4803      	ldr	r0, [pc, #12]	@ (8001290 <MX_TIM1_Init+0x168>)
 8001284:	f001 f952 	bl	800252c <HAL_TIM_MspPostInit>

}
 8001288:	bf00      	nop
 800128a:	3770      	adds	r7, #112	@ 0x70
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24000448 	.word	0x24000448
 8001294:	40010000 	.word	0x40010000

08001298 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <MX_TIM16_Init+0x48>)
 800129e:	4a11      	ldr	r2, [pc, #68]	@ (80012e4 <MX_TIM16_Init+0x4c>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_TIM16_Init+0x48>)
 80012a4:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80012a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <MX_TIM16_Init+0x48>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <MX_TIM16_Init+0x48>)
 80012b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_TIM16_Init+0x48>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <MX_TIM16_Init+0x48>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <MX_TIM16_Init+0x48>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_TIM16_Init+0x48>)
 80012cc:	f00c fd9e 	bl	800de0c <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012d6:	f000 fdb1 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	24000494 	.word	0x24000494
 80012e4:	40014400 	.word	0x40014400

080012e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 80012ee:	4a23      	ldr	r2, [pc, #140]	@ (800137c <MX_USART1_UART_Init+0x94>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132a:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001330:	4811      	ldr	r0, [pc, #68]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001332:	f00d ff51 	bl	800f1d8 <HAL_UART_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800133c:	f000 fd7e 	bl	8001e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001340:	2100      	movs	r1, #0
 8001342:	480d      	ldr	r0, [pc, #52]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001344:	f00f f8eb 	bl	801051e <HAL_UARTEx_SetTxFifoThreshold>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800134e:	f000 fd75 	bl	8001e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001356:	f00f f920 	bl	801059a <HAL_UARTEx_SetRxFifoThreshold>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001360:	f000 fd6c 	bl	8001e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001366:	f00f f8a1 	bl	80104ac <HAL_UARTEx_DisableFifoMode>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001370:	f000 fd64 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	240004e0 	.word	0x240004e0
 800137c:	40011000 	.word	0x40011000

08001380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 8001386:	4a23      	ldr	r2, [pc, #140]	@ (8001414 <MX_USART2_UART_Init+0x94>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138a:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c8:	4811      	ldr	r0, [pc, #68]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013ca:	f00d ff05 	bl	800f1d8 <HAL_UART_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013d4:	f000 fd32 	bl	8001e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	480d      	ldr	r0, [pc, #52]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013dc:	f00f f89f 	bl	801051e <HAL_UARTEx_SetTxFifoThreshold>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013e6:	f000 fd29 	bl	8001e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013ee:	f00f f8d4 	bl	801059a <HAL_UARTEx_SetRxFifoThreshold>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013f8:	f000 fd20 	bl	8001e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013fe:	f00f f855 	bl	80104ac <HAL_UARTEx_DisableFifoMode>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001408:	f000 fd18 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	24000574 	.word	0x24000574
 8001414:	40004400 	.word	0x40004400

08001418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <MX_DMA_Init+0x3c>)
 8001420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001424:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <MX_DMA_Init+0x3c>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <MX_DMA_Init+0x3c>)
 8001430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	200b      	movs	r0, #11
 8001442:	f004 f854 	bl	80054ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001446:	200b      	movs	r0, #11
 8001448:	f004 f86b 	bl	8005522 <HAL_NVIC_EnableIRQ>

}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024400 	.word	0x58024400

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	@ 0x38
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	4b5e      	ldr	r3, [pc, #376]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001474:	4a5c      	ldr	r2, [pc, #368]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147e:	4b5a      	ldr	r3, [pc, #360]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001488:	623b      	str	r3, [r7, #32]
 800148a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148c:	4b56      	ldr	r3, [pc, #344]	@ (80015e8 <MX_GPIO_Init+0x190>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001492:	4a55      	ldr	r2, [pc, #340]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800149c:	4b52      	ldr	r3, [pc, #328]	@ (80015e8 <MX_GPIO_Init+0x190>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b4f      	ldr	r3, [pc, #316]	@ (80015e8 <MX_GPIO_Init+0x190>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b0:	4a4d      	ldr	r2, [pc, #308]	@ (80015e8 <MX_GPIO_Init+0x190>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ba:	4b4b      	ldr	r3, [pc, #300]	@ (80015e8 <MX_GPIO_Init+0x190>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	4b47      	ldr	r3, [pc, #284]	@ (80015e8 <MX_GPIO_Init+0x190>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ce:	4a46      	ldr	r2, [pc, #280]	@ (80015e8 <MX_GPIO_Init+0x190>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d8:	4b43      	ldr	r3, [pc, #268]	@ (80015e8 <MX_GPIO_Init+0x190>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e6:	4b40      	ldr	r3, [pc, #256]	@ (80015e8 <MX_GPIO_Init+0x190>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ec:	4a3e      	ldr	r2, [pc, #248]	@ (80015e8 <MX_GPIO_Init+0x190>)
 80014ee:	f043 0320 	orr.w	r3, r3, #32
 80014f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f6:	4b3c      	ldr	r3, [pc, #240]	@ (80015e8 <MX_GPIO_Init+0x190>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001504:	4b38      	ldr	r3, [pc, #224]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150a:	4a37      	ldr	r2, [pc, #220]	@ (80015e8 <MX_GPIO_Init+0x190>)
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001514:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001522:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001528:	4a2f      	ldr	r2, [pc, #188]	@ (80015e8 <MX_GPIO_Init+0x190>)
 800152a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800152e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001540:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001546:	4a28      	ldr	r2, [pc, #160]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001550:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <MX_GPIO_Init+0x190>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2103      	movs	r1, #3
 8001562:	4822      	ldr	r0, [pc, #136]	@ (80015ec <MX_GPIO_Init+0x194>)
 8001564:	f007 fc4e 	bl	8008e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800156e:	4820      	ldr	r0, [pc, #128]	@ (80015f0 <MX_GPIO_Init+0x198>)
 8001570:	f007 fc48 	bl	8008e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001574:	2303      	movs	r3, #3
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	4818      	ldr	r0, [pc, #96]	@ (80015ec <MX_GPIO_Init+0x194>)
 800158c:	f007 fa7a 	bl	8008a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4813      	ldr	r0, [pc, #76]	@ (80015f4 <MX_GPIO_Init+0x19c>)
 80015a6:	f007 fa6d 	bl	8008a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80015aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	480b      	ldr	r0, [pc, #44]	@ (80015f0 <MX_GPIO_Init+0x198>)
 80015c4:	f007 fa5e 	bl	8008a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <MX_GPIO_Init+0x1a0>)
 80015dc:	f007 fa52 	bl	8008a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e0:	bf00      	nop
 80015e2:	3738      	adds	r7, #56	@ 0x38
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58020800 	.word	0x58020800
 80015f0:	58021000 	.word	0x58021000
 80015f4:	58021400 	.word	0x58021400
 80015f8:	58021800 	.word	0x58021800

080015fc <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4909      	ldr	r1, [pc, #36]	@ (800162c <print+0x30>)
 8001608:	4809      	ldr	r0, [pc, #36]	@ (8001630 <print+0x34>)
 800160a:	f010 f8c1 	bl	8011790 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800160e:	4808      	ldr	r0, [pc, #32]	@ (8001630 <print+0x34>)
 8001610:	f7fe fe7e 	bl	8000310 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	4904      	ldr	r1, [pc, #16]	@ (8001630 <print+0x34>)
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <print+0x38>)
 8001620:	f00d fe2a 	bl	800f278 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	08012308 	.word	0x08012308
 8001630:	24000728 	.word	0x24000728
 8001634:	24000574 	.word	0x24000574

08001638 <printValue>:

void printValue(int value)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4909      	ldr	r1, [pc, #36]	@ (8001668 <printValue+0x30>)
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <printValue+0x34>)
 8001646:	f010 f8a3 	bl	8011790 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800164a:	4808      	ldr	r0, [pc, #32]	@ (800166c <printValue+0x34>)
 800164c:	f7fe fe60 	bl	8000310 <strlen>
 8001650:	4603      	mov	r3, r0
 8001652:	b29a      	uxth	r2, r3
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	4904      	ldr	r1, [pc, #16]	@ (800166c <printValue+0x34>)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <printValue+0x38>)
 800165c:	f00d fe0c 	bl	800f278 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	08012310 	.word	0x08012310
 800166c:	24000728 	.word	0x24000728
 8001670:	24000574 	.word	0x24000574

08001674 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80ca 	beq.w	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a66      	ldr	r2, [pc, #408]	@ (800183c <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d162      	bne.n	800176e <HAL_FDCAN_RxFifo0Callback+0xe6>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80016a8:	4b65      	ldr	r3, [pc, #404]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016aa:	4a66      	ldr	r2, [pc, #408]	@ (8001844 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016ac:	2140      	movs	r1, #64	@ 0x40
 80016ae:	4866      	ldr	r0, [pc, #408]	@ (8001848 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016b0:	f006 fb00 	bl	8007cb4 <HAL_FDCAN_GetRxMessage>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 80bb 	bne.w	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 80016bc:	4b61      	ldr	r3, [pc, #388]	@ (8001844 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f240 4266 	movw	r2, #1126	@ 0x466
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d03c      	beq.n	8001742 <HAL_FDCAN_RxFifo0Callback+0xba>
 80016c8:	f240 4266 	movw	r2, #1126	@ 0x466
 80016cc:	4293      	cmp	r3, r2
 80016ce:	f200 80b0 	bhi.w	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
 80016d2:	f240 4261 	movw	r2, #1121	@ 0x461
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d004      	beq.n	80016e4 <HAL_FDCAN_RxFifo0Callback+0x5c>
 80016da:	f240 4263 	movw	r2, #1123	@ 0x463
 80016de:	4293      	cmp	r3, r2
 80016e0:	d015      	beq.n	800170e <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 80016e2:	e0a6      	b.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					state = RxData_Inv[4] & 0xF;
 80016e4:	4b56      	ldr	r3, [pc, #344]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016e6:	791b      	ldrb	r3, [r3, #4]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b57      	ldr	r3, [pc, #348]	@ (800184c <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016f0:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 80016f2:	4b56      	ldr	r3, [pc, #344]	@ (800184c <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b0a      	cmp	r3, #10
 80016f8:	d004      	beq.n	8001704 <HAL_FDCAN_RxFifo0Callback+0x7c>
 80016fa:	4b54      	ldr	r3, [pc, #336]	@ (800184c <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b0b      	cmp	r3, #11
 8001700:	f040 8090 	bne.w	8001824 <HAL_FDCAN_RxFifo0Callback+0x19c>
						error = RxData_Inv[2];
 8001704:	4b4e      	ldr	r3, [pc, #312]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001706:	789a      	ldrb	r2, [r3, #2]
 8001708:	4b51      	ldr	r3, [pc, #324]	@ (8001850 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800170a:	701a      	strb	r2, [r3, #0]
					break;
 800170c:	e08a      	b.n	8001824 <HAL_FDCAN_RxFifo0Callback+0x19c>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 800170e:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001710:	79db      	ldrb	r3, [r3, #7]
 8001712:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001716:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001718:	7a1b      	ldrb	r3, [r3, #8]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	4313      	orrs	r3, r2
 800171e:	4a48      	ldr	r2, [pc, #288]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001720:	7952      	ldrb	r2, [r2, #5]
 8001722:	4313      	orrs	r3, r2
 8001724:	4a4b      	ldr	r2, [pc, #300]	@ (8001854 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001726:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001728:	4b4a      	ldr	r3, [pc, #296]	@ (8001854 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d079      	beq.n	8001828 <HAL_FDCAN_RxFifo0Callback+0x1a0>
						e_machine_rpm |= 0xFFF0000;
 8001734:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800173a:	4313      	orrs	r3, r2
 800173c:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800173e:	6013      	str	r3, [r2, #0]
					break;
 8001740:	e072      	b.n	8001828 <HAL_FDCAN_RxFifo0Callback+0x1a0>
					if (RxHeader_Inv.DataLength == 6)
 8001742:	4b40      	ldr	r3, [pc, #256]	@ (8001844 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b06      	cmp	r3, #6
 8001748:	d170      	bne.n	800182c <HAL_FDCAN_RxFifo0Callback+0x1a4>
						if (config_inv_lectura_v == 0)
 800174a:	4b44      	ldr	r3, [pc, #272]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <HAL_FDCAN_RxFifo0Callback+0xd2>
							config_inv_lectura_v = 1;
 8001752:	4b42      	ldr	r3, [pc, #264]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
					break;
 8001758:	e068      	b.n	800182c <HAL_FDCAN_RxFifo0Callback+0x1a4>
						else if (config_inv_lectura_v == 1)
 800175a:	4b40      	ldr	r3, [pc, #256]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d164      	bne.n	800182c <HAL_FDCAN_RxFifo0Callback+0x1a4>
							inv_dc_bus_voltage = RxData_Inv[2];
 8001762:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001764:	789b      	ldrb	r3, [r3, #2]
 8001766:	461a      	mov	r2, r3
 8001768:	4b3d      	ldr	r3, [pc, #244]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800176a:	601a      	str	r2, [r3, #0]
					break;
 800176c:	e05e      	b.n	800182c <HAL_FDCAN_RxFifo0Callback+0x1a4>
		else if (hfdcan->Instance == FDCAN2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a3c      	ldr	r2, [pc, #240]	@ (8001864 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d126      	bne.n	80017c6 <HAL_FDCAN_RxFifo0Callback+0x13e>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 8001778:	4b3b      	ldr	r3, [pc, #236]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 800177a:	4a3c      	ldr	r2, [pc, #240]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 800177c:	2140      	movs	r1, #64	@ 0x40
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f006 fa98 	bl	8007cb4 <HAL_FDCAN_GetRxMessage>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d153      	bne.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
				switch (RxHeader_Acu.Identifier)
 800178a:	4b38      	ldr	r3, [pc, #224]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b20      	cmp	r3, #32
 8001790:	d003      	beq.n	800179a <HAL_FDCAN_RxFifo0Callback+0x112>
 8001792:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001796:	d008      	beq.n	80017aa <HAL_FDCAN_RxFifo0Callback+0x122>
}
 8001798:	e04b      	b.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					if (RxData_Acu[0] == 0)
 800179a:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d146      	bne.n	8001830 <HAL_FDCAN_RxFifo0Callback+0x1a8>
						precarga_inv = 1;
 80017a2:	4b33      	ldr	r3, [pc, #204]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
					break;
 80017a8:	e042      	b.n	8001830 <HAL_FDCAN_RxFifo0Callback+0x1a8>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80017b2:	7852      	ldrb	r2, [r2, #1]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]
					break;
 80017c4:	e035      	b.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
		else if (hfdcan->Instance == FDCAN3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d130      	bne.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80017d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001880 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80017d4:	2140      	movs	r1, #64	@ 0x40
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f006 fa6c 	bl	8007cb4 <HAL_FDCAN_GetRxMessage>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d127      	bne.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
				switch (RxHeader_Dash.Identifier)
 80017e2:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f240 1233 	movw	r2, #307	@ 0x133
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d121      	bne.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 80017ee:	4b23      	ldr	r3, [pc, #140]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	4b20      	ldr	r3, [pc, #128]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80017fa:	785b      	ldrb	r3, [r3, #1]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b21b      	sxth	r3, r3
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001806:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 8001808:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	b21b      	sxth	r3, r3
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b21a      	sxth	r2, r3
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001814:	78db      	ldrb	r3, [r3, #3]
 8001816:	b21b      	sxth	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	b21b      	sxth	r3, r3
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001820:	801a      	strh	r2, [r3, #0]
}
 8001822:	e006      	b.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 8001824:	bf00      	nop
 8001826:	e004      	b.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 8001828:	bf00      	nop
 800182a:	e002      	b.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 8001830:	bf00      	nop
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	4000a000 	.word	0x4000a000
 8001840:	240006d0 	.word	0x240006d0
 8001844:	2400062c 	.word	0x2400062c
 8001848:	240001ec 	.word	0x240001ec
 800184c:	2400071a 	.word	0x2400071a
 8001850:	24000886 	.word	0x24000886
 8001854:	240006f8 	.word	0x240006f8
 8001858:	0fff0000 	.word	0x0fff0000
 800185c:	2400008c 	.word	0x2400008c
 8001860:	240006f4 	.word	0x240006f4
 8001864:	4000a400 	.word	0x4000a400
 8001868:	240006e0 	.word	0x240006e0
 800186c:	24000678 	.word	0x24000678
 8001870:	24000088 	.word	0x24000088
 8001874:	24000008 	.word	0x24000008
 8001878:	4000d400 	.word	0x4000d400
 800187c:	240006e8 	.word	0x240006e8
 8001880:	240006a0 	.word	0x240006a0
 8001884:	24000702 	.word	0x24000702
 8001888:	24000704 	.word	0x24000704

0800188c <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a03      	ldr	r2, [pc, #12]	@ (80018a8 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 800189a:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	2400028c 	.word	0x2400028c
 80018ac:	00000000 	.word	0x00000000

080018b0 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 80018b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001b28 <setTorque+0x278>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018c6:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 80018ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018d2:	ee17 3a90 	vmov	r3, s15
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b94      	ldr	r3, [pc, #592]	@ (8001b2c <setTorque+0x27c>)
 80018da:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 80018dc:	4b93      	ldr	r3, [pc, #588]	@ (8001b2c <setTorque+0x27c>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	2b64      	cmp	r3, #100	@ 0x64
 80018e2:	d902      	bls.n	80018ea <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 80018e4:	4b91      	ldr	r3, [pc, #580]	@ (8001b2c <setTorque+0x27c>)
 80018e6:	2264      	movs	r2, #100	@ 0x64
 80018e8:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 80018ea:	4b91      	ldr	r3, [pc, #580]	@ (8001b30 <setTorque+0x280>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018fa:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 8001b00 <setTorque+0x250>
 80018fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001902:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001906:	ee17 3a90 	vmov	r3, s15
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b89      	ldr	r3, [pc, #548]	@ (8001b34 <setTorque+0x284>)
 800190e:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001910:	4b88      	ldr	r3, [pc, #544]	@ (8001b34 <setTorque+0x284>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	2b64      	cmp	r3, #100	@ 0x64
 8001916:	d902      	bls.n	800191e <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001918:	4b86      	ldr	r3, [pc, #536]	@ (8001b34 <setTorque+0x284>)
 800191a:	2264      	movs	r2, #100	@ 0x64
 800191c:	801a      	strh	r2, [r3, #0]
	}

#if 1
	print("Sensor % 1: ");
 800191e:	4886      	ldr	r0, [pc, #536]	@ (8001b38 <setTorque+0x288>)
 8001920:	f7ff fe6c 	bl	80015fc <print>
	printValue(s1_aceleracion_aux);
 8001924:	4b81      	ldr	r3, [pc, #516]	@ (8001b2c <setTorque+0x27c>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fe85 	bl	8001638 <printValue>
	print("");
 800192e:	4883      	ldr	r0, [pc, #524]	@ (8001b3c <setTorque+0x28c>)
 8001930:	f7ff fe64 	bl	80015fc <print>
	print("Sensor % 2: ");
 8001934:	4882      	ldr	r0, [pc, #520]	@ (8001b40 <setTorque+0x290>)
 8001936:	f7ff fe61 	bl	80015fc <print>
	printValue(s2_aceleracion_aux);
 800193a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b34 <setTorque+0x284>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fe7a 	bl	8001638 <printValue>
	print("");
 8001944:	487d      	ldr	r0, [pc, #500]	@ (8001b3c <setTorque+0x28c>)
 8001946:	f7ff fe59 	bl	80015fc <print>
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 800194a:	4b78      	ldr	r3, [pc, #480]	@ (8001b2c <setTorque+0x27c>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2b08      	cmp	r3, #8
 8001950:	d911      	bls.n	8001976 <setTorque+0xc6>
 8001952:	4b78      	ldr	r3, [pc, #480]	@ (8001b34 <setTorque+0x284>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	2b08      	cmp	r3, #8
 8001958:	d90d      	bls.n	8001976 <setTorque+0xc6>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 800195a:	4b74      	ldr	r3, [pc, #464]	@ (8001b2c <setTorque+0x27c>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <setTorque+0x284>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	4413      	add	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	da00      	bge.n	800196c <setTorque+0xbc>
 800196a:	3301      	adds	r3, #1
 800196c:	105b      	asrs	r3, r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b74      	ldr	r3, [pc, #464]	@ (8001b44 <setTorque+0x294>)
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	e002      	b.n	800197c <setTorque+0xcc>
	}
	else
	{
		torque_total = 0;
 8001976:	4b73      	ldr	r3, [pc, #460]	@ (8001b44 <setTorque+0x294>)
 8001978:	2200      	movs	r2, #0
 800197a:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 800197c:	4b71      	ldr	r3, [pc, #452]	@ (8001b44 <setTorque+0x294>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	2b09      	cmp	r3, #9
 8001982:	d803      	bhi.n	800198c <setTorque+0xdc>
	{
		torque_total = 0;
 8001984:	4b6f      	ldr	r3, [pc, #444]	@ (8001b44 <setTorque+0x294>)
 8001986:	2200      	movs	r2, #0
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	e006      	b.n	800199a <setTorque+0xea>
	}
	else if (torque_total > 90)
 800198c:	4b6d      	ldr	r3, [pc, #436]	@ (8001b44 <setTorque+0x294>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	2b5a      	cmp	r3, #90	@ 0x5a
 8001992:	d902      	bls.n	800199a <setTorque+0xea>
	{
		torque_total = 100;
 8001994:	4b6b      	ldr	r3, [pc, #428]	@ (8001b44 <setTorque+0x294>)
 8001996:	2264      	movs	r2, #100	@ 0x64
 8001998:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 800199a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b48 <setTorque+0x298>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019a2:	4293      	cmp	r3, r2
 80019a4:	dd0a      	ble.n	80019bc <setTorque+0x10c>
 80019a6:	4b67      	ldr	r3, [pc, #412]	@ (8001b44 <setTorque+0x294>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	2b19      	cmp	r3, #25
 80019ac:	d906      	bls.n	80019bc <setTorque+0x10c>
	{
		print("EV_2_3");
 80019ae:	4867      	ldr	r0, [pc, #412]	@ (8001b4c <setTorque+0x29c>)
 80019b0:	f7ff fe24 	bl	80015fc <print>
		flag_EV_2_3 = 1;
 80019b4:	4b66      	ldr	r3, [pc, #408]	@ (8001b50 <setTorque+0x2a0>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e00c      	b.n	80019d6 <setTorque+0x126>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 80019bc:	4b62      	ldr	r3, [pc, #392]	@ (8001b48 <setTorque+0x298>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019c4:	4293      	cmp	r3, r2
 80019c6:	dc06      	bgt.n	80019d6 <setTorque+0x126>
 80019c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b44 <setTorque+0x294>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d802      	bhi.n	80019d6 <setTorque+0x126>
	{
		flag_EV_2_3 = 0;
 80019d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b50 <setTorque+0x2a0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 80019d6:	4b55      	ldr	r3, [pc, #340]	@ (8001b2c <setTorque+0x27c>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	4b55      	ldr	r3, [pc, #340]	@ (8001b34 <setTorque+0x284>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bfb8      	it	lt
 80019e6:	425b      	neglt	r3, r3
 80019e8:	2b0a      	cmp	r3, #10
 80019ea:	dd06      	ble.n	80019fa <setTorque+0x14a>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 80019ec:	4859      	ldr	r0, [pc, #356]	@ (8001b54 <setTorque+0x2a4>)
 80019ee:	f7ff fe05 	bl	80015fc <print>
		flag_T11_8_9 = 1;
 80019f2:	4b59      	ldr	r3, [pc, #356]	@ (8001b58 <setTorque+0x2a8>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e007      	b.n	8001a0a <setTorque+0x15a>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 80019fa:	f001 f863 	bl	8002ac4 <HAL_GetTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a56      	ldr	r2, [pc, #344]	@ (8001b5c <setTorque+0x2ac>)
 8001a02:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001a04:	4b54      	ldr	r3, [pc, #336]	@ (8001b58 <setTorque+0x2a8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001a0a:	4b51      	ldr	r3, [pc, #324]	@ (8001b50 <setTorque+0x2a0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <setTorque+0x16a>
 8001a12:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <setTorque+0x2a8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <setTorque+0x170>
	{
		torque_total = 0;
 8001a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b44 <setTorque+0x294>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001a20:	4b4f      	ldr	r3, [pc, #316]	@ (8001b60 <setTorque+0x2b0>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001b64 <setTorque+0x2b4>
 8001a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	d53a      	bpl.n	8001aaa <setTorque+0x1fa>
	{
		if (v_celda_min > 2800)
 8001a34:	4b4a      	ldr	r3, [pc, #296]	@ (8001b60 <setTorque+0x2b0>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001b68 <setTorque+0x2b8>
 8001a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	dd1f      	ble.n	8001a88 <setTorque+0x1d8>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001a48:	4b3e      	ldr	r3, [pc, #248]	@ (8001b44 <setTorque+0x294>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a54:	4b42      	ldr	r3, [pc, #264]	@ (8001b60 <setTorque+0x2b0>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a5e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b08 <setTorque+0x258>
 8001a62:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a66:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b10 <setTorque+0x260>
 8001a6a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001a6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a72:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001b18 <setTorque+0x268>
 8001a76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a7a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a7e:	ee17 2a90 	vmov	r2, s15
 8001a82:	4b3a      	ldr	r3, [pc, #232]	@ (8001b6c <setTorque+0x2bc>)
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e015      	b.n	8001ab4 <setTorque+0x204>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001a88:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <setTorque+0x294>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a94:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8001b20 <setTorque+0x270>
 8001a98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a9c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001aa0:	ee17 2a90 	vmov	r2, s15
 8001aa4:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <setTorque+0x2bc>)
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e004      	b.n	8001ab4 <setTorque+0x204>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001aaa:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <setTorque+0x294>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <setTorque+0x2bc>)
 8001ab2:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <setTorque+0x294>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	d912      	bls.n	8001ae2 <setTorque+0x232>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001abc:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <setTorque+0x294>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4a29      	ldr	r2, [pc, #164]	@ (8001b70 <setTorque+0x2c0>)
 8001acc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad0:	441a      	add	r2, r3
 8001ad2:	1192      	asrs	r2, r2, #6
 8001ad4:	17db      	asrs	r3, r3, #31
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b1a      	subs	r3, #26
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <setTorque+0x294>)
 8001ae0:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <setTorque+0x294>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	3301      	adds	r3, #1
 8001aee:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001af0:	88bb      	ldrh	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	f3af 8000 	nop.w
 8001b00:	33333334 	.word	0x33333334
 8001b04:	401a3333 	.word	0x401a3333
 8001b08:	a1cac083 	.word	0xa1cac083
 8001b0c:	3ff5b645 	.word	0x3ff5b645
 8001b10:	00000000 	.word	0x00000000
 8001b14:	40ad4c00 	.word	0x40ad4c00
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	408f4000 	.word	0x408f4000
 8001b20:	9999999a 	.word	0x9999999a
 8001b24:	3fa99999 	.word	0x3fa99999
 8001b28:	24000702 	.word	0x24000702
 8001b2c:	24000706 	.word	0x24000706
 8001b30:	24000704 	.word	0x24000704
 8001b34:	24000708 	.word	0x24000708
 8001b38:	08012324 	.word	0x08012324
 8001b3c:	08012334 	.word	0x08012334
 8001b40:	08012338 	.word	0x08012338
 8001b44:	24000710 	.word	0x24000710
 8001b48:	2400070c 	.word	0x2400070c
 8001b4c:	08012348 	.word	0x08012348
 8001b50:	24000720 	.word	0x24000720
 8001b54:	08012350 	.word	0x08012350
 8001b58:	24000724 	.word	0x24000724
 8001b5c:	2400071c 	.word	0x2400071c
 8001b60:	24000008 	.word	0x24000008
 8001b64:	455ac000 	.word	0x455ac000
 8001b68:	452f0000 	.word	0x452f0000
 8001b6c:	24000714 	.word	0x24000714
 8001b70:	b60b60b7 	.word	0xb60b60b7

08001b74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a9e      	ldr	r2, [pc, #632]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	f040 8134 	bne.w	8001dee <HAL_TIM_PeriodElapsedCallback+0x27a>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 8001b86:	4b9d      	ldr	r3, [pc, #628]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d003      	beq.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x22>
 8001b8e:	4b9b      	ldr	r3, [pc, #620]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d11b      	bne.n	8001bce <HAL_TIM_PeriodElapsedCallback+0x5a>
 8001b96:	4b9a      	ldr	r3, [pc, #616]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d117      	bne.n	8001bce <HAL_TIM_PeriodElapsedCallback+0x5a>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b9e:	4b99      	ldr	r3, [pc, #612]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a99      	ldr	r2, [pc, #612]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ba4:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001ba6:	4b98      	ldr	r3, [pc, #608]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ba8:	2203      	movs	r2, #3
 8001baa:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001bac:	4b96      	ldr	r3, [pc, #600]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001bb2:	4b96      	ldr	r3, [pc, #600]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001bb8:	4b94      	ldr	r3, [pc, #592]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001bbe:	4b93      	ldr	r3, [pc, #588]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bc0:	2206      	movs	r2, #6
 8001bc2:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bc4:	4a91      	ldr	r2, [pc, #580]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bc6:	4990      	ldr	r1, [pc, #576]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bc8:	4891      	ldr	r0, [pc, #580]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001bca:	f006 f818 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		switch (state)
 8001bce:	4b8b      	ldr	r3, [pc, #556]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b0d      	cmp	r3, #13
 8001bd4:	f200 810b 	bhi.w	8001dee <HAL_TIM_PeriodElapsedCallback+0x27a>
 8001bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8001be0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bde:	bf00      	nop
 8001be0:	08001c19 	.word	0x08001c19
 8001be4:	08001def 	.word	0x08001def
 8001be8:	08001def 	.word	0x08001def
 8001bec:	08001c49 	.word	0x08001c49
 8001bf0:	08001c87 	.word	0x08001c87
 8001bf4:	08001def 	.word	0x08001def
 8001bf8:	08001cd9 	.word	0x08001cd9
 8001bfc:	08001def 	.word	0x08001def
 8001c00:	08001def 	.word	0x08001def
 8001c04:	08001def 	.word	0x08001def
 8001c08:	08001d39 	.word	0x08001d39
 8001c0c:	08001d79 	.word	0x08001d79
 8001c10:	08001def 	.word	0x08001def
 8001c14:	08001db5 	.word	0x08001db5
		{
		case 0:
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c18:	4b7a      	ldr	r3, [pc, #488]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c1e:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c20:	4b79      	ldr	r3, [pc, #484]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c22:	2203      	movs	r2, #3
 8001c24:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c26:	4b78      	ldr	r3, [pc, #480]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c2c:	4b77      	ldr	r3, [pc, #476]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c32:	4b76      	ldr	r3, [pc, #472]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001c38:	4b74      	ldr	r3, [pc, #464]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c3e:	4a73      	ldr	r2, [pc, #460]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c40:	4971      	ldr	r1, [pc, #452]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c42:	4873      	ldr	r0, [pc, #460]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001c44:	f005 ffdb 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>

		case 3:
#if DEBUG
			//print("state: standby");
#endif
			if (flag_r2d == 1){
 8001c48:	4b6d      	ldr	r3, [pc, #436]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d11a      	bne.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0x112>
				flag_react = 0;
 8001c50:	4b70      	ldr	r3, [pc, #448]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c56:	4b6b      	ldr	r3, [pc, #428]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6b      	ldr	r2, [pc, #428]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c5c:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c60:	2203      	movs	r2, #3
 8001c62:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c64:	4b68      	ldr	r3, [pc, #416]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001c6a:	4b68      	ldr	r3, [pc, #416]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001c70:	4b66      	ldr	r3, [pc, #408]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 8001c76:	4b65      	ldr	r3, [pc, #404]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c78:	2204      	movs	r2, #4
 8001c7a:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c7c:	4a63      	ldr	r2, [pc, #396]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c7e:	4962      	ldr	r1, [pc, #392]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c80:	4863      	ldr	r0, [pc, #396]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001c82:	f005 ffbc 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>
			//}

		case 4:

#if DEBUG
			print("state: ready");
 8001c86:	4864      	ldr	r0, [pc, #400]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c88:	f7ff fcb8 	bl	80015fc <print>
#endif
			if (flag_r2d == 1){
 8001c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	f040 80ab 	bne.w	8001dec <HAL_TIM_PeriodElapsedCallback+0x278>
				TxHeader_Inv.Identifier = 0x362;
 8001c96:	4b5c      	ldr	r3, [pc, #368]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c98:	f240 3262 	movw	r2, #866	@ 0x362
 8001c9c:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	60da      	str	r2, [r3, #12]

				real_torque = 0;
 8001ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	801a      	strh	r2, [r3, #0]

				TxData_Inv[0] = 0x0;
 8001caa:	4b58      	ldr	r3, [pc, #352]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001cb0:	4b56      	ldr	r3, [pc, #344]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = real_torque;
 8001cb6:	4b59      	ldr	r3, [pc, #356]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b53      	ldr	r3, [pc, #332]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001cbe:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = 0x0;
 8001cc0:	4b52      	ldr	r3, [pc, #328]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	70da      	strb	r2, [r3, #3]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001cc6:	4a51      	ldr	r2, [pc, #324]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001cc8:	494f      	ldr	r1, [pc, #316]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001cca:	4851      	ldr	r0, [pc, #324]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ccc:	f005 ff97 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>
				flag_react = 0; // Reactivado
 8001cd0:	4b50      	ldr	r3, [pc, #320]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001cd6:	e089      	b.n	8001dec <HAL_TIM_PeriodElapsedCallback+0x278>
		case 6:
			print("state: torque");
 8001cd8:	4851      	ldr	r0, [pc, #324]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001cda:	f7ff fc8f 	bl	80015fc <print>

			// Request TORQUE inversor

			// flag_react = 1;

			real_torque = setTorque();
 8001cde:	f7ff fde7 	bl	80018b0 <setTorque>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ce8:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001cea:	4b47      	ldr	r3, [pc, #284]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001cec:	f240 3262 	movw	r2, #866	@ 0x362
 8001cf0:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001cf2:	4b45      	ldr	r3, [pc, #276]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	60da      	str	r2, [r3, #12]

			// real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001cf8:	4b48      	ldr	r3, [pc, #288]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b49      	ldr	r3, [pc, #292]	@ (8001e24 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d00:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001d02:	4b46      	ldr	r3, [pc, #280]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b46      	ldr	r3, [pc, #280]	@ (8001e28 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d0e:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001d10:	4b3e      	ldr	r3, [pc, #248]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001d16:	4b3d      	ldr	r3, [pc, #244]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001d1c:	4b41      	ldr	r3, [pc, #260]	@ (8001e24 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b3a      	ldr	r3, [pc, #232]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d22:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001d24:	4b40      	ldr	r3, [pc, #256]	@ (8001e28 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b38      	ldr	r3, [pc, #224]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d2a:	70da      	strb	r2, [r3, #3]
			// TxData_Inv[2] = 0xFE;
			// TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d2c:	4a37      	ldr	r2, [pc, #220]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d2e:	4936      	ldr	r1, [pc, #216]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d30:	4837      	ldr	r0, [pc, #220]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001d32:	f005 ff64 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>
			//CAN_bus_off_check_reset(&hfdcan1);

			break;
 8001d36:	e05a      	b.n	8001dee <HAL_TIM_PeriodElapsedCallback+0x27a>

		case 10:
			print("state: soft fault");
 8001d38:	483c      	ldr	r0, [pc, #240]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d3a:	f7ff fc5f 	bl	80015fc <print>
			printValue(error);
 8001d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e30 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fc78 	bl	8001638 <printValue>

			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d48:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d4e:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d52:	2203      	movs	r2, #3
 8001d54:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d56:	4b2c      	ldr	r3, [pc, #176]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001d62:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x13;
 8001d68:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d6a:	2213      	movs	r2, #19
 8001d6c:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d6e:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d70:	4925      	ldr	r1, [pc, #148]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d72:	4827      	ldr	r0, [pc, #156]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001d74:	f005 ff43 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
												  TxData_Inv);
				}*/

		case 11:
			print("state: hard fault");
 8001d78:	482e      	ldr	r0, [pc, #184]	@ (8001e34 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d7a:	f7ff fc3f 	bl	80015fc <print>
			flag_react = 1;
 8001d7e:	4b25      	ldr	r3, [pc, #148]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d84:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1f      	ldr	r2, [pc, #124]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d8a:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d8e:	2203      	movs	r2, #3
 8001d90:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d92:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 13;
 8001da4:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001da6:	220d      	movs	r2, #13
 8001da8:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001daa:	4a18      	ldr	r2, [pc, #96]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001dac:	4916      	ldr	r1, [pc, #88]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001dae:	4818      	ldr	r0, [pc, #96]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001db0:	f005 ff25 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>

		case 13:
			print("state: shutdown");
 8001db4:	4820      	ldr	r0, [pc, #128]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001db6:	f7ff fc21 	bl	80015fc <print>
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001dc0:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001dda:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001de0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001de2:	4909      	ldr	r1, [pc, #36]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001de4:	480a      	ldr	r0, [pc, #40]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001de6:	f005 ff0a 	bl	8007bfe <HAL_FDCAN_AddMessageToTxFifoQ>


			break;
 8001dea:	e000      	b.n	8001dee <HAL_TIM_PeriodElapsedCallback+0x27a>
			break;
 8001dec:	bf00      	nop
		}
#endif
	}
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	24000494 	.word	0x24000494
 8001dfc:	2400071a 	.word	0x2400071a
 8001e00:	24000888 	.word	0x24000888
 8001e04:	24000000 	.word	0x24000000
 8001e08:	24000608 	.word	0x24000608
 8001e0c:	240006c8 	.word	0x240006c8
 8001e10:	240001ec 	.word	0x240001ec
 8001e14:	24000887 	.word	0x24000887
 8001e18:	08012284 	.word	0x08012284
 8001e1c:	24000718 	.word	0x24000718
 8001e20:	08012358 	.word	0x08012358
 8001e24:	24000712 	.word	0x24000712
 8001e28:	24000713 	.word	0x24000713
 8001e2c:	08012368 	.word	0x08012368
 8001e30:	24000886 	.word	0x24000886
 8001e34:	0801237c 	.word	0x0801237c
 8001e38:	08012390 	.word	0x08012390

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <Error_Handler+0x8>

08001e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <HAL_MspInit+0x30>)
 8001e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e54:	4a08      	ldr	r2, [pc, #32]	@ (8001e78 <HAL_MspInit+0x30>)
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_MspInit+0x30>)
 8001e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	58024400 	.word	0x58024400

08001e7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b090      	sub	sp, #64	@ 0x40
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a90      	ldr	r2, [pc, #576]	@ (80020dc <HAL_ADC_MspInit+0x260>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	f040 80a3 	bne.w	8001fe6 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80020e0 <HAL_ADC_MspInit+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a8e      	ldr	r2, [pc, #568]	@ (80020e0 <HAL_ADC_MspInit+0x264>)
 8001ea8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80020e0 <HAL_ADC_MspInit+0x264>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001eb2:	4b8c      	ldr	r3, [pc, #560]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001eb8:	4a8a      	ldr	r2, [pc, #552]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001eba:	f043 0320 	orr.w	r3, r3, #32
 8001ebe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ec2:	4b88      	ldr	r3, [pc, #544]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	4b84      	ldr	r3, [pc, #528]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed6:	4a83      	ldr	r2, [pc, #524]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee0:	4b80      	ldr	r3, [pc, #512]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4b7d      	ldr	r3, [pc, #500]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef4:	4a7b      	ldr	r2, [pc, #492]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001efe:	4b79      	ldr	r3, [pc, #484]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0c:	4b75      	ldr	r3, [pc, #468]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f12:	4a74      	ldr	r2, [pc, #464]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001f14:	f043 0320 	orr.w	r3, r3, #32
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f1c:	4b71      	ldr	r3, [pc, #452]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8001f2a:	2330      	movs	r3, #48	@ 0x30
 8001f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	486a      	ldr	r0, [pc, #424]	@ (80020e8 <HAL_ADC_MspInit+0x26c>)
 8001f3e:	f006 fda1 	bl	8008a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8001f42:	2303      	movs	r3, #3
 8001f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f46:	2303      	movs	r3, #3
 8001f48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f52:	4619      	mov	r1, r3
 8001f54:	4865      	ldr	r0, [pc, #404]	@ (80020ec <HAL_ADC_MspInit+0x270>)
 8001f56:	f006 fd95 	bl	8008a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001f5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f60:	2303      	movs	r3, #3
 8001f62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001f68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4860      	ldr	r0, [pc, #384]	@ (80020f0 <HAL_ADC_MspInit+0x274>)
 8001f70:	f006 fd88 	bl	8008a84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f74:	4b5f      	ldr	r3, [pc, #380]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001f76:	4a60      	ldr	r2, [pc, #384]	@ (80020f8 <HAL_ADC_MspInit+0x27c>)
 8001f78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001f7c:	2209      	movs	r2, #9
 8001f7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f80:	4b5c      	ldr	r3, [pc, #368]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f86:	4b5b      	ldr	r3, [pc, #364]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f8c:	4b59      	ldr	r3, [pc, #356]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001f8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f94:	4b57      	ldr	r3, [pc, #348]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f9c:	4b55      	ldr	r3, [pc, #340]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001f9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fa4:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001fa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001faa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fac:	4b51      	ldr	r3, [pc, #324]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb2:	4b50      	ldr	r3, [pc, #320]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fb8:	484e      	ldr	r0, [pc, #312]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001fba:	f003 facd 	bl	8005558 <HAL_DMA_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001fc4:	f7ff ff3a 	bl	8001e3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a4a      	ldr	r2, [pc, #296]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001fcc:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fce:	4a49      	ldr	r2, [pc, #292]	@ (80020f4 <HAL_ADC_MspInit+0x278>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2012      	movs	r0, #18
 8001fda:	f003 fa88 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fde:	2012      	movs	r0, #18
 8001fe0:	f003 fa9f 	bl	8005522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001fe4:	e076      	b.n	80020d4 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a44      	ldr	r2, [pc, #272]	@ (80020fc <HAL_ADC_MspInit+0x280>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d171      	bne.n	80020d4 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_ADC_MspInit+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	4a3a      	ldr	r2, [pc, #232]	@ (80020e0 <HAL_ADC_MspInit+0x264>)
 8001ff8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ffa:	4b39      	ldr	r3, [pc, #228]	@ (80020e0 <HAL_ADC_MspInit+0x264>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10e      	bne.n	8002020 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002002:	4b38      	ldr	r3, [pc, #224]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8002004:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002008:	4a36      	ldr	r2, [pc, #216]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 800200a:	f043 0320 	orr.w	r3, r3, #32
 800200e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002012:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8002014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002020:	4b30      	ldr	r3, [pc, #192]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002026:	4a2f      	ldr	r2, [pc, #188]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002030:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	4a27      	ldr	r2, [pc, #156]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800204e:	4b25      	ldr	r3, [pc, #148]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800205c:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002062:	4a20      	ldr	r2, [pc, #128]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800206c:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <HAL_ADC_MspInit+0x268>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 800207a:	2320      	movs	r3, #32
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8002086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800208a:	4619      	mov	r1, r3
 800208c:	4816      	ldr	r0, [pc, #88]	@ (80020e8 <HAL_ADC_MspInit+0x26c>)
 800208e:	f006 fcf9 	bl	8008a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8002092:	2301      	movs	r3, #1
 8002094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002096:	2303      	movs	r3, #3
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a2:	4619      	mov	r1, r3
 80020a4:	4811      	ldr	r0, [pc, #68]	@ (80020ec <HAL_ADC_MspInit+0x270>)
 80020a6:	f006 fced 	bl	8008a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 80020aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b0:	2303      	movs	r3, #3
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020bc:	4619      	mov	r1, r3
 80020be:	480c      	ldr	r0, [pc, #48]	@ (80020f0 <HAL_ADC_MspInit+0x274>)
 80020c0:	f006 fce0 	bl	8008a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2012      	movs	r0, #18
 80020ca:	f003 fa10 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020ce:	2012      	movs	r0, #18
 80020d0:	f003 fa27 	bl	8005522 <HAL_NVIC_EnableIRQ>
}
 80020d4:	bf00      	nop
 80020d6:	3740      	adds	r7, #64	@ 0x40
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40022000 	.word	0x40022000
 80020e0:	2400088c 	.word	0x2400088c
 80020e4:	58024400 	.word	0x58024400
 80020e8:	58020800 	.word	0x58020800
 80020ec:	58020400 	.word	0x58020400
 80020f0:	58021400 	.word	0x58021400
 80020f4:	24000174 	.word	0x24000174
 80020f8:	40020010 	.word	0x40020010
 80020fc:	40022100 	.word	0x40022100

08002100 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0bc      	sub	sp, #240	@ 0xf0
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002118:	f107 0320 	add.w	r3, r7, #32
 800211c:	22b8      	movs	r2, #184	@ 0xb8
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f00f fb57 	bl	80117d4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a8d      	ldr	r2, [pc, #564]	@ (8002360 <HAL_FDCAN_MspInit+0x260>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d157      	bne.n	80021e0 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002130:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002142:	f107 0320 	add.w	r3, r7, #32
 8002146:	4618      	mov	r0, r3
 8002148:	f007 fe16 	bl	8009d78 <HAL_RCCEx_PeriphCLKConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002152:	f7ff fe73 	bl	8001e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002156:	4b83      	ldr	r3, [pc, #524]	@ (8002364 <HAL_FDCAN_MspInit+0x264>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	4a81      	ldr	r2, [pc, #516]	@ (8002364 <HAL_FDCAN_MspInit+0x264>)
 800215e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002160:	4b80      	ldr	r3, [pc, #512]	@ (8002364 <HAL_FDCAN_MspInit+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10e      	bne.n	8002186 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002168:	4b7f      	ldr	r3, [pc, #508]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 800216a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800216e:	4a7e      	ldr	r2, [pc, #504]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002174:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002178:	4b7b      	ldr	r3, [pc, #492]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 800217a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002186:	4b78      	ldr	r3, [pc, #480]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218c:	4a76      	ldr	r2, [pc, #472]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002196:	4b74      	ldr	r3, [pc, #464]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021a4:	2303      	movs	r3, #3
 80021a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80021bc:	2309      	movs	r3, #9
 80021be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021c6:	4619      	mov	r1, r3
 80021c8:	4868      	ldr	r0, [pc, #416]	@ (800236c <HAL_FDCAN_MspInit+0x26c>)
 80021ca:	f006 fc5b 	bl	8008a84 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2101      	movs	r1, #1
 80021d2:	2013      	movs	r0, #19
 80021d4:	f003 f98b 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80021d8:	2013      	movs	r0, #19
 80021da:	f003 f9a2 	bl	8005522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80021de:	e0ba      	b.n	8002356 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a62      	ldr	r2, [pc, #392]	@ (8002370 <HAL_FDCAN_MspInit+0x270>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d158      	bne.n	800229c <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021ea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021fc:	f107 0320 	add.w	r3, r7, #32
 8002200:	4618      	mov	r0, r3
 8002202:	f007 fdb9 	bl	8009d78 <HAL_RCCEx_PeriphCLKConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 800220c:	f7ff fe16 	bl	8001e3c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002210:	4b54      	ldr	r3, [pc, #336]	@ (8002364 <HAL_FDCAN_MspInit+0x264>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	4a53      	ldr	r2, [pc, #332]	@ (8002364 <HAL_FDCAN_MspInit+0x264>)
 8002218:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800221a:	4b52      	ldr	r3, [pc, #328]	@ (8002364 <HAL_FDCAN_MspInit+0x264>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10e      	bne.n	8002240 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002222:	4b51      	ldr	r3, [pc, #324]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 8002224:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002228:	4a4f      	ldr	r2, [pc, #316]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002232:	4b4d      	ldr	r3, [pc, #308]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 8002234:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002240:	4b49      	ldr	r3, [pc, #292]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002246:	4a48      	ldr	r2, [pc, #288]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002250:	4b45      	ldr	r3, [pc, #276]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 8002252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800225e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002278:	2309      	movs	r3, #9
 800227a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002282:	4619      	mov	r1, r3
 8002284:	483b      	ldr	r0, [pc, #236]	@ (8002374 <HAL_FDCAN_MspInit+0x274>)
 8002286:	f006 fbfd 	bl	8008a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2102      	movs	r1, #2
 800228e:	2014      	movs	r0, #20
 8002290:	f003 f92d 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002294:	2014      	movs	r0, #20
 8002296:	f003 f944 	bl	8005522 <HAL_NVIC_EnableIRQ>
}
 800229a:	e05c      	b.n	8002356 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a35      	ldr	r2, [pc, #212]	@ (8002378 <HAL_FDCAN_MspInit+0x278>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d157      	bne.n	8002356 <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80022a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b8:	f107 0320 	add.w	r3, r7, #32
 80022bc:	4618      	mov	r0, r3
 80022be:	f007 fd5b 	bl	8009d78 <HAL_RCCEx_PeriphCLKConfig>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 80022c8:	f7ff fdb8 	bl	8001e3c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80022cc:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <HAL_FDCAN_MspInit+0x264>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a24      	ldr	r2, [pc, #144]	@ (8002364 <HAL_FDCAN_MspInit+0x264>)
 80022d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80022d6:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <HAL_FDCAN_MspInit+0x264>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10e      	bne.n	80022fc <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80022de:	4b22      	ldr	r3, [pc, #136]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 80022e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022e4:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ea:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80022ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 80022f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 80022fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002302:	4a19      	ldr	r2, [pc, #100]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 8002304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002308:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800230c:	4b16      	ldr	r3, [pc, #88]	@ (8002368 <HAL_FDCAN_MspInit+0x268>)
 800230e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800231a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800231e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800233a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800233e:	4619      	mov	r1, r3
 8002340:	480e      	ldr	r0, [pc, #56]	@ (800237c <HAL_FDCAN_MspInit+0x27c>)
 8002342:	f006 fb9f 	bl	8008a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	209f      	movs	r0, #159	@ 0x9f
 800234c:	f003 f8cf 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8002350:	209f      	movs	r0, #159	@ 0x9f
 8002352:	f003 f8e6 	bl	8005522 <HAL_NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	37f0      	adds	r7, #240	@ 0xf0
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	4000a000 	.word	0x4000a000
 8002364:	24000890 	.word	0x24000890
 8002368:	58024400 	.word	0x58024400
 800236c:	58020c00 	.word	0x58020c00
 8002370:	4000a400 	.word	0x4000a400
 8002374:	58020400 	.word	0x58020400
 8002378:	4000d400 	.word	0x4000d400
 800237c:	58021800 	.word	0x58021800

08002380 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	@ 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3e      	ldr	r2, [pc, #248]	@ (8002498 <HAL_SD_MspInit+0x118>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d175      	bne.n	800248e <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80023a2:	4b3e      	ldr	r3, [pc, #248]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023a8:	4a3c      	ldr	r2, [pc, #240]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80023b2:	4b3a      	ldr	r3, [pc, #232]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c0:	4b36      	ldr	r3, [pc, #216]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c6:	4a35      	ldr	r2, [pc, #212]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d0:	4b32      	ldr	r3, [pc, #200]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023de:	4b2f      	ldr	r3, [pc, #188]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e4:	4a2d      	ldr	r2, [pc, #180]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023e6:	f043 0308 	orr.w	r3, r3, #8
 80023ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ee:	4b2b      	ldr	r3, [pc, #172]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fc:	4b27      	ldr	r3, [pc, #156]	@ (800249c <HAL_SD_MspInit+0x11c>)
 80023fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002402:	4a26      	ldr	r2, [pc, #152]	@ (800249c <HAL_SD_MspInit+0x11c>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800240c:	4b23      	ldr	r3, [pc, #140]	@ (800249c <HAL_SD_MspInit+0x11c>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800241a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800241e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800242c:	230c      	movs	r3, #12
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002430:	f107 031c 	add.w	r3, r7, #28
 8002434:	4619      	mov	r1, r3
 8002436:	481a      	ldr	r0, [pc, #104]	@ (80024a0 <HAL_SD_MspInit+0x120>)
 8002438:	f006 fb24 	bl	8008a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800243c:	2304      	movs	r3, #4
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800244c:	230c      	movs	r3, #12
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002450:	f107 031c 	add.w	r3, r7, #28
 8002454:	4619      	mov	r1, r3
 8002456:	4813      	ldr	r0, [pc, #76]	@ (80024a4 <HAL_SD_MspInit+0x124>)
 8002458:	f006 fb14 	bl	8008a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800245c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 800246e:	2307      	movs	r3, #7
 8002470:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	480b      	ldr	r0, [pc, #44]	@ (80024a8 <HAL_SD_MspInit+0x128>)
 800247a:	f006 fb03 	bl	8008a84 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2031      	movs	r0, #49	@ 0x31
 8002484:	f003 f833 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002488:	2031      	movs	r0, #49	@ 0x31
 800248a:	f003 f84a 	bl	8005522 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800248e:	bf00      	nop
 8002490:	3730      	adds	r7, #48	@ 0x30
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	52007000 	.word	0x52007000
 800249c:	58024400 	.word	0x58024400
 80024a0:	58020800 	.word	0x58020800
 80024a4:	58020c00 	.word	0x58020c00
 80024a8:	58020400 	.word	0x58020400

080024ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	@ (8002520 <HAL_TIM_Base_MspInit+0x74>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10f      	bne.n	80024de <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024be:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_TIM_Base_MspInit+0x78>)
 80024c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c4:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <HAL_TIM_Base_MspInit+0x78>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <HAL_TIM_Base_MspInit+0x78>)
 80024d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80024dc:	e01b      	b.n	8002516 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a11      	ldr	r2, [pc, #68]	@ (8002528 <HAL_TIM_Base_MspInit+0x7c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d116      	bne.n	8002516 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <HAL_TIM_Base_MspInit+0x78>)
 80024ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <HAL_TIM_Base_MspInit+0x78>)
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_TIM_Base_MspInit+0x78>)
 80024fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2075      	movs	r0, #117	@ 0x75
 800250c:	f002 ffef 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002510:	2075      	movs	r0, #117	@ 0x75
 8002512:	f003 f806 	bl	8005522 <HAL_NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40010000 	.word	0x40010000
 8002524:	58024400 	.word	0x58024400
 8002528:	40014400 	.word	0x40014400

0800252c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a13      	ldr	r2, [pc, #76]	@ (8002598 <HAL_TIM_MspPostInit+0x6c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d11f      	bne.n	800258e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800254e:	4b13      	ldr	r3, [pc, #76]	@ (800259c <HAL_TIM_MspPostInit+0x70>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002554:	4a11      	ldr	r2, [pc, #68]	@ (800259c <HAL_TIM_MspPostInit+0x70>)
 8002556:	f043 0310 	orr.w	r3, r3, #16
 800255a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800255e:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <HAL_TIM_MspPostInit+0x70>)
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 800256c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002570:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800257e:	2301      	movs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	@ (80025a0 <HAL_TIM_MspPostInit+0x74>)
 800258a:	f006 fa7b 	bl	8008a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800258e:	bf00      	nop
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40010000 	.word	0x40010000
 800259c:	58024400 	.word	0x58024400
 80025a0:	58021000 	.word	0x58021000

080025a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b0ba      	sub	sp, #232	@ 0xe8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025bc:	f107 0318 	add.w	r3, r7, #24
 80025c0:	22b8      	movs	r2, #184	@ 0xb8
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f00f f905 	bl	80117d4 <memset>
  if(huart->Instance==USART1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002704 <HAL_UART_MspInit+0x160>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d147      	bne.n	8002664 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025d4:	f04f 0201 	mov.w	r2, #1
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e6:	f107 0318 	add.w	r3, r7, #24
 80025ea:	4618      	mov	r0, r3
 80025ec:	f007 fbc4 	bl	8009d78 <HAL_RCCEx_PeriphCLKConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80025f6:	f7ff fc21 	bl	8001e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025fa:	4b43      	ldr	r3, [pc, #268]	@ (8002708 <HAL_UART_MspInit+0x164>)
 80025fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002600:	4a41      	ldr	r2, [pc, #260]	@ (8002708 <HAL_UART_MspInit+0x164>)
 8002602:	f043 0310 	orr.w	r3, r3, #16
 8002606:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800260a:	4b3f      	ldr	r3, [pc, #252]	@ (8002708 <HAL_UART_MspInit+0x164>)
 800260c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002618:	4b3b      	ldr	r3, [pc, #236]	@ (8002708 <HAL_UART_MspInit+0x164>)
 800261a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800261e:	4a3a      	ldr	r2, [pc, #232]	@ (8002708 <HAL_UART_MspInit+0x164>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002628:	4b37      	ldr	r3, [pc, #220]	@ (8002708 <HAL_UART_MspInit+0x164>)
 800262a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8002636:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800263a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002650:	2307      	movs	r3, #7
 8002652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800265a:	4619      	mov	r1, r3
 800265c:	482b      	ldr	r0, [pc, #172]	@ (800270c <HAL_UART_MspInit+0x168>)
 800265e:	f006 fa11 	bl	8008a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002662:	e04a      	b.n	80026fa <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a29      	ldr	r2, [pc, #164]	@ (8002710 <HAL_UART_MspInit+0x16c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d145      	bne.n	80026fa <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800266e:	f04f 0202 	mov.w	r2, #2
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002680:	f107 0318 	add.w	r3, r7, #24
 8002684:	4618      	mov	r0, r3
 8002686:	f007 fb77 	bl	8009d78 <HAL_RCCEx_PeriphCLKConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002690:	f7ff fbd4 	bl	8001e3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002694:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <HAL_UART_MspInit+0x164>)
 8002696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800269a:	4a1b      	ldr	r2, [pc, #108]	@ (8002708 <HAL_UART_MspInit+0x164>)
 800269c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026a4:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <HAL_UART_MspInit+0x164>)
 80026a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	4b15      	ldr	r3, [pc, #84]	@ (8002708 <HAL_UART_MspInit+0x164>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b8:	4a13      	ldr	r2, [pc, #76]	@ (8002708 <HAL_UART_MspInit+0x164>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026c2:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_UART_MspInit+0x164>)
 80026c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026d0:	230c      	movs	r3, #12
 80026d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026e8:	2307      	movs	r3, #7
 80026ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026f2:	4619      	mov	r1, r3
 80026f4:	4805      	ldr	r0, [pc, #20]	@ (800270c <HAL_UART_MspInit+0x168>)
 80026f6:	f006 f9c5 	bl	8008a84 <HAL_GPIO_Init>
}
 80026fa:	bf00      	nop
 80026fc:	37e8      	adds	r7, #232	@ 0xe8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40011000 	.word	0x40011000
 8002708:	58024400 	.word	0x58024400
 800270c:	58020000 	.word	0x58020000
 8002710:	40004400 	.word	0x40004400

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <NMI_Handler+0x4>

0800271c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <MemManage_Handler+0x4>

0800272c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <UsageFault_Handler+0x4>

0800273c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276a:	f000 f997 	bl	8002a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <DMA1_Stream0_IRQHandler+0x10>)
 800277a:	f003 fcaf 	bl	80060dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	24000174 	.word	0x24000174

08002788 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800278c:	4803      	ldr	r0, [pc, #12]	@ (800279c <ADC_IRQHandler+0x14>)
 800278e:	f001 f9e9 	bl	8003b64 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002792:	4803      	ldr	r0, [pc, #12]	@ (80027a0 <ADC_IRQHandler+0x18>)
 8002794:	f001 f9e6 	bl	8003b64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	24000094 	.word	0x24000094
 80027a0:	24000104 	.word	0x24000104

080027a4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <FDCAN1_IT0_IRQHandler+0x10>)
 80027aa:	f005 fc69 	bl	8008080 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	240001ec 	.word	0x240001ec

080027b8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <FDCAN2_IT0_IRQHandler+0x10>)
 80027be:	f005 fc5f 	bl	8008080 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	2400028c 	.word	0x2400028c

080027cc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <SDMMC1_IRQHandler+0x10>)
 80027d2:	f00a f927 	bl	800ca24 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	240003cc 	.word	0x240003cc

080027e0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <TIM16_IRQHandler+0x10>)
 80027e6:	f00b fc50 	bl	800e08a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	24000494 	.word	0x24000494

080027f4 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <FDCAN3_IT0_IRQHandler+0x10>)
 80027fa:	f005 fc41 	bl	8008080 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	2400032c 	.word	0x2400032c

08002808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002810:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <_sbrk+0x5c>)
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <_sbrk+0x60>)
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800281c:	4b13      	ldr	r3, [pc, #76]	@ (800286c <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002824:	4b11      	ldr	r3, [pc, #68]	@ (800286c <_sbrk+0x64>)
 8002826:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <_sbrk+0x68>)
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	429a      	cmp	r2, r3
 8002836:	d207      	bcs.n	8002848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002838:	f00e ffd4 	bl	80117e4 <__errno>
 800283c:	4603      	mov	r3, r0
 800283e:	220c      	movs	r2, #12
 8002840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	e009      	b.n	800285c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002848:	4b08      	ldr	r3, [pc, #32]	@ (800286c <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <_sbrk+0x64>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	4a05      	ldr	r2, [pc, #20]	@ (800286c <_sbrk+0x64>)
 8002858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	24050000 	.word	0x24050000
 8002868:	00000400 	.word	0x00000400
 800286c:	24000894 	.word	0x24000894
 8002870:	24000a00 	.word	0x24000a00

08002874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002878:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <SystemInit+0xd0>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	4a31      	ldr	r2, [pc, #196]	@ (8002944 <SystemInit+0xd0>)
 8002880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002888:	4b2f      	ldr	r3, [pc, #188]	@ (8002948 <SystemInit+0xd4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	2b06      	cmp	r3, #6
 8002892:	d807      	bhi.n	80028a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002894:	4b2c      	ldr	r3, [pc, #176]	@ (8002948 <SystemInit+0xd4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 030f 	bic.w	r3, r3, #15
 800289c:	4a2a      	ldr	r2, [pc, #168]	@ (8002948 <SystemInit+0xd4>)
 800289e:	f043 0307 	orr.w	r3, r3, #7
 80028a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028a4:	4b29      	ldr	r3, [pc, #164]	@ (800294c <SystemInit+0xd8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a28      	ldr	r2, [pc, #160]	@ (800294c <SystemInit+0xd8>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028b0:	4b26      	ldr	r3, [pc, #152]	@ (800294c <SystemInit+0xd8>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028b6:	4b25      	ldr	r3, [pc, #148]	@ (800294c <SystemInit+0xd8>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4924      	ldr	r1, [pc, #144]	@ (800294c <SystemInit+0xd8>)
 80028bc:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <SystemInit+0xdc>)
 80028be:	4013      	ands	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028c2:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <SystemInit+0xd4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002948 <SystemInit+0xd4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 030f 	bic.w	r3, r3, #15
 80028d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002948 <SystemInit+0xd4>)
 80028d8:	f043 0307 	orr.w	r3, r3, #7
 80028dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028de:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <SystemInit+0xd8>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <SystemInit+0xd8>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <SystemInit+0xd8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028f0:	4b16      	ldr	r3, [pc, #88]	@ (800294c <SystemInit+0xd8>)
 80028f2:	4a18      	ldr	r2, [pc, #96]	@ (8002954 <SystemInit+0xe0>)
 80028f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <SystemInit+0xd8>)
 80028f8:	4a17      	ldr	r2, [pc, #92]	@ (8002958 <SystemInit+0xe4>)
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028fc:	4b13      	ldr	r3, [pc, #76]	@ (800294c <SystemInit+0xd8>)
 80028fe:	4a17      	ldr	r2, [pc, #92]	@ (800295c <SystemInit+0xe8>)
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002902:	4b12      	ldr	r3, [pc, #72]	@ (800294c <SystemInit+0xd8>)
 8002904:	2200      	movs	r2, #0
 8002906:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002908:	4b10      	ldr	r3, [pc, #64]	@ (800294c <SystemInit+0xd8>)
 800290a:	4a14      	ldr	r2, [pc, #80]	@ (800295c <SystemInit+0xe8>)
 800290c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800290e:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <SystemInit+0xd8>)
 8002910:	2200      	movs	r2, #0
 8002912:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002914:	4b0d      	ldr	r3, [pc, #52]	@ (800294c <SystemInit+0xd8>)
 8002916:	4a11      	ldr	r2, [pc, #68]	@ (800295c <SystemInit+0xe8>)
 8002918:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800291a:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <SystemInit+0xd8>)
 800291c:	2200      	movs	r2, #0
 800291e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002920:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <SystemInit+0xd8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a09      	ldr	r2, [pc, #36]	@ (800294c <SystemInit+0xd8>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800292c:	4b07      	ldr	r3, [pc, #28]	@ (800294c <SystemInit+0xd8>)
 800292e:	2200      	movs	r2, #0
 8002930:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <SystemInit+0xec>)
 8002934:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002938:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00
 8002948:	52002000 	.word	0x52002000
 800294c:	58024400 	.word	0x58024400
 8002950:	eaf6ed7f 	.word	0xeaf6ed7f
 8002954:	02020200 	.word	0x02020200
 8002958:	01ff0000 	.word	0x01ff0000
 800295c:	01010280 	.word	0x01010280
 8002960:	52004000 	.word	0x52004000

08002964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800299c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002968:	f7ff ff84 	bl	8002874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800296c:	480c      	ldr	r0, [pc, #48]	@ (80029a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800296e:	490d      	ldr	r1, [pc, #52]	@ (80029a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002970:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002974:	e002      	b.n	800297c <LoopCopyDataInit>

08002976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297a:	3304      	adds	r3, #4

0800297c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800297c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002980:	d3f9      	bcc.n	8002976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002984:	4c0a      	ldr	r4, [pc, #40]	@ (80029b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002988:	e001      	b.n	800298e <LoopFillZerobss>

0800298a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800298c:	3204      	adds	r2, #4

0800298e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002990:	d3fb      	bcc.n	800298a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002992:	f00e ff2d 	bl	80117f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002996:	f7fd fea9 	bl	80006ec <main>
  bx  lr
 800299a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800299c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80029a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029a4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80029a8:	08012494 	.word	0x08012494
  ldr r2, =_sbss
 80029ac:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80029b0:	24000a00 	.word	0x24000a00

080029b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC3_IRQHandler>
	...

080029b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029be:	2003      	movs	r0, #3
 80029c0:	f002 fd8a 	bl	80054d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029c4:	f007 f802 	bl	80099cc <HAL_RCC_GetSysClockFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <HAL_Init+0x68>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	4913      	ldr	r1, [pc, #76]	@ (8002a24 <HAL_Init+0x6c>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
 80029e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <HAL_Init+0x68>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002a24 <HAL_Init+0x6c>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
 80029f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a28 <HAL_Init+0x70>)
 80029fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029fc:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <HAL_Init+0x74>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a02:	200f      	movs	r0, #15
 8002a04:	f000 f814 	bl	8002a30 <HAL_InitTick>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e002      	b.n	8002a18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a12:	f7ff fa19 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	58024400 	.word	0x58024400
 8002a24:	080123ec 	.word	0x080123ec
 8002a28:	24000010 	.word	0x24000010
 8002a2c:	2400000c 	.word	0x2400000c

08002a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a38:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_InitTick+0x60>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e021      	b.n	8002a88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a44:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <HAL_InitTick+0x64>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_InitTick+0x60>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fd6f 	bl	800553e <HAL_SYSTICK_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00e      	b.n	8002a88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d80a      	bhi.n	8002a86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a70:	2200      	movs	r2, #0
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f002 fd39 	bl	80054ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a7c:	4a06      	ldr	r2, [pc, #24]	@ (8002a98 <HAL_InitTick+0x68>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	24000018 	.word	0x24000018
 8002a94:	2400000c 	.word	0x2400000c
 8002a98:	24000014 	.word	0x24000014

08002a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_IncTick+0x20>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_IncTick+0x24>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a04      	ldr	r2, [pc, #16]	@ (8002ac0 <HAL_IncTick+0x24>)
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	24000018 	.word	0x24000018
 8002ac0:	24000898 	.word	0x24000898

08002ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	@ (8002ad8 <HAL_GetTick+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	24000898 	.word	0x24000898

08002adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff ffee 	bl	8002ac4 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d005      	beq.n	8002b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <HAL_Delay+0x44>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b02:	bf00      	nop
 8002b04:	f7ff ffde 	bl	8002ac4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d8f7      	bhi.n	8002b04 <HAL_Delay+0x28>
  {
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	24000018 	.word	0x24000018

08002b24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	609a      	str	r2, [r3, #8]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3360      	adds	r3, #96	@ 0x60
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a10      	ldr	r2, [pc, #64]	@ (8002bec <LL_ADC_SetOffset+0x60>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10b      	bne.n	8002bc8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002bc6:	e00b      	b.n	8002be0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	58026000 	.word	0x58026000

08002bf0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3360      	adds	r3, #96	@ 0x60
 8002bfe:	461a      	mov	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	611a      	str	r2, [r3, #16]
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c90 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3360      	adds	r3, #96	@ 0x60
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	601a      	str	r2, [r3, #0]
  }
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	58026000 	.word	0x58026000

08002c94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd4 <LL_ADC_SetOffsetSaturation+0x40>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d10e      	bne.n	8002cc6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3360      	adds	r3, #96	@ 0x60
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	58026000 	.word	0x58026000

08002cd8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8002d18 <LL_ADC_SetOffsetSign+0x40>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d10e      	bne.n	8002d0a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3360      	adds	r3, #96	@ 0x60
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	58026000 	.word	0x58026000

08002d1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3360      	adds	r3, #96	@ 0x60
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a0c      	ldr	r2, [pc, #48]	@ (8002d6c <LL_ADC_SetOffsetState+0x50>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002d4e:	e007      	b.n	8002d60 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	601a      	str	r2, [r3, #0]
}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	58026000 	.word	0x58026000

08002d70 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b087      	sub	sp, #28
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3330      	adds	r3, #48	@ 0x30
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	4413      	add	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	211f      	movs	r1, #31
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	401a      	ands	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	f003 011f 	and.w	r1, r3, #31
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f023 0203 	bic.w	r2, r3, #3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a08      	ldr	r2, [pc, #32]	@ (8002e64 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d107      	bne.n	8002e56 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60da      	str	r2, [r3, #12]
  }
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	58026000 	.word	0x58026000

08002e68 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e74:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b087      	sub	sp, #28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3314      	adds	r3, #20
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	0e5b      	lsrs	r3, r3, #25
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	4413      	add	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	0d1b      	lsrs	r3, r3, #20
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2107      	movs	r1, #7
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	0d1b      	lsrs	r3, r3, #20
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f5c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d115      	bne.n	8002f24 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f04:	43db      	mvns	r3, r3
 8002f06:	401a      	ands	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0318 	and.w	r3, r3, #24
 8002f0e:	4914      	ldr	r1, [pc, #80]	@ (8002f60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f10:	40d9      	lsrs	r1, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	400b      	ands	r3, r1
 8002f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f22:	e014      	b.n	8002f4e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0318 	and.w	r3, r3, #24
 8002f3a:	4909      	ldr	r1, [pc, #36]	@ (8002f60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f3c:	40d9      	lsrs	r1, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	400b      	ands	r3, r1
 8002f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f46:	431a      	orrs	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	58026000 	.word	0x58026000
 8002f60:	000fffff 	.word	0x000fffff

08002f64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 031f 	and.w	r3, r3, #31
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	4b04      	ldr	r3, [pc, #16]	@ (8002fbc <LL_ADC_DisableDeepPowerDown+0x20>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6093      	str	r3, [r2, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	5fffffc0 	.word	0x5fffffc0

08002fc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd4:	d101      	bne.n	8002fda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	4b05      	ldr	r3, [pc, #20]	@ (800300c <LL_ADC_EnableInternalRegulator+0x24>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	6fffffc0 	.word	0x6fffffc0

08003010 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003024:	d101      	bne.n	800302a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <LL_ADC_Enable+0x24>)
 8003046:	4013      	ands	r3, r2
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	7fffffc0 	.word	0x7fffffc0

08003060 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <LL_ADC_Disable+0x24>)
 800306e:	4013      	ands	r3, r2
 8003070:	f043 0202 	orr.w	r2, r3, #2
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	7fffffc0 	.word	0x7fffffc0

08003088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_IsDisableOngoing+0x18>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_IsDisableOngoing+0x1a>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <LL_ADC_REG_StartConversion+0x24>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	7fffffc0 	.word	0x7fffffc0

080030fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <LL_ADC_REG_StopConversion+0x24>)
 800310a:	4013      	ands	r3, r2
 800310c:	f043 0210 	orr.w	r2, r3, #16
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	7fffffc0 	.word	0x7fffffc0

08003124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d101      	bne.n	800313c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <LL_ADC_INJ_StopConversion+0x24>)
 800315a:	4013      	ands	r3, r2
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	7fffffc0 	.word	0x7fffffc0

08003174 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b08      	cmp	r3, #8
 8003186:	d101      	bne.n	800318c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b089      	sub	sp, #36	@ 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e1ee      	b.n	8003594 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7fe fe59 	bl	8001e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff feef 	bl	8002fc0 <LL_ADC_IsDeepPowerDownEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fed5 	bl	8002f9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff0a 	bl	8003010 <LL_ADC_IsInternalRegulatorEnabled>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d114      	bne.n	800322c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff feee 	bl	8002fe8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800320c:	4b8e      	ldr	r3, [pc, #568]	@ (8003448 <HAL_ADC_Init+0x2ac>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	4a8e      	ldr	r2, [pc, #568]	@ (800344c <HAL_ADC_Init+0x2b0>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	3301      	adds	r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800321e:	e002      	b.n	8003226 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3b01      	subs	r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f9      	bne.n	8003220 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff feed 	bl	8003010 <LL_ADC_IsInternalRegulatorEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10d      	bne.n	8003258 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003240:	f043 0210 	orr.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff61 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003262:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 8188 	bne.w	8003582 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f040 8184 	bne.w	8003582 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003282:	f043 0202 	orr.w	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fefa 	bl	8003088 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d136      	bne.n	8003308 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6c      	ldr	r2, [pc, #432]	@ (8003450 <HAL_ADC_Init+0x2b4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d004      	beq.n	80032ae <HAL_ADC_Init+0x112>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003454 <HAL_ADC_Init+0x2b8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10e      	bne.n	80032cc <HAL_ADC_Init+0x130>
 80032ae:	4868      	ldr	r0, [pc, #416]	@ (8003450 <HAL_ADC_Init+0x2b4>)
 80032b0:	f7ff feea 	bl	8003088 <LL_ADC_IsEnabled>
 80032b4:	4604      	mov	r4, r0
 80032b6:	4867      	ldr	r0, [pc, #412]	@ (8003454 <HAL_ADC_Init+0x2b8>)
 80032b8:	f7ff fee6 	bl	8003088 <LL_ADC_IsEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	4323      	orrs	r3, r4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e008      	b.n	80032de <HAL_ADC_Init+0x142>
 80032cc:	4862      	ldr	r0, [pc, #392]	@ (8003458 <HAL_ADC_Init+0x2bc>)
 80032ce:	f7ff fedb 	bl	8003088 <LL_ADC_IsEnabled>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003450 <HAL_ADC_Init+0x2b4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_ADC_Init+0x15a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a58      	ldr	r2, [pc, #352]	@ (8003454 <HAL_ADC_Init+0x2b8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_Init+0x15e>
 80032f6:	4a59      	ldr	r2, [pc, #356]	@ (800345c <HAL_ADC_Init+0x2c0>)
 80032f8:	e000      	b.n	80032fc <HAL_ADC_Init+0x160>
 80032fa:	4a59      	ldr	r2, [pc, #356]	@ (8003460 <HAL_ADC_Init+0x2c4>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f7ff fc0e 	bl	8002b24 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a52      	ldr	r2, [pc, #328]	@ (8003458 <HAL_ADC_Init+0x2bc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d129      	bne.n	8003366 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7e5b      	ldrb	r3, [r3, #25]
 8003316:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800331c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003322:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d013      	beq.n	8003354 <HAL_ADC_Init+0x1b8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b0c      	cmp	r3, #12
 8003332:	d00d      	beq.n	8003350 <HAL_ADC_Init+0x1b4>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b1c      	cmp	r3, #28
 800333a:	d007      	beq.n	800334c <HAL_ADC_Init+0x1b0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b18      	cmp	r3, #24
 8003342:	d101      	bne.n	8003348 <HAL_ADC_Init+0x1ac>
 8003344:	2318      	movs	r3, #24
 8003346:	e006      	b.n	8003356 <HAL_ADC_Init+0x1ba>
 8003348:	2300      	movs	r3, #0
 800334a:	e004      	b.n	8003356 <HAL_ADC_Init+0x1ba>
 800334c:	2310      	movs	r3, #16
 800334e:	e002      	b.n	8003356 <HAL_ADC_Init+0x1ba>
 8003350:	2308      	movs	r3, #8
 8003352:	e000      	b.n	8003356 <HAL_ADC_Init+0x1ba>
 8003354:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003356:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	e00e      	b.n	8003384 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7e5b      	ldrb	r3, [r3, #25]
 800336a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003370:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003376:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800337e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d106      	bne.n	800339c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	3b01      	subs	r3, #1
 8003394:	045b      	lsls	r3, r3, #17
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d009      	beq.n	80033b8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a26      	ldr	r2, [pc, #152]	@ (8003458 <HAL_ADC_Init+0x2bc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d115      	bne.n	80033ee <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	4b26      	ldr	r3, [pc, #152]	@ (8003464 <HAL_ADC_Init+0x2c8>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	69b9      	ldr	r1, [r7, #24]
 80033d2:	430b      	orrs	r3, r1
 80033d4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	611a      	str	r2, [r3, #16]
 80033ec:	e009      	b.n	8003402 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003468 <HAL_ADC_Init+0x2cc>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	69b9      	ldr	r1, [r7, #24]
 80033fe:	430b      	orrs	r3, r1
 8003400:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fe8c 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 800340c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff feae 	bl	8003174 <LL_ADC_INJ_IsConversionOngoing>
 8003418:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 808e 	bne.w	800353e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 808a 	bne.w	800353e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <HAL_ADC_Init+0x2bc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d11b      	bne.n	800346c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7e1b      	ldrb	r3, [r3, #24]
 8003438:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003440:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	e018      	b.n	800347a <HAL_ADC_Init+0x2de>
 8003448:	2400000c 	.word	0x2400000c
 800344c:	053e2d63 	.word	0x053e2d63
 8003450:	40022000 	.word	0x40022000
 8003454:	40022100 	.word	0x40022100
 8003458:	58026000 	.word	0x58026000
 800345c:	40022300 	.word	0x40022300
 8003460:	58026300 	.word	0x58026300
 8003464:	fff04007 	.word	0xfff04007
 8003468:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7e1b      	ldrb	r3, [r3, #24]
 8003470:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4b46      	ldr	r3, [pc, #280]	@ (800359c <HAL_ADC_Init+0x400>)
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	69b9      	ldr	r1, [r7, #24]
 800348a:	430b      	orrs	r3, r1
 800348c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003494:	2b01      	cmp	r3, #1
 8003496:	d137      	bne.n	8003508 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a3f      	ldr	r2, [pc, #252]	@ (80035a0 <HAL_ADC_Init+0x404>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d116      	bne.n	80034d6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	4b3d      	ldr	r3, [pc, #244]	@ (80035a4 <HAL_ADC_Init+0x408>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034ba:	4311      	orrs	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034c6:	430a      	orrs	r2, r1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	611a      	str	r2, [r3, #16]
 80034d4:	e020      	b.n	8003518 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	4b32      	ldr	r3, [pc, #200]	@ (80035a8 <HAL_ADC_Init+0x40c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034e4:	3a01      	subs	r2, #1
 80034e6:	0411      	lsls	r1, r2, #16
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034ec:	4311      	orrs	r1, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034f2:	4311      	orrs	r1, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034f8:	430a      	orrs	r2, r1
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	611a      	str	r2, [r3, #16]
 8003506:	e007      	b.n	8003518 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_ADC_Init+0x404>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d002      	beq.n	800353e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f001 fcd5 	bl	8004ee8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d10c      	bne.n	8003560 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	f023 010f 	bic.w	r1, r3, #15
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	631a      	str	r2, [r3, #48]	@ 0x30
 800355e:	e007      	b.n	8003570 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 020f 	bic.w	r2, r2, #15
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003574:	f023 0303 	bic.w	r3, r3, #3
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003580:	e007      	b.n	8003592 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	f043 0210 	orr.w	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003592:	7ffb      	ldrb	r3, [r7, #31]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3724      	adds	r7, #36	@ 0x24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd90      	pop	{r4, r7, pc}
 800359c:	ffffbffc 	.word	0xffffbffc
 80035a0:	58026000 	.word	0x58026000
 80035a4:	fc00f81f 	.word	0xfc00f81f
 80035a8:	fc00f81e 	.word	0xfc00f81e

080035ac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5c      	ldr	r2, [pc, #368]	@ (800372c <HAL_ADC_Start+0x180>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_ADC_Start+0x1c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003730 <HAL_ADC_Start+0x184>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_Start+0x20>
 80035c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003734 <HAL_ADC_Start+0x188>)
 80035ca:	e000      	b.n	80035ce <HAL_ADC_Start+0x22>
 80035cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003738 <HAL_ADC_Start+0x18c>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fcc8 	bl	8002f64 <LL_ADC_GetMultimode>
 80035d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fda2 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 809a 	bne.w	800371c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_Start+0x4a>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e095      	b.n	8003722 <HAL_ADC_Start+0x176>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f001 faf4 	bl	8004bec <ADC_Enable>
 8003604:	4603      	mov	r3, r0
 8003606:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 8081 	bne.w	8003712 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003614:	4b49      	ldr	r3, [pc, #292]	@ (800373c <HAL_ADC_Start+0x190>)
 8003616:	4013      	ands	r3, r2
 8003618:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a42      	ldr	r2, [pc, #264]	@ (8003730 <HAL_ADC_Start+0x184>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d002      	beq.n	8003630 <HAL_ADC_Start+0x84>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	e000      	b.n	8003632 <HAL_ADC_Start+0x86>
 8003630:	4b3e      	ldr	r3, [pc, #248]	@ (800372c <HAL_ADC_Start+0x180>)
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	4293      	cmp	r3, r2
 8003638:	d002      	beq.n	8003640 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003644:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003658:	d106      	bne.n	8003668 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800365e:	f023 0206 	bic.w	r2, r3, #6
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	665a      	str	r2, [r3, #100]	@ 0x64
 8003666:	e002      	b.n	800366e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	221c      	movs	r2, #28
 8003674:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2b      	ldr	r2, [pc, #172]	@ (8003730 <HAL_ADC_Start+0x184>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d002      	beq.n	800368e <HAL_ADC_Start+0xe2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	e000      	b.n	8003690 <HAL_ADC_Start+0xe4>
 800368e:	4b27      	ldr	r3, [pc, #156]	@ (800372c <HAL_ADC_Start+0x180>)
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	4293      	cmp	r3, r2
 8003696:	d008      	beq.n	80036aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d002      	beq.n	80036aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b09      	cmp	r3, #9
 80036a8:	d114      	bne.n	80036d4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d007      	beq.n	80036c8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fd01 	bl	80030d4 <LL_ADC_REG_StartConversion>
 80036d2:	e025      	b.n	8003720 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a12      	ldr	r2, [pc, #72]	@ (8003730 <HAL_ADC_Start+0x184>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d002      	beq.n	80036f0 <HAL_ADC_Start+0x144>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	e000      	b.n	80036f2 <HAL_ADC_Start+0x146>
 80036f0:	4b0e      	ldr	r3, [pc, #56]	@ (800372c <HAL_ADC_Start+0x180>)
 80036f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00f      	beq.n	8003720 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003704:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003708:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003710:	e006      	b.n	8003720 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800371a:	e001      	b.n	8003720 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003720:	7dfb      	ldrb	r3, [r7, #23]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40022000 	.word	0x40022000
 8003730:	40022100 	.word	0x40022100
 8003734:	40022300 	.word	0x40022300
 8003738:	58026300 	.word	0x58026300
 800373c:	fffff0fe 	.word	0xfffff0fe

08003740 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_ADC_Stop+0x16>
 8003752:	2302      	movs	r3, #2
 8003754:	e021      	b.n	800379a <HAL_ADC_Stop+0x5a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800375e:	2103      	movs	r1, #3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 f987 	bl	8004a74 <ADC_ConversionStop>
 8003766:	4603      	mov	r3, r0
 8003768:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10f      	bne.n	8003790 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f001 fac5 	bl	8004d00 <ADC_Disable>
 8003776:	4603      	mov	r3, r0
 8003778:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d107      	bne.n	8003790 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003784:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <HAL_ADC_Stop+0x64>)
 8003786:	4013      	ands	r3, r2
 8003788:	f043 0201 	orr.w	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	ffffeefe 	.word	0xffffeefe

080037a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a72      	ldr	r2, [pc, #456]	@ (8003980 <HAL_ADC_PollForConversion+0x1d8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_ADC_PollForConversion+0x1e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a70      	ldr	r2, [pc, #448]	@ (8003984 <HAL_ADC_PollForConversion+0x1dc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_ADC_PollForConversion+0x22>
 80037c6:	4b70      	ldr	r3, [pc, #448]	@ (8003988 <HAL_ADC_PollForConversion+0x1e0>)
 80037c8:	e000      	b.n	80037cc <HAL_ADC_PollForConversion+0x24>
 80037ca:	4b70      	ldr	r3, [pc, #448]	@ (800398c <HAL_ADC_PollForConversion+0x1e4>)
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fbc9 	bl	8002f64 <LL_ADC_GetMultimode>
 80037d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d102      	bne.n	80037e2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80037dc:	2308      	movs	r3, #8
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	e037      	b.n	8003852 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d002      	beq.n	80037f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d111      	bne.n	8003818 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0b1      	b.n	8003976 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003812:	2304      	movs	r3, #4
 8003814:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003816:	e01c      	b.n	8003852 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a58      	ldr	r2, [pc, #352]	@ (8003980 <HAL_ADC_PollForConversion+0x1d8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_ADC_PollForConversion+0x84>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a57      	ldr	r2, [pc, #348]	@ (8003984 <HAL_ADC_PollForConversion+0x1dc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_ADC_PollForConversion+0x88>
 800382c:	4b56      	ldr	r3, [pc, #344]	@ (8003988 <HAL_ADC_PollForConversion+0x1e0>)
 800382e:	e000      	b.n	8003832 <HAL_ADC_PollForConversion+0x8a>
 8003830:	4b56      	ldr	r3, [pc, #344]	@ (800398c <HAL_ADC_PollForConversion+0x1e4>)
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fba4 	bl	8002f80 <LL_ADC_GetMultiDMATransfer>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e093      	b.n	8003976 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800384e:	2304      	movs	r3, #4
 8003850:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003852:	f7ff f937 	bl	8002ac4 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003858:	e021      	b.n	800389e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d01d      	beq.n	800389e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003862:	f7ff f92f 	bl	8002ac4 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <HAL_ADC_PollForConversion+0xd0>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d112      	bne.n	800389e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10b      	bne.n	800389e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388a:	f043 0204 	orr.w	r2, r3, #4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e06b      	b.n	8003976 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0d6      	beq.n	800385a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fa57 	bl	8002d70 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01c      	beq.n	8003902 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7e5b      	ldrb	r3, [r3, #25]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d118      	bne.n	8003902 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d111      	bne.n	8003902 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1f      	ldr	r2, [pc, #124]	@ (8003984 <HAL_ADC_PollForConversion+0x1dc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d002      	beq.n	8003912 <HAL_ADC_PollForConversion+0x16a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	e000      	b.n	8003914 <HAL_ADC_PollForConversion+0x16c>
 8003912:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <HAL_ADC_PollForConversion+0x1d8>)
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	4293      	cmp	r3, r2
 800391a:	d008      	beq.n	800392e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b05      	cmp	r3, #5
 8003926:	d002      	beq.n	800392e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b09      	cmp	r3, #9
 800392c:	d104      	bne.n	8003938 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e00c      	b.n	8003952 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a11      	ldr	r2, [pc, #68]	@ (8003984 <HAL_ADC_PollForConversion+0x1dc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d002      	beq.n	8003948 <HAL_ADC_PollForConversion+0x1a0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	e000      	b.n	800394a <HAL_ADC_PollForConversion+0x1a2>
 8003948:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <HAL_ADC_PollForConversion+0x1d8>)
 800394a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d104      	bne.n	8003962 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2208      	movs	r2, #8
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e008      	b.n	8003974 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d103      	bne.n	8003974 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	220c      	movs	r2, #12
 8003972:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40022000 	.word	0x40022000
 8003984:	40022100 	.word	0x40022100
 8003988:	40022300 	.word	0x40022300
 800398c:	58026300 	.word	0x58026300

08003990 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a60      	ldr	r2, [pc, #384]	@ (8003b24 <HAL_ADC_Start_DMA+0x194>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_ADC_Start_DMA+0x20>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003b28 <HAL_ADC_Start_DMA+0x198>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_Start_DMA+0x24>
 80039b0:	4b5e      	ldr	r3, [pc, #376]	@ (8003b2c <HAL_ADC_Start_DMA+0x19c>)
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_Start_DMA+0x26>
 80039b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b30 <HAL_ADC_Start_DMA+0x1a0>)
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fad4 	bl	8002f64 <LL_ADC_GetMultimode>
 80039bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fbae 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80a2 	bne.w	8003b14 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_ADC_Start_DMA+0x4e>
 80039da:	2302      	movs	r3, #2
 80039dc:	e09d      	b.n	8003b1a <HAL_ADC_Start_DMA+0x18a>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d003      	beq.n	80039fa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b09      	cmp	r3, #9
 80039f6:	f040 8086 	bne.w	8003b06 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f001 f8f6 	bl	8004bec <ADC_Enable>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d178      	bne.n	8003afc <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a0e:	4b49      	ldr	r3, [pc, #292]	@ (8003b34 <HAL_ADC_Start_DMA+0x1a4>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a42      	ldr	r2, [pc, #264]	@ (8003b28 <HAL_ADC_Start_DMA+0x198>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d002      	beq.n	8003a2a <HAL_ADC_Start_DMA+0x9a>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	e000      	b.n	8003a2c <HAL_ADC_Start_DMA+0x9c>
 8003a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b24 <HAL_ADC_Start_DMA+0x194>)
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d002      	beq.n	8003a3a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a56:	f023 0206 	bic.w	r2, r3, #6
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	665a      	str	r2, [r3, #100]	@ 0x64
 8003a5e:	e002      	b.n	8003a66 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6a:	4a33      	ldr	r2, [pc, #204]	@ (8003b38 <HAL_ADC_Start_DMA+0x1a8>)
 8003a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a72:	4a32      	ldr	r2, [pc, #200]	@ (8003b3c <HAL_ADC_Start_DMA+0x1ac>)
 8003a74:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7a:	4a31      	ldr	r2, [pc, #196]	@ (8003b40 <HAL_ADC_Start_DMA+0x1b0>)
 8003a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	221c      	movs	r2, #28
 8003a84:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0210 	orr.w	r2, r2, #16
 8003a9c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a28      	ldr	r2, [pc, #160]	@ (8003b44 <HAL_ADC_Start_DMA+0x1b4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d10f      	bne.n	8003ac8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f7ff f9bc 	bl	8002e34 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff f9a7 	bl	8002e14 <LL_ADC_EnableDMAReq>
 8003ac6:	e007      	b.n	8003ad8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f7ff f98b 	bl	8002dee <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3340      	adds	r3, #64	@ 0x40
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f002 f88e 	bl	8005c08 <HAL_DMA_Start_IT>
 8003aec:	4603      	mov	r3, r0
 8003aee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff faed 	bl	80030d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003afa:	e00d      	b.n	8003b18 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003b04:	e008      	b.n	8003b18 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003b12:	e001      	b.n	8003b18 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
 8003b16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40022000 	.word	0x40022000
 8003b28:	40022100 	.word	0x40022100
 8003b2c:	40022300 	.word	0x40022300
 8003b30:	58026300 	.word	0x58026300
 8003b34:	fffff0fe 	.word	0xfffff0fe
 8003b38:	08004dbf 	.word	0x08004dbf
 8003b3c:	08004e97 	.word	0x08004e97
 8003b40:	08004eb3 	.word	0x08004eb3
 8003b44:	58026000 	.word	0x58026000

08003b48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	@ 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a87      	ldr	r2, [pc, #540]	@ (8003da4 <HAL_ADC_IRQHandler+0x240>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <HAL_ADC_IRQHandler+0x30>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a86      	ldr	r2, [pc, #536]	@ (8003da8 <HAL_ADC_IRQHandler+0x244>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_ADC_IRQHandler+0x34>
 8003b94:	4b85      	ldr	r3, [pc, #532]	@ (8003dac <HAL_ADC_IRQHandler+0x248>)
 8003b96:	e000      	b.n	8003b9a <HAL_ADC_IRQHandler+0x36>
 8003b98:	4b85      	ldr	r3, [pc, #532]	@ (8003db0 <HAL_ADC_IRQHandler+0x24c>)
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f9e2 	bl	8002f64 <LL_ADC_GetMultimode>
 8003ba0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d017      	beq.n	8003bdc <HAL_ADC_IRQHandler+0x78>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d012      	beq.n	8003bdc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f001 fac6 	bl	8005160 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d004      	beq.n	8003bf0 <HAL_ADC_IRQHandler+0x8c>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8083 	beq.w	8003d02 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d07d      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff f8a4 	bl	8002d70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d062      	beq.n	8003cf4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a5d      	ldr	r2, [pc, #372]	@ (8003da8 <HAL_ADC_IRQHandler+0x244>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d002      	beq.n	8003c3e <HAL_ADC_IRQHandler+0xda>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	e000      	b.n	8003c40 <HAL_ADC_IRQHandler+0xdc>
 8003c3e:	4b59      	ldr	r3, [pc, #356]	@ (8003da4 <HAL_ADC_IRQHandler+0x240>)
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d008      	beq.n	8003c5a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b05      	cmp	r3, #5
 8003c52:	d002      	beq.n	8003c5a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b09      	cmp	r3, #9
 8003c58:	d104      	bne.n	8003c64 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	e00c      	b.n	8003c7e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a4f      	ldr	r2, [pc, #316]	@ (8003da8 <HAL_ADC_IRQHandler+0x244>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d002      	beq.n	8003c74 <HAL_ADC_IRQHandler+0x110>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	e000      	b.n	8003c76 <HAL_ADC_IRQHandler+0x112>
 8003c74:	4b4b      	ldr	r3, [pc, #300]	@ (8003da4 <HAL_ADC_IRQHandler+0x240>)
 8003c76:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d135      	bne.n	8003cf4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d12e      	bne.n	8003cf4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fa42 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11a      	bne.n	8003cdc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 020c 	bic.w	r2, r2, #12
 8003cb4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d112      	bne.n	8003cf4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	661a      	str	r2, [r3, #96]	@ 0x60
 8003cda:	e00b      	b.n	8003cf4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cec:	f043 0201 	orr.w	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fd fcbd 	bl	8001674 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	220c      	movs	r2, #12
 8003d00:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_ADC_IRQHandler+0x1b2>
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80a0 	beq.w	8003e62 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 809a 	beq.w	8003e62 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff f88c 	bl	8002e68 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003d50:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff f80a 	bl	8002d70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d5c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a11      	ldr	r2, [pc, #68]	@ (8003da8 <HAL_ADC_IRQHandler+0x244>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d002      	beq.n	8003d6e <HAL_ADC_IRQHandler+0x20a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	e000      	b.n	8003d70 <HAL_ADC_IRQHandler+0x20c>
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <HAL_ADC_IRQHandler+0x240>)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d008      	beq.n	8003d8a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d002      	beq.n	8003d8a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b07      	cmp	r3, #7
 8003d88:	d104      	bne.n	8003d94 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	e014      	b.n	8003dbe <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a03      	ldr	r2, [pc, #12]	@ (8003da8 <HAL_ADC_IRQHandler+0x244>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00a      	beq.n	8003db4 <HAL_ADC_IRQHandler+0x250>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	e008      	b.n	8003db6 <HAL_ADC_IRQHandler+0x252>
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40022100 	.word	0x40022100
 8003dac:	40022300 	.word	0x40022300
 8003db0:	58026300 	.word	0x58026300
 8003db4:	4b84      	ldr	r3, [pc, #528]	@ (8003fc8 <HAL_ADC_IRQHandler+0x464>)
 8003db6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d047      	beq.n	8003e54 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_ADC_IRQHandler+0x27a>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d03f      	beq.n	8003e54 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d13a      	bne.n	8003e54 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de8:	2b40      	cmp	r3, #64	@ 0x40
 8003dea:	d133      	bne.n	8003e54 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d12e      	bne.n	8003e54 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f9ba 	bl	8003174 <LL_ADC_INJ_IsConversionOngoing>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d11a      	bne.n	8003e3c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e14:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d112      	bne.n	8003e54 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e3a:	e00b      	b.n	8003e54 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e40:	f043 0210 	orr.w	r2, r3, #16
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 f95b 	bl	8005110 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2260      	movs	r2, #96	@ 0x60
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d011      	beq.n	8003e90 <HAL_ADC_IRQHandler+0x32c>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00c      	beq.n	8003e90 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8b2 	bl	8003fec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2280      	movs	r2, #128	@ 0x80
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d012      	beq.n	8003ec0 <HAL_ADC_IRQHandler+0x35c>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f001 f941 	bl	8005138 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d012      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x38c>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f001 f933 	bl	800514c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d043      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x41e>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d03e      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f10:	e021      	b.n	8003f56 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d015      	beq.n	8003f44 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc8 <HAL_ADC_IRQHandler+0x464>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_ADC_IRQHandler+0x3c8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a29      	ldr	r2, [pc, #164]	@ (8003fcc <HAL_ADC_IRQHandler+0x468>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADC_IRQHandler+0x3cc>
 8003f2c:	4b28      	ldr	r3, [pc, #160]	@ (8003fd0 <HAL_ADC_IRQHandler+0x46c>)
 8003f2e:	e000      	b.n	8003f32 <HAL_ADC_IRQHandler+0x3ce>
 8003f30:	4b28      	ldr	r3, [pc, #160]	@ (8003fd4 <HAL_ADC_IRQHandler+0x470>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff f824 	bl	8002f80 <LL_ADC_GetMultiDMATransfer>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f42:	e008      	b.n	8003f56 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003f52:	2301      	movs	r3, #1
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d10e      	bne.n	8003f7a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f60:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f6c:	f043 0202 	orr.w	r2, r3, #2
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f843 	bl	8004000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d018      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x45a>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d013      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fa6:	f043 0208 	orr.w	r2, r3, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f001 f8b3 	bl	8005124 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003fbe:	bf00      	nop
 8003fc0:	3728      	adds	r7, #40	@ 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40022000 	.word	0x40022000
 8003fcc:	40022100 	.word	0x40022100
 8003fd0:	40022300 	.word	0x40022300
 8003fd4:	58026300 	.word	0x58026300

08003fd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b0b9      	sub	sp, #228	@ 0xe4
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800402e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4aab      	ldr	r2, [pc, #684]	@ (80042e4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004036:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d102      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x34>
 8004042:	2302      	movs	r3, #2
 8004044:	f000 bcfe 	b.w	8004a44 <HAL_ADC_ConfigChannel+0xa30>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff f865 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	f040 84e2 	bne.w	8004a26 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	db38      	blt.n	80040dc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a9e      	ldr	r2, [pc, #632]	@ (80042e8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d033      	beq.n	80040dc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800407c:	2b00      	cmp	r3, #0
 800407e:	d108      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x7e>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	2201      	movs	r2, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	e01d      	b.n	80040ce <HAL_ADC_ConfigChannel+0xba>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80040b6:	2320      	movs	r3, #32
 80040b8:	e004      	b.n	80040c4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80040ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040be:	fab3 f383 	clz	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2201      	movs	r2, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	69d1      	ldr	r1, [r2, #28]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	430b      	orrs	r3, r1
 80040da:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f7fe fe54 	bl	8002d96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff f816 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 80040f8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff f837 	bl	8003174 <LL_ADC_INJ_IsConversionOngoing>
 8004106:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800410a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 8270 	bne.w	80045f4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004114:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 826b 	bne.w	80045f4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6819      	ldr	r1, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	461a      	mov	r2, r3
 800412c:	f7fe feaf 	bl	8002e8e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a6c      	ldr	r2, [pc, #432]	@ (80042e8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10d      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	08db      	lsrs	r3, r3, #3
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004154:	e032      	b.n	80041bc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004156:	4b65      	ldr	r3, [pc, #404]	@ (80042ec <HAL_ADC_ConfigChannel+0x2d8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800415e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004162:	d10b      	bne.n	800417c <HAL_ADC_ConfigChannel+0x168>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	e01d      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x1a4>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x18e>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	e00a      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x1a4>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	089b      	lsrs	r3, r3, #2
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d048      	beq.n	8004256 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	6919      	ldr	r1, [r3, #16]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041d4:	f7fe fcda 	bl	8002b8c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a42      	ldr	r2, [pc, #264]	@ (80042e8 <HAL_ADC_ConfigChannel+0x2d4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d119      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6919      	ldr	r1, [r3, #16]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f7fe fd72 	bl	8002cd8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6919      	ldr	r1, [r3, #16]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d102      	bne.n	800420c <HAL_ADC_ConfigChannel+0x1f8>
 8004206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800420a:	e000      	b.n	800420e <HAL_ADC_ConfigChannel+0x1fa>
 800420c:	2300      	movs	r3, #0
 800420e:	461a      	mov	r2, r3
 8004210:	f7fe fd40 	bl	8002c94 <LL_ADC_SetOffsetSaturation>
 8004214:	e1ee      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6919      	ldr	r1, [r3, #16]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004224:	2b01      	cmp	r3, #1
 8004226:	d102      	bne.n	800422e <HAL_ADC_ConfigChannel+0x21a>
 8004228:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800422c:	e000      	b.n	8004230 <HAL_ADC_ConfigChannel+0x21c>
 800422e:	2300      	movs	r3, #0
 8004230:	461a      	mov	r2, r3
 8004232:	f7fe fd0d 	bl	8002c50 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6919      	ldr	r1, [r3, #16]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	7e1b      	ldrb	r3, [r3, #24]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d102      	bne.n	800424c <HAL_ADC_ConfigChannel+0x238>
 8004246:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800424a:	e000      	b.n	800424e <HAL_ADC_ConfigChannel+0x23a>
 800424c:	2300      	movs	r3, #0
 800424e:	461a      	mov	r2, r3
 8004250:	f7fe fce4 	bl	8002c1c <LL_ADC_SetDataRightShift>
 8004254:	e1ce      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a23      	ldr	r2, [pc, #140]	@ (80042e8 <HAL_ADC_ConfigChannel+0x2d4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	f040 8181 	bne.w	8004564 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fcc1 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 800426e:	4603      	mov	r3, r0
 8004270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <HAL_ADC_ConfigChannel+0x27a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fcb6 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8004284:	4603      	mov	r3, r0
 8004286:	0e9b      	lsrs	r3, r3, #26
 8004288:	f003 021f 	and.w	r2, r3, #31
 800428c:	e01e      	b.n	80042cc <HAL_ADC_ConfigChannel+0x2b8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe fcab 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80042ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 80042b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80042bc:	2320      	movs	r3, #32
 80042be:	e004      	b.n	80042ca <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80042c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042c4:	fab3 f383 	clz	r3, r3
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x2dc>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	e01e      	b.n	8004322 <HAL_ADC_ConfigChannel+0x30e>
 80042e4:	47ff0000 	.word	0x47ff0000
 80042e8:	58026000 	.word	0x58026000
 80042ec:	5c001000 	.word	0x5c001000
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800430c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004314:	2320      	movs	r3, #32
 8004316:	e004      	b.n	8004322 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800431c:	fab3 f383 	clz	r3, r3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	429a      	cmp	r2, r3
 8004324:	d106      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fcf4 	bl	8002d1c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe fc58 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8004340:	4603      	mov	r3, r0
 8004342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x34c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2101      	movs	r1, #1
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe fc4d 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8004356:	4603      	mov	r3, r0
 8004358:	0e9b      	lsrs	r3, r3, #26
 800435a:	f003 021f 	and.w	r2, r3, #31
 800435e:	e01e      	b.n	800439e <HAL_ADC_ConfigChannel+0x38a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fc42 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 800436c:	4603      	mov	r3, r0
 800436e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004376:	fa93 f3a3 	rbit	r3, r3
 800437a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800437e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800438e:	2320      	movs	r3, #32
 8004390:	e004      	b.n	800439c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8004392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x3a2>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0e9b      	lsrs	r3, r3, #26
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	e018      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x3d4>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80043ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80043d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80043da:	2320      	movs	r3, #32
 80043dc:	e004      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80043de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2101      	movs	r1, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe fc91 	bl	8002d1c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2102      	movs	r1, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fbf5 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8004406:	4603      	mov	r3, r0
 8004408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x412>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fbea 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 800441c:	4603      	mov	r3, r0
 800441e:	0e9b      	lsrs	r3, r3, #26
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	e01e      	b.n	8004464 <HAL_ADC_ConfigChannel+0x450>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2102      	movs	r1, #2
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe fbdf 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8004432:	4603      	mov	r3, r0
 8004434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004448:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800444c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e004      	b.n	8004462 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_ADC_ConfigChannel+0x468>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	0e9b      	lsrs	r3, r3, #26
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	e014      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x492>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800448a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004490:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004498:	2320      	movs	r3, #32
 800449a:	e004      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800449c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044a0:	fab3 f383 	clz	r3, r3
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d106      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	2102      	movs	r1, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fc32 	bl	8002d1c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2103      	movs	r1, #3
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fb96 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x4d0>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2103      	movs	r1, #3
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe fb8b 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 80044da:	4603      	mov	r3, r0
 80044dc:	0e9b      	lsrs	r3, r3, #26
 80044de:	f003 021f 	and.w	r2, r3, #31
 80044e2:	e017      	b.n	8004514 <HAL_ADC_ConfigChannel+0x500>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2103      	movs	r1, #3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe fb80 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 80044f0:	4603      	mov	r3, r0
 80044f2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80044fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004506:	2320      	movs	r3, #32
 8004508:	e003      	b.n	8004512 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800450a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800450c:	fab3 f383 	clz	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_ADC_ConfigChannel+0x518>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	0e9b      	lsrs	r3, r3, #26
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	e011      	b.n	8004550 <HAL_ADC_ConfigChannel+0x53c>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800453a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800453c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800453e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004544:	2320      	movs	r3, #32
 8004546:	e003      	b.n	8004550 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800454a:	fab3 f383 	clz	r3, r3
 800454e:	b2db      	uxtb	r3, r3
 8004550:	429a      	cmp	r2, r3
 8004552:	d14f      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2200      	movs	r2, #0
 800455a:	2103      	movs	r1, #3
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fbdd 	bl	8002d1c <LL_ADC_SetOffsetState>
 8004562:	e047      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	069b      	lsls	r3, r3, #26
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004586:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800458e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	069b      	lsls	r3, r3, #26
 8004598:	429a      	cmp	r2, r3
 800459a:	d107      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80045aa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	069b      	lsls	r3, r3, #26
 80045bc:	429a      	cmp	r2, r3
 80045be:	d107      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80045ce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	069b      	lsls	r3, r3, #26
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d107      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80045f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fd45 	bl	8003088 <LL_ADC_IsEnabled>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 8219 	bne.w	8004a38 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	461a      	mov	r2, r3
 8004614:	f7fe fc66 	bl	8002ee4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4aa1      	ldr	r2, [pc, #644]	@ (80048a4 <HAL_ADC_ConfigChannel+0x890>)
 800461e:	4293      	cmp	r3, r2
 8004620:	f040 812e 	bne.w	8004880 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <HAL_ADC_ConfigChannel+0x638>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	0e9b      	lsrs	r3, r3, #26
 800463a:	3301      	adds	r3, #1
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2b09      	cmp	r3, #9
 8004642:	bf94      	ite	ls
 8004644:	2301      	movls	r3, #1
 8004646:	2300      	movhi	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e019      	b.n	8004680 <HAL_ADC_ConfigChannel+0x66c>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800465a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800465e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004664:	2320      	movs	r3, #32
 8004666:	e003      	b.n	8004670 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3301      	adds	r3, #1
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2b09      	cmp	r3, #9
 8004678:	bf94      	ite	ls
 800467a:	2301      	movls	r3, #1
 800467c:	2300      	movhi	r3, #0
 800467e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004680:	2b00      	cmp	r3, #0
 8004682:	d079      	beq.n	8004778 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x68c>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0e9b      	lsrs	r3, r3, #26
 8004696:	3301      	adds	r3, #1
 8004698:	069b      	lsls	r3, r3, #26
 800469a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800469e:	e015      	b.n	80046cc <HAL_ADC_ConfigChannel+0x6b8>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80046ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80046b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	e003      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80046bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	069b      	lsls	r3, r3, #26
 80046c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x6d8>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0e9b      	lsrs	r3, r3, #26
 80046de:	3301      	adds	r3, #1
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	e017      	b.n	800471c <HAL_ADC_ConfigChannel+0x708>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80046fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80046fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004704:	2320      	movs	r3, #32
 8004706:	e003      	b.n	8004710 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800470a:	fab3 f383 	clz	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	3301      	adds	r3, #1
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2101      	movs	r1, #1
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	ea42 0103 	orr.w	r1, r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x72e>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0e9b      	lsrs	r3, r3, #26
 8004732:	3301      	adds	r3, #1
 8004734:	f003 021f 	and.w	r2, r3, #31
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	051b      	lsls	r3, r3, #20
 8004740:	e018      	b.n	8004774 <HAL_ADC_ConfigChannel+0x760>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800475a:	2320      	movs	r3, #32
 800475c:	e003      	b.n	8004766 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	b2db      	uxtb	r3, r3
 8004766:	3301      	adds	r3, #1
 8004768:	f003 021f 	and.w	r2, r3, #31
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004774:	430b      	orrs	r3, r1
 8004776:	e07e      	b.n	8004876 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x780>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	0e9b      	lsrs	r3, r3, #26
 800478a:	3301      	adds	r3, #1
 800478c:	069b      	lsls	r3, r3, #26
 800478e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004792:	e015      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x7ac>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	fa93 f3a3 	rbit	r3, r3
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80047a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80047ac:	2320      	movs	r3, #32
 80047ae:	e003      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	069b      	lsls	r3, r3, #26
 80047bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x7cc>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0e9b      	lsrs	r3, r3, #26
 80047d2:	3301      	adds	r3, #1
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	e017      	b.n	8004810 <HAL_ADC_ConfigChannel+0x7fc>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	61bb      	str	r3, [r7, #24]
  return result;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80047f8:	2320      	movs	r3, #32
 80047fa:	e003      	b.n	8004804 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	3301      	adds	r3, #1
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	ea42 0103 	orr.w	r1, r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10d      	bne.n	800483c <HAL_ADC_ConfigChannel+0x828>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	0e9b      	lsrs	r3, r3, #26
 8004826:	3301      	adds	r3, #1
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	3b1e      	subs	r3, #30
 8004834:	051b      	lsls	r3, r3, #20
 8004836:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800483a:	e01b      	b.n	8004874 <HAL_ADC_ConfigChannel+0x860>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	fa93 f3a3 	rbit	r3, r3
 8004848:	60fb      	str	r3, [r7, #12]
  return result;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004854:	2320      	movs	r3, #32
 8004856:	e003      	b.n	8004860 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	3301      	adds	r3, #1
 8004862:	f003 021f 	and.w	r2, r3, #31
 8004866:	4613      	mov	r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4413      	add	r3, r2
 800486c:	3b1e      	subs	r3, #30
 800486e:	051b      	lsls	r3, r3, #20
 8004870:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004874:	430b      	orrs	r3, r1
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	6892      	ldr	r2, [r2, #8]
 800487a:	4619      	mov	r1, r3
 800487c:	f7fe fb07 	bl	8002e8e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	f280 80d7 	bge.w	8004a38 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a06      	ldr	r2, [pc, #24]	@ (80048a8 <HAL_ADC_ConfigChannel+0x894>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_ADC_ConfigChannel+0x88a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a04      	ldr	r2, [pc, #16]	@ (80048ac <HAL_ADC_ConfigChannel+0x898>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10a      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x8a0>
 800489e:	4b04      	ldr	r3, [pc, #16]	@ (80048b0 <HAL_ADC_ConfigChannel+0x89c>)
 80048a0:	e009      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x8a2>
 80048a2:	bf00      	nop
 80048a4:	47ff0000 	.word	0x47ff0000
 80048a8:	40022000 	.word	0x40022000
 80048ac:	40022100 	.word	0x40022100
 80048b0:	40022300 	.word	0x40022300
 80048b4:	4b65      	ldr	r3, [pc, #404]	@ (8004a4c <HAL_ADC_ConfigChannel+0xa38>)
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe f95a 	bl	8002b70 <LL_ADC_GetCommonPathInternalCh>
 80048bc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a62      	ldr	r2, [pc, #392]	@ (8004a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_ADC_ConfigChannel+0x8c0>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a61      	ldr	r2, [pc, #388]	@ (8004a54 <HAL_ADC_ConfigChannel+0xa40>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10e      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x8de>
 80048d4:	485e      	ldr	r0, [pc, #376]	@ (8004a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80048d6:	f7fe fbd7 	bl	8003088 <LL_ADC_IsEnabled>
 80048da:	4604      	mov	r4, r0
 80048dc:	485d      	ldr	r0, [pc, #372]	@ (8004a54 <HAL_ADC_ConfigChannel+0xa40>)
 80048de:	f7fe fbd3 	bl	8003088 <LL_ADC_IsEnabled>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4323      	orrs	r3, r4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e008      	b.n	8004904 <HAL_ADC_ConfigChannel+0x8f0>
 80048f2:	4859      	ldr	r0, [pc, #356]	@ (8004a58 <HAL_ADC_ConfigChannel+0xa44>)
 80048f4:	f7fe fbc8 	bl	8003088 <LL_ADC_IsEnabled>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8084 	beq.w	8004a12 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a53      	ldr	r2, [pc, #332]	@ (8004a5c <HAL_ADC_ConfigChannel+0xa48>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d132      	bne.n	800497a <HAL_ADC_ConfigChannel+0x966>
 8004914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004918:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d12c      	bne.n	800497a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a4c      	ldr	r2, [pc, #304]	@ (8004a58 <HAL_ADC_ConfigChannel+0xa44>)
 8004926:	4293      	cmp	r3, r2
 8004928:	f040 8086 	bne.w	8004a38 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a47      	ldr	r2, [pc, #284]	@ (8004a50 <HAL_ADC_ConfigChannel+0xa3c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_ADC_ConfigChannel+0x92c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a46      	ldr	r2, [pc, #280]	@ (8004a54 <HAL_ADC_ConfigChannel+0xa40>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x930>
 8004940:	4a47      	ldr	r2, [pc, #284]	@ (8004a60 <HAL_ADC_ConfigChannel+0xa4c>)
 8004942:	e000      	b.n	8004946 <HAL_ADC_ConfigChannel+0x932>
 8004944:	4a41      	ldr	r2, [pc, #260]	@ (8004a4c <HAL_ADC_ConfigChannel+0xa38>)
 8004946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800494a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f7fe f8fa 	bl	8002b4a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004956:	4b43      	ldr	r3, [pc, #268]	@ (8004a64 <HAL_ADC_ConfigChannel+0xa50>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	4a42      	ldr	r2, [pc, #264]	@ (8004a68 <HAL_ADC_ConfigChannel+0xa54>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	3301      	adds	r3, #1
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800496a:	e002      	b.n	8004972 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	3b01      	subs	r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f9      	bne.n	800496c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004978:	e05e      	b.n	8004a38 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a6c <HAL_ADC_ConfigChannel+0xa58>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d120      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x9b2>
 8004984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d11a      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a30      	ldr	r2, [pc, #192]	@ (8004a58 <HAL_ADC_ConfigChannel+0xa44>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d14e      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_ADC_ConfigChannel+0x99a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a54 <HAL_ADC_ConfigChannel+0xa40>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x99e>
 80049ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004a60 <HAL_ADC_ConfigChannel+0xa4c>)
 80049b0:	e000      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x9a0>
 80049b2:	4a26      	ldr	r2, [pc, #152]	@ (8004a4c <HAL_ADC_ConfigChannel+0xa38>)
 80049b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f7fe f8c3 	bl	8002b4a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049c4:	e038      	b.n	8004a38 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a29      	ldr	r2, [pc, #164]	@ (8004a70 <HAL_ADC_ConfigChannel+0xa5c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d133      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0xa24>
 80049d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d12d      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a58 <HAL_ADC_ConfigChannel+0xa44>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d128      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a19      	ldr	r2, [pc, #100]	@ (8004a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_ADC_ConfigChannel+0x9e6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a17      	ldr	r2, [pc, #92]	@ (8004a54 <HAL_ADC_ConfigChannel+0xa40>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d101      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x9ea>
 80049fa:	4a19      	ldr	r2, [pc, #100]	@ (8004a60 <HAL_ADC_ConfigChannel+0xa4c>)
 80049fc:	e000      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x9ec>
 80049fe:	4a13      	ldr	r2, [pc, #76]	@ (8004a4c <HAL_ADC_ConfigChannel+0xa38>)
 8004a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7fe f89d 	bl	8002b4a <LL_ADC_SetCommonPathInternalCh>
 8004a10:	e012      	b.n	8004a38 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004a24:	e008      	b.n	8004a38 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2a:	f043 0220 	orr.w	r2, r3, #32
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a40:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	37e4      	adds	r7, #228	@ 0xe4
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd90      	pop	{r4, r7, pc}
 8004a4c:	58026300 	.word	0x58026300
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40022100 	.word	0x40022100
 8004a58:	58026000 	.word	0x58026000
 8004a5c:	c7520000 	.word	0xc7520000
 8004a60:	40022300 	.word	0x40022300
 8004a64:	2400000c 	.word	0x2400000c
 8004a68:	053e2d63 	.word	0x053e2d63
 8004a6c:	c3210000 	.word	0xc3210000
 8004a70:	cb840000 	.word	0xcb840000

08004a74 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fb4a 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8004a90:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fb6c 	bl	8003174 <LL_ADC_INJ_IsConversionOngoing>
 8004a9c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d103      	bne.n	8004aac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8098 	beq.w	8004bdc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d02a      	beq.n	8004b10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	7e5b      	ldrb	r3, [r3, #25]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d126      	bne.n	8004b10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	7e1b      	ldrb	r3, [r3, #24]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d122      	bne.n	8004b10 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004ace:	e014      	b.n	8004afa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4a45      	ldr	r2, [pc, #276]	@ (8004be8 <ADC_ConversionStop+0x174>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d90d      	bls.n	8004af4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004adc:	f043 0210 	orr.w	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae8:	f043 0201 	orr.w	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e074      	b.n	8004bde <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3301      	adds	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b04:	2b40      	cmp	r3, #64	@ 0x40
 8004b06:	d1e3      	bne.n	8004ad0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2240      	movs	r2, #64	@ 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d014      	beq.n	8004b40 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe fb02 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00c      	beq.n	8004b40 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fabf 	bl	80030ae <LL_ADC_IsDisableOngoing>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fade 	bl	80030fc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d014      	beq.n	8004b70 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe fb12 	bl	8003174 <LL_ADC_INJ_IsConversionOngoing>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00c      	beq.n	8004b70 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe faa7 	bl	80030ae <LL_ADC_IsDisableOngoing>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d104      	bne.n	8004b70 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe faee 	bl	800314c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d005      	beq.n	8004b82 <ADC_ConversionStop+0x10e>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d105      	bne.n	8004b88 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	617b      	str	r3, [r7, #20]
        break;
 8004b80:	e005      	b.n	8004b8e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004b82:	2308      	movs	r3, #8
 8004b84:	617b      	str	r3, [r7, #20]
        break;
 8004b86:	e002      	b.n	8004b8e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004b88:	2304      	movs	r3, #4
 8004b8a:	617b      	str	r3, [r7, #20]
        break;
 8004b8c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004b8e:	f7fd ff99 	bl	8002ac4 <HAL_GetTick>
 8004b92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004b94:	e01b      	b.n	8004bce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004b96:	f7fd ff95 	bl	8002ac4 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b05      	cmp	r3, #5
 8004ba2:	d914      	bls.n	8004bce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb6:	f043 0210 	orr.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bc2:	f043 0201 	orr.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e007      	b.n	8004bde <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1dc      	bne.n	8004b96 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	000cdbff 	.word	0x000cdbff

08004bec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe fa45 	bl	8003088 <LL_ADC_IsEnabled>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d16e      	bne.n	8004ce2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	4b38      	ldr	r3, [pc, #224]	@ (8004cec <ADC_Enable+0x100>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00d      	beq.n	8004c2e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c16:	f043 0210 	orr.w	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e05a      	b.n	8004ce4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fa00 	bl	8003038 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c38:	f7fd ff44 	bl	8002ac4 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2b      	ldr	r2, [pc, #172]	@ (8004cf0 <ADC_Enable+0x104>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <ADC_Enable+0x66>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a29      	ldr	r2, [pc, #164]	@ (8004cf4 <ADC_Enable+0x108>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d101      	bne.n	8004c56 <ADC_Enable+0x6a>
 8004c52:	4b29      	ldr	r3, [pc, #164]	@ (8004cf8 <ADC_Enable+0x10c>)
 8004c54:	e000      	b.n	8004c58 <ADC_Enable+0x6c>
 8004c56:	4b29      	ldr	r3, [pc, #164]	@ (8004cfc <ADC_Enable+0x110>)
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe f983 	bl	8002f64 <LL_ADC_GetMultimode>
 8004c5e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a23      	ldr	r2, [pc, #140]	@ (8004cf4 <ADC_Enable+0x108>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d002      	beq.n	8004c70 <ADC_Enable+0x84>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	e000      	b.n	8004c72 <ADC_Enable+0x86>
 8004c70:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf0 <ADC_Enable+0x104>)
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d02c      	beq.n	8004cd4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d130      	bne.n	8004ce2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c80:	e028      	b.n	8004cd4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe f9fe 	bl	8003088 <LL_ADC_IsEnabled>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe f9ce 	bl	8003038 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c9c:	f7fd ff12 	bl	8002ac4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d914      	bls.n	8004cd4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d00d      	beq.n	8004cd4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cbc:	f043 0210 	orr.w	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc8:	f043 0201 	orr.w	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e007      	b.n	8004ce4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d1cf      	bne.n	8004c82 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	8000003f 	.word	0x8000003f
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40022100 	.word	0x40022100
 8004cf8:	40022300 	.word	0x40022300
 8004cfc:	58026300 	.word	0x58026300

08004d00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe f9ce 	bl	80030ae <LL_ADC_IsDisableOngoing>
 8004d12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe f9b5 	bl	8003088 <LL_ADC_IsEnabled>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d047      	beq.n	8004db4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d144      	bne.n	8004db4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 030d 	and.w	r3, r3, #13
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10c      	bne.n	8004d52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe f98f 	bl	8003060 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2203      	movs	r2, #3
 8004d48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d4a:	f7fd febb 	bl	8002ac4 <HAL_GetTick>
 8004d4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d50:	e029      	b.n	8004da6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d56:	f043 0210 	orr.w	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d62:	f043 0201 	orr.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e023      	b.n	8004db6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d6e:	f7fd fea9 	bl	8002ac4 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d914      	bls.n	8004da6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00d      	beq.n	8004da6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8e:	f043 0210 	orr.w	r2, r3, #16
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d9a:	f043 0201 	orr.w	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e007      	b.n	8004db6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1dc      	bne.n	8004d6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d14b      	bne.n	8004e70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ddc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d021      	beq.n	8004e36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd ffba 	bl	8002d70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d032      	beq.n	8004e68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d12b      	bne.n	8004e68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d11f      	bne.n	8004e68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2c:	f043 0201 	orr.w	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e34:	e018      	b.n	8004e68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d111      	bne.n	8004e68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e60:	f043 0201 	orr.w	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f7fc fc03 	bl	8001674 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e6e:	e00e      	b.n	8004e8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff f8bf 	bl	8004000 <HAL_ADC_ErrorCallback>
}
 8004e82:	e004      	b.n	8004e8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
}
 8004e8e:	bf00      	nop
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff f897 	bl	8003fd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ed0:	f043 0204 	orr.w	r2, r3, #4
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff f891 	bl	8004000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6c      	ldr	r2, [pc, #432]	@ (80050a8 <ADC_ConfigureBoostMode+0x1c0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <ADC_ConfigureBoostMode+0x1c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a6b      	ldr	r2, [pc, #428]	@ (80050ac <ADC_ConfigureBoostMode+0x1c4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d109      	bne.n	8004f18 <ADC_ConfigureBoostMode+0x30>
 8004f04:	4b6a      	ldr	r3, [pc, #424]	@ (80050b0 <ADC_ConfigureBoostMode+0x1c8>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf14      	ite	ne
 8004f10:	2301      	movne	r3, #1
 8004f12:	2300      	moveq	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	e008      	b.n	8004f2a <ADC_ConfigureBoostMode+0x42>
 8004f18:	4b66      	ldr	r3, [pc, #408]	@ (80050b4 <ADC_ConfigureBoostMode+0x1cc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01c      	beq.n	8004f68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004f2e:	f004 fec7 	bl	8009cc0 <HAL_RCC_GetHCLKFreq>
 8004f32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f3c:	d010      	beq.n	8004f60 <ADC_ConfigureBoostMode+0x78>
 8004f3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f42:	d873      	bhi.n	800502c <ADC_ConfigureBoostMode+0x144>
 8004f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f48:	d002      	beq.n	8004f50 <ADC_ConfigureBoostMode+0x68>
 8004f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f4e:	d16d      	bne.n	800502c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	60fb      	str	r3, [r7, #12]
        break;
 8004f5e:	e068      	b.n	8005032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	60fb      	str	r3, [r7, #12]
        break;
 8004f66:	e064      	b.n	8005032 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f68:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	f006 f8a2 	bl	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004f7e:	d051      	beq.n	8005024 <ADC_ConfigureBoostMode+0x13c>
 8004f80:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004f84:	d854      	bhi.n	8005030 <ADC_ConfigureBoostMode+0x148>
 8004f86:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004f8a:	d047      	beq.n	800501c <ADC_ConfigureBoostMode+0x134>
 8004f8c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004f90:	d84e      	bhi.n	8005030 <ADC_ConfigureBoostMode+0x148>
 8004f92:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004f96:	d03d      	beq.n	8005014 <ADC_ConfigureBoostMode+0x12c>
 8004f98:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004f9c:	d848      	bhi.n	8005030 <ADC_ConfigureBoostMode+0x148>
 8004f9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fa2:	d033      	beq.n	800500c <ADC_ConfigureBoostMode+0x124>
 8004fa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fa8:	d842      	bhi.n	8005030 <ADC_ConfigureBoostMode+0x148>
 8004faa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004fae:	d029      	beq.n	8005004 <ADC_ConfigureBoostMode+0x11c>
 8004fb0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004fb4:	d83c      	bhi.n	8005030 <ADC_ConfigureBoostMode+0x148>
 8004fb6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004fba:	d01a      	beq.n	8004ff2 <ADC_ConfigureBoostMode+0x10a>
 8004fbc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004fc0:	d836      	bhi.n	8005030 <ADC_ConfigureBoostMode+0x148>
 8004fc2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004fc6:	d014      	beq.n	8004ff2 <ADC_ConfigureBoostMode+0x10a>
 8004fc8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004fcc:	d830      	bhi.n	8005030 <ADC_ConfigureBoostMode+0x148>
 8004fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fd2:	d00e      	beq.n	8004ff2 <ADC_ConfigureBoostMode+0x10a>
 8004fd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fd8:	d82a      	bhi.n	8005030 <ADC_ConfigureBoostMode+0x148>
 8004fda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fde:	d008      	beq.n	8004ff2 <ADC_ConfigureBoostMode+0x10a>
 8004fe0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fe4:	d824      	bhi.n	8005030 <ADC_ConfigureBoostMode+0x148>
 8004fe6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fea:	d002      	beq.n	8004ff2 <ADC_ConfigureBoostMode+0x10a>
 8004fec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ff0:	d11e      	bne.n	8005030 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	0c9b      	lsrs	r3, r3, #18
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	60fb      	str	r3, [r7, #12]
        break;
 8005002:	e016      	b.n	8005032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	60fb      	str	r3, [r7, #12]
        break;
 800500a:	e012      	b.n	8005032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	60fb      	str	r3, [r7, #12]
        break;
 8005012:	e00e      	b.n	8005032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	60fb      	str	r3, [r7, #12]
        break;
 800501a:	e00a      	b.n	8005032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	09db      	lsrs	r3, r3, #7
 8005020:	60fb      	str	r3, [r7, #12]
        break;
 8005022:	e006      	b.n	8005032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	0a1b      	lsrs	r3, r3, #8
 8005028:	60fb      	str	r3, [r7, #12]
        break;
 800502a:	e002      	b.n	8005032 <ADC_ConfigureBoostMode+0x14a>
        break;
 800502c:	bf00      	nop
 800502e:	e000      	b.n	8005032 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005030:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a1f      	ldr	r2, [pc, #124]	@ (80050b8 <ADC_ConfigureBoostMode+0x1d0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d808      	bhi.n	8005052 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800504e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005050:	e025      	b.n	800509e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4a19      	ldr	r2, [pc, #100]	@ (80050bc <ADC_ConfigureBoostMode+0x1d4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d80a      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800506c:	609a      	str	r2, [r3, #8]
}
 800506e:	e016      	b.n	800509e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4a13      	ldr	r2, [pc, #76]	@ (80050c0 <ADC_ConfigureBoostMode+0x1d8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d80a      	bhi.n	800508e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	e007      	b.n	800509e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800509c:	609a      	str	r2, [r3, #8]
}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40022000 	.word	0x40022000
 80050ac:	40022100 	.word	0x40022100
 80050b0:	40022300 	.word	0x40022300
 80050b4:	58026300 	.word	0x58026300
 80050b8:	005f5e10 	.word	0x005f5e10
 80050bc:	00bebc20 	.word	0x00bebc20
 80050c0:	017d7840 	.word	0x017d7840

080050c4 <LL_ADC_IsEnabled>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <LL_ADC_IsEnabled+0x18>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <LL_ADC_IsEnabled+0x1a>
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <LL_ADC_REG_IsConversionOngoing>:
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d101      	bne.n	8005102 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b0a3      	sub	sp, #140	@ 0x8c
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800518e:	2302      	movs	r3, #2
 8005190:	e0c1      	b.n	8005316 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800519e:	2300      	movs	r3, #0
 80051a0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a5e      	ldr	r2, [pc, #376]	@ (8005320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d102      	bne.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051ac:	4b5d      	ldr	r3, [pc, #372]	@ (8005324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e001      	b.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0a0      	b.n	8005316 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ff87 	bl	80050ea <LL_ADC_REG_IsConversionOngoing>
 80051dc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff ff80 	bl	80050ea <LL_ADC_REG_IsConversionOngoing>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f040 8081 	bne.w	80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80051f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d17c      	bne.n	80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a48      	ldr	r2, [pc, #288]	@ (8005320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a46      	ldr	r2, [pc, #280]	@ (8005324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800520e:	4b46      	ldr	r3, [pc, #280]	@ (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005210:	e000      	b.n	8005214 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005212:	4b46      	ldr	r3, [pc, #280]	@ (800532c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005214:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d039      	beq.n	8005292 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800521e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	431a      	orrs	r2, r3
 800522c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800522e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a3a      	ldr	r2, [pc, #232]	@ (8005320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a39      	ldr	r2, [pc, #228]	@ (8005324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d10e      	bne.n	8005262 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005244:	4836      	ldr	r0, [pc, #216]	@ (8005320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005246:	f7ff ff3d 	bl	80050c4 <LL_ADC_IsEnabled>
 800524a:	4604      	mov	r4, r0
 800524c:	4835      	ldr	r0, [pc, #212]	@ (8005324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800524e:	f7ff ff39 	bl	80050c4 <LL_ADC_IsEnabled>
 8005252:	4603      	mov	r3, r0
 8005254:	4323      	orrs	r3, r4
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf0c      	ite	eq
 800525a:	2301      	moveq	r3, #1
 800525c:	2300      	movne	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e008      	b.n	8005274 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005262:	4833      	ldr	r0, [pc, #204]	@ (8005330 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005264:	f7ff ff2e 	bl	80050c4 <LL_ADC_IsEnabled>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	bf0c      	ite	eq
 800526e:	2301      	moveq	r3, #1
 8005270:	2300      	movne	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d047      	beq.n	8005308 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005278:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	4b2d      	ldr	r3, [pc, #180]	@ (8005334 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800527e:	4013      	ands	r3, r2
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	6811      	ldr	r1, [r2, #0]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	6892      	ldr	r2, [r2, #8]
 8005288:	430a      	orrs	r2, r1
 800528a:	431a      	orrs	r2, r3
 800528c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800528e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005290:	e03a      	b.n	8005308 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005292:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800529a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800529c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10e      	bne.n	80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80052b2:	481b      	ldr	r0, [pc, #108]	@ (8005320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052b4:	f7ff ff06 	bl	80050c4 <LL_ADC_IsEnabled>
 80052b8:	4604      	mov	r4, r0
 80052ba:	481a      	ldr	r0, [pc, #104]	@ (8005324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052bc:	f7ff ff02 	bl	80050c4 <LL_ADC_IsEnabled>
 80052c0:	4603      	mov	r3, r0
 80052c2:	4323      	orrs	r3, r4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	bf0c      	ite	eq
 80052c8:	2301      	moveq	r3, #1
 80052ca:	2300      	movne	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	e008      	b.n	80052e2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80052d0:	4817      	ldr	r0, [pc, #92]	@ (8005330 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80052d2:	f7ff fef7 	bl	80050c4 <LL_ADC_IsEnabled>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf0c      	ite	eq
 80052dc:	2301      	moveq	r3, #1
 80052de:	2300      	movne	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d010      	beq.n	8005308 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80052f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052f2:	e009      	b.n	8005308 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005306:	e000      	b.n	800530a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005308:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005312:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005316:	4618      	mov	r0, r3
 8005318:	378c      	adds	r7, #140	@ 0x8c
 800531a:	46bd      	mov	sp, r7
 800531c:	bd90      	pop	{r4, r7, pc}
 800531e:	bf00      	nop
 8005320:	40022000 	.word	0x40022000
 8005324:	40022100 	.word	0x40022100
 8005328:	40022300 	.word	0x40022300
 800532c:	58026300 	.word	0x58026300
 8005330:	58026000 	.word	0x58026000
 8005334:	fffff0e0 	.word	0xfffff0e0

08005338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005348:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <__NVIC_SetPriorityGrouping+0x40>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005354:	4013      	ands	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005360:	4b06      	ldr	r3, [pc, #24]	@ (800537c <__NVIC_SetPriorityGrouping+0x44>)
 8005362:	4313      	orrs	r3, r2
 8005364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005366:	4a04      	ldr	r2, [pc, #16]	@ (8005378 <__NVIC_SetPriorityGrouping+0x40>)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	60d3      	str	r3, [r2, #12]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	e000ed00 	.word	0xe000ed00
 800537c:	05fa0000 	.word	0x05fa0000

08005380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005384:	4b04      	ldr	r3, [pc, #16]	@ (8005398 <__NVIC_GetPriorityGrouping+0x18>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	f003 0307 	and.w	r3, r3, #7
}
 800538e:	4618      	mov	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000ed00 	.word	0xe000ed00

0800539c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	db0b      	blt.n	80053c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	f003 021f 	and.w	r2, r3, #31
 80053b4:	4907      	ldr	r1, [pc, #28]	@ (80053d4 <__NVIC_EnableIRQ+0x38>)
 80053b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2001      	movs	r0, #1
 80053be:	fa00 f202 	lsl.w	r2, r0, r2
 80053c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	e000e100 	.word	0xe000e100

080053d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	6039      	str	r1, [r7, #0]
 80053e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	db0a      	blt.n	8005402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	490c      	ldr	r1, [pc, #48]	@ (8005424 <__NVIC_SetPriority+0x4c>)
 80053f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053f6:	0112      	lsls	r2, r2, #4
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	440b      	add	r3, r1
 80053fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005400:	e00a      	b.n	8005418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	4908      	ldr	r1, [pc, #32]	@ (8005428 <__NVIC_SetPriority+0x50>)
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	3b04      	subs	r3, #4
 8005410:	0112      	lsls	r2, r2, #4
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	440b      	add	r3, r1
 8005416:	761a      	strb	r2, [r3, #24]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	e000e100 	.word	0xe000e100
 8005428:	e000ed00 	.word	0xe000ed00

0800542c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800542c:	b480      	push	{r7}
 800542e:	b089      	sub	sp, #36	@ 0x24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f1c3 0307 	rsb	r3, r3, #7
 8005446:	2b04      	cmp	r3, #4
 8005448:	bf28      	it	cs
 800544a:	2304      	movcs	r3, #4
 800544c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	3304      	adds	r3, #4
 8005452:	2b06      	cmp	r3, #6
 8005454:	d902      	bls.n	800545c <NVIC_EncodePriority+0x30>
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3b03      	subs	r3, #3
 800545a:	e000      	b.n	800545e <NVIC_EncodePriority+0x32>
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005460:	f04f 32ff 	mov.w	r2, #4294967295
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43da      	mvns	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	401a      	ands	r2, r3
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005474:	f04f 31ff 	mov.w	r1, #4294967295
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	fa01 f303 	lsl.w	r3, r1, r3
 800547e:	43d9      	mvns	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005484:	4313      	orrs	r3, r2
         );
}
 8005486:	4618      	mov	r0, r3
 8005488:	3724      	adds	r7, #36	@ 0x24
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3b01      	subs	r3, #1
 80054a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054a4:	d301      	bcc.n	80054aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054a6:	2301      	movs	r3, #1
 80054a8:	e00f      	b.n	80054ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054aa:	4a0a      	ldr	r2, [pc, #40]	@ (80054d4 <SysTick_Config+0x40>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054b2:	210f      	movs	r1, #15
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	f7ff ff8e 	bl	80053d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <SysTick_Config+0x40>)
 80054be:	2200      	movs	r2, #0
 80054c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054c2:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <SysTick_Config+0x40>)
 80054c4:	2207      	movs	r2, #7
 80054c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	e000e010 	.word	0xe000e010

080054d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff ff29 	bl	8005338 <__NVIC_SetPriorityGrouping>
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	4603      	mov	r3, r0
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054fc:	f7ff ff40 	bl	8005380 <__NVIC_GetPriorityGrouping>
 8005500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	6978      	ldr	r0, [r7, #20]
 8005508:	f7ff ff90 	bl	800542c <NVIC_EncodePriority>
 800550c:	4602      	mov	r2, r0
 800550e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff ff5f 	bl	80053d8 <__NVIC_SetPriority>
}
 800551a:	bf00      	nop
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	4603      	mov	r3, r0
 800552a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800552c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff ff33 	bl	800539c <__NVIC_EnableIRQ>
}
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff ffa4 	bl	8005494 <SysTick_Config>
 800554c:	4603      	mov	r3, r0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005560:	f7fd fab0 	bl	8002ac4 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e312      	b.n	8005b96 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a66      	ldr	r2, [pc, #408]	@ (8005710 <HAL_DMA_Init+0x1b8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d04a      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a65      	ldr	r2, [pc, #404]	@ (8005714 <HAL_DMA_Init+0x1bc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d045      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a63      	ldr	r2, [pc, #396]	@ (8005718 <HAL_DMA_Init+0x1c0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d040      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a62      	ldr	r2, [pc, #392]	@ (800571c <HAL_DMA_Init+0x1c4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d03b      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a60      	ldr	r2, [pc, #384]	@ (8005720 <HAL_DMA_Init+0x1c8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d036      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005724 <HAL_DMA_Init+0x1cc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d031      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005728 <HAL_DMA_Init+0x1d0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d02c      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a5c      	ldr	r2, [pc, #368]	@ (800572c <HAL_DMA_Init+0x1d4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d027      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005730 <HAL_DMA_Init+0x1d8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d022      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a59      	ldr	r2, [pc, #356]	@ (8005734 <HAL_DMA_Init+0x1dc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d01d      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a57      	ldr	r2, [pc, #348]	@ (8005738 <HAL_DMA_Init+0x1e0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d018      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a56      	ldr	r2, [pc, #344]	@ (800573c <HAL_DMA_Init+0x1e4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d013      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a54      	ldr	r2, [pc, #336]	@ (8005740 <HAL_DMA_Init+0x1e8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00e      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a53      	ldr	r2, [pc, #332]	@ (8005744 <HAL_DMA_Init+0x1ec>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d009      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a51      	ldr	r2, [pc, #324]	@ (8005748 <HAL_DMA_Init+0x1f0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d004      	beq.n	8005610 <HAL_DMA_Init+0xb8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a50      	ldr	r2, [pc, #320]	@ (800574c <HAL_DMA_Init+0x1f4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d101      	bne.n	8005614 <HAL_DMA_Init+0xbc>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <HAL_DMA_Init+0xbe>
 8005614:	2300      	movs	r3, #0
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 813c 	beq.w	8005894 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a37      	ldr	r2, [pc, #220]	@ (8005710 <HAL_DMA_Init+0x1b8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d04a      	beq.n	80056cc <HAL_DMA_Init+0x174>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a36      	ldr	r2, [pc, #216]	@ (8005714 <HAL_DMA_Init+0x1bc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d045      	beq.n	80056cc <HAL_DMA_Init+0x174>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a34      	ldr	r2, [pc, #208]	@ (8005718 <HAL_DMA_Init+0x1c0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d040      	beq.n	80056cc <HAL_DMA_Init+0x174>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a33      	ldr	r2, [pc, #204]	@ (800571c <HAL_DMA_Init+0x1c4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d03b      	beq.n	80056cc <HAL_DMA_Init+0x174>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a31      	ldr	r2, [pc, #196]	@ (8005720 <HAL_DMA_Init+0x1c8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d036      	beq.n	80056cc <HAL_DMA_Init+0x174>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a30      	ldr	r2, [pc, #192]	@ (8005724 <HAL_DMA_Init+0x1cc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d031      	beq.n	80056cc <HAL_DMA_Init+0x174>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a2e      	ldr	r2, [pc, #184]	@ (8005728 <HAL_DMA_Init+0x1d0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d02c      	beq.n	80056cc <HAL_DMA_Init+0x174>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a2d      	ldr	r2, [pc, #180]	@ (800572c <HAL_DMA_Init+0x1d4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d027      	beq.n	80056cc <HAL_DMA_Init+0x174>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a2b      	ldr	r2, [pc, #172]	@ (8005730 <HAL_DMA_Init+0x1d8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d022      	beq.n	80056cc <HAL_DMA_Init+0x174>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2a      	ldr	r2, [pc, #168]	@ (8005734 <HAL_DMA_Init+0x1dc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d01d      	beq.n	80056cc <HAL_DMA_Init+0x174>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a28      	ldr	r2, [pc, #160]	@ (8005738 <HAL_DMA_Init+0x1e0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d018      	beq.n	80056cc <HAL_DMA_Init+0x174>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a27      	ldr	r2, [pc, #156]	@ (800573c <HAL_DMA_Init+0x1e4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <HAL_DMA_Init+0x174>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a25      	ldr	r2, [pc, #148]	@ (8005740 <HAL_DMA_Init+0x1e8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00e      	beq.n	80056cc <HAL_DMA_Init+0x174>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a24      	ldr	r2, [pc, #144]	@ (8005744 <HAL_DMA_Init+0x1ec>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_DMA_Init+0x174>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a22      	ldr	r2, [pc, #136]	@ (8005748 <HAL_DMA_Init+0x1f0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_DMA_Init+0x174>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a21      	ldr	r2, [pc, #132]	@ (800574c <HAL_DMA_Init+0x1f4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d108      	bne.n	80056de <HAL_DMA_Init+0x186>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	e007      	b.n	80056ee <HAL_DMA_Init+0x196>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056ee:	e02f      	b.n	8005750 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056f0:	f7fd f9e8 	bl	8002ac4 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d928      	bls.n	8005750 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2203      	movs	r2, #3
 8005708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e242      	b.n	8005b96 <HAL_DMA_Init+0x63e>
 8005710:	40020010 	.word	0x40020010
 8005714:	40020028 	.word	0x40020028
 8005718:	40020040 	.word	0x40020040
 800571c:	40020058 	.word	0x40020058
 8005720:	40020070 	.word	0x40020070
 8005724:	40020088 	.word	0x40020088
 8005728:	400200a0 	.word	0x400200a0
 800572c:	400200b8 	.word	0x400200b8
 8005730:	40020410 	.word	0x40020410
 8005734:	40020428 	.word	0x40020428
 8005738:	40020440 	.word	0x40020440
 800573c:	40020458 	.word	0x40020458
 8005740:	40020470 	.word	0x40020470
 8005744:	40020488 	.word	0x40020488
 8005748:	400204a0 	.word	0x400204a0
 800574c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1c8      	bne.n	80056f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4b83      	ldr	r3, [pc, #524]	@ (8005978 <HAL_DMA_Init+0x420>)
 800576a:	4013      	ands	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005776:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005782:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800578e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d107      	bne.n	80057b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ac:	4313      	orrs	r3, r2
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b28      	cmp	r3, #40	@ 0x28
 80057ba:	d903      	bls.n	80057c4 <HAL_DMA_Init+0x26c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80057c2:	d91f      	bls.n	8005804 <HAL_DMA_Init+0x2ac>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80057ca:	d903      	bls.n	80057d4 <HAL_DMA_Init+0x27c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b42      	cmp	r3, #66	@ 0x42
 80057d2:	d917      	bls.n	8005804 <HAL_DMA_Init+0x2ac>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b46      	cmp	r3, #70	@ 0x46
 80057da:	d903      	bls.n	80057e4 <HAL_DMA_Init+0x28c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b48      	cmp	r3, #72	@ 0x48
 80057e2:	d90f      	bls.n	8005804 <HAL_DMA_Init+0x2ac>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80057ea:	d903      	bls.n	80057f4 <HAL_DMA_Init+0x29c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b52      	cmp	r3, #82	@ 0x52
 80057f2:	d907      	bls.n	8005804 <HAL_DMA_Init+0x2ac>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b73      	cmp	r3, #115	@ 0x73
 80057fa:	d905      	bls.n	8005808 <HAL_DMA_Init+0x2b0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b77      	cmp	r3, #119	@ 0x77
 8005802:	d801      	bhi.n	8005808 <HAL_DMA_Init+0x2b0>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <HAL_DMA_Init+0x2b2>
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005814:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f023 0307 	bic.w	r3, r3, #7
 800582c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	2b04      	cmp	r3, #4
 800583e:	d117      	bne.n	8005870 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00e      	beq.n	8005870 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f001 fdca 	bl	80073ec <DMA_CheckFifoParam>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2240      	movs	r2, #64	@ 0x40
 8005862:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e192      	b.n	8005b96 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fd05 	bl	8007288 <DMA_CalcBaseAndBitshift>
 800587e:	4603      	mov	r3, r0
 8005880:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005886:	f003 031f 	and.w	r3, r3, #31
 800588a:	223f      	movs	r2, #63	@ 0x3f
 800588c:	409a      	lsls	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	609a      	str	r2, [r3, #8]
 8005892:	e0c8      	b.n	8005a26 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a38      	ldr	r2, [pc, #224]	@ (800597c <HAL_DMA_Init+0x424>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d022      	beq.n	80058e4 <HAL_DMA_Init+0x38c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a37      	ldr	r2, [pc, #220]	@ (8005980 <HAL_DMA_Init+0x428>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d01d      	beq.n	80058e4 <HAL_DMA_Init+0x38c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a35      	ldr	r2, [pc, #212]	@ (8005984 <HAL_DMA_Init+0x42c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d018      	beq.n	80058e4 <HAL_DMA_Init+0x38c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a34      	ldr	r2, [pc, #208]	@ (8005988 <HAL_DMA_Init+0x430>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d013      	beq.n	80058e4 <HAL_DMA_Init+0x38c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a32      	ldr	r2, [pc, #200]	@ (800598c <HAL_DMA_Init+0x434>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00e      	beq.n	80058e4 <HAL_DMA_Init+0x38c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a31      	ldr	r2, [pc, #196]	@ (8005990 <HAL_DMA_Init+0x438>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d009      	beq.n	80058e4 <HAL_DMA_Init+0x38c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005994 <HAL_DMA_Init+0x43c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d004      	beq.n	80058e4 <HAL_DMA_Init+0x38c>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a2e      	ldr	r2, [pc, #184]	@ (8005998 <HAL_DMA_Init+0x440>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d101      	bne.n	80058e8 <HAL_DMA_Init+0x390>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <HAL_DMA_Init+0x392>
 80058e8:	2300      	movs	r3, #0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8092 	beq.w	8005a14 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a21      	ldr	r2, [pc, #132]	@ (800597c <HAL_DMA_Init+0x424>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d021      	beq.n	800593e <HAL_DMA_Init+0x3e6>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a20      	ldr	r2, [pc, #128]	@ (8005980 <HAL_DMA_Init+0x428>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d01c      	beq.n	800593e <HAL_DMA_Init+0x3e6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1e      	ldr	r2, [pc, #120]	@ (8005984 <HAL_DMA_Init+0x42c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d017      	beq.n	800593e <HAL_DMA_Init+0x3e6>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1d      	ldr	r2, [pc, #116]	@ (8005988 <HAL_DMA_Init+0x430>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d012      	beq.n	800593e <HAL_DMA_Init+0x3e6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1b      	ldr	r2, [pc, #108]	@ (800598c <HAL_DMA_Init+0x434>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00d      	beq.n	800593e <HAL_DMA_Init+0x3e6>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1a      	ldr	r2, [pc, #104]	@ (8005990 <HAL_DMA_Init+0x438>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d008      	beq.n	800593e <HAL_DMA_Init+0x3e6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a18      	ldr	r2, [pc, #96]	@ (8005994 <HAL_DMA_Init+0x43c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <HAL_DMA_Init+0x3e6>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a17      	ldr	r2, [pc, #92]	@ (8005998 <HAL_DMA_Init+0x440>)
 800593c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4b10      	ldr	r3, [pc, #64]	@ (800599c <HAL_DMA_Init+0x444>)
 800595a:	4013      	ands	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b40      	cmp	r3, #64	@ 0x40
 8005964:	d01c      	beq.n	80059a0 <HAL_DMA_Init+0x448>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b80      	cmp	r3, #128	@ 0x80
 800596c:	d102      	bne.n	8005974 <HAL_DMA_Init+0x41c>
 800596e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005972:	e016      	b.n	80059a2 <HAL_DMA_Init+0x44a>
 8005974:	2300      	movs	r3, #0
 8005976:	e014      	b.n	80059a2 <HAL_DMA_Init+0x44a>
 8005978:	fe10803f 	.word	0xfe10803f
 800597c:	58025408 	.word	0x58025408
 8005980:	5802541c 	.word	0x5802541c
 8005984:	58025430 	.word	0x58025430
 8005988:	58025444 	.word	0x58025444
 800598c:	58025458 	.word	0x58025458
 8005990:	5802546c 	.word	0x5802546c
 8005994:	58025480 	.word	0x58025480
 8005998:	58025494 	.word	0x58025494
 800599c:	fffe000f 	.word	0xfffe000f
 80059a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	68d2      	ldr	r2, [r2, #12]
 80059a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80059b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80059b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80059c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b6e      	ldr	r3, [pc, #440]	@ (8005ba0 <HAL_DMA_Init+0x648>)
 80059e8:	4413      	add	r3, r2
 80059ea:	4a6e      	ldr	r2, [pc, #440]	@ (8005ba4 <HAL_DMA_Init+0x64c>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	009a      	lsls	r2, r3, #2
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fc45 	bl	8007288 <DMA_CalcBaseAndBitshift>
 80059fe:	4603      	mov	r3, r0
 8005a00:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	409a      	lsls	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	e008      	b.n	8005a26 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2240      	movs	r2, #64	@ 0x40
 8005a18:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0b7      	b.n	8005b96 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a5f      	ldr	r2, [pc, #380]	@ (8005ba8 <HAL_DMA_Init+0x650>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d072      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a5d      	ldr	r2, [pc, #372]	@ (8005bac <HAL_DMA_Init+0x654>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d06d      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8005bb0 <HAL_DMA_Init+0x658>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d068      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a5a      	ldr	r2, [pc, #360]	@ (8005bb4 <HAL_DMA_Init+0x65c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d063      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a59      	ldr	r2, [pc, #356]	@ (8005bb8 <HAL_DMA_Init+0x660>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d05e      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a57      	ldr	r2, [pc, #348]	@ (8005bbc <HAL_DMA_Init+0x664>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d059      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a56      	ldr	r2, [pc, #344]	@ (8005bc0 <HAL_DMA_Init+0x668>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d054      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a54      	ldr	r2, [pc, #336]	@ (8005bc4 <HAL_DMA_Init+0x66c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d04f      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a53      	ldr	r2, [pc, #332]	@ (8005bc8 <HAL_DMA_Init+0x670>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d04a      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a51      	ldr	r2, [pc, #324]	@ (8005bcc <HAL_DMA_Init+0x674>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d045      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a50      	ldr	r2, [pc, #320]	@ (8005bd0 <HAL_DMA_Init+0x678>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d040      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a4e      	ldr	r2, [pc, #312]	@ (8005bd4 <HAL_DMA_Init+0x67c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d03b      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8005bd8 <HAL_DMA_Init+0x680>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d036      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a4b      	ldr	r2, [pc, #300]	@ (8005bdc <HAL_DMA_Init+0x684>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d031      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a4a      	ldr	r2, [pc, #296]	@ (8005be0 <HAL_DMA_Init+0x688>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d02c      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a48      	ldr	r2, [pc, #288]	@ (8005be4 <HAL_DMA_Init+0x68c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d027      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a47      	ldr	r2, [pc, #284]	@ (8005be8 <HAL_DMA_Init+0x690>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d022      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a45      	ldr	r2, [pc, #276]	@ (8005bec <HAL_DMA_Init+0x694>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d01d      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a44      	ldr	r2, [pc, #272]	@ (8005bf0 <HAL_DMA_Init+0x698>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d018      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a42      	ldr	r2, [pc, #264]	@ (8005bf4 <HAL_DMA_Init+0x69c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a41      	ldr	r2, [pc, #260]	@ (8005bf8 <HAL_DMA_Init+0x6a0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00e      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a3f      	ldr	r2, [pc, #252]	@ (8005bfc <HAL_DMA_Init+0x6a4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d009      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a3e      	ldr	r2, [pc, #248]	@ (8005c00 <HAL_DMA_Init+0x6a8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d004      	beq.n	8005b16 <HAL_DMA_Init+0x5be>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a3c      	ldr	r2, [pc, #240]	@ (8005c04 <HAL_DMA_Init+0x6ac>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d101      	bne.n	8005b1a <HAL_DMA_Init+0x5c2>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <HAL_DMA_Init+0x5c4>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d032      	beq.n	8005b86 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 fcdf 	bl	80074e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b80      	cmp	r3, #128	@ 0x80
 8005b2c:	d102      	bne.n	8005b34 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b48:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d010      	beq.n	8005b74 <HAL_DMA_Init+0x61c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d80c      	bhi.n	8005b74 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 fd5c 	bl	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	e008      	b.n	8005b86 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	a7fdabf8 	.word	0xa7fdabf8
 8005ba4:	cccccccd 	.word	0xcccccccd
 8005ba8:	40020010 	.word	0x40020010
 8005bac:	40020028 	.word	0x40020028
 8005bb0:	40020040 	.word	0x40020040
 8005bb4:	40020058 	.word	0x40020058
 8005bb8:	40020070 	.word	0x40020070
 8005bbc:	40020088 	.word	0x40020088
 8005bc0:	400200a0 	.word	0x400200a0
 8005bc4:	400200b8 	.word	0x400200b8
 8005bc8:	40020410 	.word	0x40020410
 8005bcc:	40020428 	.word	0x40020428
 8005bd0:	40020440 	.word	0x40020440
 8005bd4:	40020458 	.word	0x40020458
 8005bd8:	40020470 	.word	0x40020470
 8005bdc:	40020488 	.word	0x40020488
 8005be0:	400204a0 	.word	0x400204a0
 8005be4:	400204b8 	.word	0x400204b8
 8005be8:	58025408 	.word	0x58025408
 8005bec:	5802541c 	.word	0x5802541c
 8005bf0:	58025430 	.word	0x58025430
 8005bf4:	58025444 	.word	0x58025444
 8005bf8:	58025458 	.word	0x58025458
 8005bfc:	5802546c 	.word	0x5802546c
 8005c00:	58025480 	.word	0x58025480
 8005c04:	58025494 	.word	0x58025494

08005c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e226      	b.n	8006072 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_DMA_Start_IT+0x2a>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e21f      	b.n	8006072 <HAL_DMA_Start_IT+0x46a>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	f040 820a 	bne.w	800605c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a68      	ldr	r2, [pc, #416]	@ (8005dfc <HAL_DMA_Start_IT+0x1f4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d04a      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a66      	ldr	r2, [pc, #408]	@ (8005e00 <HAL_DMA_Start_IT+0x1f8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d045      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a65      	ldr	r2, [pc, #404]	@ (8005e04 <HAL_DMA_Start_IT+0x1fc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d040      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a63      	ldr	r2, [pc, #396]	@ (8005e08 <HAL_DMA_Start_IT+0x200>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d03b      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a62      	ldr	r2, [pc, #392]	@ (8005e0c <HAL_DMA_Start_IT+0x204>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d036      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a60      	ldr	r2, [pc, #384]	@ (8005e10 <HAL_DMA_Start_IT+0x208>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d031      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a5f      	ldr	r2, [pc, #380]	@ (8005e14 <HAL_DMA_Start_IT+0x20c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d02c      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8005e18 <HAL_DMA_Start_IT+0x210>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d027      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a5c      	ldr	r2, [pc, #368]	@ (8005e1c <HAL_DMA_Start_IT+0x214>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d022      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8005e20 <HAL_DMA_Start_IT+0x218>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01d      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a59      	ldr	r2, [pc, #356]	@ (8005e24 <HAL_DMA_Start_IT+0x21c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d018      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a57      	ldr	r2, [pc, #348]	@ (8005e28 <HAL_DMA_Start_IT+0x220>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a56      	ldr	r2, [pc, #344]	@ (8005e2c <HAL_DMA_Start_IT+0x224>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00e      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a54      	ldr	r2, [pc, #336]	@ (8005e30 <HAL_DMA_Start_IT+0x228>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d009      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a53      	ldr	r2, [pc, #332]	@ (8005e34 <HAL_DMA_Start_IT+0x22c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_DMA_Start_IT+0xee>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a51      	ldr	r2, [pc, #324]	@ (8005e38 <HAL_DMA_Start_IT+0x230>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d108      	bne.n	8005d08 <HAL_DMA_Start_IT+0x100>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e007      	b.n	8005d18 <HAL_DMA_Start_IT+0x110>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f001 f906 	bl	8006f30 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a34      	ldr	r2, [pc, #208]	@ (8005dfc <HAL_DMA_Start_IT+0x1f4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d04a      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a33      	ldr	r2, [pc, #204]	@ (8005e00 <HAL_DMA_Start_IT+0x1f8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d045      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a31      	ldr	r2, [pc, #196]	@ (8005e04 <HAL_DMA_Start_IT+0x1fc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d040      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a30      	ldr	r2, [pc, #192]	@ (8005e08 <HAL_DMA_Start_IT+0x200>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d03b      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2e      	ldr	r2, [pc, #184]	@ (8005e0c <HAL_DMA_Start_IT+0x204>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d036      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005e10 <HAL_DMA_Start_IT+0x208>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d031      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a2b      	ldr	r2, [pc, #172]	@ (8005e14 <HAL_DMA_Start_IT+0x20c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d02c      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005e18 <HAL_DMA_Start_IT+0x210>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d027      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a28      	ldr	r2, [pc, #160]	@ (8005e1c <HAL_DMA_Start_IT+0x214>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d022      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a27      	ldr	r2, [pc, #156]	@ (8005e20 <HAL_DMA_Start_IT+0x218>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d01d      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a25      	ldr	r2, [pc, #148]	@ (8005e24 <HAL_DMA_Start_IT+0x21c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d018      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a24      	ldr	r2, [pc, #144]	@ (8005e28 <HAL_DMA_Start_IT+0x220>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a22      	ldr	r2, [pc, #136]	@ (8005e2c <HAL_DMA_Start_IT+0x224>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00e      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a21      	ldr	r2, [pc, #132]	@ (8005e30 <HAL_DMA_Start_IT+0x228>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e34 <HAL_DMA_Start_IT+0x22c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x1bc>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8005e38 <HAL_DMA_Start_IT+0x230>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d101      	bne.n	8005dc8 <HAL_DMA_Start_IT+0x1c0>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <HAL_DMA_Start_IT+0x1c2>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d036      	beq.n	8005e3c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f023 021e 	bic.w	r2, r3, #30
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0216 	orr.w	r2, r2, #22
 8005de0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d03e      	beq.n	8005e68 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0208 	orr.w	r2, r2, #8
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e035      	b.n	8005e68 <HAL_DMA_Start_IT+0x260>
 8005dfc:	40020010 	.word	0x40020010
 8005e00:	40020028 	.word	0x40020028
 8005e04:	40020040 	.word	0x40020040
 8005e08:	40020058 	.word	0x40020058
 8005e0c:	40020070 	.word	0x40020070
 8005e10:	40020088 	.word	0x40020088
 8005e14:	400200a0 	.word	0x400200a0
 8005e18:	400200b8 	.word	0x400200b8
 8005e1c:	40020410 	.word	0x40020410
 8005e20:	40020428 	.word	0x40020428
 8005e24:	40020440 	.word	0x40020440
 8005e28:	40020458 	.word	0x40020458
 8005e2c:	40020470 	.word	0x40020470
 8005e30:	40020488 	.word	0x40020488
 8005e34:	400204a0 	.word	0x400204a0
 8005e38:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f023 020e 	bic.w	r2, r3, #14
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 020a 	orr.w	r2, r2, #10
 8005e4e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0204 	orr.w	r2, r2, #4
 8005e66:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a83      	ldr	r2, [pc, #524]	@ (800607c <HAL_DMA_Start_IT+0x474>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d072      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a82      	ldr	r2, [pc, #520]	@ (8006080 <HAL_DMA_Start_IT+0x478>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d06d      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a80      	ldr	r2, [pc, #512]	@ (8006084 <HAL_DMA_Start_IT+0x47c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d068      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a7f      	ldr	r2, [pc, #508]	@ (8006088 <HAL_DMA_Start_IT+0x480>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d063      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a7d      	ldr	r2, [pc, #500]	@ (800608c <HAL_DMA_Start_IT+0x484>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d05e      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8006090 <HAL_DMA_Start_IT+0x488>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d059      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a7a      	ldr	r2, [pc, #488]	@ (8006094 <HAL_DMA_Start_IT+0x48c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d054      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a79      	ldr	r2, [pc, #484]	@ (8006098 <HAL_DMA_Start_IT+0x490>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d04f      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a77      	ldr	r2, [pc, #476]	@ (800609c <HAL_DMA_Start_IT+0x494>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d04a      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a76      	ldr	r2, [pc, #472]	@ (80060a0 <HAL_DMA_Start_IT+0x498>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d045      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a74      	ldr	r2, [pc, #464]	@ (80060a4 <HAL_DMA_Start_IT+0x49c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d040      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a73      	ldr	r2, [pc, #460]	@ (80060a8 <HAL_DMA_Start_IT+0x4a0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d03b      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a71      	ldr	r2, [pc, #452]	@ (80060ac <HAL_DMA_Start_IT+0x4a4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d036      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a70      	ldr	r2, [pc, #448]	@ (80060b0 <HAL_DMA_Start_IT+0x4a8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d031      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a6e      	ldr	r2, [pc, #440]	@ (80060b4 <HAL_DMA_Start_IT+0x4ac>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d02c      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a6d      	ldr	r2, [pc, #436]	@ (80060b8 <HAL_DMA_Start_IT+0x4b0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d027      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a6b      	ldr	r2, [pc, #428]	@ (80060bc <HAL_DMA_Start_IT+0x4b4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d022      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a6a      	ldr	r2, [pc, #424]	@ (80060c0 <HAL_DMA_Start_IT+0x4b8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d01d      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a68      	ldr	r2, [pc, #416]	@ (80060c4 <HAL_DMA_Start_IT+0x4bc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d018      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a67      	ldr	r2, [pc, #412]	@ (80060c8 <HAL_DMA_Start_IT+0x4c0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a65      	ldr	r2, [pc, #404]	@ (80060cc <HAL_DMA_Start_IT+0x4c4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00e      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a64      	ldr	r2, [pc, #400]	@ (80060d0 <HAL_DMA_Start_IT+0x4c8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d009      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a62      	ldr	r2, [pc, #392]	@ (80060d4 <HAL_DMA_Start_IT+0x4cc>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_DMA_Start_IT+0x350>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a61      	ldr	r2, [pc, #388]	@ (80060d8 <HAL_DMA_Start_IT+0x4d0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d101      	bne.n	8005f5c <HAL_DMA_Start_IT+0x354>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <HAL_DMA_Start_IT+0x356>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01a      	beq.n	8005f98 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f7e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f96:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a37      	ldr	r2, [pc, #220]	@ (800607c <HAL_DMA_Start_IT+0x474>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d04a      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a36      	ldr	r2, [pc, #216]	@ (8006080 <HAL_DMA_Start_IT+0x478>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d045      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a34      	ldr	r2, [pc, #208]	@ (8006084 <HAL_DMA_Start_IT+0x47c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d040      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a33      	ldr	r2, [pc, #204]	@ (8006088 <HAL_DMA_Start_IT+0x480>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d03b      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a31      	ldr	r2, [pc, #196]	@ (800608c <HAL_DMA_Start_IT+0x484>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d036      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a30      	ldr	r2, [pc, #192]	@ (8006090 <HAL_DMA_Start_IT+0x488>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d031      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8006094 <HAL_DMA_Start_IT+0x48c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d02c      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8006098 <HAL_DMA_Start_IT+0x490>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d027      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2b      	ldr	r2, [pc, #172]	@ (800609c <HAL_DMA_Start_IT+0x494>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d022      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80060a0 <HAL_DMA_Start_IT+0x498>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d01d      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a28      	ldr	r2, [pc, #160]	@ (80060a4 <HAL_DMA_Start_IT+0x49c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d018      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a27      	ldr	r2, [pc, #156]	@ (80060a8 <HAL_DMA_Start_IT+0x4a0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a25      	ldr	r2, [pc, #148]	@ (80060ac <HAL_DMA_Start_IT+0x4a4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00e      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a24      	ldr	r2, [pc, #144]	@ (80060b0 <HAL_DMA_Start_IT+0x4a8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d009      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a22      	ldr	r2, [pc, #136]	@ (80060b4 <HAL_DMA_Start_IT+0x4ac>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_DMA_Start_IT+0x430>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a21      	ldr	r2, [pc, #132]	@ (80060b8 <HAL_DMA_Start_IT+0x4b0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d108      	bne.n	800604a <HAL_DMA_Start_IT+0x442>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	e012      	b.n	8006070 <HAL_DMA_Start_IT+0x468>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0201 	orr.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	e009      	b.n	8006070 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006062:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40020010 	.word	0x40020010
 8006080:	40020028 	.word	0x40020028
 8006084:	40020040 	.word	0x40020040
 8006088:	40020058 	.word	0x40020058
 800608c:	40020070 	.word	0x40020070
 8006090:	40020088 	.word	0x40020088
 8006094:	400200a0 	.word	0x400200a0
 8006098:	400200b8 	.word	0x400200b8
 800609c:	40020410 	.word	0x40020410
 80060a0:	40020428 	.word	0x40020428
 80060a4:	40020440 	.word	0x40020440
 80060a8:	40020458 	.word	0x40020458
 80060ac:	40020470 	.word	0x40020470
 80060b0:	40020488 	.word	0x40020488
 80060b4:	400204a0 	.word	0x400204a0
 80060b8:	400204b8 	.word	0x400204b8
 80060bc:	58025408 	.word	0x58025408
 80060c0:	5802541c 	.word	0x5802541c
 80060c4:	58025430 	.word	0x58025430
 80060c8:	58025444 	.word	0x58025444
 80060cc:	58025458 	.word	0x58025458
 80060d0:	5802546c 	.word	0x5802546c
 80060d4:	58025480 	.word	0x58025480
 80060d8:	58025494 	.word	0x58025494

080060dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	@ 0x28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060e8:	4b67      	ldr	r3, [pc, #412]	@ (8006288 <HAL_DMA_IRQHandler+0x1ac>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a67      	ldr	r2, [pc, #412]	@ (800628c <HAL_DMA_IRQHandler+0x1b0>)
 80060ee:	fba2 2303 	umull	r2, r3, r2, r3
 80060f2:	0a9b      	lsrs	r3, r3, #10
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006100:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5f      	ldr	r2, [pc, #380]	@ (8006290 <HAL_DMA_IRQHandler+0x1b4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d04a      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5d      	ldr	r2, [pc, #372]	@ (8006294 <HAL_DMA_IRQHandler+0x1b8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d045      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a5c      	ldr	r2, [pc, #368]	@ (8006298 <HAL_DMA_IRQHandler+0x1bc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d040      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a5a      	ldr	r2, [pc, #360]	@ (800629c <HAL_DMA_IRQHandler+0x1c0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d03b      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a59      	ldr	r2, [pc, #356]	@ (80062a0 <HAL_DMA_IRQHandler+0x1c4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d036      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a57      	ldr	r2, [pc, #348]	@ (80062a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d031      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a56      	ldr	r2, [pc, #344]	@ (80062a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d02c      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a54      	ldr	r2, [pc, #336]	@ (80062ac <HAL_DMA_IRQHandler+0x1d0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d027      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a53      	ldr	r2, [pc, #332]	@ (80062b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a51      	ldr	r2, [pc, #324]	@ (80062b4 <HAL_DMA_IRQHandler+0x1d8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a50      	ldr	r2, [pc, #320]	@ (80062b8 <HAL_DMA_IRQHandler+0x1dc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a4e      	ldr	r2, [pc, #312]	@ (80062bc <HAL_DMA_IRQHandler+0x1e0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a4d      	ldr	r2, [pc, #308]	@ (80062c0 <HAL_DMA_IRQHandler+0x1e4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a4b      	ldr	r2, [pc, #300]	@ (80062c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a4a      	ldr	r2, [pc, #296]	@ (80062c8 <HAL_DMA_IRQHandler+0x1ec>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_DMA_IRQHandler+0xd2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a48      	ldr	r2, [pc, #288]	@ (80062cc <HAL_DMA_IRQHandler+0x1f0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d101      	bne.n	80061b2 <HAL_DMA_IRQHandler+0xd6>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <HAL_DMA_IRQHandler+0xd8>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 842b 	beq.w	8006a10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2208      	movs	r2, #8
 80061c4:	409a      	lsls	r2, r3
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80a2 	beq.w	8006314 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006290 <HAL_DMA_IRQHandler+0x1b4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d04a      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a2d      	ldr	r2, [pc, #180]	@ (8006294 <HAL_DMA_IRQHandler+0x1b8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d045      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006298 <HAL_DMA_IRQHandler+0x1bc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d040      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a2a      	ldr	r2, [pc, #168]	@ (800629c <HAL_DMA_IRQHandler+0x1c0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d03b      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a28      	ldr	r2, [pc, #160]	@ (80062a0 <HAL_DMA_IRQHandler+0x1c4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d036      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a27      	ldr	r2, [pc, #156]	@ (80062a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d031      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a25      	ldr	r2, [pc, #148]	@ (80062a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d02c      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a24      	ldr	r2, [pc, #144]	@ (80062ac <HAL_DMA_IRQHandler+0x1d0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d027      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a22      	ldr	r2, [pc, #136]	@ (80062b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d022      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a21      	ldr	r2, [pc, #132]	@ (80062b4 <HAL_DMA_IRQHandler+0x1d8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d01d      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1f      	ldr	r2, [pc, #124]	@ (80062b8 <HAL_DMA_IRQHandler+0x1dc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d018      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1e      	ldr	r2, [pc, #120]	@ (80062bc <HAL_DMA_IRQHandler+0x1e0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1c      	ldr	r2, [pc, #112]	@ (80062c0 <HAL_DMA_IRQHandler+0x1e4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00e      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1b      	ldr	r2, [pc, #108]	@ (80062c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d009      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a19      	ldr	r2, [pc, #100]	@ (80062c8 <HAL_DMA_IRQHandler+0x1ec>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_DMA_IRQHandler+0x194>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a18      	ldr	r2, [pc, #96]	@ (80062cc <HAL_DMA_IRQHandler+0x1f0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d12f      	bne.n	80062d0 <HAL_DMA_IRQHandler+0x1f4>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	bf14      	ite	ne
 800627e:	2301      	movne	r3, #1
 8006280:	2300      	moveq	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	e02e      	b.n	80062e4 <HAL_DMA_IRQHandler+0x208>
 8006286:	bf00      	nop
 8006288:	2400000c 	.word	0x2400000c
 800628c:	1b4e81b5 	.word	0x1b4e81b5
 8006290:	40020010 	.word	0x40020010
 8006294:	40020028 	.word	0x40020028
 8006298:	40020040 	.word	0x40020040
 800629c:	40020058 	.word	0x40020058
 80062a0:	40020070 	.word	0x40020070
 80062a4:	40020088 	.word	0x40020088
 80062a8:	400200a0 	.word	0x400200a0
 80062ac:	400200b8 	.word	0x400200b8
 80062b0:	40020410 	.word	0x40020410
 80062b4:	40020428 	.word	0x40020428
 80062b8:	40020440 	.word	0x40020440
 80062bc:	40020458 	.word	0x40020458
 80062c0:	40020470 	.word	0x40020470
 80062c4:	40020488 	.word	0x40020488
 80062c8:	400204a0 	.word	0x400204a0
 80062cc:	400204b8 	.word	0x400204b8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf14      	ite	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	2300      	moveq	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d015      	beq.n	8006314 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	2208      	movs	r2, #8
 8006302:	409a      	lsls	r2, r3
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630c:	f043 0201 	orr.w	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	fa22 f303 	lsr.w	r3, r2, r3
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d06e      	beq.n	8006408 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a69      	ldr	r2, [pc, #420]	@ (80064d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d04a      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a67      	ldr	r2, [pc, #412]	@ (80064d8 <HAL_DMA_IRQHandler+0x3fc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d045      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a66      	ldr	r2, [pc, #408]	@ (80064dc <HAL_DMA_IRQHandler+0x400>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d040      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a64      	ldr	r2, [pc, #400]	@ (80064e0 <HAL_DMA_IRQHandler+0x404>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d03b      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a63      	ldr	r2, [pc, #396]	@ (80064e4 <HAL_DMA_IRQHandler+0x408>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d036      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a61      	ldr	r2, [pc, #388]	@ (80064e8 <HAL_DMA_IRQHandler+0x40c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d031      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a60      	ldr	r2, [pc, #384]	@ (80064ec <HAL_DMA_IRQHandler+0x410>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d02c      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a5e      	ldr	r2, [pc, #376]	@ (80064f0 <HAL_DMA_IRQHandler+0x414>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d027      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a5d      	ldr	r2, [pc, #372]	@ (80064f4 <HAL_DMA_IRQHandler+0x418>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d022      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a5b      	ldr	r2, [pc, #364]	@ (80064f8 <HAL_DMA_IRQHandler+0x41c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d01d      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a5a      	ldr	r2, [pc, #360]	@ (80064fc <HAL_DMA_IRQHandler+0x420>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d018      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a58      	ldr	r2, [pc, #352]	@ (8006500 <HAL_DMA_IRQHandler+0x424>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a57      	ldr	r2, [pc, #348]	@ (8006504 <HAL_DMA_IRQHandler+0x428>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00e      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a55      	ldr	r2, [pc, #340]	@ (8006508 <HAL_DMA_IRQHandler+0x42c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d009      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a54      	ldr	r2, [pc, #336]	@ (800650c <HAL_DMA_IRQHandler+0x430>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d004      	beq.n	80063ca <HAL_DMA_IRQHandler+0x2ee>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a52      	ldr	r2, [pc, #328]	@ (8006510 <HAL_DMA_IRQHandler+0x434>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d10a      	bne.n	80063e0 <HAL_DMA_IRQHandler+0x304>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	e003      	b.n	80063e8 <HAL_DMA_IRQHandler+0x30c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00d      	beq.n	8006408 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	2201      	movs	r2, #1
 80063f6:	409a      	lsls	r2, r3
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006400:	f043 0202 	orr.w	r2, r3, #2
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2204      	movs	r2, #4
 8006412:	409a      	lsls	r2, r3
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	4013      	ands	r3, r2
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 808f 	beq.w	800653c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a2c      	ldr	r2, [pc, #176]	@ (80064d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d04a      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2a      	ldr	r2, [pc, #168]	@ (80064d8 <HAL_DMA_IRQHandler+0x3fc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d045      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a29      	ldr	r2, [pc, #164]	@ (80064dc <HAL_DMA_IRQHandler+0x400>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d040      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a27      	ldr	r2, [pc, #156]	@ (80064e0 <HAL_DMA_IRQHandler+0x404>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d03b      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a26      	ldr	r2, [pc, #152]	@ (80064e4 <HAL_DMA_IRQHandler+0x408>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d036      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a24      	ldr	r2, [pc, #144]	@ (80064e8 <HAL_DMA_IRQHandler+0x40c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d031      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a23      	ldr	r2, [pc, #140]	@ (80064ec <HAL_DMA_IRQHandler+0x410>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d02c      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a21      	ldr	r2, [pc, #132]	@ (80064f0 <HAL_DMA_IRQHandler+0x414>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d027      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a20      	ldr	r2, [pc, #128]	@ (80064f4 <HAL_DMA_IRQHandler+0x418>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d022      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1e      	ldr	r2, [pc, #120]	@ (80064f8 <HAL_DMA_IRQHandler+0x41c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d01d      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1d      	ldr	r2, [pc, #116]	@ (80064fc <HAL_DMA_IRQHandler+0x420>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d018      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1b      	ldr	r2, [pc, #108]	@ (8006500 <HAL_DMA_IRQHandler+0x424>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1a      	ldr	r2, [pc, #104]	@ (8006504 <HAL_DMA_IRQHandler+0x428>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a18      	ldr	r2, [pc, #96]	@ (8006508 <HAL_DMA_IRQHandler+0x42c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a17      	ldr	r2, [pc, #92]	@ (800650c <HAL_DMA_IRQHandler+0x430>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_DMA_IRQHandler+0x3e2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a15      	ldr	r2, [pc, #84]	@ (8006510 <HAL_DMA_IRQHandler+0x434>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d12a      	bne.n	8006514 <HAL_DMA_IRQHandler+0x438>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf14      	ite	ne
 80064cc:	2301      	movne	r3, #1
 80064ce:	2300      	moveq	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	e023      	b.n	800651c <HAL_DMA_IRQHandler+0x440>
 80064d4:	40020010 	.word	0x40020010
 80064d8:	40020028 	.word	0x40020028
 80064dc:	40020040 	.word	0x40020040
 80064e0:	40020058 	.word	0x40020058
 80064e4:	40020070 	.word	0x40020070
 80064e8:	40020088 	.word	0x40020088
 80064ec:	400200a0 	.word	0x400200a0
 80064f0:	400200b8 	.word	0x400200b8
 80064f4:	40020410 	.word	0x40020410
 80064f8:	40020428 	.word	0x40020428
 80064fc:	40020440 	.word	0x40020440
 8006500:	40020458 	.word	0x40020458
 8006504:	40020470 	.word	0x40020470
 8006508:	40020488 	.word	0x40020488
 800650c:	400204a0 	.word	0x400204a0
 8006510:	400204b8 	.word	0x400204b8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2204      	movs	r2, #4
 800652a:	409a      	lsls	r2, r3
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006534:	f043 0204 	orr.w	r2, r3, #4
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	2210      	movs	r2, #16
 8006546:	409a      	lsls	r2, r3
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80a6 	beq.w	800669e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a85      	ldr	r2, [pc, #532]	@ (800676c <HAL_DMA_IRQHandler+0x690>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d04a      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a83      	ldr	r2, [pc, #524]	@ (8006770 <HAL_DMA_IRQHandler+0x694>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d045      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a82      	ldr	r2, [pc, #520]	@ (8006774 <HAL_DMA_IRQHandler+0x698>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d040      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a80      	ldr	r2, [pc, #512]	@ (8006778 <HAL_DMA_IRQHandler+0x69c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d03b      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a7f      	ldr	r2, [pc, #508]	@ (800677c <HAL_DMA_IRQHandler+0x6a0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d036      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a7d      	ldr	r2, [pc, #500]	@ (8006780 <HAL_DMA_IRQHandler+0x6a4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d031      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a7c      	ldr	r2, [pc, #496]	@ (8006784 <HAL_DMA_IRQHandler+0x6a8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d02c      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a7a      	ldr	r2, [pc, #488]	@ (8006788 <HAL_DMA_IRQHandler+0x6ac>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d027      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a79      	ldr	r2, [pc, #484]	@ (800678c <HAL_DMA_IRQHandler+0x6b0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d022      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a77      	ldr	r2, [pc, #476]	@ (8006790 <HAL_DMA_IRQHandler+0x6b4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01d      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a76      	ldr	r2, [pc, #472]	@ (8006794 <HAL_DMA_IRQHandler+0x6b8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d018      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a74      	ldr	r2, [pc, #464]	@ (8006798 <HAL_DMA_IRQHandler+0x6bc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a73      	ldr	r2, [pc, #460]	@ (800679c <HAL_DMA_IRQHandler+0x6c0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a71      	ldr	r2, [pc, #452]	@ (80067a0 <HAL_DMA_IRQHandler+0x6c4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a70      	ldr	r2, [pc, #448]	@ (80067a4 <HAL_DMA_IRQHandler+0x6c8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x516>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a6e      	ldr	r2, [pc, #440]	@ (80067a8 <HAL_DMA_IRQHandler+0x6cc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d10a      	bne.n	8006608 <HAL_DMA_IRQHandler+0x52c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	e009      	b.n	800661c <HAL_DMA_IRQHandler+0x540>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	bf14      	ite	ne
 8006616:	2301      	movne	r3, #1
 8006618:	2300      	moveq	r3, #0
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d03e      	beq.n	800669e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2210      	movs	r2, #16
 800662a:	409a      	lsls	r2, r3
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d018      	beq.n	8006670 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d108      	bne.n	800665e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d024      	beq.n	800669e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	4798      	blx	r3
 800665c:	e01f      	b.n	800669e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01b      	beq.n	800669e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
 800666e:	e016      	b.n	800669e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d107      	bne.n	800668e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0208 	bic.w	r2, r2, #8
 800668c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2220      	movs	r2, #32
 80066a8:	409a      	lsls	r2, r3
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8110 	beq.w	80068d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2c      	ldr	r2, [pc, #176]	@ (800676c <HAL_DMA_IRQHandler+0x690>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d04a      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006770 <HAL_DMA_IRQHandler+0x694>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d045      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a29      	ldr	r2, [pc, #164]	@ (8006774 <HAL_DMA_IRQHandler+0x698>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d040      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a28      	ldr	r2, [pc, #160]	@ (8006778 <HAL_DMA_IRQHandler+0x69c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d03b      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a26      	ldr	r2, [pc, #152]	@ (800677c <HAL_DMA_IRQHandler+0x6a0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d036      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a25      	ldr	r2, [pc, #148]	@ (8006780 <HAL_DMA_IRQHandler+0x6a4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d031      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a23      	ldr	r2, [pc, #140]	@ (8006784 <HAL_DMA_IRQHandler+0x6a8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d02c      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a22      	ldr	r2, [pc, #136]	@ (8006788 <HAL_DMA_IRQHandler+0x6ac>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d027      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a20      	ldr	r2, [pc, #128]	@ (800678c <HAL_DMA_IRQHandler+0x6b0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d022      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1f      	ldr	r2, [pc, #124]	@ (8006790 <HAL_DMA_IRQHandler+0x6b4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d01d      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1d      	ldr	r2, [pc, #116]	@ (8006794 <HAL_DMA_IRQHandler+0x6b8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d018      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1c      	ldr	r2, [pc, #112]	@ (8006798 <HAL_DMA_IRQHandler+0x6bc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1a      	ldr	r2, [pc, #104]	@ (800679c <HAL_DMA_IRQHandler+0x6c0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a19      	ldr	r2, [pc, #100]	@ (80067a0 <HAL_DMA_IRQHandler+0x6c4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a17      	ldr	r2, [pc, #92]	@ (80067a4 <HAL_DMA_IRQHandler+0x6c8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_DMA_IRQHandler+0x678>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a16      	ldr	r2, [pc, #88]	@ (80067a8 <HAL_DMA_IRQHandler+0x6cc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d12b      	bne.n	80067ac <HAL_DMA_IRQHandler+0x6d0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b00      	cmp	r3, #0
 8006760:	bf14      	ite	ne
 8006762:	2301      	movne	r3, #1
 8006764:	2300      	moveq	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	e02a      	b.n	80067c0 <HAL_DMA_IRQHandler+0x6e4>
 800676a:	bf00      	nop
 800676c:	40020010 	.word	0x40020010
 8006770:	40020028 	.word	0x40020028
 8006774:	40020040 	.word	0x40020040
 8006778:	40020058 	.word	0x40020058
 800677c:	40020070 	.word	0x40020070
 8006780:	40020088 	.word	0x40020088
 8006784:	400200a0 	.word	0x400200a0
 8006788:	400200b8 	.word	0x400200b8
 800678c:	40020410 	.word	0x40020410
 8006790:	40020428 	.word	0x40020428
 8006794:	40020440 	.word	0x40020440
 8006798:	40020458 	.word	0x40020458
 800679c:	40020470 	.word	0x40020470
 80067a0:	40020488 	.word	0x40020488
 80067a4:	400204a0 	.word	0x400204a0
 80067a8:	400204b8 	.word	0x400204b8
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bf14      	ite	ne
 80067ba:	2301      	movne	r3, #1
 80067bc:	2300      	moveq	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8087 	beq.w	80068d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2220      	movs	r2, #32
 80067d0:	409a      	lsls	r2, r3
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d139      	bne.n	8006856 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0216 	bic.w	r2, r2, #22
 80067f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695a      	ldr	r2, [r3, #20]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006800:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d103      	bne.n	8006812 <HAL_DMA_IRQHandler+0x736>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0208 	bic.w	r2, r2, #8
 8006820:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	223f      	movs	r2, #63	@ 0x3f
 800682c:	409a      	lsls	r2, r3
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 834a 	beq.w	8006ee0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
          }
          return;
 8006854:	e344      	b.n	8006ee0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d018      	beq.n	8006896 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d108      	bne.n	8006884 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006876:	2b00      	cmp	r3, #0
 8006878:	d02c      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	4798      	blx	r3
 8006882:	e027      	b.n	80068d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d023      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	4798      	blx	r3
 8006894:	e01e      	b.n	80068d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10f      	bne.n	80068c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0210 	bic.w	r2, r2, #16
 80068b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8306 	beq.w	8006eea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 8088 	beq.w	80069fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2204      	movs	r2, #4
 80068f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a7a      	ldr	r2, [pc, #488]	@ (8006ae4 <HAL_DMA_IRQHandler+0xa08>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d04a      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a79      	ldr	r2, [pc, #484]	@ (8006ae8 <HAL_DMA_IRQHandler+0xa0c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d045      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a77      	ldr	r2, [pc, #476]	@ (8006aec <HAL_DMA_IRQHandler+0xa10>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d040      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a76      	ldr	r2, [pc, #472]	@ (8006af0 <HAL_DMA_IRQHandler+0xa14>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d03b      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a74      	ldr	r2, [pc, #464]	@ (8006af4 <HAL_DMA_IRQHandler+0xa18>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d036      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a73      	ldr	r2, [pc, #460]	@ (8006af8 <HAL_DMA_IRQHandler+0xa1c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d031      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a71      	ldr	r2, [pc, #452]	@ (8006afc <HAL_DMA_IRQHandler+0xa20>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d02c      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a70      	ldr	r2, [pc, #448]	@ (8006b00 <HAL_DMA_IRQHandler+0xa24>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d027      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a6e      	ldr	r2, [pc, #440]	@ (8006b04 <HAL_DMA_IRQHandler+0xa28>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d022      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a6d      	ldr	r2, [pc, #436]	@ (8006b08 <HAL_DMA_IRQHandler+0xa2c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d01d      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a6b      	ldr	r2, [pc, #428]	@ (8006b0c <HAL_DMA_IRQHandler+0xa30>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d018      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a6a      	ldr	r2, [pc, #424]	@ (8006b10 <HAL_DMA_IRQHandler+0xa34>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a68      	ldr	r2, [pc, #416]	@ (8006b14 <HAL_DMA_IRQHandler+0xa38>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00e      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a67      	ldr	r2, [pc, #412]	@ (8006b18 <HAL_DMA_IRQHandler+0xa3c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d009      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a65      	ldr	r2, [pc, #404]	@ (8006b1c <HAL_DMA_IRQHandler+0xa40>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <HAL_DMA_IRQHandler+0x8b8>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a64      	ldr	r2, [pc, #400]	@ (8006b20 <HAL_DMA_IRQHandler+0xa44>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d108      	bne.n	80069a6 <HAL_DMA_IRQHandler+0x8ca>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0201 	bic.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e007      	b.n	80069b6 <HAL_DMA_IRQHandler+0x8da>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0201 	bic.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069be:	429a      	cmp	r2, r3
 80069c0:	d307      	bcc.n	80069d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f2      	bne.n	80069b6 <HAL_DMA_IRQHandler+0x8da>
 80069d0:	e000      	b.n	80069d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80069d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2203      	movs	r2, #3
 80069e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80069ea:	e003      	b.n	80069f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8272 	beq.w	8006eea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
 8006a0e:	e26c      	b.n	8006eea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a43      	ldr	r2, [pc, #268]	@ (8006b24 <HAL_DMA_IRQHandler+0xa48>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d022      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x984>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a42      	ldr	r2, [pc, #264]	@ (8006b28 <HAL_DMA_IRQHandler+0xa4c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d01d      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x984>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a40      	ldr	r2, [pc, #256]	@ (8006b2c <HAL_DMA_IRQHandler+0xa50>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d018      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x984>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a3f      	ldr	r2, [pc, #252]	@ (8006b30 <HAL_DMA_IRQHandler+0xa54>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d013      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x984>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8006b34 <HAL_DMA_IRQHandler+0xa58>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00e      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x984>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a3c      	ldr	r2, [pc, #240]	@ (8006b38 <HAL_DMA_IRQHandler+0xa5c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d009      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x984>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a3a      	ldr	r2, [pc, #232]	@ (8006b3c <HAL_DMA_IRQHandler+0xa60>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x984>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a39      	ldr	r2, [pc, #228]	@ (8006b40 <HAL_DMA_IRQHandler+0xa64>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d101      	bne.n	8006a64 <HAL_DMA_IRQHandler+0x988>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <HAL_DMA_IRQHandler+0x98a>
 8006a64:	2300      	movs	r3, #0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 823f 	beq.w	8006eea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	2204      	movs	r2, #4
 8006a7e:	409a      	lsls	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	4013      	ands	r3, r2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 80cd 	beq.w	8006c24 <HAL_DMA_IRQHandler+0xb48>
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80c7 	beq.w	8006c24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	409a      	lsls	r2, r3
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d049      	beq.n	8006b44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8210 	beq.w	8006ee4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006acc:	e20a      	b.n	8006ee4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 8206 	beq.w	8006ee4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ae0:	e200      	b.n	8006ee4 <HAL_DMA_IRQHandler+0xe08>
 8006ae2:	bf00      	nop
 8006ae4:	40020010 	.word	0x40020010
 8006ae8:	40020028 	.word	0x40020028
 8006aec:	40020040 	.word	0x40020040
 8006af0:	40020058 	.word	0x40020058
 8006af4:	40020070 	.word	0x40020070
 8006af8:	40020088 	.word	0x40020088
 8006afc:	400200a0 	.word	0x400200a0
 8006b00:	400200b8 	.word	0x400200b8
 8006b04:	40020410 	.word	0x40020410
 8006b08:	40020428 	.word	0x40020428
 8006b0c:	40020440 	.word	0x40020440
 8006b10:	40020458 	.word	0x40020458
 8006b14:	40020470 	.word	0x40020470
 8006b18:	40020488 	.word	0x40020488
 8006b1c:	400204a0 	.word	0x400204a0
 8006b20:	400204b8 	.word	0x400204b8
 8006b24:	58025408 	.word	0x58025408
 8006b28:	5802541c 	.word	0x5802541c
 8006b2c:	58025430 	.word	0x58025430
 8006b30:	58025444 	.word	0x58025444
 8006b34:	58025458 	.word	0x58025458
 8006b38:	5802546c 	.word	0x5802546c
 8006b3c:	58025480 	.word	0x58025480
 8006b40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d160      	bne.n	8006c10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a7f      	ldr	r2, [pc, #508]	@ (8006d50 <HAL_DMA_IRQHandler+0xc74>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d04a      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a7d      	ldr	r2, [pc, #500]	@ (8006d54 <HAL_DMA_IRQHandler+0xc78>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d045      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a7c      	ldr	r2, [pc, #496]	@ (8006d58 <HAL_DMA_IRQHandler+0xc7c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d040      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a7a      	ldr	r2, [pc, #488]	@ (8006d5c <HAL_DMA_IRQHandler+0xc80>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d03b      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a79      	ldr	r2, [pc, #484]	@ (8006d60 <HAL_DMA_IRQHandler+0xc84>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d036      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a77      	ldr	r2, [pc, #476]	@ (8006d64 <HAL_DMA_IRQHandler+0xc88>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d031      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a76      	ldr	r2, [pc, #472]	@ (8006d68 <HAL_DMA_IRQHandler+0xc8c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d02c      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a74      	ldr	r2, [pc, #464]	@ (8006d6c <HAL_DMA_IRQHandler+0xc90>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d027      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a73      	ldr	r2, [pc, #460]	@ (8006d70 <HAL_DMA_IRQHandler+0xc94>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d022      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a71      	ldr	r2, [pc, #452]	@ (8006d74 <HAL_DMA_IRQHandler+0xc98>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01d      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a70      	ldr	r2, [pc, #448]	@ (8006d78 <HAL_DMA_IRQHandler+0xc9c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d018      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a6e      	ldr	r2, [pc, #440]	@ (8006d7c <HAL_DMA_IRQHandler+0xca0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a6d      	ldr	r2, [pc, #436]	@ (8006d80 <HAL_DMA_IRQHandler+0xca4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a6b      	ldr	r2, [pc, #428]	@ (8006d84 <HAL_DMA_IRQHandler+0xca8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d009      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a6a      	ldr	r2, [pc, #424]	@ (8006d88 <HAL_DMA_IRQHandler+0xcac>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_DMA_IRQHandler+0xb12>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a68      	ldr	r2, [pc, #416]	@ (8006d8c <HAL_DMA_IRQHandler+0xcb0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d108      	bne.n	8006c00 <HAL_DMA_IRQHandler+0xb24>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0208 	bic.w	r2, r2, #8
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e007      	b.n	8006c10 <HAL_DMA_IRQHandler+0xb34>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0204 	bic.w	r2, r2, #4
 8006c0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8165 	beq.w	8006ee4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c22:	e15f      	b.n	8006ee4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4013      	ands	r3, r2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80c5 	beq.w	8006dc4 <HAL_DMA_IRQHandler+0xce8>
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 80bf 	beq.w	8006dc4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2202      	movs	r2, #2
 8006c50:	409a      	lsls	r2, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d018      	beq.n	8006c92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 813a 	beq.w	8006ee8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c7c:	e134      	b.n	8006ee8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8130 	beq.w	8006ee8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c90:	e12a      	b.n	8006ee8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f040 8089 	bne.w	8006db0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8006d50 <HAL_DMA_IRQHandler+0xc74>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d04a      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a29      	ldr	r2, [pc, #164]	@ (8006d54 <HAL_DMA_IRQHandler+0xc78>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d045      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a28      	ldr	r2, [pc, #160]	@ (8006d58 <HAL_DMA_IRQHandler+0xc7c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d040      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a26      	ldr	r2, [pc, #152]	@ (8006d5c <HAL_DMA_IRQHandler+0xc80>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d03b      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a25      	ldr	r2, [pc, #148]	@ (8006d60 <HAL_DMA_IRQHandler+0xc84>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d036      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a23      	ldr	r2, [pc, #140]	@ (8006d64 <HAL_DMA_IRQHandler+0xc88>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d031      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a22      	ldr	r2, [pc, #136]	@ (8006d68 <HAL_DMA_IRQHandler+0xc8c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d02c      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a20      	ldr	r2, [pc, #128]	@ (8006d6c <HAL_DMA_IRQHandler+0xc90>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d027      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d70 <HAL_DMA_IRQHandler+0xc94>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d022      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d74 <HAL_DMA_IRQHandler+0xc98>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01d      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1c      	ldr	r2, [pc, #112]	@ (8006d78 <HAL_DMA_IRQHandler+0xc9c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d018      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1a      	ldr	r2, [pc, #104]	@ (8006d7c <HAL_DMA_IRQHandler+0xca0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d013      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a19      	ldr	r2, [pc, #100]	@ (8006d80 <HAL_DMA_IRQHandler+0xca4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00e      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a17      	ldr	r2, [pc, #92]	@ (8006d84 <HAL_DMA_IRQHandler+0xca8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d009      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a16      	ldr	r2, [pc, #88]	@ (8006d88 <HAL_DMA_IRQHandler+0xcac>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xc62>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a14      	ldr	r2, [pc, #80]	@ (8006d8c <HAL_DMA_IRQHandler+0xcb0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d128      	bne.n	8006d90 <HAL_DMA_IRQHandler+0xcb4>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0214 	bic.w	r2, r2, #20
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e027      	b.n	8006da0 <HAL_DMA_IRQHandler+0xcc4>
 8006d50:	40020010 	.word	0x40020010
 8006d54:	40020028 	.word	0x40020028
 8006d58:	40020040 	.word	0x40020040
 8006d5c:	40020058 	.word	0x40020058
 8006d60:	40020070 	.word	0x40020070
 8006d64:	40020088 	.word	0x40020088
 8006d68:	400200a0 	.word	0x400200a0
 8006d6c:	400200b8 	.word	0x400200b8
 8006d70:	40020410 	.word	0x40020410
 8006d74:	40020428 	.word	0x40020428
 8006d78:	40020440 	.word	0x40020440
 8006d7c:	40020458 	.word	0x40020458
 8006d80:	40020470 	.word	0x40020470
 8006d84:	40020488 	.word	0x40020488
 8006d88:	400204a0 	.word	0x400204a0
 8006d8c:	400204b8 	.word	0x400204b8
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 020a 	bic.w	r2, r2, #10
 8006d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 8097 	beq.w	8006ee8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc2:	e091      	b.n	8006ee8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	2208      	movs	r2, #8
 8006dce:	409a      	lsls	r2, r3
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8088 	beq.w	8006eea <HAL_DMA_IRQHandler+0xe0e>
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8082 	beq.w	8006eea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a41      	ldr	r2, [pc, #260]	@ (8006ef0 <HAL_DMA_IRQHandler+0xe14>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d04a      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a3f      	ldr	r2, [pc, #252]	@ (8006ef4 <HAL_DMA_IRQHandler+0xe18>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d045      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef8 <HAL_DMA_IRQHandler+0xe1c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d040      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3c      	ldr	r2, [pc, #240]	@ (8006efc <HAL_DMA_IRQHandler+0xe20>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d03b      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a3b      	ldr	r2, [pc, #236]	@ (8006f00 <HAL_DMA_IRQHandler+0xe24>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d036      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a39      	ldr	r2, [pc, #228]	@ (8006f04 <HAL_DMA_IRQHandler+0xe28>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d031      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a38      	ldr	r2, [pc, #224]	@ (8006f08 <HAL_DMA_IRQHandler+0xe2c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d02c      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a36      	ldr	r2, [pc, #216]	@ (8006f0c <HAL_DMA_IRQHandler+0xe30>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d027      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a35      	ldr	r2, [pc, #212]	@ (8006f10 <HAL_DMA_IRQHandler+0xe34>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d022      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a33      	ldr	r2, [pc, #204]	@ (8006f14 <HAL_DMA_IRQHandler+0xe38>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01d      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a32      	ldr	r2, [pc, #200]	@ (8006f18 <HAL_DMA_IRQHandler+0xe3c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d018      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a30      	ldr	r2, [pc, #192]	@ (8006f1c <HAL_DMA_IRQHandler+0xe40>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d013      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2f      	ldr	r2, [pc, #188]	@ (8006f20 <HAL_DMA_IRQHandler+0xe44>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006f24 <HAL_DMA_IRQHandler+0xe48>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a2c      	ldr	r2, [pc, #176]	@ (8006f28 <HAL_DMA_IRQHandler+0xe4c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xdaa>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a2a      	ldr	r2, [pc, #168]	@ (8006f2c <HAL_DMA_IRQHandler+0xe50>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d108      	bne.n	8006e98 <HAL_DMA_IRQHandler+0xdbc>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 021c 	bic.w	r2, r2, #28
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	e007      	b.n	8006ea8 <HAL_DMA_IRQHandler+0xdcc>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 020e 	bic.w	r2, r2, #14
 8006ea6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	409a      	lsls	r2, r3
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d009      	beq.n	8006eea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
 8006ede:	e004      	b.n	8006eea <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ee0:	bf00      	nop
 8006ee2:	e002      	b.n	8006eea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee4:	bf00      	nop
 8006ee6:	e000      	b.n	8006eea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006eea:	3728      	adds	r7, #40	@ 0x28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40020010 	.word	0x40020010
 8006ef4:	40020028 	.word	0x40020028
 8006ef8:	40020040 	.word	0x40020040
 8006efc:	40020058 	.word	0x40020058
 8006f00:	40020070 	.word	0x40020070
 8006f04:	40020088 	.word	0x40020088
 8006f08:	400200a0 	.word	0x400200a0
 8006f0c:	400200b8 	.word	0x400200b8
 8006f10:	40020410 	.word	0x40020410
 8006f14:	40020428 	.word	0x40020428
 8006f18:	40020440 	.word	0x40020440
 8006f1c:	40020458 	.word	0x40020458
 8006f20:	40020470 	.word	0x40020470
 8006f24:	40020488 	.word	0x40020488
 8006f28:	400204a0 	.word	0x400204a0
 8006f2c:	400204b8 	.word	0x400204b8

08006f30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f42:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f48:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7f      	ldr	r2, [pc, #508]	@ (800714c <DMA_SetConfig+0x21c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d072      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a7d      	ldr	r2, [pc, #500]	@ (8007150 <DMA_SetConfig+0x220>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d06d      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a7c      	ldr	r2, [pc, #496]	@ (8007154 <DMA_SetConfig+0x224>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d068      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a7a      	ldr	r2, [pc, #488]	@ (8007158 <DMA_SetConfig+0x228>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d063      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a79      	ldr	r2, [pc, #484]	@ (800715c <DMA_SetConfig+0x22c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d05e      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a77      	ldr	r2, [pc, #476]	@ (8007160 <DMA_SetConfig+0x230>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d059      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a76      	ldr	r2, [pc, #472]	@ (8007164 <DMA_SetConfig+0x234>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d054      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a74      	ldr	r2, [pc, #464]	@ (8007168 <DMA_SetConfig+0x238>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d04f      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a73      	ldr	r2, [pc, #460]	@ (800716c <DMA_SetConfig+0x23c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d04a      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a71      	ldr	r2, [pc, #452]	@ (8007170 <DMA_SetConfig+0x240>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d045      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a70      	ldr	r2, [pc, #448]	@ (8007174 <DMA_SetConfig+0x244>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d040      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a6e      	ldr	r2, [pc, #440]	@ (8007178 <DMA_SetConfig+0x248>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d03b      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a6d      	ldr	r2, [pc, #436]	@ (800717c <DMA_SetConfig+0x24c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d036      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a6b      	ldr	r2, [pc, #428]	@ (8007180 <DMA_SetConfig+0x250>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d031      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a6a      	ldr	r2, [pc, #424]	@ (8007184 <DMA_SetConfig+0x254>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d02c      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a68      	ldr	r2, [pc, #416]	@ (8007188 <DMA_SetConfig+0x258>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d027      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a67      	ldr	r2, [pc, #412]	@ (800718c <DMA_SetConfig+0x25c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d022      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a65      	ldr	r2, [pc, #404]	@ (8007190 <DMA_SetConfig+0x260>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d01d      	beq.n	800703a <DMA_SetConfig+0x10a>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a64      	ldr	r2, [pc, #400]	@ (8007194 <DMA_SetConfig+0x264>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d018      	beq.n	800703a <DMA_SetConfig+0x10a>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a62      	ldr	r2, [pc, #392]	@ (8007198 <DMA_SetConfig+0x268>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d013      	beq.n	800703a <DMA_SetConfig+0x10a>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a61      	ldr	r2, [pc, #388]	@ (800719c <DMA_SetConfig+0x26c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <DMA_SetConfig+0x10a>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a5f      	ldr	r2, [pc, #380]	@ (80071a0 <DMA_SetConfig+0x270>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d009      	beq.n	800703a <DMA_SetConfig+0x10a>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a5e      	ldr	r2, [pc, #376]	@ (80071a4 <DMA_SetConfig+0x274>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d004      	beq.n	800703a <DMA_SetConfig+0x10a>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a5c      	ldr	r2, [pc, #368]	@ (80071a8 <DMA_SetConfig+0x278>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d101      	bne.n	800703e <DMA_SetConfig+0x10e>
 800703a:	2301      	movs	r3, #1
 800703c:	e000      	b.n	8007040 <DMA_SetConfig+0x110>
 800703e:	2300      	movs	r3, #0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800704c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d004      	beq.n	8007060 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800705e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a39      	ldr	r2, [pc, #228]	@ (800714c <DMA_SetConfig+0x21c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d04a      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a38      	ldr	r2, [pc, #224]	@ (8007150 <DMA_SetConfig+0x220>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d045      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a36      	ldr	r2, [pc, #216]	@ (8007154 <DMA_SetConfig+0x224>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d040      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a35      	ldr	r2, [pc, #212]	@ (8007158 <DMA_SetConfig+0x228>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d03b      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a33      	ldr	r2, [pc, #204]	@ (800715c <DMA_SetConfig+0x22c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d036      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a32      	ldr	r2, [pc, #200]	@ (8007160 <DMA_SetConfig+0x230>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d031      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a30      	ldr	r2, [pc, #192]	@ (8007164 <DMA_SetConfig+0x234>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d02c      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2f      	ldr	r2, [pc, #188]	@ (8007168 <DMA_SetConfig+0x238>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d027      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2d      	ldr	r2, [pc, #180]	@ (800716c <DMA_SetConfig+0x23c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d022      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a2c      	ldr	r2, [pc, #176]	@ (8007170 <DMA_SetConfig+0x240>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d01d      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007174 <DMA_SetConfig+0x244>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d018      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a29      	ldr	r2, [pc, #164]	@ (8007178 <DMA_SetConfig+0x248>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d013      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a27      	ldr	r2, [pc, #156]	@ (800717c <DMA_SetConfig+0x24c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00e      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a26      	ldr	r2, [pc, #152]	@ (8007180 <DMA_SetConfig+0x250>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d009      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a24      	ldr	r2, [pc, #144]	@ (8007184 <DMA_SetConfig+0x254>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d004      	beq.n	8007100 <DMA_SetConfig+0x1d0>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a23      	ldr	r2, [pc, #140]	@ (8007188 <DMA_SetConfig+0x258>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d101      	bne.n	8007104 <DMA_SetConfig+0x1d4>
 8007100:	2301      	movs	r3, #1
 8007102:	e000      	b.n	8007106 <DMA_SetConfig+0x1d6>
 8007104:	2300      	movs	r3, #0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d059      	beq.n	80071be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	223f      	movs	r2, #63	@ 0x3f
 8007114:	409a      	lsls	r2, r3
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007128:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	2b40      	cmp	r3, #64	@ 0x40
 8007138:	d138      	bne.n	80071ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800714a:	e086      	b.n	800725a <DMA_SetConfig+0x32a>
 800714c:	40020010 	.word	0x40020010
 8007150:	40020028 	.word	0x40020028
 8007154:	40020040 	.word	0x40020040
 8007158:	40020058 	.word	0x40020058
 800715c:	40020070 	.word	0x40020070
 8007160:	40020088 	.word	0x40020088
 8007164:	400200a0 	.word	0x400200a0
 8007168:	400200b8 	.word	0x400200b8
 800716c:	40020410 	.word	0x40020410
 8007170:	40020428 	.word	0x40020428
 8007174:	40020440 	.word	0x40020440
 8007178:	40020458 	.word	0x40020458
 800717c:	40020470 	.word	0x40020470
 8007180:	40020488 	.word	0x40020488
 8007184:	400204a0 	.word	0x400204a0
 8007188:	400204b8 	.word	0x400204b8
 800718c:	58025408 	.word	0x58025408
 8007190:	5802541c 	.word	0x5802541c
 8007194:	58025430 	.word	0x58025430
 8007198:	58025444 	.word	0x58025444
 800719c:	58025458 	.word	0x58025458
 80071a0:	5802546c 	.word	0x5802546c
 80071a4:	58025480 	.word	0x58025480
 80071a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	60da      	str	r2, [r3, #12]
}
 80071bc:	e04d      	b.n	800725a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a29      	ldr	r2, [pc, #164]	@ (8007268 <DMA_SetConfig+0x338>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d022      	beq.n	800720e <DMA_SetConfig+0x2de>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a27      	ldr	r2, [pc, #156]	@ (800726c <DMA_SetConfig+0x33c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01d      	beq.n	800720e <DMA_SetConfig+0x2de>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a26      	ldr	r2, [pc, #152]	@ (8007270 <DMA_SetConfig+0x340>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d018      	beq.n	800720e <DMA_SetConfig+0x2de>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a24      	ldr	r2, [pc, #144]	@ (8007274 <DMA_SetConfig+0x344>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <DMA_SetConfig+0x2de>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a23      	ldr	r2, [pc, #140]	@ (8007278 <DMA_SetConfig+0x348>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00e      	beq.n	800720e <DMA_SetConfig+0x2de>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a21      	ldr	r2, [pc, #132]	@ (800727c <DMA_SetConfig+0x34c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d009      	beq.n	800720e <DMA_SetConfig+0x2de>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a20      	ldr	r2, [pc, #128]	@ (8007280 <DMA_SetConfig+0x350>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d004      	beq.n	800720e <DMA_SetConfig+0x2de>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1e      	ldr	r2, [pc, #120]	@ (8007284 <DMA_SetConfig+0x354>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d101      	bne.n	8007212 <DMA_SetConfig+0x2e2>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <DMA_SetConfig+0x2e4>
 8007212:	2300      	movs	r3, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d020      	beq.n	800725a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	2201      	movs	r2, #1
 8007222:	409a      	lsls	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b40      	cmp	r3, #64	@ 0x40
 8007236:	d108      	bne.n	800724a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	60da      	str	r2, [r3, #12]
}
 8007248:	e007      	b.n	800725a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	60da      	str	r2, [r3, #12]
}
 800725a:	bf00      	nop
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	58025408 	.word	0x58025408
 800726c:	5802541c 	.word	0x5802541c
 8007270:	58025430 	.word	0x58025430
 8007274:	58025444 	.word	0x58025444
 8007278:	58025458 	.word	0x58025458
 800727c:	5802546c 	.word	0x5802546c
 8007280:	58025480 	.word	0x58025480
 8007284:	58025494 	.word	0x58025494

08007288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a42      	ldr	r2, [pc, #264]	@ (80073a0 <DMA_CalcBaseAndBitshift+0x118>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d04a      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a41      	ldr	r2, [pc, #260]	@ (80073a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d045      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a3f      	ldr	r2, [pc, #252]	@ (80073a8 <DMA_CalcBaseAndBitshift+0x120>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d040      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a3e      	ldr	r2, [pc, #248]	@ (80073ac <DMA_CalcBaseAndBitshift+0x124>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d03b      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a3c      	ldr	r2, [pc, #240]	@ (80073b0 <DMA_CalcBaseAndBitshift+0x128>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d036      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a3b      	ldr	r2, [pc, #236]	@ (80073b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d031      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a39      	ldr	r2, [pc, #228]	@ (80073b8 <DMA_CalcBaseAndBitshift+0x130>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d02c      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a38      	ldr	r2, [pc, #224]	@ (80073bc <DMA_CalcBaseAndBitshift+0x134>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d027      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a36      	ldr	r2, [pc, #216]	@ (80073c0 <DMA_CalcBaseAndBitshift+0x138>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d022      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a35      	ldr	r2, [pc, #212]	@ (80073c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d01d      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a33      	ldr	r2, [pc, #204]	@ (80073c8 <DMA_CalcBaseAndBitshift+0x140>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d018      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a32      	ldr	r2, [pc, #200]	@ (80073cc <DMA_CalcBaseAndBitshift+0x144>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d013      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a30      	ldr	r2, [pc, #192]	@ (80073d0 <DMA_CalcBaseAndBitshift+0x148>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00e      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2f      	ldr	r2, [pc, #188]	@ (80073d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d009      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a2d      	ldr	r2, [pc, #180]	@ (80073d8 <DMA_CalcBaseAndBitshift+0x150>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2c      	ldr	r2, [pc, #176]	@ (80073dc <DMA_CalcBaseAndBitshift+0x154>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d101      	bne.n	8007334 <DMA_CalcBaseAndBitshift+0xac>
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <DMA_CalcBaseAndBitshift+0xae>
 8007334:	2300      	movs	r3, #0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d024      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	3b10      	subs	r3, #16
 8007342:	4a27      	ldr	r2, [pc, #156]	@ (80073e0 <DMA_CalcBaseAndBitshift+0x158>)
 8007344:	fba2 2303 	umull	r2, r3, r2, r3
 8007348:	091b      	lsrs	r3, r3, #4
 800734a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	4a24      	ldr	r2, [pc, #144]	@ (80073e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007354:	5cd3      	ldrb	r3, [r2, r3]
 8007356:	461a      	mov	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b03      	cmp	r3, #3
 8007360:	d908      	bls.n	8007374 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	4b1f      	ldr	r3, [pc, #124]	@ (80073e8 <DMA_CalcBaseAndBitshift+0x160>)
 800736a:	4013      	ands	r3, r2
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	659a      	str	r2, [r3, #88]	@ 0x58
 8007372:	e00d      	b.n	8007390 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	4b1b      	ldr	r3, [pc, #108]	@ (80073e8 <DMA_CalcBaseAndBitshift+0x160>)
 800737c:	4013      	ands	r3, r2
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6593      	str	r3, [r2, #88]	@ 0x58
 8007382:	e005      	b.n	8007390 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40020010 	.word	0x40020010
 80073a4:	40020028 	.word	0x40020028
 80073a8:	40020040 	.word	0x40020040
 80073ac:	40020058 	.word	0x40020058
 80073b0:	40020070 	.word	0x40020070
 80073b4:	40020088 	.word	0x40020088
 80073b8:	400200a0 	.word	0x400200a0
 80073bc:	400200b8 	.word	0x400200b8
 80073c0:	40020410 	.word	0x40020410
 80073c4:	40020428 	.word	0x40020428
 80073c8:	40020440 	.word	0x40020440
 80073cc:	40020458 	.word	0x40020458
 80073d0:	40020470 	.word	0x40020470
 80073d4:	40020488 	.word	0x40020488
 80073d8:	400204a0 	.word	0x400204a0
 80073dc:	400204b8 	.word	0x400204b8
 80073e0:	aaaaaaab 	.word	0xaaaaaaab
 80073e4:	080123fc 	.word	0x080123fc
 80073e8:	fffffc00 	.word	0xfffffc00

080073ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d120      	bne.n	8007442 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	2b03      	cmp	r3, #3
 8007406:	d858      	bhi.n	80074ba <DMA_CheckFifoParam+0xce>
 8007408:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <DMA_CheckFifoParam+0x24>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007421 	.word	0x08007421
 8007414:	08007433 	.word	0x08007433
 8007418:	08007421 	.word	0x08007421
 800741c:	080074bb 	.word	0x080074bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d048      	beq.n	80074be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007430:	e045      	b.n	80074be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800743a:	d142      	bne.n	80074c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007440:	e03f      	b.n	80074c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800744a:	d123      	bne.n	8007494 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007450:	2b03      	cmp	r3, #3
 8007452:	d838      	bhi.n	80074c6 <DMA_CheckFifoParam+0xda>
 8007454:	a201      	add	r2, pc, #4	@ (adr r2, 800745c <DMA_CheckFifoParam+0x70>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	0800746d 	.word	0x0800746d
 8007460:	08007473 	.word	0x08007473
 8007464:	0800746d 	.word	0x0800746d
 8007468:	08007485 	.word	0x08007485
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
        break;
 8007470:	e030      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d025      	beq.n	80074ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007482:	e022      	b.n	80074ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800748c:	d11f      	bne.n	80074ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007492:	e01c      	b.n	80074ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	2b02      	cmp	r3, #2
 800749a:	d902      	bls.n	80074a2 <DMA_CheckFifoParam+0xb6>
 800749c:	2b03      	cmp	r3, #3
 800749e:	d003      	beq.n	80074a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80074a0:	e018      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	73fb      	strb	r3, [r7, #15]
        break;
 80074a6:	e015      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
    break;
 80074b8:	e00b      	b.n	80074d2 <DMA_CheckFifoParam+0xe6>
        break;
 80074ba:	bf00      	nop
 80074bc:	e00a      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074be:	bf00      	nop
 80074c0:	e008      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074c2:	bf00      	nop
 80074c4:	e006      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074c6:	bf00      	nop
 80074c8:	e004      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074ca:	bf00      	nop
 80074cc:	e002      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
    break;
 80074d2:	bf00      	nop
    }
  }

  return status;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop

080074e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a38      	ldr	r2, [pc, #224]	@ (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d022      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a36      	ldr	r2, [pc, #216]	@ (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01d      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a35      	ldr	r2, [pc, #212]	@ (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d018      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a33      	ldr	r2, [pc, #204]	@ (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a32      	ldr	r2, [pc, #200]	@ (80075e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00e      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a30      	ldr	r2, [pc, #192]	@ (80075ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d009      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2f      	ldr	r2, [pc, #188]	@ (80075f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2d      	ldr	r2, [pc, #180]	@ (80075f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d101      	bne.n	8007546 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007546:	2300      	movs	r3, #0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01a      	beq.n	8007582 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	3b08      	subs	r3, #8
 8007554:	4a28      	ldr	r2, [pc, #160]	@ (80075f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007556:	fba2 2303 	umull	r2, r3, r2, r3
 800755a:	091b      	lsrs	r3, r3, #4
 800755c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4b26      	ldr	r3, [pc, #152]	@ (80075fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a24      	ldr	r2, [pc, #144]	@ (8007600 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007570:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	2201      	movs	r2, #1
 800757a:	409a      	lsls	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007580:	e024      	b.n	80075cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	3b10      	subs	r3, #16
 800758a:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	091b      	lsrs	r3, r3, #4
 8007592:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4a1c      	ldr	r2, [pc, #112]	@ (8007608 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d806      	bhi.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4a1b      	ldr	r2, [pc, #108]	@ (800760c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d902      	bls.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3308      	adds	r3, #8
 80075a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4b18      	ldr	r3, [pc, #96]	@ (8007610 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	461a      	mov	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a16      	ldr	r2, [pc, #88]	@ (8007614 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80075bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f003 031f 	and.w	r3, r3, #31
 80075c4:	2201      	movs	r2, #1
 80075c6:	409a      	lsls	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80075cc:	bf00      	nop
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	58025408 	.word	0x58025408
 80075dc:	5802541c 	.word	0x5802541c
 80075e0:	58025430 	.word	0x58025430
 80075e4:	58025444 	.word	0x58025444
 80075e8:	58025458 	.word	0x58025458
 80075ec:	5802546c 	.word	0x5802546c
 80075f0:	58025480 	.word	0x58025480
 80075f4:	58025494 	.word	0x58025494
 80075f8:	cccccccd 	.word	0xcccccccd
 80075fc:	16009600 	.word	0x16009600
 8007600:	58025880 	.word	0x58025880
 8007604:	aaaaaaab 	.word	0xaaaaaaab
 8007608:	400204b8 	.word	0x400204b8
 800760c:	4002040f 	.word	0x4002040f
 8007610:	10008200 	.word	0x10008200
 8007614:	40020880 	.word	0x40020880

08007618 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d04a      	beq.n	80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b08      	cmp	r3, #8
 8007632:	d847      	bhi.n	80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a25      	ldr	r2, [pc, #148]	@ (80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d022      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a24      	ldr	r2, [pc, #144]	@ (80076d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d01d      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a22      	ldr	r2, [pc, #136]	@ (80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d018      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a21      	ldr	r2, [pc, #132]	@ (80076dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d013      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1f      	ldr	r2, [pc, #124]	@ (80076e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00e      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1e      	ldr	r2, [pc, #120]	@ (80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d009      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1c      	ldr	r2, [pc, #112]	@ (80076e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d004      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1b      	ldr	r2, [pc, #108]	@ (80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d101      	bne.n	8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4b17      	ldr	r3, [pc, #92]	@ (80076f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a15      	ldr	r2, [pc, #84]	@ (80076f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80076a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80076a2:	e009      	b.n	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4b14      	ldr	r3, [pc, #80]	@ (80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	461a      	mov	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a11      	ldr	r2, [pc, #68]	@ (80076fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80076b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	2201      	movs	r2, #1
 80076be:	409a      	lsls	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	58025408 	.word	0x58025408
 80076d4:	5802541c 	.word	0x5802541c
 80076d8:	58025430 	.word	0x58025430
 80076dc:	58025444 	.word	0x58025444
 80076e0:	58025458 	.word	0x58025458
 80076e4:	5802546c 	.word	0x5802546c
 80076e8:	58025480 	.word	0x58025480
 80076ec:	58025494 	.word	0x58025494
 80076f0:	1600963f 	.word	0x1600963f
 80076f4:	58025940 	.word	0x58025940
 80076f8:	1000823f 	.word	0x1000823f
 80076fc:	40020940 	.word	0x40020940

08007700 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b098      	sub	sp, #96	@ 0x60
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007708:	4a84      	ldr	r2, [pc, #528]	@ (800791c <HAL_FDCAN_Init+0x21c>)
 800770a:	f107 030c 	add.w	r3, r7, #12
 800770e:	4611      	mov	r1, r2
 8007710:	224c      	movs	r2, #76	@ 0x4c
 8007712:	4618      	mov	r0, r3
 8007714:	f00a f892 	bl	801183c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e1c6      	b.n	8007ab0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a7e      	ldr	r2, [pc, #504]	@ (8007920 <HAL_FDCAN_Init+0x220>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d106      	bne.n	800773a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007734:	461a      	mov	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d106      	bne.n	8007754 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fa fcd6 	bl	8002100 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699a      	ldr	r2, [r3, #24]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0210 	bic.w	r2, r2, #16
 8007762:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007764:	f7fb f9ae 	bl	8002ac4 <HAL_GetTick>
 8007768:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800776a:	e014      	b.n	8007796 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800776c:	f7fb f9aa 	bl	8002ac4 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b0a      	cmp	r3, #10
 8007778:	d90d      	bls.n	8007796 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007780:	f043 0201 	orr.w	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2203      	movs	r2, #3
 800778e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e18c      	b.n	8007ab0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d0e3      	beq.n	800776c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	699a      	ldr	r2, [r3, #24]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077b4:	f7fb f986 	bl	8002ac4 <HAL_GetTick>
 80077b8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80077ba:	e014      	b.n	80077e6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80077bc:	f7fb f982 	bl	8002ac4 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b0a      	cmp	r3, #10
 80077c8:	d90d      	bls.n	80077e6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077d0:	f043 0201 	orr.w	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2203      	movs	r2, #3
 80077de:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e164      	b.n	8007ab0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d0e3      	beq.n	80077bc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0202 	orr.w	r2, r2, #2
 8007802:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	7c1b      	ldrb	r3, [r3, #16]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d108      	bne.n	800781e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800781a:	619a      	str	r2, [r3, #24]
 800781c:	e007      	b.n	800782e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	699a      	ldr	r2, [r3, #24]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800782c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	7c5b      	ldrb	r3, [r3, #17]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d108      	bne.n	8007848 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	699a      	ldr	r2, [r3, #24]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007844:	619a      	str	r2, [r3, #24]
 8007846:	e007      	b.n	8007858 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007856:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	7c9b      	ldrb	r3, [r3, #18]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d108      	bne.n	8007872 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800786e:	619a      	str	r2, [r3, #24]
 8007870:	e007      	b.n	8007882 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007880:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80078a6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691a      	ldr	r2, [r3, #16]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0210 	bic.w	r2, r2, #16
 80078b6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d108      	bne.n	80078d2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0204 	orr.w	r2, r2, #4
 80078ce:	619a      	str	r2, [r3, #24]
 80078d0:	e030      	b.n	8007934 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d02c      	beq.n	8007934 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d020      	beq.n	8007924 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078f0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0210 	orr.w	r2, r2, #16
 8007900:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	2b03      	cmp	r3, #3
 8007908:	d114      	bne.n	8007934 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699a      	ldr	r2, [r3, #24]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0220 	orr.w	r2, r2, #32
 8007918:	619a      	str	r2, [r3, #24]
 800791a:	e00b      	b.n	8007934 <HAL_FDCAN_Init+0x234>
 800791c:	080123a0 	.word	0x080123a0
 8007920:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0220 	orr.w	r2, r2, #32
 8007932:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	3b01      	subs	r3, #1
 800793a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	3b01      	subs	r3, #1
 8007942:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007944:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800794c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	3b01      	subs	r3, #1
 8007956:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800795c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800795e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007968:	d115      	bne.n	8007996 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	3b01      	subs	r3, #1
 8007976:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007978:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797e:	3b01      	subs	r3, #1
 8007980:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007982:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798a:	3b01      	subs	r3, #1
 800798c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007992:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007994:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079bc:	4413      	add	r3, r2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d011      	beq.n	80079e6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80079ca:	f023 0107 	bic.w	r1, r3, #7
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	3360      	adds	r3, #96	@ 0x60
 80079d6:	443b      	add	r3, r7
 80079d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d011      	beq.n	8007a12 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079f6:	f023 0107 	bic.w	r1, r3, #7
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	3360      	adds	r3, #96	@ 0x60
 8007a02:	443b      	add	r3, r7
 8007a04:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d012      	beq.n	8007a40 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a22:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	3360      	adds	r3, #96	@ 0x60
 8007a2e:	443b      	add	r3, r7
 8007a30:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a34:	011a      	lsls	r2, r3, #4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d012      	beq.n	8007a6e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a50:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	3360      	adds	r3, #96	@ 0x60
 8007a5c:	443b      	add	r3, r7
 8007a5e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a62:	021a      	lsls	r2, r3, #8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a11      	ldr	r2, [pc, #68]	@ (8007ab8 <HAL_FDCAN_Init+0x3b8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d107      	bne.n	8007a88 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f022 0203 	bic.w	r2, r2, #3
 8007a86:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fdeb 	bl	800867c <FDCAN_CalcultateRamBlockAddresses>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007aac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3760      	adds	r7, #96	@ 0x60
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	4000a000 	.word	0x4000a000

08007abc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007acc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d002      	beq.n	8007ada <HAL_FDCAN_ConfigFilter+0x1e>
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d157      	bne.n	8007b8a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d12b      	bne.n	8007b3a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	2b07      	cmp	r3, #7
 8007ae8:	d10d      	bne.n	8007b06 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007af6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007afc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007afe:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e00e      	b.n	8007b24 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b12:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007b1a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e025      	b.n	8007b86 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	075a      	lsls	r2, r3, #29
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	2b07      	cmp	r3, #7
 8007b4e:	d103      	bne.n	8007b58 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	e006      	b.n	8007b66 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	079a      	lsls	r2, r3, #30
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	4413      	add	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e008      	b.n	8007b9c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b90:	f043 0202 	orr.w	r2, r3, #2
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
  }
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d111      	bne.n	8007be0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699a      	ldr	r2, [r3, #24]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0201 	bic.w	r2, r2, #1
 8007bd2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e008      	b.n	8007bf2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007be6:	f043 0204 	orr.w	r2, r3, #4
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
  }
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b086      	sub	sp, #24
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d141      	bne.n	8007c9a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c1e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c2c:	f043 0220 	orr.w	r2, r3, #32
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e038      	b.n	8007cac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e026      	b.n	8007cac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007c66:	0c1b      	lsrs	r3, r3, #16
 8007c68:	f003 031f 	and.w	r3, r3, #31
 8007c6c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fe87 	bl	8008988 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2101      	movs	r1, #1
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	fa01 f202 	lsl.w	r2, r1, r2
 8007c86:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e008      	b.n	8007cac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ca0:	f043 0208 	orr.w	r2, r3, #8
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
  }
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b08b      	sub	sp, #44	@ 0x2c
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007ccc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8007cce:	7efb      	ldrb	r3, [r7, #27]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	f040 8149 	bne.w	8007f68 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b40      	cmp	r3, #64	@ 0x40
 8007cda:	d14c      	bne.n	8007d76 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ce4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cf2:	f043 0220 	orr.w	r2, r3, #32
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e13c      	b.n	8007f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d109      	bne.n	8007d24 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e12a      	b.n	8007f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d34:	d10a      	bne.n	8007d4c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d46:	d101      	bne.n	8007d4c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d54:	0a1b      	lsrs	r3, r3, #8
 8007d56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d68:	69f9      	ldr	r1, [r7, #28]
 8007d6a:	fb01 f303 	mul.w	r3, r1, r3
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d74:	e068      	b.n	8007e48 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b41      	cmp	r3, #65	@ 0x41
 8007d7a:	d14c      	bne.n	8007e16 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d84:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d109      	bne.n	8007da0 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d92:	f043 0220 	orr.w	r2, r3, #32
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e0ec      	b.n	8007f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007db6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0da      	b.n	8007f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dd4:	d10a      	bne.n	8007dec <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007dde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007de6:	d101      	bne.n	8007dec <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007de8:	2301      	movs	r3, #1
 8007dea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007df4:	0a1b      	lsrs	r3, r3, #8
 8007df6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e08:	69f9      	ldr	r1, [r7, #28]
 8007e0a:	fb01 f303 	mul.w	r3, r1, r3
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e14:	e018      	b.n	8007e48 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d309      	bcc.n	8007e34 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e26:	f043 0220 	orr.w	r2, r3, #32
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e0a2      	b.n	8007f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	fb01 f303 	mul.w	r3, r1, r3
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d107      	bne.n	8007e6c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	0c9b      	lsrs	r3, r3, #18
 8007e62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	e005      	b.n	8007e78 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	3304      	adds	r3, #4
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	0c1b      	lsrs	r3, r3, #16
 8007ea6:	f003 020f 	and.w	r2, r3, #15
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	0e1b      	lsrs	r3, r3, #24
 8007ecc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	0fda      	lsrs	r2, r3, #31
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007ee8:	2300      	movs	r3, #0
 8007eea:	623b      	str	r3, [r7, #32]
 8007eec:	e00a      	b.n	8007f04 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	441a      	add	r2, r3
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	440b      	add	r3, r1
 8007efa:	7812      	ldrb	r2, [r2, #0]
 8007efc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	3301      	adds	r3, #1
 8007f02:	623b      	str	r3, [r7, #32]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	4a1f      	ldr	r2, [pc, #124]	@ (8007f88 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8007f0a:	5cd3      	ldrb	r3, [r2, r3]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d3ec      	bcc.n	8007eee <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b40      	cmp	r3, #64	@ 0x40
 8007f18:	d105      	bne.n	8007f26 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007f24:	e01e      	b.n	8007f64 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b41      	cmp	r3, #65	@ 0x41
 8007f2a:	d105      	bne.n	8007f38 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007f36:	e015      	b.n	8007f64 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b1f      	cmp	r3, #31
 8007f3c:	d808      	bhi.n	8007f50 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2101      	movs	r1, #1
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	fa01 f202 	lsl.w	r2, r1, r2
 8007f4a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007f4e:	e009      	b.n	8007f64 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f003 021f 	and.w	r2, r3, #31
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	e008      	b.n	8007f7a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f6e:	f043 0208 	orr.w	r2, r3, #8
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
  }
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	372c      	adds	r7, #44	@ 0x2c
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	08012404 	.word	0x08012404

08007f8c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007f9e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d002      	beq.n	8007fac <HAL_FDCAN_ActivateNotification+0x20>
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d155      	bne.n	8008058 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d108      	bne.n	8007fcc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007fca:	e014      	b.n	8007ff6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d108      	bne.n	8007fee <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0202 	orr.w	r2, r2, #2
 8007fea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007fec:	e003      	b.n	8007ff6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d009      	beq.n	8008014 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	430a      	orrs	r2, r1
 8008010:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800801a:	2b00      	cmp	r3, #0
 800801c:	d009      	beq.n	8008032 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	430a      	orrs	r2, r1
 800802e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	4b0f      	ldr	r3, [pc, #60]	@ (8008078 <HAL_FDCAN_ActivateNotification+0xec>)
 800803c:	4013      	ands	r3, r2
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	430b      	orrs	r3, r1
 8008044:	6553      	str	r3, [r2, #84]	@ 0x54
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <HAL_FDCAN_ActivateNotification+0xf0>)
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	0f9b      	lsrs	r3, r3, #30
 800804e:	490b      	ldr	r1, [pc, #44]	@ (800807c <HAL_FDCAN_ActivateNotification+0xf0>)
 8008050:	4313      	orrs	r3, r2
 8008052:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	e008      	b.n	800806a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800805e:	f043 0202 	orr.w	r2, r3, #2
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
  }
}
 800806a:	4618      	mov	r0, r3
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	3fcfffff 	.word	0x3fcfffff
 800807c:	4000a800 	.word	0x4000a800

08008080 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b096      	sub	sp, #88	@ 0x58
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8008088:	4b9a      	ldr	r3, [pc, #616]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	079b      	lsls	r3, r3, #30
 800808e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8008090:	4b98      	ldr	r3, [pc, #608]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	079b      	lsls	r3, r3, #30
 8008096:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008098:	4013      	ands	r3, r2
 800809a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80080a6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80080b0:	4013      	ands	r3, r2
 80080b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080c8:	4013      	ands	r3, r2
 80080ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080e0:	4013      	ands	r3, r2
 80080e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ea:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80080ee:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080f8:	4013      	ands	r3, r2
 80080fa:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008102:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8008106:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800810e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008110:	4013      	ands	r3, r2
 8008112:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800811a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008122:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008126:	0a1b      	lsrs	r3, r3, #8
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	d010      	beq.n	8008152 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	0a1b      	lsrs	r3, r3, #8
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008144:	651a      	str	r2, [r3, #80]	@ 0x50
 8008146:	4b6b      	ldr	r3, [pc, #428]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 8008148:	2200      	movs	r2, #0
 800814a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fa54 	bl	80085fa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008154:	0a9b      	lsrs	r3, r3, #10
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01d      	beq.n	800819a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800815e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008160:	0a9b      	lsrs	r3, r3, #10
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d017      	beq.n	800819a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008172:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800817c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800817e:	4013      	ands	r3, r2
 8008180:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800818a:	651a      	str	r2, [r3, #80]	@ 0x50
 800818c:	4b59      	ldr	r3, [pc, #356]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 800818e:	2200      	movs	r2, #0
 8008190:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008192:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fa07 	bl	80085a8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800819a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00d      	beq.n	80081bc <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081a6:	4b54      	ldr	r3, [pc, #336]	@ (80082f8 <HAL_FDCAN_IRQHandler+0x278>)
 80081a8:	400b      	ands	r3, r1
 80081aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80081ac:	4a51      	ldr	r2, [pc, #324]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 80081ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081b0:	0f9b      	lsrs	r3, r3, #30
 80081b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80081b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f9c0 	bl	800853c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80081bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081c8:	4b4b      	ldr	r3, [pc, #300]	@ (80082f8 <HAL_FDCAN_IRQHandler+0x278>)
 80081ca:	400b      	ands	r3, r1
 80081cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80081ce:	4a49      	ldr	r2, [pc, #292]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 80081d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081d2:	0f9b      	lsrs	r3, r3, #30
 80081d4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80081d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f9ba 	bl	8008552 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80081de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00d      	beq.n	8008200 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80081ea:	4b43      	ldr	r3, [pc, #268]	@ (80082f8 <HAL_FDCAN_IRQHandler+0x278>)
 80081ec:	400b      	ands	r3, r1
 80081ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80081f0:	4a40      	ldr	r2, [pc, #256]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 80081f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081f4:	0f9b      	lsrs	r3, r3, #30
 80081f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80081f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7f9 fa44 	bl	8001688 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00d      	beq.n	8008222 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800820c:	4b3a      	ldr	r3, [pc, #232]	@ (80082f8 <HAL_FDCAN_IRQHandler+0x278>)
 800820e:	400b      	ands	r3, r1
 8008210:	6513      	str	r3, [r2, #80]	@ 0x50
 8008212:	4a38      	ldr	r2, [pc, #224]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 8008214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008216:	0f9b      	lsrs	r3, r3, #30
 8008218:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800821a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f9a3 	bl	8008568 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008224:	0adb      	lsrs	r3, r3, #11
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d010      	beq.n	8008250 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	0adb      	lsrs	r3, r3, #11
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008242:	651a      	str	r2, [r3, #80]	@ 0x50
 8008244:	4b2b      	ldr	r3, [pc, #172]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 8008246:	2200      	movs	r2, #0
 8008248:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f997 	bl	800857e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8008250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008252:	0a5b      	lsrs	r3, r3, #9
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01d      	beq.n	8008298 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825e:	0a5b      	lsrs	r3, r3, #9
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d017      	beq.n	8008298 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008270:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800827a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800827c:	4013      	ands	r3, r2
 800827e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008288:	651a      	str	r2, [r3, #80]	@ 0x50
 800828a:	4b1a      	ldr	r3, [pc, #104]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 800828c:	2200      	movs	r2, #0
 800828e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f97d 	bl	8008592 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800829a:	0cdb      	lsrs	r3, r3, #19
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d010      	beq.n	80082c6 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80082a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a6:	0cdb      	lsrs	r3, r3, #19
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80082b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80082ba:	4b0e      	ldr	r3, [pc, #56]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 80082bc:	2200      	movs	r2, #0
 80082be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f97c 	bl	80085be <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80082c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c8:	0c1b      	lsrs	r3, r3, #16
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d016      	beq.n	8008300 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	0c1b      	lsrs	r3, r3, #16
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d010      	beq.n	8008300 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80082e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80082e8:	4b02      	ldr	r3, [pc, #8]	@ (80082f4 <HAL_FDCAN_IRQHandler+0x274>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	e004      	b.n	80082fc <HAL_FDCAN_IRQHandler+0x27c>
 80082f2:	bf00      	nop
 80082f4:	4000a800 	.word	0x4000a800
 80082f8:	3fcfffff 	.word	0x3fcfffff
 80082fc:	f000 f969 	bl	80085d2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008302:	0c9b      	lsrs	r3, r3, #18
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d010      	beq.n	800832e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800830c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830e:	0c9b      	lsrs	r3, r3, #18
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008320:	651a      	str	r2, [r3, #80]	@ 0x50
 8008322:	4b83      	ldr	r3, [pc, #524]	@ (8008530 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008324:	2200      	movs	r2, #0
 8008326:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f95c 	bl	80085e6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800832e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008330:	0c5b      	lsrs	r3, r3, #17
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d015      	beq.n	8008366 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800833a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833c:	0c5b      	lsrs	r3, r3, #17
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00f      	beq.n	8008366 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800834e:	651a      	str	r2, [r3, #80]	@ 0x50
 8008350:	4b77      	ldr	r3, [pc, #476]	@ (8008530 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008352:	2200      	movs	r2, #0
 8008354:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800835c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00d      	beq.n	8008388 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008372:	4b70      	ldr	r3, [pc, #448]	@ (8008534 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008374:	400b      	ands	r3, r1
 8008376:	6513      	str	r3, [r2, #80]	@ 0x50
 8008378:	4a6d      	ldr	r2, [pc, #436]	@ (8008530 <HAL_FDCAN_IRQHandler+0x4b0>)
 800837a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800837c:	0f9b      	lsrs	r3, r3, #30
 800837e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7f9 fa82 	bl	800188c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800838a:	2b00      	cmp	r3, #0
 800838c:	d011      	beq.n	80083b2 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008394:	4b67      	ldr	r3, [pc, #412]	@ (8008534 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008396:	400b      	ands	r3, r1
 8008398:	6513      	str	r3, [r2, #80]	@ 0x50
 800839a:	4a65      	ldr	r2, [pc, #404]	@ (8008530 <HAL_FDCAN_IRQHandler+0x4b0>)
 800839c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800839e:	0f9b      	lsrs	r3, r3, #30
 80083a0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80083a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a60      	ldr	r2, [pc, #384]	@ (8008538 <HAL_FDCAN_IRQHandler+0x4b8>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	f040 80ac 	bne.w	8008516 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 80a4 	beq.w	8008516 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e2:	4013      	ands	r3, r2
 80083e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083fa:	4013      	ands	r3, r2
 80083fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8008408:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008412:	4013      	ands	r3, r2
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8008420:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008428:	6a3a      	ldr	r2, [r7, #32]
 800842a:	4013      	ands	r3, r2
 800842c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8008438:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008440:	69fa      	ldr	r2, [r7, #28]
 8008442:	4013      	ands	r3, r2
 8008444:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8008456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d007      	beq.n	800846c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008462:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8008464:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f8db 	bl	8008622 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800846c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008478:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800847a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f8db 	bl	8008638 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	099b      	lsrs	r3, r3, #6
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01a      	beq.n	80084c4 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	099b      	lsrs	r3, r3, #6
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d014      	beq.n	80084c4 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a0:	0c1b      	lsrs	r3, r3, #16
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084b0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	2240      	movs	r2, #64	@ 0x40
 80084b8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	6939      	ldr	r1, [r7, #16]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f8c5 	bl	800864e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d007      	beq.n	80084da <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084d0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80084d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f8c6 	bl	8008666 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	6a3a      	ldr	r2, [r7, #32]
 80084e6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	431a      	orrs	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f874 	bl	800860e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008526:	bf00      	nop
 8008528:	3758      	adds	r7, #88	@ 0x58
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	4000a800 	.word	0x4000a800
 8008534:	3fcfffff 	.word	0x3fcfffff
 8008538:	4000a000 	.word	0x4000a000

0800853c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80085da:	bf00      	nop
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008602:	bf00      	nop
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008642:	bf00      	nop
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800864e:	b480      	push	{r7}
 8008650:	b085      	sub	sp, #20
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800865a:	bf00      	nop
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008688:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008692:	4ba7      	ldr	r3, [pc, #668]	@ (8008930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008694:	4013      	ands	r3, r2
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	0091      	lsls	r1, r2, #2
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	6812      	ldr	r2, [r2, #0]
 800869e:	430b      	orrs	r3, r1
 80086a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ac:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b4:	041a      	lsls	r2, r3, #16
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	4413      	add	r3, r2
 80086c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80086d2:	4b97      	ldr	r3, [pc, #604]	@ (8008930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	0091      	lsls	r1, r2, #2
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6812      	ldr	r2, [r2, #0]
 80086de:	430b      	orrs	r3, r1
 80086e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ec:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f4:	041a      	lsls	r2, r3, #16
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	4413      	add	r3, r2
 800870a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008714:	4b86      	ldr	r3, [pc, #536]	@ (8008930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008716:	4013      	ands	r3, r2
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	0091      	lsls	r1, r2, #2
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	6812      	ldr	r2, [r2, #0]
 8008720:	430b      	orrs	r3, r1
 8008722:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800872e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008736:	041a      	lsls	r2, r3, #16
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	4413      	add	r3, r2
 8008752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800875c:	4b74      	ldr	r3, [pc, #464]	@ (8008930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800875e:	4013      	ands	r3, r2
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	0091      	lsls	r1, r2, #2
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6812      	ldr	r2, [r2, #0]
 8008768:	430b      	orrs	r3, r1
 800876a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008776:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800877e:	041a      	lsls	r2, r3, #16
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008792:	fb02 f303 	mul.w	r3, r2, r3
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	4413      	add	r3, r2
 800879a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80087a4:	4b62      	ldr	r3, [pc, #392]	@ (8008930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087a6:	4013      	ands	r3, r2
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	0091      	lsls	r1, r2, #2
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	430b      	orrs	r3, r1
 80087b2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80087be:	fb02 f303 	mul.w	r3, r2, r3
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	4413      	add	r3, r2
 80087c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80087d0:	4b57      	ldr	r3, [pc, #348]	@ (8008930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	0091      	lsls	r1, r2, #2
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	430b      	orrs	r3, r1
 80087de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087ea:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f2:	041a      	lsls	r2, r3, #16
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	4413      	add	r3, r2
 8008808:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008812:	4b47      	ldr	r3, [pc, #284]	@ (8008930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008814:	4013      	ands	r3, r2
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	0091      	lsls	r1, r2, #2
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6812      	ldr	r2, [r2, #0]
 800881e:	430b      	orrs	r3, r1
 8008820:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800882c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008834:	041a      	lsls	r2, r3, #16
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008848:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008850:	061a      	lsls	r2, r3, #24
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008860:	4b34      	ldr	r3, [pc, #208]	@ (8008934 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008862:	4413      	add	r3, r2
 8008864:	009a      	lsls	r2, r3, #2
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	441a      	add	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008896:	fb01 f303 	mul.w	r3, r1, r3
 800889a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800889c:	441a      	add	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80088ae:	fb01 f303 	mul.w	r3, r1, r3
 80088b2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80088b4:	441a      	add	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80088c6:	fb01 f303 	mul.w	r3, r1, r3
 80088ca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80088cc:	441a      	add	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	441a      	add	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80088f6:	fb01 f303 	mul.w	r3, r1, r3
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	441a      	add	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008912:	fb01 f303 	mul.w	r3, r1, r3
 8008916:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008918:	441a      	add	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008926:	4a04      	ldr	r2, [pc, #16]	@ (8008938 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d915      	bls.n	8008958 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800892c:	e006      	b.n	800893c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800892e:	bf00      	nop
 8008930:	ffff0003 	.word	0xffff0003
 8008934:	10002b00 	.word	0x10002b00
 8008938:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008942:	f043 0220 	orr.w	r2, r3, #32
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2203      	movs	r2, #3
 8008950:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e010      	b.n	800897a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	e005      	b.n	800896c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3304      	adds	r3, #4
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	429a      	cmp	r2, r3
 8008976:	d3f3      	bcc.n	8008960 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop

08008988 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008988:	b480      	push	{r7}
 800898a:	b089      	sub	sp, #36	@ 0x24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80089a6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80089ae:	4313      	orrs	r3, r2
 80089b0:	61fb      	str	r3, [r7, #28]
 80089b2:	e00a      	b.n	80089ca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80089bc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80089c2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80089c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089c8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80089d4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80089da:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80089e0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	fb01 f303 	mul.w	r3, r1, r3
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	3304      	adds	r3, #4
 8008a18:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e020      	b.n	8008a62 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	3303      	adds	r3, #3
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	4413      	add	r3, r2
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	3302      	adds	r3, #2
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	440b      	add	r3, r1
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008a38:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	440b      	add	r3, r1
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008a46:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008a50:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	617b      	str	r3, [r7, #20]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	4a06      	ldr	r2, [pc, #24]	@ (8008a80 <FDCAN_CopyMessageToRAM+0xf8>)
 8008a68:	5cd3      	ldrb	r3, [r2, r3]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d3d6      	bcc.n	8008a20 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	3724      	adds	r7, #36	@ 0x24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	08012404 	.word	0x08012404

08008a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b089      	sub	sp, #36	@ 0x24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008a92:	4b86      	ldr	r3, [pc, #536]	@ (8008cac <HAL_GPIO_Init+0x228>)
 8008a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a96:	e18c      	b.n	8008db2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 817e 	beq.w	8008dac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f003 0303 	and.w	r3, r3, #3
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d005      	beq.n	8008ac8 <HAL_GPIO_Init+0x44>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f003 0303 	and.w	r3, r3, #3
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d130      	bne.n	8008b2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	4013      	ands	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008afe:	2201      	movs	r2, #1
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	fa02 f303 	lsl.w	r3, r2, r3
 8008b06:	43db      	mvns	r3, r3
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	091b      	lsrs	r3, r3, #4
 8008b14:	f003 0201 	and.w	r2, r3, #1
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d017      	beq.n	8008b66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	005b      	lsls	r3, r3, #1
 8008b40:	2203      	movs	r2, #3
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	43db      	mvns	r3, r3
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d123      	bne.n	8008bba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	08da      	lsrs	r2, r3, #3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3208      	adds	r2, #8
 8008b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	f003 0307 	and.w	r3, r3, #7
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	220f      	movs	r2, #15
 8008b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8e:	43db      	mvns	r3, r3
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	4013      	ands	r3, r2
 8008b94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	691a      	ldr	r2, [r3, #16]
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	f003 0307 	and.w	r3, r3, #7
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	08da      	lsrs	r2, r3, #3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3208      	adds	r2, #8
 8008bb4:	69b9      	ldr	r1, [r7, #24]
 8008bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	2203      	movs	r2, #3
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	43db      	mvns	r3, r3
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f003 0203 	and.w	r2, r3, #3
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80d8 	beq.w	8008dac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8008cb0 <HAL_GPIO_Init+0x22c>)
 8008bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c02:	4a2b      	ldr	r2, [pc, #172]	@ (8008cb0 <HAL_GPIO_Init+0x22c>)
 8008c04:	f043 0302 	orr.w	r3, r3, #2
 8008c08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008c0c:	4b28      	ldr	r3, [pc, #160]	@ (8008cb0 <HAL_GPIO_Init+0x22c>)
 8008c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c1a:	4a26      	ldr	r2, [pc, #152]	@ (8008cb4 <HAL_GPIO_Init+0x230>)
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	089b      	lsrs	r3, r3, #2
 8008c20:	3302      	adds	r3, #2
 8008c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	220f      	movs	r2, #15
 8008c32:	fa02 f303 	lsl.w	r3, r2, r3
 8008c36:	43db      	mvns	r3, r3
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb8 <HAL_GPIO_Init+0x234>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d04a      	beq.n	8008cdc <HAL_GPIO_Init+0x258>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a1c      	ldr	r2, [pc, #112]	@ (8008cbc <HAL_GPIO_Init+0x238>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d02b      	beq.n	8008ca6 <HAL_GPIO_Init+0x222>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a1b      	ldr	r2, [pc, #108]	@ (8008cc0 <HAL_GPIO_Init+0x23c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d025      	beq.n	8008ca2 <HAL_GPIO_Init+0x21e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a1a      	ldr	r2, [pc, #104]	@ (8008cc4 <HAL_GPIO_Init+0x240>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d01f      	beq.n	8008c9e <HAL_GPIO_Init+0x21a>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a19      	ldr	r2, [pc, #100]	@ (8008cc8 <HAL_GPIO_Init+0x244>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d019      	beq.n	8008c9a <HAL_GPIO_Init+0x216>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a18      	ldr	r2, [pc, #96]	@ (8008ccc <HAL_GPIO_Init+0x248>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d013      	beq.n	8008c96 <HAL_GPIO_Init+0x212>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a17      	ldr	r2, [pc, #92]	@ (8008cd0 <HAL_GPIO_Init+0x24c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00d      	beq.n	8008c92 <HAL_GPIO_Init+0x20e>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a16      	ldr	r2, [pc, #88]	@ (8008cd4 <HAL_GPIO_Init+0x250>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d007      	beq.n	8008c8e <HAL_GPIO_Init+0x20a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a15      	ldr	r2, [pc, #84]	@ (8008cd8 <HAL_GPIO_Init+0x254>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d101      	bne.n	8008c8a <HAL_GPIO_Init+0x206>
 8008c86:	2309      	movs	r3, #9
 8008c88:	e029      	b.n	8008cde <HAL_GPIO_Init+0x25a>
 8008c8a:	230a      	movs	r3, #10
 8008c8c:	e027      	b.n	8008cde <HAL_GPIO_Init+0x25a>
 8008c8e:	2307      	movs	r3, #7
 8008c90:	e025      	b.n	8008cde <HAL_GPIO_Init+0x25a>
 8008c92:	2306      	movs	r3, #6
 8008c94:	e023      	b.n	8008cde <HAL_GPIO_Init+0x25a>
 8008c96:	2305      	movs	r3, #5
 8008c98:	e021      	b.n	8008cde <HAL_GPIO_Init+0x25a>
 8008c9a:	2304      	movs	r3, #4
 8008c9c:	e01f      	b.n	8008cde <HAL_GPIO_Init+0x25a>
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e01d      	b.n	8008cde <HAL_GPIO_Init+0x25a>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	e01b      	b.n	8008cde <HAL_GPIO_Init+0x25a>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e019      	b.n	8008cde <HAL_GPIO_Init+0x25a>
 8008caa:	bf00      	nop
 8008cac:	58000080 	.word	0x58000080
 8008cb0:	58024400 	.word	0x58024400
 8008cb4:	58000400 	.word	0x58000400
 8008cb8:	58020000 	.word	0x58020000
 8008cbc:	58020400 	.word	0x58020400
 8008cc0:	58020800 	.word	0x58020800
 8008cc4:	58020c00 	.word	0x58020c00
 8008cc8:	58021000 	.word	0x58021000
 8008ccc:	58021400 	.word	0x58021400
 8008cd0:	58021800 	.word	0x58021800
 8008cd4:	58021c00 	.word	0x58021c00
 8008cd8:	58022400 	.word	0x58022400
 8008cdc:	2300      	movs	r3, #0
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	f002 0203 	and.w	r2, r2, #3
 8008ce4:	0092      	lsls	r2, r2, #2
 8008ce6:	4093      	lsls	r3, r2
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cee:	4938      	ldr	r1, [pc, #224]	@ (8008dd0 <HAL_GPIO_Init+0x34c>)
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	089b      	lsrs	r3, r3, #2
 8008cf4:	3302      	adds	r3, #2
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	43db      	mvns	r3, r3
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008d22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	43db      	mvns	r3, r3
 8008d36:	69ba      	ldr	r2, [r7, #24]
 8008d38:	4013      	ands	r3, r2
 8008d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	43db      	mvns	r3, r3
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	4013      	ands	r3, r2
 8008d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	3301      	adds	r3, #1
 8008db0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f47f ae6b 	bne.w	8008a98 <HAL_GPIO_Init+0x14>
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	3724      	adds	r7, #36	@ 0x24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	58000400 	.word	0x58000400

08008dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	887b      	ldrh	r3, [r7, #2]
 8008de6:	4013      	ands	r3, r2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]
 8008df0:	e001      	b.n	8008df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	807b      	strh	r3, [r7, #2]
 8008e10:	4613      	mov	r3, r2
 8008e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e14:	787b      	ldrb	r3, [r7, #1]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e1a:	887a      	ldrh	r2, [r7, #2]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008e20:	e003      	b.n	8008e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e22:	887b      	ldrh	r3, [r7, #2]
 8008e24:	041a      	lsls	r2, r3, #16
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	619a      	str	r2, [r3, #24]
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
	...

08008e38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e40:	4b19      	ldr	r3, [pc, #100]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d00a      	beq.n	8008e62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e4c:	4b16      	ldr	r3, [pc, #88]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d001      	beq.n	8008e5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e01f      	b.n	8008e9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e01d      	b.n	8008e9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e62:	4b11      	ldr	r3, [pc, #68]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f023 0207 	bic.w	r2, r3, #7
 8008e6a:	490f      	ldr	r1, [pc, #60]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e72:	f7f9 fe27 	bl	8002ac4 <HAL_GetTick>
 8008e76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e78:	e009      	b.n	8008e8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e7a:	f7f9 fe23 	bl	8002ac4 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e88:	d901      	bls.n	8008e8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e007      	b.n	8008e9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e8e:	4b06      	ldr	r3, [pc, #24]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e9a:	d1ee      	bne.n	8008e7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	58024800 	.word	0x58024800

08008eac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	@ 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e3c8      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 8087 	beq.w	8008fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ecc:	4b88      	ldr	r3, [pc, #544]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ed6:	4b86      	ldr	r3, [pc, #536]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eda:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ede:	2b10      	cmp	r3, #16
 8008ee0:	d007      	beq.n	8008ef2 <HAL_RCC_OscConfig+0x46>
 8008ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee4:	2b18      	cmp	r3, #24
 8008ee6:	d110      	bne.n	8008f0a <HAL_RCC_OscConfig+0x5e>
 8008ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eea:	f003 0303 	and.w	r3, r3, #3
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d10b      	bne.n	8008f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d06c      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x12c>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d168      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e3a2      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f12:	d106      	bne.n	8008f22 <HAL_RCC_OscConfig+0x76>
 8008f14:	4b76      	ldr	r3, [pc, #472]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a75      	ldr	r2, [pc, #468]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	e02e      	b.n	8008f80 <HAL_RCC_OscConfig+0xd4>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10c      	bne.n	8008f44 <HAL_RCC_OscConfig+0x98>
 8008f2a:	4b71      	ldr	r3, [pc, #452]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a70      	ldr	r2, [pc, #448]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	4b6e      	ldr	r3, [pc, #440]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a6d      	ldr	r2, [pc, #436]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	e01d      	b.n	8008f80 <HAL_RCC_OscConfig+0xd4>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f4c:	d10c      	bne.n	8008f68 <HAL_RCC_OscConfig+0xbc>
 8008f4e:	4b68      	ldr	r3, [pc, #416]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a67      	ldr	r2, [pc, #412]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	4b65      	ldr	r3, [pc, #404]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a64      	ldr	r2, [pc, #400]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	e00b      	b.n	8008f80 <HAL_RCC_OscConfig+0xd4>
 8008f68:	4b61      	ldr	r3, [pc, #388]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a60      	ldr	r2, [pc, #384]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	4b5e      	ldr	r3, [pc, #376]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a5d      	ldr	r2, [pc, #372]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d013      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f88:	f7f9 fd9c 	bl	8002ac4 <HAL_GetTick>
 8008f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f8e:	e008      	b.n	8008fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f90:	f7f9 fd98 	bl	8002ac4 <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	2b64      	cmp	r3, #100	@ 0x64
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e356      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fa2:	4b53      	ldr	r3, [pc, #332]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0f0      	beq.n	8008f90 <HAL_RCC_OscConfig+0xe4>
 8008fae:	e014      	b.n	8008fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb0:	f7f9 fd88 	bl	8002ac4 <HAL_GetTick>
 8008fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fb8:	f7f9 fd84 	bl	8002ac4 <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b64      	cmp	r3, #100	@ 0x64
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e342      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fca:	4b49      	ldr	r3, [pc, #292]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1f0      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x10c>
 8008fd6:	e000      	b.n	8008fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 808c 	beq.w	8009100 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fe8:	4b41      	ldr	r3, [pc, #260]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ff0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d007      	beq.n	800900e <HAL_RCC_OscConfig+0x162>
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	2b18      	cmp	r3, #24
 8009002:	d137      	bne.n	8009074 <HAL_RCC_OscConfig+0x1c8>
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f003 0303 	and.w	r3, r3, #3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d132      	bne.n	8009074 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800900e:	4b38      	ldr	r3, [pc, #224]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0304 	and.w	r3, r3, #4
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <HAL_RCC_OscConfig+0x17a>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e314      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009026:	4b32      	ldr	r3, [pc, #200]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f023 0219 	bic.w	r2, r3, #25
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	492f      	ldr	r1, [pc, #188]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8009034:	4313      	orrs	r3, r2
 8009036:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009038:	f7f9 fd44 	bl	8002ac4 <HAL_GetTick>
 800903c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800903e:	e008      	b.n	8009052 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009040:	f7f9 fd40 	bl	8002ac4 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	2b02      	cmp	r3, #2
 800904c:	d901      	bls.n	8009052 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e2fe      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009052:	4b27      	ldr	r3, [pc, #156]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0f0      	beq.n	8009040 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800905e:	4b24      	ldr	r3, [pc, #144]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	061b      	lsls	r3, r3, #24
 800906c:	4920      	ldr	r1, [pc, #128]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 800906e:	4313      	orrs	r3, r2
 8009070:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009072:	e045      	b.n	8009100 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d026      	beq.n	80090ca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800907c:	4b1c      	ldr	r3, [pc, #112]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f023 0219 	bic.w	r2, r3, #25
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	4919      	ldr	r1, [pc, #100]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 800908a:	4313      	orrs	r3, r2
 800908c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800908e:	f7f9 fd19 	bl	8002ac4 <HAL_GetTick>
 8009092:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009094:	e008      	b.n	80090a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009096:	f7f9 fd15 	bl	8002ac4 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e2d3      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090a8:	4b11      	ldr	r3, [pc, #68]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0f0      	beq.n	8009096 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090b4:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	061b      	lsls	r3, r3, #24
 80090c2:	490b      	ldr	r1, [pc, #44]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	604b      	str	r3, [r1, #4]
 80090c8:	e01a      	b.n	8009100 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090ca:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a08      	ldr	r2, [pc, #32]	@ (80090f0 <HAL_RCC_OscConfig+0x244>)
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d6:	f7f9 fcf5 	bl	8002ac4 <HAL_GetTick>
 80090da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090dc:	e00a      	b.n	80090f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090de:	f7f9 fcf1 	bl	8002ac4 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d903      	bls.n	80090f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e2af      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
 80090f0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090f4:	4b96      	ldr	r3, [pc, #600]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1ee      	bne.n	80090de <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	d06a      	beq.n	80091e2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800910c:	4b90      	ldr	r3, [pc, #576]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009114:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009116:	4b8e      	ldr	r3, [pc, #568]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800911a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	2b08      	cmp	r3, #8
 8009120:	d007      	beq.n	8009132 <HAL_RCC_OscConfig+0x286>
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	2b18      	cmp	r3, #24
 8009126:	d11b      	bne.n	8009160 <HAL_RCC_OscConfig+0x2b4>
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f003 0303 	and.w	r3, r3, #3
 800912e:	2b01      	cmp	r3, #1
 8009130:	d116      	bne.n	8009160 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009132:	4b87      	ldr	r3, [pc, #540]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_RCC_OscConfig+0x29e>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	2b80      	cmp	r3, #128	@ 0x80
 8009144:	d001      	beq.n	800914a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e282      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800914a:	4b81      	ldr	r3, [pc, #516]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	061b      	lsls	r3, r3, #24
 8009158:	497d      	ldr	r1, [pc, #500]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 800915a:	4313      	orrs	r3, r2
 800915c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800915e:	e040      	b.n	80091e2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d023      	beq.n	80091b0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009168:	4b79      	ldr	r3, [pc, #484]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a78      	ldr	r2, [pc, #480]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 800916e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009174:	f7f9 fca6 	bl	8002ac4 <HAL_GetTick>
 8009178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800917a:	e008      	b.n	800918e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800917c:	f7f9 fca2 	bl	8002ac4 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b02      	cmp	r3, #2
 8009188:	d901      	bls.n	800918e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e260      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800918e:	4b70      	ldr	r3, [pc, #448]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0f0      	beq.n	800917c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800919a:	4b6d      	ldr	r3, [pc, #436]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	061b      	lsls	r3, r3, #24
 80091a8:	4969      	ldr	r1, [pc, #420]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60cb      	str	r3, [r1, #12]
 80091ae:	e018      	b.n	80091e2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091b0:	4b67      	ldr	r3, [pc, #412]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a66      	ldr	r2, [pc, #408]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80091b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091bc:	f7f9 fc82 	bl	8002ac4 <HAL_GetTick>
 80091c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091c2:	e008      	b.n	80091d6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091c4:	f7f9 fc7e 	bl	8002ac4 <HAL_GetTick>
 80091c8:	4602      	mov	r2, r0
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d901      	bls.n	80091d6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e23c      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091d6:	4b5e      	ldr	r3, [pc, #376]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f0      	bne.n	80091c4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0308 	and.w	r3, r3, #8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d036      	beq.n	800925c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d019      	beq.n	800922a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091f6:	4b56      	ldr	r3, [pc, #344]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80091f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091fa:	4a55      	ldr	r2, [pc, #340]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80091fc:	f043 0301 	orr.w	r3, r3, #1
 8009200:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009202:	f7f9 fc5f 	bl	8002ac4 <HAL_GetTick>
 8009206:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009208:	e008      	b.n	800921c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800920a:	f7f9 fc5b 	bl	8002ac4 <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d901      	bls.n	800921c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e219      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800921c:	4b4c      	ldr	r3, [pc, #304]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 800921e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0f0      	beq.n	800920a <HAL_RCC_OscConfig+0x35e>
 8009228:	e018      	b.n	800925c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800922a:	4b49      	ldr	r3, [pc, #292]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 800922c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800922e:	4a48      	ldr	r2, [pc, #288]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009230:	f023 0301 	bic.w	r3, r3, #1
 8009234:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009236:	f7f9 fc45 	bl	8002ac4 <HAL_GetTick>
 800923a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800923c:	e008      	b.n	8009250 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800923e:	f7f9 fc41 	bl	8002ac4 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	2b02      	cmp	r3, #2
 800924a:	d901      	bls.n	8009250 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e1ff      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009250:	4b3f      	ldr	r3, [pc, #252]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1f0      	bne.n	800923e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b00      	cmp	r3, #0
 8009266:	d036      	beq.n	80092d6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d019      	beq.n	80092a4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009270:	4b37      	ldr	r3, [pc, #220]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a36      	ldr	r2, [pc, #216]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009276:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800927a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800927c:	f7f9 fc22 	bl	8002ac4 <HAL_GetTick>
 8009280:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009284:	f7f9 fc1e 	bl	8002ac4 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e1dc      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009296:	4b2e      	ldr	r3, [pc, #184]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0f0      	beq.n	8009284 <HAL_RCC_OscConfig+0x3d8>
 80092a2:	e018      	b.n	80092d6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092a4:	4b2a      	ldr	r3, [pc, #168]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a29      	ldr	r2, [pc, #164]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80092aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092b0:	f7f9 fc08 	bl	8002ac4 <HAL_GetTick>
 80092b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092b8:	f7f9 fc04 	bl	8002ac4 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e1c2      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092ca:	4b21      	ldr	r3, [pc, #132]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f0      	bne.n	80092b8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0304 	and.w	r3, r3, #4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 8086 	beq.w	80093f0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009354 <HAL_RCC_OscConfig+0x4a8>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a1a      	ldr	r2, [pc, #104]	@ (8009354 <HAL_RCC_OscConfig+0x4a8>)
 80092ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092f0:	f7f9 fbe8 	bl	8002ac4 <HAL_GetTick>
 80092f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092f8:	f7f9 fbe4 	bl	8002ac4 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b64      	cmp	r3, #100	@ 0x64
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e1a2      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800930a:	4b12      	ldr	r3, [pc, #72]	@ (8009354 <HAL_RCC_OscConfig+0x4a8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0f0      	beq.n	80092f8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d106      	bne.n	800932c <HAL_RCC_OscConfig+0x480>
 800931e:	4b0c      	ldr	r3, [pc, #48]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009322:	4a0b      	ldr	r2, [pc, #44]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009324:	f043 0301 	orr.w	r3, r3, #1
 8009328:	6713      	str	r3, [r2, #112]	@ 0x70
 800932a:	e032      	b.n	8009392 <HAL_RCC_OscConfig+0x4e6>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d111      	bne.n	8009358 <HAL_RCC_OscConfig+0x4ac>
 8009334:	4b06      	ldr	r3, [pc, #24]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009338:	4a05      	ldr	r2, [pc, #20]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 800933a:	f023 0301 	bic.w	r3, r3, #1
 800933e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009340:	4b03      	ldr	r3, [pc, #12]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009344:	4a02      	ldr	r2, [pc, #8]	@ (8009350 <HAL_RCC_OscConfig+0x4a4>)
 8009346:	f023 0304 	bic.w	r3, r3, #4
 800934a:	6713      	str	r3, [r2, #112]	@ 0x70
 800934c:	e021      	b.n	8009392 <HAL_RCC_OscConfig+0x4e6>
 800934e:	bf00      	nop
 8009350:	58024400 	.word	0x58024400
 8009354:	58024800 	.word	0x58024800
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	2b05      	cmp	r3, #5
 800935e:	d10c      	bne.n	800937a <HAL_RCC_OscConfig+0x4ce>
 8009360:	4b83      	ldr	r3, [pc, #524]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009364:	4a82      	ldr	r2, [pc, #520]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009366:	f043 0304 	orr.w	r3, r3, #4
 800936a:	6713      	str	r3, [r2, #112]	@ 0x70
 800936c:	4b80      	ldr	r3, [pc, #512]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 800936e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009370:	4a7f      	ldr	r2, [pc, #508]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009372:	f043 0301 	orr.w	r3, r3, #1
 8009376:	6713      	str	r3, [r2, #112]	@ 0x70
 8009378:	e00b      	b.n	8009392 <HAL_RCC_OscConfig+0x4e6>
 800937a:	4b7d      	ldr	r3, [pc, #500]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 800937c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800937e:	4a7c      	ldr	r2, [pc, #496]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	6713      	str	r3, [r2, #112]	@ 0x70
 8009386:	4b7a      	ldr	r3, [pc, #488]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800938a:	4a79      	ldr	r2, [pc, #484]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 800938c:	f023 0304 	bic.w	r3, r3, #4
 8009390:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d015      	beq.n	80093c6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800939a:	f7f9 fb93 	bl	8002ac4 <HAL_GetTick>
 800939e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093a0:	e00a      	b.n	80093b8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a2:	f7f9 fb8f 	bl	8002ac4 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d901      	bls.n	80093b8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e14b      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093b8:	4b6d      	ldr	r3, [pc, #436]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80093ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0ee      	beq.n	80093a2 <HAL_RCC_OscConfig+0x4f6>
 80093c4:	e014      	b.n	80093f0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093c6:	f7f9 fb7d 	bl	8002ac4 <HAL_GetTick>
 80093ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093cc:	e00a      	b.n	80093e4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ce:	f7f9 fb79 	bl	8002ac4 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093dc:	4293      	cmp	r3, r2
 80093de:	d901      	bls.n	80093e4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e135      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093e4:	4b62      	ldr	r3, [pc, #392]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80093e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1ee      	bne.n	80093ce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 812a 	beq.w	800964e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80093fa:	4b5d      	ldr	r3, [pc, #372]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009402:	2b18      	cmp	r3, #24
 8009404:	f000 80ba 	beq.w	800957c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940c:	2b02      	cmp	r3, #2
 800940e:	f040 8095 	bne.w	800953c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009412:	4b57      	ldr	r3, [pc, #348]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a56      	ldr	r2, [pc, #344]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009418:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800941c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800941e:	f7f9 fb51 	bl	8002ac4 <HAL_GetTick>
 8009422:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009424:	e008      	b.n	8009438 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009426:	f7f9 fb4d 	bl	8002ac4 <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	2b02      	cmp	r3, #2
 8009432:	d901      	bls.n	8009438 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e10b      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009438:	4b4d      	ldr	r3, [pc, #308]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1f0      	bne.n	8009426 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009444:	4b4a      	ldr	r3, [pc, #296]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009446:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009448:	4b4a      	ldr	r3, [pc, #296]	@ (8009574 <HAL_RCC_OscConfig+0x6c8>)
 800944a:	4013      	ands	r3, r2
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009454:	0112      	lsls	r2, r2, #4
 8009456:	430a      	orrs	r2, r1
 8009458:	4945      	ldr	r1, [pc, #276]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 800945a:	4313      	orrs	r3, r2
 800945c:	628b      	str	r3, [r1, #40]	@ 0x28
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009462:	3b01      	subs	r3, #1
 8009464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800946c:	3b01      	subs	r3, #1
 800946e:	025b      	lsls	r3, r3, #9
 8009470:	b29b      	uxth	r3, r3
 8009472:	431a      	orrs	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	3b01      	subs	r3, #1
 800947a:	041b      	lsls	r3, r3, #16
 800947c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009486:	3b01      	subs	r3, #1
 8009488:	061b      	lsls	r3, r3, #24
 800948a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800948e:	4938      	ldr	r1, [pc, #224]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009490:	4313      	orrs	r3, r2
 8009492:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009494:	4b36      	ldr	r3, [pc, #216]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009498:	4a35      	ldr	r2, [pc, #212]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 800949a:	f023 0301 	bic.w	r3, r3, #1
 800949e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094a0:	4b33      	ldr	r3, [pc, #204]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094a4:	4b34      	ldr	r3, [pc, #208]	@ (8009578 <HAL_RCC_OscConfig+0x6cc>)
 80094a6:	4013      	ands	r3, r2
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80094ac:	00d2      	lsls	r2, r2, #3
 80094ae:	4930      	ldr	r1, [pc, #192]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094b4:	4b2e      	ldr	r3, [pc, #184]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b8:	f023 020c 	bic.w	r2, r3, #12
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c0:	492b      	ldr	r1, [pc, #172]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ca:	f023 0202 	bic.w	r2, r3, #2
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d2:	4927      	ldr	r1, [pc, #156]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094d8:	4b25      	ldr	r3, [pc, #148]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094dc:	4a24      	ldr	r2, [pc, #144]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e4:	4b22      	ldr	r3, [pc, #136]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e8:	4a21      	ldr	r2, [pc, #132]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80094f0:	4b1f      	ldr	r3, [pc, #124]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f4:	4a1e      	ldr	r2, [pc, #120]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80094fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 80094fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009500:	4a1b      	ldr	r2, [pc, #108]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009502:	f043 0301 	orr.w	r3, r3, #1
 8009506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009508:	4b19      	ldr	r3, [pc, #100]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a18      	ldr	r2, [pc, #96]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 800950e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009514:	f7f9 fad6 	bl	8002ac4 <HAL_GetTick>
 8009518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800951a:	e008      	b.n	800952e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800951c:	f7f9 fad2 	bl	8002ac4 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b02      	cmp	r3, #2
 8009528:	d901      	bls.n	800952e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e090      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800952e:	4b10      	ldr	r3, [pc, #64]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0f0      	beq.n	800951c <HAL_RCC_OscConfig+0x670>
 800953a:	e088      	b.n	800964e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800953c:	4b0c      	ldr	r3, [pc, #48]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a0b      	ldr	r2, [pc, #44]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009548:	f7f9 fabc 	bl	8002ac4 <HAL_GetTick>
 800954c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800954e:	e008      	b.n	8009562 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009550:	f7f9 fab8 	bl	8002ac4 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b02      	cmp	r3, #2
 800955c:	d901      	bls.n	8009562 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e076      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009562:	4b03      	ldr	r3, [pc, #12]	@ (8009570 <HAL_RCC_OscConfig+0x6c4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1f0      	bne.n	8009550 <HAL_RCC_OscConfig+0x6a4>
 800956e:	e06e      	b.n	800964e <HAL_RCC_OscConfig+0x7a2>
 8009570:	58024400 	.word	0x58024400
 8009574:	fffffc0c 	.word	0xfffffc0c
 8009578:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800957c:	4b36      	ldr	r3, [pc, #216]	@ (8009658 <HAL_RCC_OscConfig+0x7ac>)
 800957e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009580:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009582:	4b35      	ldr	r3, [pc, #212]	@ (8009658 <HAL_RCC_OscConfig+0x7ac>)
 8009584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009586:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958c:	2b01      	cmp	r3, #1
 800958e:	d031      	beq.n	80095f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	f003 0203 	and.w	r2, r3, #3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800959a:	429a      	cmp	r2, r3
 800959c:	d12a      	bne.n	80095f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	091b      	lsrs	r3, r3, #4
 80095a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d122      	bne.n	80095f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d11a      	bne.n	80095f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	0a5b      	lsrs	r3, r3, #9
 80095c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d111      	bne.n	80095f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	0c1b      	lsrs	r3, r3, #16
 80095d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095de:	429a      	cmp	r2, r3
 80095e0:	d108      	bne.n	80095f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	0e1b      	lsrs	r3, r3, #24
 80095e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d001      	beq.n	80095f8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e02b      	b.n	8009650 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80095f8:	4b17      	ldr	r3, [pc, #92]	@ (8009658 <HAL_RCC_OscConfig+0x7ac>)
 80095fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009602:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	429a      	cmp	r2, r3
 800960c:	d01f      	beq.n	800964e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800960e:	4b12      	ldr	r3, [pc, #72]	@ (8009658 <HAL_RCC_OscConfig+0x7ac>)
 8009610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009612:	4a11      	ldr	r2, [pc, #68]	@ (8009658 <HAL_RCC_OscConfig+0x7ac>)
 8009614:	f023 0301 	bic.w	r3, r3, #1
 8009618:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800961a:	f7f9 fa53 	bl	8002ac4 <HAL_GetTick>
 800961e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009620:	bf00      	nop
 8009622:	f7f9 fa4f 	bl	8002ac4 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	4293      	cmp	r3, r2
 800962c:	d0f9      	beq.n	8009622 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800962e:	4b0a      	ldr	r3, [pc, #40]	@ (8009658 <HAL_RCC_OscConfig+0x7ac>)
 8009630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009632:	4b0a      	ldr	r3, [pc, #40]	@ (800965c <HAL_RCC_OscConfig+0x7b0>)
 8009634:	4013      	ands	r3, r2
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800963a:	00d2      	lsls	r2, r2, #3
 800963c:	4906      	ldr	r1, [pc, #24]	@ (8009658 <HAL_RCC_OscConfig+0x7ac>)
 800963e:	4313      	orrs	r3, r2
 8009640:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009642:	4b05      	ldr	r3, [pc, #20]	@ (8009658 <HAL_RCC_OscConfig+0x7ac>)
 8009644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009646:	4a04      	ldr	r2, [pc, #16]	@ (8009658 <HAL_RCC_OscConfig+0x7ac>)
 8009648:	f043 0301 	orr.w	r3, r3, #1
 800964c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3730      	adds	r7, #48	@ 0x30
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	58024400 	.word	0x58024400
 800965c:	ffff0007 	.word	0xffff0007

08009660 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e19c      	b.n	80099ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009674:	4b8a      	ldr	r3, [pc, #552]	@ (80098a0 <HAL_RCC_ClockConfig+0x240>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 030f 	and.w	r3, r3, #15
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d910      	bls.n	80096a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009682:	4b87      	ldr	r3, [pc, #540]	@ (80098a0 <HAL_RCC_ClockConfig+0x240>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f023 020f 	bic.w	r2, r3, #15
 800968a:	4985      	ldr	r1, [pc, #532]	@ (80098a0 <HAL_RCC_ClockConfig+0x240>)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	4313      	orrs	r3, r2
 8009690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009692:	4b83      	ldr	r3, [pc, #524]	@ (80098a0 <HAL_RCC_ClockConfig+0x240>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d001      	beq.n	80096a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e184      	b.n	80099ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d010      	beq.n	80096d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	4b7b      	ldr	r3, [pc, #492]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096bc:	429a      	cmp	r2, r3
 80096be:	d908      	bls.n	80096d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096c0:	4b78      	ldr	r3, [pc, #480]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	4975      	ldr	r1, [pc, #468]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0308 	and.w	r3, r3, #8
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d010      	beq.n	8009700 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	695a      	ldr	r2, [r3, #20]
 80096e2:	4b70      	ldr	r3, [pc, #448]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d908      	bls.n	8009700 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096ee:	4b6d      	ldr	r3, [pc, #436]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	496a      	ldr	r1, [pc, #424]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	d010      	beq.n	800972e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	699a      	ldr	r2, [r3, #24]
 8009710:	4b64      	ldr	r3, [pc, #400]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009718:	429a      	cmp	r2, r3
 800971a:	d908      	bls.n	800972e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800971c:	4b61      	ldr	r3, [pc, #388]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	495e      	ldr	r1, [pc, #376]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 800972a:	4313      	orrs	r3, r2
 800972c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b00      	cmp	r3, #0
 8009738:	d010      	beq.n	800975c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69da      	ldr	r2, [r3, #28]
 800973e:	4b59      	ldr	r3, [pc, #356]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009746:	429a      	cmp	r2, r3
 8009748:	d908      	bls.n	800975c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800974a:	4b56      	ldr	r3, [pc, #344]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	4953      	ldr	r1, [pc, #332]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 8009758:	4313      	orrs	r3, r2
 800975a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0302 	and.w	r3, r3, #2
 8009764:	2b00      	cmp	r3, #0
 8009766:	d010      	beq.n	800978a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68da      	ldr	r2, [r3, #12]
 800976c:	4b4d      	ldr	r3, [pc, #308]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	f003 030f 	and.w	r3, r3, #15
 8009774:	429a      	cmp	r2, r3
 8009776:	d908      	bls.n	800978a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009778:	4b4a      	ldr	r3, [pc, #296]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	f023 020f 	bic.w	r2, r3, #15
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	4947      	ldr	r1, [pc, #284]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 8009786:	4313      	orrs	r3, r2
 8009788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d055      	beq.n	8009842 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009796:	4b43      	ldr	r3, [pc, #268]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	4940      	ldr	r1, [pc, #256]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d107      	bne.n	80097c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097b0:	4b3c      	ldr	r3, [pc, #240]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d121      	bne.n	8009800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e0f6      	b.n	80099ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d107      	bne.n	80097d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097c8:	4b36      	ldr	r3, [pc, #216]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d115      	bne.n	8009800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e0ea      	b.n	80099ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d107      	bne.n	80097f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097e0:	4b30      	ldr	r3, [pc, #192]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d109      	bne.n	8009800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e0de      	b.n	80099ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097f0:	4b2c      	ldr	r3, [pc, #176]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0304 	and.w	r3, r3, #4
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e0d6      	b.n	80099ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009800:	4b28      	ldr	r3, [pc, #160]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	f023 0207 	bic.w	r2, r3, #7
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	4925      	ldr	r1, [pc, #148]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 800980e:	4313      	orrs	r3, r2
 8009810:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009812:	f7f9 f957 	bl	8002ac4 <HAL_GetTick>
 8009816:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009818:	e00a      	b.n	8009830 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800981a:	f7f9 f953 	bl	8002ac4 <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009828:	4293      	cmp	r3, r2
 800982a:	d901      	bls.n	8009830 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e0be      	b.n	80099ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009830:	4b1c      	ldr	r3, [pc, #112]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	00db      	lsls	r3, r3, #3
 800983e:	429a      	cmp	r2, r3
 8009840:	d1eb      	bne.n	800981a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0302 	and.w	r3, r3, #2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d010      	beq.n	8009870 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	4b14      	ldr	r3, [pc, #80]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	429a      	cmp	r2, r3
 800985c:	d208      	bcs.n	8009870 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800985e:	4b11      	ldr	r3, [pc, #68]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	f023 020f 	bic.w	r2, r3, #15
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	490e      	ldr	r1, [pc, #56]	@ (80098a4 <HAL_RCC_ClockConfig+0x244>)
 800986c:	4313      	orrs	r3, r2
 800986e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009870:	4b0b      	ldr	r3, [pc, #44]	@ (80098a0 <HAL_RCC_ClockConfig+0x240>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 030f 	and.w	r3, r3, #15
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d214      	bcs.n	80098a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800987e:	4b08      	ldr	r3, [pc, #32]	@ (80098a0 <HAL_RCC_ClockConfig+0x240>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f023 020f 	bic.w	r2, r3, #15
 8009886:	4906      	ldr	r1, [pc, #24]	@ (80098a0 <HAL_RCC_ClockConfig+0x240>)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	4313      	orrs	r3, r2
 800988c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800988e:	4b04      	ldr	r3, [pc, #16]	@ (80098a0 <HAL_RCC_ClockConfig+0x240>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 030f 	and.w	r3, r3, #15
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	429a      	cmp	r2, r3
 800989a:	d005      	beq.n	80098a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e086      	b.n	80099ae <HAL_RCC_ClockConfig+0x34e>
 80098a0:	52002000 	.word	0x52002000
 80098a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d010      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691a      	ldr	r2, [r3, #16]
 80098b8:	4b3f      	ldr	r3, [pc, #252]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d208      	bcs.n	80098d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098c4:	4b3c      	ldr	r3, [pc, #240]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	4939      	ldr	r1, [pc, #228]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0308 	and.w	r3, r3, #8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d010      	beq.n	8009904 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695a      	ldr	r2, [r3, #20]
 80098e6:	4b34      	ldr	r3, [pc, #208]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d208      	bcs.n	8009904 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098f2:	4b31      	ldr	r3, [pc, #196]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	492e      	ldr	r1, [pc, #184]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 8009900:	4313      	orrs	r3, r2
 8009902:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0310 	and.w	r3, r3, #16
 800990c:	2b00      	cmp	r3, #0
 800990e:	d010      	beq.n	8009932 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	699a      	ldr	r2, [r3, #24]
 8009914:	4b28      	ldr	r3, [pc, #160]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800991c:	429a      	cmp	r2, r3
 800991e:	d208      	bcs.n	8009932 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009920:	4b25      	ldr	r3, [pc, #148]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	4922      	ldr	r1, [pc, #136]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 800992e:	4313      	orrs	r3, r2
 8009930:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b00      	cmp	r3, #0
 800993c:	d010      	beq.n	8009960 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	69da      	ldr	r2, [r3, #28]
 8009942:	4b1d      	ldr	r3, [pc, #116]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800994a:	429a      	cmp	r2, r3
 800994c:	d208      	bcs.n	8009960 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800994e:	4b1a      	ldr	r3, [pc, #104]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	4917      	ldr	r1, [pc, #92]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 800995c:	4313      	orrs	r3, r2
 800995e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009960:	f000 f834 	bl	80099cc <HAL_RCC_GetSysClockFreq>
 8009964:	4602      	mov	r2, r0
 8009966:	4b14      	ldr	r3, [pc, #80]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	0a1b      	lsrs	r3, r3, #8
 800996c:	f003 030f 	and.w	r3, r3, #15
 8009970:	4912      	ldr	r1, [pc, #72]	@ (80099bc <HAL_RCC_ClockConfig+0x35c>)
 8009972:	5ccb      	ldrb	r3, [r1, r3]
 8009974:	f003 031f 	and.w	r3, r3, #31
 8009978:	fa22 f303 	lsr.w	r3, r2, r3
 800997c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800997e:	4b0e      	ldr	r3, [pc, #56]	@ (80099b8 <HAL_RCC_ClockConfig+0x358>)
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f003 030f 	and.w	r3, r3, #15
 8009986:	4a0d      	ldr	r2, [pc, #52]	@ (80099bc <HAL_RCC_ClockConfig+0x35c>)
 8009988:	5cd3      	ldrb	r3, [r2, r3]
 800998a:	f003 031f 	and.w	r3, r3, #31
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	fa22 f303 	lsr.w	r3, r2, r3
 8009994:	4a0a      	ldr	r2, [pc, #40]	@ (80099c0 <HAL_RCC_ClockConfig+0x360>)
 8009996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009998:	4a0a      	ldr	r2, [pc, #40]	@ (80099c4 <HAL_RCC_ClockConfig+0x364>)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800999e:	4b0a      	ldr	r3, [pc, #40]	@ (80099c8 <HAL_RCC_ClockConfig+0x368>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f9 f844 	bl	8002a30 <HAL_InitTick>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	58024400 	.word	0x58024400
 80099bc:	080123ec 	.word	0x080123ec
 80099c0:	24000010 	.word	0x24000010
 80099c4:	2400000c 	.word	0x2400000c
 80099c8:	24000014 	.word	0x24000014

080099cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b089      	sub	sp, #36	@ 0x24
 80099d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099d2:	4bb3      	ldr	r3, [pc, #716]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099da:	2b18      	cmp	r3, #24
 80099dc:	f200 8155 	bhi.w	8009c8a <HAL_RCC_GetSysClockFreq+0x2be>
 80099e0:	a201      	add	r2, pc, #4	@ (adr r2, 80099e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a4d 	.word	0x08009a4d
 80099ec:	08009c8b 	.word	0x08009c8b
 80099f0:	08009c8b 	.word	0x08009c8b
 80099f4:	08009c8b 	.word	0x08009c8b
 80099f8:	08009c8b 	.word	0x08009c8b
 80099fc:	08009c8b 	.word	0x08009c8b
 8009a00:	08009c8b 	.word	0x08009c8b
 8009a04:	08009c8b 	.word	0x08009c8b
 8009a08:	08009a73 	.word	0x08009a73
 8009a0c:	08009c8b 	.word	0x08009c8b
 8009a10:	08009c8b 	.word	0x08009c8b
 8009a14:	08009c8b 	.word	0x08009c8b
 8009a18:	08009c8b 	.word	0x08009c8b
 8009a1c:	08009c8b 	.word	0x08009c8b
 8009a20:	08009c8b 	.word	0x08009c8b
 8009a24:	08009c8b 	.word	0x08009c8b
 8009a28:	08009a79 	.word	0x08009a79
 8009a2c:	08009c8b 	.word	0x08009c8b
 8009a30:	08009c8b 	.word	0x08009c8b
 8009a34:	08009c8b 	.word	0x08009c8b
 8009a38:	08009c8b 	.word	0x08009c8b
 8009a3c:	08009c8b 	.word	0x08009c8b
 8009a40:	08009c8b 	.word	0x08009c8b
 8009a44:	08009c8b 	.word	0x08009c8b
 8009a48:	08009a7f 	.word	0x08009a7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a4c:	4b94      	ldr	r3, [pc, #592]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0320 	and.w	r3, r3, #32
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d009      	beq.n	8009a6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a58:	4b91      	ldr	r3, [pc, #580]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	08db      	lsrs	r3, r3, #3
 8009a5e:	f003 0303 	and.w	r3, r3, #3
 8009a62:	4a90      	ldr	r2, [pc, #576]	@ (8009ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a64:	fa22 f303 	lsr.w	r3, r2, r3
 8009a68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a6a:	e111      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a6c:	4b8d      	ldr	r3, [pc, #564]	@ (8009ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a6e:	61bb      	str	r3, [r7, #24]
      break;
 8009a70:	e10e      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009a72:	4b8d      	ldr	r3, [pc, #564]	@ (8009ca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a74:	61bb      	str	r3, [r7, #24]
      break;
 8009a76:	e10b      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009a78:	4b8c      	ldr	r3, [pc, #560]	@ (8009cac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a7a:	61bb      	str	r3, [r7, #24]
      break;
 8009a7c:	e108      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a7e:	4b88      	ldr	r3, [pc, #544]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a82:	f003 0303 	and.w	r3, r3, #3
 8009a86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a88:	4b85      	ldr	r3, [pc, #532]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8c:	091b      	lsrs	r3, r3, #4
 8009a8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a94:	4b82      	ldr	r3, [pc, #520]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a9e:	4b80      	ldr	r3, [pc, #512]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa2:	08db      	lsrs	r3, r3, #3
 8009aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	fb02 f303 	mul.w	r3, r2, r3
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 80e1 	beq.w	8009c84 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	f000 8083 	beq.w	8009bd0 <HAL_RCC_GetSysClockFreq+0x204>
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	f200 80a1 	bhi.w	8009c14 <HAL_RCC_GetSysClockFreq+0x248>
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <HAL_RCC_GetSysClockFreq+0x114>
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d056      	beq.n	8009b8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8009ade:	e099      	b.n	8009c14 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0320 	and.w	r3, r3, #32
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d02d      	beq.n	8009b48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009aec:	4b6c      	ldr	r3, [pc, #432]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	08db      	lsrs	r3, r3, #3
 8009af2:	f003 0303 	and.w	r3, r3, #3
 8009af6:	4a6b      	ldr	r2, [pc, #428]	@ (8009ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009af8:	fa22 f303 	lsr.w	r3, r2, r3
 8009afc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	ee07 3a90 	vmov	s15, r3
 8009b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b16:	4b62      	ldr	r3, [pc, #392]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b2a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b46:	e087      	b.n	8009c58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b52:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009cb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b5a:	4b51      	ldr	r3, [pc, #324]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b6e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b8a:	e065      	b.n	8009c58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b96:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009cb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9e:	4b40      	ldr	r3, [pc, #256]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bb2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bce:	e043      	b.n	8009c58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bda:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009cbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8009bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be2:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bf6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c12:	e021      	b.n	8009c58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009cb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c26:	4b1e      	ldr	r3, [pc, #120]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c3a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c58:	4b11      	ldr	r3, [pc, #68]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5c:	0a5b      	lsrs	r3, r3, #9
 8009c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c62:	3301      	adds	r3, #1
 8009c64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	ee07 3a90 	vmov	s15, r3
 8009c6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7c:	ee17 3a90 	vmov	r3, s15
 8009c80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009c82:	e005      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	61bb      	str	r3, [r7, #24]
      break;
 8009c88:	e002      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009c8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c8c:	61bb      	str	r3, [r7, #24]
      break;
 8009c8e:	bf00      	nop
  }

  return sysclockfreq;
 8009c90:	69bb      	ldr	r3, [r7, #24]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3724      	adds	r7, #36	@ 0x24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	58024400 	.word	0x58024400
 8009ca4:	03d09000 	.word	0x03d09000
 8009ca8:	003d0900 	.word	0x003d0900
 8009cac:	016e3600 	.word	0x016e3600
 8009cb0:	46000000 	.word	0x46000000
 8009cb4:	4c742400 	.word	0x4c742400
 8009cb8:	4a742400 	.word	0x4a742400
 8009cbc:	4bb71b00 	.word	0x4bb71b00

08009cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cc6:	f7ff fe81 	bl	80099cc <HAL_RCC_GetSysClockFreq>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	4b10      	ldr	r3, [pc, #64]	@ (8009d10 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	0a1b      	lsrs	r3, r3, #8
 8009cd2:	f003 030f 	and.w	r3, r3, #15
 8009cd6:	490f      	ldr	r1, [pc, #60]	@ (8009d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8009cd8:	5ccb      	ldrb	r3, [r1, r3]
 8009cda:	f003 031f 	and.w	r3, r3, #31
 8009cde:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8009d10 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	f003 030f 	and.w	r3, r3, #15
 8009cec:	4a09      	ldr	r2, [pc, #36]	@ (8009d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8009cee:	5cd3      	ldrb	r3, [r2, r3]
 8009cf0:	f003 031f 	and.w	r3, r3, #31
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfa:	4a07      	ldr	r2, [pc, #28]	@ (8009d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cfe:	4a07      	ldr	r2, [pc, #28]	@ (8009d1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d04:	4b04      	ldr	r3, [pc, #16]	@ (8009d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d06:	681b      	ldr	r3, [r3, #0]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	58024400 	.word	0x58024400
 8009d14:	080123ec 	.word	0x080123ec
 8009d18:	24000010 	.word	0x24000010
 8009d1c:	2400000c 	.word	0x2400000c

08009d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d24:	f7ff ffcc 	bl	8009cc0 <HAL_RCC_GetHCLKFreq>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	4b06      	ldr	r3, [pc, #24]	@ (8009d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	091b      	lsrs	r3, r3, #4
 8009d30:	f003 0307 	and.w	r3, r3, #7
 8009d34:	4904      	ldr	r1, [pc, #16]	@ (8009d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d36:	5ccb      	ldrb	r3, [r1, r3]
 8009d38:	f003 031f 	and.w	r3, r3, #31
 8009d3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	58024400 	.word	0x58024400
 8009d48:	080123ec 	.word	0x080123ec

08009d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d50:	f7ff ffb6 	bl	8009cc0 <HAL_RCC_GetHCLKFreq>
 8009d54:	4602      	mov	r2, r0
 8009d56:	4b06      	ldr	r3, [pc, #24]	@ (8009d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d58:	69db      	ldr	r3, [r3, #28]
 8009d5a:	0a1b      	lsrs	r3, r3, #8
 8009d5c:	f003 0307 	and.w	r3, r3, #7
 8009d60:	4904      	ldr	r1, [pc, #16]	@ (8009d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d62:	5ccb      	ldrb	r3, [r1, r3]
 8009d64:	f003 031f 	and.w	r3, r3, #31
 8009d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	58024400 	.word	0x58024400
 8009d74:	080123ec 	.word	0x080123ec

08009d78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d7c:	b0c6      	sub	sp, #280	@ 0x118
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d84:	2300      	movs	r3, #0
 8009d86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d9c:	2500      	movs	r5, #0
 8009d9e:	ea54 0305 	orrs.w	r3, r4, r5
 8009da2:	d049      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009daa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009dae:	d02f      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009db0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009db4:	d828      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009db6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dba:	d01a      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009dbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dc0:	d822      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009dc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dca:	d007      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009dcc:	e01c      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dce:	4bab      	ldr	r3, [pc, #684]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd2:	4aaa      	ldr	r2, [pc, #680]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dda:	e01a      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de0:	3308      	adds	r3, #8
 8009de2:	2102      	movs	r1, #2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f002 fa49 	bl	800c27c <RCCEx_PLL2_Config>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009df0:	e00f      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df6:	3328      	adds	r3, #40	@ 0x28
 8009df8:	2102      	movs	r1, #2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f002 faf0 	bl	800c3e0 <RCCEx_PLL3_Config>
 8009e00:	4603      	mov	r3, r0
 8009e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e06:	e004      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e0e:	e000      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10a      	bne.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e1a:	4b98      	ldr	r3, [pc, #608]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e28:	4a94      	ldr	r2, [pc, #592]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e2a:	430b      	orrs	r3, r1
 8009e2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e2e:	e003      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009e44:	f04f 0900 	mov.w	r9, #0
 8009e48:	ea58 0309 	orrs.w	r3, r8, r9
 8009e4c:	d047      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d82a      	bhi.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009e58:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009e75 	.word	0x08009e75
 8009e64:	08009e83 	.word	0x08009e83
 8009e68:	08009e99 	.word	0x08009e99
 8009e6c:	08009eb7 	.word	0x08009eb7
 8009e70:	08009eb7 	.word	0x08009eb7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e74:	4b81      	ldr	r3, [pc, #516]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e78:	4a80      	ldr	r2, [pc, #512]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e80:	e01a      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e86:	3308      	adds	r3, #8
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f002 f9f6 	bl	800c27c <RCCEx_PLL2_Config>
 8009e90:	4603      	mov	r3, r0
 8009e92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e96:	e00f      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e9c:	3328      	adds	r3, #40	@ 0x28
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f002 fa9d 	bl	800c3e0 <RCCEx_PLL3_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009eac:	e004      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009eb4:	e000      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10a      	bne.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ec0:	4b6e      	ldr	r3, [pc, #440]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec4:	f023 0107 	bic.w	r1, r3, #7
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ece:	4a6b      	ldr	r2, [pc, #428]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ed4:	e003      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009eea:	f04f 0b00 	mov.w	fp, #0
 8009eee:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ef2:	d05b      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009efc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009f00:	d03b      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009f02:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009f06:	d834      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009f08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f0c:	d037      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009f0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f12:	d82e      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009f14:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f18:	d033      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009f1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f1e:	d828      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f24:	d01a      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f2a:	d822      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009f30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f34:	d007      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009f36:	e01c      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f38:	4b50      	ldr	r3, [pc, #320]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f44:	e01e      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f002 f994 	bl	800c27c <RCCEx_PLL2_Config>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f5a:	e013      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f60:	3328      	adds	r3, #40	@ 0x28
 8009f62:	2100      	movs	r1, #0
 8009f64:	4618      	mov	r0, r3
 8009f66:	f002 fa3b 	bl	800c3e0 <RCCEx_PLL3_Config>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f70:	e008      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f78:	e004      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009f7a:	bf00      	nop
 8009f7c:	e002      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009f7e:	bf00      	nop
 8009f80:	e000      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10b      	bne.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f90:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f9c:	4a37      	ldr	r2, [pc, #220]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f9e:	430b      	orrs	r3, r1
 8009fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fa2:	e003      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009fc2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	d05d      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009fd4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009fd8:	d03b      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009fda:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009fde:	d834      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009fe4:	d037      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009fe6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009fea:	d82e      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ff0:	d033      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009ff2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ff6:	d828      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ffc:	d01a      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009ffe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a002:	d822      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d003      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a00c:	d007      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a00e:	e01c      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a010:	4b1a      	ldr	r3, [pc, #104]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a014:	4a19      	ldr	r2, [pc, #100]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a01a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a01c:	e01e      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a022:	3308      	adds	r3, #8
 800a024:	2100      	movs	r1, #0
 800a026:	4618      	mov	r0, r3
 800a028:	f002 f928 	bl	800c27c <RCCEx_PLL2_Config>
 800a02c:	4603      	mov	r3, r0
 800a02e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a032:	e013      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a038:	3328      	adds	r3, #40	@ 0x28
 800a03a:	2100      	movs	r1, #0
 800a03c:	4618      	mov	r0, r3
 800a03e:	f002 f9cf 	bl	800c3e0 <RCCEx_PLL3_Config>
 800a042:	4603      	mov	r3, r0
 800a044:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a048:	e008      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a050:	e004      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a052:	bf00      	nop
 800a054:	e002      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a056:	bf00      	nop
 800a058:	e000      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a05a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a05c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10d      	bne.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a064:	4b05      	ldr	r3, [pc, #20]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a068:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a074:	4a01      	ldr	r2, [pc, #4]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a076:	430b      	orrs	r3, r1
 800a078:	6593      	str	r3, [r2, #88]	@ 0x58
 800a07a:	e005      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a07c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a094:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a098:	2300      	movs	r3, #0
 800a09a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a09e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	d03a      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ae:	2b30      	cmp	r3, #48	@ 0x30
 800a0b0:	d01f      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a0b2:	2b30      	cmp	r3, #48	@ 0x30
 800a0b4:	d819      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a0b6:	2b20      	cmp	r3, #32
 800a0b8:	d00c      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	d815      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d019      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a0c2:	2b10      	cmp	r3, #16
 800a0c4:	d111      	bne.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0c6:	4baa      	ldr	r3, [pc, #680]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ca:	4aa9      	ldr	r2, [pc, #676]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a0d2:	e011      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d8:	3308      	adds	r3, #8
 800a0da:	2102      	movs	r1, #2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f002 f8cd 	bl	800c27c <RCCEx_PLL2_Config>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a0e8:	e006      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0f0:	e002      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a0f2:	bf00      	nop
 800a0f4:	e000      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a0f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10a      	bne.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a100:	4b9b      	ldr	r3, [pc, #620]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a104:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a10e:	4a98      	ldr	r2, [pc, #608]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a110:	430b      	orrs	r3, r1
 800a112:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a114:	e003      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a11a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a12a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a12e:	2300      	movs	r3, #0
 800a130:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a134:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a138:	460b      	mov	r3, r1
 800a13a:	4313      	orrs	r3, r2
 800a13c:	d051      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a144:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a148:	d035      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a14a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a14e:	d82e      	bhi.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a150:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a154:	d031      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a156:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a15a:	d828      	bhi.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a15c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a160:	d01a      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a166:	d822      	bhi.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a16c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a170:	d007      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a172:	e01c      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a174:	4b7e      	ldr	r3, [pc, #504]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a178:	4a7d      	ldr	r2, [pc, #500]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a17a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a17e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a180:	e01c      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a186:	3308      	adds	r3, #8
 800a188:	2100      	movs	r1, #0
 800a18a:	4618      	mov	r0, r3
 800a18c:	f002 f876 	bl	800c27c <RCCEx_PLL2_Config>
 800a190:	4603      	mov	r3, r0
 800a192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a196:	e011      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19c:	3328      	adds	r3, #40	@ 0x28
 800a19e:	2100      	movs	r1, #0
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f002 f91d 	bl	800c3e0 <RCCEx_PLL3_Config>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1ac:	e006      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1b4:	e002      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a1b6:	bf00      	nop
 800a1b8:	e000      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a1ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a1c4:	4b6a      	ldr	r3, [pc, #424]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1d2:	4a67      	ldr	r2, [pc, #412]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1d4:	430b      	orrs	r3, r1
 800a1d6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a1d8:	e003      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a1ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4313      	orrs	r3, r2
 800a200:	d053      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a20c:	d033      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a20e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a212:	d82c      	bhi.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a214:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a218:	d02f      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a21a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a21e:	d826      	bhi.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a220:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a224:	d02b      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a226:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a22a:	d820      	bhi.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a22c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a230:	d012      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a232:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a236:	d81a      	bhi.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d022      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a23c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a240:	d115      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a246:	3308      	adds	r3, #8
 800a248:	2101      	movs	r1, #1
 800a24a:	4618      	mov	r0, r3
 800a24c:	f002 f816 	bl	800c27c <RCCEx_PLL2_Config>
 800a250:	4603      	mov	r3, r0
 800a252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a256:	e015      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a25c:	3328      	adds	r3, #40	@ 0x28
 800a25e:	2101      	movs	r1, #1
 800a260:	4618      	mov	r0, r3
 800a262:	f002 f8bd 	bl	800c3e0 <RCCEx_PLL3_Config>
 800a266:	4603      	mov	r3, r0
 800a268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a26c:	e00a      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a274:	e006      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a276:	bf00      	nop
 800a278:	e004      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a27a:	bf00      	nop
 800a27c:	e002      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a27e:	bf00      	nop
 800a280:	e000      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a282:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10a      	bne.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a28c:	4b38      	ldr	r3, [pc, #224]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a28e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a290:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a29a:	4a35      	ldr	r2, [pc, #212]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a29c:	430b      	orrs	r3, r1
 800a29e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2a0:	e003      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a2b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a2c0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	d058      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2d6:	d033      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a2d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2dc:	d82c      	bhi.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2e2:	d02f      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2e8:	d826      	bhi.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2ee:	d02b      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a2f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2f4:	d820      	bhi.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2fa:	d012      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a2fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a300:	d81a      	bhi.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a302:	2b00      	cmp	r3, #0
 800a304:	d022      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a30a:	d115      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a310:	3308      	adds	r3, #8
 800a312:	2101      	movs	r1, #1
 800a314:	4618      	mov	r0, r3
 800a316:	f001 ffb1 	bl	800c27c <RCCEx_PLL2_Config>
 800a31a:	4603      	mov	r3, r0
 800a31c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a320:	e015      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a326:	3328      	adds	r3, #40	@ 0x28
 800a328:	2101      	movs	r1, #1
 800a32a:	4618      	mov	r0, r3
 800a32c:	f002 f858 	bl	800c3e0 <RCCEx_PLL3_Config>
 800a330:	4603      	mov	r3, r0
 800a332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a336:	e00a      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a33e:	e006      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a340:	bf00      	nop
 800a342:	e004      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a344:	bf00      	nop
 800a346:	e002      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a348:	bf00      	nop
 800a34a:	e000      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a34e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10e      	bne.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a356:	4b06      	ldr	r3, [pc, #24]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a35a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a362:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a366:	4a02      	ldr	r2, [pc, #8]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a368:	430b      	orrs	r3, r1
 800a36a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a36c:	e006      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a36e:	bf00      	nop
 800a370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a378:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a38c:	2300      	movs	r3, #0
 800a38e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a392:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a396:	460b      	mov	r3, r1
 800a398:	4313      	orrs	r3, r2
 800a39a:	d037      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a6:	d00e      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a3a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ac:	d816      	bhi.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d018      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a3b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3b6:	d111      	bne.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3b8:	4bc4      	ldr	r3, [pc, #784]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3bc:	4ac3      	ldr	r2, [pc, #780]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a3c4:	e00f      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 ff54 	bl	800c27c <RCCEx_PLL2_Config>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a3da:	e004      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3e2:	e000      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10a      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a3ee:	4bb7      	ldr	r3, [pc, #732]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3fc:	4ab3      	ldr	r2, [pc, #716]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3fe:	430b      	orrs	r3, r1
 800a400:	6513      	str	r3, [r2, #80]	@ 0x50
 800a402:	e003      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a418:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a41c:	2300      	movs	r3, #0
 800a41e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a422:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a426:	460b      	mov	r3, r1
 800a428:	4313      	orrs	r3, r2
 800a42a:	d039      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a432:	2b03      	cmp	r3, #3
 800a434:	d81c      	bhi.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a436:	a201      	add	r2, pc, #4	@ (adr r2, 800a43c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43c:	0800a479 	.word	0x0800a479
 800a440:	0800a44d 	.word	0x0800a44d
 800a444:	0800a45b 	.word	0x0800a45b
 800a448:	0800a479 	.word	0x0800a479
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a44c:	4b9f      	ldr	r3, [pc, #636]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a450:	4a9e      	ldr	r2, [pc, #632]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a458:	e00f      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45e:	3308      	adds	r3, #8
 800a460:	2102      	movs	r1, #2
 800a462:	4618      	mov	r0, r3
 800a464:	f001 ff0a 	bl	800c27c <RCCEx_PLL2_Config>
 800a468:	4603      	mov	r3, r0
 800a46a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a46e:	e004      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a476:	e000      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a47a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a482:	4b92      	ldr	r3, [pc, #584]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a486:	f023 0103 	bic.w	r1, r3, #3
 800a48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a48e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a490:	4a8e      	ldr	r2, [pc, #568]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a492:	430b      	orrs	r3, r1
 800a494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a496:	e003      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a49c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a4ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	f000 8099 	beq.w	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4c2:	4b83      	ldr	r3, [pc, #524]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a82      	ldr	r2, [pc, #520]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a4c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a4ce:	f7f8 faf9 	bl	8002ac4 <HAL_GetTick>
 800a4d2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4d6:	e00b      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4d8:	f7f8 faf4 	bl	8002ac4 <HAL_GetTick>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	2b64      	cmp	r3, #100	@ 0x64
 800a4e6:	d903      	bls.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4ee:	e005      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4f0:	4b77      	ldr	r3, [pc, #476]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0ed      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a500:	2b00      	cmp	r3, #0
 800a502:	d173      	bne.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a504:	4b71      	ldr	r3, [pc, #452]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a506:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a50c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a510:	4053      	eors	r3, r2
 800a512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a516:	2b00      	cmp	r3, #0
 800a518:	d015      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a51a:	4b6c      	ldr	r3, [pc, #432]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a51c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a51e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a522:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a526:	4b69      	ldr	r3, [pc, #420]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a52a:	4a68      	ldr	r2, [pc, #416]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a52c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a530:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a532:	4b66      	ldr	r3, [pc, #408]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a536:	4a65      	ldr	r2, [pc, #404]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a53c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a53e:	4a63      	ldr	r2, [pc, #396]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a544:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a54a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a54e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a552:	d118      	bne.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a554:	f7f8 fab6 	bl	8002ac4 <HAL_GetTick>
 800a558:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a55c:	e00d      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a55e:	f7f8 fab1 	bl	8002ac4 <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a568:	1ad2      	subs	r2, r2, r3
 800a56a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a56e:	429a      	cmp	r2, r3
 800a570:	d903      	bls.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a578:	e005      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a57a:	4b54      	ldr	r3, [pc, #336]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0eb      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a586:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d129      	bne.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a59a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a59e:	d10e      	bne.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a5a0:	4b4a      	ldr	r3, [pc, #296]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5b0:	091a      	lsrs	r2, r3, #4
 800a5b2:	4b48      	ldr	r3, [pc, #288]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	4a45      	ldr	r2, [pc, #276]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5b8:	430b      	orrs	r3, r1
 800a5ba:	6113      	str	r3, [r2, #16]
 800a5bc:	e005      	b.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a5be:	4b43      	ldr	r3, [pc, #268]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	4a42      	ldr	r2, [pc, #264]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a5c8:	6113      	str	r3, [r2, #16]
 800a5ca:	4b40      	ldr	r3, [pc, #256]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5da:	4a3c      	ldr	r2, [pc, #240]	@ (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5dc:	430b      	orrs	r3, r1
 800a5de:	6713      	str	r3, [r2, #112]	@ 0x70
 800a5e0:	e008      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a5e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a5ea:	e003      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	f002 0301 	and.w	r3, r2, #1
 800a600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a604:	2300      	movs	r3, #0
 800a606:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a60a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a60e:	460b      	mov	r3, r1
 800a610:	4313      	orrs	r3, r2
 800a612:	f000 808f 	beq.w	800a734 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a61a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a61c:	2b28      	cmp	r3, #40	@ 0x28
 800a61e:	d871      	bhi.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a620:	a201      	add	r2, pc, #4	@ (adr r2, 800a628 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a626:	bf00      	nop
 800a628:	0800a70d 	.word	0x0800a70d
 800a62c:	0800a705 	.word	0x0800a705
 800a630:	0800a705 	.word	0x0800a705
 800a634:	0800a705 	.word	0x0800a705
 800a638:	0800a705 	.word	0x0800a705
 800a63c:	0800a705 	.word	0x0800a705
 800a640:	0800a705 	.word	0x0800a705
 800a644:	0800a705 	.word	0x0800a705
 800a648:	0800a6d9 	.word	0x0800a6d9
 800a64c:	0800a705 	.word	0x0800a705
 800a650:	0800a705 	.word	0x0800a705
 800a654:	0800a705 	.word	0x0800a705
 800a658:	0800a705 	.word	0x0800a705
 800a65c:	0800a705 	.word	0x0800a705
 800a660:	0800a705 	.word	0x0800a705
 800a664:	0800a705 	.word	0x0800a705
 800a668:	0800a6ef 	.word	0x0800a6ef
 800a66c:	0800a705 	.word	0x0800a705
 800a670:	0800a705 	.word	0x0800a705
 800a674:	0800a705 	.word	0x0800a705
 800a678:	0800a705 	.word	0x0800a705
 800a67c:	0800a705 	.word	0x0800a705
 800a680:	0800a705 	.word	0x0800a705
 800a684:	0800a705 	.word	0x0800a705
 800a688:	0800a70d 	.word	0x0800a70d
 800a68c:	0800a705 	.word	0x0800a705
 800a690:	0800a705 	.word	0x0800a705
 800a694:	0800a705 	.word	0x0800a705
 800a698:	0800a705 	.word	0x0800a705
 800a69c:	0800a705 	.word	0x0800a705
 800a6a0:	0800a705 	.word	0x0800a705
 800a6a4:	0800a705 	.word	0x0800a705
 800a6a8:	0800a70d 	.word	0x0800a70d
 800a6ac:	0800a705 	.word	0x0800a705
 800a6b0:	0800a705 	.word	0x0800a705
 800a6b4:	0800a705 	.word	0x0800a705
 800a6b8:	0800a705 	.word	0x0800a705
 800a6bc:	0800a705 	.word	0x0800a705
 800a6c0:	0800a705 	.word	0x0800a705
 800a6c4:	0800a705 	.word	0x0800a705
 800a6c8:	0800a70d 	.word	0x0800a70d
 800a6cc:	58024400 	.word	0x58024400
 800a6d0:	58024800 	.word	0x58024800
 800a6d4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6dc:	3308      	adds	r3, #8
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f001 fdcb 	bl	800c27c <RCCEx_PLL2_Config>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a6ec:	e00f      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f2:	3328      	adds	r3, #40	@ 0x28
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 fe72 	bl	800c3e0 <RCCEx_PLL3_Config>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a702:	e004      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a70a:	e000      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a70c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a70e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10a      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a716:	4bbf      	ldr	r3, [pc, #764]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a71a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a724:	4abb      	ldr	r2, [pc, #748]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a726:	430b      	orrs	r3, r1
 800a728:	6553      	str	r3, [r2, #84]	@ 0x54
 800a72a:	e003      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a730:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	f002 0302 	and.w	r3, r2, #2
 800a740:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a744:	2300      	movs	r3, #0
 800a746:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a74a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a74e:	460b      	mov	r3, r1
 800a750:	4313      	orrs	r3, r2
 800a752:	d041      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a75a:	2b05      	cmp	r3, #5
 800a75c:	d824      	bhi.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a75e:	a201      	add	r2, pc, #4	@ (adr r2, 800a764 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a7b1 	.word	0x0800a7b1
 800a768:	0800a77d 	.word	0x0800a77d
 800a76c:	0800a793 	.word	0x0800a793
 800a770:	0800a7b1 	.word	0x0800a7b1
 800a774:	0800a7b1 	.word	0x0800a7b1
 800a778:	0800a7b1 	.word	0x0800a7b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a780:	3308      	adds	r3, #8
 800a782:	2101      	movs	r1, #1
 800a784:	4618      	mov	r0, r3
 800a786:	f001 fd79 	bl	800c27c <RCCEx_PLL2_Config>
 800a78a:	4603      	mov	r3, r0
 800a78c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a790:	e00f      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a796:	3328      	adds	r3, #40	@ 0x28
 800a798:	2101      	movs	r1, #1
 800a79a:	4618      	mov	r0, r3
 800a79c:	f001 fe20 	bl	800c3e0 <RCCEx_PLL3_Config>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a7a6:	e004      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a7ae:	e000      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a7b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a7ba:	4b96      	ldr	r3, [pc, #600]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a7bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7be:	f023 0107 	bic.w	r1, r3, #7
 800a7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7c8:	4a92      	ldr	r2, [pc, #584]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a7ca:	430b      	orrs	r3, r1
 800a7cc:	6553      	str	r3, [r2, #84]	@ 0x54
 800a7ce:	e003      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	f002 0304 	and.w	r3, r2, #4
 800a7e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	d044      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a800:	2b05      	cmp	r3, #5
 800a802:	d825      	bhi.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a804:	a201      	add	r2, pc, #4	@ (adr r2, 800a80c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80a:	bf00      	nop
 800a80c:	0800a859 	.word	0x0800a859
 800a810:	0800a825 	.word	0x0800a825
 800a814:	0800a83b 	.word	0x0800a83b
 800a818:	0800a859 	.word	0x0800a859
 800a81c:	0800a859 	.word	0x0800a859
 800a820:	0800a859 	.word	0x0800a859
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a828:	3308      	adds	r3, #8
 800a82a:	2101      	movs	r1, #1
 800a82c:	4618      	mov	r0, r3
 800a82e:	f001 fd25 	bl	800c27c <RCCEx_PLL2_Config>
 800a832:	4603      	mov	r3, r0
 800a834:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a838:	e00f      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a83e:	3328      	adds	r3, #40	@ 0x28
 800a840:	2101      	movs	r1, #1
 800a842:	4618      	mov	r0, r3
 800a844:	f001 fdcc 	bl	800c3e0 <RCCEx_PLL3_Config>
 800a848:	4603      	mov	r3, r0
 800a84a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a84e:	e004      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a856:	e000      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a85a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10b      	bne.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a862:	4b6c      	ldr	r3, [pc, #432]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a866:	f023 0107 	bic.w	r1, r3, #7
 800a86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a872:	4a68      	ldr	r2, [pc, #416]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a874:	430b      	orrs	r3, r1
 800a876:	6593      	str	r3, [r2, #88]	@ 0x58
 800a878:	e003      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a87a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a87e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f002 0320 	and.w	r3, r2, #32
 800a88e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a892:	2300      	movs	r3, #0
 800a894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a898:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	d055      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a8ae:	d033      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a8b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a8b4:	d82c      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ba:	d02f      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8c0:	d826      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a8c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a8c6:	d02b      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a8c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a8cc:	d820      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a8ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d2:	d012      	beq.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a8d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d8:	d81a      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d022      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a8de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8e2:	d115      	bne.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f001 fcc5 	bl	800c27c <RCCEx_PLL2_Config>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a8f8:	e015      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8fe:	3328      	adds	r3, #40	@ 0x28
 800a900:	2102      	movs	r1, #2
 800a902:	4618      	mov	r0, r3
 800a904:	f001 fd6c 	bl	800c3e0 <RCCEx_PLL3_Config>
 800a908:	4603      	mov	r3, r0
 800a90a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a90e:	e00a      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a916:	e006      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a918:	bf00      	nop
 800a91a:	e004      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a91c:	bf00      	nop
 800a91e:	e002      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a920:	bf00      	nop
 800a922:	e000      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a924:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a926:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10b      	bne.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a92e:	4b39      	ldr	r3, [pc, #228]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a932:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a93e:	4a35      	ldr	r2, [pc, #212]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a940:	430b      	orrs	r3, r1
 800a942:	6553      	str	r3, [r2, #84]	@ 0x54
 800a944:	e003      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a94a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a95a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a95e:	2300      	movs	r3, #0
 800a960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a964:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a968:	460b      	mov	r3, r1
 800a96a:	4313      	orrs	r3, r2
 800a96c:	d058      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a976:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a97a:	d033      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a97c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a980:	d82c      	bhi.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a986:	d02f      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a98c:	d826      	bhi.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a98e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a992:	d02b      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a994:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a998:	d820      	bhi.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a99a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a99e:	d012      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a9a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9a4:	d81a      	bhi.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d022      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a9aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9ae:	d115      	bne.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f001 fc5f 	bl	800c27c <RCCEx_PLL2_Config>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a9c4:	e015      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ca:	3328      	adds	r3, #40	@ 0x28
 800a9cc:	2102      	movs	r1, #2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f001 fd06 	bl	800c3e0 <RCCEx_PLL3_Config>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a9da:	e00a      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a9e2:	e006      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9e4:	bf00      	nop
 800a9e6:	e004      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9e8:	bf00      	nop
 800a9ea:	e002      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9ec:	bf00      	nop
 800a9ee:	e000      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10e      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a9fa:	4b06      	ldr	r3, [pc, #24]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aa02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa0a:	4a02      	ldr	r2, [pc, #8]	@ (800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa0c:	430b      	orrs	r3, r1
 800aa0e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa10:	e006      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800aa12:	bf00      	nop
 800aa14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aa20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aa2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa30:	2300      	movs	r3, #0
 800aa32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	d055      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aa4c:	d033      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800aa4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aa52:	d82c      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa58:	d02f      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800aa5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa5e:	d826      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa64:	d02b      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800aa66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa6a:	d820      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa70:	d012      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800aa72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa76:	d81a      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d022      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800aa7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa80:	d115      	bne.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa86:	3308      	adds	r3, #8
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f001 fbf6 	bl	800c27c <RCCEx_PLL2_Config>
 800aa90:	4603      	mov	r3, r0
 800aa92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa96:	e015      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa9c:	3328      	adds	r3, #40	@ 0x28
 800aa9e:	2102      	movs	r1, #2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f001 fc9d 	bl	800c3e0 <RCCEx_PLL3_Config>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aaac:	e00a      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aab4:	e006      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aab6:	bf00      	nop
 800aab8:	e004      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aaba:	bf00      	nop
 800aabc:	e002      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aabe:	bf00      	nop
 800aac0:	e000      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aac4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10b      	bne.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aacc:	4ba0      	ldr	r3, [pc, #640]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aad0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800aad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aadc:	4a9c      	ldr	r2, [pc, #624]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aade:	430b      	orrs	r3, r1
 800aae0:	6593      	str	r3, [r2, #88]	@ 0x58
 800aae2:	e003      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800aaec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	f002 0308 	and.w	r3, r2, #8
 800aaf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aafc:	2300      	movs	r3, #0
 800aafe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ab02:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ab06:	460b      	mov	r3, r1
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	d01e      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ab0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab18:	d10c      	bne.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab1e:	3328      	adds	r3, #40	@ 0x28
 800ab20:	2102      	movs	r1, #2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 fc5c 	bl	800c3e0 <RCCEx_PLL3_Config>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d002      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ab34:	4b86      	ldr	r3, [pc, #536]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab44:	4a82      	ldr	r2, [pc, #520]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab46:	430b      	orrs	r3, r1
 800ab48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab52:	f002 0310 	and.w	r3, r2, #16
 800ab56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab60:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ab64:	460b      	mov	r3, r1
 800ab66:	4313      	orrs	r3, r2
 800ab68:	d01e      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab76:	d10c      	bne.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7c:	3328      	adds	r3, #40	@ 0x28
 800ab7e:	2102      	movs	r1, #2
 800ab80:	4618      	mov	r0, r3
 800ab82:	f001 fc2d 	bl	800c3e0 <RCCEx_PLL3_Config>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab92:	4b6f      	ldr	r3, [pc, #444]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ab9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aba2:	4a6b      	ldr	r2, [pc, #428]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aba4:	430b      	orrs	r3, r1
 800aba6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800abb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800abb6:	2300      	movs	r3, #0
 800abb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800abba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800abbe:	460b      	mov	r3, r1
 800abc0:	4313      	orrs	r3, r2
 800abc2:	d03e      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800abc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800abcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abd0:	d022      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800abd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abd6:	d81b      	bhi.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800abdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abe0:	d00b      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800abe2:	e015      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abe8:	3308      	adds	r3, #8
 800abea:	2100      	movs	r1, #0
 800abec:	4618      	mov	r0, r3
 800abee:	f001 fb45 	bl	800c27c <RCCEx_PLL2_Config>
 800abf2:	4603      	mov	r3, r0
 800abf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800abf8:	e00f      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfe:	3328      	adds	r3, #40	@ 0x28
 800ac00:	2102      	movs	r1, #2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f001 fbec 	bl	800c3e0 <RCCEx_PLL3_Config>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac0e:	e004      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac16:	e000      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ac18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10b      	bne.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac22:	4b4b      	ldr	r3, [pc, #300]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac32:	4a47      	ldr	r2, [pc, #284]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac34:	430b      	orrs	r3, r1
 800ac36:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac38:	e003      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ac4e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac50:	2300      	movs	r3, #0
 800ac52:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	d03b      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ac5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac6a:	d01f      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ac6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac70:	d818      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ac72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac76:	d003      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ac78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac7c:	d007      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ac7e:	e011      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac80:	4b33      	ldr	r3, [pc, #204]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac84:	4a32      	ldr	r2, [pc, #200]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac8c:	e00f      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac92:	3328      	adds	r3, #40	@ 0x28
 800ac94:	2101      	movs	r1, #1
 800ac96:	4618      	mov	r0, r3
 800ac98:	f001 fba2 	bl	800c3e0 <RCCEx_PLL3_Config>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800aca2:	e004      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800acaa:	e000      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800acac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10b      	bne.n	800acce <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800acb6:	4b26      	ldr	r3, [pc, #152]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800acbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acc6:	4a22      	ldr	r2, [pc, #136]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acc8:	430b      	orrs	r3, r1
 800acca:	6553      	str	r3, [r2, #84]	@ 0x54
 800accc:	e003      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800acd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800acd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ace2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ace4:	2300      	movs	r3, #0
 800ace6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ace8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800acec:	460b      	mov	r3, r1
 800acee:	4313      	orrs	r3, r2
 800acf0:	d034      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800acf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800acfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad00:	d007      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ad02:	e011      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad04:	4b12      	ldr	r3, [pc, #72]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad08:	4a11      	ldr	r2, [pc, #68]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ad10:	e00e      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad16:	3308      	adds	r3, #8
 800ad18:	2102      	movs	r1, #2
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f001 faae 	bl	800c27c <RCCEx_PLL2_Config>
 800ad20:	4603      	mov	r3, r0
 800ad22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ad26:	e003      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10d      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad38:	4b05      	ldr	r3, [pc, #20]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad46:	4a02      	ldr	r2, [pc, #8]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad4c:	e006      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ad4e:	bf00      	nop
 800ad50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ad5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ad68:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad6e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ad72:	460b      	mov	r3, r1
 800ad74:	4313      	orrs	r3, r2
 800ad76:	d00c      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad7c:	3328      	adds	r3, #40	@ 0x28
 800ad7e:	2102      	movs	r1, #2
 800ad80:	4618      	mov	r0, r3
 800ad82:	f001 fb2d 	bl	800c3e0 <RCCEx_PLL3_Config>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ad9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ada0:	2300      	movs	r3, #0
 800ada2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ada4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ada8:	460b      	mov	r3, r1
 800adaa:	4313      	orrs	r3, r2
 800adac:	d036      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adb8:	d018      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800adba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adbe:	d811      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800adc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adc4:	d014      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800adc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adca:	d80b      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d011      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800add0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800add4:	d106      	bne.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800add6:	4bb7      	ldr	r3, [pc, #732]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800add8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adda:	4ab6      	ldr	r2, [pc, #728]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800addc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ade0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ade2:	e008      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800adea:	e004      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800adec:	bf00      	nop
 800adee:	e002      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800adf0:	bf00      	nop
 800adf2:	e000      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800adf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800adfe:	4bad      	ldr	r3, [pc, #692]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ae06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae0c:	4aa9      	ldr	r2, [pc, #676]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae12:	e003      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ae28:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ae32:	460b      	mov	r3, r1
 800ae34:	4313      	orrs	r3, r2
 800ae36:	d009      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae38:	4b9e      	ldr	r3, [pc, #632]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ae40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae46:	4a9b      	ldr	r2, [pc, #620]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ae58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae5e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ae62:	460b      	mov	r3, r1
 800ae64:	4313      	orrs	r3, r2
 800ae66:	d009      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae68:	4b92      	ldr	r3, [pc, #584]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae6c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ae70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae76:	4a8f      	ldr	r2, [pc, #572]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae78:	430b      	orrs	r3, r1
 800ae7a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ae88:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae8e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ae92:	460b      	mov	r3, r1
 800ae94:	4313      	orrs	r3, r2
 800ae96:	d00e      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae98:	4b86      	ldr	r3, [pc, #536]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	4a85      	ldr	r2, [pc, #532]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aea2:	6113      	str	r3, [r2, #16]
 800aea4:	4b83      	ldr	r3, [pc, #524]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aea6:	6919      	ldr	r1, [r3, #16]
 800aea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aeb0:	4a80      	ldr	r2, [pc, #512]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aeb2:	430b      	orrs	r3, r1
 800aeb4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aeb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800aec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aec4:	2300      	movs	r3, #0
 800aec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aec8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800aecc:	460b      	mov	r3, r1
 800aece:	4313      	orrs	r3, r2
 800aed0:	d009      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aed2:	4b78      	ldr	r3, [pc, #480]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aed6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aee0:	4a74      	ldr	r2, [pc, #464]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aee2:	430b      	orrs	r3, r1
 800aee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800aef2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aef4:	2300      	movs	r3, #0
 800aef6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aef8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800aefc:	460b      	mov	r3, r1
 800aefe:	4313      	orrs	r3, r2
 800af00:	d00a      	beq.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af02:	4b6c      	ldr	r3, [pc, #432]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af06:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800af0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af12:	4a68      	ldr	r2, [pc, #416]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af14:	430b      	orrs	r3, r1
 800af16:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800af18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	2100      	movs	r1, #0
 800af22:	62b9      	str	r1, [r7, #40]	@ 0x28
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af2a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800af2e:	460b      	mov	r3, r1
 800af30:	4313      	orrs	r3, r2
 800af32:	d011      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af38:	3308      	adds	r3, #8
 800af3a:	2100      	movs	r1, #0
 800af3c:	4618      	mov	r0, r3
 800af3e:	f001 f99d 	bl	800c27c <RCCEx_PLL2_Config>
 800af42:	4603      	mov	r3, r0
 800af44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800af58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	2100      	movs	r1, #0
 800af62:	6239      	str	r1, [r7, #32]
 800af64:	f003 0302 	and.w	r3, r3, #2
 800af68:	627b      	str	r3, [r7, #36]	@ 0x24
 800af6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800af6e:	460b      	mov	r3, r1
 800af70:	4313      	orrs	r3, r2
 800af72:	d011      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af78:	3308      	adds	r3, #8
 800af7a:	2101      	movs	r1, #1
 800af7c:	4618      	mov	r0, r3
 800af7e:	f001 f97d 	bl	800c27c <RCCEx_PLL2_Config>
 800af82:	4603      	mov	r3, r0
 800af84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d003      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800af98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa0:	2100      	movs	r1, #0
 800afa2:	61b9      	str	r1, [r7, #24]
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	61fb      	str	r3, [r7, #28]
 800afaa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800afae:	460b      	mov	r3, r1
 800afb0:	4313      	orrs	r3, r2
 800afb2:	d011      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb8:	3308      	adds	r3, #8
 800afba:	2102      	movs	r1, #2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f001 f95d 	bl	800c27c <RCCEx_PLL2_Config>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800afc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d003      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	2100      	movs	r1, #0
 800afe2:	6139      	str	r1, [r7, #16]
 800afe4:	f003 0308 	and.w	r3, r3, #8
 800afe8:	617b      	str	r3, [r7, #20]
 800afea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800afee:	460b      	mov	r3, r1
 800aff0:	4313      	orrs	r3, r2
 800aff2:	d011      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aff8:	3328      	adds	r3, #40	@ 0x28
 800affa:	2100      	movs	r1, #0
 800affc:	4618      	mov	r0, r3
 800affe:	f001 f9ef 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b002:	4603      	mov	r3, r0
 800b004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d003      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	2100      	movs	r1, #0
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	f003 0310 	and.w	r3, r3, #16
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b02e:	460b      	mov	r3, r1
 800b030:	4313      	orrs	r3, r2
 800b032:	d011      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b038:	3328      	adds	r3, #40	@ 0x28
 800b03a:	2101      	movs	r1, #1
 800b03c:	4618      	mov	r0, r3
 800b03e:	f001 f9cf 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b042:	4603      	mov	r3, r0
 800b044:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	2100      	movs	r1, #0
 800b062:	6039      	str	r1, [r7, #0]
 800b064:	f003 0320 	and.w	r3, r3, #32
 800b068:	607b      	str	r3, [r7, #4]
 800b06a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b06e:	460b      	mov	r3, r1
 800b070:	4313      	orrs	r3, r2
 800b072:	d011      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b078:	3328      	adds	r3, #40	@ 0x28
 800b07a:	2102      	movs	r1, #2
 800b07c:	4618      	mov	r0, r3
 800b07e:	f001 f9af 	bl	800c3e0 <RCCEx_PLL3_Config>
 800b082:	4603      	mov	r3, r0
 800b084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b094:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b098:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e000      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0b2:	bf00      	nop
 800b0b4:	58024400 	.word	0x58024400

0800b0b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b090      	sub	sp, #64	@ 0x40
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b0c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	f040 8094 	bne.w	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b0d0:	4b9b      	ldr	r3, [pc, #620]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0d4:	f003 0307 	and.w	r3, r3, #7
 800b0d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	f200 8087 	bhi.w	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e8:	0800b0fd 	.word	0x0800b0fd
 800b0ec:	0800b125 	.word	0x0800b125
 800b0f0:	0800b14d 	.word	0x0800b14d
 800b0f4:	0800b1e9 	.word	0x0800b1e9
 800b0f8:	0800b175 	.word	0x0800b175
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0fc:	4b90      	ldr	r3, [pc, #576]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b104:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b108:	d108      	bne.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b10a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 ff62 	bl	800bfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b118:	f000 bc93 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b120:	f000 bc8f 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b124:	4b86      	ldr	r3, [pc, #536]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b12c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b130:	d108      	bne.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b132:	f107 0318 	add.w	r3, r7, #24
 800b136:	4618      	mov	r0, r3
 800b138:	f000 fca6 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b140:	f000 bc7f 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b148:	f000 bc7b 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b14c:	4b7c      	ldr	r3, [pc, #496]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b158:	d108      	bne.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b15a:	f107 030c 	add.w	r3, r7, #12
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 fde6 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b168:	f000 bc6b 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b170:	f000 bc67 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b174:	4b72      	ldr	r3, [pc, #456]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b178:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b17c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b17e:	4b70      	ldr	r3, [pc, #448]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0304 	and.w	r3, r3, #4
 800b186:	2b04      	cmp	r3, #4
 800b188:	d10c      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d109      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b190:	4b6b      	ldr	r3, [pc, #428]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	08db      	lsrs	r3, r3, #3
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	4a6a      	ldr	r2, [pc, #424]	@ (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b19c:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1a2:	e01f      	b.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1a4:	4b66      	ldr	r3, [pc, #408]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1b0:	d106      	bne.n	800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1b8:	d102      	bne.n	800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1ba:	4b63      	ldr	r3, [pc, #396]	@ (800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1be:	e011      	b.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1c0:	4b5f      	ldr	r3, [pc, #380]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1cc:	d106      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1d4:	d102      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1d6:	4b5d      	ldr	r3, [pc, #372]	@ (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1da:	e003      	b.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b1e0:	f000 bc2f 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1e4:	f000 bc2d 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1e8:	4b59      	ldr	r3, [pc, #356]	@ (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ec:	f000 bc29 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f4:	f000 bc25 	b.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1fc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b200:	430b      	orrs	r3, r1
 800b202:	f040 80a7 	bne.w	800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b206:	4b4e      	ldr	r3, [pc, #312]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b20a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b20e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b212:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b216:	d054      	beq.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b21e:	f200 808b 	bhi.w	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b224:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b228:	f000 8083 	beq.w	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b232:	f200 8081 	bhi.w	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b23c:	d02f      	beq.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b244:	d878      	bhi.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d004      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b252:	d012      	beq.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b254:	e070      	b.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b256:	4b3a      	ldr	r3, [pc, #232]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b25e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b262:	d107      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b268:	4618      	mov	r0, r3
 800b26a:	f000 feb5 	bl	800bfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b272:	e3e6      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b278:	e3e3      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b27a:	4b31      	ldr	r3, [pc, #196]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b286:	d107      	bne.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b288:	f107 0318 	add.w	r3, r7, #24
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fbfb 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b296:	e3d4      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b29c:	e3d1      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b29e:	4b28      	ldr	r3, [pc, #160]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2aa:	d107      	bne.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2ac:	f107 030c 	add.w	r3, r7, #12
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 fd3d 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ba:	e3c2      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c0:	e3bf      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2c2:	4b1f      	ldr	r3, [pc, #124]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b2ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	d10c      	bne.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d109      	bne.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2de:	4b18      	ldr	r3, [pc, #96]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	08db      	lsrs	r3, r3, #3
 800b2e4:	f003 0303 	and.w	r3, r3, #3
 800b2e8:	4a16      	ldr	r2, [pc, #88]	@ (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2f0:	e01e      	b.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2f2:	4b13      	ldr	r3, [pc, #76]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2fe:	d106      	bne.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b306:	d102      	bne.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b308:	4b0f      	ldr	r3, [pc, #60]	@ (800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b30c:	e010      	b.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b30e:	4b0c      	ldr	r3, [pc, #48]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b31a:	d106      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b31e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b322:	d102      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b324:	4b09      	ldr	r3, [pc, #36]	@ (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b328:	e002      	b.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b32e:	e388      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b330:	e387      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b332:	4b07      	ldr	r3, [pc, #28]	@ (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b336:	e384      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b33c:	e381      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b33e:	bf00      	nop
 800b340:	58024400 	.word	0x58024400
 800b344:	03d09000 	.word	0x03d09000
 800b348:	003d0900 	.word	0x003d0900
 800b34c:	016e3600 	.word	0x016e3600
 800b350:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b358:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b35c:	430b      	orrs	r3, r1
 800b35e:	f040 809c 	bne.w	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b362:	4b9e      	ldr	r3, [pc, #632]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b366:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b36a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b372:	d054      	beq.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b376:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b37a:	f200 808b 	bhi.w	800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b380:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b384:	f000 8083 	beq.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b38e:	f200 8081 	bhi.w	800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b398:	d02f      	beq.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3a0:	d878      	bhi.n	800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3ae:	d012      	beq.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b3b0:	e070      	b.n	800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3b2:	4b8a      	ldr	r3, [pc, #552]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3be:	d107      	bne.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f000 fe07 	bl	800bfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ce:	e338      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3d4:	e335      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3d6:	4b81      	ldr	r3, [pc, #516]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3e2:	d107      	bne.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3e4:	f107 0318 	add.w	r3, r7, #24
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 fb4d 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3f2:	e326      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f8:	e323      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3fa:	4b78      	ldr	r3, [pc, #480]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b406:	d107      	bne.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b408:	f107 030c 	add.w	r3, r7, #12
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 fc8f 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b416:	e314      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b41c:	e311      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b41e:	4b6f      	ldr	r3, [pc, #444]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b422:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b426:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b428:	4b6c      	ldr	r3, [pc, #432]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	2b04      	cmp	r3, #4
 800b432:	d10c      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b436:	2b00      	cmp	r3, #0
 800b438:	d109      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b43a:	4b68      	ldr	r3, [pc, #416]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	08db      	lsrs	r3, r3, #3
 800b440:	f003 0303 	and.w	r3, r3, #3
 800b444:	4a66      	ldr	r2, [pc, #408]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b446:	fa22 f303 	lsr.w	r3, r2, r3
 800b44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b44c:	e01e      	b.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b44e:	4b63      	ldr	r3, [pc, #396]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b45a:	d106      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b45e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b462:	d102      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b464:	4b5f      	ldr	r3, [pc, #380]	@ (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b468:	e010      	b.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b46a:	4b5c      	ldr	r3, [pc, #368]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b476:	d106      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b47e:	d102      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b480:	4b59      	ldr	r3, [pc, #356]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b484:	e002      	b.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b48a:	e2da      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b48c:	e2d9      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b48e:	4b57      	ldr	r3, [pc, #348]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b492:	e2d6      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b494:	2300      	movs	r3, #0
 800b496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b498:	e2d3      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b49e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	f040 80a7 	bne.w	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b4a8:	4b4c      	ldr	r3, [pc, #304]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b4b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4b8:	d055      	beq.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4c0:	f200 8096 	bhi.w	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b4ca:	f000 8084 	beq.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b4d4:	f200 808c 	bhi.w	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4de:	d030      	beq.n	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4e6:	f200 8083 	bhi.w	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d004      	beq.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4f6:	d012      	beq.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b4f8:	e07a      	b.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4fa:	4b38      	ldr	r3, [pc, #224]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b502:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b506:	d107      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b50c:	4618      	mov	r0, r3
 800b50e:	f000 fd63 	bl	800bfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b516:	e294      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b51c:	e291      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b51e:	4b2f      	ldr	r3, [pc, #188]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b52a:	d107      	bne.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b52c:	f107 0318 	add.w	r3, r7, #24
 800b530:	4618      	mov	r0, r3
 800b532:	f000 faa9 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b53a:	e282      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b540:	e27f      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b542:	4b26      	ldr	r3, [pc, #152]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b54a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b54e:	d107      	bne.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b550:	f107 030c 	add.w	r3, r7, #12
 800b554:	4618      	mov	r0, r3
 800b556:	f000 fbeb 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b55e:	e270      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b564:	e26d      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b566:	4b1d      	ldr	r3, [pc, #116]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b56a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b56e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b570:	4b1a      	ldr	r3, [pc, #104]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d10c      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d109      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b582:	4b16      	ldr	r3, [pc, #88]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	08db      	lsrs	r3, r3, #3
 800b588:	f003 0303 	and.w	r3, r3, #3
 800b58c:	4a14      	ldr	r2, [pc, #80]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b58e:	fa22 f303 	lsr.w	r3, r2, r3
 800b592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b594:	e01e      	b.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b596:	4b11      	ldr	r3, [pc, #68]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b59e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5a2:	d106      	bne.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b5a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5aa:	d102      	bne.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5b0:	e010      	b.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5be:	d106      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5c6:	d102      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b5c8:	4b07      	ldr	r3, [pc, #28]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5cc:	e002      	b.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b5d2:	e236      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5d4:	e235      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5d6:	4b05      	ldr	r3, [pc, #20]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5da:	e232      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5dc:	58024400 	.word	0x58024400
 800b5e0:	03d09000 	.word	0x03d09000
 800b5e4:	003d0900 	.word	0x003d0900
 800b5e8:	016e3600 	.word	0x016e3600
 800b5ec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5f4:	e225      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b5f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5fa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b5fe:	430b      	orrs	r3, r1
 800b600:	f040 8085 	bne.w	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b604:	4b9c      	ldr	r3, [pc, #624]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b608:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b60c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b614:	d06b      	beq.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b61c:	d874      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b620:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b624:	d056      	beq.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b628:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b62c:	d86c      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b630:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b634:	d03b      	beq.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b638:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b63c:	d864      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b644:	d021      	beq.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b64c:	d85c      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b650:	2b00      	cmp	r3, #0
 800b652:	d004      	beq.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b65a:	d004      	beq.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b65c:	e054      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b65e:	f7fe fb5f 	bl	8009d20 <HAL_RCC_GetPCLK1Freq>
 800b662:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b664:	e1ed      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b666:	4b84      	ldr	r3, [pc, #528]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b66e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b672:	d107      	bne.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b674:	f107 0318 	add.w	r3, r7, #24
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 fa05 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b682:	e1de      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b688:	e1db      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b68a:	4b7b      	ldr	r3, [pc, #492]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b696:	d107      	bne.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b698:	f107 030c 	add.w	r3, r7, #12
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 fb47 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6a6:	e1cc      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ac:	e1c9      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6ae:	4b72      	ldr	r3, [pc, #456]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d109      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6ba:	4b6f      	ldr	r3, [pc, #444]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	08db      	lsrs	r3, r3, #3
 800b6c0:	f003 0303 	and.w	r3, r3, #3
 800b6c4:	4a6d      	ldr	r2, [pc, #436]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6cc:	e1b9      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6d2:	e1b6      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b6d4:	4b68      	ldr	r3, [pc, #416]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6e0:	d102      	bne.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b6e2:	4b67      	ldr	r3, [pc, #412]	@ (800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6e6:	e1ac      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ec:	e1a9      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6ee:	4b62      	ldr	r3, [pc, #392]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6fa:	d102      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b6fc:	4b61      	ldr	r3, [pc, #388]	@ (800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b700:	e19f      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b706:	e19c      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b708:	2300      	movs	r3, #0
 800b70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b70c:	e199      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b70e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b712:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b716:	430b      	orrs	r3, r1
 800b718:	d173      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b71a:	4b57      	ldr	r3, [pc, #348]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b71e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b722:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b72a:	d02f      	beq.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b732:	d863      	bhi.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b736:	2b00      	cmp	r3, #0
 800b738:	d004      	beq.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b740:	d012      	beq.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b742:	e05b      	b.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b744:	4b4c      	ldr	r3, [pc, #304]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b74c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b750:	d107      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b752:	f107 0318 	add.w	r3, r7, #24
 800b756:	4618      	mov	r0, r3
 800b758:	f000 f996 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b760:	e16f      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b766:	e16c      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b768:	4b43      	ldr	r3, [pc, #268]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b774:	d107      	bne.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b776:	f107 030c 	add.w	r3, r7, #12
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 fad8 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b784:	e15d      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b78a:	e15a      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b78c:	4b3a      	ldr	r3, [pc, #232]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b78e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b790:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b794:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b796:	4b38      	ldr	r3, [pc, #224]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f003 0304 	and.w	r3, r3, #4
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	d10c      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d109      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7a8:	4b33      	ldr	r3, [pc, #204]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	08db      	lsrs	r3, r3, #3
 800b7ae:	f003 0303 	and.w	r3, r3, #3
 800b7b2:	4a32      	ldr	r2, [pc, #200]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b7b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7ba:	e01e      	b.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7bc:	4b2e      	ldr	r3, [pc, #184]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7c8:	d106      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7d0:	d102      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7d2:	4b2b      	ldr	r3, [pc, #172]	@ (800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7d6:	e010      	b.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7d8:	4b27      	ldr	r3, [pc, #156]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7e4:	d106      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7ec:	d102      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7ee:	4b25      	ldr	r3, [pc, #148]	@ (800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7f2:	e002      	b.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b7f8:	e123      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7fa:	e122      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b800:	e11f      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b802:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b806:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b80a:	430b      	orrs	r3, r1
 800b80c:	d13c      	bne.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b80e:	4b1a      	ldr	r3, [pc, #104]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b816:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d004      	beq.n	800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b824:	d012      	beq.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b826:	e023      	b.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b828:	4b13      	ldr	r3, [pc, #76]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b830:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b834:	d107      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 fbcc 	bl	800bfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b844:	e0fd      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b84a:	e0fa      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b84c:	4b0a      	ldr	r3, [pc, #40]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b858:	d107      	bne.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b85a:	f107 0318 	add.w	r3, r7, #24
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 f912 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b868:	e0eb      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b86e:	e0e8      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b874:	e0e5      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b876:	bf00      	nop
 800b878:	58024400 	.word	0x58024400
 800b87c:	03d09000 	.word	0x03d09000
 800b880:	003d0900 	.word	0x003d0900
 800b884:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b88c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b890:	430b      	orrs	r3, r1
 800b892:	f040 8085 	bne.w	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b896:	4b6d      	ldr	r3, [pc, #436]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b89a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b89e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8a6:	d06b      	beq.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8ae:	d874      	bhi.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8b6:	d056      	beq.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8be:	d86c      	bhi.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8c6:	d03b      	beq.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8ce:	d864      	bhi.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8d6:	d021      	beq.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8de:	d85c      	bhi.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d004      	beq.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8ec:	d004      	beq.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b8ee:	e054      	b.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b8f0:	f000 f8b4 	bl	800ba5c <HAL_RCCEx_GetD3PCLK1Freq>
 800b8f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8f6:	e0a4      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8f8:	4b54      	ldr	r3, [pc, #336]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b904:	d107      	bne.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b906:	f107 0318 	add.w	r3, r7, #24
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 f8bc 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b914:	e095      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b91a:	e092      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b91c:	4b4b      	ldr	r3, [pc, #300]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b928:	d107      	bne.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b92a:	f107 030c 	add.w	r3, r7, #12
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 f9fe 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b938:	e083      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b93e:	e080      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b940:	4b42      	ldr	r3, [pc, #264]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b04      	cmp	r3, #4
 800b94a:	d109      	bne.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b94c:	4b3f      	ldr	r3, [pc, #252]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	08db      	lsrs	r3, r3, #3
 800b952:	f003 0303 	and.w	r3, r3, #3
 800b956:	4a3e      	ldr	r2, [pc, #248]	@ (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b958:	fa22 f303 	lsr.w	r3, r2, r3
 800b95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b95e:	e070      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b960:	2300      	movs	r3, #0
 800b962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b964:	e06d      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b966:	4b39      	ldr	r3, [pc, #228]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b96e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b972:	d102      	bne.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b974:	4b37      	ldr	r3, [pc, #220]	@ (800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b978:	e063      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b97e:	e060      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b980:	4b32      	ldr	r3, [pc, #200]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b98c:	d102      	bne.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b98e:	4b32      	ldr	r3, [pc, #200]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b992:	e056      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b998:	e053      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b99e:	e050      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b9a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9a4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b9a8:	430b      	orrs	r3, r1
 800b9aa:	d148      	bne.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b9ac:	4b27      	ldr	r3, [pc, #156]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b9b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9bc:	d02a      	beq.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9c4:	d838      	bhi.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d004      	beq.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9d2:	d00d      	beq.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b9d4:	e030      	b.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9d6:	4b1d      	ldr	r3, [pc, #116]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9e2:	d102      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b9e4:	4b1c      	ldr	r3, [pc, #112]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e8:	e02b      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9ee:	e028      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9f0:	4b16      	ldr	r3, [pc, #88]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9fc:	d107      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba02:	4618      	mov	r0, r3
 800ba04:	f000 fae8 	bl	800bfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba0c:	e019      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba12:	e016      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba14:	4b0d      	ldr	r3, [pc, #52]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba20:	d107      	bne.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba22:	f107 0318 	add.w	r3, r7, #24
 800ba26:	4618      	mov	r0, r3
 800ba28:	f000 f82e 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba30:	e007      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba36:	e004      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba3c:	e001      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ba42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3740      	adds	r7, #64	@ 0x40
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	58024400 	.word	0x58024400
 800ba50:	03d09000 	.word	0x03d09000
 800ba54:	003d0900 	.word	0x003d0900
 800ba58:	016e3600 	.word	0x016e3600

0800ba5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba60:	f7fe f92e 	bl	8009cc0 <HAL_RCC_GetHCLKFreq>
 800ba64:	4602      	mov	r2, r0
 800ba66:	4b06      	ldr	r3, [pc, #24]	@ (800ba80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	091b      	lsrs	r3, r3, #4
 800ba6c:	f003 0307 	and.w	r3, r3, #7
 800ba70:	4904      	ldr	r1, [pc, #16]	@ (800ba84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ba72:	5ccb      	ldrb	r3, [r1, r3]
 800ba74:	f003 031f 	and.w	r3, r3, #31
 800ba78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	58024400 	.word	0x58024400
 800ba84:	080123ec 	.word	0x080123ec

0800ba88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b089      	sub	sp, #36	@ 0x24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba90:	4ba1      	ldr	r3, [pc, #644]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba94:	f003 0303 	and.w	r3, r3, #3
 800ba98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba9a:	4b9f      	ldr	r3, [pc, #636]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba9e:	0b1b      	lsrs	r3, r3, #12
 800baa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800baa4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800baa6:	4b9c      	ldr	r3, [pc, #624]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baaa:	091b      	lsrs	r3, r3, #4
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bab2:	4b99      	ldr	r3, [pc, #612]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bab6:	08db      	lsrs	r3, r3, #3
 800bab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	fb02 f303 	mul.w	r3, r2, r3
 800bac2:	ee07 3a90 	vmov	s15, r3
 800bac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f000 8111 	beq.w	800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	2b02      	cmp	r3, #2
 800bada:	f000 8083 	beq.w	800bbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	f200 80a1 	bhi.w	800bc28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d056      	beq.n	800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800baf2:	e099      	b.n	800bc28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baf4:	4b88      	ldr	r3, [pc, #544]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 0320 	and.w	r3, r3, #32
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d02d      	beq.n	800bb5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb00:	4b85      	ldr	r3, [pc, #532]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	08db      	lsrs	r3, r3, #3
 800bb06:	f003 0303 	and.w	r3, r3, #3
 800bb0a:	4a84      	ldr	r2, [pc, #528]	@ (800bd1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bb0c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	ee07 3a90 	vmov	s15, r3
 800bb18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	ee07 3a90 	vmov	s15, r3
 800bb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb2a:	4b7b      	ldr	r3, [pc, #492]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb32:	ee07 3a90 	vmov	s15, r3
 800bb36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb5a:	e087      	b.n	800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	ee07 3a90 	vmov	s15, r3
 800bb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bd24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bb6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb6e:	4b6a      	ldr	r3, [pc, #424]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb76:	ee07 3a90 	vmov	s15, r3
 800bb7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb9e:	e065      	b.n	800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	ee07 3a90 	vmov	s15, r3
 800bba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bd28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bbae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbb2:	4b59      	ldr	r3, [pc, #356]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbe2:	e043      	b.n	800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	ee07 3a90 	vmov	s15, r3
 800bbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bd2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bbf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbf6:	4b48      	ldr	r3, [pc, #288]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbfe:	ee07 3a90 	vmov	s15, r3
 800bc02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc06:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc26:	e021      	b.n	800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	ee07 3a90 	vmov	s15, r3
 800bc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bd28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc3a:	4b37      	ldr	r3, [pc, #220]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc42:	ee07 3a90 	vmov	s15, r3
 800bc46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bc6c:	4b2a      	ldr	r3, [pc, #168]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc70:	0a5b      	lsrs	r3, r3, #9
 800bc72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc86:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc92:	ee17 2a90 	vmov	r2, s15
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bc9a:	4b1f      	ldr	r3, [pc, #124]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc9e:	0c1b      	lsrs	r3, r3, #16
 800bca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bca4:	ee07 3a90 	vmov	s15, r3
 800bca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcc0:	ee17 2a90 	vmov	r2, s15
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bcc8:	4b13      	ldr	r3, [pc, #76]	@ (800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bccc:	0e1b      	lsrs	r3, r3, #24
 800bcce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bce2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcee:	ee17 2a90 	vmov	r2, s15
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bcf6:	e008      	b.n	800bd0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	609a      	str	r2, [r3, #8]
}
 800bd0a:	bf00      	nop
 800bd0c:	3724      	adds	r7, #36	@ 0x24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	58024400 	.word	0x58024400
 800bd1c:	03d09000 	.word	0x03d09000
 800bd20:	46000000 	.word	0x46000000
 800bd24:	4c742400 	.word	0x4c742400
 800bd28:	4a742400 	.word	0x4a742400
 800bd2c:	4bb71b00 	.word	0x4bb71b00

0800bd30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b089      	sub	sp, #36	@ 0x24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd38:	4ba1      	ldr	r3, [pc, #644]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3c:	f003 0303 	and.w	r3, r3, #3
 800bd40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bd42:	4b9f      	ldr	r3, [pc, #636]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd46:	0d1b      	lsrs	r3, r3, #20
 800bd48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd4e:	4b9c      	ldr	r3, [pc, #624]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd52:	0a1b      	lsrs	r3, r3, #8
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bd5a:	4b99      	ldr	r3, [pc, #612]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd5e:	08db      	lsrs	r3, r3, #3
 800bd60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	fb02 f303 	mul.w	r3, r2, r3
 800bd6a:	ee07 3a90 	vmov	s15, r3
 800bd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 8111 	beq.w	800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	f000 8083 	beq.w	800be8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	f200 80a1 	bhi.w	800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d003      	beq.n	800bd9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d056      	beq.n	800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bd9a:	e099      	b.n	800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd9c:	4b88      	ldr	r3, [pc, #544]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 0320 	and.w	r3, r3, #32
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d02d      	beq.n	800be04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bda8:	4b85      	ldr	r3, [pc, #532]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	08db      	lsrs	r3, r3, #3
 800bdae:	f003 0303 	and.w	r3, r3, #3
 800bdb2:	4a84      	ldr	r2, [pc, #528]	@ (800bfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bdb4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	ee07 3a90 	vmov	s15, r3
 800bdc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	ee07 3a90 	vmov	s15, r3
 800bdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdd2:	4b7b      	ldr	r3, [pc, #492]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdda:	ee07 3a90 	vmov	s15, r3
 800bdde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bde2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bde6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be02:	e087      	b.n	800bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	ee07 3a90 	vmov	s15, r3
 800be0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bfcc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800be12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be16:	4b6a      	ldr	r3, [pc, #424]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1e:	ee07 3a90 	vmov	s15, r3
 800be22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be26:	ed97 6a03 	vldr	s12, [r7, #12]
 800be2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be46:	e065      	b.n	800bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	ee07 3a90 	vmov	s15, r3
 800be4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be5a:	4b59      	ldr	r3, [pc, #356]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be62:	ee07 3a90 	vmov	s15, r3
 800be66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be8a:	e043      	b.n	800bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	ee07 3a90 	vmov	s15, r3
 800be92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bfd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800be9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be9e:	4b48      	ldr	r3, [pc, #288]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea6:	ee07 3a90 	vmov	s15, r3
 800beaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beae:	ed97 6a03 	vldr	s12, [r7, #12]
 800beb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bece:	e021      	b.n	800bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	ee07 3a90 	vmov	s15, r3
 800bed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bee2:	4b37      	ldr	r3, [pc, #220]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beea:	ee07 3a90 	vmov	s15, r3
 800beee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bef2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bef6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800befa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800befe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bf14:	4b2a      	ldr	r3, [pc, #168]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf18:	0a5b      	lsrs	r3, r3, #9
 800bf1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf3a:	ee17 2a90 	vmov	r2, s15
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bf42:	4b1f      	ldr	r3, [pc, #124]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf46:	0c1b      	lsrs	r3, r3, #16
 800bf48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf4c:	ee07 3a90 	vmov	s15, r3
 800bf50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf68:	ee17 2a90 	vmov	r2, s15
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bf70:	4b13      	ldr	r3, [pc, #76]	@ (800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf74:	0e1b      	lsrs	r3, r3, #24
 800bf76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf7a:	ee07 3a90 	vmov	s15, r3
 800bf7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf96:	ee17 2a90 	vmov	r2, s15
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf9e:	e008      	b.n	800bfb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	609a      	str	r2, [r3, #8]
}
 800bfb2:	bf00      	nop
 800bfb4:	3724      	adds	r7, #36	@ 0x24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	58024400 	.word	0x58024400
 800bfc4:	03d09000 	.word	0x03d09000
 800bfc8:	46000000 	.word	0x46000000
 800bfcc:	4c742400 	.word	0x4c742400
 800bfd0:	4a742400 	.word	0x4a742400
 800bfd4:	4bb71b00 	.word	0x4bb71b00

0800bfd8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b089      	sub	sp, #36	@ 0x24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfe0:	4ba0      	ldr	r3, [pc, #640]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe4:	f003 0303 	and.w	r3, r3, #3
 800bfe8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bfea:	4b9e      	ldr	r3, [pc, #632]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfee:	091b      	lsrs	r3, r3, #4
 800bff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bff4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bff6:	4b9b      	ldr	r3, [pc, #620]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bffa:	f003 0301 	and.w	r3, r3, #1
 800bffe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c000:	4b98      	ldr	r3, [pc, #608]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c004:	08db      	lsrs	r3, r3, #3
 800c006:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	fb02 f303 	mul.w	r3, r2, r3
 800c010:	ee07 3a90 	vmov	s15, r3
 800c014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c018:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 8111 	beq.w	800c246 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	2b02      	cmp	r3, #2
 800c028:	f000 8083 	beq.w	800c132 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	2b02      	cmp	r3, #2
 800c030:	f200 80a1 	bhi.w	800c176 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d056      	beq.n	800c0ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c040:	e099      	b.n	800c176 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c042:	4b88      	ldr	r3, [pc, #544]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0320 	and.w	r3, r3, #32
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d02d      	beq.n	800c0aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c04e:	4b85      	ldr	r3, [pc, #532]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	08db      	lsrs	r3, r3, #3
 800c054:	f003 0303 	and.w	r3, r3, #3
 800c058:	4a83      	ldr	r2, [pc, #524]	@ (800c268 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c05a:	fa22 f303 	lsr.w	r3, r2, r3
 800c05e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	ee07 3a90 	vmov	s15, r3
 800c070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c078:	4b7a      	ldr	r3, [pc, #488]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c07a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c080:	ee07 3a90 	vmov	s15, r3
 800c084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c088:	ed97 6a03 	vldr	s12, [r7, #12]
 800c08c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c098:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c09c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c0a8:	e087      	b.n	800c1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	ee07 3a90 	vmov	s15, r3
 800c0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c270 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0bc:	4b69      	ldr	r3, [pc, #420]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c4:	ee07 3a90 	vmov	s15, r3
 800c0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0d0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ec:	e065      	b.n	800c1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c274 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c100:	4b58      	ldr	r3, [pc, #352]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c108:	ee07 3a90 	vmov	s15, r3
 800c10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c110:	ed97 6a03 	vldr	s12, [r7, #12]
 800c114:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c120:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c12c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c130:	e043      	b.n	800c1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	ee07 3a90 	vmov	s15, r3
 800c138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c13c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c144:	4b47      	ldr	r3, [pc, #284]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c14c:	ee07 3a90 	vmov	s15, r3
 800c150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c154:	ed97 6a03 	vldr	s12, [r7, #12]
 800c158:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c15c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c164:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c170:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c174:	e021      	b.n	800c1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	ee07 3a90 	vmov	s15, r3
 800c17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c180:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c270 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c188:	4b36      	ldr	r3, [pc, #216]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c190:	ee07 3a90 	vmov	s15, r3
 800c194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c198:	ed97 6a03 	vldr	s12, [r7, #12]
 800c19c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c1ba:	4b2a      	ldr	r3, [pc, #168]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1be:	0a5b      	lsrs	r3, r3, #9
 800c1c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1c4:	ee07 3a90 	vmov	s15, r3
 800c1c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1e0:	ee17 2a90 	vmov	r2, s15
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c1e8:	4b1e      	ldr	r3, [pc, #120]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1ec:	0c1b      	lsrs	r3, r3, #16
 800c1ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1f2:	ee07 3a90 	vmov	s15, r3
 800c1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c202:	edd7 6a07 	vldr	s13, [r7, #28]
 800c206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c20a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c20e:	ee17 2a90 	vmov	r2, s15
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c216:	4b13      	ldr	r3, [pc, #76]	@ (800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c21a:	0e1b      	lsrs	r3, r3, #24
 800c21c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c220:	ee07 3a90 	vmov	s15, r3
 800c224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c228:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c22c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c230:	edd7 6a07 	vldr	s13, [r7, #28]
 800c234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c23c:	ee17 2a90 	vmov	r2, s15
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c244:	e008      	b.n	800c258 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	609a      	str	r2, [r3, #8]
}
 800c258:	bf00      	nop
 800c25a:	3724      	adds	r7, #36	@ 0x24
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	58024400 	.word	0x58024400
 800c268:	03d09000 	.word	0x03d09000
 800c26c:	46000000 	.word	0x46000000
 800c270:	4c742400 	.word	0x4c742400
 800c274:	4a742400 	.word	0x4a742400
 800c278:	4bb71b00 	.word	0x4bb71b00

0800c27c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c28a:	4b53      	ldr	r3, [pc, #332]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c28e:	f003 0303 	and.w	r3, r3, #3
 800c292:	2b03      	cmp	r3, #3
 800c294:	d101      	bne.n	800c29a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e099      	b.n	800c3ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c29a:	4b4f      	ldr	r3, [pc, #316]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a4e      	ldr	r2, [pc, #312]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c2a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c2a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2a6:	f7f6 fc0d 	bl	8002ac4 <HAL_GetTick>
 800c2aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2ac:	e008      	b.n	800c2c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2ae:	f7f6 fc09 	bl	8002ac4 <HAL_GetTick>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	d901      	bls.n	800c2c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2bc:	2303      	movs	r3, #3
 800c2be:	e086      	b.n	800c3ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2c0:	4b45      	ldr	r3, [pc, #276]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1f0      	bne.n	800c2ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c2cc:	4b42      	ldr	r3, [pc, #264]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	031b      	lsls	r3, r3, #12
 800c2da:	493f      	ldr	r1, [pc, #252]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	628b      	str	r3, [r1, #40]	@ 0x28
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	025b      	lsls	r3, r3, #9
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	041b      	lsls	r3, r3, #16
 800c2fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c302:	431a      	orrs	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	691b      	ldr	r3, [r3, #16]
 800c308:	3b01      	subs	r3, #1
 800c30a:	061b      	lsls	r3, r3, #24
 800c30c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c310:	4931      	ldr	r1, [pc, #196]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c312:	4313      	orrs	r3, r2
 800c314:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c316:	4b30      	ldr	r3, [pc, #192]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c31a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	492d      	ldr	r1, [pc, #180]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c324:	4313      	orrs	r3, r2
 800c326:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c328:	4b2b      	ldr	r3, [pc, #172]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c32c:	f023 0220 	bic.w	r2, r3, #32
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	699b      	ldr	r3, [r3, #24]
 800c334:	4928      	ldr	r1, [pc, #160]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c336:	4313      	orrs	r3, r2
 800c338:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c33a:	4b27      	ldr	r3, [pc, #156]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c33e:	4a26      	ldr	r2, [pc, #152]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c340:	f023 0310 	bic.w	r3, r3, #16
 800c344:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c346:	4b24      	ldr	r3, [pc, #144]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c34a:	4b24      	ldr	r3, [pc, #144]	@ (800c3dc <RCCEx_PLL2_Config+0x160>)
 800c34c:	4013      	ands	r3, r2
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	69d2      	ldr	r2, [r2, #28]
 800c352:	00d2      	lsls	r2, r2, #3
 800c354:	4920      	ldr	r1, [pc, #128]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c356:	4313      	orrs	r3, r2
 800c358:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c35a:	4b1f      	ldr	r3, [pc, #124]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35e:	4a1e      	ldr	r2, [pc, #120]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c360:	f043 0310 	orr.w	r3, r3, #16
 800c364:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d106      	bne.n	800c37a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c36c:	4b1a      	ldr	r3, [pc, #104]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c370:	4a19      	ldr	r2, [pc, #100]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c372:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c376:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c378:	e00f      	b.n	800c39a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d106      	bne.n	800c38e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c380:	4b15      	ldr	r3, [pc, #84]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c384:	4a14      	ldr	r2, [pc, #80]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c38a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c38c:	e005      	b.n	800c39a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c38e:	4b12      	ldr	r3, [pc, #72]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c392:	4a11      	ldr	r2, [pc, #68]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c394:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c398:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c39a:	4b0f      	ldr	r3, [pc, #60]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a0e      	ldr	r2, [pc, #56]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c3a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c3a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3a6:	f7f6 fb8d 	bl	8002ac4 <HAL_GetTick>
 800c3aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3ac:	e008      	b.n	800c3c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3ae:	f7f6 fb89 	bl	8002ac4 <HAL_GetTick>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d901      	bls.n	800c3c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	e006      	b.n	800c3ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3c0:	4b05      	ldr	r3, [pc, #20]	@ (800c3d8 <RCCEx_PLL2_Config+0x15c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0f0      	beq.n	800c3ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	58024400 	.word	0x58024400
 800c3dc:	ffff0007 	.word	0xffff0007

0800c3e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3ee:	4b53      	ldr	r3, [pc, #332]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3f2:	f003 0303 	and.w	r3, r3, #3
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d101      	bne.n	800c3fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e099      	b.n	800c532 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c3fe:	4b4f      	ldr	r3, [pc, #316]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a4e      	ldr	r2, [pc, #312]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c40a:	f7f6 fb5b 	bl	8002ac4 <HAL_GetTick>
 800c40e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c410:	e008      	b.n	800c424 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c412:	f7f6 fb57 	bl	8002ac4 <HAL_GetTick>
 800c416:	4602      	mov	r2, r0
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d901      	bls.n	800c424 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c420:	2303      	movs	r3, #3
 800c422:	e086      	b.n	800c532 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c424:	4b45      	ldr	r3, [pc, #276]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1f0      	bne.n	800c412 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c430:	4b42      	ldr	r3, [pc, #264]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c434:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	051b      	lsls	r3, r3, #20
 800c43e:	493f      	ldr	r1, [pc, #252]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c440:	4313      	orrs	r3, r2
 800c442:	628b      	str	r3, [r1, #40]	@ 0x28
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	3b01      	subs	r3, #1
 800c44a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	3b01      	subs	r3, #1
 800c454:	025b      	lsls	r3, r3, #9
 800c456:	b29b      	uxth	r3, r3
 800c458:	431a      	orrs	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	3b01      	subs	r3, #1
 800c460:	041b      	lsls	r3, r3, #16
 800c462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c466:	431a      	orrs	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	061b      	lsls	r3, r3, #24
 800c470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c474:	4931      	ldr	r1, [pc, #196]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c476:	4313      	orrs	r3, r2
 800c478:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c47a:	4b30      	ldr	r3, [pc, #192]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c47e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	492d      	ldr	r1, [pc, #180]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c488:	4313      	orrs	r3, r2
 800c48a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c48c:	4b2b      	ldr	r3, [pc, #172]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c490:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	4928      	ldr	r1, [pc, #160]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c49e:	4b27      	ldr	r3, [pc, #156]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a2:	4a26      	ldr	r2, [pc, #152]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c4aa:	4b24      	ldr	r3, [pc, #144]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4ae:	4b24      	ldr	r3, [pc, #144]	@ (800c540 <RCCEx_PLL3_Config+0x160>)
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	69d2      	ldr	r2, [r2, #28]
 800c4b6:	00d2      	lsls	r2, r2, #3
 800c4b8:	4920      	ldr	r1, [pc, #128]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c4be:	4b1f      	ldr	r3, [pc, #124]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c2:	4a1e      	ldr	r2, [pc, #120]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d106      	bne.n	800c4de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c4d0:	4b1a      	ldr	r3, [pc, #104]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d4:	4a19      	ldr	r2, [pc, #100]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c4da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4dc:	e00f      	b.n	800c4fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d106      	bne.n	800c4f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c4e4:	4b15      	ldr	r3, [pc, #84]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e8:	4a14      	ldr	r2, [pc, #80]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c4ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4f0:	e005      	b.n	800c4fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c4f2:	4b12      	ldr	r3, [pc, #72]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f6:	4a11      	ldr	r2, [pc, #68]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c4f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a0e      	ldr	r2, [pc, #56]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c50a:	f7f6 fadb 	bl	8002ac4 <HAL_GetTick>
 800c50e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c510:	e008      	b.n	800c524 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c512:	f7f6 fad7 	bl	8002ac4 <HAL_GetTick>
 800c516:	4602      	mov	r2, r0
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	1ad3      	subs	r3, r2, r3
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	d901      	bls.n	800c524 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c520:	2303      	movs	r3, #3
 800c522:	e006      	b.n	800c532 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c524:	4b05      	ldr	r3, [pc, #20]	@ (800c53c <RCCEx_PLL3_Config+0x15c>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0f0      	beq.n	800c512 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c530:	7bfb      	ldrb	r3, [r7, #15]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	58024400 	.word	0x58024400
 800c540:	ffff0007 	.word	0xffff0007

0800c544 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08a      	sub	sp, #40	@ 0x28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e075      	b.n	800c642 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d105      	bne.n	800c56e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7f5 ff09 	bl	8002380 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2204      	movs	r2, #4
 800c572:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f868 	bl	800c64c <HAL_SD_InitCard>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e05d      	b.n	800c642 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c586:	f107 0308 	add.w	r3, r7, #8
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fdaf 	bl	800d0f0 <HAL_SD_GetCardStatus>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d001      	beq.n	800c59c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e052      	b.n	800c642 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c59c:	7e3b      	ldrb	r3, [r7, #24]
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c5a2:	7e7b      	ldrb	r3, [r7, #25]
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d10a      	bne.n	800c5c6 <HAL_SD_Init+0x82>
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <HAL_SD_Init+0x78>
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d004      	beq.n	800c5c6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5c2:	659a      	str	r2, [r3, #88]	@ 0x58
 800c5c4:	e00b      	b.n	800c5de <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d104      	bne.n	800c5d8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5d4:	659a      	str	r2, [r3, #88]	@ 0x58
 800c5d6:	e002      	b.n	800c5de <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fe6d 	bl	800d2c4 <HAL_SD_ConfigWideBusOperation>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d001      	beq.n	800c5f4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e026      	b.n	800c642 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c5f4:	f7f6 fa66 	bl	8002ac4 <HAL_GetTick>
 800c5f8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c5fa:	e011      	b.n	800c620 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c5fc:	f7f6 fa62 	bl	8002ac4 <HAL_GetTick>
 800c600:	4602      	mov	r2, r0
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60a:	d109      	bne.n	800c620 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c612:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e010      	b.n	800c642 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 ff61 	bl	800d4e8 <HAL_SD_GetCardState>
 800c626:	4603      	mov	r3, r0
 800c628:	2b04      	cmp	r3, #4
 800c62a:	d1e7      	bne.n	800c5fc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3728      	adds	r7, #40	@ 0x28
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
	...

0800c64c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c64c:	b590      	push	{r4, r7, lr}
 800c64e:	b08d      	sub	sp, #52	@ 0x34
 800c650:	af02      	add	r7, sp, #8
 800c652:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c654:	2300      	movs	r3, #0
 800c656:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c658:	2300      	movs	r3, #0
 800c65a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c65c:	2300      	movs	r3, #0
 800c65e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c660:	2300      	movs	r3, #0
 800c662:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c664:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c668:	f04f 0100 	mov.w	r1, #0
 800c66c:	f7fe fd24 	bl	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c670:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c674:	2b00      	cmp	r3, #0
 800c676:	d109      	bne.n	800c68c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c686:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	e070      	b.n	800c76e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	0a1b      	lsrs	r3, r3, #8
 800c690:	4a39      	ldr	r2, [pc, #228]	@ (800c778 <HAL_SD_InitCard+0x12c>)
 800c692:	fba2 2303 	umull	r2, r3, r2, r3
 800c696:	091b      	lsrs	r3, r3, #4
 800c698:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681c      	ldr	r4, [r3, #0]
 800c69e:	466a      	mov	r2, sp
 800c6a0:	f107 0318 	add.w	r3, r7, #24
 800c6a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c6a8:	e882 0003 	stmia.w	r2, {r0, r1}
 800c6ac:	f107 030c 	add.w	r3, r7, #12
 800c6b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f003 fffe 	bl	80106b4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f004 f841 	bl	8010744 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d005      	beq.n	800c6d4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d007      	beq.n	800c6ea <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c6da:	4a28      	ldr	r2, [pc, #160]	@ (800c77c <HAL_SD_InitCard+0x130>)
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7f6 f9f9 	bl	8002adc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 ffea 	bl	800d6c4 <SD_PowerON>
 800c6f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c704:	6a3b      	ldr	r3, [r7, #32]
 800c706:	431a      	orrs	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c70c:	2301      	movs	r3, #1
 800c70e:	e02e      	b.n	800c76e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 ff09 	bl	800d528 <SD_InitCard>
 800c716:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00b      	beq.n	800c736 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c72a:	6a3b      	ldr	r3, [r7, #32]
 800c72c:	431a      	orrs	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e01b      	b.n	800c76e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c73e:	4618      	mov	r0, r3
 800c740:	f004 f896 	bl	8010870 <SDMMC_CmdBlockLength>
 800c744:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00f      	beq.n	800c76c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a0b      	ldr	r2, [pc, #44]	@ (800c780 <HAL_SD_InitCard+0x134>)
 800c752:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	431a      	orrs	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c768:	2301      	movs	r3, #1
 800c76a:	e000      	b.n	800c76e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	372c      	adds	r7, #44	@ 0x2c
 800c772:	46bd      	mov	sp, r7
 800c774:	bd90      	pop	{r4, r7, pc}
 800c776:	bf00      	nop
 800c778:	014f8b59 	.word	0x014f8b59
 800c77c:	00012110 	.word	0x00012110
 800c780:	1fe00fff 	.word	0x1fe00fff

0800c784 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b08c      	sub	sp, #48	@ 0x30
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
 800c790:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d107      	bne.n	800c7ac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e08d      	b.n	800c8c8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	f040 8086 	bne.w	800c8c6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c7c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	441a      	add	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d907      	bls.n	800c7de <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7d2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e074      	b.n	800c8c8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2203      	movs	r2, #3
 800c7e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	025a      	lsls	r2, r3, #9
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c800:	2b01      	cmp	r3, #1
 800c802:	d002      	beq.n	800c80a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c806:	025b      	lsls	r3, r3, #9
 800c808:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c80a:	f04f 33ff 	mov.w	r3, #4294967295
 800c80e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	025b      	lsls	r3, r3, #9
 800c814:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c816:	2390      	movs	r3, #144	@ 0x90
 800c818:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c81a:	2302      	movs	r3, #2
 800c81c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c81e:	2300      	movs	r3, #0
 800c820:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c822:	2300      	movs	r3, #0
 800c824:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f107 0210 	add.w	r2, r7, #16
 800c82e:	4611      	mov	r1, r2
 800c830:	4618      	mov	r0, r3
 800c832:	f003 fff1 	bl	8010818 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68da      	ldr	r2, [r3, #12]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c844:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2201      	movs	r2, #1
 800c854:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d90a      	bls.n	800c872 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2282      	movs	r2, #130	@ 0x82
 800c860:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c868:	4618      	mov	r0, r3
 800c86a:	f004 f847 	bl	80108fc <SDMMC_CmdReadMultiBlock>
 800c86e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c870:	e009      	b.n	800c886 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2281      	movs	r2, #129	@ 0x81
 800c876:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c87e:	4618      	mov	r0, r3
 800c880:	f004 f819 	bl	80108b6 <SDMMC_CmdReadSingleBlock>
 800c884:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d012      	beq.n	800c8b2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a0f      	ldr	r2, [pc, #60]	@ (800c8d0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c892:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c89a:	431a      	orrs	r2, r3
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e00a      	b.n	800c8c8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c8c0:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	e000      	b.n	800c8c8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c8c6:	2302      	movs	r3, #2
  }
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3730      	adds	r7, #48	@ 0x30
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	1fe00fff 	.word	0x1fe00fff

0800c8d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08c      	sub	sp, #48	@ 0x30
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d107      	bne.n	800c8fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e08d      	b.n	800ca18 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b01      	cmp	r3, #1
 800c906:	f040 8086 	bne.w	800ca16 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	441a      	add	r2, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d907      	bls.n	800c92e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c922:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	e074      	b.n	800ca18 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2203      	movs	r2, #3
 800c932:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2200      	movs	r2, #0
 800c93c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	68ba      	ldr	r2, [r7, #8]
 800c942:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	025a      	lsls	r2, r3, #9
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c950:	2b01      	cmp	r3, #1
 800c952:	d002      	beq.n	800c95a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c956:	025b      	lsls	r3, r3, #9
 800c958:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c95a:	f04f 33ff 	mov.w	r3, #4294967295
 800c95e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	025b      	lsls	r3, r3, #9
 800c964:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c966:	2390      	movs	r3, #144	@ 0x90
 800c968:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c96a:	2300      	movs	r3, #0
 800c96c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c96e:	2300      	movs	r3, #0
 800c970:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c972:	2300      	movs	r3, #0
 800c974:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f107 0210 	add.w	r2, r7, #16
 800c97e:	4611      	mov	r1, r2
 800c980:	4618      	mov	r0, r3
 800c982:	f003 ff49 	bl	8010818 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68da      	ldr	r2, [r3, #12]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c994:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d90a      	bls.n	800c9c2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	22a0      	movs	r2, #160	@ 0xa0
 800c9b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f003 ffe5 	bl	8010988 <SDMMC_CmdWriteMultiBlock>
 800c9be:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c9c0:	e009      	b.n	800c9d6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2290      	movs	r2, #144	@ 0x90
 800c9c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f003 ffb7 	bl	8010942 <SDMMC_CmdWriteSingleBlock>
 800c9d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d012      	beq.n	800ca02 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a0f      	ldr	r2, [pc, #60]	@ (800ca20 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c9e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ea:	431a      	orrs	r2, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e00a      	b.n	800ca18 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800ca10:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	e000      	b.n	800ca18 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ca16:	2302      	movs	r3, #2
  }
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3730      	adds	r7, #48	@ 0x30
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	1fe00fff 	.word	0x1fe00fff

0800ca24 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca30:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d008      	beq.n	800ca52 <HAL_SD_IRQHandler+0x2e>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f003 0308 	and.w	r3, r3, #8
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d003      	beq.n	800ca52 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f001 f926 	bl	800dc9c <SD_Read_IT>
 800ca50:	e19a      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f000 80ac 	beq.w	800cbba <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca6a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	4b59      	ldr	r3, [pc, #356]	@ (800cbdc <HAL_SD_IRQHandler+0x1b8>)
 800ca78:	400b      	ands	r3, r1
 800ca7a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800ca8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68da      	ldr	r2, [r3, #12]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ca9a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f003 0308 	and.w	r3, r3, #8
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d038      	beq.n	800cb18 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f003 0302 	and.w	r3, r3, #2
 800caac:	2b00      	cmp	r3, #0
 800caae:	d104      	bne.n	800caba <HAL_SD_IRQHandler+0x96>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f003 0320 	and.w	r3, r3, #32
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d011      	beq.n	800cade <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f003 ff86 	bl	80109d0 <SDMMC_CmdStopTransfer>
 800cac4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d008      	beq.n	800cade <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	431a      	orrs	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f95b 	bl	800cd94 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a3f      	ldr	r2, [pc, #252]	@ (800cbe0 <HAL_SD_IRQHandler+0x1bc>)
 800cae4:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2201      	movs	r2, #1
 800caea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d104      	bne.n	800cb08 <HAL_SD_IRQHandler+0xe4>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f003 0302 	and.w	r3, r3, #2
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d003      	beq.n	800cb10 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f004 fc31 	bl	8011370 <HAL_SD_RxCpltCallback>
 800cb0e:	e13b      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f004 fc23 	bl	801135c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cb16:	e137      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f000 8132 	beq.w	800cd88 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2200      	movs	r2, #0
 800cb32:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f003 0302 	and.w	r3, r3, #2
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d104      	bne.n	800cb50 <HAL_SD_IRQHandler+0x12c>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f003 0320 	and.w	r3, r3, #32
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d011      	beq.n	800cb74 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f003 ff3b 	bl	80109d0 <SDMMC_CmdStopTransfer>
 800cb5a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d008      	beq.n	800cb74 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	431a      	orrs	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f910 	bl	800cd94 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2201      	movs	r2, #1
 800cb78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f003 0310 	and.w	r3, r3, #16
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d104      	bne.n	800cb96 <HAL_SD_IRQHandler+0x172>
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f003 0320 	and.w	r3, r3, #32
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d002      	beq.n	800cb9c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f004 fbe0 	bl	801135c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d105      	bne.n	800cbb2 <HAL_SD_IRQHandler+0x18e>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f003 0302 	and.w	r3, r3, #2
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 80eb 	beq.w	800cd88 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f004 fbdc 	bl	8011370 <HAL_SD_RxCpltCallback>
}
 800cbb8:	e0e6      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00d      	beq.n	800cbe4 <HAL_SD_IRQHandler+0x1c0>
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f003 0308 	and.w	r3, r3, #8
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d008      	beq.n	800cbe4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f001 f8a8 	bl	800dd28 <SD_Write_IT>
 800cbd8:	e0d6      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
 800cbda:	bf00      	nop
 800cbdc:	ffff3ec5 	.word	0xffff3ec5
 800cbe0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbea:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 809d 	beq.w	800cd2e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbfa:	f003 0302 	and.w	r3, r3, #2
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d005      	beq.n	800cc0e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc06:	f043 0202 	orr.w	r2, r3, #2
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc14:	f003 0308 	and.w	r3, r3, #8
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d005      	beq.n	800cc28 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc20:	f043 0208 	orr.w	r2, r3, #8
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc2e:	f003 0320 	and.w	r3, r3, #32
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d005      	beq.n	800cc42 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc3a:	f043 0220 	orr.w	r2, r3, #32
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc48:	f003 0310 	and.w	r3, r3, #16
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d005      	beq.n	800cc5c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc54:	f043 0210 	orr.w	r2, r3, #16
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a4b      	ldr	r2, [pc, #300]	@ (800cd90 <HAL_SD_IRQHandler+0x36c>)
 800cc62:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800cc72:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68da      	ldr	r2, [r3, #12]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc82:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cc92:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68da      	ldr	r2, [r3, #12]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cca2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f003 fe91 	bl	80109d0 <SDMMC_CmdStopTransfer>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccb4:	431a      	orrs	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68da      	ldr	r2, [r3, #12]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ccc8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ccd2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f003 0308 	and.w	r3, r3, #8
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00a      	beq.n	800ccf4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2201      	movs	r2, #1
 800cce2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 f851 	bl	800cd94 <HAL_SD_ErrorCallback>
}
 800ccf2:	e049      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d044      	beq.n	800cd88 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d040      	beq.n	800cd88 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cd14:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 f834 	bl	800cd94 <HAL_SD_ErrorCallback>
}
 800cd2c:	e02c      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d025      	beq.n	800cd88 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd44:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd4c:	f003 0304 	and.w	r3, r3, #4
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10c      	bne.n	800cd6e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f003 0320 	and.w	r3, r3, #32
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f001 f84a 	bl	800ddf8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cd64:	e010      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f001 f832 	bl	800ddd0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cd6c:	e00c      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f003 0320 	and.w	r3, r3, #32
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d003      	beq.n	800cd80 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f001 f833 	bl	800dde4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cd7e:	e003      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f001 f81b 	bl	800ddbc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800cd86:	e7ff      	b.n	800cd88 <HAL_SD_IRQHandler+0x364>
 800cd88:	bf00      	nop
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	18000f3a 	.word	0x18000f3a

0800cd94 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cd9c:	bf00      	nop
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdb6:	0f9b      	lsrs	r3, r3, #30
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdc2:	0e9b      	lsrs	r3, r3, #26
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	f003 030f 	and.w	r3, r3, #15
 800cdca:	b2da      	uxtb	r2, r3
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdd4:	0e1b      	lsrs	r3, r3, #24
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	f003 0303 	and.w	r3, r3, #3
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cde6:	0c1b      	lsrs	r3, r3, #16
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdf2:	0a1b      	lsrs	r3, r3, #8
 800cdf4:	b2da      	uxtb	r2, r3
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce08:	0d1b      	lsrs	r3, r3, #20
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce14:	0c1b      	lsrs	r3, r3, #16
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	f003 030f 	and.w	r3, r3, #15
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce26:	0bdb      	lsrs	r3, r3, #15
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce38:	0b9b      	lsrs	r3, r3, #14
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	b2da      	uxtb	r2, r3
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce4a:	0b5b      	lsrs	r3, r3, #13
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce5c:	0b1b      	lsrs	r3, r3, #12
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	f003 0301 	and.w	r3, r3, #1
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d163      	bne.n	800cf40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce7c:	009a      	lsls	r2, r3, #2
 800ce7e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ce82:	4013      	ands	r3, r2
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800ce88:	0f92      	lsrs	r2, r2, #30
 800ce8a:	431a      	orrs	r2, r3
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce94:	0edb      	lsrs	r3, r3, #27
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	f003 0307 	and.w	r3, r3, #7
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cea6:	0e1b      	lsrs	r3, r3, #24
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	f003 0307 	and.w	r3, r3, #7
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceb8:	0d5b      	lsrs	r3, r3, #21
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	f003 0307 	and.w	r3, r3, #7
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceca:	0c9b      	lsrs	r3, r3, #18
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	f003 0307 	and.w	r3, r3, #7
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cedc:	0bdb      	lsrs	r3, r3, #15
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	f003 0307 	and.w	r3, r3, #7
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	1c5a      	adds	r2, r3, #1
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	7e1b      	ldrb	r3, [r3, #24]
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	f003 0307 	and.w	r3, r3, #7
 800cefe:	3302      	adds	r3, #2
 800cf00:	2201      	movs	r2, #1
 800cf02:	fa02 f303 	lsl.w	r3, r2, r3
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cf0a:	fb03 f202 	mul.w	r2, r3, r2
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	7a1b      	ldrb	r3, [r3, #8]
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	f003 030f 	and.w	r3, r3, #15
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	409a      	lsls	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800cf2c:	0a52      	lsrs	r2, r2, #9
 800cf2e:	fb03 f202 	mul.w	r2, r3, r2
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf3c:	655a      	str	r2, [r3, #84]	@ 0x54
 800cf3e:	e031      	b.n	800cfa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d11d      	bne.n	800cf84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf4c:	041b      	lsls	r3, r3, #16
 800cf4e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf56:	0c1b      	lsrs	r3, r3, #16
 800cf58:	431a      	orrs	r2, r3
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	3301      	adds	r3, #1
 800cf64:	029a      	lsls	r2, r3, #10
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf78:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	655a      	str	r2, [r3, #84]	@ 0x54
 800cf82:	e00f      	b.n	800cfa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a58      	ldr	r2, [pc, #352]	@ (800d0ec <HAL_SD_GetCardCSD+0x344>)
 800cf8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e09d      	b.n	800d0e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfa8:	0b9b      	lsrs	r3, r3, #14
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	f003 0301 	and.w	r3, r3, #1
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfba:	09db      	lsrs	r3, r3, #7
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfc2:	b2da      	uxtb	r2, r3
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfdc:	0fdb      	lsrs	r3, r3, #31
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfe8:	0f5b      	lsrs	r3, r3, #29
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	f003 0303 	and.w	r3, r3, #3
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cffa:	0e9b      	lsrs	r3, r3, #26
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	f003 0307 	and.w	r3, r3, #7
 800d002:	b2da      	uxtb	r2, r3
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d00c:	0d9b      	lsrs	r3, r3, #22
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	f003 030f 	and.w	r3, r3, #15
 800d014:	b2da      	uxtb	r2, r3
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d01e:	0d5b      	lsrs	r3, r3, #21
 800d020:	b2db      	uxtb	r3, r3
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	b2da      	uxtb	r2, r3
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2200      	movs	r2, #0
 800d032:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d03a:	0c1b      	lsrs	r3, r3, #16
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	f003 0301 	and.w	r3, r3, #1
 800d042:	b2da      	uxtb	r2, r3
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d04e:	0bdb      	lsrs	r3, r3, #15
 800d050:	b2db      	uxtb	r3, r3
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	b2da      	uxtb	r2, r3
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d062:	0b9b      	lsrs	r3, r3, #14
 800d064:	b2db      	uxtb	r3, r3
 800d066:	f003 0301 	and.w	r3, r3, #1
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d076:	0b5b      	lsrs	r3, r3, #13
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	b2da      	uxtb	r2, r3
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d08a:	0b1b      	lsrs	r3, r3, #12
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	b2da      	uxtb	r2, r3
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d09e:	0a9b      	lsrs	r3, r3, #10
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	f003 0303 	and.w	r3, r3, #3
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0b2:	0a1b      	lsrs	r3, r3, #8
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	f003 0303 	and.w	r3, r3, #3
 800d0ba:	b2da      	uxtb	r2, r3
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0c6:	085b      	lsrs	r3, r3, #1
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	1fe00fff 	.word	0x1fe00fff

0800d0f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b094      	sub	sp, #80	@ 0x50
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d101      	bne.n	800d110 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e0a7      	b.n	800d260 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d110:	f107 0308 	add.w	r3, r7, #8
 800d114:	4619      	mov	r1, r3
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fb62 	bl	800d7e0 <SD_SendSDStatus>
 800d11c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d11e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d120:	2b00      	cmp	r3, #0
 800d122:	d011      	beq.n	800d148 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a4f      	ldr	r2, [pc, #316]	@ (800d268 <HAL_SD_GetCardStatus+0x178>)
 800d12a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d132:	431a      	orrs	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d146:	e070      	b.n	800d22a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	099b      	lsrs	r3, r3, #6
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	f003 0303 	and.w	r3, r3, #3
 800d152:	b2da      	uxtb	r2, r3
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	095b      	lsrs	r3, r3, #5
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	b2da      	uxtb	r2, r3
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	0a1b      	lsrs	r3, r3, #8
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d172:	b29a      	uxth	r2, r3
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	0e1b      	lsrs	r3, r3, #24
 800d178:	b29b      	uxth	r3, r3
 800d17a:	4313      	orrs	r3, r2
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	061a      	lsls	r2, r3, #24
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	021b      	lsls	r3, r3, #8
 800d18a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d18e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	0a1b      	lsrs	r3, r3, #8
 800d194:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d198:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	0e1b      	lsrs	r3, r3, #24
 800d19e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	0a1b      	lsrs	r3, r3, #8
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	0d1b      	lsrs	r3, r3, #20
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	0c1b      	lsrs	r3, r3, #16
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	0a9b      	lsrs	r3, r3, #10
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	0a1b      	lsrs	r3, r3, #8
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f003 0303 	and.w	r3, r3, #3
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	091b      	lsrs	r3, r3, #4
 800d206:	b2db      	uxtb	r3, r3
 800d208:	f003 030f 	and.w	r3, r3, #15
 800d20c:	b2da      	uxtb	r2, r3
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	b2db      	uxtb	r3, r3
 800d216:	f003 030f 	and.w	r3, r3, #15
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	0e1b      	lsrs	r3, r3, #24
 800d224:	b2da      	uxtb	r2, r3
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d232:	4618      	mov	r0, r3
 800d234:	f003 fb1c 	bl	8010870 <SDMMC_CmdBlockLength>
 800d238:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d23a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00d      	beq.n	800d25c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a08      	ldr	r2, [pc, #32]	@ (800d268 <HAL_SD_GetCardStatus+0x178>)
 800d246:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d24c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2201      	movs	r2, #1
 800d252:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800d25c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d260:	4618      	mov	r0, r3
 800d262:	3750      	adds	r7, #80	@ 0x50
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	1fe00fff 	.word	0x1fe00fff

0800d26c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d2b6:	2300      	movs	r3, #0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d2c4:	b590      	push	{r4, r7, lr}
 800d2c6:	b08d      	sub	sp, #52	@ 0x34
 800d2c8:	af02      	add	r7, sp, #8
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2203      	movs	r2, #3
 800d2d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e0:	2b03      	cmp	r3, #3
 800d2e2:	d02e      	beq.n	800d342 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2ea:	d106      	bne.n	800d2fa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	635a      	str	r2, [r3, #52]	@ 0x34
 800d2f8:	e029      	b.n	800d34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d300:	d10a      	bne.n	800d318 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fb64 	bl	800d9d0 <SD_WideBus_Enable>
 800d308:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	431a      	orrs	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	635a      	str	r2, [r3, #52]	@ 0x34
 800d316:	e01a      	b.n	800d34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d10a      	bne.n	800d334 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fba1 	bl	800da66 <SD_WideBus_Disable>
 800d324:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	431a      	orrs	r2, r3
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	635a      	str	r2, [r3, #52]	@ 0x34
 800d332:	e00c      	b.n	800d34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d338:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	635a      	str	r2, [r3, #52]	@ 0x34
 800d340:	e005      	b.n	800d34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d346:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d352:	2b00      	cmp	r3, #0
 800d354:	d007      	beq.n	800d366 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a5f      	ldr	r2, [pc, #380]	@ (800d4d8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d35c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d364:	e096      	b.n	800d494 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d366:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d36a:	f04f 0100 	mov.w	r1, #0
 800d36e:	f7fd fea3 	bl	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d372:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	2b00      	cmp	r3, #0
 800d378:	f000 8083 	beq.w	800d482 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	695a      	ldr	r2, [r3, #20]
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	4950      	ldr	r1, [pc, #320]	@ (800d4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d39a:	fba1 1303 	umull	r1, r3, r1, r3
 800d39e:	0e1b      	lsrs	r3, r3, #24
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d303      	bcc.n	800d3ac <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	695b      	ldr	r3, [r3, #20]
 800d3a8:	61bb      	str	r3, [r7, #24]
 800d3aa:	e05a      	b.n	800d462 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3b4:	d103      	bne.n	800d3be <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	61bb      	str	r3, [r7, #24]
 800d3bc:	e051      	b.n	800d462 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3c6:	d126      	bne.n	800d416 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	695b      	ldr	r3, [r3, #20]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d10e      	bne.n	800d3ee <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	4a43      	ldr	r2, [pc, #268]	@ (800d4e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d906      	bls.n	800d3e6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	4a40      	ldr	r2, [pc, #256]	@ (800d4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e0:	0e5b      	lsrs	r3, r3, #25
 800d3e2:	61bb      	str	r3, [r7, #24]
 800d3e4:	e03d      	b.n	800d462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	61bb      	str	r3, [r7, #24]
 800d3ec:	e039      	b.n	800d462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	695b      	ldr	r3, [r3, #20]
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	69fa      	ldr	r2, [r7, #28]
 800d3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3fa:	4a39      	ldr	r2, [pc, #228]	@ (800d4e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d906      	bls.n	800d40e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	4a36      	ldr	r2, [pc, #216]	@ (800d4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d404:	fba2 2303 	umull	r2, r3, r2, r3
 800d408:	0e5b      	lsrs	r3, r3, #25
 800d40a:	61bb      	str	r3, [r7, #24]
 800d40c:	e029      	b.n	800d462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	61bb      	str	r3, [r7, #24]
 800d414:	e025      	b.n	800d462 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d10e      	bne.n	800d43c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	4a30      	ldr	r2, [pc, #192]	@ (800d4e4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d906      	bls.n	800d434 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	4a2c      	ldr	r2, [pc, #176]	@ (800d4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d42a:	fba2 2303 	umull	r2, r3, r2, r3
 800d42e:	0e1b      	lsrs	r3, r3, #24
 800d430:	61bb      	str	r3, [r7, #24]
 800d432:	e016      	b.n	800d462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	695b      	ldr	r3, [r3, #20]
 800d438:	61bb      	str	r3, [r7, #24]
 800d43a:	e012      	b.n	800d462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	005b      	lsls	r3, r3, #1
 800d442:	69fa      	ldr	r2, [r7, #28]
 800d444:	fbb2 f3f3 	udiv	r3, r2, r3
 800d448:	4a26      	ldr	r2, [pc, #152]	@ (800d4e4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d906      	bls.n	800d45c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	4a22      	ldr	r2, [pc, #136]	@ (800d4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d452:	fba2 2303 	umull	r2, r3, r2, r3
 800d456:	0e1b      	lsrs	r3, r3, #24
 800d458:	61bb      	str	r3, [r7, #24]
 800d45a:	e002      	b.n	800d462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	695b      	ldr	r3, [r3, #20]
 800d460:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681c      	ldr	r4, [r3, #0]
 800d466:	466a      	mov	r2, sp
 800d468:	f107 0314 	add.w	r3, r7, #20
 800d46c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d470:	e882 0003 	stmia.w	r2, {r0, r1}
 800d474:	f107 0308 	add.w	r3, r7, #8
 800d478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d47a:	4620      	mov	r0, r4
 800d47c:	f003 f91a 	bl	80106b4 <SDMMC_Init>
 800d480:	e008      	b.n	800d494 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d486:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d49c:	4618      	mov	r0, r3
 800d49e:	f003 f9e7 	bl	8010870 <SDMMC_CmdBlockLength>
 800d4a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4a4:	6a3b      	ldr	r3, [r7, #32]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00c      	beq.n	800d4c4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a0a      	ldr	r2, [pc, #40]	@ (800d4d8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d4b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	431a      	orrs	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	372c      	adds	r7, #44	@ 0x2c
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd90      	pop	{r4, r7, pc}
 800d4d8:	1fe00fff 	.word	0x1fe00fff
 800d4dc:	55e63b89 	.word	0x55e63b89
 800d4e0:	02faf080 	.word	0x02faf080
 800d4e4:	017d7840 	.word	0x017d7840

0800d4e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d4f4:	f107 030c 	add.w	r3, r7, #12
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fa40 	bl	800d980 <SD_SendStatus>
 800d500:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d005      	beq.n	800d514 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	431a      	orrs	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	0a5b      	lsrs	r3, r3, #9
 800d518:	f003 030f 	and.w	r3, r3, #15
 800d51c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d51e:	693b      	ldr	r3, [r7, #16]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b090      	sub	sp, #64	@ 0x40
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d534:	f7f5 fac6 	bl	8002ac4 <HAL_GetTick>
 800d538:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4618      	mov	r0, r3
 800d540:	f003 f911 	bl	8010766 <SDMMC_GetPowerState>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d102      	bne.n	800d550 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d54a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d54e:	e0b5      	b.n	800d6bc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d554:	2b03      	cmp	r3, #3
 800d556:	d02e      	beq.n	800d5b6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f003 fb5c 	bl	8010c1a <SDMMC_CmdSendCID>
 800d562:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d566:	2b00      	cmp	r3, #0
 800d568:	d001      	beq.n	800d56e <SD_InitCard+0x46>
    {
      return errorstate;
 800d56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d56c:	e0a6      	b.n	800d6bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2100      	movs	r1, #0
 800d574:	4618      	mov	r0, r3
 800d576:	f003 f93c 	bl	80107f2 <SDMMC_GetResponse>
 800d57a:	4602      	mov	r2, r0
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2104      	movs	r1, #4
 800d586:	4618      	mov	r0, r3
 800d588:	f003 f933 	bl	80107f2 <SDMMC_GetResponse>
 800d58c:	4602      	mov	r2, r0
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2108      	movs	r1, #8
 800d598:	4618      	mov	r0, r3
 800d59a:	f003 f92a 	bl	80107f2 <SDMMC_GetResponse>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	210c      	movs	r1, #12
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f003 f921 	bl	80107f2 <SDMMC_GetResponse>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	d01d      	beq.n	800d5fa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d5be:	e019      	b.n	800d5f4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f107 020a 	add.w	r2, r7, #10
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f003 fb64 	bl	8010c98 <SDMMC_CmdSetRelAdd>
 800d5d0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d001      	beq.n	800d5dc <SD_InitCard+0xb4>
      {
        return errorstate;
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5da:	e06f      	b.n	800d6bc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d5dc:	f7f5 fa72 	bl	8002ac4 <HAL_GetTick>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d902      	bls.n	800d5f4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d5ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d5f2:	e063      	b.n	800d6bc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d5f4:	897b      	ldrh	r3, [r7, #10]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d0e2      	beq.n	800d5c0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5fe:	2b03      	cmp	r3, #3
 800d600:	d036      	beq.n	800d670 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d602:	897b      	ldrh	r3, [r7, #10]
 800d604:	461a      	mov	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d612:	041b      	lsls	r3, r3, #16
 800d614:	4619      	mov	r1, r3
 800d616:	4610      	mov	r0, r2
 800d618:	f003 fb1e 	bl	8010c58 <SDMMC_CmdSendCSD>
 800d61c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <SD_InitCard+0x100>
    {
      return errorstate;
 800d624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d626:	e049      	b.n	800d6bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2100      	movs	r1, #0
 800d62e:	4618      	mov	r0, r3
 800d630:	f003 f8df 	bl	80107f2 <SDMMC_GetResponse>
 800d634:	4602      	mov	r2, r0
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2104      	movs	r1, #4
 800d640:	4618      	mov	r0, r3
 800d642:	f003 f8d6 	bl	80107f2 <SDMMC_GetResponse>
 800d646:	4602      	mov	r2, r0
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2108      	movs	r1, #8
 800d652:	4618      	mov	r0, r3
 800d654:	f003 f8cd 	bl	80107f2 <SDMMC_GetResponse>
 800d658:	4602      	mov	r2, r0
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	210c      	movs	r1, #12
 800d664:	4618      	mov	r0, r3
 800d666:	f003 f8c4 	bl	80107f2 <SDMMC_GetResponse>
 800d66a:	4602      	mov	r2, r0
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2104      	movs	r1, #4
 800d676:	4618      	mov	r0, r3
 800d678:	f003 f8bb 	bl	80107f2 <SDMMC_GetResponse>
 800d67c:	4603      	mov	r3, r0
 800d67e:	0d1a      	lsrs	r2, r3, #20
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d684:	f107 030c 	add.w	r3, r7, #12
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7ff fb8c 	bl	800cda8 <HAL_SD_GetCardCSD>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d696:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d69a:	e00f      	b.n	800d6bc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6a4:	041b      	lsls	r3, r3, #16
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	f003 f9cd 	bl	8010a48 <SDMMC_CmdSelDesel>
 800d6ae:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <SD_InitCard+0x192>
  {
    return errorstate;
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b8:	e000      	b.n	800d6bc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3740      	adds	r7, #64	@ 0x40
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f003 f9d6 	bl	8010a8e <SDMMC_CmdGoIdleState>
 800d6e2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d001      	beq.n	800d6ee <SD_PowerON+0x2a>
  {
    return errorstate;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	e072      	b.n	800d7d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f003 f9e9 	bl	8010aca <SDMMC_CmdOperCond>
 800d6f8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d700:	d10d      	bne.n	800d71e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f003 f9be 	bl	8010a8e <SDMMC_CmdGoIdleState>
 800d712:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d004      	beq.n	800d724 <SD_PowerON+0x60>
    {
      return errorstate;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	e05a      	b.n	800d7d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2201      	movs	r2, #1
 800d722:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d137      	bne.n	800d79c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2100      	movs	r1, #0
 800d732:	4618      	mov	r0, r3
 800d734:	f003 f9e9 	bl	8010b0a <SDMMC_CmdAppCommand>
 800d738:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d02d      	beq.n	800d79c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d740:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d744:	e046      	b.n	800d7d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	2100      	movs	r1, #0
 800d74c:	4618      	mov	r0, r3
 800d74e:	f003 f9dc 	bl	8010b0a <SDMMC_CmdAppCommand>
 800d752:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <SD_PowerON+0x9a>
    {
      return errorstate;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	e03a      	b.n	800d7d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	491e      	ldr	r1, [pc, #120]	@ (800d7dc <SD_PowerON+0x118>)
 800d764:	4618      	mov	r0, r3
 800d766:	f003 f9f3 	bl	8010b50 <SDMMC_CmdAppOperCommand>
 800d76a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d002      	beq.n	800d778 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d772:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d776:	e02d      	b.n	800d7d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2100      	movs	r1, #0
 800d77e:	4618      	mov	r0, r3
 800d780:	f003 f837 	bl	80107f2 <SDMMC_GetResponse>
 800d784:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	0fdb      	lsrs	r3, r3, #31
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d101      	bne.n	800d792 <SD_PowerON+0xce>
 800d78e:	2301      	movs	r3, #1
 800d790:	e000      	b.n	800d794 <SD_PowerON+0xd0>
 800d792:	2300      	movs	r3, #0
 800d794:	613b      	str	r3, [r7, #16]

    count++;
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	3301      	adds	r3, #1
 800d79a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d802      	bhi.n	800d7ac <SD_PowerON+0xe8>
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d0cc      	beq.n	800d746 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d902      	bls.n	800d7bc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d7b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d7ba:	e00b      	b.n	800d7d4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3718      	adds	r7, #24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	c1100000 	.word	0xc1100000

0800d7e0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b08c      	sub	sp, #48	@ 0x30
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d7ea:	f7f5 f96b 	bl	8002ac4 <HAL_GetTick>
 800d7ee:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f002 fff9 	bl	80107f2 <SDMMC_GetResponse>
 800d800:	4603      	mov	r3, r0
 800d802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d80a:	d102      	bne.n	800d812 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d80c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d810:	e0b0      	b.n	800d974 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2140      	movs	r1, #64	@ 0x40
 800d818:	4618      	mov	r0, r3
 800d81a:	f003 f829 	bl	8010870 <SDMMC_CmdBlockLength>
 800d81e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d820:	6a3b      	ldr	r3, [r7, #32]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d005      	beq.n	800d832 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d82e:	6a3b      	ldr	r3, [r7, #32]
 800d830:	e0a0      	b.n	800d974 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d83a:	041b      	lsls	r3, r3, #16
 800d83c:	4619      	mov	r1, r3
 800d83e:	4610      	mov	r0, r2
 800d840:	f003 f963 	bl	8010b0a <SDMMC_CmdAppCommand>
 800d844:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d846:	6a3b      	ldr	r3, [r7, #32]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d005      	beq.n	800d858 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d854:	6a3b      	ldr	r3, [r7, #32]
 800d856:	e08d      	b.n	800d974 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d858:	f04f 33ff 	mov.w	r3, #4294967295
 800d85c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d85e:	2340      	movs	r3, #64	@ 0x40
 800d860:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d862:	2360      	movs	r3, #96	@ 0x60
 800d864:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d866:	2302      	movs	r3, #2
 800d868:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d86e:	2301      	movs	r3, #1
 800d870:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f107 0208 	add.w	r2, r7, #8
 800d87a:	4611      	mov	r1, r2
 800d87c:	4618      	mov	r0, r3
 800d87e:	f002 ffcb 	bl	8010818 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4618      	mov	r0, r3
 800d888:	f003 fa4b 	bl	8010d22 <SDMMC_CmdStatusRegister>
 800d88c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d88e:	6a3b      	ldr	r3, [r7, #32]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d02b      	beq.n	800d8ec <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	e069      	b.n	800d974 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d013      	beq.n	800d8d6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8b2:	e00d      	b.n	800d8d0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f002 ff25 	bl	8010708 <SDMMC_ReadFIFO>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c2:	601a      	str	r2, [r3, #0]
        pData++;
 800d8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d2:	2b07      	cmp	r3, #7
 800d8d4:	d9ee      	bls.n	800d8b4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d8d6:	f7f5 f8f5 	bl	8002ac4 <HAL_GetTick>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e4:	d102      	bne.n	800d8ec <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d8e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8ea:	e043      	b.n	800d974 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8f2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d0d2      	beq.n	800d8a0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d900:	f003 0308 	and.w	r3, r3, #8
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d908:	2308      	movs	r3, #8
 800d90a:	e033      	b.n	800d974 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d912:	f003 0302 	and.w	r3, r3, #2
 800d916:	2b00      	cmp	r3, #0
 800d918:	d001      	beq.n	800d91e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d91a:	2302      	movs	r3, #2
 800d91c:	e02a      	b.n	800d974 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d924:	f003 0320 	and.w	r3, r3, #32
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d017      	beq.n	800d95c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d92c:	2320      	movs	r3, #32
 800d92e:	e021      	b.n	800d974 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4618      	mov	r0, r3
 800d936:	f002 fee7 	bl	8010708 <SDMMC_ReadFIFO>
 800d93a:	4602      	mov	r2, r0
 800d93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93e:	601a      	str	r2, [r3, #0]
    pData++;
 800d940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d942:	3304      	adds	r3, #4
 800d944:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d946:	f7f5 f8bd 	bl	8002ac4 <HAL_GetTick>
 800d94a:	4602      	mov	r2, r0
 800d94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d954:	d102      	bne.n	800d95c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d956:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d95a:	e00b      	b.n	800d974 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d966:	2b00      	cmp	r3, #0
 800d968:	d1e2      	bne.n	800d930 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a03      	ldr	r2, [pc, #12]	@ (800d97c <SD_SendSDStatus+0x19c>)
 800d970:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3730      	adds	r7, #48	@ 0x30
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	18000f3a 	.word	0x18000f3a

0800d980 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d990:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d994:	e018      	b.n	800d9c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d99e:	041b      	lsls	r3, r3, #16
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	4610      	mov	r0, r2
 800d9a4:	f003 f99a 	bl	8010cdc <SDMMC_CmdSendStatus>
 800d9a8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d001      	beq.n	800d9b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	e009      	b.n	800d9c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f002 ff19 	bl	80107f2 <SDMMC_GetResponse>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	2300      	movs	r3, #0
 800d9de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f002 ff03 	bl	80107f2 <SDMMC_GetResponse>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9f6:	d102      	bne.n	800d9fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d9f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9fc:	e02f      	b.n	800da5e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d9fe:	f107 030c 	add.w	r3, r7, #12
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f879 	bl	800dafc <SD_FindSCR>
 800da0a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d001      	beq.n	800da16 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	e023      	b.n	800da5e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d01c      	beq.n	800da5a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da28:	041b      	lsls	r3, r3, #16
 800da2a:	4619      	mov	r1, r3
 800da2c:	4610      	mov	r0, r2
 800da2e:	f003 f86c 	bl	8010b0a <SDMMC_CmdAppCommand>
 800da32:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	e00f      	b.n	800da5e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2102      	movs	r1, #2
 800da44:	4618      	mov	r0, r3
 800da46:	f003 f8a3 	bl	8010b90 <SDMMC_CmdBusWidth>
 800da4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d001      	beq.n	800da56 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	e003      	b.n	800da5e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da56:	2300      	movs	r3, #0
 800da58:	e001      	b.n	800da5e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3718      	adds	r7, #24
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b086      	sub	sp, #24
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800da6e:	2300      	movs	r3, #0
 800da70:	60fb      	str	r3, [r7, #12]
 800da72:	2300      	movs	r3, #0
 800da74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2100      	movs	r1, #0
 800da7c:	4618      	mov	r0, r3
 800da7e:	f002 feb8 	bl	80107f2 <SDMMC_GetResponse>
 800da82:	4603      	mov	r3, r0
 800da84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da8c:	d102      	bne.n	800da94 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da92:	e02f      	b.n	800daf4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800da94:	f107 030c 	add.w	r3, r7, #12
 800da98:	4619      	mov	r1, r3
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 f82e 	bl	800dafc <SD_FindSCR>
 800daa0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	e023      	b.n	800daf4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d01c      	beq.n	800daf0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dabe:	041b      	lsls	r3, r3, #16
 800dac0:	4619      	mov	r1, r3
 800dac2:	4610      	mov	r0, r2
 800dac4:	f003 f821 	bl	8010b0a <SDMMC_CmdAppCommand>
 800dac8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	e00f      	b.n	800daf4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2100      	movs	r1, #0
 800dada:	4618      	mov	r0, r3
 800dadc:	f003 f858 	bl	8010b90 <SDMMC_CmdBusWidth>
 800dae0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d001      	beq.n	800daec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	e003      	b.n	800daf4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800daec:	2300      	movs	r3, #0
 800daee:	e001      	b.n	800daf4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800daf0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3718      	adds	r7, #24
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b08e      	sub	sp, #56	@ 0x38
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800db06:	f7f4 ffdd 	bl	8002ac4 <HAL_GetTick>
 800db0a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800db0c:	2300      	movs	r3, #0
 800db0e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800db10:	2300      	movs	r3, #0
 800db12:	60bb      	str	r3, [r7, #8]
 800db14:	2300      	movs	r3, #0
 800db16:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2108      	movs	r1, #8
 800db22:	4618      	mov	r0, r3
 800db24:	f002 fea4 	bl	8010870 <SDMMC_CmdBlockLength>
 800db28:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800db2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <SD_FindSCR+0x38>
  {
    return errorstate;
 800db30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db32:	e0ad      	b.n	800dc90 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db3c:	041b      	lsls	r3, r3, #16
 800db3e:	4619      	mov	r1, r3
 800db40:	4610      	mov	r0, r2
 800db42:	f002 ffe2 	bl	8010b0a <SDMMC_CmdAppCommand>
 800db46:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800db48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <SD_FindSCR+0x56>
  {
    return errorstate;
 800db4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db50:	e09e      	b.n	800dc90 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db52:	f04f 33ff 	mov.w	r3, #4294967295
 800db56:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800db58:	2308      	movs	r3, #8
 800db5a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800db5c:	2330      	movs	r3, #48	@ 0x30
 800db5e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800db60:	2302      	movs	r3, #2
 800db62:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800db64:	2300      	movs	r3, #0
 800db66:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800db68:	2301      	movs	r3, #1
 800db6a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f107 0210 	add.w	r2, r7, #16
 800db74:	4611      	mov	r1, r2
 800db76:	4618      	mov	r0, r3
 800db78:	f002 fe4e 	bl	8010818 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4618      	mov	r0, r3
 800db82:	f003 f828 	bl	8010bd6 <SDMMC_CmdSendSCR>
 800db86:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800db88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d027      	beq.n	800dbde <SD_FindSCR+0xe2>
  {
    return errorstate;
 800db8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db90:	e07e      	b.n	800dc90 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d113      	bne.n	800dbc8 <SD_FindSCR+0xcc>
 800dba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d110      	bne.n	800dbc8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f002 fdac 	bl	8010708 <SDMMC_ReadFIFO>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f002 fda5 	bl	8010708 <SDMMC_ReadFIFO>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	60fb      	str	r3, [r7, #12]
      index++;
 800dbc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dbc8:	f7f4 ff7c 	bl	8002ac4 <HAL_GetTick>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd6:	d102      	bne.n	800dbde <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dbd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbdc:	e058      	b.n	800dc90 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbe4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800dbe8:	4013      	ands	r3, r2
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d0d1      	beq.n	800db92 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbf4:	f003 0308 	and.w	r3, r3, #8
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d005      	beq.n	800dc08 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2208      	movs	r2, #8
 800dc02:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dc04:	2308      	movs	r3, #8
 800dc06:	e043      	b.n	800dc90 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc0e:	f003 0302 	and.w	r3, r3, #2
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d005      	beq.n	800dc22 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2202      	movs	r2, #2
 800dc1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc1e:	2302      	movs	r3, #2
 800dc20:	e036      	b.n	800dc90 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc28:	f003 0320 	and.w	r3, r3, #32
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d005      	beq.n	800dc3c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2220      	movs	r2, #32
 800dc36:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dc38:	2320      	movs	r3, #32
 800dc3a:	e029      	b.n	800dc90 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a15      	ldr	r2, [pc, #84]	@ (800dc98 <SD_FindSCR+0x19c>)
 800dc42:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	061a      	lsls	r2, r3, #24
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	021b      	lsls	r3, r3, #8
 800dc4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc50:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	0a1b      	lsrs	r3, r3, #8
 800dc56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dc5a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	0e1b      	lsrs	r3, r3, #24
 800dc60:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc64:	601a      	str	r2, [r3, #0]
    scr++;
 800dc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc68:	3304      	adds	r3, #4
 800dc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	061a      	lsls	r2, r3, #24
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	021b      	lsls	r3, r3, #8
 800dc74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc78:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	0a1b      	lsrs	r3, r3, #8
 800dc7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dc82:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	0e1b      	lsrs	r3, r3, #24
 800dc88:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3738      	adds	r7, #56	@ 0x38
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	18000f3a 	.word	0x18000f3a

0800dc9c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b086      	sub	sp, #24
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcae:	2b1f      	cmp	r3, #31
 800dcb0:	d936      	bls.n	800dd20 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	617b      	str	r3, [r7, #20]
 800dcb6:	e027      	b.n	800dd08 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f002 fd23 	bl	8010708 <SDMMC_ReadFIFO>
 800dcc2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	0a1b      	lsrs	r3, r3, #8
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	3301      	adds	r3, #1
 800dce0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	0c1b      	lsrs	r3, r3, #16
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	0e1b      	lsrs	r3, r3, #24
 800dcf6:	b2da      	uxtb	r2, r3
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	3301      	adds	r3, #1
 800dd06:	617b      	str	r3, [r7, #20]
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	2b07      	cmp	r3, #7
 800dd0c:	d9d4      	bls.n	800dcb8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd18:	f1a3 0220 	sub.w	r2, r3, #32
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800dd20:	bf00      	nop
 800dd22:	3718      	adds	r7, #24
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	69db      	ldr	r3, [r3, #28]
 800dd34:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6a1b      	ldr	r3, [r3, #32]
 800dd3a:	2b1f      	cmp	r3, #31
 800dd3c:	d93a      	bls.n	800ddb4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800dd3e:	2300      	movs	r3, #0
 800dd40:	617b      	str	r3, [r7, #20]
 800dd42:	e02b      	b.n	800dd9c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	021a      	lsls	r2, r3, #8
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	041a      	lsls	r2, r3, #16
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	3301      	adds	r3, #1
 800dd72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	061a      	lsls	r2, r3, #24
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	3301      	adds	r3, #1
 800dd84:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f107 020c 	add.w	r2, r7, #12
 800dd8e:	4611      	mov	r1, r2
 800dd90:	4618      	mov	r0, r3
 800dd92:	f002 fcc6 	bl	8010722 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	617b      	str	r3, [r7, #20]
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	2b07      	cmp	r3, #7
 800dda0:	d9d0      	bls.n	800dd44 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6a1b      	ldr	r3, [r3, #32]
 800ddac:	f1a3 0220 	sub.w	r2, r3, #32
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	621a      	str	r2, [r3, #32]
  }
}
 800ddb4:	bf00      	nop
 800ddb6:	3718      	adds	r7, #24
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ddc4:	bf00      	nop
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d101      	bne.n	800de1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	e049      	b.n	800deb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b00      	cmp	r3, #0
 800de28:	d106      	bne.n	800de38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7f4 fb3a 	bl	80024ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2202      	movs	r2, #2
 800de3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	3304      	adds	r3, #4
 800de48:	4619      	mov	r1, r3
 800de4a:	4610      	mov	r0, r2
 800de4c:	f000 fc58 	bl	800e700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2201      	movs	r2, #1
 800de74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2201      	movs	r2, #1
 800de84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800deb0:	2300      	movs	r3, #0
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
	...

0800debc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800deca:	b2db      	uxtb	r3, r3
 800decc:	2b01      	cmp	r3, #1
 800dece:	d001      	beq.n	800ded4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	e05e      	b.n	800df92 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2202      	movs	r2, #2
 800ded8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	68da      	ldr	r2, [r3, #12]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f042 0201 	orr.w	r2, r2, #1
 800deea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a2b      	ldr	r2, [pc, #172]	@ (800dfa0 <HAL_TIM_Base_Start_IT+0xe4>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d02c      	beq.n	800df50 <HAL_TIM_Base_Start_IT+0x94>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800defe:	d027      	beq.n	800df50 <HAL_TIM_Base_Start_IT+0x94>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a27      	ldr	r2, [pc, #156]	@ (800dfa4 <HAL_TIM_Base_Start_IT+0xe8>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d022      	beq.n	800df50 <HAL_TIM_Base_Start_IT+0x94>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a26      	ldr	r2, [pc, #152]	@ (800dfa8 <HAL_TIM_Base_Start_IT+0xec>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d01d      	beq.n	800df50 <HAL_TIM_Base_Start_IT+0x94>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a24      	ldr	r2, [pc, #144]	@ (800dfac <HAL_TIM_Base_Start_IT+0xf0>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d018      	beq.n	800df50 <HAL_TIM_Base_Start_IT+0x94>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a23      	ldr	r2, [pc, #140]	@ (800dfb0 <HAL_TIM_Base_Start_IT+0xf4>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d013      	beq.n	800df50 <HAL_TIM_Base_Start_IT+0x94>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a21      	ldr	r2, [pc, #132]	@ (800dfb4 <HAL_TIM_Base_Start_IT+0xf8>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d00e      	beq.n	800df50 <HAL_TIM_Base_Start_IT+0x94>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a20      	ldr	r2, [pc, #128]	@ (800dfb8 <HAL_TIM_Base_Start_IT+0xfc>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d009      	beq.n	800df50 <HAL_TIM_Base_Start_IT+0x94>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a1e      	ldr	r2, [pc, #120]	@ (800dfbc <HAL_TIM_Base_Start_IT+0x100>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d004      	beq.n	800df50 <HAL_TIM_Base_Start_IT+0x94>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a1d      	ldr	r2, [pc, #116]	@ (800dfc0 <HAL_TIM_Base_Start_IT+0x104>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d115      	bne.n	800df7c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	689a      	ldr	r2, [r3, #8]
 800df56:	4b1b      	ldr	r3, [pc, #108]	@ (800dfc4 <HAL_TIM_Base_Start_IT+0x108>)
 800df58:	4013      	ands	r3, r2
 800df5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2b06      	cmp	r3, #6
 800df60:	d015      	beq.n	800df8e <HAL_TIM_Base_Start_IT+0xd2>
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df68:	d011      	beq.n	800df8e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f042 0201 	orr.w	r2, r2, #1
 800df78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df7a:	e008      	b.n	800df8e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f042 0201 	orr.w	r2, r2, #1
 800df8a:	601a      	str	r2, [r3, #0]
 800df8c:	e000      	b.n	800df90 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3714      	adds	r7, #20
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	40010000 	.word	0x40010000
 800dfa4:	40000400 	.word	0x40000400
 800dfa8:	40000800 	.word	0x40000800
 800dfac:	40000c00 	.word	0x40000c00
 800dfb0:	40010400 	.word	0x40010400
 800dfb4:	40001800 	.word	0x40001800
 800dfb8:	40014000 	.word	0x40014000
 800dfbc:	4000e000 	.word	0x4000e000
 800dfc0:	4000e400 	.word	0x4000e400
 800dfc4:	00010007 	.word	0x00010007

0800dfc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d101      	bne.n	800dfda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e049      	b.n	800e06e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d106      	bne.n	800dff4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 f841 	bl	800e076 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2202      	movs	r2, #2
 800dff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3304      	adds	r3, #4
 800e004:	4619      	mov	r1, r3
 800e006:	4610      	mov	r0, r2
 800e008:	f000 fb7a 	bl	800e700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2201      	movs	r2, #1
 800e058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2201      	movs	r2, #1
 800e060:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2201      	movs	r2, #1
 800e068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e076:	b480      	push	{r7}
 800e078:	b083      	sub	sp, #12
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e07e:	bf00      	nop
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e08a:	b580      	push	{r7, lr}
 800e08c:	b084      	sub	sp, #16
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	f003 0302 	and.w	r3, r3, #2
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d020      	beq.n	800e0ee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f003 0302 	and.w	r3, r3, #2
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d01b      	beq.n	800e0ee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f06f 0202 	mvn.w	r2, #2
 800e0be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	699b      	ldr	r3, [r3, #24]
 800e0cc:	f003 0303 	and.w	r3, r3, #3
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d003      	beq.n	800e0dc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 faf5 	bl	800e6c4 <HAL_TIM_IC_CaptureCallback>
 800e0da:	e005      	b.n	800e0e8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 fae7 	bl	800e6b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 faf8 	bl	800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	f003 0304 	and.w	r3, r3, #4
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d020      	beq.n	800e13a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f003 0304 	and.w	r3, r3, #4
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d01b      	beq.n	800e13a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f06f 0204 	mvn.w	r2, #4
 800e10a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2202      	movs	r2, #2
 800e110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	699b      	ldr	r3, [r3, #24]
 800e118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d003      	beq.n	800e128 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 facf 	bl	800e6c4 <HAL_TIM_IC_CaptureCallback>
 800e126:	e005      	b.n	800e134 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fac1 	bl	800e6b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fad2 	bl	800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	f003 0308 	and.w	r3, r3, #8
 800e140:	2b00      	cmp	r3, #0
 800e142:	d020      	beq.n	800e186 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f003 0308 	and.w	r3, r3, #8
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d01b      	beq.n	800e186 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f06f 0208 	mvn.w	r2, #8
 800e156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2204      	movs	r2, #4
 800e15c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	69db      	ldr	r3, [r3, #28]
 800e164:	f003 0303 	and.w	r3, r3, #3
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d003      	beq.n	800e174 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 faa9 	bl	800e6c4 <HAL_TIM_IC_CaptureCallback>
 800e172:	e005      	b.n	800e180 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fa9b 	bl	800e6b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 faac 	bl	800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	f003 0310 	and.w	r3, r3, #16
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d020      	beq.n	800e1d2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f003 0310 	and.w	r3, r3, #16
 800e196:	2b00      	cmp	r3, #0
 800e198:	d01b      	beq.n	800e1d2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f06f 0210 	mvn.w	r2, #16
 800e1a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2208      	movs	r2, #8
 800e1a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	69db      	ldr	r3, [r3, #28]
 800e1b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d003      	beq.n	800e1c0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 fa83 	bl	800e6c4 <HAL_TIM_IC_CaptureCallback>
 800e1be:	e005      	b.n	800e1cc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 fa75 	bl	800e6b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 fa86 	bl	800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00c      	beq.n	800e1f6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f003 0301 	and.w	r3, r3, #1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d007      	beq.n	800e1f6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f06f 0201 	mvn.w	r2, #1
 800e1ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7f3 fcbf 	bl	8001b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d104      	bne.n	800e20a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00c      	beq.n	800e224 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e210:	2b00      	cmp	r3, #0
 800e212:	d007      	beq.n	800e224 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 ffc6 	bl	800f1b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00c      	beq.n	800e248 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e234:	2b00      	cmp	r3, #0
 800e236:	d007      	beq.n	800e248 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 ffbe 	bl	800f1c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00c      	beq.n	800e26c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d007      	beq.n	800e26c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fa40 	bl	800e6ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	f003 0320 	and.w	r3, r3, #32
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00c      	beq.n	800e290 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f003 0320 	and.w	r3, r3, #32
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d007      	beq.n	800e290 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f06f 0220 	mvn.w	r2, #32
 800e288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 ff86 	bl	800f19c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e290:	bf00      	nop
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d101      	bne.n	800e2b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e2b2:	2302      	movs	r3, #2
 800e2b4:	e0ff      	b.n	800e4b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b14      	cmp	r3, #20
 800e2c2:	f200 80f0 	bhi.w	800e4a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e2cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2cc:	0800e321 	.word	0x0800e321
 800e2d0:	0800e4a7 	.word	0x0800e4a7
 800e2d4:	0800e4a7 	.word	0x0800e4a7
 800e2d8:	0800e4a7 	.word	0x0800e4a7
 800e2dc:	0800e361 	.word	0x0800e361
 800e2e0:	0800e4a7 	.word	0x0800e4a7
 800e2e4:	0800e4a7 	.word	0x0800e4a7
 800e2e8:	0800e4a7 	.word	0x0800e4a7
 800e2ec:	0800e3a3 	.word	0x0800e3a3
 800e2f0:	0800e4a7 	.word	0x0800e4a7
 800e2f4:	0800e4a7 	.word	0x0800e4a7
 800e2f8:	0800e4a7 	.word	0x0800e4a7
 800e2fc:	0800e3e3 	.word	0x0800e3e3
 800e300:	0800e4a7 	.word	0x0800e4a7
 800e304:	0800e4a7 	.word	0x0800e4a7
 800e308:	0800e4a7 	.word	0x0800e4a7
 800e30c:	0800e425 	.word	0x0800e425
 800e310:	0800e4a7 	.word	0x0800e4a7
 800e314:	0800e4a7 	.word	0x0800e4a7
 800e318:	0800e4a7 	.word	0x0800e4a7
 800e31c:	0800e465 	.word	0x0800e465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68b9      	ldr	r1, [r7, #8]
 800e326:	4618      	mov	r0, r3
 800e328:	f000 fa9c 	bl	800e864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	699a      	ldr	r2, [r3, #24]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f042 0208 	orr.w	r2, r2, #8
 800e33a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	699a      	ldr	r2, [r3, #24]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f022 0204 	bic.w	r2, r2, #4
 800e34a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6999      	ldr	r1, [r3, #24]
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	691a      	ldr	r2, [r3, #16]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	430a      	orrs	r2, r1
 800e35c:	619a      	str	r2, [r3, #24]
      break;
 800e35e:	e0a5      	b.n	800e4ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68b9      	ldr	r1, [r7, #8]
 800e366:	4618      	mov	r0, r3
 800e368:	f000 fb0c 	bl	800e984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	699a      	ldr	r2, [r3, #24]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e37a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	699a      	ldr	r2, [r3, #24]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e38a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	6999      	ldr	r1, [r3, #24]
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	691b      	ldr	r3, [r3, #16]
 800e396:	021a      	lsls	r2, r3, #8
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	430a      	orrs	r2, r1
 800e39e:	619a      	str	r2, [r3, #24]
      break;
 800e3a0:	e084      	b.n	800e4ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	68b9      	ldr	r1, [r7, #8]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f000 fb75 	bl	800ea98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	69da      	ldr	r2, [r3, #28]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f042 0208 	orr.w	r2, r2, #8
 800e3bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	69da      	ldr	r2, [r3, #28]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f022 0204 	bic.w	r2, r2, #4
 800e3cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	69d9      	ldr	r1, [r3, #28]
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	691a      	ldr	r2, [r3, #16]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	430a      	orrs	r2, r1
 800e3de:	61da      	str	r2, [r3, #28]
      break;
 800e3e0:	e064      	b.n	800e4ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68b9      	ldr	r1, [r7, #8]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f000 fbdd 	bl	800eba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	69da      	ldr	r2, [r3, #28]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	69da      	ldr	r2, [r3, #28]
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e40c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	69d9      	ldr	r1, [r3, #28]
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	021a      	lsls	r2, r3, #8
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	430a      	orrs	r2, r1
 800e420:	61da      	str	r2, [r3, #28]
      break;
 800e422:	e043      	b.n	800e4ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68b9      	ldr	r1, [r7, #8]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 fc26 	bl	800ec7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f042 0208 	orr.w	r2, r2, #8
 800e43e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f022 0204 	bic.w	r2, r2, #4
 800e44e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	691a      	ldr	r2, [r3, #16]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	430a      	orrs	r2, r1
 800e460:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e462:	e023      	b.n	800e4ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f000 fc6a 	bl	800ed44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e47e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e48e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	021a      	lsls	r2, r3, #8
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	430a      	orrs	r2, r1
 800e4a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e4a4:	e002      	b.n	800e4ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	75fb      	strb	r3, [r7, #23]
      break;
 800e4aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3718      	adds	r7, #24
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop

0800e4c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d101      	bne.n	800e4dc <HAL_TIM_ConfigClockSource+0x1c>
 800e4d8:	2302      	movs	r3, #2
 800e4da:	e0dc      	b.n	800e696 <HAL_TIM_ConfigClockSource+0x1d6>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e4f4:	68ba      	ldr	r2, [r7, #8]
 800e4f6:	4b6a      	ldr	r3, [pc, #424]	@ (800e6a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	68ba      	ldr	r2, [r7, #8]
 800e50a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a64      	ldr	r2, [pc, #400]	@ (800e6a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e512:	4293      	cmp	r3, r2
 800e514:	f000 80a9 	beq.w	800e66a <HAL_TIM_ConfigClockSource+0x1aa>
 800e518:	4a62      	ldr	r2, [pc, #392]	@ (800e6a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	f200 80ae 	bhi.w	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e520:	4a61      	ldr	r2, [pc, #388]	@ (800e6a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e522:	4293      	cmp	r3, r2
 800e524:	f000 80a1 	beq.w	800e66a <HAL_TIM_ConfigClockSource+0x1aa>
 800e528:	4a5f      	ldr	r2, [pc, #380]	@ (800e6a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	f200 80a6 	bhi.w	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e530:	4a5e      	ldr	r2, [pc, #376]	@ (800e6ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800e532:	4293      	cmp	r3, r2
 800e534:	f000 8099 	beq.w	800e66a <HAL_TIM_ConfigClockSource+0x1aa>
 800e538:	4a5c      	ldr	r2, [pc, #368]	@ (800e6ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	f200 809e 	bhi.w	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e540:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e544:	f000 8091 	beq.w	800e66a <HAL_TIM_ConfigClockSource+0x1aa>
 800e548:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e54c:	f200 8096 	bhi.w	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e550:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e554:	f000 8089 	beq.w	800e66a <HAL_TIM_ConfigClockSource+0x1aa>
 800e558:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e55c:	f200 808e 	bhi.w	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e564:	d03e      	beq.n	800e5e4 <HAL_TIM_ConfigClockSource+0x124>
 800e566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e56a:	f200 8087 	bhi.w	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e56e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e572:	f000 8086 	beq.w	800e682 <HAL_TIM_ConfigClockSource+0x1c2>
 800e576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e57a:	d87f      	bhi.n	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e57c:	2b70      	cmp	r3, #112	@ 0x70
 800e57e:	d01a      	beq.n	800e5b6 <HAL_TIM_ConfigClockSource+0xf6>
 800e580:	2b70      	cmp	r3, #112	@ 0x70
 800e582:	d87b      	bhi.n	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e584:	2b60      	cmp	r3, #96	@ 0x60
 800e586:	d050      	beq.n	800e62a <HAL_TIM_ConfigClockSource+0x16a>
 800e588:	2b60      	cmp	r3, #96	@ 0x60
 800e58a:	d877      	bhi.n	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e58c:	2b50      	cmp	r3, #80	@ 0x50
 800e58e:	d03c      	beq.n	800e60a <HAL_TIM_ConfigClockSource+0x14a>
 800e590:	2b50      	cmp	r3, #80	@ 0x50
 800e592:	d873      	bhi.n	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e594:	2b40      	cmp	r3, #64	@ 0x40
 800e596:	d058      	beq.n	800e64a <HAL_TIM_ConfigClockSource+0x18a>
 800e598:	2b40      	cmp	r3, #64	@ 0x40
 800e59a:	d86f      	bhi.n	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e59c:	2b30      	cmp	r3, #48	@ 0x30
 800e59e:	d064      	beq.n	800e66a <HAL_TIM_ConfigClockSource+0x1aa>
 800e5a0:	2b30      	cmp	r3, #48	@ 0x30
 800e5a2:	d86b      	bhi.n	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e5a4:	2b20      	cmp	r3, #32
 800e5a6:	d060      	beq.n	800e66a <HAL_TIM_ConfigClockSource+0x1aa>
 800e5a8:	2b20      	cmp	r3, #32
 800e5aa:	d867      	bhi.n	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d05c      	beq.n	800e66a <HAL_TIM_ConfigClockSource+0x1aa>
 800e5b0:	2b10      	cmp	r3, #16
 800e5b2:	d05a      	beq.n	800e66a <HAL_TIM_ConfigClockSource+0x1aa>
 800e5b4:	e062      	b.n	800e67c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e5c6:	f000 fca1 	bl	800ef0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e5d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68ba      	ldr	r2, [r7, #8]
 800e5e0:	609a      	str	r2, [r3, #8]
      break;
 800e5e2:	e04f      	b.n	800e684 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e5f4:	f000 fc8a 	bl	800ef0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	689a      	ldr	r2, [r3, #8]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e606:	609a      	str	r2, [r3, #8]
      break;
 800e608:	e03c      	b.n	800e684 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e616:	461a      	mov	r2, r3
 800e618:	f000 fbfa 	bl	800ee10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2150      	movs	r1, #80	@ 0x50
 800e622:	4618      	mov	r0, r3
 800e624:	f000 fc54 	bl	800eed0 <TIM_ITRx_SetConfig>
      break;
 800e628:	e02c      	b.n	800e684 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e636:	461a      	mov	r2, r3
 800e638:	f000 fc19 	bl	800ee6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2160      	movs	r1, #96	@ 0x60
 800e642:	4618      	mov	r0, r3
 800e644:	f000 fc44 	bl	800eed0 <TIM_ITRx_SetConfig>
      break;
 800e648:	e01c      	b.n	800e684 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e656:	461a      	mov	r2, r3
 800e658:	f000 fbda 	bl	800ee10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2140      	movs	r1, #64	@ 0x40
 800e662:	4618      	mov	r0, r3
 800e664:	f000 fc34 	bl	800eed0 <TIM_ITRx_SetConfig>
      break;
 800e668:	e00c      	b.n	800e684 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4619      	mov	r1, r3
 800e674:	4610      	mov	r0, r2
 800e676:	f000 fc2b 	bl	800eed0 <TIM_ITRx_SetConfig>
      break;
 800e67a:	e003      	b.n	800e684 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e67c:	2301      	movs	r3, #1
 800e67e:	73fb      	strb	r3, [r7, #15]
      break;
 800e680:	e000      	b.n	800e684 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e694:	7bfb      	ldrb	r3, [r7, #15]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	ffceff88 	.word	0xffceff88
 800e6a4:	00100040 	.word	0x00100040
 800e6a8:	00100030 	.word	0x00100030
 800e6ac:	00100020 	.word	0x00100020

0800e6b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6b8:	bf00      	nop
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6cc:	bf00      	nop
 800e6ce:	370c      	adds	r7, #12
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr

0800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4a4a      	ldr	r2, [pc, #296]	@ (800e83c <TIM_Base_SetConfig+0x13c>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d013      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e71e:	d00f      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	4a47      	ldr	r2, [pc, #284]	@ (800e840 <TIM_Base_SetConfig+0x140>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d00b      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4a46      	ldr	r2, [pc, #280]	@ (800e844 <TIM_Base_SetConfig+0x144>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d007      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a45      	ldr	r2, [pc, #276]	@ (800e848 <TIM_Base_SetConfig+0x148>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d003      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a44      	ldr	r2, [pc, #272]	@ (800e84c <TIM_Base_SetConfig+0x14c>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d108      	bne.n	800e752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	4313      	orrs	r3, r2
 800e750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4a39      	ldr	r2, [pc, #228]	@ (800e83c <TIM_Base_SetConfig+0x13c>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d027      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e760:	d023      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	4a36      	ldr	r2, [pc, #216]	@ (800e840 <TIM_Base_SetConfig+0x140>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d01f      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4a35      	ldr	r2, [pc, #212]	@ (800e844 <TIM_Base_SetConfig+0x144>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d01b      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4a34      	ldr	r2, [pc, #208]	@ (800e848 <TIM_Base_SetConfig+0x148>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d017      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4a33      	ldr	r2, [pc, #204]	@ (800e84c <TIM_Base_SetConfig+0x14c>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d013      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4a32      	ldr	r2, [pc, #200]	@ (800e850 <TIM_Base_SetConfig+0x150>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d00f      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4a31      	ldr	r2, [pc, #196]	@ (800e854 <TIM_Base_SetConfig+0x154>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d00b      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4a30      	ldr	r2, [pc, #192]	@ (800e858 <TIM_Base_SetConfig+0x158>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d007      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4a2f      	ldr	r2, [pc, #188]	@ (800e85c <TIM_Base_SetConfig+0x15c>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d003      	beq.n	800e7aa <TIM_Base_SetConfig+0xaa>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4a2e      	ldr	r2, [pc, #184]	@ (800e860 <TIM_Base_SetConfig+0x160>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d108      	bne.n	800e7bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e7b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	695b      	ldr	r3, [r3, #20]
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	689a      	ldr	r2, [r3, #8]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a16      	ldr	r2, [pc, #88]	@ (800e83c <TIM_Base_SetConfig+0x13c>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d00f      	beq.n	800e808 <TIM_Base_SetConfig+0x108>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4a18      	ldr	r2, [pc, #96]	@ (800e84c <TIM_Base_SetConfig+0x14c>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d00b      	beq.n	800e808 <TIM_Base_SetConfig+0x108>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a17      	ldr	r2, [pc, #92]	@ (800e850 <TIM_Base_SetConfig+0x150>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d007      	beq.n	800e808 <TIM_Base_SetConfig+0x108>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a16      	ldr	r2, [pc, #88]	@ (800e854 <TIM_Base_SetConfig+0x154>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d003      	beq.n	800e808 <TIM_Base_SetConfig+0x108>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	4a15      	ldr	r2, [pc, #84]	@ (800e858 <TIM_Base_SetConfig+0x158>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d103      	bne.n	800e810 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	691a      	ldr	r2, [r3, #16]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	691b      	ldr	r3, [r3, #16]
 800e81a:	f003 0301 	and.w	r3, r3, #1
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d105      	bne.n	800e82e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	f023 0201 	bic.w	r2, r3, #1
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	611a      	str	r2, [r3, #16]
  }
}
 800e82e:	bf00      	nop
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	40010000 	.word	0x40010000
 800e840:	40000400 	.word	0x40000400
 800e844:	40000800 	.word	0x40000800
 800e848:	40000c00 	.word	0x40000c00
 800e84c:	40010400 	.word	0x40010400
 800e850:	40014000 	.word	0x40014000
 800e854:	40014400 	.word	0x40014400
 800e858:	40014800 	.word	0x40014800
 800e85c:	4000e000 	.word	0x4000e000
 800e860:	4000e400 	.word	0x4000e400

0800e864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e864:	b480      	push	{r7}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a1b      	ldr	r3, [r3, #32]
 800e878:	f023 0201 	bic.w	r2, r3, #1
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	4b37      	ldr	r3, [pc, #220]	@ (800e96c <TIM_OC1_SetConfig+0x108>)
 800e890:	4013      	ands	r3, r2
 800e892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f023 0303 	bic.w	r3, r3, #3
 800e89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	f023 0302 	bic.w	r3, r3, #2
 800e8ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	4a2d      	ldr	r2, [pc, #180]	@ (800e970 <TIM_OC1_SetConfig+0x10c>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d00f      	beq.n	800e8e0 <TIM_OC1_SetConfig+0x7c>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a2c      	ldr	r2, [pc, #176]	@ (800e974 <TIM_OC1_SetConfig+0x110>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d00b      	beq.n	800e8e0 <TIM_OC1_SetConfig+0x7c>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	4a2b      	ldr	r2, [pc, #172]	@ (800e978 <TIM_OC1_SetConfig+0x114>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d007      	beq.n	800e8e0 <TIM_OC1_SetConfig+0x7c>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a2a      	ldr	r2, [pc, #168]	@ (800e97c <TIM_OC1_SetConfig+0x118>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d003      	beq.n	800e8e0 <TIM_OC1_SetConfig+0x7c>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	4a29      	ldr	r2, [pc, #164]	@ (800e980 <TIM_OC1_SetConfig+0x11c>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d10c      	bne.n	800e8fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	f023 0308 	bic.w	r3, r3, #8
 800e8e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	697a      	ldr	r2, [r7, #20]
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	f023 0304 	bic.w	r3, r3, #4
 800e8f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4a1c      	ldr	r2, [pc, #112]	@ (800e970 <TIM_OC1_SetConfig+0x10c>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d00f      	beq.n	800e922 <TIM_OC1_SetConfig+0xbe>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4a1b      	ldr	r2, [pc, #108]	@ (800e974 <TIM_OC1_SetConfig+0x110>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d00b      	beq.n	800e922 <TIM_OC1_SetConfig+0xbe>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4a1a      	ldr	r2, [pc, #104]	@ (800e978 <TIM_OC1_SetConfig+0x114>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d007      	beq.n	800e922 <TIM_OC1_SetConfig+0xbe>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4a19      	ldr	r2, [pc, #100]	@ (800e97c <TIM_OC1_SetConfig+0x118>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d003      	beq.n	800e922 <TIM_OC1_SetConfig+0xbe>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4a18      	ldr	r2, [pc, #96]	@ (800e980 <TIM_OC1_SetConfig+0x11c>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d111      	bne.n	800e946 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	4313      	orrs	r3, r2
 800e93a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	693a      	ldr	r2, [r7, #16]
 800e942:	4313      	orrs	r3, r2
 800e944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	685a      	ldr	r2, [r3, #4]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	697a      	ldr	r2, [r7, #20]
 800e95e:	621a      	str	r2, [r3, #32]
}
 800e960:	bf00      	nop
 800e962:	371c      	adds	r7, #28
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr
 800e96c:	fffeff8f 	.word	0xfffeff8f
 800e970:	40010000 	.word	0x40010000
 800e974:	40010400 	.word	0x40010400
 800e978:	40014000 	.word	0x40014000
 800e97c:	40014400 	.word	0x40014400
 800e980:	40014800 	.word	0x40014800

0800e984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e984:	b480      	push	{r7}
 800e986:	b087      	sub	sp, #28
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6a1b      	ldr	r3, [r3, #32]
 800e998:	f023 0210 	bic.w	r2, r3, #16
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	699b      	ldr	r3, [r3, #24]
 800e9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	4b34      	ldr	r3, [pc, #208]	@ (800ea80 <TIM_OC2_SetConfig+0xfc>)
 800e9b0:	4013      	ands	r3, r2
 800e9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	021b      	lsls	r3, r3, #8
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	f023 0320 	bic.w	r3, r3, #32
 800e9ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	011b      	lsls	r3, r3, #4
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4a29      	ldr	r2, [pc, #164]	@ (800ea84 <TIM_OC2_SetConfig+0x100>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d003      	beq.n	800e9ec <TIM_OC2_SetConfig+0x68>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4a28      	ldr	r2, [pc, #160]	@ (800ea88 <TIM_OC2_SetConfig+0x104>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d10d      	bne.n	800ea08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	011b      	lsls	r3, r3, #4
 800e9fa:	697a      	ldr	r2, [r7, #20]
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	4a1e      	ldr	r2, [pc, #120]	@ (800ea84 <TIM_OC2_SetConfig+0x100>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d00f      	beq.n	800ea30 <TIM_OC2_SetConfig+0xac>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4a1d      	ldr	r2, [pc, #116]	@ (800ea88 <TIM_OC2_SetConfig+0x104>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d00b      	beq.n	800ea30 <TIM_OC2_SetConfig+0xac>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4a1c      	ldr	r2, [pc, #112]	@ (800ea8c <TIM_OC2_SetConfig+0x108>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d007      	beq.n	800ea30 <TIM_OC2_SetConfig+0xac>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	4a1b      	ldr	r2, [pc, #108]	@ (800ea90 <TIM_OC2_SetConfig+0x10c>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d003      	beq.n	800ea30 <TIM_OC2_SetConfig+0xac>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4a1a      	ldr	r2, [pc, #104]	@ (800ea94 <TIM_OC2_SetConfig+0x110>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d113      	bne.n	800ea58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ea36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	695b      	ldr	r3, [r3, #20]
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	693a      	ldr	r2, [r7, #16]
 800ea54:	4313      	orrs	r3, r2
 800ea56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	693a      	ldr	r2, [r7, #16]
 800ea5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	685a      	ldr	r2, [r3, #4]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	697a      	ldr	r2, [r7, #20]
 800ea70:	621a      	str	r2, [r3, #32]
}
 800ea72:	bf00      	nop
 800ea74:	371c      	adds	r7, #28
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	feff8fff 	.word	0xfeff8fff
 800ea84:	40010000 	.word	0x40010000
 800ea88:	40010400 	.word	0x40010400
 800ea8c:	40014000 	.word	0x40014000
 800ea90:	40014400 	.word	0x40014400
 800ea94:	40014800 	.word	0x40014800

0800ea98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b087      	sub	sp, #28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a1b      	ldr	r3, [r3, #32]
 800eaa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a1b      	ldr	r3, [r3, #32]
 800eaac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	69db      	ldr	r3, [r3, #28]
 800eabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	4b33      	ldr	r3, [pc, #204]	@ (800eb90 <TIM_OC3_SetConfig+0xf8>)
 800eac4:	4013      	ands	r3, r2
 800eac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f023 0303 	bic.w	r3, r3, #3
 800eace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	68fa      	ldr	r2, [r7, #12]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	021b      	lsls	r3, r3, #8
 800eae8:	697a      	ldr	r2, [r7, #20]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4a28      	ldr	r2, [pc, #160]	@ (800eb94 <TIM_OC3_SetConfig+0xfc>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d003      	beq.n	800eafe <TIM_OC3_SetConfig+0x66>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4a27      	ldr	r2, [pc, #156]	@ (800eb98 <TIM_OC3_SetConfig+0x100>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d10d      	bne.n	800eb1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	021b      	lsls	r3, r3, #8
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4a1d      	ldr	r2, [pc, #116]	@ (800eb94 <TIM_OC3_SetConfig+0xfc>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d00f      	beq.n	800eb42 <TIM_OC3_SetConfig+0xaa>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	4a1c      	ldr	r2, [pc, #112]	@ (800eb98 <TIM_OC3_SetConfig+0x100>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d00b      	beq.n	800eb42 <TIM_OC3_SetConfig+0xaa>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	4a1b      	ldr	r2, [pc, #108]	@ (800eb9c <TIM_OC3_SetConfig+0x104>)
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d007      	beq.n	800eb42 <TIM_OC3_SetConfig+0xaa>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4a1a      	ldr	r2, [pc, #104]	@ (800eba0 <TIM_OC3_SetConfig+0x108>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d003      	beq.n	800eb42 <TIM_OC3_SetConfig+0xaa>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4a19      	ldr	r2, [pc, #100]	@ (800eba4 <TIM_OC3_SetConfig+0x10c>)
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d113      	bne.n	800eb6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eb50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	695b      	ldr	r3, [r3, #20]
 800eb56:	011b      	lsls	r3, r3, #4
 800eb58:	693a      	ldr	r2, [r7, #16]
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	699b      	ldr	r3, [r3, #24]
 800eb62:	011b      	lsls	r3, r3, #4
 800eb64:	693a      	ldr	r2, [r7, #16]
 800eb66:	4313      	orrs	r3, r2
 800eb68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	693a      	ldr	r2, [r7, #16]
 800eb6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	685a      	ldr	r2, [r3, #4]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	697a      	ldr	r2, [r7, #20]
 800eb82:	621a      	str	r2, [r3, #32]
}
 800eb84:	bf00      	nop
 800eb86:	371c      	adds	r7, #28
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr
 800eb90:	fffeff8f 	.word	0xfffeff8f
 800eb94:	40010000 	.word	0x40010000
 800eb98:	40010400 	.word	0x40010400
 800eb9c:	40014000 	.word	0x40014000
 800eba0:	40014400 	.word	0x40014400
 800eba4:	40014800 	.word	0x40014800

0800eba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b087      	sub	sp, #28
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6a1b      	ldr	r3, [r3, #32]
 800ebb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6a1b      	ldr	r3, [r3, #32]
 800ebbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	69db      	ldr	r3, [r3, #28]
 800ebce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	4b24      	ldr	r3, [pc, #144]	@ (800ec64 <TIM_OC4_SetConfig+0xbc>)
 800ebd4:	4013      	ands	r3, r2
 800ebd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	021b      	lsls	r3, r3, #8
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ebf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	031b      	lsls	r3, r3, #12
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4a19      	ldr	r2, [pc, #100]	@ (800ec68 <TIM_OC4_SetConfig+0xc0>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d00f      	beq.n	800ec28 <TIM_OC4_SetConfig+0x80>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4a18      	ldr	r2, [pc, #96]	@ (800ec6c <TIM_OC4_SetConfig+0xc4>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d00b      	beq.n	800ec28 <TIM_OC4_SetConfig+0x80>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4a17      	ldr	r2, [pc, #92]	@ (800ec70 <TIM_OC4_SetConfig+0xc8>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d007      	beq.n	800ec28 <TIM_OC4_SetConfig+0x80>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	4a16      	ldr	r2, [pc, #88]	@ (800ec74 <TIM_OC4_SetConfig+0xcc>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d003      	beq.n	800ec28 <TIM_OC4_SetConfig+0x80>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	4a15      	ldr	r2, [pc, #84]	@ (800ec78 <TIM_OC4_SetConfig+0xd0>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d109      	bne.n	800ec3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ec2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	695b      	ldr	r3, [r3, #20]
 800ec34:	019b      	lsls	r3, r3, #6
 800ec36:	697a      	ldr	r2, [r7, #20]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	697a      	ldr	r2, [r7, #20]
 800ec40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	685a      	ldr	r2, [r3, #4]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	693a      	ldr	r2, [r7, #16]
 800ec54:	621a      	str	r2, [r3, #32]
}
 800ec56:	bf00      	nop
 800ec58:	371c      	adds	r7, #28
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	feff8fff 	.word	0xfeff8fff
 800ec68:	40010000 	.word	0x40010000
 800ec6c:	40010400 	.word	0x40010400
 800ec70:	40014000 	.word	0x40014000
 800ec74:	40014400 	.word	0x40014400
 800ec78:	40014800 	.word	0x40014800

0800ec7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b087      	sub	sp, #28
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6a1b      	ldr	r3, [r3, #32]
 800ec8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6a1b      	ldr	r3, [r3, #32]
 800ec90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	4b21      	ldr	r3, [pc, #132]	@ (800ed2c <TIM_OC5_SetConfig+0xb0>)
 800eca8:	4013      	ands	r3, r2
 800ecaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ecbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	041b      	lsls	r3, r3, #16
 800ecc4:	693a      	ldr	r2, [r7, #16]
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	4a18      	ldr	r2, [pc, #96]	@ (800ed30 <TIM_OC5_SetConfig+0xb4>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d00f      	beq.n	800ecf2 <TIM_OC5_SetConfig+0x76>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	4a17      	ldr	r2, [pc, #92]	@ (800ed34 <TIM_OC5_SetConfig+0xb8>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d00b      	beq.n	800ecf2 <TIM_OC5_SetConfig+0x76>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4a16      	ldr	r2, [pc, #88]	@ (800ed38 <TIM_OC5_SetConfig+0xbc>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d007      	beq.n	800ecf2 <TIM_OC5_SetConfig+0x76>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	4a15      	ldr	r2, [pc, #84]	@ (800ed3c <TIM_OC5_SetConfig+0xc0>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d003      	beq.n	800ecf2 <TIM_OC5_SetConfig+0x76>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	4a14      	ldr	r2, [pc, #80]	@ (800ed40 <TIM_OC5_SetConfig+0xc4>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d109      	bne.n	800ed06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ecf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	695b      	ldr	r3, [r3, #20]
 800ecfe:	021b      	lsls	r3, r3, #8
 800ed00:	697a      	ldr	r2, [r7, #20]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	697a      	ldr	r2, [r7, #20]
 800ed0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	68fa      	ldr	r2, [r7, #12]
 800ed10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	685a      	ldr	r2, [r3, #4]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	693a      	ldr	r2, [r7, #16]
 800ed1e:	621a      	str	r2, [r3, #32]
}
 800ed20:	bf00      	nop
 800ed22:	371c      	adds	r7, #28
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr
 800ed2c:	fffeff8f 	.word	0xfffeff8f
 800ed30:	40010000 	.word	0x40010000
 800ed34:	40010400 	.word	0x40010400
 800ed38:	40014000 	.word	0x40014000
 800ed3c:	40014400 	.word	0x40014400
 800ed40:	40014800 	.word	0x40014800

0800ed44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b087      	sub	sp, #28
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6a1b      	ldr	r3, [r3, #32]
 800ed52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a1b      	ldr	r3, [r3, #32]
 800ed58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	4b22      	ldr	r3, [pc, #136]	@ (800edf8 <TIM_OC6_SetConfig+0xb4>)
 800ed70:	4013      	ands	r3, r2
 800ed72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	021b      	lsls	r3, r3, #8
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ed86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	051b      	lsls	r3, r3, #20
 800ed8e:	693a      	ldr	r2, [r7, #16]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	4a19      	ldr	r2, [pc, #100]	@ (800edfc <TIM_OC6_SetConfig+0xb8>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d00f      	beq.n	800edbc <TIM_OC6_SetConfig+0x78>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4a18      	ldr	r2, [pc, #96]	@ (800ee00 <TIM_OC6_SetConfig+0xbc>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d00b      	beq.n	800edbc <TIM_OC6_SetConfig+0x78>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4a17      	ldr	r2, [pc, #92]	@ (800ee04 <TIM_OC6_SetConfig+0xc0>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d007      	beq.n	800edbc <TIM_OC6_SetConfig+0x78>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4a16      	ldr	r2, [pc, #88]	@ (800ee08 <TIM_OC6_SetConfig+0xc4>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d003      	beq.n	800edbc <TIM_OC6_SetConfig+0x78>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4a15      	ldr	r2, [pc, #84]	@ (800ee0c <TIM_OC6_SetConfig+0xc8>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d109      	bne.n	800edd0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800edc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	695b      	ldr	r3, [r3, #20]
 800edc8:	029b      	lsls	r3, r3, #10
 800edca:	697a      	ldr	r2, [r7, #20]
 800edcc:	4313      	orrs	r3, r2
 800edce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	697a      	ldr	r2, [r7, #20]
 800edd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	685a      	ldr	r2, [r3, #4]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	693a      	ldr	r2, [r7, #16]
 800ede8:	621a      	str	r2, [r3, #32]
}
 800edea:	bf00      	nop
 800edec:	371c      	adds	r7, #28
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr
 800edf6:	bf00      	nop
 800edf8:	feff8fff 	.word	0xfeff8fff
 800edfc:	40010000 	.word	0x40010000
 800ee00:	40010400 	.word	0x40010400
 800ee04:	40014000 	.word	0x40014000
 800ee08:	40014400 	.word	0x40014400
 800ee0c:	40014800 	.word	0x40014800

0800ee10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b087      	sub	sp, #28
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	6a1b      	ldr	r3, [r3, #32]
 800ee20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	6a1b      	ldr	r3, [r3, #32]
 800ee26:	f023 0201 	bic.w	r2, r3, #1
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	699b      	ldr	r3, [r3, #24]
 800ee32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	011b      	lsls	r3, r3, #4
 800ee40:	693a      	ldr	r2, [r7, #16]
 800ee42:	4313      	orrs	r3, r2
 800ee44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	f023 030a 	bic.w	r3, r3, #10
 800ee4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee4e:	697a      	ldr	r2, [r7, #20]
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	4313      	orrs	r3, r2
 800ee54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	693a      	ldr	r2, [r7, #16]
 800ee5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	697a      	ldr	r2, [r7, #20]
 800ee60:	621a      	str	r2, [r3, #32]
}
 800ee62:	bf00      	nop
 800ee64:	371c      	adds	r7, #28
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr

0800ee6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee6e:	b480      	push	{r7}
 800ee70:	b087      	sub	sp, #28
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	60f8      	str	r0, [r7, #12]
 800ee76:	60b9      	str	r1, [r7, #8]
 800ee78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6a1b      	ldr	r3, [r3, #32]
 800ee84:	f023 0210 	bic.w	r2, r3, #16
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	699b      	ldr	r3, [r3, #24]
 800ee90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	031b      	lsls	r3, r3, #12
 800ee9e:	693a      	ldr	r2, [r7, #16]
 800eea0:	4313      	orrs	r3, r2
 800eea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800eeaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	011b      	lsls	r3, r3, #4
 800eeb0:	697a      	ldr	r2, [r7, #20]
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	693a      	ldr	r2, [r7, #16]
 800eeba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	697a      	ldr	r2, [r7, #20]
 800eec0:	621a      	str	r2, [r3, #32]
}
 800eec2:	bf00      	nop
 800eec4:	371c      	adds	r7, #28
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
	...

0800eed0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	4b09      	ldr	r3, [pc, #36]	@ (800ef08 <TIM_ITRx_SetConfig+0x38>)
 800eee4:	4013      	ands	r3, r2
 800eee6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eee8:	683a      	ldr	r2, [r7, #0]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	4313      	orrs	r3, r2
 800eeee:	f043 0307 	orr.w	r3, r3, #7
 800eef2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	609a      	str	r2, [r3, #8]
}
 800eefa:	bf00      	nop
 800eefc:	3714      	adds	r7, #20
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop
 800ef08:	ffcfff8f 	.word	0xffcfff8f

0800ef0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b087      	sub	sp, #28
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
 800ef18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ef26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	021a      	lsls	r2, r3, #8
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	431a      	orrs	r2, r3
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	4313      	orrs	r3, r2
 800ef34:	697a      	ldr	r2, [r7, #20]
 800ef36:	4313      	orrs	r3, r2
 800ef38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	697a      	ldr	r2, [r7, #20]
 800ef3e:	609a      	str	r2, [r3, #8]
}
 800ef40:	bf00      	nop
 800ef42:	371c      	adds	r7, #28
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr

0800ef4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b085      	sub	sp, #20
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d101      	bne.n	800ef64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef60:	2302      	movs	r3, #2
 800ef62:	e077      	b.n	800f054 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2201      	movs	r2, #1
 800ef68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2202      	movs	r2, #2
 800ef70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a35      	ldr	r2, [pc, #212]	@ (800f060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d004      	beq.n	800ef98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4a34      	ldr	r2, [pc, #208]	@ (800f064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d108      	bne.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ef9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	4313      	orrs	r3, r2
 800efa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	4313      	orrs	r3, r2
 800efba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4a25      	ldr	r2, [pc, #148]	@ (800f060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d02c      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efd6:	d027      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a22      	ldr	r2, [pc, #136]	@ (800f068 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d022      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4a21      	ldr	r2, [pc, #132]	@ (800f06c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d01d      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a1f      	ldr	r2, [pc, #124]	@ (800f070 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d018      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a1a      	ldr	r2, [pc, #104]	@ (800f064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d013      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a1b      	ldr	r2, [pc, #108]	@ (800f074 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d00e      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4a1a      	ldr	r2, [pc, #104]	@ (800f078 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d009      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a18      	ldr	r2, [pc, #96]	@ (800f07c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d004      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	4a17      	ldr	r2, [pc, #92]	@ (800f080 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d10c      	bne.n	800f042 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f02e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	689b      	ldr	r3, [r3, #8]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	4313      	orrs	r3, r2
 800f038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2201      	movs	r2, #1
 800f046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3714      	adds	r7, #20
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	40010000 	.word	0x40010000
 800f064:	40010400 	.word	0x40010400
 800f068:	40000400 	.word	0x40000400
 800f06c:	40000800 	.word	0x40000800
 800f070:	40000c00 	.word	0x40000c00
 800f074:	40001800 	.word	0x40001800
 800f078:	40014000 	.word	0x40014000
 800f07c:	4000e000 	.word	0x4000e000
 800f080:	4000e400 	.word	0x4000e400

0800f084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f084:	b480      	push	{r7}
 800f086:	b085      	sub	sp, #20
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f08e:	2300      	movs	r3, #0
 800f090:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d101      	bne.n	800f0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f09c:	2302      	movs	r3, #2
 800f09e:	e073      	b.n	800f188 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	691b      	ldr	r3, [r3, #16]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f106:	4313      	orrs	r3, r2
 800f108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	699b      	ldr	r3, [r3, #24]
 800f114:	041b      	lsls	r3, r3, #16
 800f116:	4313      	orrs	r3, r2
 800f118:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	69db      	ldr	r3, [r3, #28]
 800f124:	4313      	orrs	r3, r2
 800f126:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	4a19      	ldr	r2, [pc, #100]	@ (800f194 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d004      	beq.n	800f13c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a18      	ldr	r2, [pc, #96]	@ (800f198 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d11c      	bne.n	800f176 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f146:	051b      	lsls	r3, r3, #20
 800f148:	4313      	orrs	r3, r2
 800f14a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	4313      	orrs	r3, r2
 800f158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f164:	4313      	orrs	r3, r2
 800f166:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f172:	4313      	orrs	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f186:	2300      	movs	r3, #0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3714      	adds	r7, #20
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr
 800f194:	40010000 	.word	0x40010000
 800f198:	40010400 	.word	0x40010400

0800f19c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f1b8:	bf00      	nop
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f1cc:	bf00      	nop
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e042      	b.n	800f270 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d106      	bne.n	800f202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f7f3 f9d1 	bl	80025a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2224      	movs	r2, #36	@ 0x24
 800f206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f022 0201 	bic.w	r2, r2, #1
 800f218:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d002      	beq.n	800f228 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 ff22 	bl	801006c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 f8b3 	bl	800f394 <UART_SetConfig>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b01      	cmp	r3, #1
 800f232:	d101      	bne.n	800f238 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f234:	2301      	movs	r3, #1
 800f236:	e01b      	b.n	800f270 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	685a      	ldr	r2, [r3, #4]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	689a      	ldr	r2, [r3, #8]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f042 0201 	orr.w	r2, r2, #1
 800f266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 ffa1 	bl	80101b0 <UART_CheckIdleState>
 800f26e:	4603      	mov	r3, r0
}
 800f270:	4618      	mov	r0, r3
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08a      	sub	sp, #40	@ 0x28
 800f27c:	af02      	add	r7, sp, #8
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	603b      	str	r3, [r7, #0]
 800f284:	4613      	mov	r3, r2
 800f286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f28e:	2b20      	cmp	r3, #32
 800f290:	d17b      	bne.n	800f38a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d002      	beq.n	800f29e <HAL_UART_Transmit+0x26>
 800f298:	88fb      	ldrh	r3, [r7, #6]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d101      	bne.n	800f2a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e074      	b.n	800f38c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2221      	movs	r2, #33	@ 0x21
 800f2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f2b2:	f7f3 fc07 	bl	8002ac4 <HAL_GetTick>
 800f2b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	88fa      	ldrh	r2, [r7, #6]
 800f2bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	88fa      	ldrh	r2, [r7, #6]
 800f2c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2d0:	d108      	bne.n	800f2e4 <HAL_UART_Transmit+0x6c>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d104      	bne.n	800f2e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	61bb      	str	r3, [r7, #24]
 800f2e2:	e003      	b.n	800f2ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f2ec:	e030      	b.n	800f350 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	9300      	str	r3, [sp, #0]
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	2180      	movs	r1, #128	@ 0x80
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f001 f803 	bl	8010304 <UART_WaitOnFlagUntilTimeout>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d005      	beq.n	800f310 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2220      	movs	r2, #32
 800f308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f30c:	2303      	movs	r3, #3
 800f30e:	e03d      	b.n	800f38c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d10b      	bne.n	800f32e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	881b      	ldrh	r3, [r3, #0]
 800f31a:	461a      	mov	r2, r3
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f324:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	3302      	adds	r3, #2
 800f32a:	61bb      	str	r3, [r7, #24]
 800f32c:	e007      	b.n	800f33e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	781a      	ldrb	r2, [r3, #0]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	3301      	adds	r3, #1
 800f33c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f344:	b29b      	uxth	r3, r3
 800f346:	3b01      	subs	r3, #1
 800f348:	b29a      	uxth	r2, r3
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f356:	b29b      	uxth	r3, r3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d1c8      	bne.n	800f2ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	2200      	movs	r2, #0
 800f364:	2140      	movs	r1, #64	@ 0x40
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	f000 ffcc 	bl	8010304 <UART_WaitOnFlagUntilTimeout>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d005      	beq.n	800f37e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2220      	movs	r2, #32
 800f376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f37a:	2303      	movs	r3, #3
 800f37c:	e006      	b.n	800f38c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2220      	movs	r2, #32
 800f382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f386:	2300      	movs	r3, #0
 800f388:	e000      	b.n	800f38c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f38a:	2302      	movs	r3, #2
  }
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3720      	adds	r7, #32
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f398:	b092      	sub	sp, #72	@ 0x48
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	689a      	ldr	r2, [r3, #8]
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	431a      	orrs	r2, r3
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	695b      	ldr	r3, [r3, #20]
 800f3b2:	431a      	orrs	r2, r3
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	69db      	ldr	r3, [r3, #28]
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	4bbe      	ldr	r3, [pc, #760]	@ (800f6bc <UART_SetConfig+0x328>)
 800f3c4:	4013      	ands	r3, r2
 800f3c6:	697a      	ldr	r2, [r7, #20]
 800f3c8:	6812      	ldr	r2, [r2, #0]
 800f3ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f3cc:	430b      	orrs	r3, r1
 800f3ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	68da      	ldr	r2, [r3, #12]
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	430a      	orrs	r2, r1
 800f3e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	699b      	ldr	r3, [r3, #24]
 800f3ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	4ab3      	ldr	r2, [pc, #716]	@ (800f6c0 <UART_SetConfig+0x32c>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d004      	beq.n	800f400 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	6a1b      	ldr	r3, [r3, #32]
 800f3fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	689a      	ldr	r2, [r3, #8]
 800f406:	4baf      	ldr	r3, [pc, #700]	@ (800f6c4 <UART_SetConfig+0x330>)
 800f408:	4013      	ands	r3, r2
 800f40a:	697a      	ldr	r2, [r7, #20]
 800f40c:	6812      	ldr	r2, [r2, #0]
 800f40e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f410:	430b      	orrs	r3, r1
 800f412:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f41a:	f023 010f 	bic.w	r1, r3, #15
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	430a      	orrs	r2, r1
 800f428:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4aa6      	ldr	r2, [pc, #664]	@ (800f6c8 <UART_SetConfig+0x334>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d177      	bne.n	800f524 <UART_SetConfig+0x190>
 800f434:	4ba5      	ldr	r3, [pc, #660]	@ (800f6cc <UART_SetConfig+0x338>)
 800f436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f438:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f43c:	2b28      	cmp	r3, #40	@ 0x28
 800f43e:	d86d      	bhi.n	800f51c <UART_SetConfig+0x188>
 800f440:	a201      	add	r2, pc, #4	@ (adr r2, 800f448 <UART_SetConfig+0xb4>)
 800f442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f446:	bf00      	nop
 800f448:	0800f4ed 	.word	0x0800f4ed
 800f44c:	0800f51d 	.word	0x0800f51d
 800f450:	0800f51d 	.word	0x0800f51d
 800f454:	0800f51d 	.word	0x0800f51d
 800f458:	0800f51d 	.word	0x0800f51d
 800f45c:	0800f51d 	.word	0x0800f51d
 800f460:	0800f51d 	.word	0x0800f51d
 800f464:	0800f51d 	.word	0x0800f51d
 800f468:	0800f4f5 	.word	0x0800f4f5
 800f46c:	0800f51d 	.word	0x0800f51d
 800f470:	0800f51d 	.word	0x0800f51d
 800f474:	0800f51d 	.word	0x0800f51d
 800f478:	0800f51d 	.word	0x0800f51d
 800f47c:	0800f51d 	.word	0x0800f51d
 800f480:	0800f51d 	.word	0x0800f51d
 800f484:	0800f51d 	.word	0x0800f51d
 800f488:	0800f4fd 	.word	0x0800f4fd
 800f48c:	0800f51d 	.word	0x0800f51d
 800f490:	0800f51d 	.word	0x0800f51d
 800f494:	0800f51d 	.word	0x0800f51d
 800f498:	0800f51d 	.word	0x0800f51d
 800f49c:	0800f51d 	.word	0x0800f51d
 800f4a0:	0800f51d 	.word	0x0800f51d
 800f4a4:	0800f51d 	.word	0x0800f51d
 800f4a8:	0800f505 	.word	0x0800f505
 800f4ac:	0800f51d 	.word	0x0800f51d
 800f4b0:	0800f51d 	.word	0x0800f51d
 800f4b4:	0800f51d 	.word	0x0800f51d
 800f4b8:	0800f51d 	.word	0x0800f51d
 800f4bc:	0800f51d 	.word	0x0800f51d
 800f4c0:	0800f51d 	.word	0x0800f51d
 800f4c4:	0800f51d 	.word	0x0800f51d
 800f4c8:	0800f50d 	.word	0x0800f50d
 800f4cc:	0800f51d 	.word	0x0800f51d
 800f4d0:	0800f51d 	.word	0x0800f51d
 800f4d4:	0800f51d 	.word	0x0800f51d
 800f4d8:	0800f51d 	.word	0x0800f51d
 800f4dc:	0800f51d 	.word	0x0800f51d
 800f4e0:	0800f51d 	.word	0x0800f51d
 800f4e4:	0800f51d 	.word	0x0800f51d
 800f4e8:	0800f515 	.word	0x0800f515
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4f2:	e326      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f4f4:	2304      	movs	r3, #4
 800f4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4fa:	e322      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f4fc:	2308      	movs	r3, #8
 800f4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f502:	e31e      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f504:	2310      	movs	r3, #16
 800f506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50a:	e31a      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f50c:	2320      	movs	r3, #32
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f512:	e316      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f514:	2340      	movs	r3, #64	@ 0x40
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e312      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f51c:	2380      	movs	r3, #128	@ 0x80
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f522:	e30e      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4a69      	ldr	r2, [pc, #420]	@ (800f6d0 <UART_SetConfig+0x33c>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d130      	bne.n	800f590 <UART_SetConfig+0x1fc>
 800f52e:	4b67      	ldr	r3, [pc, #412]	@ (800f6cc <UART_SetConfig+0x338>)
 800f530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f532:	f003 0307 	and.w	r3, r3, #7
 800f536:	2b05      	cmp	r3, #5
 800f538:	d826      	bhi.n	800f588 <UART_SetConfig+0x1f4>
 800f53a:	a201      	add	r2, pc, #4	@ (adr r2, 800f540 <UART_SetConfig+0x1ac>)
 800f53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f540:	0800f559 	.word	0x0800f559
 800f544:	0800f561 	.word	0x0800f561
 800f548:	0800f569 	.word	0x0800f569
 800f54c:	0800f571 	.word	0x0800f571
 800f550:	0800f579 	.word	0x0800f579
 800f554:	0800f581 	.word	0x0800f581
 800f558:	2300      	movs	r3, #0
 800f55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f55e:	e2f0      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f560:	2304      	movs	r3, #4
 800f562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f566:	e2ec      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f568:	2308      	movs	r3, #8
 800f56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f56e:	e2e8      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f570:	2310      	movs	r3, #16
 800f572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f576:	e2e4      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f578:	2320      	movs	r3, #32
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57e:	e2e0      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f580:	2340      	movs	r3, #64	@ 0x40
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e2dc      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f588:	2380      	movs	r3, #128	@ 0x80
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58e:	e2d8      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4a4f      	ldr	r2, [pc, #316]	@ (800f6d4 <UART_SetConfig+0x340>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d130      	bne.n	800f5fc <UART_SetConfig+0x268>
 800f59a:	4b4c      	ldr	r3, [pc, #304]	@ (800f6cc <UART_SetConfig+0x338>)
 800f59c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f59e:	f003 0307 	and.w	r3, r3, #7
 800f5a2:	2b05      	cmp	r3, #5
 800f5a4:	d826      	bhi.n	800f5f4 <UART_SetConfig+0x260>
 800f5a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5ac <UART_SetConfig+0x218>)
 800f5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ac:	0800f5c5 	.word	0x0800f5c5
 800f5b0:	0800f5cd 	.word	0x0800f5cd
 800f5b4:	0800f5d5 	.word	0x0800f5d5
 800f5b8:	0800f5dd 	.word	0x0800f5dd
 800f5bc:	0800f5e5 	.word	0x0800f5e5
 800f5c0:	0800f5ed 	.word	0x0800f5ed
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ca:	e2ba      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f5cc:	2304      	movs	r3, #4
 800f5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5d2:	e2b6      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f5d4:	2308      	movs	r3, #8
 800f5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5da:	e2b2      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f5dc:	2310      	movs	r3, #16
 800f5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e2:	e2ae      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f5e4:	2320      	movs	r3, #32
 800f5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ea:	e2aa      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f5ec:	2340      	movs	r3, #64	@ 0x40
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f2:	e2a6      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f5f4:	2380      	movs	r3, #128	@ 0x80
 800f5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5fa:	e2a2      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a35      	ldr	r2, [pc, #212]	@ (800f6d8 <UART_SetConfig+0x344>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d130      	bne.n	800f668 <UART_SetConfig+0x2d4>
 800f606:	4b31      	ldr	r3, [pc, #196]	@ (800f6cc <UART_SetConfig+0x338>)
 800f608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f60a:	f003 0307 	and.w	r3, r3, #7
 800f60e:	2b05      	cmp	r3, #5
 800f610:	d826      	bhi.n	800f660 <UART_SetConfig+0x2cc>
 800f612:	a201      	add	r2, pc, #4	@ (adr r2, 800f618 <UART_SetConfig+0x284>)
 800f614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f618:	0800f631 	.word	0x0800f631
 800f61c:	0800f639 	.word	0x0800f639
 800f620:	0800f641 	.word	0x0800f641
 800f624:	0800f649 	.word	0x0800f649
 800f628:	0800f651 	.word	0x0800f651
 800f62c:	0800f659 	.word	0x0800f659
 800f630:	2300      	movs	r3, #0
 800f632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f636:	e284      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f638:	2304      	movs	r3, #4
 800f63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f63e:	e280      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f640:	2308      	movs	r3, #8
 800f642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f646:	e27c      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f648:	2310      	movs	r3, #16
 800f64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f64e:	e278      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f650:	2320      	movs	r3, #32
 800f652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f656:	e274      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f658:	2340      	movs	r3, #64	@ 0x40
 800f65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f65e:	e270      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f660:	2380      	movs	r3, #128	@ 0x80
 800f662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f666:	e26c      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a1b      	ldr	r2, [pc, #108]	@ (800f6dc <UART_SetConfig+0x348>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d142      	bne.n	800f6f8 <UART_SetConfig+0x364>
 800f672:	4b16      	ldr	r3, [pc, #88]	@ (800f6cc <UART_SetConfig+0x338>)
 800f674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f676:	f003 0307 	and.w	r3, r3, #7
 800f67a:	2b05      	cmp	r3, #5
 800f67c:	d838      	bhi.n	800f6f0 <UART_SetConfig+0x35c>
 800f67e:	a201      	add	r2, pc, #4	@ (adr r2, 800f684 <UART_SetConfig+0x2f0>)
 800f680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f684:	0800f69d 	.word	0x0800f69d
 800f688:	0800f6a5 	.word	0x0800f6a5
 800f68c:	0800f6ad 	.word	0x0800f6ad
 800f690:	0800f6b5 	.word	0x0800f6b5
 800f694:	0800f6e1 	.word	0x0800f6e1
 800f698:	0800f6e9 	.word	0x0800f6e9
 800f69c:	2300      	movs	r3, #0
 800f69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6a2:	e24e      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f6a4:	2304      	movs	r3, #4
 800f6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6aa:	e24a      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f6ac:	2308      	movs	r3, #8
 800f6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6b2:	e246      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f6b4:	2310      	movs	r3, #16
 800f6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ba:	e242      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f6bc:	cfff69f3 	.word	0xcfff69f3
 800f6c0:	58000c00 	.word	0x58000c00
 800f6c4:	11fff4ff 	.word	0x11fff4ff
 800f6c8:	40011000 	.word	0x40011000
 800f6cc:	58024400 	.word	0x58024400
 800f6d0:	40004400 	.word	0x40004400
 800f6d4:	40004800 	.word	0x40004800
 800f6d8:	40004c00 	.word	0x40004c00
 800f6dc:	40005000 	.word	0x40005000
 800f6e0:	2320      	movs	r3, #32
 800f6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6e6:	e22c      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f6e8:	2340      	movs	r3, #64	@ 0x40
 800f6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ee:	e228      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f6f0:	2380      	movs	r3, #128	@ 0x80
 800f6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6f6:	e224      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4ab1      	ldr	r2, [pc, #708]	@ (800f9c4 <UART_SetConfig+0x630>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d176      	bne.n	800f7f0 <UART_SetConfig+0x45c>
 800f702:	4bb1      	ldr	r3, [pc, #708]	@ (800f9c8 <UART_SetConfig+0x634>)
 800f704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f70a:	2b28      	cmp	r3, #40	@ 0x28
 800f70c:	d86c      	bhi.n	800f7e8 <UART_SetConfig+0x454>
 800f70e:	a201      	add	r2, pc, #4	@ (adr r2, 800f714 <UART_SetConfig+0x380>)
 800f710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f714:	0800f7b9 	.word	0x0800f7b9
 800f718:	0800f7e9 	.word	0x0800f7e9
 800f71c:	0800f7e9 	.word	0x0800f7e9
 800f720:	0800f7e9 	.word	0x0800f7e9
 800f724:	0800f7e9 	.word	0x0800f7e9
 800f728:	0800f7e9 	.word	0x0800f7e9
 800f72c:	0800f7e9 	.word	0x0800f7e9
 800f730:	0800f7e9 	.word	0x0800f7e9
 800f734:	0800f7c1 	.word	0x0800f7c1
 800f738:	0800f7e9 	.word	0x0800f7e9
 800f73c:	0800f7e9 	.word	0x0800f7e9
 800f740:	0800f7e9 	.word	0x0800f7e9
 800f744:	0800f7e9 	.word	0x0800f7e9
 800f748:	0800f7e9 	.word	0x0800f7e9
 800f74c:	0800f7e9 	.word	0x0800f7e9
 800f750:	0800f7e9 	.word	0x0800f7e9
 800f754:	0800f7c9 	.word	0x0800f7c9
 800f758:	0800f7e9 	.word	0x0800f7e9
 800f75c:	0800f7e9 	.word	0x0800f7e9
 800f760:	0800f7e9 	.word	0x0800f7e9
 800f764:	0800f7e9 	.word	0x0800f7e9
 800f768:	0800f7e9 	.word	0x0800f7e9
 800f76c:	0800f7e9 	.word	0x0800f7e9
 800f770:	0800f7e9 	.word	0x0800f7e9
 800f774:	0800f7d1 	.word	0x0800f7d1
 800f778:	0800f7e9 	.word	0x0800f7e9
 800f77c:	0800f7e9 	.word	0x0800f7e9
 800f780:	0800f7e9 	.word	0x0800f7e9
 800f784:	0800f7e9 	.word	0x0800f7e9
 800f788:	0800f7e9 	.word	0x0800f7e9
 800f78c:	0800f7e9 	.word	0x0800f7e9
 800f790:	0800f7e9 	.word	0x0800f7e9
 800f794:	0800f7d9 	.word	0x0800f7d9
 800f798:	0800f7e9 	.word	0x0800f7e9
 800f79c:	0800f7e9 	.word	0x0800f7e9
 800f7a0:	0800f7e9 	.word	0x0800f7e9
 800f7a4:	0800f7e9 	.word	0x0800f7e9
 800f7a8:	0800f7e9 	.word	0x0800f7e9
 800f7ac:	0800f7e9 	.word	0x0800f7e9
 800f7b0:	0800f7e9 	.word	0x0800f7e9
 800f7b4:	0800f7e1 	.word	0x0800f7e1
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7be:	e1c0      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f7c0:	2304      	movs	r3, #4
 800f7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7c6:	e1bc      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f7c8:	2308      	movs	r3, #8
 800f7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ce:	e1b8      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f7d0:	2310      	movs	r3, #16
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d6:	e1b4      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f7d8:	2320      	movs	r3, #32
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7de:	e1b0      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f7e0:	2340      	movs	r3, #64	@ 0x40
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e6:	e1ac      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f7e8:	2380      	movs	r3, #128	@ 0x80
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ee:	e1a8      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4a75      	ldr	r2, [pc, #468]	@ (800f9cc <UART_SetConfig+0x638>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d130      	bne.n	800f85c <UART_SetConfig+0x4c8>
 800f7fa:	4b73      	ldr	r3, [pc, #460]	@ (800f9c8 <UART_SetConfig+0x634>)
 800f7fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7fe:	f003 0307 	and.w	r3, r3, #7
 800f802:	2b05      	cmp	r3, #5
 800f804:	d826      	bhi.n	800f854 <UART_SetConfig+0x4c0>
 800f806:	a201      	add	r2, pc, #4	@ (adr r2, 800f80c <UART_SetConfig+0x478>)
 800f808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f80c:	0800f825 	.word	0x0800f825
 800f810:	0800f82d 	.word	0x0800f82d
 800f814:	0800f835 	.word	0x0800f835
 800f818:	0800f83d 	.word	0x0800f83d
 800f81c:	0800f845 	.word	0x0800f845
 800f820:	0800f84d 	.word	0x0800f84d
 800f824:	2300      	movs	r3, #0
 800f826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f82a:	e18a      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f82c:	2304      	movs	r3, #4
 800f82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f832:	e186      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f834:	2308      	movs	r3, #8
 800f836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83a:	e182      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f83c:	2310      	movs	r3, #16
 800f83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f842:	e17e      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f844:	2320      	movs	r3, #32
 800f846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f84a:	e17a      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f84c:	2340      	movs	r3, #64	@ 0x40
 800f84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f852:	e176      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f854:	2380      	movs	r3, #128	@ 0x80
 800f856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f85a:	e172      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a5b      	ldr	r2, [pc, #364]	@ (800f9d0 <UART_SetConfig+0x63c>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d130      	bne.n	800f8c8 <UART_SetConfig+0x534>
 800f866:	4b58      	ldr	r3, [pc, #352]	@ (800f9c8 <UART_SetConfig+0x634>)
 800f868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f86a:	f003 0307 	and.w	r3, r3, #7
 800f86e:	2b05      	cmp	r3, #5
 800f870:	d826      	bhi.n	800f8c0 <UART_SetConfig+0x52c>
 800f872:	a201      	add	r2, pc, #4	@ (adr r2, 800f878 <UART_SetConfig+0x4e4>)
 800f874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f878:	0800f891 	.word	0x0800f891
 800f87c:	0800f899 	.word	0x0800f899
 800f880:	0800f8a1 	.word	0x0800f8a1
 800f884:	0800f8a9 	.word	0x0800f8a9
 800f888:	0800f8b1 	.word	0x0800f8b1
 800f88c:	0800f8b9 	.word	0x0800f8b9
 800f890:	2300      	movs	r3, #0
 800f892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f896:	e154      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f898:	2304      	movs	r3, #4
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89e:	e150      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f8a0:	2308      	movs	r3, #8
 800f8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8a6:	e14c      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f8a8:	2310      	movs	r3, #16
 800f8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ae:	e148      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f8b0:	2320      	movs	r3, #32
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b6:	e144      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f8b8:	2340      	movs	r3, #64	@ 0x40
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8be:	e140      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f8c0:	2380      	movs	r3, #128	@ 0x80
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8c6:	e13c      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a41      	ldr	r2, [pc, #260]	@ (800f9d4 <UART_SetConfig+0x640>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	f040 8082 	bne.w	800f9d8 <UART_SetConfig+0x644>
 800f8d4:	4b3c      	ldr	r3, [pc, #240]	@ (800f9c8 <UART_SetConfig+0x634>)
 800f8d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f8dc:	2b28      	cmp	r3, #40	@ 0x28
 800f8de:	d86d      	bhi.n	800f9bc <UART_SetConfig+0x628>
 800f8e0:	a201      	add	r2, pc, #4	@ (adr r2, 800f8e8 <UART_SetConfig+0x554>)
 800f8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e6:	bf00      	nop
 800f8e8:	0800f98d 	.word	0x0800f98d
 800f8ec:	0800f9bd 	.word	0x0800f9bd
 800f8f0:	0800f9bd 	.word	0x0800f9bd
 800f8f4:	0800f9bd 	.word	0x0800f9bd
 800f8f8:	0800f9bd 	.word	0x0800f9bd
 800f8fc:	0800f9bd 	.word	0x0800f9bd
 800f900:	0800f9bd 	.word	0x0800f9bd
 800f904:	0800f9bd 	.word	0x0800f9bd
 800f908:	0800f995 	.word	0x0800f995
 800f90c:	0800f9bd 	.word	0x0800f9bd
 800f910:	0800f9bd 	.word	0x0800f9bd
 800f914:	0800f9bd 	.word	0x0800f9bd
 800f918:	0800f9bd 	.word	0x0800f9bd
 800f91c:	0800f9bd 	.word	0x0800f9bd
 800f920:	0800f9bd 	.word	0x0800f9bd
 800f924:	0800f9bd 	.word	0x0800f9bd
 800f928:	0800f99d 	.word	0x0800f99d
 800f92c:	0800f9bd 	.word	0x0800f9bd
 800f930:	0800f9bd 	.word	0x0800f9bd
 800f934:	0800f9bd 	.word	0x0800f9bd
 800f938:	0800f9bd 	.word	0x0800f9bd
 800f93c:	0800f9bd 	.word	0x0800f9bd
 800f940:	0800f9bd 	.word	0x0800f9bd
 800f944:	0800f9bd 	.word	0x0800f9bd
 800f948:	0800f9a5 	.word	0x0800f9a5
 800f94c:	0800f9bd 	.word	0x0800f9bd
 800f950:	0800f9bd 	.word	0x0800f9bd
 800f954:	0800f9bd 	.word	0x0800f9bd
 800f958:	0800f9bd 	.word	0x0800f9bd
 800f95c:	0800f9bd 	.word	0x0800f9bd
 800f960:	0800f9bd 	.word	0x0800f9bd
 800f964:	0800f9bd 	.word	0x0800f9bd
 800f968:	0800f9ad 	.word	0x0800f9ad
 800f96c:	0800f9bd 	.word	0x0800f9bd
 800f970:	0800f9bd 	.word	0x0800f9bd
 800f974:	0800f9bd 	.word	0x0800f9bd
 800f978:	0800f9bd 	.word	0x0800f9bd
 800f97c:	0800f9bd 	.word	0x0800f9bd
 800f980:	0800f9bd 	.word	0x0800f9bd
 800f984:	0800f9bd 	.word	0x0800f9bd
 800f988:	0800f9b5 	.word	0x0800f9b5
 800f98c:	2301      	movs	r3, #1
 800f98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f992:	e0d6      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f994:	2304      	movs	r3, #4
 800f996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f99a:	e0d2      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f99c:	2308      	movs	r3, #8
 800f99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9a2:	e0ce      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f9a4:	2310      	movs	r3, #16
 800f9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9aa:	e0ca      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f9ac:	2320      	movs	r3, #32
 800f9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9b2:	e0c6      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f9b4:	2340      	movs	r3, #64	@ 0x40
 800f9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ba:	e0c2      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f9bc:	2380      	movs	r3, #128	@ 0x80
 800f9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9c2:	e0be      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800f9c4:	40011400 	.word	0x40011400
 800f9c8:	58024400 	.word	0x58024400
 800f9cc:	40007800 	.word	0x40007800
 800f9d0:	40007c00 	.word	0x40007c00
 800f9d4:	40011800 	.word	0x40011800
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4aad      	ldr	r2, [pc, #692]	@ (800fc94 <UART_SetConfig+0x900>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d176      	bne.n	800fad0 <UART_SetConfig+0x73c>
 800f9e2:	4bad      	ldr	r3, [pc, #692]	@ (800fc98 <UART_SetConfig+0x904>)
 800f9e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f9ea:	2b28      	cmp	r3, #40	@ 0x28
 800f9ec:	d86c      	bhi.n	800fac8 <UART_SetConfig+0x734>
 800f9ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f9f4 <UART_SetConfig+0x660>)
 800f9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f4:	0800fa99 	.word	0x0800fa99
 800f9f8:	0800fac9 	.word	0x0800fac9
 800f9fc:	0800fac9 	.word	0x0800fac9
 800fa00:	0800fac9 	.word	0x0800fac9
 800fa04:	0800fac9 	.word	0x0800fac9
 800fa08:	0800fac9 	.word	0x0800fac9
 800fa0c:	0800fac9 	.word	0x0800fac9
 800fa10:	0800fac9 	.word	0x0800fac9
 800fa14:	0800faa1 	.word	0x0800faa1
 800fa18:	0800fac9 	.word	0x0800fac9
 800fa1c:	0800fac9 	.word	0x0800fac9
 800fa20:	0800fac9 	.word	0x0800fac9
 800fa24:	0800fac9 	.word	0x0800fac9
 800fa28:	0800fac9 	.word	0x0800fac9
 800fa2c:	0800fac9 	.word	0x0800fac9
 800fa30:	0800fac9 	.word	0x0800fac9
 800fa34:	0800faa9 	.word	0x0800faa9
 800fa38:	0800fac9 	.word	0x0800fac9
 800fa3c:	0800fac9 	.word	0x0800fac9
 800fa40:	0800fac9 	.word	0x0800fac9
 800fa44:	0800fac9 	.word	0x0800fac9
 800fa48:	0800fac9 	.word	0x0800fac9
 800fa4c:	0800fac9 	.word	0x0800fac9
 800fa50:	0800fac9 	.word	0x0800fac9
 800fa54:	0800fab1 	.word	0x0800fab1
 800fa58:	0800fac9 	.word	0x0800fac9
 800fa5c:	0800fac9 	.word	0x0800fac9
 800fa60:	0800fac9 	.word	0x0800fac9
 800fa64:	0800fac9 	.word	0x0800fac9
 800fa68:	0800fac9 	.word	0x0800fac9
 800fa6c:	0800fac9 	.word	0x0800fac9
 800fa70:	0800fac9 	.word	0x0800fac9
 800fa74:	0800fab9 	.word	0x0800fab9
 800fa78:	0800fac9 	.word	0x0800fac9
 800fa7c:	0800fac9 	.word	0x0800fac9
 800fa80:	0800fac9 	.word	0x0800fac9
 800fa84:	0800fac9 	.word	0x0800fac9
 800fa88:	0800fac9 	.word	0x0800fac9
 800fa8c:	0800fac9 	.word	0x0800fac9
 800fa90:	0800fac9 	.word	0x0800fac9
 800fa94:	0800fac1 	.word	0x0800fac1
 800fa98:	2301      	movs	r3, #1
 800fa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa9e:	e050      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800faa0:	2304      	movs	r3, #4
 800faa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faa6:	e04c      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800faa8:	2308      	movs	r3, #8
 800faaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faae:	e048      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fab0:	2310      	movs	r3, #16
 800fab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab6:	e044      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fab8:	2320      	movs	r3, #32
 800faba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fabe:	e040      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fac0:	2340      	movs	r3, #64	@ 0x40
 800fac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac6:	e03c      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fac8:	2380      	movs	r3, #128	@ 0x80
 800faca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800face:	e038      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a71      	ldr	r2, [pc, #452]	@ (800fc9c <UART_SetConfig+0x908>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d130      	bne.n	800fb3c <UART_SetConfig+0x7a8>
 800fada:	4b6f      	ldr	r3, [pc, #444]	@ (800fc98 <UART_SetConfig+0x904>)
 800fadc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fade:	f003 0307 	and.w	r3, r3, #7
 800fae2:	2b05      	cmp	r3, #5
 800fae4:	d826      	bhi.n	800fb34 <UART_SetConfig+0x7a0>
 800fae6:	a201      	add	r2, pc, #4	@ (adr r2, 800faec <UART_SetConfig+0x758>)
 800fae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faec:	0800fb05 	.word	0x0800fb05
 800faf0:	0800fb0d 	.word	0x0800fb0d
 800faf4:	0800fb15 	.word	0x0800fb15
 800faf8:	0800fb1d 	.word	0x0800fb1d
 800fafc:	0800fb25 	.word	0x0800fb25
 800fb00:	0800fb2d 	.word	0x0800fb2d
 800fb04:	2302      	movs	r3, #2
 800fb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0a:	e01a      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fb0c:	2304      	movs	r3, #4
 800fb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb12:	e016      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fb14:	2308      	movs	r3, #8
 800fb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb1a:	e012      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fb1c:	2310      	movs	r3, #16
 800fb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb22:	e00e      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fb24:	2320      	movs	r3, #32
 800fb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2a:	e00a      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fb2c:	2340      	movs	r3, #64	@ 0x40
 800fb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb32:	e006      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fb34:	2380      	movs	r3, #128	@ 0x80
 800fb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb3a:	e002      	b.n	800fb42 <UART_SetConfig+0x7ae>
 800fb3c:	2380      	movs	r3, #128	@ 0x80
 800fb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4a55      	ldr	r2, [pc, #340]	@ (800fc9c <UART_SetConfig+0x908>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	f040 80f8 	bne.w	800fd3e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fb4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fb52:	2b20      	cmp	r3, #32
 800fb54:	dc46      	bgt.n	800fbe4 <UART_SetConfig+0x850>
 800fb56:	2b02      	cmp	r3, #2
 800fb58:	db75      	blt.n	800fc46 <UART_SetConfig+0x8b2>
 800fb5a:	3b02      	subs	r3, #2
 800fb5c:	2b1e      	cmp	r3, #30
 800fb5e:	d872      	bhi.n	800fc46 <UART_SetConfig+0x8b2>
 800fb60:	a201      	add	r2, pc, #4	@ (adr r2, 800fb68 <UART_SetConfig+0x7d4>)
 800fb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb66:	bf00      	nop
 800fb68:	0800fbeb 	.word	0x0800fbeb
 800fb6c:	0800fc47 	.word	0x0800fc47
 800fb70:	0800fbf3 	.word	0x0800fbf3
 800fb74:	0800fc47 	.word	0x0800fc47
 800fb78:	0800fc47 	.word	0x0800fc47
 800fb7c:	0800fc47 	.word	0x0800fc47
 800fb80:	0800fc03 	.word	0x0800fc03
 800fb84:	0800fc47 	.word	0x0800fc47
 800fb88:	0800fc47 	.word	0x0800fc47
 800fb8c:	0800fc47 	.word	0x0800fc47
 800fb90:	0800fc47 	.word	0x0800fc47
 800fb94:	0800fc47 	.word	0x0800fc47
 800fb98:	0800fc47 	.word	0x0800fc47
 800fb9c:	0800fc47 	.word	0x0800fc47
 800fba0:	0800fc13 	.word	0x0800fc13
 800fba4:	0800fc47 	.word	0x0800fc47
 800fba8:	0800fc47 	.word	0x0800fc47
 800fbac:	0800fc47 	.word	0x0800fc47
 800fbb0:	0800fc47 	.word	0x0800fc47
 800fbb4:	0800fc47 	.word	0x0800fc47
 800fbb8:	0800fc47 	.word	0x0800fc47
 800fbbc:	0800fc47 	.word	0x0800fc47
 800fbc0:	0800fc47 	.word	0x0800fc47
 800fbc4:	0800fc47 	.word	0x0800fc47
 800fbc8:	0800fc47 	.word	0x0800fc47
 800fbcc:	0800fc47 	.word	0x0800fc47
 800fbd0:	0800fc47 	.word	0x0800fc47
 800fbd4:	0800fc47 	.word	0x0800fc47
 800fbd8:	0800fc47 	.word	0x0800fc47
 800fbdc:	0800fc47 	.word	0x0800fc47
 800fbe0:	0800fc39 	.word	0x0800fc39
 800fbe4:	2b40      	cmp	r3, #64	@ 0x40
 800fbe6:	d02a      	beq.n	800fc3e <UART_SetConfig+0x8aa>
 800fbe8:	e02d      	b.n	800fc46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fbea:	f7fb ff37 	bl	800ba5c <HAL_RCCEx_GetD3PCLK1Freq>
 800fbee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fbf0:	e02f      	b.n	800fc52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fb ff46 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc00:	e027      	b.n	800fc52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc02:	f107 0318 	add.w	r3, r7, #24
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fc f892 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc10:	e01f      	b.n	800fc52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc12:	4b21      	ldr	r3, [pc, #132]	@ (800fc98 <UART_SetConfig+0x904>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f003 0320 	and.w	r3, r3, #32
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d009      	beq.n	800fc32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc1e:	4b1e      	ldr	r3, [pc, #120]	@ (800fc98 <UART_SetConfig+0x904>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	08db      	lsrs	r3, r3, #3
 800fc24:	f003 0303 	and.w	r3, r3, #3
 800fc28:	4a1d      	ldr	r2, [pc, #116]	@ (800fca0 <UART_SetConfig+0x90c>)
 800fc2a:	fa22 f303 	lsr.w	r3, r2, r3
 800fc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc30:	e00f      	b.n	800fc52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fc32:	4b1b      	ldr	r3, [pc, #108]	@ (800fca0 <UART_SetConfig+0x90c>)
 800fc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc36:	e00c      	b.n	800fc52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc38:	4b1a      	ldr	r3, [pc, #104]	@ (800fca4 <UART_SetConfig+0x910>)
 800fc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc3c:	e009      	b.n	800fc52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc44:	e005      	b.n	800fc52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fc46:	2300      	movs	r3, #0
 800fc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fc50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fc52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	f000 81ee 	beq.w	8010036 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc5e:	4a12      	ldr	r2, [pc, #72]	@ (800fca8 <UART_SetConfig+0x914>)
 800fc60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc64:	461a      	mov	r2, r3
 800fc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc68:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc6c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	685a      	ldr	r2, [r3, #4]
 800fc72:	4613      	mov	r3, r2
 800fc74:	005b      	lsls	r3, r3, #1
 800fc76:	4413      	add	r3, r2
 800fc78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d305      	bcc.n	800fc8a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d910      	bls.n	800fcac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fc90:	e1d1      	b.n	8010036 <UART_SetConfig+0xca2>
 800fc92:	bf00      	nop
 800fc94:	40011c00 	.word	0x40011c00
 800fc98:	58024400 	.word	0x58024400
 800fc9c:	58000c00 	.word	0x58000c00
 800fca0:	03d09000 	.word	0x03d09000
 800fca4:	003d0900 	.word	0x003d0900
 800fca8:	08012414 	.word	0x08012414
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcae:	2200      	movs	r2, #0
 800fcb0:	60bb      	str	r3, [r7, #8]
 800fcb2:	60fa      	str	r2, [r7, #12]
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcb8:	4ac0      	ldr	r2, [pc, #768]	@ (800ffbc <UART_SetConfig+0xc28>)
 800fcba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	603b      	str	r3, [r7, #0]
 800fcc4:	607a      	str	r2, [r7, #4]
 800fcc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fcce:	f7f0 fb77 	bl	80003c0 <__aeabi_uldivmod>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	4619      	mov	r1, r3
 800fcda:	f04f 0200 	mov.w	r2, #0
 800fcde:	f04f 0300 	mov.w	r3, #0
 800fce2:	020b      	lsls	r3, r1, #8
 800fce4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fce8:	0202      	lsls	r2, r0, #8
 800fcea:	6979      	ldr	r1, [r7, #20]
 800fcec:	6849      	ldr	r1, [r1, #4]
 800fcee:	0849      	lsrs	r1, r1, #1
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	460c      	mov	r4, r1
 800fcf4:	4605      	mov	r5, r0
 800fcf6:	eb12 0804 	adds.w	r8, r2, r4
 800fcfa:	eb43 0905 	adc.w	r9, r3, r5
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	469a      	mov	sl, r3
 800fd06:	4693      	mov	fp, r2
 800fd08:	4652      	mov	r2, sl
 800fd0a:	465b      	mov	r3, fp
 800fd0c:	4640      	mov	r0, r8
 800fd0e:	4649      	mov	r1, r9
 800fd10:	f7f0 fb56 	bl	80003c0 <__aeabi_uldivmod>
 800fd14:	4602      	mov	r2, r0
 800fd16:	460b      	mov	r3, r1
 800fd18:	4613      	mov	r3, r2
 800fd1a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fd22:	d308      	bcc.n	800fd36 <UART_SetConfig+0x9a2>
 800fd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd2a:	d204      	bcs.n	800fd36 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd32:	60da      	str	r2, [r3, #12]
 800fd34:	e17f      	b.n	8010036 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fd36:	2301      	movs	r3, #1
 800fd38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd3c:	e17b      	b.n	8010036 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	69db      	ldr	r3, [r3, #28]
 800fd42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fd46:	f040 80bd 	bne.w	800fec4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fd4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fd4e:	2b20      	cmp	r3, #32
 800fd50:	dc48      	bgt.n	800fde4 <UART_SetConfig+0xa50>
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	db7b      	blt.n	800fe4e <UART_SetConfig+0xaba>
 800fd56:	2b20      	cmp	r3, #32
 800fd58:	d879      	bhi.n	800fe4e <UART_SetConfig+0xaba>
 800fd5a:	a201      	add	r2, pc, #4	@ (adr r2, 800fd60 <UART_SetConfig+0x9cc>)
 800fd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd60:	0800fdeb 	.word	0x0800fdeb
 800fd64:	0800fdf3 	.word	0x0800fdf3
 800fd68:	0800fe4f 	.word	0x0800fe4f
 800fd6c:	0800fe4f 	.word	0x0800fe4f
 800fd70:	0800fdfb 	.word	0x0800fdfb
 800fd74:	0800fe4f 	.word	0x0800fe4f
 800fd78:	0800fe4f 	.word	0x0800fe4f
 800fd7c:	0800fe4f 	.word	0x0800fe4f
 800fd80:	0800fe0b 	.word	0x0800fe0b
 800fd84:	0800fe4f 	.word	0x0800fe4f
 800fd88:	0800fe4f 	.word	0x0800fe4f
 800fd8c:	0800fe4f 	.word	0x0800fe4f
 800fd90:	0800fe4f 	.word	0x0800fe4f
 800fd94:	0800fe4f 	.word	0x0800fe4f
 800fd98:	0800fe4f 	.word	0x0800fe4f
 800fd9c:	0800fe4f 	.word	0x0800fe4f
 800fda0:	0800fe1b 	.word	0x0800fe1b
 800fda4:	0800fe4f 	.word	0x0800fe4f
 800fda8:	0800fe4f 	.word	0x0800fe4f
 800fdac:	0800fe4f 	.word	0x0800fe4f
 800fdb0:	0800fe4f 	.word	0x0800fe4f
 800fdb4:	0800fe4f 	.word	0x0800fe4f
 800fdb8:	0800fe4f 	.word	0x0800fe4f
 800fdbc:	0800fe4f 	.word	0x0800fe4f
 800fdc0:	0800fe4f 	.word	0x0800fe4f
 800fdc4:	0800fe4f 	.word	0x0800fe4f
 800fdc8:	0800fe4f 	.word	0x0800fe4f
 800fdcc:	0800fe4f 	.word	0x0800fe4f
 800fdd0:	0800fe4f 	.word	0x0800fe4f
 800fdd4:	0800fe4f 	.word	0x0800fe4f
 800fdd8:	0800fe4f 	.word	0x0800fe4f
 800fddc:	0800fe4f 	.word	0x0800fe4f
 800fde0:	0800fe41 	.word	0x0800fe41
 800fde4:	2b40      	cmp	r3, #64	@ 0x40
 800fde6:	d02e      	beq.n	800fe46 <UART_SetConfig+0xab2>
 800fde8:	e031      	b.n	800fe4e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdea:	f7f9 ff99 	bl	8009d20 <HAL_RCC_GetPCLK1Freq>
 800fdee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fdf0:	e033      	b.n	800fe5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fdf2:	f7f9 ffab 	bl	8009d4c <HAL_RCC_GetPCLK2Freq>
 800fdf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fdf8:	e02f      	b.n	800fe5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7fb fe42 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe08:	e027      	b.n	800fe5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe0a:	f107 0318 	add.w	r3, r7, #24
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fb ff8e 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe18:	e01f      	b.n	800fe5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe1a:	4b69      	ldr	r3, [pc, #420]	@ (800ffc0 <UART_SetConfig+0xc2c>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f003 0320 	and.w	r3, r3, #32
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d009      	beq.n	800fe3a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe26:	4b66      	ldr	r3, [pc, #408]	@ (800ffc0 <UART_SetConfig+0xc2c>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	08db      	lsrs	r3, r3, #3
 800fe2c:	f003 0303 	and.w	r3, r3, #3
 800fe30:	4a64      	ldr	r2, [pc, #400]	@ (800ffc4 <UART_SetConfig+0xc30>)
 800fe32:	fa22 f303 	lsr.w	r3, r2, r3
 800fe36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe38:	e00f      	b.n	800fe5a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fe3a:	4b62      	ldr	r3, [pc, #392]	@ (800ffc4 <UART_SetConfig+0xc30>)
 800fe3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe3e:	e00c      	b.n	800fe5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe40:	4b61      	ldr	r3, [pc, #388]	@ (800ffc8 <UART_SetConfig+0xc34>)
 800fe42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe44:	e009      	b.n	800fe5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fe4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe4c:	e005      	b.n	800fe5a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fe52:	2301      	movs	r3, #1
 800fe54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fe58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fe5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f000 80ea 	beq.w	8010036 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe66:	4a55      	ldr	r2, [pc, #340]	@ (800ffbc <UART_SetConfig+0xc28>)
 800fe68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe70:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe74:	005a      	lsls	r2, r3, #1
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	085b      	lsrs	r3, r3, #1
 800fe7c:	441a      	add	r2, r3
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe8a:	2b0f      	cmp	r3, #15
 800fe8c:	d916      	bls.n	800febc <UART_SetConfig+0xb28>
 800fe8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe94:	d212      	bcs.n	800febc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fe96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	f023 030f 	bic.w	r3, r3, #15
 800fe9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fea2:	085b      	lsrs	r3, r3, #1
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	f003 0307 	and.w	r3, r3, #7
 800feaa:	b29a      	uxth	r2, r3
 800feac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800feae:	4313      	orrs	r3, r2
 800feb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800feb8:	60da      	str	r2, [r3, #12]
 800feba:	e0bc      	b.n	8010036 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800febc:	2301      	movs	r3, #1
 800febe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fec2:	e0b8      	b.n	8010036 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fec4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fec8:	2b20      	cmp	r3, #32
 800feca:	dc4b      	bgt.n	800ff64 <UART_SetConfig+0xbd0>
 800fecc:	2b00      	cmp	r3, #0
 800fece:	f2c0 8087 	blt.w	800ffe0 <UART_SetConfig+0xc4c>
 800fed2:	2b20      	cmp	r3, #32
 800fed4:	f200 8084 	bhi.w	800ffe0 <UART_SetConfig+0xc4c>
 800fed8:	a201      	add	r2, pc, #4	@ (adr r2, 800fee0 <UART_SetConfig+0xb4c>)
 800feda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fede:	bf00      	nop
 800fee0:	0800ff6b 	.word	0x0800ff6b
 800fee4:	0800ff73 	.word	0x0800ff73
 800fee8:	0800ffe1 	.word	0x0800ffe1
 800feec:	0800ffe1 	.word	0x0800ffe1
 800fef0:	0800ff7b 	.word	0x0800ff7b
 800fef4:	0800ffe1 	.word	0x0800ffe1
 800fef8:	0800ffe1 	.word	0x0800ffe1
 800fefc:	0800ffe1 	.word	0x0800ffe1
 800ff00:	0800ff8b 	.word	0x0800ff8b
 800ff04:	0800ffe1 	.word	0x0800ffe1
 800ff08:	0800ffe1 	.word	0x0800ffe1
 800ff0c:	0800ffe1 	.word	0x0800ffe1
 800ff10:	0800ffe1 	.word	0x0800ffe1
 800ff14:	0800ffe1 	.word	0x0800ffe1
 800ff18:	0800ffe1 	.word	0x0800ffe1
 800ff1c:	0800ffe1 	.word	0x0800ffe1
 800ff20:	0800ff9b 	.word	0x0800ff9b
 800ff24:	0800ffe1 	.word	0x0800ffe1
 800ff28:	0800ffe1 	.word	0x0800ffe1
 800ff2c:	0800ffe1 	.word	0x0800ffe1
 800ff30:	0800ffe1 	.word	0x0800ffe1
 800ff34:	0800ffe1 	.word	0x0800ffe1
 800ff38:	0800ffe1 	.word	0x0800ffe1
 800ff3c:	0800ffe1 	.word	0x0800ffe1
 800ff40:	0800ffe1 	.word	0x0800ffe1
 800ff44:	0800ffe1 	.word	0x0800ffe1
 800ff48:	0800ffe1 	.word	0x0800ffe1
 800ff4c:	0800ffe1 	.word	0x0800ffe1
 800ff50:	0800ffe1 	.word	0x0800ffe1
 800ff54:	0800ffe1 	.word	0x0800ffe1
 800ff58:	0800ffe1 	.word	0x0800ffe1
 800ff5c:	0800ffe1 	.word	0x0800ffe1
 800ff60:	0800ffd3 	.word	0x0800ffd3
 800ff64:	2b40      	cmp	r3, #64	@ 0x40
 800ff66:	d037      	beq.n	800ffd8 <UART_SetConfig+0xc44>
 800ff68:	e03a      	b.n	800ffe0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff6a:	f7f9 fed9 	bl	8009d20 <HAL_RCC_GetPCLK1Freq>
 800ff6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff70:	e03c      	b.n	800ffec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff72:	f7f9 feeb 	bl	8009d4c <HAL_RCC_GetPCLK2Freq>
 800ff76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff78:	e038      	b.n	800ffec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fb fd82 	bl	800ba88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff88:	e030      	b.n	800ffec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff8a:	f107 0318 	add.w	r3, r7, #24
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fb fece 	bl	800bd30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff98:	e028      	b.n	800ffec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff9a:	4b09      	ldr	r3, [pc, #36]	@ (800ffc0 <UART_SetConfig+0xc2c>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f003 0320 	and.w	r3, r3, #32
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d012      	beq.n	800ffcc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ffa6:	4b06      	ldr	r3, [pc, #24]	@ (800ffc0 <UART_SetConfig+0xc2c>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	08db      	lsrs	r3, r3, #3
 800ffac:	f003 0303 	and.w	r3, r3, #3
 800ffb0:	4a04      	ldr	r2, [pc, #16]	@ (800ffc4 <UART_SetConfig+0xc30>)
 800ffb2:	fa22 f303 	lsr.w	r3, r2, r3
 800ffb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ffb8:	e018      	b.n	800ffec <UART_SetConfig+0xc58>
 800ffba:	bf00      	nop
 800ffbc:	08012414 	.word	0x08012414
 800ffc0:	58024400 	.word	0x58024400
 800ffc4:	03d09000 	.word	0x03d09000
 800ffc8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ffcc:	4b24      	ldr	r3, [pc, #144]	@ (8010060 <UART_SetConfig+0xccc>)
 800ffce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffd0:	e00c      	b.n	800ffec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ffd2:	4b24      	ldr	r3, [pc, #144]	@ (8010064 <UART_SetConfig+0xcd0>)
 800ffd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffd6:	e009      	b.n	800ffec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ffdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffde:	e005      	b.n	800ffec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ffea:	bf00      	nop
    }

    if (pclk != 0U)
 800ffec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d021      	beq.n	8010036 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff6:	4a1c      	ldr	r2, [pc, #112]	@ (8010068 <UART_SetConfig+0xcd4>)
 800fff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fffc:	461a      	mov	r2, r3
 800fffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010000:	fbb3 f2f2 	udiv	r2, r3, r2
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	085b      	lsrs	r3, r3, #1
 801000a:	441a      	add	r2, r3
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	fbb2 f3f3 	udiv	r3, r2, r3
 8010014:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010018:	2b0f      	cmp	r3, #15
 801001a:	d909      	bls.n	8010030 <UART_SetConfig+0xc9c>
 801001c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801001e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010022:	d205      	bcs.n	8010030 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010026:	b29a      	uxth	r2, r3
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	60da      	str	r2, [r3, #12]
 801002e:	e002      	b.n	8010036 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010030:	2301      	movs	r3, #1
 8010032:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	2201      	movs	r2, #1
 801003a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	2201      	movs	r2, #1
 8010042:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	2200      	movs	r2, #0
 801004a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2200      	movs	r2, #0
 8010050:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010052:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010056:	4618      	mov	r0, r3
 8010058:	3748      	adds	r7, #72	@ 0x48
 801005a:	46bd      	mov	sp, r7
 801005c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010060:	03d09000 	.word	0x03d09000
 8010064:	003d0900 	.word	0x003d0900
 8010068:	08012414 	.word	0x08012414

0801006c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010078:	f003 0308 	and.w	r3, r3, #8
 801007c:	2b00      	cmp	r3, #0
 801007e:	d00a      	beq.n	8010096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	430a      	orrs	r2, r1
 8010094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801009a:	f003 0301 	and.w	r3, r3, #1
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d00a      	beq.n	80100b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	430a      	orrs	r2, r1
 80100b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100bc:	f003 0302 	and.w	r3, r3, #2
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00a      	beq.n	80100da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	430a      	orrs	r2, r1
 80100d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100de:	f003 0304 	and.w	r3, r3, #4
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00a      	beq.n	80100fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	430a      	orrs	r2, r1
 80100fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010100:	f003 0310 	and.w	r3, r3, #16
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00a      	beq.n	801011e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	430a      	orrs	r2, r1
 801011c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010122:	f003 0320 	and.w	r3, r3, #32
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00a      	beq.n	8010140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	430a      	orrs	r2, r1
 801013e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010148:	2b00      	cmp	r3, #0
 801014a:	d01a      	beq.n	8010182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	430a      	orrs	r2, r1
 8010160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801016a:	d10a      	bne.n	8010182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	430a      	orrs	r2, r1
 8010180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00a      	beq.n	80101a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	430a      	orrs	r2, r1
 80101a2:	605a      	str	r2, [r3, #4]
  }
}
 80101a4:	bf00      	nop
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b098      	sub	sp, #96	@ 0x60
 80101b4:	af02      	add	r7, sp, #8
 80101b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80101c0:	f7f2 fc80 	bl	8002ac4 <HAL_GetTick>
 80101c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f003 0308 	and.w	r3, r3, #8
 80101d0:	2b08      	cmp	r3, #8
 80101d2:	d12f      	bne.n	8010234 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101dc:	2200      	movs	r2, #0
 80101de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f88e 	bl	8010304 <UART_WaitOnFlagUntilTimeout>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d022      	beq.n	8010234 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101f6:	e853 3f00 	ldrex	r3, [r3]
 80101fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80101fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010202:	653b      	str	r3, [r7, #80]	@ 0x50
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	461a      	mov	r2, r3
 801020a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801020c:	647b      	str	r3, [r7, #68]	@ 0x44
 801020e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010210:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010214:	e841 2300 	strex	r3, r2, [r1]
 8010218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801021a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801021c:	2b00      	cmp	r3, #0
 801021e:	d1e6      	bne.n	80101ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2220      	movs	r2, #32
 8010224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010230:	2303      	movs	r3, #3
 8010232:	e063      	b.n	80102fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f003 0304 	and.w	r3, r3, #4
 801023e:	2b04      	cmp	r3, #4
 8010240:	d149      	bne.n	80102d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010242:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801024a:	2200      	movs	r2, #0
 801024c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f000 f857 	bl	8010304 <UART_WaitOnFlagUntilTimeout>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d03c      	beq.n	80102d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010264:	e853 3f00 	ldrex	r3, [r3]
 8010268:	623b      	str	r3, [r7, #32]
   return(result);
 801026a:	6a3b      	ldr	r3, [r7, #32]
 801026c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	461a      	mov	r2, r3
 8010278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801027a:	633b      	str	r3, [r7, #48]	@ 0x30
 801027c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801027e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010282:	e841 2300 	strex	r3, r2, [r1]
 8010286:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1e6      	bne.n	801025c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3308      	adds	r3, #8
 8010294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	e853 3f00 	ldrex	r3, [r3]
 801029c:	60fb      	str	r3, [r7, #12]
   return(result);
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	f023 0301 	bic.w	r3, r3, #1
 80102a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	3308      	adds	r3, #8
 80102ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80102ae:	61fa      	str	r2, [r7, #28]
 80102b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b2:	69b9      	ldr	r1, [r7, #24]
 80102b4:	69fa      	ldr	r2, [r7, #28]
 80102b6:	e841 2300 	strex	r3, r2, [r1]
 80102ba:	617b      	str	r3, [r7, #20]
   return(result);
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1e5      	bne.n	801028e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2220      	movs	r2, #32
 80102c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102d2:	2303      	movs	r3, #3
 80102d4:	e012      	b.n	80102fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2220      	movs	r2, #32
 80102da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2220      	movs	r2, #32
 80102e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2200      	movs	r2, #0
 80102ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3758      	adds	r7, #88	@ 0x58
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	603b      	str	r3, [r7, #0]
 8010310:	4613      	mov	r3, r2
 8010312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010314:	e04f      	b.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801031c:	d04b      	beq.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801031e:	f7f2 fbd1 	bl	8002ac4 <HAL_GetTick>
 8010322:	4602      	mov	r2, r0
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	69ba      	ldr	r2, [r7, #24]
 801032a:	429a      	cmp	r2, r3
 801032c:	d302      	bcc.n	8010334 <UART_WaitOnFlagUntilTimeout+0x30>
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010334:	2303      	movs	r3, #3
 8010336:	e04e      	b.n	80103d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	f003 0304 	and.w	r3, r3, #4
 8010342:	2b00      	cmp	r3, #0
 8010344:	d037      	beq.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	2b80      	cmp	r3, #128	@ 0x80
 801034a:	d034      	beq.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	2b40      	cmp	r3, #64	@ 0x40
 8010350:	d031      	beq.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	69db      	ldr	r3, [r3, #28]
 8010358:	f003 0308 	and.w	r3, r3, #8
 801035c:	2b08      	cmp	r3, #8
 801035e:	d110      	bne.n	8010382 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2208      	movs	r2, #8
 8010366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010368:	68f8      	ldr	r0, [r7, #12]
 801036a:	f000 f839 	bl	80103e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2208      	movs	r2, #8
 8010372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	2200      	movs	r2, #0
 801037a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801037e:	2301      	movs	r3, #1
 8010380:	e029      	b.n	80103d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	69db      	ldr	r3, [r3, #28]
 8010388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801038c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010390:	d111      	bne.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801039a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f000 f81f 	bl	80103e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2220      	movs	r2, #32
 80103a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2200      	movs	r2, #0
 80103ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80103b2:	2303      	movs	r3, #3
 80103b4:	e00f      	b.n	80103d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	69da      	ldr	r2, [r3, #28]
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	4013      	ands	r3, r2
 80103c0:	68ba      	ldr	r2, [r7, #8]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	bf0c      	ite	eq
 80103c6:	2301      	moveq	r3, #1
 80103c8:	2300      	movne	r3, #0
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	461a      	mov	r2, r3
 80103ce:	79fb      	ldrb	r3, [r7, #7]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d0a0      	beq.n	8010316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
	...

080103e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b095      	sub	sp, #84	@ 0x54
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f0:	e853 3f00 	ldrex	r3, [r3]
 80103f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80103f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	461a      	mov	r2, r3
 8010404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010406:	643b      	str	r3, [r7, #64]	@ 0x40
 8010408:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801040c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801040e:	e841 2300 	strex	r3, r2, [r1]
 8010412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1e6      	bne.n	80103e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	3308      	adds	r3, #8
 8010420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010422:	6a3b      	ldr	r3, [r7, #32]
 8010424:	e853 3f00 	ldrex	r3, [r3]
 8010428:	61fb      	str	r3, [r7, #28]
   return(result);
 801042a:	69fa      	ldr	r2, [r7, #28]
 801042c:	4b1e      	ldr	r3, [pc, #120]	@ (80104a8 <UART_EndRxTransfer+0xc8>)
 801042e:	4013      	ands	r3, r2
 8010430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	3308      	adds	r3, #8
 8010438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801043a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801043c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010442:	e841 2300 	strex	r3, r2, [r1]
 8010446:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1e5      	bne.n	801041a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010452:	2b01      	cmp	r3, #1
 8010454:	d118      	bne.n	8010488 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	e853 3f00 	ldrex	r3, [r3]
 8010462:	60bb      	str	r3, [r7, #8]
   return(result);
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	f023 0310 	bic.w	r3, r3, #16
 801046a:	647b      	str	r3, [r7, #68]	@ 0x44
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	461a      	mov	r2, r3
 8010472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010474:	61bb      	str	r3, [r7, #24]
 8010476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010478:	6979      	ldr	r1, [r7, #20]
 801047a:	69ba      	ldr	r2, [r7, #24]
 801047c:	e841 2300 	strex	r3, r2, [r1]
 8010480:	613b      	str	r3, [r7, #16]
   return(result);
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d1e6      	bne.n	8010456 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2220      	movs	r2, #32
 801048c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2200      	movs	r2, #0
 8010494:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2200      	movs	r2, #0
 801049a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801049c:	bf00      	nop
 801049e:	3754      	adds	r7, #84	@ 0x54
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr
 80104a8:	effffffe 	.word	0xeffffffe

080104ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b085      	sub	sp, #20
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d101      	bne.n	80104c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80104be:	2302      	movs	r3, #2
 80104c0:	e027      	b.n	8010512 <HAL_UARTEx_DisableFifoMode+0x66>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2201      	movs	r2, #1
 80104c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2224      	movs	r2, #36	@ 0x24
 80104ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f022 0201 	bic.w	r2, r2, #1
 80104e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80104f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2200      	movs	r2, #0
 80104f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2220      	movs	r2, #32
 8010504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010510:	2300      	movs	r3, #0
}
 8010512:	4618      	mov	r0, r3
 8010514:	3714      	adds	r7, #20
 8010516:	46bd      	mov	sp, r7
 8010518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051c:	4770      	bx	lr

0801051e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b084      	sub	sp, #16
 8010522:	af00      	add	r7, sp, #0
 8010524:	6078      	str	r0, [r7, #4]
 8010526:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801052e:	2b01      	cmp	r3, #1
 8010530:	d101      	bne.n	8010536 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010532:	2302      	movs	r3, #2
 8010534:	e02d      	b.n	8010592 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2201      	movs	r2, #1
 801053a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2224      	movs	r2, #36	@ 0x24
 8010542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f022 0201 	bic.w	r2, r2, #1
 801055c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	689b      	ldr	r3, [r3, #8]
 8010564:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	683a      	ldr	r2, [r7, #0]
 801056e:	430a      	orrs	r2, r1
 8010570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f850 	bl	8010618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68fa      	ldr	r2, [r7, #12]
 801057e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2220      	movs	r2, #32
 8010584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010590:	2300      	movs	r3, #0
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b084      	sub	sp, #16
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d101      	bne.n	80105b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80105ae:	2302      	movs	r3, #2
 80105b0:	e02d      	b.n	801060e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2201      	movs	r2, #1
 80105b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2224      	movs	r2, #36	@ 0x24
 80105be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f022 0201 	bic.w	r2, r2, #1
 80105d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	683a      	ldr	r2, [r7, #0]
 80105ea:	430a      	orrs	r2, r1
 80105ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 f812 	bl	8010618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2220      	movs	r2, #32
 8010600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2200      	movs	r2, #0
 8010608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801060c:	2300      	movs	r3, #0
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
	...

08010618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010618:	b480      	push	{r7}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010624:	2b00      	cmp	r3, #0
 8010626:	d108      	bne.n	801063a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2201      	movs	r2, #1
 801062c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2201      	movs	r2, #1
 8010634:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010638:	e031      	b.n	801069e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801063a:	2310      	movs	r3, #16
 801063c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801063e:	2310      	movs	r3, #16
 8010640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	689b      	ldr	r3, [r3, #8]
 8010648:	0e5b      	lsrs	r3, r3, #25
 801064a:	b2db      	uxtb	r3, r3
 801064c:	f003 0307 	and.w	r3, r3, #7
 8010650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	0f5b      	lsrs	r3, r3, #29
 801065a:	b2db      	uxtb	r3, r3
 801065c:	f003 0307 	and.w	r3, r3, #7
 8010660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010662:	7bbb      	ldrb	r3, [r7, #14]
 8010664:	7b3a      	ldrb	r2, [r7, #12]
 8010666:	4911      	ldr	r1, [pc, #68]	@ (80106ac <UARTEx_SetNbDataToProcess+0x94>)
 8010668:	5c8a      	ldrb	r2, [r1, r2]
 801066a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801066e:	7b3a      	ldrb	r2, [r7, #12]
 8010670:	490f      	ldr	r1, [pc, #60]	@ (80106b0 <UARTEx_SetNbDataToProcess+0x98>)
 8010672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010674:	fb93 f3f2 	sdiv	r3, r3, r2
 8010678:	b29a      	uxth	r2, r3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010680:	7bfb      	ldrb	r3, [r7, #15]
 8010682:	7b7a      	ldrb	r2, [r7, #13]
 8010684:	4909      	ldr	r1, [pc, #36]	@ (80106ac <UARTEx_SetNbDataToProcess+0x94>)
 8010686:	5c8a      	ldrb	r2, [r1, r2]
 8010688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801068c:	7b7a      	ldrb	r2, [r7, #13]
 801068e:	4908      	ldr	r1, [pc, #32]	@ (80106b0 <UARTEx_SetNbDataToProcess+0x98>)
 8010690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010692:	fb93 f3f2 	sdiv	r3, r3, r2
 8010696:	b29a      	uxth	r2, r3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801069e:	bf00      	nop
 80106a0:	3714      	adds	r7, #20
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop
 80106ac:	0801242c 	.word	0x0801242c
 80106b0:	08012434 	.word	0x08012434

080106b4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80106b4:	b084      	sub	sp, #16
 80106b6:	b480      	push	{r7}
 80106b8:	b085      	sub	sp, #20
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	f107 001c 	add.w	r0, r7, #28
 80106c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80106ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80106cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80106ce:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80106d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80106d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80106d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80106d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80106d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80106da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80106dc:	68fa      	ldr	r2, [r7, #12]
 80106de:	4313      	orrs	r3, r2
 80106e0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	685a      	ldr	r2, [r3, #4]
 80106e6:	4b07      	ldr	r3, [pc, #28]	@ (8010704 <SDMMC_Init+0x50>)
 80106e8:	4013      	ands	r3, r2
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	431a      	orrs	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80106f2:	2300      	movs	r3, #0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3714      	adds	r7, #20
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	b004      	add	sp, #16
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	ffc02c00 	.word	0xffc02c00

08010708 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010716:	4618      	mov	r0, r3
 8010718:	370c      	adds	r7, #12
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010722:	b480      	push	{r7}
 8010724:	b083      	sub	sp, #12
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010736:	2300      	movs	r3, #0
}
 8010738:	4618      	mov	r0, r3
 801073a:	370c      	adds	r7, #12
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f043 0203 	orr.w	r2, r3, #3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	370c      	adds	r7, #12
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr

08010766 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010766:	b480      	push	{r7}
 8010768:	b083      	sub	sp, #12
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f003 0303 	and.w	r3, r3, #3
}
 8010776:	4618      	mov	r0, r3
 8010778:	370c      	adds	r7, #12
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr
	...

08010784 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801078e:	2300      	movs	r3, #0
 8010790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80107a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80107a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80107ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	4313      	orrs	r3, r2
 80107b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	68da      	ldr	r2, [r3, #12]
 80107ba:	4b06      	ldr	r3, [pc, #24]	@ (80107d4 <SDMMC_SendCommand+0x50>)
 80107bc:	4013      	ands	r3, r2
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	431a      	orrs	r2, r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3714      	adds	r7, #20
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr
 80107d4:	fffee0c0 	.word	0xfffee0c0

080107d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80107d8:	b480      	push	{r7}
 80107da:	b083      	sub	sp, #12
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	691b      	ldr	r3, [r3, #16]
 80107e4:	b2db      	uxtb	r3, r3
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	370c      	adds	r7, #12
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr

080107f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80107f2:	b480      	push	{r7}
 80107f4:	b085      	sub	sp, #20
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
 80107fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	3314      	adds	r3, #20
 8010800:	461a      	mov	r2, r3
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	4413      	add	r3, r2
 8010806:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
}
 801080c:	4618      	mov	r0, r3
 801080e:	3714      	adds	r7, #20
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010818:	b480      	push	{r7}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010822:	2300      	movs	r3, #0
 8010824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	685a      	ldr	r2, [r3, #4]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801083e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010844:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801084a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801084c:	68fa      	ldr	r2, [r7, #12]
 801084e:	4313      	orrs	r3, r2
 8010850:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010856:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	431a      	orrs	r2, r3
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010862:	2300      	movs	r3, #0

}
 8010864:	4618      	mov	r0, r3
 8010866:	3714      	adds	r7, #20
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b088      	sub	sp, #32
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801087e:	2310      	movs	r3, #16
 8010880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010882:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010888:	2300      	movs	r3, #0
 801088a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801088c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010890:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010892:	f107 0308 	add.w	r3, r7, #8
 8010896:	4619      	mov	r1, r3
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7ff ff73 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801089e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108a2:	2110      	movs	r1, #16
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f000 fa5f 	bl	8010d68 <SDMMC_GetCmdResp1>
 80108aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108ac:	69fb      	ldr	r3, [r7, #28]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3720      	adds	r7, #32
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}

080108b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80108b6:	b580      	push	{r7, lr}
 80108b8:	b088      	sub	sp, #32
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
 80108be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80108c4:	2311      	movs	r3, #17
 80108c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80108cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108ce:	2300      	movs	r3, #0
 80108d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80108d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108d8:	f107 0308 	add.w	r3, r7, #8
 80108dc:	4619      	mov	r1, r3
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f7ff ff50 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80108e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108e8:	2111      	movs	r1, #17
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 fa3c 	bl	8010d68 <SDMMC_GetCmdResp1>
 80108f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108f2:	69fb      	ldr	r3, [r7, #28]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3720      	adds	r7, #32
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b088      	sub	sp, #32
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801090a:	2312      	movs	r3, #18
 801090c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801090e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010914:	2300      	movs	r3, #0
 8010916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801091c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801091e:	f107 0308 	add.w	r3, r7, #8
 8010922:	4619      	mov	r1, r3
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f7ff ff2d 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801092a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801092e:	2112      	movs	r1, #18
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 fa19 	bl	8010d68 <SDMMC_GetCmdResp1>
 8010936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010938:	69fb      	ldr	r3, [r7, #28]
}
 801093a:	4618      	mov	r0, r3
 801093c:	3720      	adds	r7, #32
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}

08010942 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010942:	b580      	push	{r7, lr}
 8010944:	b088      	sub	sp, #32
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010950:	2318      	movs	r3, #24
 8010952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801095a:	2300      	movs	r3, #0
 801095c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801095e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010964:	f107 0308 	add.w	r3, r7, #8
 8010968:	4619      	mov	r1, r3
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7ff ff0a 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010974:	2118      	movs	r1, #24
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 f9f6 	bl	8010d68 <SDMMC_GetCmdResp1>
 801097c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801097e:	69fb      	ldr	r3, [r7, #28]
}
 8010980:	4618      	mov	r0, r3
 8010982:	3720      	adds	r7, #32
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b088      	sub	sp, #32
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010996:	2319      	movs	r3, #25
 8010998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801099a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801099e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109a0:	2300      	movs	r3, #0
 80109a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109aa:	f107 0308 	add.w	r3, r7, #8
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7ff fee7 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80109b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109ba:	2119      	movs	r1, #25
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f000 f9d3 	bl	8010d68 <SDMMC_GetCmdResp1>
 80109c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c4:	69fb      	ldr	r3, [r7, #28]
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3720      	adds	r7, #32
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
	...

080109d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b088      	sub	sp, #32
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80109d8:	2300      	movs	r3, #0
 80109da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80109dc:	230c      	movs	r3, #12
 80109de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80109e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109e6:	2300      	movs	r3, #0
 80109e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109ee:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a08:	f107 0308 	add.w	r3, r7, #8
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f7ff feb8 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010a14:	4a0b      	ldr	r2, [pc, #44]	@ (8010a44 <SDMMC_CmdStopTransfer+0x74>)
 8010a16:	210c      	movs	r1, #12
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 f9a5 	bl	8010d68 <SDMMC_GetCmdResp1>
 8010a1e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010a32:	d101      	bne.n	8010a38 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010a34:	2300      	movs	r3, #0
 8010a36:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010a38:	69fb      	ldr	r3, [r7, #28]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3720      	adds	r7, #32
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	05f5e100 	.word	0x05f5e100

08010a48 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b088      	sub	sp, #32
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010a56:	2307      	movs	r3, #7
 8010a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a60:	2300      	movs	r3, #0
 8010a62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a6a:	f107 0308 	add.w	r3, r7, #8
 8010a6e:	4619      	mov	r1, r3
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff fe87 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a7a:	2107      	movs	r1, #7
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 f973 	bl	8010d68 <SDMMC_GetCmdResp1>
 8010a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a84:	69fb      	ldr	r3, [r7, #28]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3720      	adds	r7, #32
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b088      	sub	sp, #32
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010a96:	2300      	movs	r3, #0
 8010a98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010aaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010aac:	f107 0308 	add.w	r3, r7, #8
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff fe66 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f000 fb97 	bl	80111ec <SDMMC_GetCmdError>
 8010abe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ac0:	69fb      	ldr	r3, [r7, #28]
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3720      	adds	r7, #32
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}

08010aca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010aca:	b580      	push	{r7, lr}
 8010acc:	b088      	sub	sp, #32
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010ad2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010ad6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010ad8:	2308      	movs	r3, #8
 8010ada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010adc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010aea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010aec:	f107 0308 	add.w	r3, r7, #8
 8010af0:	4619      	mov	r1, r3
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f7ff fe46 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f000 fb29 	bl	8011150 <SDMMC_GetCmdResp7>
 8010afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b00:	69fb      	ldr	r3, [r7, #28]
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3720      	adds	r7, #32
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b0a:	b580      	push	{r7, lr}
 8010b0c:	b088      	sub	sp, #32
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	6078      	str	r0, [r7, #4]
 8010b12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010b18:	2337      	movs	r3, #55	@ 0x37
 8010b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b22:	2300      	movs	r3, #0
 8010b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b2c:	f107 0308 	add.w	r3, r7, #8
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff fe26 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b3c:	2137      	movs	r1, #55	@ 0x37
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 f912 	bl	8010d68 <SDMMC_GetCmdResp1>
 8010b44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b46:	69fb      	ldr	r3, [r7, #28]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3720      	adds	r7, #32
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b088      	sub	sp, #32
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010b5e:	2329      	movs	r3, #41	@ 0x29
 8010b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b72:	f107 0308 	add.w	r3, r7, #8
 8010b76:	4619      	mov	r1, r3
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7ff fe03 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 fa2e 	bl	8010fe0 <SDMMC_GetCmdResp3>
 8010b84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b86:	69fb      	ldr	r3, [r7, #28]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3720      	adds	r7, #32
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b088      	sub	sp, #32
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010b9e:	2306      	movs	r3, #6
 8010ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bb2:	f107 0308 	add.w	r3, r7, #8
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7ff fde3 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bc2:	2106      	movs	r1, #6
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 f8cf 	bl	8010d68 <SDMMC_GetCmdResp1>
 8010bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bcc:	69fb      	ldr	r3, [r7, #28]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3720      	adds	r7, #32
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b088      	sub	sp, #32
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010bde:	2300      	movs	r3, #0
 8010be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010be2:	2333      	movs	r3, #51	@ 0x33
 8010be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010be6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010bea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bec:	2300      	movs	r3, #0
 8010bee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bf6:	f107 0308 	add.w	r3, r7, #8
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f7ff fdc1 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c06:	2133      	movs	r1, #51	@ 0x33
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 f8ad 	bl	8010d68 <SDMMC_GetCmdResp1>
 8010c0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c10:	69fb      	ldr	r3, [r7, #28]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3720      	adds	r7, #32
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b088      	sub	sp, #32
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010c22:	2300      	movs	r3, #0
 8010c24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010c26:	2302      	movs	r3, #2
 8010c28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010c2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010c2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c30:	2300      	movs	r3, #0
 8010c32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c3a:	f107 0308 	add.w	r3, r7, #8
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff fd9f 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 f980 	bl	8010f4c <SDMMC_GetCmdResp2>
 8010c4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c4e:	69fb      	ldr	r3, [r7, #28]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3720      	adds	r7, #32
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b088      	sub	sp, #32
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010c66:	2309      	movs	r3, #9
 8010c68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010c6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c70:	2300      	movs	r3, #0
 8010c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c7a:	f107 0308 	add.w	r3, r7, #8
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff fd7f 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 f960 	bl	8010f4c <SDMMC_GetCmdResp2>
 8010c8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c8e:	69fb      	ldr	r3, [r7, #28]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3720      	adds	r7, #32
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b088      	sub	sp, #32
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010ca6:	2303      	movs	r3, #3
 8010ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010caa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010cb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cba:	f107 0308 	add.w	r3, r7, #8
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f7ff fd5f 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010cc6:	683a      	ldr	r2, [r7, #0]
 8010cc8:	2103      	movs	r1, #3
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f000 f9c8 	bl	8011060 <SDMMC_GetCmdResp6>
 8010cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cd2:	69fb      	ldr	r3, [r7, #28]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3720      	adds	r7, #32
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b088      	sub	sp, #32
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010cea:	230d      	movs	r3, #13
 8010cec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010cf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010cfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cfe:	f107 0308 	add.w	r3, r7, #8
 8010d02:	4619      	mov	r1, r3
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7ff fd3d 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d0e:	210d      	movs	r1, #13
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 f829 	bl	8010d68 <SDMMC_GetCmdResp1>
 8010d16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d18:	69fb      	ldr	r3, [r7, #28]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3720      	adds	r7, #32
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b088      	sub	sp, #32
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010d2e:	230d      	movs	r3, #13
 8010d30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d42:	f107 0308 	add.w	r3, r7, #8
 8010d46:	4619      	mov	r1, r3
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f7ff fd1b 	bl	8010784 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d52:	210d      	movs	r1, #13
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f000 f807 	bl	8010d68 <SDMMC_GetCmdResp1>
 8010d5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d5c:	69fb      	ldr	r3, [r7, #28]
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3720      	adds	r7, #32
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
	...

08010d68 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b088      	sub	sp, #32
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	460b      	mov	r3, r1
 8010d72:	607a      	str	r2, [r7, #4]
 8010d74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d76:	4b70      	ldr	r3, [pc, #448]	@ (8010f38 <SDMMC_GetCmdResp1+0x1d0>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4a70      	ldr	r2, [pc, #448]	@ (8010f3c <SDMMC_GetCmdResp1+0x1d4>)
 8010d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8010d80:	0a5a      	lsrs	r2, r3, #9
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	fb02 f303 	mul.w	r3, r2, r3
 8010d88:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	1e5a      	subs	r2, r3, #1
 8010d8e:	61fa      	str	r2, [r7, #28]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d102      	bne.n	8010d9a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010d98:	e0c9      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d9e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010da0:	69ba      	ldr	r2, [r7, #24]
 8010da2:	4b67      	ldr	r3, [pc, #412]	@ (8010f40 <SDMMC_GetCmdResp1+0x1d8>)
 8010da4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d0ef      	beq.n	8010d8a <SDMMC_GetCmdResp1+0x22>
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d1ea      	bne.n	8010d8a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010db8:	f003 0304 	and.w	r3, r3, #4
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d004      	beq.n	8010dca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2204      	movs	r2, #4
 8010dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010dc6:	2304      	movs	r3, #4
 8010dc8:	e0b1      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dce:	f003 0301 	and.w	r3, r3, #1
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d004      	beq.n	8010de0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e0a6      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	4a58      	ldr	r2, [pc, #352]	@ (8010f44 <SDMMC_GetCmdResp1+0x1dc>)
 8010de4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010de6:	68f8      	ldr	r0, [r7, #12]
 8010de8:	f7ff fcf6 	bl	80107d8 <SDMMC_GetCommandResponse>
 8010dec:	4603      	mov	r3, r0
 8010dee:	461a      	mov	r2, r3
 8010df0:	7afb      	ldrb	r3, [r7, #11]
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d001      	beq.n	8010dfa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010df6:	2301      	movs	r3, #1
 8010df8:	e099      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f7ff fcf8 	bl	80107f2 <SDMMC_GetResponse>
 8010e02:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010e04:	697a      	ldr	r2, [r7, #20]
 8010e06:	4b50      	ldr	r3, [pc, #320]	@ (8010f48 <SDMMC_GetCmdResp1+0x1e0>)
 8010e08:	4013      	ands	r3, r2
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d101      	bne.n	8010e12 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	e08d      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	da02      	bge.n	8010e1e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010e18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010e1c:	e087      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d001      	beq.n	8010e2c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010e28:	2340      	movs	r3, #64	@ 0x40
 8010e2a:	e080      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d001      	beq.n	8010e3a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010e36:	2380      	movs	r3, #128	@ 0x80
 8010e38:	e079      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d002      	beq.n	8010e4a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e48:	e071      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010e54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010e58:	e069      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d002      	beq.n	8010e6a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e68:	e061      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d002      	beq.n	8010e7a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010e78:	e059      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e88:	e051      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d002      	beq.n	8010e9a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010e98:	e049      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d002      	beq.n	8010eaa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010ea4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010ea8:	e041      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d002      	beq.n	8010eba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010eb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010eb8:	e039      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d002      	beq.n	8010eca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010ec4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010ec8:	e031      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010ed4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010ed8:	e029      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d002      	beq.n	8010eea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010ee4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010ee8:	e021      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d002      	beq.n	8010efa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010ef4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010ef8:	e019      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010f04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010f08:	e011      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d002      	beq.n	8010f1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010f14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010f18:	e009      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	f003 0308 	and.w	r3, r3, #8
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d002      	beq.n	8010f2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010f24:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010f28:	e001      	b.n	8010f2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3720      	adds	r7, #32
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	2400000c 	.word	0x2400000c
 8010f3c:	10624dd3 	.word	0x10624dd3
 8010f40:	00200045 	.word	0x00200045
 8010f44:	002000c5 	.word	0x002000c5
 8010f48:	fdffe008 	.word	0xfdffe008

08010f4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f54:	4b1f      	ldr	r3, [pc, #124]	@ (8010fd4 <SDMMC_GetCmdResp2+0x88>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4a1f      	ldr	r2, [pc, #124]	@ (8010fd8 <SDMMC_GetCmdResp2+0x8c>)
 8010f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8010f5e:	0a5b      	lsrs	r3, r3, #9
 8010f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f64:	fb02 f303 	mul.w	r3, r2, r3
 8010f68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	1e5a      	subs	r2, r3, #1
 8010f6e:	60fa      	str	r2, [r7, #12]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d102      	bne.n	8010f7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010f78:	e026      	b.n	8010fc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d0ef      	beq.n	8010f6a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d1ea      	bne.n	8010f6a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f98:	f003 0304 	and.w	r3, r3, #4
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d004      	beq.n	8010faa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2204      	movs	r2, #4
 8010fa4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fa6:	2304      	movs	r3, #4
 8010fa8:	e00e      	b.n	8010fc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fae:	f003 0301 	and.w	r3, r3, #1
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d004      	beq.n	8010fc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2201      	movs	r2, #1
 8010fba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e003      	b.n	8010fc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	4a06      	ldr	r2, [pc, #24]	@ (8010fdc <SDMMC_GetCmdResp2+0x90>)
 8010fc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010fc6:	2300      	movs	r3, #0
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3714      	adds	r7, #20
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr
 8010fd4:	2400000c 	.word	0x2400000c
 8010fd8:	10624dd3 	.word	0x10624dd3
 8010fdc:	002000c5 	.word	0x002000c5

08010fe0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b085      	sub	sp, #20
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8011054 <SDMMC_GetCmdResp3+0x74>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a1a      	ldr	r2, [pc, #104]	@ (8011058 <SDMMC_GetCmdResp3+0x78>)
 8010fee:	fba2 2303 	umull	r2, r3, r2, r3
 8010ff2:	0a5b      	lsrs	r3, r3, #9
 8010ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ff8:	fb02 f303 	mul.w	r3, r2, r3
 8010ffc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	1e5a      	subs	r2, r3, #1
 8011002:	60fa      	str	r2, [r7, #12]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d102      	bne.n	801100e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011008:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801100c:	e01b      	b.n	8011046 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011012:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801101a:	2b00      	cmp	r3, #0
 801101c:	d0ef      	beq.n	8010ffe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011024:	2b00      	cmp	r3, #0
 8011026:	d1ea      	bne.n	8010ffe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801102c:	f003 0304 	and.w	r3, r3, #4
 8011030:	2b00      	cmp	r3, #0
 8011032:	d004      	beq.n	801103e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2204      	movs	r2, #4
 8011038:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801103a:	2304      	movs	r3, #4
 801103c:	e003      	b.n	8011046 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	4a06      	ldr	r2, [pc, #24]	@ (801105c <SDMMC_GetCmdResp3+0x7c>)
 8011042:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011044:	2300      	movs	r3, #0
}
 8011046:	4618      	mov	r0, r3
 8011048:	3714      	adds	r7, #20
 801104a:	46bd      	mov	sp, r7
 801104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011050:	4770      	bx	lr
 8011052:	bf00      	nop
 8011054:	2400000c 	.word	0x2400000c
 8011058:	10624dd3 	.word	0x10624dd3
 801105c:	002000c5 	.word	0x002000c5

08011060 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b088      	sub	sp, #32
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	460b      	mov	r3, r1
 801106a:	607a      	str	r2, [r7, #4]
 801106c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801106e:	4b35      	ldr	r3, [pc, #212]	@ (8011144 <SDMMC_GetCmdResp6+0xe4>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4a35      	ldr	r2, [pc, #212]	@ (8011148 <SDMMC_GetCmdResp6+0xe8>)
 8011074:	fba2 2303 	umull	r2, r3, r2, r3
 8011078:	0a5b      	lsrs	r3, r3, #9
 801107a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801107e:	fb02 f303 	mul.w	r3, r2, r3
 8011082:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	1e5a      	subs	r2, r3, #1
 8011088:	61fa      	str	r2, [r7, #28]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d102      	bne.n	8011094 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801108e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011092:	e052      	b.n	801113a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011098:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801109a:	69bb      	ldr	r3, [r7, #24]
 801109c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d0ef      	beq.n	8011084 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110a4:	69bb      	ldr	r3, [r7, #24]
 80110a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1ea      	bne.n	8011084 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110b2:	f003 0304 	and.w	r3, r3, #4
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d004      	beq.n	80110c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2204      	movs	r2, #4
 80110be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110c0:	2304      	movs	r3, #4
 80110c2:	e03a      	b.n	801113a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110c8:	f003 0301 	and.w	r3, r3, #1
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d004      	beq.n	80110da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2201      	movs	r2, #1
 80110d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110d6:	2301      	movs	r3, #1
 80110d8:	e02f      	b.n	801113a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	f7ff fb7c 	bl	80107d8 <SDMMC_GetCommandResponse>
 80110e0:	4603      	mov	r3, r0
 80110e2:	461a      	mov	r2, r3
 80110e4:	7afb      	ldrb	r3, [r7, #11]
 80110e6:	4293      	cmp	r3, r2
 80110e8:	d001      	beq.n	80110ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110ea:	2301      	movs	r3, #1
 80110ec:	e025      	b.n	801113a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	4a16      	ldr	r2, [pc, #88]	@ (801114c <SDMMC_GetCmdResp6+0xec>)
 80110f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80110f4:	2100      	movs	r1, #0
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f7ff fb7b 	bl	80107f2 <SDMMC_GetResponse>
 80110fc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011104:	2b00      	cmp	r3, #0
 8011106:	d106      	bne.n	8011116 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	0c1b      	lsrs	r3, r3, #16
 801110c:	b29a      	uxth	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011112:	2300      	movs	r3, #0
 8011114:	e011      	b.n	801113a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801111c:	2b00      	cmp	r3, #0
 801111e:	d002      	beq.n	8011126 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011120:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011124:	e009      	b.n	801113a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801112c:	2b00      	cmp	r3, #0
 801112e:	d002      	beq.n	8011136 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011134:	e001      	b.n	801113a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011136:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801113a:	4618      	mov	r0, r3
 801113c:	3720      	adds	r7, #32
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	2400000c 	.word	0x2400000c
 8011148:	10624dd3 	.word	0x10624dd3
 801114c:	002000c5 	.word	0x002000c5

08011150 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011150:	b480      	push	{r7}
 8011152:	b085      	sub	sp, #20
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011158:	4b22      	ldr	r3, [pc, #136]	@ (80111e4 <SDMMC_GetCmdResp7+0x94>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4a22      	ldr	r2, [pc, #136]	@ (80111e8 <SDMMC_GetCmdResp7+0x98>)
 801115e:	fba2 2303 	umull	r2, r3, r2, r3
 8011162:	0a5b      	lsrs	r3, r3, #9
 8011164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011168:	fb02 f303 	mul.w	r3, r2, r3
 801116c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	1e5a      	subs	r2, r3, #1
 8011172:	60fa      	str	r2, [r7, #12]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d102      	bne.n	801117e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011178:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801117c:	e02c      	b.n	80111d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011182:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801118a:	2b00      	cmp	r3, #0
 801118c:	d0ef      	beq.n	801116e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011194:	2b00      	cmp	r3, #0
 8011196:	d1ea      	bne.n	801116e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801119c:	f003 0304 	and.w	r3, r3, #4
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d004      	beq.n	80111ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2204      	movs	r2, #4
 80111a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80111aa:	2304      	movs	r3, #4
 80111ac:	e014      	b.n	80111d8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111b2:	f003 0301 	and.w	r3, r3, #1
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d004      	beq.n	80111c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2201      	movs	r2, #1
 80111be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80111c0:	2301      	movs	r3, #1
 80111c2:	e009      	b.n	80111d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2240      	movs	r2, #64	@ 0x40
 80111d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80111d6:	2300      	movs	r3, #0

}
 80111d8:	4618      	mov	r0, r3
 80111da:	3714      	adds	r7, #20
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr
 80111e4:	2400000c 	.word	0x2400000c
 80111e8:	10624dd3 	.word	0x10624dd3

080111ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b085      	sub	sp, #20
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80111f4:	4b11      	ldr	r3, [pc, #68]	@ (801123c <SDMMC_GetCmdError+0x50>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a11      	ldr	r2, [pc, #68]	@ (8011240 <SDMMC_GetCmdError+0x54>)
 80111fa:	fba2 2303 	umull	r2, r3, r2, r3
 80111fe:	0a5b      	lsrs	r3, r3, #9
 8011200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011204:	fb02 f303 	mul.w	r3, r2, r3
 8011208:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	1e5a      	subs	r2, r3, #1
 801120e:	60fa      	str	r2, [r7, #12]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d102      	bne.n	801121a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011214:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011218:	e009      	b.n	801122e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801121e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011222:	2b00      	cmp	r3, #0
 8011224:	d0f1      	beq.n	801120a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4a06      	ldr	r2, [pc, #24]	@ (8011244 <SDMMC_GetCmdError+0x58>)
 801122a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801122c:	2300      	movs	r3, #0
}
 801122e:	4618      	mov	r0, r3
 8011230:	3714      	adds	r7, #20
 8011232:	46bd      	mov	sp, r7
 8011234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop
 801123c:	2400000c 	.word	0x2400000c
 8011240:	10624dd3 	.word	0x10624dd3
 8011244:	002000c5 	.word	0x002000c5

08011248 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801124c:	4904      	ldr	r1, [pc, #16]	@ (8011260 <MX_FATFS_Init+0x18>)
 801124e:	4805      	ldr	r0, [pc, #20]	@ (8011264 <MX_FATFS_Init+0x1c>)
 8011250:	f000 fa8e 	bl	8011770 <FATFS_LinkDriver>
 8011254:	4603      	mov	r3, r0
 8011256:	461a      	mov	r2, r3
 8011258:	4b03      	ldr	r3, [pc, #12]	@ (8011268 <MX_FATFS_Init+0x20>)
 801125a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801125c:	bf00      	nop
 801125e:	bd80      	pop	{r7, pc}
 8011260:	240008a0 	.word	0x240008a0
 8011264:	0801243c 	.word	0x0801243c
 8011268:	2400089c 	.word	0x2400089c

0801126c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011272:	2300      	movs	r3, #0
 8011274:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011276:	f000 f885 	bl	8011384 <BSP_SD_IsDetected>
 801127a:	4603      	mov	r3, r0
 801127c:	2b01      	cmp	r3, #1
 801127e:	d001      	beq.n	8011284 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011280:	2302      	movs	r3, #2
 8011282:	e012      	b.n	80112aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011284:	480b      	ldr	r0, [pc, #44]	@ (80112b4 <BSP_SD_Init+0x48>)
 8011286:	f7fb f95d 	bl	800c544 <HAL_SD_Init>
 801128a:	4603      	mov	r3, r0
 801128c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801128e:	79fb      	ldrb	r3, [r7, #7]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d109      	bne.n	80112a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011294:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8011298:	4806      	ldr	r0, [pc, #24]	@ (80112b4 <BSP_SD_Init+0x48>)
 801129a:	f7fc f813 	bl	800d2c4 <HAL_SD_ConfigWideBusOperation>
 801129e:	4603      	mov	r3, r0
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d001      	beq.n	80112a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80112a4:	2301      	movs	r3, #1
 80112a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80112a8:	79fb      	ldrb	r3, [r7, #7]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	240003cc 	.word	0x240003cc

080112b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	68ba      	ldr	r2, [r7, #8]
 80112cc:	68f9      	ldr	r1, [r7, #12]
 80112ce:	4806      	ldr	r0, [pc, #24]	@ (80112e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80112d0:	f7fb fa58 	bl	800c784 <HAL_SD_ReadBlocks_DMA>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d001      	beq.n	80112de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80112da:	2301      	movs	r3, #1
 80112dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80112de:	7dfb      	ldrb	r3, [r7, #23]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3718      	adds	r7, #24
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	240003cc 	.word	0x240003cc

080112ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b086      	sub	sp, #24
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80112f8:	2300      	movs	r3, #0
 80112fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	68ba      	ldr	r2, [r7, #8]
 8011300:	68f9      	ldr	r1, [r7, #12]
 8011302:	4806      	ldr	r0, [pc, #24]	@ (801131c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011304:	f7fb fae6 	bl	800c8d4 <HAL_SD_WriteBlocks_DMA>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d001      	beq.n	8011312 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801130e:	2301      	movs	r3, #1
 8011310:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011312:	7dfb      	ldrb	r3, [r7, #23]
}
 8011314:	4618      	mov	r0, r3
 8011316:	3718      	adds	r7, #24
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	240003cc 	.word	0x240003cc

08011320 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011324:	4805      	ldr	r0, [pc, #20]	@ (801133c <BSP_SD_GetCardState+0x1c>)
 8011326:	f7fc f8df 	bl	800d4e8 <HAL_SD_GetCardState>
 801132a:	4603      	mov	r3, r0
 801132c:	2b04      	cmp	r3, #4
 801132e:	bf14      	ite	ne
 8011330:	2301      	movne	r3, #1
 8011332:	2300      	moveq	r3, #0
 8011334:	b2db      	uxtb	r3, r3
}
 8011336:	4618      	mov	r0, r3
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop
 801133c:	240003cc 	.word	0x240003cc

08011340 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011348:	6879      	ldr	r1, [r7, #4]
 801134a:	4803      	ldr	r0, [pc, #12]	@ (8011358 <BSP_SD_GetCardInfo+0x18>)
 801134c:	f7fb ff8e 	bl	800d26c <HAL_SD_GetCardInfo>
}
 8011350:	bf00      	nop
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	240003cc 	.word	0x240003cc

0801135c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011364:	f000 f9a0 	bl	80116a8 <BSP_SD_WriteCpltCallback>
}
 8011368:	bf00      	nop
 801136a:	3708      	adds	r7, #8
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011378:	f000 f9a2 	bl	80116c0 <BSP_SD_ReadCpltCallback>
}
 801137c:	bf00      	nop
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801138a:	2301      	movs	r3, #1
 801138c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801138e:	f000 f80b 	bl	80113a8 <BSP_PlatformIsDetected>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d101      	bne.n	801139c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011398:	2300      	movs	r3, #0
 801139a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801139c:	79fb      	ldrb	r3, [r7, #7]
 801139e:	b2db      	uxtb	r3, r3
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3708      	adds	r7, #8
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80113ae:	2301      	movs	r3, #1
 80113b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80113b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80113b6:	4806      	ldr	r0, [pc, #24]	@ (80113d0 <BSP_PlatformIsDetected+0x28>)
 80113b8:	f7f7 fd0c 	bl	8008dd4 <HAL_GPIO_ReadPin>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80113c2:	2300      	movs	r3, #0
 80113c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80113c6:	79fb      	ldrb	r3, [r7, #7]
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3708      	adds	r7, #8
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	58021400 	.word	0x58021400

080113d4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80113dc:	f7f1 fb72 	bl	8002ac4 <HAL_GetTick>
 80113e0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80113e2:	e006      	b.n	80113f2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80113e4:	f7ff ff9c 	bl	8011320 <BSP_SD_GetCardState>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d101      	bne.n	80113f2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	e009      	b.n	8011406 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80113f2:	f7f1 fb67 	bl	8002ac4 <HAL_GetTick>
 80113f6:	4602      	mov	r2, r0
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	1ad3      	subs	r3, r2, r3
 80113fc:	687a      	ldr	r2, [r7, #4]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d8f0      	bhi.n	80113e4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011406:	4618      	mov	r0, r3
 8011408:	3710      	adds	r7, #16
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
	...

08011410 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	4603      	mov	r3, r0
 8011418:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801141a:	4b0b      	ldr	r3, [pc, #44]	@ (8011448 <SD_CheckStatus+0x38>)
 801141c:	2201      	movs	r2, #1
 801141e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011420:	f7ff ff7e 	bl	8011320 <BSP_SD_GetCardState>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d107      	bne.n	801143a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801142a:	4b07      	ldr	r3, [pc, #28]	@ (8011448 <SD_CheckStatus+0x38>)
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	b2db      	uxtb	r3, r3
 8011430:	f023 0301 	bic.w	r3, r3, #1
 8011434:	b2da      	uxtb	r2, r3
 8011436:	4b04      	ldr	r3, [pc, #16]	@ (8011448 <SD_CheckStatus+0x38>)
 8011438:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801143a:	4b03      	ldr	r3, [pc, #12]	@ (8011448 <SD_CheckStatus+0x38>)
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	b2db      	uxtb	r3, r3
}
 8011440:	4618      	mov	r0, r3
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	24000019 	.word	0x24000019

0801144c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
 8011452:	4603      	mov	r3, r0
 8011454:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011456:	f7ff ff09 	bl	801126c <BSP_SD_Init>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d107      	bne.n	8011470 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011460:	79fb      	ldrb	r3, [r7, #7]
 8011462:	4618      	mov	r0, r3
 8011464:	f7ff ffd4 	bl	8011410 <SD_CheckStatus>
 8011468:	4603      	mov	r3, r0
 801146a:	461a      	mov	r2, r3
 801146c:	4b04      	ldr	r3, [pc, #16]	@ (8011480 <SD_initialize+0x34>)
 801146e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011470:	4b03      	ldr	r3, [pc, #12]	@ (8011480 <SD_initialize+0x34>)
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	b2db      	uxtb	r3, r3
}
 8011476:	4618      	mov	r0, r3
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	24000019 	.word	0x24000019

08011484 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
 801148a:	4603      	mov	r3, r0
 801148c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801148e:	79fb      	ldrb	r3, [r7, #7]
 8011490:	4618      	mov	r0, r3
 8011492:	f7ff ffbd 	bl	8011410 <SD_CheckStatus>
 8011496:	4603      	mov	r3, r0
}
 8011498:	4618      	mov	r0, r3
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b086      	sub	sp, #24
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	60b9      	str	r1, [r7, #8]
 80114a8:	607a      	str	r2, [r7, #4]
 80114aa:	603b      	str	r3, [r7, #0]
 80114ac:	4603      	mov	r3, r0
 80114ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114b0:	2301      	movs	r3, #1
 80114b2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114b4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80114b8:	f7ff ff8c 	bl	80113d4 <SD_CheckStatusWithTimeout>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	da01      	bge.n	80114c6 <SD_read+0x26>
  {
    return res;
 80114c2:	7dfb      	ldrb	r3, [r7, #23]
 80114c4:	e03b      	b.n	801153e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80114c6:	683a      	ldr	r2, [r7, #0]
 80114c8:	6879      	ldr	r1, [r7, #4]
 80114ca:	68b8      	ldr	r0, [r7, #8]
 80114cc:	f7ff fef4 	bl	80112b8 <BSP_SD_ReadBlocks_DMA>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d132      	bne.n	801153c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80114d6:	4b1c      	ldr	r3, [pc, #112]	@ (8011548 <SD_read+0xa8>)
 80114d8:	2200      	movs	r2, #0
 80114da:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80114dc:	f7f1 faf2 	bl	8002ac4 <HAL_GetTick>
 80114e0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80114e2:	bf00      	nop
 80114e4:	4b18      	ldr	r3, [pc, #96]	@ (8011548 <SD_read+0xa8>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d108      	bne.n	80114fe <SD_read+0x5e>
 80114ec:	f7f1 faea 	bl	8002ac4 <HAL_GetTick>
 80114f0:	4602      	mov	r2, r0
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	1ad3      	subs	r3, r2, r3
 80114f6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d9f2      	bls.n	80114e4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80114fe:	4b12      	ldr	r3, [pc, #72]	@ (8011548 <SD_read+0xa8>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d102      	bne.n	801150c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011506:	2301      	movs	r3, #1
 8011508:	75fb      	strb	r3, [r7, #23]
 801150a:	e017      	b.n	801153c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801150c:	4b0e      	ldr	r3, [pc, #56]	@ (8011548 <SD_read+0xa8>)
 801150e:	2200      	movs	r2, #0
 8011510:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011512:	f7f1 fad7 	bl	8002ac4 <HAL_GetTick>
 8011516:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011518:	e007      	b.n	801152a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801151a:	f7ff ff01 	bl	8011320 <BSP_SD_GetCardState>
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	d102      	bne.n	801152a <SD_read+0x8a>
          {
            res = RES_OK;
 8011524:	2300      	movs	r3, #0
 8011526:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011528:	e008      	b.n	801153c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801152a:	f7f1 facb 	bl	8002ac4 <HAL_GetTick>
 801152e:	4602      	mov	r2, r0
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011538:	4293      	cmp	r3, r2
 801153a:	d9ee      	bls.n	801151a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801153c:	7dfb      	ldrb	r3, [r7, #23]
}
 801153e:	4618      	mov	r0, r3
 8011540:	3718      	adds	r7, #24
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
 8011546:	bf00      	nop
 8011548:	240008a8 	.word	0x240008a8

0801154c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b086      	sub	sp, #24
 8011550:	af00      	add	r7, sp, #0
 8011552:	60b9      	str	r1, [r7, #8]
 8011554:	607a      	str	r2, [r7, #4]
 8011556:	603b      	str	r3, [r7, #0]
 8011558:	4603      	mov	r3, r0
 801155a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801155c:	2301      	movs	r3, #1
 801155e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011560:	4b24      	ldr	r3, [pc, #144]	@ (80115f4 <SD_write+0xa8>)
 8011562:	2200      	movs	r2, #0
 8011564:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011566:	f247 5030 	movw	r0, #30000	@ 0x7530
 801156a:	f7ff ff33 	bl	80113d4 <SD_CheckStatusWithTimeout>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	da01      	bge.n	8011578 <SD_write+0x2c>
  {
    return res;
 8011574:	7dfb      	ldrb	r3, [r7, #23]
 8011576:	e038      	b.n	80115ea <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011578:	683a      	ldr	r2, [r7, #0]
 801157a:	6879      	ldr	r1, [r7, #4]
 801157c:	68b8      	ldr	r0, [r7, #8]
 801157e:	f7ff feb5 	bl	80112ec <BSP_SD_WriteBlocks_DMA>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d12f      	bne.n	80115e8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011588:	f7f1 fa9c 	bl	8002ac4 <HAL_GetTick>
 801158c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801158e:	bf00      	nop
 8011590:	4b18      	ldr	r3, [pc, #96]	@ (80115f4 <SD_write+0xa8>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d108      	bne.n	80115aa <SD_write+0x5e>
 8011598:	f7f1 fa94 	bl	8002ac4 <HAL_GetTick>
 801159c:	4602      	mov	r2, r0
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	1ad3      	subs	r3, r2, r3
 80115a2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d9f2      	bls.n	8011590 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80115aa:	4b12      	ldr	r3, [pc, #72]	@ (80115f4 <SD_write+0xa8>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d102      	bne.n	80115b8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80115b2:	2301      	movs	r3, #1
 80115b4:	75fb      	strb	r3, [r7, #23]
 80115b6:	e017      	b.n	80115e8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80115b8:	4b0e      	ldr	r3, [pc, #56]	@ (80115f4 <SD_write+0xa8>)
 80115ba:	2200      	movs	r2, #0
 80115bc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80115be:	f7f1 fa81 	bl	8002ac4 <HAL_GetTick>
 80115c2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115c4:	e007      	b.n	80115d6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80115c6:	f7ff feab 	bl	8011320 <BSP_SD_GetCardState>
 80115ca:	4603      	mov	r3, r0
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d102      	bne.n	80115d6 <SD_write+0x8a>
          {
            res = RES_OK;
 80115d0:	2300      	movs	r3, #0
 80115d2:	75fb      	strb	r3, [r7, #23]
            break;
 80115d4:	e008      	b.n	80115e8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115d6:	f7f1 fa75 	bl	8002ac4 <HAL_GetTick>
 80115da:	4602      	mov	r2, r0
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	1ad3      	subs	r3, r2, r3
 80115e0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d9ee      	bls.n	80115c6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80115e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3718      	adds	r7, #24
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	240008a4 	.word	0x240008a4

080115f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b08c      	sub	sp, #48	@ 0x30
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	603a      	str	r2, [r7, #0]
 8011602:	71fb      	strb	r3, [r7, #7]
 8011604:	460b      	mov	r3, r1
 8011606:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011608:	2301      	movs	r3, #1
 801160a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801160e:	4b25      	ldr	r3, [pc, #148]	@ (80116a4 <SD_ioctl+0xac>)
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	b2db      	uxtb	r3, r3
 8011614:	f003 0301 	and.w	r3, r3, #1
 8011618:	2b00      	cmp	r3, #0
 801161a:	d001      	beq.n	8011620 <SD_ioctl+0x28>
 801161c:	2303      	movs	r3, #3
 801161e:	e03c      	b.n	801169a <SD_ioctl+0xa2>

  switch (cmd)
 8011620:	79bb      	ldrb	r3, [r7, #6]
 8011622:	2b03      	cmp	r3, #3
 8011624:	d834      	bhi.n	8011690 <SD_ioctl+0x98>
 8011626:	a201      	add	r2, pc, #4	@ (adr r2, 801162c <SD_ioctl+0x34>)
 8011628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801162c:	0801163d 	.word	0x0801163d
 8011630:	08011645 	.word	0x08011645
 8011634:	0801165d 	.word	0x0801165d
 8011638:	08011677 	.word	0x08011677
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801163c:	2300      	movs	r3, #0
 801163e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011642:	e028      	b.n	8011696 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011644:	f107 0308 	add.w	r3, r7, #8
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff fe79 	bl	8011340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801164e:	6a3a      	ldr	r2, [r7, #32]
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011654:	2300      	movs	r3, #0
 8011656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801165a:	e01c      	b.n	8011696 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801165c:	f107 0308 	add.w	r3, r7, #8
 8011660:	4618      	mov	r0, r3
 8011662:	f7ff fe6d 	bl	8011340 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011668:	b29a      	uxth	r2, r3
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801166e:	2300      	movs	r3, #0
 8011670:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011674:	e00f      	b.n	8011696 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011676:	f107 0308 	add.w	r3, r7, #8
 801167a:	4618      	mov	r0, r3
 801167c:	f7ff fe60 	bl	8011340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011682:	0a5a      	lsrs	r2, r3, #9
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011688:	2300      	movs	r3, #0
 801168a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801168e:	e002      	b.n	8011696 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011690:	2304      	movs	r3, #4
 8011692:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011696:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801169a:	4618      	mov	r0, r3
 801169c:	3730      	adds	r7, #48	@ 0x30
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	24000019 	.word	0x24000019

080116a8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80116a8:	b480      	push	{r7}
 80116aa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80116ac:	4b03      	ldr	r3, [pc, #12]	@ (80116bc <BSP_SD_WriteCpltCallback+0x14>)
 80116ae:	2201      	movs	r2, #1
 80116b0:	601a      	str	r2, [r3, #0]
}
 80116b2:	bf00      	nop
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr
 80116bc:	240008a4 	.word	0x240008a4

080116c0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80116c0:	b480      	push	{r7}
 80116c2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80116c4:	4b03      	ldr	r3, [pc, #12]	@ (80116d4 <BSP_SD_ReadCpltCallback+0x14>)
 80116c6:	2201      	movs	r2, #1
 80116c8:	601a      	str	r2, [r3, #0]
}
 80116ca:	bf00      	nop
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr
 80116d4:	240008a8 	.word	0x240008a8

080116d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80116d8:	b480      	push	{r7}
 80116da:	b087      	sub	sp, #28
 80116dc:	af00      	add	r7, sp, #0
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	4613      	mov	r3, r2
 80116e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80116e6:	2301      	movs	r3, #1
 80116e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80116ea:	2300      	movs	r3, #0
 80116ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80116ee:	4b1f      	ldr	r3, [pc, #124]	@ (801176c <FATFS_LinkDriverEx+0x94>)
 80116f0:	7a5b      	ldrb	r3, [r3, #9]
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d131      	bne.n	801175c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80116f8:	4b1c      	ldr	r3, [pc, #112]	@ (801176c <FATFS_LinkDriverEx+0x94>)
 80116fa:	7a5b      	ldrb	r3, [r3, #9]
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	461a      	mov	r2, r3
 8011700:	4b1a      	ldr	r3, [pc, #104]	@ (801176c <FATFS_LinkDriverEx+0x94>)
 8011702:	2100      	movs	r1, #0
 8011704:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011706:	4b19      	ldr	r3, [pc, #100]	@ (801176c <FATFS_LinkDriverEx+0x94>)
 8011708:	7a5b      	ldrb	r3, [r3, #9]
 801170a:	b2db      	uxtb	r3, r3
 801170c:	4a17      	ldr	r2, [pc, #92]	@ (801176c <FATFS_LinkDriverEx+0x94>)
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	4413      	add	r3, r2
 8011712:	68fa      	ldr	r2, [r7, #12]
 8011714:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011716:	4b15      	ldr	r3, [pc, #84]	@ (801176c <FATFS_LinkDriverEx+0x94>)
 8011718:	7a5b      	ldrb	r3, [r3, #9]
 801171a:	b2db      	uxtb	r3, r3
 801171c:	461a      	mov	r2, r3
 801171e:	4b13      	ldr	r3, [pc, #76]	@ (801176c <FATFS_LinkDriverEx+0x94>)
 8011720:	4413      	add	r3, r2
 8011722:	79fa      	ldrb	r2, [r7, #7]
 8011724:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011726:	4b11      	ldr	r3, [pc, #68]	@ (801176c <FATFS_LinkDriverEx+0x94>)
 8011728:	7a5b      	ldrb	r3, [r3, #9]
 801172a:	b2db      	uxtb	r3, r3
 801172c:	1c5a      	adds	r2, r3, #1
 801172e:	b2d1      	uxtb	r1, r2
 8011730:	4a0e      	ldr	r2, [pc, #56]	@ (801176c <FATFS_LinkDriverEx+0x94>)
 8011732:	7251      	strb	r1, [r2, #9]
 8011734:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011736:	7dbb      	ldrb	r3, [r7, #22]
 8011738:	3330      	adds	r3, #48	@ 0x30
 801173a:	b2da      	uxtb	r2, r3
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	3301      	adds	r3, #1
 8011744:	223a      	movs	r2, #58	@ 0x3a
 8011746:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	3302      	adds	r3, #2
 801174c:	222f      	movs	r2, #47	@ 0x2f
 801174e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	3303      	adds	r3, #3
 8011754:	2200      	movs	r2, #0
 8011756:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011758:	2300      	movs	r3, #0
 801175a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801175c:	7dfb      	ldrb	r3, [r7, #23]
}
 801175e:	4618      	mov	r0, r3
 8011760:	371c      	adds	r7, #28
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop
 801176c:	240008ac 	.word	0x240008ac

08011770 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801177a:	2200      	movs	r2, #0
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f7ff ffaa 	bl	80116d8 <FATFS_LinkDriverEx>
 8011784:	4603      	mov	r3, r0
}
 8011786:	4618      	mov	r0, r3
 8011788:	3708      	adds	r7, #8
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
	...

08011790 <siprintf>:
 8011790:	b40e      	push	{r1, r2, r3}
 8011792:	b510      	push	{r4, lr}
 8011794:	b09d      	sub	sp, #116	@ 0x74
 8011796:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011798:	9002      	str	r0, [sp, #8]
 801179a:	9006      	str	r0, [sp, #24]
 801179c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80117a0:	480a      	ldr	r0, [pc, #40]	@ (80117cc <siprintf+0x3c>)
 80117a2:	9107      	str	r1, [sp, #28]
 80117a4:	9104      	str	r1, [sp, #16]
 80117a6:	490a      	ldr	r1, [pc, #40]	@ (80117d0 <siprintf+0x40>)
 80117a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80117ac:	9105      	str	r1, [sp, #20]
 80117ae:	2400      	movs	r4, #0
 80117b0:	a902      	add	r1, sp, #8
 80117b2:	6800      	ldr	r0, [r0, #0]
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80117b8:	f000 f9a2 	bl	8011b00 <_svfiprintf_r>
 80117bc:	9b02      	ldr	r3, [sp, #8]
 80117be:	701c      	strb	r4, [r3, #0]
 80117c0:	b01d      	add	sp, #116	@ 0x74
 80117c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117c6:	b003      	add	sp, #12
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop
 80117cc:	2400001c 	.word	0x2400001c
 80117d0:	ffff0208 	.word	0xffff0208

080117d4 <memset>:
 80117d4:	4402      	add	r2, r0
 80117d6:	4603      	mov	r3, r0
 80117d8:	4293      	cmp	r3, r2
 80117da:	d100      	bne.n	80117de <memset+0xa>
 80117dc:	4770      	bx	lr
 80117de:	f803 1b01 	strb.w	r1, [r3], #1
 80117e2:	e7f9      	b.n	80117d8 <memset+0x4>

080117e4 <__errno>:
 80117e4:	4b01      	ldr	r3, [pc, #4]	@ (80117ec <__errno+0x8>)
 80117e6:	6818      	ldr	r0, [r3, #0]
 80117e8:	4770      	bx	lr
 80117ea:	bf00      	nop
 80117ec:	2400001c 	.word	0x2400001c

080117f0 <__libc_init_array>:
 80117f0:	b570      	push	{r4, r5, r6, lr}
 80117f2:	4d0d      	ldr	r5, [pc, #52]	@ (8011828 <__libc_init_array+0x38>)
 80117f4:	4c0d      	ldr	r4, [pc, #52]	@ (801182c <__libc_init_array+0x3c>)
 80117f6:	1b64      	subs	r4, r4, r5
 80117f8:	10a4      	asrs	r4, r4, #2
 80117fa:	2600      	movs	r6, #0
 80117fc:	42a6      	cmp	r6, r4
 80117fe:	d109      	bne.n	8011814 <__libc_init_array+0x24>
 8011800:	4d0b      	ldr	r5, [pc, #44]	@ (8011830 <__libc_init_array+0x40>)
 8011802:	4c0c      	ldr	r4, [pc, #48]	@ (8011834 <__libc_init_array+0x44>)
 8011804:	f000 fc64 	bl	80120d0 <_init>
 8011808:	1b64      	subs	r4, r4, r5
 801180a:	10a4      	asrs	r4, r4, #2
 801180c:	2600      	movs	r6, #0
 801180e:	42a6      	cmp	r6, r4
 8011810:	d105      	bne.n	801181e <__libc_init_array+0x2e>
 8011812:	bd70      	pop	{r4, r5, r6, pc}
 8011814:	f855 3b04 	ldr.w	r3, [r5], #4
 8011818:	4798      	blx	r3
 801181a:	3601      	adds	r6, #1
 801181c:	e7ee      	b.n	80117fc <__libc_init_array+0xc>
 801181e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011822:	4798      	blx	r3
 8011824:	3601      	adds	r6, #1
 8011826:	e7f2      	b.n	801180e <__libc_init_array+0x1e>
 8011828:	0801248c 	.word	0x0801248c
 801182c:	0801248c 	.word	0x0801248c
 8011830:	0801248c 	.word	0x0801248c
 8011834:	08012490 	.word	0x08012490

08011838 <__retarget_lock_acquire_recursive>:
 8011838:	4770      	bx	lr

0801183a <__retarget_lock_release_recursive>:
 801183a:	4770      	bx	lr

0801183c <memcpy>:
 801183c:	440a      	add	r2, r1
 801183e:	4291      	cmp	r1, r2
 8011840:	f100 33ff 	add.w	r3, r0, #4294967295
 8011844:	d100      	bne.n	8011848 <memcpy+0xc>
 8011846:	4770      	bx	lr
 8011848:	b510      	push	{r4, lr}
 801184a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801184e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011852:	4291      	cmp	r1, r2
 8011854:	d1f9      	bne.n	801184a <memcpy+0xe>
 8011856:	bd10      	pop	{r4, pc}

08011858 <_free_r>:
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	4605      	mov	r5, r0
 801185c:	2900      	cmp	r1, #0
 801185e:	d041      	beq.n	80118e4 <_free_r+0x8c>
 8011860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011864:	1f0c      	subs	r4, r1, #4
 8011866:	2b00      	cmp	r3, #0
 8011868:	bfb8      	it	lt
 801186a:	18e4      	addlt	r4, r4, r3
 801186c:	f000 f8e0 	bl	8011a30 <__malloc_lock>
 8011870:	4a1d      	ldr	r2, [pc, #116]	@ (80118e8 <_free_r+0x90>)
 8011872:	6813      	ldr	r3, [r2, #0]
 8011874:	b933      	cbnz	r3, 8011884 <_free_r+0x2c>
 8011876:	6063      	str	r3, [r4, #4]
 8011878:	6014      	str	r4, [r2, #0]
 801187a:	4628      	mov	r0, r5
 801187c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011880:	f000 b8dc 	b.w	8011a3c <__malloc_unlock>
 8011884:	42a3      	cmp	r3, r4
 8011886:	d908      	bls.n	801189a <_free_r+0x42>
 8011888:	6820      	ldr	r0, [r4, #0]
 801188a:	1821      	adds	r1, r4, r0
 801188c:	428b      	cmp	r3, r1
 801188e:	bf01      	itttt	eq
 8011890:	6819      	ldreq	r1, [r3, #0]
 8011892:	685b      	ldreq	r3, [r3, #4]
 8011894:	1809      	addeq	r1, r1, r0
 8011896:	6021      	streq	r1, [r4, #0]
 8011898:	e7ed      	b.n	8011876 <_free_r+0x1e>
 801189a:	461a      	mov	r2, r3
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	b10b      	cbz	r3, 80118a4 <_free_r+0x4c>
 80118a0:	42a3      	cmp	r3, r4
 80118a2:	d9fa      	bls.n	801189a <_free_r+0x42>
 80118a4:	6811      	ldr	r1, [r2, #0]
 80118a6:	1850      	adds	r0, r2, r1
 80118a8:	42a0      	cmp	r0, r4
 80118aa:	d10b      	bne.n	80118c4 <_free_r+0x6c>
 80118ac:	6820      	ldr	r0, [r4, #0]
 80118ae:	4401      	add	r1, r0
 80118b0:	1850      	adds	r0, r2, r1
 80118b2:	4283      	cmp	r3, r0
 80118b4:	6011      	str	r1, [r2, #0]
 80118b6:	d1e0      	bne.n	801187a <_free_r+0x22>
 80118b8:	6818      	ldr	r0, [r3, #0]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	6053      	str	r3, [r2, #4]
 80118be:	4408      	add	r0, r1
 80118c0:	6010      	str	r0, [r2, #0]
 80118c2:	e7da      	b.n	801187a <_free_r+0x22>
 80118c4:	d902      	bls.n	80118cc <_free_r+0x74>
 80118c6:	230c      	movs	r3, #12
 80118c8:	602b      	str	r3, [r5, #0]
 80118ca:	e7d6      	b.n	801187a <_free_r+0x22>
 80118cc:	6820      	ldr	r0, [r4, #0]
 80118ce:	1821      	adds	r1, r4, r0
 80118d0:	428b      	cmp	r3, r1
 80118d2:	bf04      	itt	eq
 80118d4:	6819      	ldreq	r1, [r3, #0]
 80118d6:	685b      	ldreq	r3, [r3, #4]
 80118d8:	6063      	str	r3, [r4, #4]
 80118da:	bf04      	itt	eq
 80118dc:	1809      	addeq	r1, r1, r0
 80118de:	6021      	streq	r1, [r4, #0]
 80118e0:	6054      	str	r4, [r2, #4]
 80118e2:	e7ca      	b.n	801187a <_free_r+0x22>
 80118e4:	bd38      	pop	{r3, r4, r5, pc}
 80118e6:	bf00      	nop
 80118e8:	240009fc 	.word	0x240009fc

080118ec <sbrk_aligned>:
 80118ec:	b570      	push	{r4, r5, r6, lr}
 80118ee:	4e0f      	ldr	r6, [pc, #60]	@ (801192c <sbrk_aligned+0x40>)
 80118f0:	460c      	mov	r4, r1
 80118f2:	6831      	ldr	r1, [r6, #0]
 80118f4:	4605      	mov	r5, r0
 80118f6:	b911      	cbnz	r1, 80118fe <sbrk_aligned+0x12>
 80118f8:	f000 fba4 	bl	8012044 <_sbrk_r>
 80118fc:	6030      	str	r0, [r6, #0]
 80118fe:	4621      	mov	r1, r4
 8011900:	4628      	mov	r0, r5
 8011902:	f000 fb9f 	bl	8012044 <_sbrk_r>
 8011906:	1c43      	adds	r3, r0, #1
 8011908:	d103      	bne.n	8011912 <sbrk_aligned+0x26>
 801190a:	f04f 34ff 	mov.w	r4, #4294967295
 801190e:	4620      	mov	r0, r4
 8011910:	bd70      	pop	{r4, r5, r6, pc}
 8011912:	1cc4      	adds	r4, r0, #3
 8011914:	f024 0403 	bic.w	r4, r4, #3
 8011918:	42a0      	cmp	r0, r4
 801191a:	d0f8      	beq.n	801190e <sbrk_aligned+0x22>
 801191c:	1a21      	subs	r1, r4, r0
 801191e:	4628      	mov	r0, r5
 8011920:	f000 fb90 	bl	8012044 <_sbrk_r>
 8011924:	3001      	adds	r0, #1
 8011926:	d1f2      	bne.n	801190e <sbrk_aligned+0x22>
 8011928:	e7ef      	b.n	801190a <sbrk_aligned+0x1e>
 801192a:	bf00      	nop
 801192c:	240009f8 	.word	0x240009f8

08011930 <_malloc_r>:
 8011930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011934:	1ccd      	adds	r5, r1, #3
 8011936:	f025 0503 	bic.w	r5, r5, #3
 801193a:	3508      	adds	r5, #8
 801193c:	2d0c      	cmp	r5, #12
 801193e:	bf38      	it	cc
 8011940:	250c      	movcc	r5, #12
 8011942:	2d00      	cmp	r5, #0
 8011944:	4606      	mov	r6, r0
 8011946:	db01      	blt.n	801194c <_malloc_r+0x1c>
 8011948:	42a9      	cmp	r1, r5
 801194a:	d904      	bls.n	8011956 <_malloc_r+0x26>
 801194c:	230c      	movs	r3, #12
 801194e:	6033      	str	r3, [r6, #0]
 8011950:	2000      	movs	r0, #0
 8011952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011956:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a2c <_malloc_r+0xfc>
 801195a:	f000 f869 	bl	8011a30 <__malloc_lock>
 801195e:	f8d8 3000 	ldr.w	r3, [r8]
 8011962:	461c      	mov	r4, r3
 8011964:	bb44      	cbnz	r4, 80119b8 <_malloc_r+0x88>
 8011966:	4629      	mov	r1, r5
 8011968:	4630      	mov	r0, r6
 801196a:	f7ff ffbf 	bl	80118ec <sbrk_aligned>
 801196e:	1c43      	adds	r3, r0, #1
 8011970:	4604      	mov	r4, r0
 8011972:	d158      	bne.n	8011a26 <_malloc_r+0xf6>
 8011974:	f8d8 4000 	ldr.w	r4, [r8]
 8011978:	4627      	mov	r7, r4
 801197a:	2f00      	cmp	r7, #0
 801197c:	d143      	bne.n	8011a06 <_malloc_r+0xd6>
 801197e:	2c00      	cmp	r4, #0
 8011980:	d04b      	beq.n	8011a1a <_malloc_r+0xea>
 8011982:	6823      	ldr	r3, [r4, #0]
 8011984:	4639      	mov	r1, r7
 8011986:	4630      	mov	r0, r6
 8011988:	eb04 0903 	add.w	r9, r4, r3
 801198c:	f000 fb5a 	bl	8012044 <_sbrk_r>
 8011990:	4581      	cmp	r9, r0
 8011992:	d142      	bne.n	8011a1a <_malloc_r+0xea>
 8011994:	6821      	ldr	r1, [r4, #0]
 8011996:	1a6d      	subs	r5, r5, r1
 8011998:	4629      	mov	r1, r5
 801199a:	4630      	mov	r0, r6
 801199c:	f7ff ffa6 	bl	80118ec <sbrk_aligned>
 80119a0:	3001      	adds	r0, #1
 80119a2:	d03a      	beq.n	8011a1a <_malloc_r+0xea>
 80119a4:	6823      	ldr	r3, [r4, #0]
 80119a6:	442b      	add	r3, r5
 80119a8:	6023      	str	r3, [r4, #0]
 80119aa:	f8d8 3000 	ldr.w	r3, [r8]
 80119ae:	685a      	ldr	r2, [r3, #4]
 80119b0:	bb62      	cbnz	r2, 8011a0c <_malloc_r+0xdc>
 80119b2:	f8c8 7000 	str.w	r7, [r8]
 80119b6:	e00f      	b.n	80119d8 <_malloc_r+0xa8>
 80119b8:	6822      	ldr	r2, [r4, #0]
 80119ba:	1b52      	subs	r2, r2, r5
 80119bc:	d420      	bmi.n	8011a00 <_malloc_r+0xd0>
 80119be:	2a0b      	cmp	r2, #11
 80119c0:	d917      	bls.n	80119f2 <_malloc_r+0xc2>
 80119c2:	1961      	adds	r1, r4, r5
 80119c4:	42a3      	cmp	r3, r4
 80119c6:	6025      	str	r5, [r4, #0]
 80119c8:	bf18      	it	ne
 80119ca:	6059      	strne	r1, [r3, #4]
 80119cc:	6863      	ldr	r3, [r4, #4]
 80119ce:	bf08      	it	eq
 80119d0:	f8c8 1000 	streq.w	r1, [r8]
 80119d4:	5162      	str	r2, [r4, r5]
 80119d6:	604b      	str	r3, [r1, #4]
 80119d8:	4630      	mov	r0, r6
 80119da:	f000 f82f 	bl	8011a3c <__malloc_unlock>
 80119de:	f104 000b 	add.w	r0, r4, #11
 80119e2:	1d23      	adds	r3, r4, #4
 80119e4:	f020 0007 	bic.w	r0, r0, #7
 80119e8:	1ac2      	subs	r2, r0, r3
 80119ea:	bf1c      	itt	ne
 80119ec:	1a1b      	subne	r3, r3, r0
 80119ee:	50a3      	strne	r3, [r4, r2]
 80119f0:	e7af      	b.n	8011952 <_malloc_r+0x22>
 80119f2:	6862      	ldr	r2, [r4, #4]
 80119f4:	42a3      	cmp	r3, r4
 80119f6:	bf0c      	ite	eq
 80119f8:	f8c8 2000 	streq.w	r2, [r8]
 80119fc:	605a      	strne	r2, [r3, #4]
 80119fe:	e7eb      	b.n	80119d8 <_malloc_r+0xa8>
 8011a00:	4623      	mov	r3, r4
 8011a02:	6864      	ldr	r4, [r4, #4]
 8011a04:	e7ae      	b.n	8011964 <_malloc_r+0x34>
 8011a06:	463c      	mov	r4, r7
 8011a08:	687f      	ldr	r7, [r7, #4]
 8011a0a:	e7b6      	b.n	801197a <_malloc_r+0x4a>
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	42a3      	cmp	r3, r4
 8011a12:	d1fb      	bne.n	8011a0c <_malloc_r+0xdc>
 8011a14:	2300      	movs	r3, #0
 8011a16:	6053      	str	r3, [r2, #4]
 8011a18:	e7de      	b.n	80119d8 <_malloc_r+0xa8>
 8011a1a:	230c      	movs	r3, #12
 8011a1c:	6033      	str	r3, [r6, #0]
 8011a1e:	4630      	mov	r0, r6
 8011a20:	f000 f80c 	bl	8011a3c <__malloc_unlock>
 8011a24:	e794      	b.n	8011950 <_malloc_r+0x20>
 8011a26:	6005      	str	r5, [r0, #0]
 8011a28:	e7d6      	b.n	80119d8 <_malloc_r+0xa8>
 8011a2a:	bf00      	nop
 8011a2c:	240009fc 	.word	0x240009fc

08011a30 <__malloc_lock>:
 8011a30:	4801      	ldr	r0, [pc, #4]	@ (8011a38 <__malloc_lock+0x8>)
 8011a32:	f7ff bf01 	b.w	8011838 <__retarget_lock_acquire_recursive>
 8011a36:	bf00      	nop
 8011a38:	240009f4 	.word	0x240009f4

08011a3c <__malloc_unlock>:
 8011a3c:	4801      	ldr	r0, [pc, #4]	@ (8011a44 <__malloc_unlock+0x8>)
 8011a3e:	f7ff befc 	b.w	801183a <__retarget_lock_release_recursive>
 8011a42:	bf00      	nop
 8011a44:	240009f4 	.word	0x240009f4

08011a48 <__ssputs_r>:
 8011a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a4c:	688e      	ldr	r6, [r1, #8]
 8011a4e:	461f      	mov	r7, r3
 8011a50:	42be      	cmp	r6, r7
 8011a52:	680b      	ldr	r3, [r1, #0]
 8011a54:	4682      	mov	sl, r0
 8011a56:	460c      	mov	r4, r1
 8011a58:	4690      	mov	r8, r2
 8011a5a:	d82d      	bhi.n	8011ab8 <__ssputs_r+0x70>
 8011a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011a64:	d026      	beq.n	8011ab4 <__ssputs_r+0x6c>
 8011a66:	6965      	ldr	r5, [r4, #20]
 8011a68:	6909      	ldr	r1, [r1, #16]
 8011a6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a6e:	eba3 0901 	sub.w	r9, r3, r1
 8011a72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a76:	1c7b      	adds	r3, r7, #1
 8011a78:	444b      	add	r3, r9
 8011a7a:	106d      	asrs	r5, r5, #1
 8011a7c:	429d      	cmp	r5, r3
 8011a7e:	bf38      	it	cc
 8011a80:	461d      	movcc	r5, r3
 8011a82:	0553      	lsls	r3, r2, #21
 8011a84:	d527      	bpl.n	8011ad6 <__ssputs_r+0x8e>
 8011a86:	4629      	mov	r1, r5
 8011a88:	f7ff ff52 	bl	8011930 <_malloc_r>
 8011a8c:	4606      	mov	r6, r0
 8011a8e:	b360      	cbz	r0, 8011aea <__ssputs_r+0xa2>
 8011a90:	6921      	ldr	r1, [r4, #16]
 8011a92:	464a      	mov	r2, r9
 8011a94:	f7ff fed2 	bl	801183c <memcpy>
 8011a98:	89a3      	ldrh	r3, [r4, #12]
 8011a9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aa2:	81a3      	strh	r3, [r4, #12]
 8011aa4:	6126      	str	r6, [r4, #16]
 8011aa6:	6165      	str	r5, [r4, #20]
 8011aa8:	444e      	add	r6, r9
 8011aaa:	eba5 0509 	sub.w	r5, r5, r9
 8011aae:	6026      	str	r6, [r4, #0]
 8011ab0:	60a5      	str	r5, [r4, #8]
 8011ab2:	463e      	mov	r6, r7
 8011ab4:	42be      	cmp	r6, r7
 8011ab6:	d900      	bls.n	8011aba <__ssputs_r+0x72>
 8011ab8:	463e      	mov	r6, r7
 8011aba:	6820      	ldr	r0, [r4, #0]
 8011abc:	4632      	mov	r2, r6
 8011abe:	4641      	mov	r1, r8
 8011ac0:	f000 faa6 	bl	8012010 <memmove>
 8011ac4:	68a3      	ldr	r3, [r4, #8]
 8011ac6:	1b9b      	subs	r3, r3, r6
 8011ac8:	60a3      	str	r3, [r4, #8]
 8011aca:	6823      	ldr	r3, [r4, #0]
 8011acc:	4433      	add	r3, r6
 8011ace:	6023      	str	r3, [r4, #0]
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ad6:	462a      	mov	r2, r5
 8011ad8:	f000 fac4 	bl	8012064 <_realloc_r>
 8011adc:	4606      	mov	r6, r0
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	d1e0      	bne.n	8011aa4 <__ssputs_r+0x5c>
 8011ae2:	6921      	ldr	r1, [r4, #16]
 8011ae4:	4650      	mov	r0, sl
 8011ae6:	f7ff feb7 	bl	8011858 <_free_r>
 8011aea:	230c      	movs	r3, #12
 8011aec:	f8ca 3000 	str.w	r3, [sl]
 8011af0:	89a3      	ldrh	r3, [r4, #12]
 8011af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011af6:	81a3      	strh	r3, [r4, #12]
 8011af8:	f04f 30ff 	mov.w	r0, #4294967295
 8011afc:	e7e9      	b.n	8011ad2 <__ssputs_r+0x8a>
	...

08011b00 <_svfiprintf_r>:
 8011b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b04:	4698      	mov	r8, r3
 8011b06:	898b      	ldrh	r3, [r1, #12]
 8011b08:	061b      	lsls	r3, r3, #24
 8011b0a:	b09d      	sub	sp, #116	@ 0x74
 8011b0c:	4607      	mov	r7, r0
 8011b0e:	460d      	mov	r5, r1
 8011b10:	4614      	mov	r4, r2
 8011b12:	d510      	bpl.n	8011b36 <_svfiprintf_r+0x36>
 8011b14:	690b      	ldr	r3, [r1, #16]
 8011b16:	b973      	cbnz	r3, 8011b36 <_svfiprintf_r+0x36>
 8011b18:	2140      	movs	r1, #64	@ 0x40
 8011b1a:	f7ff ff09 	bl	8011930 <_malloc_r>
 8011b1e:	6028      	str	r0, [r5, #0]
 8011b20:	6128      	str	r0, [r5, #16]
 8011b22:	b930      	cbnz	r0, 8011b32 <_svfiprintf_r+0x32>
 8011b24:	230c      	movs	r3, #12
 8011b26:	603b      	str	r3, [r7, #0]
 8011b28:	f04f 30ff 	mov.w	r0, #4294967295
 8011b2c:	b01d      	add	sp, #116	@ 0x74
 8011b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b32:	2340      	movs	r3, #64	@ 0x40
 8011b34:	616b      	str	r3, [r5, #20]
 8011b36:	2300      	movs	r3, #0
 8011b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b3a:	2320      	movs	r3, #32
 8011b3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b44:	2330      	movs	r3, #48	@ 0x30
 8011b46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011ce4 <_svfiprintf_r+0x1e4>
 8011b4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b4e:	f04f 0901 	mov.w	r9, #1
 8011b52:	4623      	mov	r3, r4
 8011b54:	469a      	mov	sl, r3
 8011b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b5a:	b10a      	cbz	r2, 8011b60 <_svfiprintf_r+0x60>
 8011b5c:	2a25      	cmp	r2, #37	@ 0x25
 8011b5e:	d1f9      	bne.n	8011b54 <_svfiprintf_r+0x54>
 8011b60:	ebba 0b04 	subs.w	fp, sl, r4
 8011b64:	d00b      	beq.n	8011b7e <_svfiprintf_r+0x7e>
 8011b66:	465b      	mov	r3, fp
 8011b68:	4622      	mov	r2, r4
 8011b6a:	4629      	mov	r1, r5
 8011b6c:	4638      	mov	r0, r7
 8011b6e:	f7ff ff6b 	bl	8011a48 <__ssputs_r>
 8011b72:	3001      	adds	r0, #1
 8011b74:	f000 80a7 	beq.w	8011cc6 <_svfiprintf_r+0x1c6>
 8011b78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b7a:	445a      	add	r2, fp
 8011b7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	f000 809f 	beq.w	8011cc6 <_svfiprintf_r+0x1c6>
 8011b88:	2300      	movs	r3, #0
 8011b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b92:	f10a 0a01 	add.w	sl, sl, #1
 8011b96:	9304      	str	r3, [sp, #16]
 8011b98:	9307      	str	r3, [sp, #28]
 8011b9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ba0:	4654      	mov	r4, sl
 8011ba2:	2205      	movs	r2, #5
 8011ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ba8:	484e      	ldr	r0, [pc, #312]	@ (8011ce4 <_svfiprintf_r+0x1e4>)
 8011baa:	f7ee fbb9 	bl	8000320 <memchr>
 8011bae:	9a04      	ldr	r2, [sp, #16]
 8011bb0:	b9d8      	cbnz	r0, 8011bea <_svfiprintf_r+0xea>
 8011bb2:	06d0      	lsls	r0, r2, #27
 8011bb4:	bf44      	itt	mi
 8011bb6:	2320      	movmi	r3, #32
 8011bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bbc:	0711      	lsls	r1, r2, #28
 8011bbe:	bf44      	itt	mi
 8011bc0:	232b      	movmi	r3, #43	@ 0x2b
 8011bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8011bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bcc:	d015      	beq.n	8011bfa <_svfiprintf_r+0xfa>
 8011bce:	9a07      	ldr	r2, [sp, #28]
 8011bd0:	4654      	mov	r4, sl
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	f04f 0c0a 	mov.w	ip, #10
 8011bd8:	4621      	mov	r1, r4
 8011bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bde:	3b30      	subs	r3, #48	@ 0x30
 8011be0:	2b09      	cmp	r3, #9
 8011be2:	d94b      	bls.n	8011c7c <_svfiprintf_r+0x17c>
 8011be4:	b1b0      	cbz	r0, 8011c14 <_svfiprintf_r+0x114>
 8011be6:	9207      	str	r2, [sp, #28]
 8011be8:	e014      	b.n	8011c14 <_svfiprintf_r+0x114>
 8011bea:	eba0 0308 	sub.w	r3, r0, r8
 8011bee:	fa09 f303 	lsl.w	r3, r9, r3
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	9304      	str	r3, [sp, #16]
 8011bf6:	46a2      	mov	sl, r4
 8011bf8:	e7d2      	b.n	8011ba0 <_svfiprintf_r+0xa0>
 8011bfa:	9b03      	ldr	r3, [sp, #12]
 8011bfc:	1d19      	adds	r1, r3, #4
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	9103      	str	r1, [sp, #12]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	bfbb      	ittet	lt
 8011c06:	425b      	neglt	r3, r3
 8011c08:	f042 0202 	orrlt.w	r2, r2, #2
 8011c0c:	9307      	strge	r3, [sp, #28]
 8011c0e:	9307      	strlt	r3, [sp, #28]
 8011c10:	bfb8      	it	lt
 8011c12:	9204      	strlt	r2, [sp, #16]
 8011c14:	7823      	ldrb	r3, [r4, #0]
 8011c16:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c18:	d10a      	bne.n	8011c30 <_svfiprintf_r+0x130>
 8011c1a:	7863      	ldrb	r3, [r4, #1]
 8011c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c1e:	d132      	bne.n	8011c86 <_svfiprintf_r+0x186>
 8011c20:	9b03      	ldr	r3, [sp, #12]
 8011c22:	1d1a      	adds	r2, r3, #4
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	9203      	str	r2, [sp, #12]
 8011c28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c2c:	3402      	adds	r4, #2
 8011c2e:	9305      	str	r3, [sp, #20]
 8011c30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011cf4 <_svfiprintf_r+0x1f4>
 8011c34:	7821      	ldrb	r1, [r4, #0]
 8011c36:	2203      	movs	r2, #3
 8011c38:	4650      	mov	r0, sl
 8011c3a:	f7ee fb71 	bl	8000320 <memchr>
 8011c3e:	b138      	cbz	r0, 8011c50 <_svfiprintf_r+0x150>
 8011c40:	9b04      	ldr	r3, [sp, #16]
 8011c42:	eba0 000a 	sub.w	r0, r0, sl
 8011c46:	2240      	movs	r2, #64	@ 0x40
 8011c48:	4082      	lsls	r2, r0
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	3401      	adds	r4, #1
 8011c4e:	9304      	str	r3, [sp, #16]
 8011c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c54:	4824      	ldr	r0, [pc, #144]	@ (8011ce8 <_svfiprintf_r+0x1e8>)
 8011c56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c5a:	2206      	movs	r2, #6
 8011c5c:	f7ee fb60 	bl	8000320 <memchr>
 8011c60:	2800      	cmp	r0, #0
 8011c62:	d036      	beq.n	8011cd2 <_svfiprintf_r+0x1d2>
 8011c64:	4b21      	ldr	r3, [pc, #132]	@ (8011cec <_svfiprintf_r+0x1ec>)
 8011c66:	bb1b      	cbnz	r3, 8011cb0 <_svfiprintf_r+0x1b0>
 8011c68:	9b03      	ldr	r3, [sp, #12]
 8011c6a:	3307      	adds	r3, #7
 8011c6c:	f023 0307 	bic.w	r3, r3, #7
 8011c70:	3308      	adds	r3, #8
 8011c72:	9303      	str	r3, [sp, #12]
 8011c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c76:	4433      	add	r3, r6
 8011c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c7a:	e76a      	b.n	8011b52 <_svfiprintf_r+0x52>
 8011c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c80:	460c      	mov	r4, r1
 8011c82:	2001      	movs	r0, #1
 8011c84:	e7a8      	b.n	8011bd8 <_svfiprintf_r+0xd8>
 8011c86:	2300      	movs	r3, #0
 8011c88:	3401      	adds	r4, #1
 8011c8a:	9305      	str	r3, [sp, #20]
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	f04f 0c0a 	mov.w	ip, #10
 8011c92:	4620      	mov	r0, r4
 8011c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c98:	3a30      	subs	r2, #48	@ 0x30
 8011c9a:	2a09      	cmp	r2, #9
 8011c9c:	d903      	bls.n	8011ca6 <_svfiprintf_r+0x1a6>
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d0c6      	beq.n	8011c30 <_svfiprintf_r+0x130>
 8011ca2:	9105      	str	r1, [sp, #20]
 8011ca4:	e7c4      	b.n	8011c30 <_svfiprintf_r+0x130>
 8011ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011caa:	4604      	mov	r4, r0
 8011cac:	2301      	movs	r3, #1
 8011cae:	e7f0      	b.n	8011c92 <_svfiprintf_r+0x192>
 8011cb0:	ab03      	add	r3, sp, #12
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	462a      	mov	r2, r5
 8011cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8011cf0 <_svfiprintf_r+0x1f0>)
 8011cb8:	a904      	add	r1, sp, #16
 8011cba:	4638      	mov	r0, r7
 8011cbc:	f3af 8000 	nop.w
 8011cc0:	1c42      	adds	r2, r0, #1
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	d1d6      	bne.n	8011c74 <_svfiprintf_r+0x174>
 8011cc6:	89ab      	ldrh	r3, [r5, #12]
 8011cc8:	065b      	lsls	r3, r3, #25
 8011cca:	f53f af2d 	bmi.w	8011b28 <_svfiprintf_r+0x28>
 8011cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cd0:	e72c      	b.n	8011b2c <_svfiprintf_r+0x2c>
 8011cd2:	ab03      	add	r3, sp, #12
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	462a      	mov	r2, r5
 8011cd8:	4b05      	ldr	r3, [pc, #20]	@ (8011cf0 <_svfiprintf_r+0x1f0>)
 8011cda:	a904      	add	r1, sp, #16
 8011cdc:	4638      	mov	r0, r7
 8011cde:	f000 f879 	bl	8011dd4 <_printf_i>
 8011ce2:	e7ed      	b.n	8011cc0 <_svfiprintf_r+0x1c0>
 8011ce4:	08012450 	.word	0x08012450
 8011ce8:	0801245a 	.word	0x0801245a
 8011cec:	00000000 	.word	0x00000000
 8011cf0:	08011a49 	.word	0x08011a49
 8011cf4:	08012456 	.word	0x08012456

08011cf8 <_printf_common>:
 8011cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cfc:	4616      	mov	r6, r2
 8011cfe:	4698      	mov	r8, r3
 8011d00:	688a      	ldr	r2, [r1, #8]
 8011d02:	690b      	ldr	r3, [r1, #16]
 8011d04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	bfb8      	it	lt
 8011d0c:	4613      	movlt	r3, r2
 8011d0e:	6033      	str	r3, [r6, #0]
 8011d10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011d14:	4607      	mov	r7, r0
 8011d16:	460c      	mov	r4, r1
 8011d18:	b10a      	cbz	r2, 8011d1e <_printf_common+0x26>
 8011d1a:	3301      	adds	r3, #1
 8011d1c:	6033      	str	r3, [r6, #0]
 8011d1e:	6823      	ldr	r3, [r4, #0]
 8011d20:	0699      	lsls	r1, r3, #26
 8011d22:	bf42      	ittt	mi
 8011d24:	6833      	ldrmi	r3, [r6, #0]
 8011d26:	3302      	addmi	r3, #2
 8011d28:	6033      	strmi	r3, [r6, #0]
 8011d2a:	6825      	ldr	r5, [r4, #0]
 8011d2c:	f015 0506 	ands.w	r5, r5, #6
 8011d30:	d106      	bne.n	8011d40 <_printf_common+0x48>
 8011d32:	f104 0a19 	add.w	sl, r4, #25
 8011d36:	68e3      	ldr	r3, [r4, #12]
 8011d38:	6832      	ldr	r2, [r6, #0]
 8011d3a:	1a9b      	subs	r3, r3, r2
 8011d3c:	42ab      	cmp	r3, r5
 8011d3e:	dc26      	bgt.n	8011d8e <_printf_common+0x96>
 8011d40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011d44:	6822      	ldr	r2, [r4, #0]
 8011d46:	3b00      	subs	r3, #0
 8011d48:	bf18      	it	ne
 8011d4a:	2301      	movne	r3, #1
 8011d4c:	0692      	lsls	r2, r2, #26
 8011d4e:	d42b      	bmi.n	8011da8 <_printf_common+0xb0>
 8011d50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011d54:	4641      	mov	r1, r8
 8011d56:	4638      	mov	r0, r7
 8011d58:	47c8      	blx	r9
 8011d5a:	3001      	adds	r0, #1
 8011d5c:	d01e      	beq.n	8011d9c <_printf_common+0xa4>
 8011d5e:	6823      	ldr	r3, [r4, #0]
 8011d60:	6922      	ldr	r2, [r4, #16]
 8011d62:	f003 0306 	and.w	r3, r3, #6
 8011d66:	2b04      	cmp	r3, #4
 8011d68:	bf02      	ittt	eq
 8011d6a:	68e5      	ldreq	r5, [r4, #12]
 8011d6c:	6833      	ldreq	r3, [r6, #0]
 8011d6e:	1aed      	subeq	r5, r5, r3
 8011d70:	68a3      	ldr	r3, [r4, #8]
 8011d72:	bf0c      	ite	eq
 8011d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d78:	2500      	movne	r5, #0
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	bfc4      	itt	gt
 8011d7e:	1a9b      	subgt	r3, r3, r2
 8011d80:	18ed      	addgt	r5, r5, r3
 8011d82:	2600      	movs	r6, #0
 8011d84:	341a      	adds	r4, #26
 8011d86:	42b5      	cmp	r5, r6
 8011d88:	d11a      	bne.n	8011dc0 <_printf_common+0xc8>
 8011d8a:	2000      	movs	r0, #0
 8011d8c:	e008      	b.n	8011da0 <_printf_common+0xa8>
 8011d8e:	2301      	movs	r3, #1
 8011d90:	4652      	mov	r2, sl
 8011d92:	4641      	mov	r1, r8
 8011d94:	4638      	mov	r0, r7
 8011d96:	47c8      	blx	r9
 8011d98:	3001      	adds	r0, #1
 8011d9a:	d103      	bne.n	8011da4 <_printf_common+0xac>
 8011d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011da4:	3501      	adds	r5, #1
 8011da6:	e7c6      	b.n	8011d36 <_printf_common+0x3e>
 8011da8:	18e1      	adds	r1, r4, r3
 8011daa:	1c5a      	adds	r2, r3, #1
 8011dac:	2030      	movs	r0, #48	@ 0x30
 8011dae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011db2:	4422      	add	r2, r4
 8011db4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011db8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011dbc:	3302      	adds	r3, #2
 8011dbe:	e7c7      	b.n	8011d50 <_printf_common+0x58>
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	4622      	mov	r2, r4
 8011dc4:	4641      	mov	r1, r8
 8011dc6:	4638      	mov	r0, r7
 8011dc8:	47c8      	blx	r9
 8011dca:	3001      	adds	r0, #1
 8011dcc:	d0e6      	beq.n	8011d9c <_printf_common+0xa4>
 8011dce:	3601      	adds	r6, #1
 8011dd0:	e7d9      	b.n	8011d86 <_printf_common+0x8e>
	...

08011dd4 <_printf_i>:
 8011dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd8:	7e0f      	ldrb	r7, [r1, #24]
 8011dda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011ddc:	2f78      	cmp	r7, #120	@ 0x78
 8011dde:	4691      	mov	r9, r2
 8011de0:	4680      	mov	r8, r0
 8011de2:	460c      	mov	r4, r1
 8011de4:	469a      	mov	sl, r3
 8011de6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011dea:	d807      	bhi.n	8011dfc <_printf_i+0x28>
 8011dec:	2f62      	cmp	r7, #98	@ 0x62
 8011dee:	d80a      	bhi.n	8011e06 <_printf_i+0x32>
 8011df0:	2f00      	cmp	r7, #0
 8011df2:	f000 80d1 	beq.w	8011f98 <_printf_i+0x1c4>
 8011df6:	2f58      	cmp	r7, #88	@ 0x58
 8011df8:	f000 80b8 	beq.w	8011f6c <_printf_i+0x198>
 8011dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011e04:	e03a      	b.n	8011e7c <_printf_i+0xa8>
 8011e06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011e0a:	2b15      	cmp	r3, #21
 8011e0c:	d8f6      	bhi.n	8011dfc <_printf_i+0x28>
 8011e0e:	a101      	add	r1, pc, #4	@ (adr r1, 8011e14 <_printf_i+0x40>)
 8011e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e14:	08011e6d 	.word	0x08011e6d
 8011e18:	08011e81 	.word	0x08011e81
 8011e1c:	08011dfd 	.word	0x08011dfd
 8011e20:	08011dfd 	.word	0x08011dfd
 8011e24:	08011dfd 	.word	0x08011dfd
 8011e28:	08011dfd 	.word	0x08011dfd
 8011e2c:	08011e81 	.word	0x08011e81
 8011e30:	08011dfd 	.word	0x08011dfd
 8011e34:	08011dfd 	.word	0x08011dfd
 8011e38:	08011dfd 	.word	0x08011dfd
 8011e3c:	08011dfd 	.word	0x08011dfd
 8011e40:	08011f7f 	.word	0x08011f7f
 8011e44:	08011eab 	.word	0x08011eab
 8011e48:	08011f39 	.word	0x08011f39
 8011e4c:	08011dfd 	.word	0x08011dfd
 8011e50:	08011dfd 	.word	0x08011dfd
 8011e54:	08011fa1 	.word	0x08011fa1
 8011e58:	08011dfd 	.word	0x08011dfd
 8011e5c:	08011eab 	.word	0x08011eab
 8011e60:	08011dfd 	.word	0x08011dfd
 8011e64:	08011dfd 	.word	0x08011dfd
 8011e68:	08011f41 	.word	0x08011f41
 8011e6c:	6833      	ldr	r3, [r6, #0]
 8011e6e:	1d1a      	adds	r2, r3, #4
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	6032      	str	r2, [r6, #0]
 8011e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e09c      	b.n	8011fba <_printf_i+0x1e6>
 8011e80:	6833      	ldr	r3, [r6, #0]
 8011e82:	6820      	ldr	r0, [r4, #0]
 8011e84:	1d19      	adds	r1, r3, #4
 8011e86:	6031      	str	r1, [r6, #0]
 8011e88:	0606      	lsls	r6, r0, #24
 8011e8a:	d501      	bpl.n	8011e90 <_printf_i+0xbc>
 8011e8c:	681d      	ldr	r5, [r3, #0]
 8011e8e:	e003      	b.n	8011e98 <_printf_i+0xc4>
 8011e90:	0645      	lsls	r5, r0, #25
 8011e92:	d5fb      	bpl.n	8011e8c <_printf_i+0xb8>
 8011e94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011e98:	2d00      	cmp	r5, #0
 8011e9a:	da03      	bge.n	8011ea4 <_printf_i+0xd0>
 8011e9c:	232d      	movs	r3, #45	@ 0x2d
 8011e9e:	426d      	negs	r5, r5
 8011ea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ea4:	4858      	ldr	r0, [pc, #352]	@ (8012008 <_printf_i+0x234>)
 8011ea6:	230a      	movs	r3, #10
 8011ea8:	e011      	b.n	8011ece <_printf_i+0xfa>
 8011eaa:	6821      	ldr	r1, [r4, #0]
 8011eac:	6833      	ldr	r3, [r6, #0]
 8011eae:	0608      	lsls	r0, r1, #24
 8011eb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8011eb4:	d402      	bmi.n	8011ebc <_printf_i+0xe8>
 8011eb6:	0649      	lsls	r1, r1, #25
 8011eb8:	bf48      	it	mi
 8011eba:	b2ad      	uxthmi	r5, r5
 8011ebc:	2f6f      	cmp	r7, #111	@ 0x6f
 8011ebe:	4852      	ldr	r0, [pc, #328]	@ (8012008 <_printf_i+0x234>)
 8011ec0:	6033      	str	r3, [r6, #0]
 8011ec2:	bf14      	ite	ne
 8011ec4:	230a      	movne	r3, #10
 8011ec6:	2308      	moveq	r3, #8
 8011ec8:	2100      	movs	r1, #0
 8011eca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011ece:	6866      	ldr	r6, [r4, #4]
 8011ed0:	60a6      	str	r6, [r4, #8]
 8011ed2:	2e00      	cmp	r6, #0
 8011ed4:	db05      	blt.n	8011ee2 <_printf_i+0x10e>
 8011ed6:	6821      	ldr	r1, [r4, #0]
 8011ed8:	432e      	orrs	r6, r5
 8011eda:	f021 0104 	bic.w	r1, r1, #4
 8011ede:	6021      	str	r1, [r4, #0]
 8011ee0:	d04b      	beq.n	8011f7a <_printf_i+0x1a6>
 8011ee2:	4616      	mov	r6, r2
 8011ee4:	fbb5 f1f3 	udiv	r1, r5, r3
 8011ee8:	fb03 5711 	mls	r7, r3, r1, r5
 8011eec:	5dc7      	ldrb	r7, [r0, r7]
 8011eee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011ef2:	462f      	mov	r7, r5
 8011ef4:	42bb      	cmp	r3, r7
 8011ef6:	460d      	mov	r5, r1
 8011ef8:	d9f4      	bls.n	8011ee4 <_printf_i+0x110>
 8011efa:	2b08      	cmp	r3, #8
 8011efc:	d10b      	bne.n	8011f16 <_printf_i+0x142>
 8011efe:	6823      	ldr	r3, [r4, #0]
 8011f00:	07df      	lsls	r7, r3, #31
 8011f02:	d508      	bpl.n	8011f16 <_printf_i+0x142>
 8011f04:	6923      	ldr	r3, [r4, #16]
 8011f06:	6861      	ldr	r1, [r4, #4]
 8011f08:	4299      	cmp	r1, r3
 8011f0a:	bfde      	ittt	le
 8011f0c:	2330      	movle	r3, #48	@ 0x30
 8011f0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f16:	1b92      	subs	r2, r2, r6
 8011f18:	6122      	str	r2, [r4, #16]
 8011f1a:	f8cd a000 	str.w	sl, [sp]
 8011f1e:	464b      	mov	r3, r9
 8011f20:	aa03      	add	r2, sp, #12
 8011f22:	4621      	mov	r1, r4
 8011f24:	4640      	mov	r0, r8
 8011f26:	f7ff fee7 	bl	8011cf8 <_printf_common>
 8011f2a:	3001      	adds	r0, #1
 8011f2c:	d14a      	bne.n	8011fc4 <_printf_i+0x1f0>
 8011f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f32:	b004      	add	sp, #16
 8011f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f38:	6823      	ldr	r3, [r4, #0]
 8011f3a:	f043 0320 	orr.w	r3, r3, #32
 8011f3e:	6023      	str	r3, [r4, #0]
 8011f40:	4832      	ldr	r0, [pc, #200]	@ (801200c <_printf_i+0x238>)
 8011f42:	2778      	movs	r7, #120	@ 0x78
 8011f44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011f48:	6823      	ldr	r3, [r4, #0]
 8011f4a:	6831      	ldr	r1, [r6, #0]
 8011f4c:	061f      	lsls	r7, r3, #24
 8011f4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8011f52:	d402      	bmi.n	8011f5a <_printf_i+0x186>
 8011f54:	065f      	lsls	r7, r3, #25
 8011f56:	bf48      	it	mi
 8011f58:	b2ad      	uxthmi	r5, r5
 8011f5a:	6031      	str	r1, [r6, #0]
 8011f5c:	07d9      	lsls	r1, r3, #31
 8011f5e:	bf44      	itt	mi
 8011f60:	f043 0320 	orrmi.w	r3, r3, #32
 8011f64:	6023      	strmi	r3, [r4, #0]
 8011f66:	b11d      	cbz	r5, 8011f70 <_printf_i+0x19c>
 8011f68:	2310      	movs	r3, #16
 8011f6a:	e7ad      	b.n	8011ec8 <_printf_i+0xf4>
 8011f6c:	4826      	ldr	r0, [pc, #152]	@ (8012008 <_printf_i+0x234>)
 8011f6e:	e7e9      	b.n	8011f44 <_printf_i+0x170>
 8011f70:	6823      	ldr	r3, [r4, #0]
 8011f72:	f023 0320 	bic.w	r3, r3, #32
 8011f76:	6023      	str	r3, [r4, #0]
 8011f78:	e7f6      	b.n	8011f68 <_printf_i+0x194>
 8011f7a:	4616      	mov	r6, r2
 8011f7c:	e7bd      	b.n	8011efa <_printf_i+0x126>
 8011f7e:	6833      	ldr	r3, [r6, #0]
 8011f80:	6825      	ldr	r5, [r4, #0]
 8011f82:	6961      	ldr	r1, [r4, #20]
 8011f84:	1d18      	adds	r0, r3, #4
 8011f86:	6030      	str	r0, [r6, #0]
 8011f88:	062e      	lsls	r6, r5, #24
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	d501      	bpl.n	8011f92 <_printf_i+0x1be>
 8011f8e:	6019      	str	r1, [r3, #0]
 8011f90:	e002      	b.n	8011f98 <_printf_i+0x1c4>
 8011f92:	0668      	lsls	r0, r5, #25
 8011f94:	d5fb      	bpl.n	8011f8e <_printf_i+0x1ba>
 8011f96:	8019      	strh	r1, [r3, #0]
 8011f98:	2300      	movs	r3, #0
 8011f9a:	6123      	str	r3, [r4, #16]
 8011f9c:	4616      	mov	r6, r2
 8011f9e:	e7bc      	b.n	8011f1a <_printf_i+0x146>
 8011fa0:	6833      	ldr	r3, [r6, #0]
 8011fa2:	1d1a      	adds	r2, r3, #4
 8011fa4:	6032      	str	r2, [r6, #0]
 8011fa6:	681e      	ldr	r6, [r3, #0]
 8011fa8:	6862      	ldr	r2, [r4, #4]
 8011faa:	2100      	movs	r1, #0
 8011fac:	4630      	mov	r0, r6
 8011fae:	f7ee f9b7 	bl	8000320 <memchr>
 8011fb2:	b108      	cbz	r0, 8011fb8 <_printf_i+0x1e4>
 8011fb4:	1b80      	subs	r0, r0, r6
 8011fb6:	6060      	str	r0, [r4, #4]
 8011fb8:	6863      	ldr	r3, [r4, #4]
 8011fba:	6123      	str	r3, [r4, #16]
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011fc2:	e7aa      	b.n	8011f1a <_printf_i+0x146>
 8011fc4:	6923      	ldr	r3, [r4, #16]
 8011fc6:	4632      	mov	r2, r6
 8011fc8:	4649      	mov	r1, r9
 8011fca:	4640      	mov	r0, r8
 8011fcc:	47d0      	blx	sl
 8011fce:	3001      	adds	r0, #1
 8011fd0:	d0ad      	beq.n	8011f2e <_printf_i+0x15a>
 8011fd2:	6823      	ldr	r3, [r4, #0]
 8011fd4:	079b      	lsls	r3, r3, #30
 8011fd6:	d413      	bmi.n	8012000 <_printf_i+0x22c>
 8011fd8:	68e0      	ldr	r0, [r4, #12]
 8011fda:	9b03      	ldr	r3, [sp, #12]
 8011fdc:	4298      	cmp	r0, r3
 8011fde:	bfb8      	it	lt
 8011fe0:	4618      	movlt	r0, r3
 8011fe2:	e7a6      	b.n	8011f32 <_printf_i+0x15e>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	4632      	mov	r2, r6
 8011fe8:	4649      	mov	r1, r9
 8011fea:	4640      	mov	r0, r8
 8011fec:	47d0      	blx	sl
 8011fee:	3001      	adds	r0, #1
 8011ff0:	d09d      	beq.n	8011f2e <_printf_i+0x15a>
 8011ff2:	3501      	adds	r5, #1
 8011ff4:	68e3      	ldr	r3, [r4, #12]
 8011ff6:	9903      	ldr	r1, [sp, #12]
 8011ff8:	1a5b      	subs	r3, r3, r1
 8011ffa:	42ab      	cmp	r3, r5
 8011ffc:	dcf2      	bgt.n	8011fe4 <_printf_i+0x210>
 8011ffe:	e7eb      	b.n	8011fd8 <_printf_i+0x204>
 8012000:	2500      	movs	r5, #0
 8012002:	f104 0619 	add.w	r6, r4, #25
 8012006:	e7f5      	b.n	8011ff4 <_printf_i+0x220>
 8012008:	08012461 	.word	0x08012461
 801200c:	08012472 	.word	0x08012472

08012010 <memmove>:
 8012010:	4288      	cmp	r0, r1
 8012012:	b510      	push	{r4, lr}
 8012014:	eb01 0402 	add.w	r4, r1, r2
 8012018:	d902      	bls.n	8012020 <memmove+0x10>
 801201a:	4284      	cmp	r4, r0
 801201c:	4623      	mov	r3, r4
 801201e:	d807      	bhi.n	8012030 <memmove+0x20>
 8012020:	1e43      	subs	r3, r0, #1
 8012022:	42a1      	cmp	r1, r4
 8012024:	d008      	beq.n	8012038 <memmove+0x28>
 8012026:	f811 2b01 	ldrb.w	r2, [r1], #1
 801202a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801202e:	e7f8      	b.n	8012022 <memmove+0x12>
 8012030:	4402      	add	r2, r0
 8012032:	4601      	mov	r1, r0
 8012034:	428a      	cmp	r2, r1
 8012036:	d100      	bne.n	801203a <memmove+0x2a>
 8012038:	bd10      	pop	{r4, pc}
 801203a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801203e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012042:	e7f7      	b.n	8012034 <memmove+0x24>

08012044 <_sbrk_r>:
 8012044:	b538      	push	{r3, r4, r5, lr}
 8012046:	4d06      	ldr	r5, [pc, #24]	@ (8012060 <_sbrk_r+0x1c>)
 8012048:	2300      	movs	r3, #0
 801204a:	4604      	mov	r4, r0
 801204c:	4608      	mov	r0, r1
 801204e:	602b      	str	r3, [r5, #0]
 8012050:	f7f0 fbda 	bl	8002808 <_sbrk>
 8012054:	1c43      	adds	r3, r0, #1
 8012056:	d102      	bne.n	801205e <_sbrk_r+0x1a>
 8012058:	682b      	ldr	r3, [r5, #0]
 801205a:	b103      	cbz	r3, 801205e <_sbrk_r+0x1a>
 801205c:	6023      	str	r3, [r4, #0]
 801205e:	bd38      	pop	{r3, r4, r5, pc}
 8012060:	240009f0 	.word	0x240009f0

08012064 <_realloc_r>:
 8012064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012068:	4607      	mov	r7, r0
 801206a:	4614      	mov	r4, r2
 801206c:	460d      	mov	r5, r1
 801206e:	b921      	cbnz	r1, 801207a <_realloc_r+0x16>
 8012070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012074:	4611      	mov	r1, r2
 8012076:	f7ff bc5b 	b.w	8011930 <_malloc_r>
 801207a:	b92a      	cbnz	r2, 8012088 <_realloc_r+0x24>
 801207c:	f7ff fbec 	bl	8011858 <_free_r>
 8012080:	4625      	mov	r5, r4
 8012082:	4628      	mov	r0, r5
 8012084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012088:	f000 f81a 	bl	80120c0 <_malloc_usable_size_r>
 801208c:	4284      	cmp	r4, r0
 801208e:	4606      	mov	r6, r0
 8012090:	d802      	bhi.n	8012098 <_realloc_r+0x34>
 8012092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012096:	d8f4      	bhi.n	8012082 <_realloc_r+0x1e>
 8012098:	4621      	mov	r1, r4
 801209a:	4638      	mov	r0, r7
 801209c:	f7ff fc48 	bl	8011930 <_malloc_r>
 80120a0:	4680      	mov	r8, r0
 80120a2:	b908      	cbnz	r0, 80120a8 <_realloc_r+0x44>
 80120a4:	4645      	mov	r5, r8
 80120a6:	e7ec      	b.n	8012082 <_realloc_r+0x1e>
 80120a8:	42b4      	cmp	r4, r6
 80120aa:	4622      	mov	r2, r4
 80120ac:	4629      	mov	r1, r5
 80120ae:	bf28      	it	cs
 80120b0:	4632      	movcs	r2, r6
 80120b2:	f7ff fbc3 	bl	801183c <memcpy>
 80120b6:	4629      	mov	r1, r5
 80120b8:	4638      	mov	r0, r7
 80120ba:	f7ff fbcd 	bl	8011858 <_free_r>
 80120be:	e7f1      	b.n	80120a4 <_realloc_r+0x40>

080120c0 <_malloc_usable_size_r>:
 80120c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120c4:	1f18      	subs	r0, r3, #4
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	bfbc      	itt	lt
 80120ca:	580b      	ldrlt	r3, [r1, r0]
 80120cc:	18c0      	addlt	r0, r0, r3
 80120ce:	4770      	bx	lr

080120d0 <_init>:
 80120d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d2:	bf00      	nop
 80120d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120d6:	bc08      	pop	{r3}
 80120d8:	469e      	mov	lr, r3
 80120da:	4770      	bx	lr

080120dc <_fini>:
 80120dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120de:	bf00      	nop
 80120e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120e2:	bc08      	pop	{r3}
 80120e4:	469e      	mov	lr, r3
 80120e6:	4770      	bx	lr
