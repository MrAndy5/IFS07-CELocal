
NEW FHUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005250  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c4  080054c4  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080054c4  080054c4  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080054c4  080054c4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c4  080054c4  000064c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054c8  080054c8  000064c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080054cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  080054d8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080054d8  00007194  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4c6  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7e  00000000  00000000  00016508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00017f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b4  00000000  00000000  00018c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aaa2  00000000  00000000  0001961c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2da  00000000  00000000  000440be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116a93  00000000  00000000  00052398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003734  00000000  00000000  00168e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0016c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	0800548c 	.word	0x0800548c

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	0800548c 	.word	0x0800548c

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fc7c 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f87e 	bl	800039c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002a0:	f000 f8f2 	bl	8000488 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 fa32 	bl	800070c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002a8:	f000 f9ea 	bl	8000680 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 80002ac:	f000 f920 	bl	80004f0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002b0:	f000 f982 	bl	80005b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate ADCs for better accuracy
  	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80002b4:	217f      	movs	r1, #127	@ 0x7f
 80002b6:	4832      	ldr	r0, [pc, #200]	@ (8000380 <main+0xec>)
 80002b8:	f002 f8cc 	bl	8002454 <HAL_ADCEx_Calibration_Start>
  	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80002bc:	217f      	movs	r1, #127	@ 0x7f
 80002be:	4831      	ldr	r0, [pc, #196]	@ (8000384 <main+0xf0>)
 80002c0:	f002 f8c8 	bl	8002454 <HAL_ADCEx_Calibration_Start>

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80002c4:	4830      	ldr	r0, [pc, #192]	@ (8000388 <main+0xf4>)
 80002c6:	f002 fbe5 	bl	8002a94 <HAL_FDCAN_Start>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <main+0x40>
		Error_Handler();
 80002d0:	f000 fa86 	bl	80007e0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		ADC_Select_S1();
 80002d4:	f000 fa34 	bl	8000740 <ADC_Select_S1>
		HAL_ADC_Start(&hadc1);
 80002d8:	4829      	ldr	r0, [pc, #164]	@ (8000380 <main+0xec>)
 80002da:	f001 f90d 	bl	80014f8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002de:	f04f 31ff 	mov.w	r1, #4294967295
 80002e2:	4827      	ldr	r0, [pc, #156]	@ (8000380 <main+0xec>)
 80002e4:	f001 f9f6 	bl	80016d4 <HAL_ADC_PollForConversion>
		s1_aceleracion = HAL_ADC_GetValue(&hadc1);
 80002e8:	4825      	ldr	r0, [pc, #148]	@ (8000380 <main+0xec>)
 80002ea:	f001 facb 	bl	8001884 <HAL_ADC_GetValue>
 80002ee:	4603      	mov	r3, r0
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	4b26      	ldr	r3, [pc, #152]	@ (800038c <main+0xf8>)
 80002f4:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80002f6:	4822      	ldr	r0, [pc, #136]	@ (8000380 <main+0xec>)
 80002f8:	f001 f9b8 	bl	800166c <HAL_ADC_Stop>

		ADC_Select_S2();
 80002fc:	f000 fa48 	bl	8000790 <ADC_Select_S2>
		HAL_ADC_Start(&hadc1);
 8000300:	481f      	ldr	r0, [pc, #124]	@ (8000380 <main+0xec>)
 8000302:	f001 f8f9 	bl	80014f8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000306:	f04f 31ff 	mov.w	r1, #4294967295
 800030a:	481d      	ldr	r0, [pc, #116]	@ (8000380 <main+0xec>)
 800030c:	f001 f9e2 	bl	80016d4 <HAL_ADC_PollForConversion>
		s2_aceleracion = HAL_ADC_GetValue(&hadc1);
 8000310:	481b      	ldr	r0, [pc, #108]	@ (8000380 <main+0xec>)
 8000312:	f001 fab7 	bl	8001884 <HAL_ADC_GetValue>
 8000316:	4603      	mov	r3, r0
 8000318:	b29a      	uxth	r2, r3
 800031a:	4b1d      	ldr	r3, [pc, #116]	@ (8000390 <main+0xfc>)
 800031c:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 800031e:	4818      	ldr	r0, [pc, #96]	@ (8000380 <main+0xec>)
 8000320:	f001 f9a4 	bl	800166c <HAL_ADC_Stop>


		TxHeader.Identifier = 0x133;
 8000324:	4b1b      	ldr	r3, [pc, #108]	@ (8000394 <main+0x100>)
 8000326:	f240 1233 	movw	r2, #307	@ 0x133
 800032a:	601a      	str	r2, [r3, #0]
		TxHeader.DataLength = 6;
 800032c:	4b19      	ldr	r3, [pc, #100]	@ (8000394 <main+0x100>)
 800032e:	2206      	movs	r2, #6
 8000330:	60da      	str	r2, [r3, #12]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8000332:	4b18      	ldr	r3, [pc, #96]	@ (8000394 <main+0x100>)
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
		TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000338:	4b16      	ldr	r3, [pc, #88]	@ (8000394 <main+0x100>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800033e:	4b15      	ldr	r3, [pc, #84]	@ (8000394 <main+0x100>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]

		TxData[0] = (s1_aceleracion >> 8) & 0xFF; // Los 4 bits más significativos
 8000344:	4b11      	ldr	r3, [pc, #68]	@ (800038c <main+0xf8>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	0a1b      	lsrs	r3, r3, #8
 800034a:	b29b      	uxth	r3, r3
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <main+0x104>)
 8000350:	701a      	strb	r2, [r3, #0]
		TxData[1] = s1_aceleracion & 0xFF;        // Los 8 bits menos significativos
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <main+0xf8>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <main+0x104>)
 800035a:	705a      	strb	r2, [r3, #1]

		TxData[2] = (s2_aceleracion >> 8) & 0xFF; // Los 4 bits más significativos
 800035c:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <main+0xfc>)
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	0a1b      	lsrs	r3, r3, #8
 8000362:	b29b      	uxth	r3, r3
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <main+0x104>)
 8000368:	709a      	strb	r2, [r3, #2]
		TxData[3] = s2_aceleracion & 0xFF;        // Los 8 bits menos significativos
 800036a:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <main+0xfc>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <main+0x104>)
 8000372:	70da      	strb	r2, [r3, #3]

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK) {
 8000374:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <main+0x104>)
 8000376:	4907      	ldr	r1, [pc, #28]	@ (8000394 <main+0x100>)
 8000378:	4803      	ldr	r0, [pc, #12]	@ (8000388 <main+0xf4>)
 800037a:	f002 fbb3 	bl	8002ae4 <HAL_FDCAN_AddMessageToTxFifoQ>
		ADC_Select_S1();
 800037e:	e7a9      	b.n	80002d4 <main+0x40>
 8000380:	20000028 	.word	0x20000028
 8000384:	20000090 	.word	0x20000090
 8000388:	200000f8 	.word	0x200000f8
 800038c:	20000164 	.word	0x20000164
 8000390:	20000166 	.word	0x20000166
 8000394:	20000168 	.word	0x20000168
 8000398:	2000015c 	.word	0x2000015c

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09c      	sub	sp, #112	@ 0x70
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0320 	add.w	r3, r7, #32
 80003a6:	2250      	movs	r2, #80	@ 0x50
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f005 f842 	bl	8005434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	f107 0308 	add.w	r3, r7, #8
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000480 <SystemClock_Config+0xe4>)
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000480 <SystemClock_Config+0xe4>)
 80003c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003cc:	6113      	str	r3, [r2, #16]
 80003ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000480 <SystemClock_Config+0xe4>)
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003da:	bf00      	nop
 80003dc:	4b28      	ldr	r3, [pc, #160]	@ (8000480 <SystemClock_Config+0xe4>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f003 0308 	and.w	r3, r3, #8
 80003e4:	2b08      	cmp	r3, #8
 80003e6:	d1f9      	bne.n	80003dc <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 80003e8:	2312      	movs	r3, #18
 80003ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ec:	2301      	movs	r3, #1
 80003ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80003f0:	2308      	movs	r3, #8
 80003f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f4:	2340      	movs	r3, #64	@ 0x40
 80003f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80003f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80003fe:	2320      	movs	r3, #32
 8000400:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000406:	2302      	movs	r3, #2
 8000408:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800040a:	2301      	movs	r3, #1
 800040c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 800040e:	2381      	movs	r3, #129	@ 0x81
 8000410:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000412:	2302      	movs	r3, #2
 8000414:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000416:	2306      	movs	r3, #6
 8000418:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800041a:	2302      	movs	r3, #2
 800041c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800041e:	2308      	movs	r3, #8
 8000420:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000422:	2300      	movs	r3, #0
 8000424:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0320 	add.w	r3, r7, #32
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fdd8 	bl	8002fe4 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800043a:	f000 f9d1 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	231f      	movs	r3, #31
 8000440:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	2101      	movs	r1, #1
 800045c:	4618      	mov	r0, r3
 800045e:	f003 f9f9 	bl	8003854 <HAL_RCC_ClockConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000468:	f000 f9ba 	bl	80007e0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 800046c:	4b05      	ldr	r3, [pc, #20]	@ (8000484 <SystemClock_Config+0xe8>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a04      	ldr	r2, [pc, #16]	@ (8000484 <SystemClock_Config+0xe8>)
 8000472:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	3770      	adds	r7, #112	@ 0x70
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	44020800 	.word	0x44020800
 8000484:	40022000 	.word	0x40022000

08000488 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b0b4      	sub	sp, #208	@ 0xd0
 800048c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800048e:	463b      	mov	r3, r7
 8000490:	22d0      	movs	r2, #208	@ 0xd0
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f004 ffcd 	bl	8005434 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800049a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800049e:	f04f 0300 	mov.w	r3, #0
 80004a2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_CSI;
 80004a6:	2302      	movs	r3, #2
 80004a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80004aa:	2301      	movs	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 80004ae:	2340      	movs	r3, #64	@ 0x40
 80004b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004b6:	2302      	movs	r3, #2
 80004b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 8;
 80004ba:	2308      	movs	r3, #8
 80004bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 80004be:	2308      	movs	r3, #8
 80004c0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 80004ca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80004ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2R;
 80004d0:	2302      	movs	r3, #2
 80004d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d6:	463b      	mov	r3, r7
 80004d8:	4618      	mov	r0, r3
 80004da:	f003 fcbb 	bl	8003e54 <HAL_RCCEx_PeriphCLKConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 80004e4:	f000 f97c 	bl	80007e0 <Error_Handler>
  }
}
 80004e8:	bf00      	nop
 80004ea:	37d0      	adds	r7, #208	@ 0xd0
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2220      	movs	r2, #32
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f004 ff99 	bl	8005434 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b2a      	ldr	r3, [pc, #168]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000504:	4a2a      	ldr	r2, [pc, #168]	@ (80005b0 <MX_ADC1_Init+0xc0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000508:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <MX_ADC1_Init+0xbc>)
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800050e:	4b27      	ldr	r3, [pc, #156]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000514:	4b25      	ldr	r3, [pc, #148]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800051a:	4b24      	ldr	r3, [pc, #144]	@ (80005ac <MX_ADC1_Init+0xbc>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000520:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000522:	2204      	movs	r2, #4
 8000524:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000526:	4b21      	ldr	r3, [pc, #132]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000528:	2200      	movs	r2, #0
 800052a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <MX_ADC1_Init+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000532:	4b1e      	ldr	r3, [pc, #120]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000534:	2201      	movs	r2, #1
 8000536:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <MX_ADC1_Init+0xbc>)
 800053a:	2200      	movs	r2, #0
 800053c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b1a      	ldr	r3, [pc, #104]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000542:	2200      	movs	r2, #0
 8000544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000546:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000548:	2200      	movs	r2, #0
 800054a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800054c:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <MX_ADC1_Init+0xbc>)
 800054e:	2200      	movs	r2, #0
 8000550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000554:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000556:	2200      	movs	r2, #0
 8000558:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_ADC1_Init+0xbc>)
 800055c:	2200      	movs	r2, #0
 800055e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4810      	ldr	r0, [pc, #64]	@ (80005ac <MX_ADC1_Init+0xbc>)
 800056a:	f000 fe71 	bl	8001250 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000574:	f000 f934 	bl	80007e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000578:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <MX_ADC1_Init+0xc4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	@ (80005ac <MX_ADC1_Init+0xbc>)
 8000596:	f001 f983 	bl	80018a0 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80005a0:	f000 f91e 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000028 	.word	0x20000028
 80005b0:	42028000 	.word	0x42028000
 80005b4:	3ac04000 	.word	0x3ac04000

080005b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005be:	463b      	mov	r3, r7
 80005c0:	2220      	movs	r2, #32
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f004 ff35 	bl	8005434 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000674 <MX_ADC2_Init+0xbc>)
 80005cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000678 <MX_ADC2_Init+0xc0>)
 80005ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005d0:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <MX_ADC2_Init+0xbc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005d6:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <MX_ADC2_Init+0xbc>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <MX_ADC2_Init+0xbc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e2:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <MX_ADC2_Init+0xbc>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <MX_ADC2_Init+0xbc>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC2_Init+0xbc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC2_Init+0xbc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MX_ADC2_Init+0xbc>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC2_Init+0xbc>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC2_Init+0xbc>)
 800060a:	2200      	movs	r2, #0
 800060c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC2_Init+0xbc>)
 8000610:	2200      	movs	r2, #0
 8000612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC2_Init+0xbc>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc2.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC2_Init+0xbc>)
 800061e:	2200      	movs	r2, #0
 8000620:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC2_Init+0xbc>)
 8000624:	2200      	movs	r2, #0
 8000626:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.OversamplingMode = DISABLE;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC2_Init+0xbc>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000630:	4810      	ldr	r0, [pc, #64]	@ (8000674 <MX_ADC2_Init+0xbc>)
 8000632:	f000 fe0d 	bl	8001250 <HAL_ADC_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800063c:	f000 f8d0 	bl	80007e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_ADC2_Init+0xc4>)
 8000642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000644:	2306      	movs	r3, #6
 8000646:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064c:	237f      	movs	r3, #127	@ 0x7f
 800064e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000650:	2304      	movs	r3, #4
 8000652:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC2_Init+0xbc>)
 800065e:	f001 f91f 	bl	80018a0 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000668:	f000 f8ba 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000090 	.word	0x20000090
 8000678:	42028100 	.word	0x42028100
 800067c:	3ef08000 	.word	0x3ef08000

08000680 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 8000686:	4a20      	ldr	r2, [pc, #128]	@ (8000708 <MX_FDCAN1_Init+0x88>)
 8000688:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800068a:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000690:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000696:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800069c:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 800069e:	2200      	movs	r2, #0
 80006a0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 43;
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006b0:	222b      	movs	r2, #43	@ 0x2b
 80006b2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006bc:	2202      	movs	r2, #2
 80006be:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006da:	2201      	movs	r2, #1
 80006dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_FDCAN1_Init+0x84>)
 80006f2:	f002 f875 	bl	80027e0 <HAL_FDCAN_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006fc:	f000 f870 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000f8 	.word	0x200000f8
 8000708:	4000a400 	.word	0x4000a400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_GPIO_Init+0x30>)
 8000714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000718:	4a08      	ldr	r2, [pc, #32]	@ (800073c <MX_GPIO_Init+0x30>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_GPIO_Init+0x30>)
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	44020c00 	.word	0x44020c00

08000740 <ADC_Select_S1>:

/* USER CODE BEGIN 4 */

void ADC_Select_S1 (void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2220      	movs	r2, #32
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f004 fe71 	bl	8005434 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_14;
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <ADC_Select_S1+0x48>)
 8000754:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000756:	2306      	movs	r3, #6
 8000758:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800075e:	237f      	movs	r3, #127	@ 0x7f
 8000760:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000762:	2304      	movs	r3, #4
 8000764:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4807      	ldr	r0, [pc, #28]	@ (800078c <ADC_Select_S1+0x4c>)
 8000770:	f001 f896 	bl	80018a0 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <ADC_Select_S1+0x3e>
	  {
	    Error_Handler();
 800077a:	f000 f831 	bl	80007e0 <Error_Handler>
	  }
}
 800077e:	bf00      	nop
 8000780:	3720      	adds	r7, #32
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	3ac04000 	.word	0x3ac04000
 800078c:	20000028 	.word	0x20000028

08000790 <ADC_Select_S2>:

void ADC_Select_S2 (void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2220      	movs	r2, #32
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fe49 	bl	8005434 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_15;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <ADC_Select_S2+0x48>)
 80007a4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a6:	2306      	movs	r3, #6
 80007a8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ae:	237f      	movs	r3, #127	@ 0x7f
 80007b0:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b2:	2304      	movs	r3, #4
 80007b4:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	@ (80007dc <ADC_Select_S2+0x4c>)
 80007c0:	f001 f86e 	bl	80018a0 <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <ADC_Select_S2+0x3e>
	  {
	    Error_Handler();
 80007ca:	f000 f809 	bl	80007e0 <Error_Handler>
	  }
}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	3ef08000 	.word	0x3ef08000
 80007dc:	20000028 	.word	0x20000028

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <Error_Handler+0x8>

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a39      	ldr	r2, [pc, #228]	@ (8000900 <HAL_ADC_MspInit+0x104>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d133      	bne.n	8000886 <HAL_ADC_MspInit+0x8a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800081e:	4b39      	ldr	r3, [pc, #228]	@ (8000904 <HAL_ADC_MspInit+0x108>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	4a37      	ldr	r2, [pc, #220]	@ (8000904 <HAL_ADC_MspInit+0x108>)
 8000826:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000828:	4b36      	ldr	r3, [pc, #216]	@ (8000904 <HAL_ADC_MspInit+0x108>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d10e      	bne.n	800084e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000830:	4b35      	ldr	r3, [pc, #212]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 8000832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000836:	4a34      	ldr	r2, [pc, #208]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 8000838:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800083c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000840:	4b31      	ldr	r3, [pc, #196]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 8000842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b2e      	ldr	r3, [pc, #184]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 8000850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000854:	4a2c      	ldr	r2, [pc, #176]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800085e:	4b2a      	ldr	r3, [pc, #168]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 8000860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800086c:	2304      	movs	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000870:	2303      	movs	r3, #3
 8000872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4823      	ldr	r0, [pc, #140]	@ (800090c <HAL_ADC_MspInit+0x110>)
 8000880:	f002 fa52 	bl	8002d28 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000884:	e037      	b.n	80008f6 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <HAL_ADC_MspInit+0x114>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d132      	bne.n	80008f6 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000890:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <HAL_ADC_MspInit+0x108>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <HAL_ADC_MspInit+0x108>)
 8000898:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800089a:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <HAL_ADC_MspInit+0x108>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10e      	bne.n	80008c0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 80008a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a8:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 80008aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 80008b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 80008c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c6:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <HAL_ADC_MspInit+0x10c>)
 80008d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4806      	ldr	r0, [pc, #24]	@ (800090c <HAL_ADC_MspInit+0x110>)
 80008f2:	f002 fa19 	bl	8002d28 <HAL_GPIO_Init>
}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	@ 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	42028000 	.word	0x42028000
 8000904:	2000018c 	.word	0x2000018c
 8000908:	44020c00 	.word	0x44020c00
 800090c:	42020000 	.word	0x42020000
 8000910:	42028100 	.word	0x42028100

08000914 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b0be      	sub	sp, #248	@ 0xf8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	22d0      	movs	r2, #208	@ 0xd0
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fd7d 	bl	8005434 <memset>
  if(hfdcan->Instance==FDCAN1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a27      	ldr	r2, [pc, #156]	@ (80009dc <HAL_FDCAN_MspInit+0xc8>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d147      	bne.n	80009d4 <HAL_FDCAN_MspInit+0xc0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000944:	f04f 0200 	mov.w	r2, #0
 8000948:	f04f 0304 	mov.w	r3, #4
 800094c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000954:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fa79 	bl	8003e54 <HAL_RCCEx_PeriphCLKConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000968:	f7ff ff3a 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <HAL_FDCAN_MspInit+0xcc>)
 800096e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000972:	4a1b      	ldr	r2, [pc, #108]	@ (80009e0 <HAL_FDCAN_MspInit+0xcc>)
 8000974:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000978:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <HAL_FDCAN_MspInit+0xcc>)
 800097e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_FDCAN_MspInit+0xcc>)
 800098c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000990:	4a13      	ldr	r2, [pc, #76]	@ (80009e0 <HAL_FDCAN_MspInit+0xcc>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <HAL_FDCAN_MspInit+0xcc>)
 800099c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009c2:	2309      	movs	r3, #9
 80009c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <HAL_FDCAN_MspInit+0xd0>)
 80009d0:	f002 f9aa 	bl	8002d28 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80009d4:	bf00      	nop
 80009d6:	37f8      	adds	r7, #248	@ 0xf8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	4000a400 	.word	0x4000a400
 80009e0:	44020c00 	.word	0x44020c00
 80009e4:	42020000 	.word	0x42020000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <MemManage_Handler+0x4>

08000a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 f947 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <SystemInit+0xdc>)
 8000a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a54:	4a33      	ldr	r2, [pc, #204]	@ (8000b24 <SystemInit+0xdc>)
 8000a56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000a5e:	4b32      	ldr	r3, [pc, #200]	@ (8000b28 <SystemInit+0xe0>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a64:	4b30      	ldr	r3, [pc, #192]	@ (8000b28 <SystemInit+0xe0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b28 <SystemInit+0xe0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000a70:	4b2d      	ldr	r3, [pc, #180]	@ (8000b28 <SystemInit+0xe0>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	492c      	ldr	r1, [pc, #176]	@ (8000b28 <SystemInit+0xe0>)
 8000a76:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <SystemInit+0xe4>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <SystemInit+0xe0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000a82:	4b29      	ldr	r3, [pc, #164]	@ (8000b28 <SystemInit+0xe0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <SystemInit+0xe0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <SystemInit+0xe0>)
 8000a90:	4a27      	ldr	r2, [pc, #156]	@ (8000b30 <SystemInit+0xe8>)
 8000a92:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <SystemInit+0xe0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <SystemInit+0xe0>)
 8000a9c:	4a24      	ldr	r2, [pc, #144]	@ (8000b30 <SystemInit+0xe8>)
 8000a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <SystemInit+0xe0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <SystemInit+0xe0>)
 8000aa8:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <SystemInit+0xe8>)
 8000aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <SystemInit+0xe0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <SystemInit+0xe0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b28 <SystemInit+0xe0>)
 8000ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000abc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <SystemInit+0xe0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <SystemInit+0xdc>)
 8000ac6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000aca:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000acc:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <SystemInit+0xec>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000ad4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000adc:	d003      	beq.n	8000ae6 <SystemInit+0x9e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000ae4:	d117      	bne.n	8000b16 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000ae6:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <SystemInit+0xec>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <SystemInit+0xec>)
 8000af4:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <SystemInit+0xf0>)
 8000af6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <SystemInit+0xec>)
 8000afa:	4a10      	ldr	r2, [pc, #64]	@ (8000b3c <SystemInit+0xf4>)
 8000afc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <SystemInit+0xec>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <SystemInit+0xec>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <SystemInit+0xec>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a09      	ldr	r2, [pc, #36]	@ (8000b34 <SystemInit+0xec>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	61d3      	str	r3, [r2, #28]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	44020c00 	.word	0x44020c00
 8000b2c:	eae2eae3 	.word	0xeae2eae3
 8000b30:	01010280 	.word	0x01010280
 8000b34:	40022000 	.word	0x40022000
 8000b38:	08192a3b 	.word	0x08192a3b
 8000b3c:	4c5d6e7f 	.word	0x4c5d6e7f

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b40:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b44:	f7ff ff80 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	@ (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	@ (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b6e:	f004 fc69 	bl	8005444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b72:	f7ff fb8f 	bl	8000294 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   r0, =_estack
 8000b78:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b84:	080054cc 	.word	0x080054cc
  ldr r2, =_sbss
 8000b88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b8c:	20000194 	.word	0x20000194

08000b90 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f001 fd4c 	bl	8002636 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000b9e:	f003 f811 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_Init+0x44>)
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	490b      	ldr	r1, [pc, #44]	@ (8000bdc <HAL_Init+0x48>)
 8000bae:	5ccb      	ldrb	r3, [r1, r3]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <HAL_Init+0x4c>)
 8000bb6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f001 fd83 	bl	80026c4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f810 	bl	8000be4 <HAL_InitTick>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e002      	b.n	8000bd4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bce:	f7ff fe0d 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	44020c00 	.word	0x44020c00
 8000bdc:	080054a4 	.word	0x080054a4
 8000be0:	20000000 	.word	0x20000000

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000bf0:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <HAL_InitTick+0xdc>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e05c      	b.n	8000cb6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000bfc:	4b31      	ldr	r3, [pc, #196]	@ (8000cc4 <HAL_InitTick+0xe0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d10c      	bne.n	8000c22 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000c08:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc8 <HAL_InitTick+0xe4>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <HAL_InitTick+0xdc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e037      	b.n	8000c92 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000c22:	f001 fda7 	bl	8002774 <HAL_SYSTICK_GetCLKSourceConfig>
 8000c26:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d023      	beq.n	8000c76 <HAL_InitTick+0x92>
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d82d      	bhi.n	8000c90 <HAL_InitTick+0xac>
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_InitTick+0x5e>
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d00d      	beq.n	8000c5c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000c40:	e026      	b.n	8000c90 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000c42:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <HAL_InitTick+0xe4>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <HAL_InitTick+0xdc>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000c50:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c58:	60fb      	str	r3, [r7, #12]
        break;
 8000c5a:	e01a      	b.n	8000c92 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <HAL_InitTick+0xdc>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c6a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	60fb      	str	r3, [r7, #12]
        break;
 8000c74:	e00d      	b.n	8000c92 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_InitTick+0xdc>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	60fb      	str	r3, [r7, #12]
        break;
 8000c8e:	e000      	b.n	8000c92 <HAL_InitTick+0xae>
        break;
 8000c90:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f001 fcf4 	bl	8002680 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e009      	b.n	8000cb6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8000caa:	f001 fccf 	bl	800264c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000cae:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_InitTick+0xe8>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	e000e010 	.word	0xe000e010
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000190 	.word	0x20000190

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000190 	.word	0x20000190

08000d10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	609a      	str	r2, [r3, #8]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000d86:	f043 0201 	orr.w	r2, r3, #1
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8000da6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	42028000 	.word	0x42028000

08000dc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3360      	adds	r3, #96	@ 0x60
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <LL_ADC_SetOffset+0x44>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	03fff000 	.word	0x03fff000

08000e0c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3360      	adds	r3, #96	@ 0x60
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3360      	adds	r3, #96	@ 0x60
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e62:	bf00      	nop
 8000e64:	371c      	adds	r7, #28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b087      	sub	sp, #28
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3360      	adds	r3, #96	@ 0x60
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3360      	adds	r3, #96	@ 0x60
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000ece:	bf00      	nop
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	615a      	str	r2, [r3, #20]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b087      	sub	sp, #28
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3330      	adds	r3, #48	@ 0x30
 8000f36:	461a      	mov	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	f003 030c 	and.w	r3, r3, #12
 8000f42:	4413      	add	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	211f      	movs	r1, #31
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	401a      	ands	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	0e9b      	lsrs	r3, r3, #26
 8000f5e:	f003 011f 	and.w	r1, r3, #31
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f72:	bf00      	nop
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b087      	sub	sp, #28
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3314      	adds	r3, #20
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	0e5b      	lsrs	r3, r3, #25
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	4413      	add	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	0d1b      	lsrs	r3, r3, #20
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	2107      	movs	r1, #7
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	0d1b      	lsrs	r3, r3, #20
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fc8:	bf00      	nop
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fec:	43db      	mvns	r3, r3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0318 	and.w	r3, r3, #24
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ff8:	40d9      	lsrs	r1, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	400b      	ands	r3, r1
 8000ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001002:	431a      	orrs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	000fffff 	.word	0x000fffff

0800101c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 031f 	and.w	r3, r3, #31
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001064:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6093      	str	r3, [r2, #8]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800108c:	d101      	bne.n	8001092 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80010b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010dc:	d101      	bne.n	80010e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001104:	f043 0201 	orr.w	r2, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001128:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800112c:	f043 0202 	orr.w	r2, r3, #2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <LL_ADC_IsEnabled+0x18>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <LL_ADC_IsEnabled+0x1a>
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d101      	bne.n	800117e <LL_ADC_IsDisableOngoing+0x18>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <LL_ADC_IsDisableOngoing+0x1a>
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800119c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011a0:	f043 0204 	orr.w	r2, r3, #4
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011c8:	f043 0210 	orr.w	r2, r3, #16
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d101      	bne.n	80011f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001212:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001216:	f043 0220 	orr.w	r2, r3, #32
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b08      	cmp	r3, #8
 800123c:	d101      	bne.n	8001242 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e136      	b.n	80014d8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fabf 	bl	80007fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fef1 	bl	8001078 <LL_ADC_IsDeepPowerDownEnabled>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fed7 	bl	8001054 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff0c 	bl	80010c8 <LL_ADC_IsInternalRegulatorEnabled>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d115      	bne.n	80012e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fef0 	bl	80010a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012c0:	4b87      	ldr	r3, [pc, #540]	@ (80014e0 <HAL_ADC_Init+0x290>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	4a87      	ldr	r2, [pc, #540]	@ (80014e4 <HAL_ADC_Init+0x294>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	3301      	adds	r3, #1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012d4:	e002      	b.n	80012dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff feee 	bl	80010c8 <LL_ADC_IsInternalRegulatorEnabled>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10d      	bne.n	800130e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	f043 0210 	orr.w	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff62 	bl	80011dc <LL_ADC_REG_IsConversionOngoing>
 8001318:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 80cf 	bne.w	80014c6 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 80cb 	bne.w	80014c6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001334:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001338:	f043 0202 	orr.w	r2, r3, #2
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fefb 	bl	8001140 <LL_ADC_IsEnabled>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d110      	bne.n	8001372 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001350:	4865      	ldr	r0, [pc, #404]	@ (80014e8 <HAL_ADC_Init+0x298>)
 8001352:	f7ff fef5 	bl	8001140 <LL_ADC_IsEnabled>
 8001356:	4604      	mov	r4, r0
 8001358:	4864      	ldr	r0, [pc, #400]	@ (80014ec <HAL_ADC_Init+0x29c>)
 800135a:	f7ff fef1 	bl	8001140 <LL_ADC_IsEnabled>
 800135e:	4603      	mov	r3, r0
 8001360:	4323      	orrs	r3, r4
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4619      	mov	r1, r3
 800136c:	4860      	ldr	r0, [pc, #384]	@ (80014f0 <HAL_ADC_Init+0x2a0>)
 800136e:	f7ff fccf 	bl	8000d10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7e5b      	ldrb	r3, [r3, #25]
 8001376:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800137c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001382:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001388:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001390:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a4:	3b01      	subs	r3, #1
 80013a6:	045b      	lsls	r3, r3, #17
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d009      	beq.n	80013ca <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ba:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	4b48      	ldr	r3, [pc, #288]	@ (80014f4 <HAL_ADC_Init+0x2a4>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	69b9      	ldr	r1, [r7, #24]
 80013da:	430b      	orrs	r3, r1
 80013dc:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff16 	bl	800122a <LL_ADC_INJ_IsConversionOngoing>
 80013fe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d13d      	bne.n	8001482 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d13a      	bne.n	8001482 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7e1b      	ldrb	r3, [r3, #24]
 8001410:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001418:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001428:	f023 0302 	bic.w	r3, r3, #2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	69b9      	ldr	r1, [r7, #24]
 8001432:	430b      	orrs	r3, r1
 8001434:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800143c:	2b01      	cmp	r3, #1
 800143e:	d118      	bne.n	8001472 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800144a:	f023 0304 	bic.w	r3, r3, #4
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001456:	4311      	orrs	r1, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800145c:	4311      	orrs	r1, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001462:	430a      	orrs	r2, r1
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	e007      	b.n	8001482 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0201 	bic.w	r2, r2, #1
 8001480:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d10c      	bne.n	80014a4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	f023 010f 	bic.w	r1, r3, #15
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	1e5a      	subs	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80014a2:	e007      	b.n	80014b4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020f 	bic.w	r2, r2, #15
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b8:	f023 0303 	bic.w	r3, r3, #3
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80014c4:	e007      	b.n	80014d6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	f043 0210 	orr.w	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3724      	adds	r7, #36	@ 0x24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd90      	pop	{r4, r7, pc}
 80014e0:	20000000 	.word	0x20000000
 80014e4:	053e2d63 	.word	0x053e2d63
 80014e8:	42028000 	.word	0x42028000
 80014ec:	42028100 	.word	0x42028100
 80014f0:	42028300 	.word	0x42028300
 80014f4:	fff04007 	.word	0xfff04007

080014f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001500:	4857      	ldr	r0, [pc, #348]	@ (8001660 <HAL_ADC_Start+0x168>)
 8001502:	f7ff fd8b 	bl	800101c <LL_ADC_GetMultimode>
 8001506:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe65 	bl	80011dc <LL_ADC_REG_IsConversionOngoing>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 809c 	bne.w	8001652 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_Start+0x30>
 8001524:	2302      	movs	r3, #2
 8001526:	e097      	b.n	8001658 <HAL_ADC_Start+0x160>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 fe81 	bl	8002238 <ADC_Enable>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 8083 	bne.w	8001648 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a42      	ldr	r2, [pc, #264]	@ (8001664 <HAL_ADC_Start+0x16c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d002      	beq.n	8001566 <HAL_ADC_Start+0x6e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	e000      	b.n	8001568 <HAL_ADC_Start+0x70>
 8001566:	4b40      	ldr	r3, [pc, #256]	@ (8001668 <HAL_ADC_Start+0x170>)
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	4293      	cmp	r3, r2
 800156e:	d002      	beq.n	8001576 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800158a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800158e:	d106      	bne.n	800159e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001594:	f023 0206 	bic.w	r2, r3, #6
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800159c:	e002      	b.n	80015a4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	221c      	movs	r2, #28
 80015aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001664 <HAL_ADC_Start+0x16c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d002      	beq.n	80015c4 <HAL_ADC_Start+0xcc>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	e000      	b.n	80015c6 <HAL_ADC_Start+0xce>
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <HAL_ADC_Start+0x170>)
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d008      	beq.n	80015e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d002      	beq.n	80015e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d114      	bne.n	800160a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fdc2 	bl	800118c <LL_ADC_REG_StartConversion>
 8001608:	e025      	b.n	8001656 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a12      	ldr	r2, [pc, #72]	@ (8001664 <HAL_ADC_Start+0x16c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d002      	beq.n	8001626 <HAL_ADC_Start+0x12e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	e000      	b.n	8001628 <HAL_ADC_Start+0x130>
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_ADC_Start+0x170>)
 8001628:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00f      	beq.n	8001656 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800163e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	659a      	str	r2, [r3, #88]	@ 0x58
 8001646:	e006      	b.n	8001656 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001650:	e001      	b.n	8001656 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001652:	2302      	movs	r3, #2
 8001654:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001656:	7dfb      	ldrb	r3, [r7, #23]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	42028300 	.word	0x42028300
 8001664:	42028100 	.word	0x42028100
 8001668:	42028000 	.word	0x42028000

0800166c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Stop+0x16>
 800167e:	2302      	movs	r3, #2
 8001680:	e023      	b.n	80016ca <HAL_ADC_Stop+0x5e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800168a:	2103      	movs	r1, #3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fd17 	bl	80020c0 <ADC_ConversionStop>
 8001692:	4603      	mov	r3, r0
 8001694:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d111      	bne.n	80016c0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 fe4d 	bl	800233c <ADC_Disable>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016de:	4866      	ldr	r0, [pc, #408]	@ (8001878 <HAL_ADC_PollForConversion+0x1a4>)
 80016e0:	f7ff fc9c 	bl	800101c <LL_ADC_GetMultimode>
 80016e4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d102      	bne.n	80016f4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80016ee:	2308      	movs	r3, #8
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e02a      	b.n	800174a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d002      	beq.n	8001706 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b09      	cmp	r3, #9
 8001704:	d111      	bne.n	800172a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001718:	f043 0220 	orr.w	r2, r3, #32
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0a4      	b.n	800186e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001724:	2304      	movs	r3, #4
 8001726:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001728:	e00f      	b.n	800174a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800172a:	4853      	ldr	r0, [pc, #332]	@ (8001878 <HAL_ADC_PollForConversion+0x1a4>)
 800172c:	f7ff fc84 	bl	8001038 <LL_ADC_GetMultiDMATransfer>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	f043 0220 	orr.w	r2, r3, #32
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e093      	b.n	800186e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001746:	2304      	movs	r3, #4
 8001748:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800174a:	f7ff fad5 	bl	8000cf8 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001750:	e021      	b.n	8001796 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d01d      	beq.n	8001796 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800175a:	f7ff facd 	bl	8000cf8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d302      	bcc.n	8001770 <HAL_ADC_PollForConversion+0x9c>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d112      	bne.n	8001796 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10b      	bne.n	8001796 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	f043 0204 	orr.w	r2, r3, #4
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e06b      	b.n	800186e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0d6      	beq.n	8001752 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fba3 	bl	8000f00 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01c      	beq.n	80017fa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7e5b      	ldrb	r3, [r3, #25]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d118      	bne.n	80017fa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d111      	bne.n	80017fa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1f      	ldr	r2, [pc, #124]	@ (800187c <HAL_ADC_PollForConversion+0x1a8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d002      	beq.n	800180a <HAL_ADC_PollForConversion+0x136>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	e000      	b.n	800180c <HAL_ADC_PollForConversion+0x138>
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <HAL_ADC_PollForConversion+0x1ac>)
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	4293      	cmp	r3, r2
 8001812:	d008      	beq.n	8001826 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d002      	beq.n	8001826 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b09      	cmp	r3, #9
 8001824:	d104      	bne.n	8001830 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	e00c      	b.n	800184a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a11      	ldr	r2, [pc, #68]	@ (800187c <HAL_ADC_PollForConversion+0x1a8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d002      	beq.n	8001840 <HAL_ADC_PollForConversion+0x16c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	e000      	b.n	8001842 <HAL_ADC_PollForConversion+0x16e>
 8001840:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_ADC_PollForConversion+0x1ac>)
 8001842:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d104      	bne.n	800185a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2208      	movs	r2, #8
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e008      	b.n	800186c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	220c      	movs	r2, #12
 800186a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	42028300 	.word	0x42028300
 800187c:	42028100 	.word	0x42028100
 8001880:	42028000 	.word	0x42028000

08001884 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0b6      	sub	sp, #216	@ 0xd8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x22>
 80018be:	2302      	movs	r3, #2
 80018c0:	e3e6      	b.n	8002090 <HAL_ADC_ConfigChannel+0x7f0>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fc84 	bl	80011dc <LL_ADC_REG_IsConversionOngoing>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 83cb 	bne.w	8002072 <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d009      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4ab0      	ldr	r2, [pc, #704]	@ (8001bac <HAL_ADC_ConfigChannel+0x30c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d109      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x62>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4aaf      	ldr	r2, [pc, #700]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x310>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d104      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fa4d 	bl	8000d9c <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	f7ff fb09 	bl	8000f26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fc5f 	bl	80011dc <LL_ADC_REG_IsConversionOngoing>
 800191e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fc7f 	bl	800122a <LL_ADC_INJ_IsConversionOngoing>
 800192c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001930:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001934:	2b00      	cmp	r3, #0
 8001936:	f040 81dd 	bne.w	8001cf4 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800193a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 81d8 	bne.w	8001cf4 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800194c:	d10f      	bne.n	800196e <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff fb10 	bl	8000f7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fab7 	bl	8000eda <LL_ADC_SetSamplingTimeCommonConfig>
 800196c:	e00e      	b.n	800198c <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	461a      	mov	r2, r3
 800197c:	f7ff faff 	bl	8000f7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff faa7 	bl	8000eda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	08db      	lsrs	r3, r3, #3
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d022      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6919      	ldr	r1, [r3, #16]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019be:	f7ff fa01 	bl	8000dc4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6919      	ldr	r1, [r3, #16]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	461a      	mov	r2, r3
 80019d0:	f7ff fa4d 	bl	8000e6e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x14a>
 80019e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019e8:	e000      	b.n	80019ec <HAL_ADC_ConfigChannel+0x14c>
 80019ea:	2300      	movs	r3, #0
 80019ec:	461a      	mov	r2, r3
 80019ee:	f7ff fa59 	bl	8000ea4 <LL_ADC_SetOffsetSaturation>
 80019f2:	e17f      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fa06 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10a      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x180>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f9fb 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	0e9b      	lsrs	r3, r3, #26
 8001a1a:	f003 021f 	and.w	r2, r3, #31
 8001a1e:	e01e      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1be>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f9f0 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8001a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8001a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8001a4e:	2320      	movs	r3, #32
 8001a50:	e004      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 8001a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x1d6>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0e9b      	lsrs	r3, r3, #26
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	e018      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x208>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	e004      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8001a9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d106      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f9bf 	bl	8000e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f9a3 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10a      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x246>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f998 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	0e9b      	lsrs	r3, r3, #26
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	e01e      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x284>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2101      	movs	r1, #1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f98d 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 8001b14:	2320      	movs	r3, #32
 8001b16:	e004      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8001b18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x29c>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0e9b      	lsrs	r3, r3, #26
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	e018      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x2ce>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8001b60:	2320      	movs	r3, #32
 8001b62:	e004      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8001b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d106      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2200      	movs	r2, #0
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f95c 	bl	8000e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f940 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10e      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x314>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f935 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	0e9b      	lsrs	r3, r3, #26
 8001ba6:	f003 021f 	and.w	r2, r3, #31
 8001baa:	e022      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x352>
 8001bac:	04300002 	.word	0x04300002
 8001bb0:	407f0000 	.word	0x407f0000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f926 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e004      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8001be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x36a>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	e016      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x398>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001c1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e004      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8001c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d106      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	2102      	movs	r1, #2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f8f7 	bl	8000e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2103      	movs	r1, #3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f8db 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10a      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x3d6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2103      	movs	r1, #3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f8d0 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	0e9b      	lsrs	r3, r3, #26
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	e017      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x406>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f8c5 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c90:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001c92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e003      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001c9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x41e>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	e011      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x442>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	e003      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8001cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	2103      	movs	r1, #3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f8a2 	bl	8000e38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fa21 	bl	8001140 <LL_ADC_IsEnabled>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f040 813f 	bne.w	8001f84 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	461a      	mov	r2, r3
 8001d14:	f7ff f95e 	bl	8000fd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4a8e      	ldr	r2, [pc, #568]	@ (8001f58 <HAL_ADC_ConfigChannel+0x6b8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f040 8130 	bne.w	8001f84 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10b      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x4ac>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e019      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x4e0>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d5c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001d5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8001d64:	2320      	movs	r3, #32
 8001d66:	e003      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8001d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	bf94      	ite	ls
 8001d7a:	2301      	movls	r3, #1
 8001d7c:	2300      	movhi	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d079      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x500>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	3301      	adds	r3, #1
 8001d98:	069b      	lsls	r3, r3, #26
 8001d9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d9e:	e015      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x52c>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001db0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e003      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	069b      	lsls	r3, r3, #26
 8001dc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x54c>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	3301      	adds	r3, #1
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	e017      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x57c>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 8001e08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	3301      	adds	r3, #1
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2101      	movs	r1, #1
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	ea42 0103 	orr.w	r1, r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10a      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x5a2>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	051b      	lsls	r3, r3, #20
 8001e40:	e018      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x5d4>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 8001e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e74:	430b      	orrs	r3, r1
 8001e76:	e080      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x5f4>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	069b      	lsls	r3, r3, #26
 8001e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e92:	e015      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x620>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e003      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	069b      	lsls	r3, r3, #26
 8001ebc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x640>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	e017      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x670>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	61fb      	str	r3, [r7, #28]
  return result;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e003      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	ea42 0103 	orr.w	r1, r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x69c>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	3301      	adds	r3, #1
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	051b      	lsls	r3, r3, #20
 8001f36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f3a:	e01d      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x6d8>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	613b      	str	r3, [r7, #16]
  return result;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d103      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e005      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x6c4>
 8001f58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f003 021f 	and.w	r2, r3, #31
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b1e      	subs	r3, #30
 8001f72:	051b      	lsls	r3, r3, #20
 8001f74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f78:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fffd 	bl	8000f7e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b43      	ldr	r3, [pc, #268]	@ (8002098 <HAL_ADC_ConfigChannel+0x7f8>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d079      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f90:	4842      	ldr	r0, [pc, #264]	@ (800209c <HAL_ADC_ConfigChannel+0x7fc>)
 8001f92:	f7fe fee3 	bl	8000d5c <LL_ADC_GetCommonPathInternalCh>
 8001f96:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	@ (80020a0 <HAL_ADC_ConfigChannel+0x800>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d124      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d11e      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a3b      	ldr	r2, [pc, #236]	@ (80020a4 <HAL_ADC_ConfigChannel+0x804>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d164      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4835      	ldr	r0, [pc, #212]	@ (800209c <HAL_ADC_ConfigChannel+0x7fc>)
 8001fc6:	f7fe feb6 	bl	8000d36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fca:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <HAL_ADC_ConfigChannel+0x808>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	4a36      	ldr	r2, [pc, #216]	@ (80020ac <HAL_ADC_ConfigChannel+0x80c>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	3301      	adds	r3, #1
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fde:	e002      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f9      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fec:	e04a      	b.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80020b0 <HAL_ADC_ConfigChannel+0x810>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d113      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ff8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10d      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2a      	ldr	r2, [pc, #168]	@ (80020b4 <HAL_ADC_ConfigChannel+0x814>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d13a      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800200e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002016:	4619      	mov	r1, r3
 8002018:	4820      	ldr	r0, [pc, #128]	@ (800209c <HAL_ADC_ConfigChannel+0x7fc>)
 800201a:	f7fe fe8c 	bl	8000d36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800201e:	e031      	b.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a24      	ldr	r2, [pc, #144]	@ (80020b8 <HAL_ADC_ConfigChannel+0x818>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d113      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800202a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800202e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10d      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1a      	ldr	r2, [pc, #104]	@ (80020a4 <HAL_ADC_ConfigChannel+0x804>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d121      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002044:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002048:	4619      	mov	r1, r3
 800204a:	4814      	ldr	r0, [pc, #80]	@ (800209c <HAL_ADC_ConfigChannel+0x7fc>)
 800204c:	f7fe fe73 	bl	8000d36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002050:	e018      	b.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a19      	ldr	r2, [pc, #100]	@ (80020bc <HAL_ADC_ConfigChannel+0x81c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d113      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a10      	ldr	r2, [pc, #64]	@ (80020a4 <HAL_ADC_ConfigChannel+0x804>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fe84 	bl	8000d78 <LL_ADC_EnableChannelVDDcore>
 8002070:	e008      	b.n	8002084 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800208c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002090:	4618      	mov	r0, r3
 8002092:	37d8      	adds	r7, #216	@ 0xd8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	80080000 	.word	0x80080000
 800209c:	42028300 	.word	0x42028300
 80020a0:	c3210000 	.word	0xc3210000
 80020a4:	42028000 	.word	0x42028000
 80020a8:	20000000 	.word	0x20000000
 80020ac:	053e2d63 	.word	0x053e2d63
 80020b0:	43290000 	.word	0x43290000
 80020b4:	42028100 	.word	0x42028100
 80020b8:	c7520000 	.word	0xc7520000
 80020bc:	475a0000 	.word	0x475a0000

080020c0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f880 	bl	80011dc <LL_ADC_REG_IsConversionOngoing>
 80020dc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f8a1 	bl	800122a <LL_ADC_INJ_IsConversionOngoing>
 80020e8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8098 	beq.w	8002228 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d02a      	beq.n	800215c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7e5b      	ldrb	r3, [r3, #25]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d126      	bne.n	800215c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7e1b      	ldrb	r3, [r3, #24]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d122      	bne.n	800215c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002116:	2301      	movs	r3, #1
 8002118:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800211a:	e014      	b.n	8002146 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4a45      	ldr	r2, [pc, #276]	@ (8002234 <ADC_ConversionStop+0x174>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d90d      	bls.n	8002140 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	f043 0210 	orr.w	r2, r3, #16
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e074      	b.n	800222a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3301      	adds	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d1e3      	bne.n	800211c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2240      	movs	r2, #64	@ 0x40
 800215a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d014      	beq.n	800218c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f838 	bl	80011dc <LL_ADC_REG_IsConversionOngoing>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fff5 	bl	8001166 <LL_ADC_IsDisableOngoing>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d104      	bne.n	800218c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f814 	bl	80011b4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d014      	beq.n	80021bc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f847 	bl	800122a <LL_ADC_INJ_IsConversionOngoing>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe ffdd 	bl	8001166 <LL_ADC_IsDisableOngoing>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d104      	bne.n	80021bc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f823 	bl	8001202 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d005      	beq.n	80021ce <ADC_ConversionStop+0x10e>
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d105      	bne.n	80021d4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021c8:	230c      	movs	r3, #12
 80021ca:	617b      	str	r3, [r7, #20]
        break;
 80021cc:	e005      	b.n	80021da <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021ce:	2308      	movs	r3, #8
 80021d0:	617b      	str	r3, [r7, #20]
        break;
 80021d2:	e002      	b.n	80021da <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021d4:	2304      	movs	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]
        break;
 80021d8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021da:	f7fe fd8d 	bl	8000cf8 <HAL_GetTick>
 80021de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021e0:	e01b      	b.n	800221a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021e2:	f7fe fd89 	bl	8000cf8 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d914      	bls.n	800221a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e007      	b.n	800222a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1dc      	bne.n	80021e2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	a33fffff 	.word	0xa33fffff

08002238 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe ff79 	bl	8001140 <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d166      	bne.n	8002322 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b34      	ldr	r3, [pc, #208]	@ (800232c <ADC_Enable+0xf4>)
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e052      	b.n	8002324 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe ff34 	bl	80010f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002288:	4829      	ldr	r0, [pc, #164]	@ (8002330 <ADC_Enable+0xf8>)
 800228a:	f7fe fd67 	bl	8000d5c <LL_ADC_GetCommonPathInternalCh>
 800228e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002298:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <ADC_Enable+0xfc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	4a26      	ldr	r2, [pc, #152]	@ (8002338 <ADC_Enable+0x100>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	3301      	adds	r3, #1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022ac:	e002      	b.n	80022b4 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f9      	bne.n	80022ae <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022ba:	f7fe fd1d 	bl	8000cf8 <HAL_GetTick>
 80022be:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022c0:	e028      	b.n	8002314 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe ff3a 	bl	8001140 <LL_ADC_IsEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d104      	bne.n	80022dc <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe ff0a 	bl	80010f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022dc:	f7fe fd0c 	bl	8000cf8 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d914      	bls.n	8002314 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d00d      	beq.n	8002314 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	f043 0210 	orr.w	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e007      	b.n	8002324 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d1cf      	bne.n	80022c2 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	8000003f 	.word	0x8000003f
 8002330:	42028300 	.word	0x42028300
 8002334:	20000000 	.word	0x20000000
 8002338:	053e2d63 	.word	0x053e2d63

0800233c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe ff0c 	bl	8001166 <LL_ADC_IsDisableOngoing>
 800234e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fef3 	bl	8001140 <LL_ADC_IsEnabled>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d047      	beq.n	80023f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d144      	bne.n	80023f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030d 	and.w	r3, r3, #13
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10c      	bne.n	800238e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fecd 	bl	8001118 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2203      	movs	r2, #3
 8002384:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002386:	f7fe fcb7 	bl	8000cf8 <HAL_GetTick>
 800238a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800238c:	e029      	b.n	80023e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e023      	b.n	80023f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023aa:	f7fe fca5 	bl	8000cf8 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d914      	bls.n	80023e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00d      	beq.n	80023e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ca:	f043 0210 	orr.w	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e007      	b.n	80023f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1dc      	bne.n	80023aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <LL_ADC_StartCalibration>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800240c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002416:	4313      	orrs	r3, r2
 8002418:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	609a      	str	r2, [r3, #8]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_IsCalibrationOnGoing>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800243c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002440:	d101      	bne.n	8002446 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_ADCEx_Calibration_Start+0x1c>
 800246c:	2302      	movs	r3, #2
 800246e:	e04d      	b.n	800250c <HAL_ADCEx_Calibration_Start+0xb8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff5f 	bl	800233c <ADC_Disable>
 800247e:	4603      	mov	r3, r0
 8002480:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d136      	bne.n	80024f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002490:	f023 0302 	bic.w	r3, r3, #2
 8002494:	f043 0202 	orr.w	r2, r3, #2
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6839      	ldr	r1, [r7, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ffa9 	bl	80023fa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80024a8:	e014      	b.n	80024d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3301      	adds	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4a18      	ldr	r2, [pc, #96]	@ (8002514 <HAL_ADCEx_Calibration_Start+0xc0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d30d      	bcc.n	80024d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f023 0312 	bic.w	r3, r3, #18
 80024c0:	f043 0210 	orr.w	r2, r3, #16
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e01b      	b.n	800250c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ffa7 	bl	800242c <LL_ADC_IsCalibrationOnGoing>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1e2      	bne.n	80024aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e8:	f023 0303 	bic.w	r3, r3, #3
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80024f4:	e005      	b.n	8002502 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	f043 0210 	orr.w	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	25c3f800 	.word	0x25c3f800

08002518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	@ (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	@ (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	@ (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	@ 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
         );
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	@ 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ff6a 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800265a:	f7ff ff81 	bl	8002560 <__NVIC_GetPriorityGrouping>
 800265e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	6978      	ldr	r0, [r7, #20]
 8002666:	f7ff ffb3 	bl	80025d0 <NVIC_EncodePriority>
 800266a:	4602      	mov	r2, r0
 800266c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff82 	bl	800257c <__NVIC_SetPriority>
}
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002690:	d301      	bcc.n	8002696 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002692:	2301      	movs	r3, #1
 8002694:	e00d      	b.n	80026b2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002696:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <HAL_SYSTICK_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800269e:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <HAL_SYSTICK_Config+0x40>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_SYSTICK_Config+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a05      	ldr	r2, [pc, #20]	@ (80026c0 <HAL_SYSTICK_Config+0x40>)
 80026aa:	f043 0303 	orr.w	r3, r3, #3
 80026ae:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d844      	bhi.n	800275c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80026d2:	a201      	add	r2, pc, #4	@ (adr r2, 80026d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80026d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d8:	080026fb 	.word	0x080026fb
 80026dc:	08002719 	.word	0x08002719
 80026e0:	0800273b 	.word	0x0800273b
 80026e4:	0800275d 	.word	0x0800275d
 80026e8:	080026ed 	.word	0x080026ed
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80026ec:	4b1f      	ldr	r3, [pc, #124]	@ (800276c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1e      	ldr	r2, [pc, #120]	@ (800276c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6013      	str	r3, [r2, #0]
      break;
 80026f8:	e031      	b.n	800275e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80026fa:	4b1c      	ldr	r3, [pc, #112]	@ (800276c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1b      	ldr	r2, [pc, #108]	@ (800276c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002706:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002708:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800270c:	4a18      	ldr	r2, [pc, #96]	@ (8002770 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800270e:	f023 030c 	bic.w	r3, r3, #12
 8002712:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002716:	e022      	b.n	800275e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a13      	ldr	r2, [pc, #76]	@ (800276c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800271e:	f023 0304 	bic.w	r3, r3, #4
 8002722:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002726:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800272a:	f023 030c 	bic.w	r3, r3, #12
 800272e:	4a10      	ldr	r2, [pc, #64]	@ (8002770 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002738:	e011      	b.n	800275e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800273a:	4b0c      	ldr	r3, [pc, #48]	@ (800276c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a0b      	ldr	r2, [pc, #44]	@ (800276c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800274c:	f023 030c 	bic.w	r3, r3, #12
 8002750:	4a07      	ldr	r2, [pc, #28]	@ (8002770 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800275a:	e000      	b.n	800275e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800275c:	bf00      	nop
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010
 8002770:	44020c00 	.word	0x44020c00

08002774 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800277a:	4b17      	ldr	r3, [pc, #92]	@ (80027d8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002786:	2304      	movs	r3, #4
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	e01e      	b.n	80027ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800278e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b08      	cmp	r3, #8
 800279c:	d00f      	beq.n	80027be <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d80f      	bhi.n	80027c4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d003      	beq.n	80027b8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80027b0:	e008      	b.n	80027c4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
        break;
 80027b6:	e008      	b.n	80027ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80027b8:	2301      	movs	r3, #1
 80027ba:	607b      	str	r3, [r7, #4]
        break;
 80027bc:	e005      	b.n	80027ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80027be:	2302      	movs	r3, #2
 80027c0:	607b      	str	r3, [r7, #4]
        break;
 80027c2:	e002      	b.n	80027ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
        break;
 80027c8:	bf00      	nop
    }
  }
  return systick_source;
 80027ca:	687b      	ldr	r3, [r7, #4]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e010 	.word	0xe000e010
 80027dc:	44020c00 	.word	0x44020c00

080027e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e147      	b.n	8002a82 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe f884 	bl	8000914 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0210 	bic.w	r2, r2, #16
 800281a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800281c:	f7fe fa6c 	bl	8000cf8 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002822:	e012      	b.n	800284a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002824:	f7fe fa68 	bl	8000cf8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b0a      	cmp	r3, #10
 8002830:	d90b      	bls.n	800284a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e11b      	b.n	8002a82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b08      	cmp	r3, #8
 8002856:	d0e5      	beq.n	8002824 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002868:	f7fe fa46 	bl	8000cf8 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800286e:	e012      	b.n	8002896 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002870:	f7fe fa42 	bl	8000cf8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b0a      	cmp	r3, #10
 800287c:	d90b      	bls.n	8002896 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2203      	movs	r2, #3
 800288e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0f5      	b.n	8002a82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0e5      	beq.n	8002870 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0202 	orr.w	r2, r2, #2
 80028b2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a74      	ldr	r2, [pc, #464]	@ (8002a8c <HAL_FDCAN_Init+0x2ac>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d103      	bne.n	80028c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80028be:	4a74      	ldr	r2, [pc, #464]	@ (8002a90 <HAL_FDCAN_Init+0x2b0>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7c1b      	ldrb	r3, [r3, #16]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d108      	bne.n	80028e0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028dc:	619a      	str	r2, [r3, #24]
 80028de:	e007      	b.n	80028f0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028ee:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7c5b      	ldrb	r3, [r3, #17]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d108      	bne.n	800290a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002906:	619a      	str	r2, [r3, #24]
 8002908:	e007      	b.n	800291a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002918:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7c9b      	ldrb	r3, [r3, #18]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002930:	619a      	str	r2, [r3, #24]
 8002932:	e007      	b.n	8002944 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002942:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699a      	ldr	r2, [r3, #24]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002968:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0210 	bic.w	r2, r2, #16
 8002978:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d108      	bne.n	8002994 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0204 	orr.w	r2, r2, #4
 8002990:	619a      	str	r2, [r3, #24]
 8002992:	e02c      	b.n	80029ee <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d028      	beq.n	80029ee <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d01c      	beq.n	80029de <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029b2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0210 	orr.w	r2, r2, #16
 80029c2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d110      	bne.n	80029ee <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0220 	orr.w	r2, r2, #32
 80029da:	619a      	str	r2, [r3, #24]
 80029dc:	e007      	b.n	80029ee <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029fe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a06:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a16:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a18:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a22:	d115      	bne.n	8002a50 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a32:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a3c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	3b01      	subs	r3, #1
 8002a46:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a4c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a4e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f880 	bl	8002b6c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	4000a400 	.word	0x4000a400
 8002a90:	4000a500 	.word	0x4000a500

08002a94 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d110      	bne.n	8002aca <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e006      	b.n	8002ad8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ace:	f043 0204 	orr.w	r2, r3, #4
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d12c      	bne.n	8002b56 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e023      	b.n	8002b64 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f87c 	bl	8002c30 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e006      	b.n	8002b64 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5a:	f043 0208 	orr.w	r2, r3, #8
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
  }
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b74:	4b2c      	ldr	r3, [pc, #176]	@ (8002c28 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002b76:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c2c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d103      	bne.n	8002b8a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002b88:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b98:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba0:	041a      	lsls	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bbe:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc6:	061a      	lsls	r2, r3, #24
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	e005      	b.n	8002c0c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3f3      	bcc.n	8002c00 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	4000ac00 	.word	0x4000ac00
 8002c2c:	4000a800 	.word	0x4000a800

08002c30 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	@ 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002c4e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e00a      	b.n	8002c72 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002c64:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002c6a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c70:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c7c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002c82:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002c88:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e020      	b.n	8002d06 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3303      	adds	r3, #3
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	440b      	add	r3, r1
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002cdc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	440b      	add	r3, r1
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002cea:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002cf4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3304      	adds	r3, #4
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a06      	ldr	r2, [pc, #24]	@ (8002d24 <FDCAN_CopyMessageToRAM+0xf4>)
 8002d0c:	5cd3      	ldrb	r3, [r2, r3]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d3d6      	bcc.n	8002cc4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
 8002d1a:	3724      	adds	r7, #36	@ 0x24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	080054b4 	.word	0x080054b4

08002d28 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d36:	e142      	b.n	8002fbe <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8134 	beq.w	8002fb8 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x38>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b12      	cmp	r3, #18
 8002d5e:	d125      	bne.n	8002dac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	220f      	movs	r2, #15
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4013      	ands	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f003 020f 	and.w	r2, r3, #15
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	08da      	lsrs	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	6979      	ldr	r1, [r7, #20]
 8002da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d00b      	beq.n	8002e00 <HAL_GPIO_Init+0xd8>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d007      	beq.n	8002e00 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df4:	2b11      	cmp	r3, #17
 8002df6:	d003      	beq.n	8002e00 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b12      	cmp	r3, #18
 8002dfe:	d130      	bne.n	8002e62 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4013      	ands	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e36:	2201      	movs	r2, #1
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4013      	ands	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 0201 	and.w	r2, r3, #1
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d109      	bne.n	8002e82 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d11b      	bne.n	8002eb2 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d017      	beq.n	8002eb2 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4013      	ands	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d07c      	beq.n	8002fb8 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002ebe:	4a47      	ldr	r2, [pc, #284]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3318      	adds	r3, #24
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0a9a      	lsrs	r2, r3, #10
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fe0 <HAL_GPIO_Init+0x2b8>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	f002 0203 	and.w	r2, r2, #3
 8002ef0:	00d2      	lsls	r2, r2, #3
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002efa:	4938      	ldr	r1, [pc, #224]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3318      	adds	r3, #24
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002f08:	4b34      	ldr	r3, [pc, #208]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4013      	ands	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002f32:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002f56:	4a21      	ldr	r2, [pc, #132]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f62:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002f82:	4a16      	ldr	r2, [pc, #88]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002f8a:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f90:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f47f aeb5 	bne.w	8002d38 <HAL_GPIO_Init+0x10>
  }
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	44022000 	.word	0x44022000
 8002fe0:	002f7f7f 	.word	0x002f7f7f

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f000 bc28 	b.w	8003848 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff8:	4b94      	ldr	r3, [pc, #592]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f003 0318 	and.w	r3, r3, #24
 8003000:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003002:	4b92      	ldr	r3, [pc, #584]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d05b      	beq.n	80030d0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d005      	beq.n	800302a <HAL_RCC_OscConfig+0x46>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	2b18      	cmp	r3, #24
 8003022:	d114      	bne.n	800304e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d111      	bne.n	800304e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f000 bc08 	b.w	8003848 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003038:	4b84      	ldr	r3, [pc, #528]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	4981      	ldr	r1, [pc, #516]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003048:	4313      	orrs	r3, r2
 800304a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800304c:	e040      	b.n	80030d0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d023      	beq.n	800309e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003056:	4b7d      	ldr	r3, [pc, #500]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7c      	ldr	r2, [pc, #496]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fd fe49 	bl	8000cf8 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800306a:	f7fd fe45 	bl	8000cf8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e3e5      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800307c:	4b73      	ldr	r3, [pc, #460]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003088:	4b70      	ldr	r3, [pc, #448]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	496d      	ldr	r1, [pc, #436]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003098:	4313      	orrs	r3, r2
 800309a:	618b      	str	r3, [r1, #24]
 800309c:	e018      	b.n	80030d0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800309e:	4b6b      	ldr	r3, [pc, #428]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6a      	ldr	r2, [pc, #424]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80030a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fd fe25 	bl	8000cf8 <HAL_GetTick>
 80030ae:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80030b2:	f7fd fe21 	bl	8000cf8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e3c1      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80030c4:	4b61      	ldr	r3, [pc, #388]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a0 	beq.w	800321e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_OscConfig+0x10c>
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b18      	cmp	r3, #24
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f040 8092 	bne.w	800321e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e3a4      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003106:	d106      	bne.n	8003116 <HAL_RCC_OscConfig+0x132>
 8003108:	4b50      	ldr	r3, [pc, #320]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a4f      	ldr	r2, [pc, #316]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800310e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e058      	b.n	80031c8 <HAL_RCC_OscConfig+0x1e4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d112      	bne.n	8003144 <HAL_RCC_OscConfig+0x160>
 800311e:	4b4b      	ldr	r3, [pc, #300]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a4a      	ldr	r2, [pc, #296]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b48      	ldr	r3, [pc, #288]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a47      	ldr	r2, [pc, #284]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003130:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b45      	ldr	r3, [pc, #276]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a44      	ldr	r2, [pc, #272]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800313c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e041      	b.n	80031c8 <HAL_RCC_OscConfig+0x1e4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800314c:	d112      	bne.n	8003174 <HAL_RCC_OscConfig+0x190>
 800314e:	4b3f      	ldr	r3, [pc, #252]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3e      	ldr	r2, [pc, #248]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b3c      	ldr	r3, [pc, #240]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3b      	ldr	r2, [pc, #236]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003160:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b39      	ldr	r3, [pc, #228]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a38      	ldr	r2, [pc, #224]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e029      	b.n	80031c8 <HAL_RCC_OscConfig+0x1e4>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800317c:	d112      	bne.n	80031a4 <HAL_RCC_OscConfig+0x1c0>
 800317e:	4b33      	ldr	r3, [pc, #204]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a32      	ldr	r2, [pc, #200]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b30      	ldr	r3, [pc, #192]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2f      	ldr	r2, [pc, #188]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003190:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2c      	ldr	r2, [pc, #176]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e011      	b.n	80031c8 <HAL_RCC_OscConfig+0x1e4>
 80031a4:	4b29      	ldr	r3, [pc, #164]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a28      	ldr	r2, [pc, #160]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b26      	ldr	r3, [pc, #152]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a25      	ldr	r2, [pc, #148]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b23      	ldr	r3, [pc, #140]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a22      	ldr	r2, [pc, #136]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80031c2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80031c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd fd92 	bl	8000cf8 <HAL_GetTick>
 80031d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80031d8:	f7fd fd8e 	bl	8000cf8 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	@ 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e32e      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ea:	4b18      	ldr	r3, [pc, #96]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x1f4>
 80031f6:	e012      	b.n	800321e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fd fd7e 	bl	8000cf8 <HAL_GetTick>
 80031fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003200:	f7fd fd7a 	bl	8000cf8 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	@ 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e31a      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003212:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <HAL_RCC_OscConfig+0x268>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 809a 	beq.w	8003360 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_RCC_OscConfig+0x25a>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	2b18      	cmp	r3, #24
 8003236:	d149      	bne.n	80032cc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d146      	bne.n	80032cc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d104      	bne.n	8003250 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e2fe      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
 800324a:	bf00      	nop
 800324c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11c      	bne.n	8003290 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003256:	4b9a      	ldr	r3, [pc, #616]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0218 	and.w	r2, r3, #24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	429a      	cmp	r2, r3
 8003264:	d014      	beq.n	8003290 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003266:	4b96      	ldr	r3, [pc, #600]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 0218 	bic.w	r2, r3, #24
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	4993      	ldr	r1, [pc, #588]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003278:	f000 fdd0 	bl	8003e1c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800327c:	4b91      	ldr	r3, [pc, #580]	@ (80034c4 <HAL_RCC_OscConfig+0x4e0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd fcaf 	bl	8000be4 <HAL_InitTick>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e2db      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fd fd32 	bl	8000cf8 <HAL_GetTick>
 8003294:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003298:	f7fd fd2e 	bl	8000cf8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e2ce      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032aa:	4b85      	ldr	r3, [pc, #532]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80032b6:	4b82      	ldr	r3, [pc, #520]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	497e      	ldr	r1, [pc, #504]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80032ca:	e049      	b.n	8003360 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d02c      	beq.n	800332e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80032d4:	4b7a      	ldr	r3, [pc, #488]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 0218 	bic.w	r2, r3, #24
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	4977      	ldr	r1, [pc, #476]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80032e6:	4b76      	ldr	r3, [pc, #472]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a75      	ldr	r2, [pc, #468]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fd fd01 	bl	8000cf8 <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80032fa:	f7fd fcfd 	bl	8000cf8 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e29d      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800330c:	4b6c      	ldr	r3, [pc, #432]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003318:	4b69      	ldr	r3, [pc, #420]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	4966      	ldr	r1, [pc, #408]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	610b      	str	r3, [r1, #16]
 800332c:	e018      	b.n	8003360 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332e:	4b64      	ldr	r3, [pc, #400]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a63      	ldr	r2, [pc, #396]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fd fcdd 	bl	8000cf8 <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003342:	f7fd fcd9 	bl	8000cf8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e279      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003354:	4b5a      	ldr	r3, [pc, #360]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f0      	bne.n	8003342 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d03c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01c      	beq.n	80033ae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003374:	4b52      	ldr	r3, [pc, #328]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800337a:	4a51      	ldr	r2, [pc, #324]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 800337c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003380:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fd fcb8 	bl	8000cf8 <HAL_GetTick>
 8003388:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800338c:	f7fd fcb4 	bl	8000cf8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e254      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800339e:	4b48      	ldr	r3, [pc, #288]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80033a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ef      	beq.n	800338c <HAL_RCC_OscConfig+0x3a8>
 80033ac:	e01b      	b.n	80033e6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ae:	4b44      	ldr	r3, [pc, #272]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80033b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033b4:	4a42      	ldr	r2, [pc, #264]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80033b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7fd fc9b 	bl	8000cf8 <HAL_GetTick>
 80033c2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80033c6:	f7fd fc97 	bl	8000cf8 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e237      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80033da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ef      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80d2 	beq.w	8003598 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80033f4:	4b34      	ldr	r3, [pc, #208]	@ (80034c8 <HAL_RCC_OscConfig+0x4e4>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d118      	bne.n	8003432 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003400:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <HAL_RCC_OscConfig+0x4e4>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	4a30      	ldr	r2, [pc, #192]	@ (80034c8 <HAL_RCC_OscConfig+0x4e4>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340c:	f7fd fc74 	bl	8000cf8 <HAL_GetTick>
 8003410:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7fd fc70 	bl	8000cf8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e210      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003426:	4b28      	ldr	r3, [pc, #160]	@ (80034c8 <HAL_RCC_OscConfig+0x4e4>)
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_RCC_OscConfig+0x468>
 800343a:	4b21      	ldr	r3, [pc, #132]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 800343c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003440:	4a1f      	ldr	r2, [pc, #124]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800344a:	e074      	b.n	8003536 <HAL_RCC_OscConfig+0x552>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d118      	bne.n	8003486 <HAL_RCC_OscConfig+0x4a2>
 8003454:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800345a:	4a19      	ldr	r2, [pc, #100]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003464:	4b16      	ldr	r3, [pc, #88]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800346a:	4a15      	ldr	r2, [pc, #84]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 800346c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003470:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003474:	4b12      	ldr	r3, [pc, #72]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800347a:	4a11      	ldr	r2, [pc, #68]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003484:	e057      	b.n	8003536 <HAL_RCC_OscConfig+0x552>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b05      	cmp	r3, #5
 800348c:	d11e      	bne.n	80034cc <HAL_RCC_OscConfig+0x4e8>
 800348e:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003494:	4a0a      	ldr	r2, [pc, #40]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003496:	f043 0304 	orr.w	r3, r3, #4
 800349a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800349e:	4b08      	ldr	r3, [pc, #32]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80034a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034a4:	4a06      	ldr	r2, [pc, #24]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80034a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034ae:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80034b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034b4:	4a02      	ldr	r2, [pc, #8]	@ (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034be:	e03a      	b.n	8003536 <HAL_RCC_OscConfig+0x552>
 80034c0:	44020c00 	.word	0x44020c00
 80034c4:	20000004 	.word	0x20000004
 80034c8:	44020800 	.word	0x44020800
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b85      	cmp	r3, #133	@ 0x85
 80034d2:	d118      	bne.n	8003506 <HAL_RCC_OscConfig+0x522>
 80034d4:	4ba2      	ldr	r3, [pc, #648]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80034d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034da:	4aa1      	ldr	r2, [pc, #644]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80034dc:	f043 0304 	orr.w	r3, r3, #4
 80034e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034e4:	4b9e      	ldr	r3, [pc, #632]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80034e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034ea:	4a9d      	ldr	r2, [pc, #628]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80034ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034f4:	4b9a      	ldr	r3, [pc, #616]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80034f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034fa:	4a99      	ldr	r2, [pc, #612]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003504:	e017      	b.n	8003536 <HAL_RCC_OscConfig+0x552>
 8003506:	4b96      	ldr	r3, [pc, #600]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800350c:	4a94      	ldr	r2, [pc, #592]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003516:	4b92      	ldr	r3, [pc, #584]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800351c:	4a90      	ldr	r2, [pc, #576]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 800351e:	f023 0304 	bic.w	r3, r3, #4
 8003522:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003526:	4b8e      	ldr	r3, [pc, #568]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800352c:	4a8c      	ldr	r2, [pc, #560]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 800352e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003532:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353e:	f7fd fbdb 	bl	8000cf8 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fd fbd7 	bl	8000cf8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e175      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355c:	4b80      	ldr	r3, [pc, #512]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 800355e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ed      	beq.n	8003546 <HAL_RCC_OscConfig+0x562>
 800356a:	e015      	b.n	8003598 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fd fbc4 	bl	8000cf8 <HAL_GetTick>
 8003570:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fd fbc0 	bl	8000cf8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e15e      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800358a:	4b75      	ldr	r3, [pc, #468]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 800358c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ed      	bne.n	8003574 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d036      	beq.n	8003612 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d019      	beq.n	80035e0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80035b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fd fb9e 	bl	8000cf8 <HAL_GetTick>
 80035bc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80035c0:	f7fd fb9a 	bl	8000cf8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e13a      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80035d2:	4b63      	ldr	r3, [pc, #396]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x5dc>
 80035de:	e018      	b.n	8003612 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80035e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fd fb84 	bl	8000cf8 <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80035f4:	f7fd fb80 	bl	8000cf8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e120      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003606:	4b56      	ldr	r3, [pc, #344]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8115 	beq.w	8003846 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b18      	cmp	r3, #24
 8003620:	f000 80af 	beq.w	8003782 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	2b02      	cmp	r3, #2
 800362a:	f040 8086 	bne.w	800373a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800362e:	4b4c      	ldr	r3, [pc, #304]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a4b      	ldr	r2, [pc, #300]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003634:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fd fb5d 	bl	8000cf8 <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003642:	f7fd fb59 	bl	8000cf8 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e0f9      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003654:	4b42      	ldr	r3, [pc, #264]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f0      	bne.n	8003642 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003660:	4b3f      	ldr	r3, [pc, #252]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003668:	f023 0303 	bic.w	r3, r3, #3
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003674:	0212      	lsls	r2, r2, #8
 8003676:	430a      	orrs	r2, r1
 8003678:	4939      	ldr	r1, [pc, #228]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 800367a:	4313      	orrs	r3, r2
 800367c:	628b      	str	r3, [r1, #40]	@ 0x28
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003682:	3b01      	subs	r3, #1
 8003684:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	3b01      	subs	r3, #1
 800368e:	025b      	lsls	r3, r3, #9
 8003690:	b29b      	uxth	r3, r3
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003698:	3b01      	subs	r3, #1
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	3b01      	subs	r3, #1
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036ae:	492c      	ldr	r1, [pc, #176]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80036b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	4a29      	ldr	r2, [pc, #164]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036ba:	f023 0310 	bic.w	r3, r3, #16
 80036be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c4:	4a26      	ldr	r2, [pc, #152]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80036ca:	4b25      	ldr	r3, [pc, #148]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ce:	4a24      	ldr	r2, [pc, #144]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036d0:	f043 0310 	orr.w	r3, r3, #16
 80036d4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80036d6:	4b22      	ldr	r3, [pc, #136]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	f023 020c 	bic.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	491f      	ldr	r1, [pc, #124]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	f023 0220 	bic.w	r2, r3, #32
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f4:	491a      	ldr	r1, [pc, #104]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036fa:	4b19      	ldr	r3, [pc, #100]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003704:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003706:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a15      	ldr	r2, [pc, #84]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 800370c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fd faf1 	bl	8000cf8 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800371a:	f7fd faed 	bl	8000cf8 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e08d      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x736>
 8003738:	e085      	b.n	8003846 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800373a:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a08      	ldr	r2, [pc, #32]	@ (8003760 <HAL_RCC_OscConfig+0x77c>)
 8003740:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd fad7 	bl	8000cf8 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800374e:	f7fd fad3 	bl	8000cf8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d903      	bls.n	8003764 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e073      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
 8003760:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003764:	4b3a      	ldr	r3, [pc, #232]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ee      	bne.n	800374e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003770:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	4a36      	ldr	r2, [pc, #216]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 8003776:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	6293      	str	r3, [r2, #40]	@ 0x28
 8003780:	e061      	b.n	8003846 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003782:	4b33      	ldr	r3, [pc, #204]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 8003784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003786:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003788:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 800378a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	2b01      	cmp	r3, #1
 8003794:	d031      	beq.n	80037fa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0203 	and.w	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d12a      	bne.n	80037fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d122      	bne.n	80037fa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037be:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d11a      	bne.n	80037fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	0a5b      	lsrs	r3, r3, #9
 80037c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d111      	bne.n	80037fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d108      	bne.n	80037fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	0e1b      	lsrs	r3, r3, #24
 80037ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e024      	b.n	8003848 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80037fe:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	08db      	lsrs	r3, r3, #3
 8003804:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800380c:	429a      	cmp	r2, r3
 800380e:	d01a      	beq.n	8003846 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 8003812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003814:	4a0e      	ldr	r2, [pc, #56]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 8003816:	f023 0310 	bic.w	r3, r3, #16
 800381a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fd fa6c 	bl	8000cf8 <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003822:	bf00      	nop
 8003824:	f7fd fa68 	bl	8000cf8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	4293      	cmp	r3, r2
 800382e:	d0f9      	beq.n	8003824 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003834:	4a06      	ldr	r2, [pc, #24]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <HAL_RCC_OscConfig+0x86c>)
 8003840:	f043 0310 	orr.w	r3, r3, #16
 8003844:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3720      	adds	r7, #32
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	44020c00 	.word	0x44020c00

08003854 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e19e      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b83      	ldr	r3, [pc, #524]	@ (8003a78 <HAL_RCC_ClockConfig+0x224>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d910      	bls.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b80      	ldr	r3, [pc, #512]	@ (8003a78 <HAL_RCC_ClockConfig+0x224>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 020f 	bic.w	r2, r3, #15
 800387e:	497e      	ldr	r1, [pc, #504]	@ (8003a78 <HAL_RCC_ClockConfig+0x224>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b7c      	ldr	r3, [pc, #496]	@ (8003a78 <HAL_RCC_ClockConfig+0x224>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e186      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d012      	beq.n	80038ca <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	4b74      	ldr	r3, [pc, #464]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d909      	bls.n	80038ca <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80038b6:	4b71      	ldr	r3, [pc, #452]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	496d      	ldr	r1, [pc, #436]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d012      	beq.n	80038fc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	4b68      	ldr	r3, [pc, #416]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d909      	bls.n	80038fc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80038e8:	4b64      	ldr	r3, [pc, #400]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	4961      	ldr	r1, [pc, #388]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d010      	beq.n	800392a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	4b5b      	ldr	r3, [pc, #364]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003914:	429a      	cmp	r2, r3
 8003916:	d908      	bls.n	800392a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003918:	4b58      	ldr	r3, [pc, #352]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4955      	ldr	r1, [pc, #340]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 8003926:	4313      	orrs	r3, r2
 8003928:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	429a      	cmp	r2, r3
 8003944:	d908      	bls.n	8003958 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003946:	4b4d      	ldr	r3, [pc, #308]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f023 020f 	bic.w	r2, r3, #15
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	494a      	ldr	r1, [pc, #296]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 8003954:	4313      	orrs	r3, r2
 8003956:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8093 	beq.w	8003a8c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d107      	bne.n	800397e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800396e:	4b43      	ldr	r3, [pc, #268]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d121      	bne.n	80039be <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e113      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003986:	4b3d      	ldr	r3, [pc, #244]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d115      	bne.n	80039be <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e107      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800399e:	4b37      	ldr	r3, [pc, #220]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0fb      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ae:	4b33      	ldr	r3, [pc, #204]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0f3      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80039be:	4b2f      	ldr	r3, [pc, #188]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	492c      	ldr	r1, [pc, #176]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d0:	f7fd f992 	bl	8000cf8 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d112      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80039e0:	f7fd f98a 	bl	8000cf8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0d7      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f6:	4b21      	ldr	r3, [pc, #132]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 0318 	and.w	r3, r3, #24
 80039fe:	2b18      	cmp	r3, #24
 8003a00:	d1ee      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x18c>
 8003a02:	e043      	b.n	8003a8c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d112      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0e:	f7fd f973 	bl	8000cf8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0c0      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a24:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 0318 	and.w	r3, r3, #24
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d1ee      	bne.n	8003a0e <HAL_RCC_ClockConfig+0x1ba>
 8003a30:	e02c      	b.n	8003a8c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d122      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fd f95c 	bl	8000cf8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e0a9      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a52:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <HAL_RCC_ClockConfig+0x228>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 0318 	and.w	r3, r3, #24
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x1e8>
 8003a5e:	e015      	b.n	8003a8c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fd f94a 	bl	8000cf8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d906      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e097      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
 8003a76:	bf00      	nop
 8003a78:	40022000 	.word	0x40022000
 8003a7c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a80:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f003 0318 	and.w	r3, r3, #24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e9      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d010      	beq.n	8003aba <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	4b44      	ldr	r3, [pc, #272]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d208      	bcs.n	8003aba <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003aa8:	4b41      	ldr	r3, [pc, #260]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 020f 	bic.w	r2, r3, #15
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	493e      	ldr	r1, [pc, #248]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aba:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb4 <HAL_RCC_ClockConfig+0x360>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d210      	bcs.n	8003aea <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8003bb4 <HAL_RCC_ClockConfig+0x360>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 020f 	bic.w	r2, r3, #15
 8003ad0:	4938      	ldr	r1, [pc, #224]	@ (8003bb4 <HAL_RCC_ClockConfig+0x360>)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad8:	4b36      	ldr	r3, [pc, #216]	@ (8003bb4 <HAL_RCC_ClockConfig+0x360>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d001      	beq.n	8003aea <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e05d      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d010      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d208      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003b06:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	4927      	ldr	r1, [pc, #156]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d012      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	4b21      	ldr	r3, [pc, #132]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d209      	bcs.n	8003b4a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003b36:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	491a      	ldr	r1, [pc, #104]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d012      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	4b15      	ldr	r3, [pc, #84]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d209      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003b68:	4b11      	ldr	r3, [pc, #68]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	490e      	ldr	r1, [pc, #56]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b7c:	f000 f822 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <HAL_RCC_ClockConfig+0x35c>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	490b      	ldr	r1, [pc, #44]	@ (8003bb8 <HAL_RCC_ClockConfig+0x364>)
 8003b8c:	5ccb      	ldrb	r3, [r1, r3]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <HAL_RCC_ClockConfig+0x368>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_RCC_ClockConfig+0x36c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd f822 	bl	8000be4 <HAL_InitTick>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003ba4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	44020c00 	.word	0x44020c00
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	080054a4 	.word	0x080054a4
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	@ 0x24
 8003bc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003bca:	4b8c      	ldr	r3, [pc, #560]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0318 	and.w	r3, r3, #24
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d102      	bne.n	8003bdc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003bd6:	4b8a      	ldr	r3, [pc, #552]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	e107      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bdc:	4b87      	ldr	r3, [pc, #540]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f003 0318 	and.w	r3, r3, #24
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d112      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003be8:	4b84      	ldr	r3, [pc, #528]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003bf4:	4b81      	ldr	r3, [pc, #516]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	08db      	lsrs	r3, r3, #3
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	4a81      	ldr	r2, [pc, #516]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x240>)
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	e0f1      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003c08:	4b7e      	ldr	r3, [pc, #504]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x240>)
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e0ee      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f003 0318 	and.w	r3, r3, #24
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d102      	bne.n	8003c20 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x244>)
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e0e5      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c20:	4b76      	ldr	r3, [pc, #472]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f003 0318 	and.w	r3, r3, #24
 8003c28:	2b18      	cmp	r3, #24
 8003c2a:	f040 80dd 	bne.w	8003de8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003c2e:	4b73      	ldr	r3, [pc, #460]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003c38:	4b70      	ldr	r3, [pc, #448]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003c44:	4b6d      	ldr	r3, [pc, #436]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003c50:	4b6a      	ldr	r3, [pc, #424]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003c54:	08db      	lsrs	r3, r3, #3
 8003c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	fb02 f303 	mul.w	r3, r2, r3
 8003c60:	ee07 3a90 	vmov	s15, r3
 8003c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c68:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80b7 	beq.w	8003de2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_GetSysClockFreq+0xbe>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d056      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x16a>
 8003c80:	e077      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003c82:	4b5e      	ldr	r3, [pc, #376]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d02d      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	08db      	lsrs	r3, r3, #3
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	4a5a      	ldr	r2, [pc, #360]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x240>)
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	ee07 3a90 	vmov	s15, r3
 8003cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb8:	4b50      	ldr	r3, [pc, #320]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc0:	ee07 3a90 	vmov	s15, r3
 8003cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ccc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x248>
 8003cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003ce8:	e065      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003e10 <HAL_RCC_GetSysClockFreq+0x24c>
 8003cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d10:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x248>
 8003d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d28:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003d2c:	e043      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d38:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003e14 <HAL_RCC_GetSysClockFreq+0x250>
 8003d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d40:	4b2e      	ldr	r3, [pc, #184]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d50:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d54:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x248>
 8003d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003d70:	e021      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x254>
 8003d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d84:	4b1d      	ldr	r3, [pc, #116]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d94:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d98:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x248>
 8003d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003db4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003db6:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x238>)
 8003db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dba:	0a5b      	lsrs	r3, r3, #9
 8003dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dce:	edd7 6a06 	vldr	s13, [r7, #24]
 8003dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dda:	ee17 3a90 	vmov	r3, s15
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e004      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e001      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x240>)
 8003dea:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003dec:	69fb      	ldr	r3, [r7, #28]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3724      	adds	r7, #36	@ 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	44020c00 	.word	0x44020c00
 8003e00:	003d0900 	.word	0x003d0900
 8003e04:	03d09000 	.word	0x03d09000
 8003e08:	017d7840 	.word	0x017d7840
 8003e0c:	46000000 	.word	0x46000000
 8003e10:	4c742400 	.word	0x4c742400
 8003e14:	4bbebc20 	.word	0x4bbebc20
 8003e18:	4a742400 	.word	0x4a742400

08003e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e20:	f7ff fed0 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e2a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e2e:	4907      	ldr	r1, [pc, #28]	@ (8003e4c <HAL_RCC_GetHCLKFreq+0x30>)
 8003e30:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e32:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	4a05      	ldr	r2, [pc, #20]	@ (8003e50 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e3c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003e3e:	4b04      	ldr	r3, [pc, #16]	@ (8003e50 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e40:	681b      	ldr	r3, [r3, #0]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	44020c00 	.word	0x44020c00
 8003e4c:	080054a4 	.word	0x080054a4
 8003e50:	20000000 	.word	0x20000000

08003e54 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b0ba      	sub	sp, #232	@ 0xe8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003e78:	2500      	movs	r5, #0
 8003e7a:	ea54 0305 	orrs.w	r3, r4, r5
 8003e7e:	d00b      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003e80:	4bcd      	ldr	r3, [pc, #820]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e86:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e90:	4ac9      	ldr	r2, [pc, #804]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e92:	430b      	orrs	r3, r1
 8003e94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f002 0801 	and.w	r8, r2, #1
 8003ea4:	f04f 0900 	mov.w	r9, #0
 8003ea8:	ea58 0309 	orrs.w	r3, r8, r9
 8003eac:	d042      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d823      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003f09 	.word	0x08003f09
 8003ec4:	08003ed9 	.word	0x08003ed9
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003f09 	.word	0x08003f09
 8003ed0:	08003f09 	.word	0x08003f09
 8003ed4:	08003f09 	.word	0x08003f09
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003edc:	3308      	adds	r3, #8
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f978 	bl	80051d4 <RCCEx_PLL2_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003eea:	e00e      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ef0:	3330      	adds	r3, #48	@ 0x30
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 fa06 	bl	8005304 <RCCEx_PLL3_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003efe:	e004      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f06:	e000      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003f12:	4ba9      	ldr	r3, [pc, #676]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f18:	f023 0107 	bic.w	r1, r3, #7
 8003f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f22:	4aa5      	ldr	r2, [pc, #660]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f24:	430b      	orrs	r3, r1
 8003f26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f30:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f002 0a02 	and.w	sl, r2, #2
 8003f40:	f04f 0b00 	mov.w	fp, #0
 8003f44:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f48:	f000 8088 	beq.w	800405c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	2b28      	cmp	r3, #40	@ 0x28
 8003f54:	d868      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003f56:	a201      	add	r2, pc, #4	@ (adr r2, 8003f5c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08004031 	.word	0x08004031
 8003f60:	08004029 	.word	0x08004029
 8003f64:	08004029 	.word	0x08004029
 8003f68:	08004029 	.word	0x08004029
 8003f6c:	08004029 	.word	0x08004029
 8003f70:	08004029 	.word	0x08004029
 8003f74:	08004029 	.word	0x08004029
 8003f78:	08004029 	.word	0x08004029
 8003f7c:	08004001 	.word	0x08004001
 8003f80:	08004029 	.word	0x08004029
 8003f84:	08004029 	.word	0x08004029
 8003f88:	08004029 	.word	0x08004029
 8003f8c:	08004029 	.word	0x08004029
 8003f90:	08004029 	.word	0x08004029
 8003f94:	08004029 	.word	0x08004029
 8003f98:	08004029 	.word	0x08004029
 8003f9c:	08004015 	.word	0x08004015
 8003fa0:	08004029 	.word	0x08004029
 8003fa4:	08004029 	.word	0x08004029
 8003fa8:	08004029 	.word	0x08004029
 8003fac:	08004029 	.word	0x08004029
 8003fb0:	08004029 	.word	0x08004029
 8003fb4:	08004029 	.word	0x08004029
 8003fb8:	08004029 	.word	0x08004029
 8003fbc:	08004031 	.word	0x08004031
 8003fc0:	08004029 	.word	0x08004029
 8003fc4:	08004029 	.word	0x08004029
 8003fc8:	08004029 	.word	0x08004029
 8003fcc:	08004029 	.word	0x08004029
 8003fd0:	08004029 	.word	0x08004029
 8003fd4:	08004029 	.word	0x08004029
 8003fd8:	08004029 	.word	0x08004029
 8003fdc:	08004031 	.word	0x08004031
 8003fe0:	08004029 	.word	0x08004029
 8003fe4:	08004029 	.word	0x08004029
 8003fe8:	08004029 	.word	0x08004029
 8003fec:	08004029 	.word	0x08004029
 8003ff0:	08004029 	.word	0x08004029
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	08004029 	.word	0x08004029
 8003ffc:	08004031 	.word	0x08004031
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004004:	3308      	adds	r3, #8
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f8e4 	bl	80051d4 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004012:	e00e      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004018:	3330      	adds	r3, #48	@ 0x30
 800401a:	4618      	mov	r0, r3
 800401c:	f001 f972 	bl	8005304 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004026:	e004      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800402e:	e000      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004032:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800403a:	4b5f      	ldr	r3, [pc, #380]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800403c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004040:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404a:	4a5b      	ldr	r2, [pc, #364]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800404c:	430b      	orrs	r3, r1
 800404e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004052:	e003      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004058:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800405c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f002 0304 	and.w	r3, r2, #4
 8004068:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004072:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d04e      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800407c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004080:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004082:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004086:	d02c      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004088:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800408c:	d825      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x286>
 800408e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004092:	d028      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004098:	d81f      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x286>
 800409a:	2bc0      	cmp	r3, #192	@ 0xc0
 800409c:	d025      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x296>
 800409e:	2bc0      	cmp	r3, #192	@ 0xc0
 80040a0:	d81b      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x286>
 80040a2:	2b80      	cmp	r3, #128	@ 0x80
 80040a4:	d00f      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80040a6:	2b80      	cmp	r3, #128	@ 0x80
 80040a8:	d817      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x286>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01f      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80040ae:	2b40      	cmp	r3, #64	@ 0x40
 80040b0:	d113      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040b6:	3308      	adds	r3, #8
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 f88b 	bl	80051d4 <RCCEx_PLL2_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80040c4:	e014      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ca:	3330      	adds	r3, #48	@ 0x30
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 f919 	bl	8005304 <RCCEx_PLL3_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80040d8:	e00a      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80040e2:	bf00      	nop
 80040e4:	e004      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80040e6:	bf00      	nop
 80040e8:	e002      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80040ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10c      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80040f8:	4b2f      	ldr	r3, [pc, #188]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80040fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040fe:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004108:	4a2b      	ldr	r2, [pc, #172]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800410a:	430b      	orrs	r3, r1
 800410c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004116:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800411a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f002 0308 	and.w	r3, r2, #8
 8004126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004134:	460b      	mov	r3, r1
 8004136:	4313      	orrs	r3, r2
 8004138:	d056      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800413a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800413e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004140:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004144:	d031      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004146:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800414a:	d82a      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800414c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004150:	d02d      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004156:	d824      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004158:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800415c:	d029      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800415e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004162:	d81e      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004168:	d011      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800416a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416e:	d818      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d023      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004178:	d113      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800417a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800417e:	3308      	adds	r3, #8
 8004180:	4618      	mov	r0, r3
 8004182:	f001 f827 	bl	80051d4 <RCCEx_PLL2_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800418c:	e017      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800418e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004192:	3330      	adds	r3, #48	@ 0x30
 8004194:	4618      	mov	r0, r3
 8004196:	f001 f8b5 	bl	8005304 <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80041a0:	e00d      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80041a8:	e009      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80041aa:	bf00      	nop
 80041ac:	e007      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80041ae:	bf00      	nop
 80041b0:	e005      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80041b2:	bf00      	nop
 80041b4:	e003      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80041b6:	bf00      	nop
 80041b8:	44020c00 	.word	0x44020c00
        break;
 80041bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80041c6:	4bb9      	ldr	r3, [pc, #740]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041cc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80041d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041d6:	4ab5      	ldr	r2, [pc, #724]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80041de:	e003      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80041e4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f002 0310 	and.w	r3, r2, #16
 80041f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80041fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004202:	460b      	mov	r3, r1
 8004204:	4313      	orrs	r3, r2
 8004206:	d053      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800420c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800420e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004212:	d031      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004214:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004218:	d82a      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800421a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800421e:	d02d      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004220:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004224:	d824      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004226:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800422a:	d029      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800422c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004230:	d81e      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004236:	d011      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800423c:	d818      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d020      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004246:	d113      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800424c:	3308      	adds	r3, #8
 800424e:	4618      	mov	r0, r3
 8004250:	f000 ffc0 	bl	80051d4 <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800425a:	e014      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800425c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004260:	3330      	adds	r3, #48	@ 0x30
 8004262:	4618      	mov	r0, r3
 8004264:	f001 f84e 	bl	8005304 <RCCEx_PLL3_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800426e:	e00a      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004276:	e006      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004278:	bf00      	nop
 800427a:	e004      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800427c:	bf00      	nop
 800427e:	e002      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004280:	bf00      	nop
 8004282:	e000      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004286:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10c      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800428e:	4b87      	ldr	r3, [pc, #540]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004294:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800429c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800429e:	4a83      	ldr	r2, [pc, #524]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042a0:	430b      	orrs	r3, r1
 80042a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80042a6:	e003      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042ac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f002 0320 	and.w	r3, r2, #32
 80042bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d053      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80042d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80042da:	d031      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80042dc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80042e0:	d82a      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80042e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042e6:	d02d      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042ec:	d824      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80042ee:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80042f2:	d029      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80042f4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80042f8:	d81e      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80042fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fe:	d011      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004304:	d818      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d020      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800430a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430e:	d113      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004314:	3308      	adds	r3, #8
 8004316:	4618      	mov	r0, r3
 8004318:	f000 ff5c 	bl	80051d4 <RCCEx_PLL2_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004322:	e014      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004328:	3330      	adds	r3, #48	@ 0x30
 800432a:	4618      	mov	r0, r3
 800432c:	f000 ffea 	bl	8005304 <RCCEx_PLL3_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004336:	e00a      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800433e:	e006      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004340:	bf00      	nop
 8004342:	e004      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004344:	bf00      	nop
 8004346:	e002      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004348:	bf00      	nop
 800434a:	e000      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800434c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10c      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004356:	4b55      	ldr	r3, [pc, #340]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004358:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800435c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	4a51      	ldr	r2, [pc, #324]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004368:	430b      	orrs	r3, r1
 800436a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800436e:	e003      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004374:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004388:	2300      	movs	r3, #0
 800438a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800438e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d053      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004398:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800439c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80043a2:	d031      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80043a4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80043a8:	d82a      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80043aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043ae:	d02d      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80043b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043b4:	d824      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80043b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043ba:	d029      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80043bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043c0:	d81e      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80043c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043c6:	d011      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x598>
 80043c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043cc:	d818      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80043d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d6:	d113      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043dc:	3308      	adds	r3, #8
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fef8 	bl	80051d4 <RCCEx_PLL2_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80043ea:	e014      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043f0:	3330      	adds	r3, #48	@ 0x30
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 ff86 	bl	8005304 <RCCEx_PLL3_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80043fe:	e00a      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004406:	e006      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004408:	bf00      	nop
 800440a:	e004      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800440c:	bf00      	nop
 800440e:	e002      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004416:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800441e:	4b23      	ldr	r3, [pc, #140]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004424:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800442c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442e:	4a1f      	ldr	r2, [pc, #124]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004430:	430b      	orrs	r3, r1
 8004432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004436:	e003      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800443c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800444c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004456:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800445a:	460b      	mov	r3, r1
 800445c:	4313      	orrs	r3, r2
 800445e:	d03d      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004466:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800446a:	d01b      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800446c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004470:	d814      	bhi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004476:	d017      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800447c:	d80e      	bhi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x648>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004486:	d109      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800448c:	3330      	adds	r3, #48	@ 0x30
 800448e:	4618      	mov	r0, r3
 8004490:	f000 ff38 	bl	8005304 <RCCEx_PLL3_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800449a:	e00a      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80044a2:	e006      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80044a4:	bf00      	nop
 80044a6:	e004      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80044a8:	bf00      	nop
 80044aa:	e002      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80044ac:	44020c00 	.word	0x44020c00
        break;
 80044b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80044ba:	4b99      	ldr	r3, [pc, #612]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044c0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80044c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044ca:	4a95      	ldr	r2, [pc, #596]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044cc:	430b      	orrs	r3, r1
 80044ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80044d2:	e003      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80044e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d03b      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80044fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004502:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004506:	d01b      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004508:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800450c:	d814      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800450e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004512:	d017      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004514:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004518:	d80e      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d014      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800451e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004522:	d109      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004528:	3330      	adds	r3, #48	@ 0x30
 800452a:	4618      	mov	r0, r3
 800452c:	f000 feea 	bl	8005304 <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004536:	e008      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800453e:	e004      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004540:	bf00      	nop
 8004542:	e002      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10c      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004552:	4b73      	ldr	r3, [pc, #460]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004554:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004558:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800455c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004562:	4a6f      	ldr	r2, [pc, #444]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004564:	430b      	orrs	r3, r1
 8004566:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800456a:	e003      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004570:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004580:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004584:	2300      	movs	r3, #0
 8004586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800458a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800458e:	460b      	mov	r3, r1
 8004590:	4313      	orrs	r3, r2
 8004592:	d03d      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800459c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045a0:	d01b      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x786>
 80045a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045a6:	d814      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80045a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045ac:	d017      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80045ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045b2:	d80e      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d014      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80045b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045bc:	d109      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c2:	3330      	adds	r3, #48	@ 0x30
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fe9d 	bl	8005304 <RCCEx_PLL3_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80045d8:	e004      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80045da:	bf00      	nop
 80045dc:	e002      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80045e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10d      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80045ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fe:	4a48      	ldr	r2, [pc, #288]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004600:	430b      	orrs	r3, r1
 8004602:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004606:	e003      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800460c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800461c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004620:	2300      	movs	r3, #0
 8004622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004626:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800462a:	460b      	mov	r3, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	d035      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800463c:	d015      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800463e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004642:	d80e      	bhi.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d012      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800464c:	d109      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800464e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004652:	3330      	adds	r3, #48	@ 0x30
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fe55 	bl	8005304 <RCCEx_PLL3_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004660:	e006      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004668:	e002      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800466e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004670:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10d      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004678:	4b29      	ldr	r3, [pc, #164]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800467a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800467e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468a:	4a25      	ldr	r2, [pc, #148]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800468c:	430b      	orrs	r3, r1
 800468e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004692:	e003      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004694:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004698:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800469c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	2100      	movs	r1, #0
 80046a6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80046aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80046b6:	460b      	mov	r3, r1
 80046b8:	4313      	orrs	r3, r2
 80046ba:	d037      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80046bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c8:	d015      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80046ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046ce:	d80e      	bhi.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d012      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80046d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046d8:	d109      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046de:	3330      	adds	r3, #48	@ 0x30
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fe0f 	bl	8005304 <RCCEx_PLL3_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80046ec:	e006      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80046f4:	e002      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80046fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80046fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800470a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800470e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	4a02      	ldr	r2, [pc, #8]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004718:	430b      	orrs	r3, r1
 800471a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800471e:	e005      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8004720:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004728:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800472c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	2100      	movs	r1, #0
 8004736:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800473c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800473e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004742:	460b      	mov	r3, r1
 8004744:	4313      	orrs	r3, r2
 8004746:	d00e      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004748:	4bb8      	ldr	r3, [pc, #736]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	4ab7      	ldr	r2, [pc, #732]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800474e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004752:	61d3      	str	r3, [r2, #28]
 8004754:	4bb5      	ldr	r3, [pc, #724]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004756:	69d9      	ldr	r1, [r3, #28]
 8004758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800475c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004760:	4ab2      	ldr	r2, [pc, #712]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004762:	430b      	orrs	r3, r1
 8004764:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004772:	673b      	str	r3, [r7, #112]	@ 0x70
 8004774:	2300      	movs	r3, #0
 8004776:	677b      	str	r3, [r7, #116]	@ 0x74
 8004778:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800477c:	460b      	mov	r3, r1
 800477e:	4313      	orrs	r3, r2
 8004780:	d055      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800478a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800478e:	d031      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004790:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004794:	d82a      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479a:	d02d      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800479c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a0:	d824      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 80047a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047a6:	d029      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80047a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ac:	d81e      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 80047ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047b2:	d011      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80047b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047b8:	d818      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d020      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80047be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c2:	d113      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047c8:	3308      	adds	r3, #8
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fd02 	bl	80051d4 <RCCEx_PLL2_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80047d6:	e014      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047dc:	3330      	adds	r3, #48	@ 0x30
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fd90 	bl	8005304 <RCCEx_PLL3_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80047ea:	e00a      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80047f2:	e006      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80047f4:	bf00      	nop
 80047f6:	e004      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80047f8:	bf00      	nop
 80047fa:	e002      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80047fc:	bf00      	nop
 80047fe:	e000      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004802:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10d      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800480a:	4b88      	ldr	r3, [pc, #544]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800480c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004810:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800481c:	4a83      	ldr	r2, [pc, #524]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800481e:	430b      	orrs	r3, r1
 8004820:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004824:	e003      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800482a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800482e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800483a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800483c:	2300      	movs	r3, #0
 800483e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004840:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d055      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800484a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004856:	d031      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004858:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800485c:	d82a      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800485e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004862:	d02d      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004868:	d824      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800486a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800486e:	d029      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004870:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004874:	d81e      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800487a:	d011      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004880:	d818      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d020      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488a:	d113      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800488c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004890:	3308      	adds	r3, #8
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fc9e 	bl	80051d4 <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800489e:	e014      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048a4:	3330      	adds	r3, #48	@ 0x30
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fd2c 	bl	8005304 <RCCEx_PLL3_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80048b2:	e00a      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048ba:	e006      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80048bc:	bf00      	nop
 80048be:	e004      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80048c0:	bf00      	nop
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10d      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80048d2:	4b56      	ldr	r3, [pc, #344]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80048d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80048d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80048dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e4:	4a51      	ldr	r2, [pc, #324]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80048e6:	430b      	orrs	r3, r1
 80048e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80048ec:	e003      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80048f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004902:	663b      	str	r3, [r7, #96]	@ 0x60
 8004904:	2300      	movs	r3, #0
 8004906:	667b      	str	r3, [r7, #100]	@ 0x64
 8004908:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d032      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800491a:	2b05      	cmp	r3, #5
 800491c:	d80f      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800491e:	2b03      	cmp	r3, #3
 8004920:	d211      	bcs.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004922:	2b01      	cmp	r3, #1
 8004924:	d911      	bls.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004926:	2b02      	cmp	r3, #2
 8004928:	d109      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800492a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800492e:	3308      	adds	r3, #8
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fc4f 	bl	80051d4 <RCCEx_PLL2_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800493c:	e006      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004944:	e002      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800494a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004954:	4b35      	ldr	r3, [pc, #212]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800495a:	f023 0107 	bic.w	r1, r3, #7
 800495e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004962:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004966:	4a31      	ldr	r2, [pc, #196]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004968:	430b      	orrs	r3, r1
 800496a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800496e:	e003      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004974:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004978:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	2100      	movs	r1, #0
 8004982:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800498a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800498e:	460b      	mov	r3, r1
 8004990:	4313      	orrs	r3, r2
 8004992:	d024      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004998:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d005      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049aa:	e002      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80049ac:	bf00      	nop
 80049ae:	e000      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80049b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80049ba:	4b1c      	ldr	r3, [pc, #112]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80049bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049c0:	f023 0108 	bic.w	r1, r3, #8
 80049c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049cc:	4a17      	ldr	r2, [pc, #92]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80049ce:	430b      	orrs	r3, r1
 80049d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049da:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ec:	2300      	movs	r3, #0
 80049ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80049f0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f000 80b9 	beq.w	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	4a0b      	ldr	r2, [pc, #44]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a08:	f7fc f976 	bl	8000cf8 <HAL_GetTick>
 8004a0c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004a10:	e010      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a12:	f7fc f971 	bl	8000cf8 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d908      	bls.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a28:	e00a      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004a2a:	bf00      	nop
 8004a2c:	44020c00 	.word	0x44020c00
 8004a30:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004a34:	4bba      	ldr	r3, [pc, #744]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0e8      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8004a40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f040 808e 	bne.w	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a4a:	4bb6      	ldr	r3, [pc, #728]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d023      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a64:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01b      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a70:	4bac      	ldr	r3, [pc, #688]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a7e:	4ba9      	ldr	r3, [pc, #676]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a84:	4aa7      	ldr	r2, [pc, #668]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a8e:	4ba5      	ldr	r3, [pc, #660]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a94:	4aa3      	ldr	r2, [pc, #652]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a9e:	4aa1      	ldr	r2, [pc, #644]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d019      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fc f920 	bl	8000cf8 <HAL_GetTick>
 8004ab8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004abc:	e00d      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004abe:	f7fc f91b 	bl	8000cf8 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ac8:	1ad2      	subs	r2, r2, r3
 8004aca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d903      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ada:	4b92      	ldr	r3, [pc, #584]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ea      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004ae8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d135      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b00:	d110      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8004b02:	4b88      	ldr	r3, [pc, #544]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b18:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004b1c:	4a81      	ldr	r2, [pc, #516]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	61d3      	str	r3, [r2, #28]
 8004b22:	e005      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004b24:	4b7f      	ldr	r3, [pc, #508]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4a7e      	ldr	r2, [pc, #504]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b2a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b2e:	61d3      	str	r3, [r2, #28]
 8004b30:	4b7c      	ldr	r3, [pc, #496]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b36:	4a7b      	ldr	r2, [pc, #492]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b40:	4b78      	ldr	r3, [pc, #480]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b42:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b52:	4a74      	ldr	r2, [pc, #464]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b54:	430b      	orrs	r3, r1
 8004b56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b5a:	e008      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b60:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b6a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b84:	460b      	mov	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d035      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b92:	2b30      	cmp	r3, #48	@ 0x30
 8004b94:	d014      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8004b96:	2b30      	cmp	r3, #48	@ 0x30
 8004b98:	d80e      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d012      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d80a      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d106      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004baa:	4b5e      	ldr	r3, [pc, #376]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	4a5d      	ldr	r2, [pc, #372]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004bb6:	e008      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004bbe:	e004      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004bc0:	bf00      	nop
 8004bc2:	e002      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004bc4:	bf00      	nop
 8004bc6:	e000      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004bd2:	4b54      	ldr	r3, [pc, #336]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bd8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004be4:	4a4f      	ldr	r2, [pc, #316]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004bec:	e003      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bf2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c04:	2300      	movs	r3, #0
 8004c06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	d033      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8004c1e:	2b40      	cmp	r3, #64	@ 0x40
 8004c20:	d007      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004c22:	e010      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c24:	4b3f      	ldr	r3, [pc, #252]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c28:	4a3e      	ldr	r2, [pc, #248]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c2e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004c30:	e00d      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c36:	3308      	adds	r3, #8
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 facb 	bl	80051d4 <RCCEx_PLL2_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004c44:	e003      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004c56:	4b33      	ldr	r3, [pc, #204]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c5c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c68:	4a2e      	ldr	r2, [pc, #184]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c70:	e003      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c76:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c88:	2300      	movs	r3, #0
 8004c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c8c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c90:	460b      	mov	r3, r1
 8004c92:	4313      	orrs	r3, r2
 8004c94:	d04c      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d827      	bhi.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004cbd 	.word	0x08004cbd
 8004cac:	08004ccb 	.word	0x08004ccb
 8004cb0:	08004cdf 	.word	0x08004cdf
 8004cb4:	08004cfb 	.word	0x08004cfb
 8004cb8:	08004cfb 	.word	0x08004cfb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cbc:	4b19      	ldr	r3, [pc, #100]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	4a18      	ldr	r2, [pc, #96]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004cc8:	e018      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cce:	3308      	adds	r3, #8
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fa7f 	bl	80051d4 <RCCEx_PLL2_Config>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004cdc:	e00e      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ce2:	3330      	adds	r3, #48	@ 0x30
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fb0d 	bl	8005304 <RCCEx_PLL3_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004cf0:	e004      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004cf8:	e000      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8004cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d111      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004d04:	4b07      	ldr	r3, [pc, #28]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d0a:	f023 0107 	bic.w	r1, r3, #7
 8004d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d16:	4a03      	ldr	r2, [pc, #12]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d1e:	e007      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8004d20:	44020800 	.word	0x44020800
 8004d24:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d28:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d2c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004d30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d3e:	2300      	movs	r3, #0
 8004d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d42:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004d46:	460b      	mov	r3, r1
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f000 8081 	beq.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d85f      	bhi.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8004d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d60 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004de5 	.word	0x08004de5
 8004d64:	08004e1b 	.word	0x08004e1b
 8004d68:	08004e1b 	.word	0x08004e1b
 8004d6c:	08004e1b 	.word	0x08004e1b
 8004d70:	08004e1b 	.word	0x08004e1b
 8004d74:	08004e1b 	.word	0x08004e1b
 8004d78:	08004e1b 	.word	0x08004e1b
 8004d7c:	08004e1b 	.word	0x08004e1b
 8004d80:	08004df3 	.word	0x08004df3
 8004d84:	08004e1b 	.word	0x08004e1b
 8004d88:	08004e1b 	.word	0x08004e1b
 8004d8c:	08004e1b 	.word	0x08004e1b
 8004d90:	08004e1b 	.word	0x08004e1b
 8004d94:	08004e1b 	.word	0x08004e1b
 8004d98:	08004e1b 	.word	0x08004e1b
 8004d9c:	08004e1b 	.word	0x08004e1b
 8004da0:	08004e07 	.word	0x08004e07
 8004da4:	08004e1b 	.word	0x08004e1b
 8004da8:	08004e1b 	.word	0x08004e1b
 8004dac:	08004e1b 	.word	0x08004e1b
 8004db0:	08004e1b 	.word	0x08004e1b
 8004db4:	08004e1b 	.word	0x08004e1b
 8004db8:	08004e1b 	.word	0x08004e1b
 8004dbc:	08004e1b 	.word	0x08004e1b
 8004dc0:	08004e23 	.word	0x08004e23
 8004dc4:	08004e1b 	.word	0x08004e1b
 8004dc8:	08004e1b 	.word	0x08004e1b
 8004dcc:	08004e1b 	.word	0x08004e1b
 8004dd0:	08004e1b 	.word	0x08004e1b
 8004dd4:	08004e1b 	.word	0x08004e1b
 8004dd8:	08004e1b 	.word	0x08004e1b
 8004ddc:	08004e1b 	.word	0x08004e1b
 8004de0:	08004e23 	.word	0x08004e23
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de4:	4bb9      	ldr	r3, [pc, #740]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	4ab8      	ldr	r2, [pc, #736]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004df0:	e018      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df6:	3308      	adds	r3, #8
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f9eb 	bl	80051d4 <RCCEx_PLL2_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004e04:	e00e      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e0a:	3330      	adds	r3, #48	@ 0x30
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fa79 	bl	8005304 <RCCEx_PLL3_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004e18:	e004      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8004e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10d      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004e2c:	4ba7      	ldr	r3, [pc, #668]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e32:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e3e:	4aa3      	ldr	r2, [pc, #652]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004e40:	430b      	orrs	r3, r1
 8004e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e4c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004e50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e62:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d04e      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004e6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e78:	d02e      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7e:	d827      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e80:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e82:	d02b      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8004e84:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e86:	d823      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e88:	2b80      	cmp	r3, #128	@ 0x80
 8004e8a:	d017      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8004e8c:	2b80      	cmp	r3, #128	@ 0x80
 8004e8e:	d81f      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d007      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8004e98:	e01a      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9a:	4b8c      	ldr	r3, [pc, #560]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	4a8b      	ldr	r2, [pc, #556]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ea6:	e01a      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eac:	3308      	adds	r3, #8
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f990 	bl	80051d4 <RCCEx_PLL2_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004eba:	e010      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec0:	3330      	adds	r3, #48	@ 0x30
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fa1e 	bl	8005304 <RCCEx_PLL3_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ece:	e006      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ed6:	e002      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004ed8:	bf00      	nop
 8004eda:	e000      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ede:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10d      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004ee6:	4b79      	ldr	r3, [pc, #484]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eec:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8004ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ef8:	4974      	ldr	r1, [pc, #464]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f06:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f20:	460b      	mov	r3, r1
 8004f22:	4313      	orrs	r3, r2
 8004f24:	d055      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004f2e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f32:	d031      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8004f34:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f38:	d82a      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f3e:	d02d      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8004f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f44:	d824      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004f46:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f4a:	d029      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8004f4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f50:	d81e      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f56:	d011      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8004f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f5c:	d818      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d020      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f66:	d113      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f930 	bl	80051d4 <RCCEx_PLL2_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004f7a:	e014      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f80:	3330      	adds	r3, #48	@ 0x30
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f9be 	bl	8005304 <RCCEx_PLL3_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f96:	e006      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004f98:	bf00      	nop
 8004f9a:	e004      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004fae:	4b47      	ldr	r3, [pc, #284]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fb4:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8004fb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004fc0:	4942      	ldr	r1, [pc, #264]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004fc8:	e003      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	61b9      	str	r1, [r7, #24]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4313      	orrs	r3, r2
 8004fec:	d03c      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d81b      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8004ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8005000 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	0800503b 	.word	0x0800503b
 8005004:	08005011 	.word	0x08005011
 8005008:	0800501f 	.word	0x0800501f
 800500c:	0800503b 	.word	0x0800503b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005010:	4b2e      	ldr	r3, [pc, #184]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	4a2d      	ldr	r2, [pc, #180]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800501a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800501c:	e00e      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800501e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005022:	3308      	adds	r3, #8
 8005024:	4618      	mov	r0, r3
 8005026:	f000 f8d5 	bl	80051d4 <RCCEx_PLL2_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005030:	e004      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005038:	e000      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 800503a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10d      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005044:	4b21      	ldr	r3, [pc, #132]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005046:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005056:	491d      	ldr	r1, [pc, #116]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800505e:	e003      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005060:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005064:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	2100      	movs	r1, #0
 8005072:	6139      	str	r1, [r7, #16]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	d03c      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800508c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005090:	d00e      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005096:	d815      	bhi.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d019      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 800509c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a0:	d110      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a2:	4b0a      	ldr	r3, [pc, #40]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	4a09      	ldr	r2, [pc, #36]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80050ae:	e010      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050b4:	3308      	adds	r3, #8
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 f88c 	bl	80051d4 <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80050c2:	e006      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050ca:	e002      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80050cc:	44020c00 	.word	0x44020c00
        break;
 80050d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10d      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80050da:	4b3d      	ldr	r3, [pc, #244]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80050dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ec:	4938      	ldr	r1, [pc, #224]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80050f4:	e003      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050fa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	2100      	movs	r1, #0
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005114:	460b      	mov	r3, r1
 8005116:	4313      	orrs	r3, r2
 8005118:	d038      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800511a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800511e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005122:	2b30      	cmp	r3, #48	@ 0x30
 8005124:	d01b      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005126:	2b30      	cmp	r3, #48	@ 0x30
 8005128:	d815      	bhi.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 800512a:	2b10      	cmp	r3, #16
 800512c:	d002      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800512e:	2b20      	cmp	r3, #32
 8005130:	d007      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005132:	e010      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005134:	4b26      	ldr	r3, [pc, #152]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	4a25      	ldr	r2, [pc, #148]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800513a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800513e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005140:	e00e      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005146:	3330      	adds	r3, #48	@ 0x30
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f8db 	bl	8005304 <RCCEx_PLL3_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005154:	e004      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800515c:	e000      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800515e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005160:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10d      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005168:	4b19      	ldr	r3, [pc, #100]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800516a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800516e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005176:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800517a:	4915      	ldr	r1, [pc, #84]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005182:	e003      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005188:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800518c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	2100      	movs	r1, #0
 8005196:	6039      	str	r1, [r7, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	607b      	str	r3, [r7, #4]
 800519e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80051a2:	460b      	mov	r3, r1
 80051a4:	4313      	orrs	r3, r2
 80051a6:	d00c      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80051a8:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80051aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051ba:	4905      	ldr	r1, [pc, #20]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80051c2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	37e8      	adds	r7, #232	@ 0xe8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d0:	44020c00 	.word	0x44020c00

080051d4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80051dc:	4b48      	ldr	r3, [pc, #288]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a47      	ldr	r2, [pc, #284]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 80051e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051e8:	f7fb fd86 	bl	8000cf8 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051ee:	e008      	b.n	8005202 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051f0:	f7fb fd82 	bl	8000cf8 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e07a      	b.n	80052f8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005202:	4b3f      	ldr	r3, [pc, #252]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800520e:	4b3c      	ldr	r3, [pc, #240]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6811      	ldr	r1, [r2, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6852      	ldr	r2, [r2, #4]
 8005222:	0212      	lsls	r2, r2, #8
 8005224:	430a      	orrs	r2, r1
 8005226:	4936      	ldr	r1, [pc, #216]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005228:	4313      	orrs	r3, r2
 800522a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	3b01      	subs	r3, #1
 8005232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	3b01      	subs	r3, #1
 800523c:	025b      	lsls	r3, r3, #9
 800523e:	b29b      	uxth	r3, r3
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	3b01      	subs	r3, #1
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	3b01      	subs	r3, #1
 8005256:	061b      	lsls	r3, r3, #24
 8005258:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800525c:	4928      	ldr	r1, [pc, #160]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 800525e:	4313      	orrs	r3, r2
 8005260:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005262:	4b27      	ldr	r3, [pc, #156]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	f023 020c 	bic.w	r2, r3, #12
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	4924      	ldr	r1, [pc, #144]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005270:	4313      	orrs	r3, r2
 8005272:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005274:	4b22      	ldr	r3, [pc, #136]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	f023 0220 	bic.w	r2, r3, #32
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	491f      	ldr	r1, [pc, #124]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005282:	4313      	orrs	r3, r2
 8005284:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005286:	4b1e      	ldr	r3, [pc, #120]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	491c      	ldr	r1, [pc, #112]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005294:	4b1a      	ldr	r3, [pc, #104]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 8005296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005298:	4a19      	ldr	r2, [pc, #100]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 800529a:	f023 0310 	bic.w	r3, r3, #16
 800529e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80052a0:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052a8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6a12      	ldr	r2, [r2, #32]
 80052b0:	00d2      	lsls	r2, r2, #3
 80052b2:	4913      	ldr	r1, [pc, #76]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	4a10      	ldr	r2, [pc, #64]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 80052be:	f043 0310 	orr.w	r3, r3, #16
 80052c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80052c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 80052ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052d0:	f7fb fd12 	bl	8000cf8 <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052d6:	e008      	b.n	80052ea <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052d8:	f7fb fd0e 	bl	8000cf8 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e006      	b.n	80052f8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052ea:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <RCCEx_PLL2_Config+0x12c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0

}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	44020c00 	.word	0x44020c00

08005304 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800530c:	4b48      	ldr	r3, [pc, #288]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a47      	ldr	r2, [pc, #284]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 8005312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005316:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005318:	f7fb fcee 	bl	8000cf8 <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800531e:	e008      	b.n	8005332 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005320:	f7fb fcea 	bl	8000cf8 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e07a      	b.n	8005428 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005332:	4b3f      	ldr	r3, [pc, #252]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800533e:	4b3c      	ldr	r3, [pc, #240]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005342:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005346:	f023 0303 	bic.w	r3, r3, #3
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6811      	ldr	r1, [r2, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6852      	ldr	r2, [r2, #4]
 8005352:	0212      	lsls	r2, r2, #8
 8005354:	430a      	orrs	r2, r1
 8005356:	4936      	ldr	r1, [pc, #216]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 8005358:	4313      	orrs	r3, r2
 800535a:	630b      	str	r3, [r1, #48]	@ 0x30
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	3b01      	subs	r3, #1
 8005362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	3b01      	subs	r3, #1
 800536c:	025b      	lsls	r3, r3, #9
 800536e:	b29b      	uxth	r3, r3
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	3b01      	subs	r3, #1
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	3b01      	subs	r3, #1
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800538c:	4928      	ldr	r1, [pc, #160]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005392:	4b27      	ldr	r3, [pc, #156]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	f023 020c 	bic.w	r2, r3, #12
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	4924      	ldr	r1, [pc, #144]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80053a4:	4b22      	ldr	r3, [pc, #136]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	f023 0220 	bic.w	r2, r3, #32
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	491f      	ldr	r1, [pc, #124]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80053b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	491c      	ldr	r1, [pc, #112]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80053c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c8:	4a19      	ldr	r2, [pc, #100]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053ca:	f023 0310 	bic.w	r3, r3, #16
 80053ce:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80053d0:	4b17      	ldr	r3, [pc, #92]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6a12      	ldr	r2, [r2, #32]
 80053e0:	00d2      	lsls	r2, r2, #3
 80053e2:	4913      	ldr	r1, [pc, #76]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80053e8:	4b11      	ldr	r3, [pc, #68]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ec:	4a10      	ldr	r2, [pc, #64]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053ee:	f043 0310 	orr.w	r3, r3, #16
 80053f2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80053f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005400:	f7fb fc7a 	bl	8000cf8 <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005406:	e008      	b.n	800541a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005408:	f7fb fc76 	bl	8000cf8 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e006      	b.n	8005428 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800541a:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <RCCEx_PLL3_Config+0x12c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	44020c00 	.word	0x44020c00

08005434 <memset>:
 8005434:	4402      	add	r2, r0
 8005436:	4603      	mov	r3, r0
 8005438:	4293      	cmp	r3, r2
 800543a:	d100      	bne.n	800543e <memset+0xa>
 800543c:	4770      	bx	lr
 800543e:	f803 1b01 	strb.w	r1, [r3], #1
 8005442:	e7f9      	b.n	8005438 <memset+0x4>

08005444 <__libc_init_array>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	4d0d      	ldr	r5, [pc, #52]	@ (800547c <__libc_init_array+0x38>)
 8005448:	2600      	movs	r6, #0
 800544a:	4c0d      	ldr	r4, [pc, #52]	@ (8005480 <__libc_init_array+0x3c>)
 800544c:	1b64      	subs	r4, r4, r5
 800544e:	10a4      	asrs	r4, r4, #2
 8005450:	42a6      	cmp	r6, r4
 8005452:	d109      	bne.n	8005468 <__libc_init_array+0x24>
 8005454:	4d0b      	ldr	r5, [pc, #44]	@ (8005484 <__libc_init_array+0x40>)
 8005456:	2600      	movs	r6, #0
 8005458:	4c0b      	ldr	r4, [pc, #44]	@ (8005488 <__libc_init_array+0x44>)
 800545a:	f000 f817 	bl	800548c <_init>
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	42a6      	cmp	r6, r4
 8005464:	d105      	bne.n	8005472 <__libc_init_array+0x2e>
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	f855 3b04 	ldr.w	r3, [r5], #4
 800546c:	3601      	adds	r6, #1
 800546e:	4798      	blx	r3
 8005470:	e7ee      	b.n	8005450 <__libc_init_array+0xc>
 8005472:	f855 3b04 	ldr.w	r3, [r5], #4
 8005476:	3601      	adds	r6, #1
 8005478:	4798      	blx	r3
 800547a:	e7f2      	b.n	8005462 <__libc_init_array+0x1e>
 800547c:	080054c4 	.word	0x080054c4
 8005480:	080054c4 	.word	0x080054c4
 8005484:	080054c4 	.word	0x080054c4
 8005488:	080054c8 	.word	0x080054c8

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
